
Practica5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000caf8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  0800cc88  0800cc88  0001cc88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d26c  0800d26c  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d26c  0800d26c  0001d26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d274  0800d274  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d274  0800d274  0001d274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d278  0800d278  0001d278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800d27c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a9c  200000a8  0800d324  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002b44  0800d324  00022b44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030865  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000059aa  00000000  00000000  0005093d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002818  00000000  00000000  000562e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000025e0  00000000  00000000  00058b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007bf3  00000000  00000000  0005b0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cfbb  00000000  00000000  00062cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113f2c  00000000  00000000  0008fc8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a3bba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b57c  00000000  00000000  001a3c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cc70 	.word	0x0800cc70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800cc70 	.word	0x0800cc70

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	2b00      	cmp	r3, #0
 800059a:	d013      	beq.n	80005c4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00b      	beq.n	80005c4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005ac:	e000      	b.n	80005b0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0f9      	beq.n	80005ae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c4:	687b      	ldr	r3, [r7, #4]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <configureTimerForRunTimeStats>:
void printTask_func(void *argument);
void tarea_UART_func(void *argument);

/* USER CODE BEGIN PFP */
volatile unsigned long ulHighFrequencyTimerTicks;
void configureTimerForRunTimeStats(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	ulHighFrequencyTimerTicks = 0;
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <configureTimerForRunTimeStats+0x14>)
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7);
 80005de:	4803      	ldr	r0, [pc, #12]	; (80005ec <configureTimerForRunTimeStats+0x18>)
 80005e0:	f005 fa32 	bl	8005a48 <HAL_TIM_Base_Start_IT>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200008b0 	.word	0x200008b0
 80005ec:	2000021c 	.word	0x2000021c

080005f0 <getRunTimeCounterValue>:
unsigned long getRunTimeCounterValue(void) {
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <getRunTimeCounterValue+0x14>)
 80005f6:	681b      	ldr	r3, [r3, #0]

}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	200008b0 	.word	0x200008b0

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f001 fcbf 	bl	8001f8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f884 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 fae0 	bl	8000bd8 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000618:	f000 f8e4 	bl	80007e4 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800061c:	f000 f91a 	bl	8000854 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000620:	f000 f956 	bl	80008d0 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000624:	f000 f9d6 	bl	80009d4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000628:	f000 fa48 	bl	8000abc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800062c:	f000 fa76 	bl	8000b1c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000630:	f000 faa4 	bl	8000b7c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8000634:	f000 fa0c 	bl	8000a50 <MX_TIM7_Init>
  MX_RTC_Init();
 8000638:	f000 f970 	bl	800091c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  status_acc = BSP_ACCELERO_Init_INT();
 800063c:	f000 fc84 	bl	8000f48 <BSP_ACCELERO_Init_INT>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	4b21      	ldr	r3, [pc, #132]	; (80006cc <main+0xc4>)
 8000646:	701a      	strb	r2, [r3, #0]
  if (status_acc == ACCELERO_OK){
 8000648:	4b20      	ldr	r3, [pc, #128]	; (80006cc <main+0xc4>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d102      	bne.n	8000656 <main+0x4e>
	  printf("Acelerometro inicializado\r\n");
 8000650:	481f      	ldr	r0, [pc, #124]	; (80006d0 <main+0xc8>)
 8000652:	f00b facf 	bl	800bbf4 <puts>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000656:	f007 fe1f 	bl	8008298 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of print_queue */
  print_queueHandle = osMessageQueueNew (8, sizeof(uintptr_t), &print_queue_attributes);
 800065a:	4a1e      	ldr	r2, [pc, #120]	; (80006d4 <main+0xcc>)
 800065c:	2104      	movs	r1, #4
 800065e:	2008      	movs	r0, #8
 8000660:	f007 ffe0 	bl	8008624 <osMessageQueueNew>
 8000664:	4603      	mov	r3, r0
 8000666:	4a1c      	ldr	r2, [pc, #112]	; (80006d8 <main+0xd0>)
 8000668:	6013      	str	r3, [r2, #0]

  /* creation of receive_queue */
  receive_queueHandle = osMessageQueueNew (3, sizeof(uint8_t), &receive_queue_attributes);
 800066a:	4a1c      	ldr	r2, [pc, #112]	; (80006dc <main+0xd4>)
 800066c:	2101      	movs	r1, #1
 800066e:	2003      	movs	r0, #3
 8000670:	f007 ffd8 	bl	8008624 <osMessageQueueNew>
 8000674:	4603      	mov	r3, r0
 8000676:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <main+0xd8>)
 8000678:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of RTC_set */
  RTC_setHandle = osThreadNew(RTC_set_func, NULL, &RTC_set_attributes);
 800067a:	4a1a      	ldr	r2, [pc, #104]	; (80006e4 <main+0xdc>)
 800067c:	2100      	movs	r1, #0
 800067e:	481a      	ldr	r0, [pc, #104]	; (80006e8 <main+0xe0>)
 8000680:	f007 fe54 	bl	800832c <osThreadNew>
 8000684:	4603      	mov	r3, r0
 8000686:	4a19      	ldr	r2, [pc, #100]	; (80006ec <main+0xe4>)
 8000688:	6013      	str	r3, [r2, #0]

  /* creation of readAccel */
  readAccelHandle = osThreadNew(readAccel_func, NULL, &readAccel_attributes);
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <main+0xe8>)
 800068c:	2100      	movs	r1, #0
 800068e:	4819      	ldr	r0, [pc, #100]	; (80006f4 <main+0xec>)
 8000690:	f007 fe4c 	bl	800832c <osThreadNew>
 8000694:	4603      	mov	r3, r0
 8000696:	4a18      	ldr	r2, [pc, #96]	; (80006f8 <main+0xf0>)
 8000698:	6013      	str	r3, [r2, #0]

  /* creation of printTask */
  printTaskHandle = osThreadNew(printTask_func, NULL, &printTask_attributes);
 800069a:	4a18      	ldr	r2, [pc, #96]	; (80006fc <main+0xf4>)
 800069c:	2100      	movs	r1, #0
 800069e:	4818      	ldr	r0, [pc, #96]	; (8000700 <main+0xf8>)
 80006a0:	f007 fe44 	bl	800832c <osThreadNew>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a17      	ldr	r2, [pc, #92]	; (8000704 <main+0xfc>)
 80006a8:	6013      	str	r3, [r2, #0]

  /* creation of tarea_UART */
  tarea_UARTHandle = osThreadNew(tarea_UART_func, NULL, &tarea_UART_attributes);
 80006aa:	4a17      	ldr	r2, [pc, #92]	; (8000708 <main+0x100>)
 80006ac:	2100      	movs	r1, #0
 80006ae:	4817      	ldr	r0, [pc, #92]	; (800070c <main+0x104>)
 80006b0:	f007 fe3c 	bl	800832c <osThreadNew>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a16      	ldr	r2, [pc, #88]	; (8000710 <main+0x108>)
 80006b8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_UART_Receive_IT(&huart1,&rec_data,1);
 80006ba:	2201      	movs	r2, #1
 80006bc:	4915      	ldr	r1, [pc, #84]	; (8000714 <main+0x10c>)
 80006be:	4816      	ldr	r0, [pc, #88]	; (8000718 <main+0x110>)
 80006c0:	f005 fd9c 	bl	80061fc <HAL_UART_Receive_IT>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006c4:	f007 fe0c 	bl	80082e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <main+0xc0>
 80006ca:	bf00      	nop
 80006cc:	200008ac 	.word	0x200008ac
 80006d0:	0800cd38 	.word	0x0800cd38
 80006d4:	0800d15c 	.word	0x0800d15c
 80006d8:	2000088c 	.word	0x2000088c
 80006dc:	0800d174 	.word	0x0800d174
 80006e0:	20000890 	.word	0x20000890
 80006e4:	0800d0cc 	.word	0x0800d0cc
 80006e8:	08001061 	.word	0x08001061
 80006ec:	2000087c 	.word	0x2000087c
 80006f0:	0800d0f0 	.word	0x0800d0f0
 80006f4:	08001379 	.word	0x08001379
 80006f8:	20000880 	.word	0x20000880
 80006fc:	0800d114 	.word	0x0800d114
 8000700:	080014f9 	.word	0x080014f9
 8000704:	20000884 	.word	0x20000884
 8000708:	0800d138 	.word	0x0800d138
 800070c:	08001561 	.word	0x08001561
 8000710:	20000888 	.word	0x20000888
 8000714:	200008b4 	.word	0x200008b4
 8000718:	20000268 	.word	0x20000268

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b096      	sub	sp, #88	; 0x58
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2244      	movs	r2, #68	; 0x44
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f00b f93f 	bl	800b9ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	463b      	mov	r3, r7
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800073e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000742:	f003 f94d 	bl	80039e0 <HAL_PWREx_ControlVoltageScaling>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800074c:	f000 ff42 	bl	80015d4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000750:	f003 f928 	bl	80039a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <SystemClock_Config+0xc4>)
 8000756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800075a:	4a21      	ldr	r2, [pc, #132]	; (80007e0 <SystemClock_Config+0xc4>)
 800075c:	f023 0318 	bic.w	r3, r3, #24
 8000760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000764:	231c      	movs	r3, #28
 8000766:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000768:	2301      	movs	r3, #1
 800076a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800076c:	2301      	movs	r3, #1
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000770:	2301      	movs	r3, #1
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000778:	2360      	movs	r3, #96	; 0x60
 800077a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077c:	2302      	movs	r3, #2
 800077e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000780:	2301      	movs	r3, #1
 8000782:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000784:	2301      	movs	r3, #1
 8000786:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000788:	2328      	movs	r3, #40	; 0x28
 800078a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800078c:	2307      	movs	r3, #7
 800078e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000790:	2302      	movs	r3, #2
 8000792:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000794:	2302      	movs	r3, #2
 8000796:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4618      	mov	r0, r3
 800079e:	f003 fa41 	bl	8003c24 <HAL_RCC_OscConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007a8:	f000 ff14 	bl	80015d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ac:	230f      	movs	r3, #15
 80007ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b0:	2303      	movs	r3, #3
 80007b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007c0:	463b      	mov	r3, r7
 80007c2:	2104      	movs	r1, #4
 80007c4:	4618      	mov	r0, r3
 80007c6:	f003 fe09 	bl	80043dc <HAL_RCC_ClockConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80007d0:	f000 ff00 	bl	80015d4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007d4:	f004 fb42 	bl	8004e5c <HAL_RCCEx_EnableMSIPLLMode>
}
 80007d8:	bf00      	nop
 80007da:	3758      	adds	r7, #88	; 0x58
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40021000 	.word	0x40021000

080007e4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <MX_DFSDM1_Init+0x68>)
 80007ea:	4a19      	ldr	r2, [pc, #100]	; (8000850 <MX_DFSDM1_Init+0x6c>)
 80007ec:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80007ee:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_DFSDM1_Init+0x68>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80007f4:	4b15      	ldr	r3, [pc, #84]	; (800084c <MX_DFSDM1_Init+0x68>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_DFSDM1_Init+0x68>)
 80007fc:	2202      	movs	r2, #2
 80007fe:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_DFSDM1_Init+0x68>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_DFSDM1_Init+0x68>)
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_DFSDM1_Init+0x68>)
 800080e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000812:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000814:	4b0d      	ldr	r3, [pc, #52]	; (800084c <MX_DFSDM1_Init+0x68>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_DFSDM1_Init+0x68>)
 800081c:	2204      	movs	r2, #4
 800081e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <MX_DFSDM1_Init+0x68>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_DFSDM1_Init+0x68>)
 8000828:	2201      	movs	r2, #1
 800082a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <MX_DFSDM1_Init+0x68>)
 800082e:	2200      	movs	r2, #0
 8000830:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_DFSDM1_Init+0x68>)
 8000834:	2200      	movs	r2, #0
 8000836:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_DFSDM1_Init+0x68>)
 800083a:	f001 fce7 	bl	800220c <HAL_DFSDM_ChannelInit>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000844:	f000 fec6 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200000c4 	.word	0x200000c4
 8000850:	40016020 	.word	0x40016020

08000854 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_I2C2_Init+0x74>)
 800085a:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <MX_I2C2_Init+0x78>)
 800085c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_I2C2_Init+0x74>)
 8000860:	f640 6214 	movw	r2, #3604	; 0xe14
 8000864:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_I2C2_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_I2C2_Init+0x74>)
 800086e:	2201      	movs	r2, #1
 8000870:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_I2C2_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_I2C2_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_I2C2_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000884:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_I2C2_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_I2C2_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000890:	480d      	ldr	r0, [pc, #52]	; (80008c8 <MX_I2C2_Init+0x74>)
 8000892:	f002 f915 	bl	8002ac0 <HAL_I2C_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800089c:	f000 fe9a 	bl	80015d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008a0:	2100      	movs	r1, #0
 80008a2:	4809      	ldr	r0, [pc, #36]	; (80008c8 <MX_I2C2_Init+0x74>)
 80008a4:	f002 fe9e 	bl	80035e4 <HAL_I2CEx_ConfigAnalogFilter>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80008ae:	f000 fe91 	bl	80015d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008b2:	2100      	movs	r1, #0
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_I2C2_Init+0x74>)
 80008b6:	f002 fee0 	bl	800367a <HAL_I2CEx_ConfigDigitalFilter>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80008c0:	f000 fe88 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200000fc 	.word	0x200000fc
 80008cc:	40005800 	.word	0x40005800

080008d0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_QUADSPI_Init+0x44>)
 80008d6:	4a10      	ldr	r2, [pc, #64]	; (8000918 <MX_QUADSPI_Init+0x48>)
 80008d8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_QUADSPI_Init+0x44>)
 80008dc:	2202      	movs	r2, #2
 80008de:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_QUADSPI_Init+0x44>)
 80008e2:	2204      	movs	r2, #4
 80008e4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_QUADSPI_Init+0x44>)
 80008e8:	2210      	movs	r2, #16
 80008ea:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_QUADSPI_Init+0x44>)
 80008ee:	2217      	movs	r2, #23
 80008f0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <MX_QUADSPI_Init+0x44>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_QUADSPI_Init+0x44>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_QUADSPI_Init+0x44>)
 8000900:	f003 f8d4 	bl	8003aac <HAL_QSPI_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800090a:	f000 fe63 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000150 	.word	0x20000150
 8000918:	a0001000 	.word	0xa0001000

0800091c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000930:	2300      	movs	r3, #0
 8000932:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000934:	4b25      	ldr	r3, [pc, #148]	; (80009cc <MX_RTC_Init+0xb0>)
 8000936:	4a26      	ldr	r2, [pc, #152]	; (80009d0 <MX_RTC_Init+0xb4>)
 8000938:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800093a:	4b24      	ldr	r3, [pc, #144]	; (80009cc <MX_RTC_Init+0xb0>)
 800093c:	2200      	movs	r2, #0
 800093e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000940:	4b22      	ldr	r3, [pc, #136]	; (80009cc <MX_RTC_Init+0xb0>)
 8000942:	227f      	movs	r2, #127	; 0x7f
 8000944:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000946:	4b21      	ldr	r3, [pc, #132]	; (80009cc <MX_RTC_Init+0xb0>)
 8000948:	22ff      	movs	r2, #255	; 0xff
 800094a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800094c:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <MX_RTC_Init+0xb0>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000952:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <MX_RTC_Init+0xb0>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000958:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MX_RTC_Init+0xb0>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800095e:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <MX_RTC_Init+0xb0>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000964:	4819      	ldr	r0, [pc, #100]	; (80009cc <MX_RTC_Init+0xb0>)
 8000966:	f004 fc5b 	bl	8005220 <HAL_RTC_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000970:	f000 fe30 	bl	80015d4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 8000974:	230d      	movs	r3, #13
 8000976:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 1;
 8000978:	2301      	movs	r3, #1
 800097a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000980:	2300      	movs	r3, #0
 8000982:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2200      	movs	r2, #0
 800098c:	4619      	mov	r1, r3
 800098e:	480f      	ldr	r0, [pc, #60]	; (80009cc <MX_RTC_Init+0xb0>)
 8000990:	f004 fcc1 	bl	8005316 <HAL_RTC_SetTime>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800099a:	f000 fe1b 	bl	80015d4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800099e:	2301      	movs	r3, #1
 80009a0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80009a2:	2301      	movs	r3, #1
 80009a4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80009a6:	2301      	movs	r3, #1
 80009a8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80009ae:	463b      	mov	r3, r7
 80009b0:	2200      	movs	r2, #0
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_RTC_Init+0xb0>)
 80009b6:	f004 fda7 	bl	8005508 <HAL_RTC_SetDate>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80009c0:	f000 fe08 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000194 	.word	0x20000194
 80009d0:	40002800 	.word	0x40002800

080009d4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009d8:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_SPI3_Init+0x74>)
 80009da:	4a1c      	ldr	r2, [pc, #112]	; (8000a4c <MX_SPI3_Init+0x78>)
 80009dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_SPI3_Init+0x74>)
 80009e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_SPI3_Init+0x74>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_SPI3_Init+0x74>)
 80009ee:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009f2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_SPI3_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <MX_SPI3_Init+0x74>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_SPI3_Init+0x74>)
 8000a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a06:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_SPI3_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_SPI3_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_SPI3_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_SPI3_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_SPI3_Init+0x74>)
 8000a22:	2207      	movs	r2, #7
 8000a24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <MX_SPI3_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_SPI3_Init+0x74>)
 8000a2e:	2208      	movs	r2, #8
 8000a30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_SPI3_Init+0x74>)
 8000a34:	f004 ff0e 	bl	8005854 <HAL_SPI_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a3e:	f000 fdc9 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200001b8 	.word	0x200001b8
 8000a4c:	40003c00 	.word	0x40003c00

08000a50 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_TIM7_Init+0x64>)
 8000a62:	4a15      	ldr	r2, [pc, #84]	; (8000ab8 <MX_TIM7_Init+0x68>)
 8000a64:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_TIM7_Init+0x64>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_TIM7_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 799;
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <MX_TIM7_Init+0x64>)
 8000a74:	f240 321f 	movw	r2, #799	; 0x31f
 8000a78:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_TIM7_Init+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000a80:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <MX_TIM7_Init+0x64>)
 8000a82:	f004 ff8a 	bl	800599a <HAL_TIM_Base_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000a8c:	f000 fda2 	bl	80015d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a90:	2300      	movs	r3, #0
 8000a92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_TIM7_Init+0x64>)
 8000a9e:	f005 fa25 	bl	8005eec <HAL_TIMEx_MasterConfigSynchronization>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000aa8:	f000 fd94 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	2000021c 	.word	0x2000021c
 8000ab8:	40001400 	.word	0x40001400

08000abc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_USART1_UART_Init+0x58>)
 8000ac2:	4a15      	ldr	r2, [pc, #84]	; (8000b18 <MX_USART1_UART_Init+0x5c>)
 8000ac4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <MX_USART1_UART_Init+0x58>)
 8000ac8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000acc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_USART1_UART_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_USART1_UART_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_USART1_UART_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <MX_USART1_UART_Init+0x58>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <MX_USART1_UART_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_USART1_UART_Init+0x58>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <MX_USART1_UART_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_USART1_UART_Init+0x58>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_USART1_UART_Init+0x58>)
 8000b00:	f005 fa9a 	bl	8006038 <HAL_UART_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b0a:	f000 fd63 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000268 	.word	0x20000268
 8000b18:	40013800 	.word	0x40013800

08000b1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b22:	4a15      	ldr	r2, [pc, #84]	; (8000b78 <MX_USART3_UART_Init+0x5c>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b60:	f005 fa6a 	bl	8006038 <HAL_UART_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b6a:	f000 fd33 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200002ec 	.word	0x200002ec
 8000b78:	40004800 	.word	0x40004800

08000b7c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b86:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8a:	2206      	movs	r2, #6
 8000b8c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b90:	2202      	movs	r2, #2
 8000b92:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b96:	2202      	movs	r2, #2
 8000b98:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc0:	f002 fda7 	bl	8003712 <HAL_PCD_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bca:	f000 fd03 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000370 	.word	0x20000370

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bee:	4bbd      	ldr	r3, [pc, #756]	; (8000ee4 <MX_GPIO_Init+0x30c>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	4abc      	ldr	r2, [pc, #752]	; (8000ee4 <MX_GPIO_Init+0x30c>)
 8000bf4:	f043 0310 	orr.w	r3, r3, #16
 8000bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfa:	4bba      	ldr	r3, [pc, #744]	; (8000ee4 <MX_GPIO_Init+0x30c>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	f003 0310 	and.w	r3, r3, #16
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c06:	4bb7      	ldr	r3, [pc, #732]	; (8000ee4 <MX_GPIO_Init+0x30c>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	4ab6      	ldr	r2, [pc, #728]	; (8000ee4 <MX_GPIO_Init+0x30c>)
 8000c0c:	f043 0304 	orr.w	r3, r3, #4
 8000c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c12:	4bb4      	ldr	r3, [pc, #720]	; (8000ee4 <MX_GPIO_Init+0x30c>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	4bb1      	ldr	r3, [pc, #708]	; (8000ee4 <MX_GPIO_Init+0x30c>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	4ab0      	ldr	r2, [pc, #704]	; (8000ee4 <MX_GPIO_Init+0x30c>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2a:	4bae      	ldr	r3, [pc, #696]	; (8000ee4 <MX_GPIO_Init+0x30c>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	4bab      	ldr	r3, [pc, #684]	; (8000ee4 <MX_GPIO_Init+0x30c>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	4aaa      	ldr	r2, [pc, #680]	; (8000ee4 <MX_GPIO_Init+0x30c>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c42:	4ba8      	ldr	r3, [pc, #672]	; (8000ee4 <MX_GPIO_Init+0x30c>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4e:	4ba5      	ldr	r3, [pc, #660]	; (8000ee4 <MX_GPIO_Init+0x30c>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	4aa4      	ldr	r2, [pc, #656]	; (8000ee4 <MX_GPIO_Init+0x30c>)
 8000c54:	f043 0308 	orr.w	r3, r3, #8
 8000c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5a:	4ba2      	ldr	r3, [pc, #648]	; (8000ee4 <MX_GPIO_Init+0x30c>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	f003 0308 	and.w	r3, r3, #8
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000c6c:	489e      	ldr	r0, [pc, #632]	; (8000ee8 <MX_GPIO_Init+0x310>)
 8000c6e:	f001 fef7 	bl	8002a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LED1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f248 1124 	movw	r1, #33060	; 0x8124
 8000c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7c:	f001 fef0 	bl	8002a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000c80:	2200      	movs	r2, #0
 8000c82:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000c86:	4899      	ldr	r0, [pc, #612]	; (8000eec <MX_GPIO_Init+0x314>)
 8000c88:	f001 feea 	bl	8002a60 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f241 0181 	movw	r1, #4225	; 0x1081
 8000c92:	4897      	ldr	r0, [pc, #604]	; (8000ef0 <MX_GPIO_Init+0x318>)
 8000c94:	f001 fee4 	bl	8002a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c9e:	4894      	ldr	r0, [pc, #592]	; (8000ef0 <MX_GPIO_Init+0x318>)
 8000ca0:	f001 fede 	bl	8002a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000caa:	4892      	ldr	r0, [pc, #584]	; (8000ef4 <MX_GPIO_Init+0x31c>)
 8000cac:	f001 fed8 	bl	8002a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	488c      	ldr	r0, [pc, #560]	; (8000ee8 <MX_GPIO_Init+0x310>)
 8000cb6:	f001 fed3 	bl	8002a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000cba:	f240 1315 	movw	r3, #277	; 0x115
 8000cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4885      	ldr	r0, [pc, #532]	; (8000ee8 <MX_GPIO_Init+0x310>)
 8000cd4:	f001 fc26 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000cd8:	236a      	movs	r3, #106	; 0x6a
 8000cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cdc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	487e      	ldr	r0, [pc, #504]	; (8000ee8 <MX_GPIO_Init+0x310>)
 8000cee:	f001 fc19 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOTON_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BOTON_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000cf2:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8000cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cf8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	487a      	ldr	r0, [pc, #488]	; (8000ef4 <MX_GPIO_Init+0x31c>)
 8000d0a:	f001 fc0b 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000d0e:	233f      	movs	r3, #63	; 0x3f
 8000d10:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d12:	230b      	movs	r3, #11
 8000d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4874      	ldr	r0, [pc, #464]	; (8000ef4 <MX_GPIO_Init+0x31c>)
 8000d22:	f001 fbff 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000d26:	2303      	movs	r3, #3
 8000d28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d36:	2308      	movs	r3, #8
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d44:	f001 fbee 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin LED1_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|LED1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000d48:	f248 1324 	movw	r3, #33060	; 0x8124
 8000d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d64:	f001 fbde 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000d68:	2308      	movs	r3, #8
 8000d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d86:	f001 fbcd 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000d8a:	2310      	movs	r3, #16
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d8e:	230b      	movs	r3, #11
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da0:	f001 fbc0 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000da4:	23c0      	movs	r3, #192	; 0xc0
 8000da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000db4:	2305      	movs	r3, #5
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc2:	f001 fbaf 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4844      	ldr	r0, [pc, #272]	; (8000eec <MX_GPIO_Init+0x314>)
 8000ddc:	f001 fba2 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000de0:	2302      	movs	r3, #2
 8000de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000de4:	230b      	movs	r3, #11
 8000de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	483e      	ldr	r0, [pc, #248]	; (8000eec <MX_GPIO_Init+0x314>)
 8000df4:	f001 fb96 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000df8:	f24f 0314 	movw	r3, #61460	; 0xf014
 8000dfc:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4836      	ldr	r0, [pc, #216]	; (8000eec <MX_GPIO_Init+0x314>)
 8000e12:	f001 fb87 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000e16:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000e1a:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e1c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4830      	ldr	r0, [pc, #192]	; (8000ef0 <MX_GPIO_Init+0x318>)
 8000e2e:	f001 fb79 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000e32:	f243 0381 	movw	r3, #12417	; 0x3081
 8000e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4829      	ldr	r0, [pc, #164]	; (8000ef0 <MX_GPIO_Init+0x318>)
 8000e4c:	f001 fb6a 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000e50:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e56:	2301      	movs	r3, #1
 8000e58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	4822      	ldr	r0, [pc, #136]	; (8000ef4 <MX_GPIO_Init+0x31c>)
 8000e6a:	f001 fb5b 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e7e:	2305      	movs	r3, #5
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	4819      	ldr	r0, [pc, #100]	; (8000ef0 <MX_GPIO_Init+0x318>)
 8000e8a:	f001 fb4b 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000e8e:	2378      	movs	r3, #120	; 0x78
 8000e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e9e:	2307      	movs	r3, #7
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4811      	ldr	r0, [pc, #68]	; (8000ef0 <MX_GPIO_Init+0x318>)
 8000eaa:	f001 fb3b 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000eae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb4:	2312      	movs	r3, #18
 8000eb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4808      	ldr	r0, [pc, #32]	; (8000eec <MX_GPIO_Init+0x314>)
 8000ecc:	f001 fb2a 	bl	8002524 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2105      	movs	r1, #5
 8000ed4:	2017      	movs	r0, #23
 8000ed6:	f001 f96f 	bl	80021b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000eda:	2017      	movs	r0, #23
 8000edc:	f001 f988 	bl	80021f0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	e009      	b.n	8000ef8 <MX_GPIO_Init+0x320>
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	48001000 	.word	0x48001000
 8000eec:	48000400 	.word	0x48000400
 8000ef0:	48000c00 	.word	0x48000c00
 8000ef4:	48000800 	.word	0x48000800
 8000ef8:	2105      	movs	r1, #5
 8000efa:	2028      	movs	r0, #40	; 0x28
 8000efc:	f001 f95c 	bl	80021b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f00:	2028      	movs	r0, #40	; 0x28
 8000f02:	f001 f975 	bl	80021f0 <HAL_NVIC_EnableIRQ>

}
 8000f06:	bf00      	nop
 8000f08:	3728      	adds	r7, #40	; 0x28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop

08000f10 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	e009      	b.n	8000f36 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	1c5a      	adds	r2, r3, #1
 8000f26:	60ba      	str	r2, [r7, #8]
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fb2a 	bl	8000584 <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	3301      	adds	r3, #1
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	dbf1      	blt.n	8000f22 <_write+0x12>
	}
	return len;
 8000f3e:	687b      	ldr	r3, [r7, #4]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <BSP_ACCELERO_Init_INT>:

ACCELERO_StatusTypeDef BSP_ACCELERO_Init_INT(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
	ACCELERO_StatusTypeDef ret;
	ret = BSP_ACCELERO_Init();
 8000f4e:	f006 fff1 	bl	8007f34 <BSP_ACCELERO_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
	if (ret == ACCELERO_OK)
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d12f      	bne.n	8000fbc <BSP_ACCELERO_Init_INT+0x74>
	{
		/* Initialize interruption*/
		uint8_t tmp;
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G);
 8000f5c:	210b      	movs	r1, #11
 8000f5e:	20d4      	movs	r0, #212	; 0xd4
 8000f60:	f006 ffac 	bl	8007ebc <SENSOR_IO_Read>
 8000f64:	4603      	mov	r3, r0
 8000f66:	71bb      	strb	r3, [r7, #6]
		tmp |=0b10000000;
 8000f68:	79bb      	ldrb	r3, [r7, #6]
 8000f6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f6e:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G, tmp);
 8000f70:	79bb      	ldrb	r3, [r7, #6]
 8000f72:	461a      	mov	r2, r3
 8000f74:	210b      	movs	r1, #11
 8000f76:	20d4      	movs	r0, #212	; 0xd4
 8000f78:	f006 ff86 	bl	8007e88 <SENSOR_IO_Write>
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL);
 8000f7c:	210d      	movs	r1, #13
 8000f7e:	20d4      	movs	r0, #212	; 0xd4
 8000f80:	f006 ff9c 	bl	8007ebc <SENSOR_IO_Read>
 8000f84:	4603      	mov	r3, r0
 8000f86:	71bb      	strb	r3, [r7, #6]
		tmp |=0b00000001;
 8000f88:	79bb      	ldrb	r3, [r7, #6]
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, tmp);
 8000f90:	79bb      	ldrb	r3, [r7, #6]
 8000f92:	461a      	mov	r2, r3
 8000f94:	210d      	movs	r1, #13
 8000f96:	20d4      	movs	r0, #212	; 0xd4
 8000f98:	f006 ff76 	bl	8007e88 <SENSOR_IO_Write>
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG);
 8000f9c:	211a      	movs	r1, #26
 8000f9e:	20d4      	movs	r0, #212	; 0xd4
 8000fa0:	f006 ff8c 	bl	8007ebc <SENSOR_IO_Read>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	71bb      	strb	r3, [r7, #6]
		tmp |=0b10000000;
 8000fa8:	79bb      	ldrb	r3, [r7, #6]
 8000faa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fae:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG, tmp);
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	211a      	movs	r1, #26
 8000fb6:	20d4      	movs	r0, #212	; 0xd4
 8000fb8:	f006 ff66 	bl	8007e88 <SENSOR_IO_Write>
	}
	return ret;
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]

	static osStatus_t estado;
	if (huart == &huart1)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a0c      	ldr	r2, [pc, #48]	; (8001004 <HAL_UART_RxCpltCallback+0x3c>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d110      	bne.n	8000ffa <HAL_UART_RxCpltCallback+0x32>
	{
		HAL_UART_Receive_IT(&huart1,&rec_data,1);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	490b      	ldr	r1, [pc, #44]	; (8001008 <HAL_UART_RxCpltCallback+0x40>)
 8000fdc:	4809      	ldr	r0, [pc, #36]	; (8001004 <HAL_UART_RxCpltCallback+0x3c>)
 8000fde:	f005 f90d 	bl	80061fc <HAL_UART_Receive_IT>
		printf("Recibido: %d\r\n",rec_data);
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <HAL_UART_RxCpltCallback+0x40>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4808      	ldr	r0, [pc, #32]	; (800100c <HAL_UART_RxCpltCallback+0x44>)
 8000fea:	f00a fd7d 	bl	800bae8 <iprintf>
		osThreadFlagsSet(tarea_UARTHandle,0x0002U);
 8000fee:	4b08      	ldr	r3, [pc, #32]	; (8001010 <HAL_UART_RxCpltCallback+0x48>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2102      	movs	r1, #2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f007 fa2b 	bl	8008450 <osThreadFlagsSet>
			printf("Estado: ok\r\n");
		else
			printf("Algo no va bien\r\n");
			*/
	}
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000268 	.word	0x20000268
 8001008:	200008b4 	.word	0x200008b4
 800100c:	0800cd54 	.word	0x0800cd54
 8001010:	20000888 	.word	0x20000888

08001014 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001024:	d003      	beq.n	800102e <HAL_GPIO_EXTI_Callback+0x1a>
 8001026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800102a:	d007      	beq.n	800103c <HAL_GPIO_EXTI_Callback+0x28>
			osThreadFlagsSet(readAccelHandle,0x0002U);
			break;
		}
		default:
		{
		  break;
 800102c:	e010      	b.n	8001050 <HAL_GPIO_EXTI_Callback+0x3c>
			osThreadFlagsSet(readAccelHandle,0x0001U);
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HAL_GPIO_EXTI_Callback+0x44>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2101      	movs	r1, #1
 8001034:	4618      	mov	r0, r3
 8001036:	f007 fa0b 	bl	8008450 <osThreadFlagsSet>
			break;
 800103a:	e009      	b.n	8001050 <HAL_GPIO_EXTI_Callback+0x3c>
			printf("Ha pulsado el boton\r\n");
 800103c:	4807      	ldr	r0, [pc, #28]	; (800105c <HAL_GPIO_EXTI_Callback+0x48>)
 800103e:	f00a fdd9 	bl	800bbf4 <puts>
			osThreadFlagsSet(readAccelHandle,0x0002U);
 8001042:	4b05      	ldr	r3, [pc, #20]	; (8001058 <HAL_GPIO_EXTI_Callback+0x44>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2102      	movs	r1, #2
 8001048:	4618      	mov	r0, r3
 800104a:	f007 fa01 	bl	8008450 <osThreadFlagsSet>
			break;
 800104e:	bf00      	nop
		}
	}
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000880 	.word	0x20000880
 800105c:	0800cd64 	.word	0x0800cd64

08001060 <RTC_set_func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RTC_set_func */
void RTC_set_func(void *argument)
{
 8001060:	b5b0      	push	{r4, r5, r7, lr}
 8001062:	b09e      	sub	sp, #120	; 0x78
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t recibido[3];
	//uint32_t flag_rec;
	osStatus_t estado;
	uint32_t return_wait = 0U;
 8001068:	2300      	movs	r3, #0
 800106a:	66bb      	str	r3, [r7, #104]	; 0x68

	uint16_t num_usuario;
	uint8_t to_change[6];
	const char* msg_hora_ok = "\r\nHora cambiada correctamente\r\n";
 800106c:	4bae      	ldr	r3, [pc, #696]	; (8001328 <RTC_set_func+0x2c8>)
 800106e:	657b      	str	r3, [r7, #84]	; 0x54
	const char* msg_fecha_ok = "Fecha cambiada correctamente\r\n";
 8001070:	4bae      	ldr	r3, [pc, #696]	; (800132c <RTC_set_func+0x2cc>)
 8001072:	653b      	str	r3, [r7, #80]	; 0x50
	const char* msg_error = "\r\nERROR: Valor no válido\r\n";
 8001074:	4bae      	ldr	r3, [pc, #696]	; (8001330 <RTC_set_func+0x2d0>)
 8001076:	64fb      	str	r3, [r7, #76]	; 0x4c
	const char* msg_rtc1 = "\r\n\r\n========================\r\n"
 8001078:	4bae      	ldr	r3, [pc, #696]	; (8001334 <RTC_set_func+0x2d4>)
 800107a:	64bb      	str	r3, [r7, #72]	; 0x48
	"| Configurar rtc |\r\n"
	"========================\r\n\r\n";
	const char* msg[6] = {
 800107c:	4bae      	ldr	r3, [pc, #696]	; (8001338 <RTC_set_func+0x2d8>)
 800107e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001082:	461d      	mov	r5, r3
 8001084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001088:	e895 0003 	ldmia.w	r5, {r0, r1}
 800108c:	e884 0003 	stmia.w	r4, {r0, r1}
	"Hora (0-23): ", "\r\nMinuto (0-59): ","\r\nSegundo (0-59): ","\r\nDía (1-31): ","\r\nMes (1-12): ",
	"\r\nAño (0-99): "};
	uint8_t limit[6][2] = {{0,23},{0,59},{0,59},{1,31},{1,12},{0,99}};
 8001090:	4aaa      	ldr	r2, [pc, #680]	; (800133c <RTC_set_func+0x2dc>)
 8001092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001096:	ca07      	ldmia	r2, {r0, r1, r2}
 8001098:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//uint8_t *toChange[6] = {&GetTime.Hours, &GetTime.Minutes, &GetTime.Seconds, &GetDate.Date,&GetDate.Month, &GetDate.Year};

	printf("Empieza el bucle\r\n");
 800109c:	48a8      	ldr	r0, [pc, #672]	; (8001340 <RTC_set_func+0x2e0>)
 800109e:	f00a fda9 	bl	800bbf4 <puts>
	estado = osMessageQueuePut(print_queueHandle, &msg_rtc1, 0, pdMS_TO_TICKS(500));
 80010a2:	4ba8      	ldr	r3, [pc, #672]	; (8001344 <RTC_set_func+0x2e4>)
 80010a4:	6818      	ldr	r0, [r3, #0]
 80010a6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80010aa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010ae:	2200      	movs	r2, #0
 80010b0:	f007 fb2c 	bl	800870c <osMessageQueuePut>
 80010b4:	6678      	str	r0, [r7, #100]	; 0x64
	int i,j = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (i=0;i<6;){
 80010ba:	2300      	movs	r3, #0
 80010bc:	673b      	str	r3, [r7, #112]	; 0x70
 80010be:	e0d8      	b.n	8001272 <RTC_set_func+0x212>
		estado = osMessageQueuePut(print_queueHandle, &msg[i], 0, pdMS_TO_TICKS(500));
 80010c0:	4ba0      	ldr	r3, [pc, #640]	; (8001344 <RTC_set_func+0x2e4>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80010c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	18d1      	adds	r1, r2, r3
 80010ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010d2:	2200      	movs	r2, #0
 80010d4:	f007 fb1a 	bl	800870c <osMessageQueuePut>
 80010d8:	6678      	str	r0, [r7, #100]	; 0x64
		printf("Esperando a que ser reciba el dato\r\n");
 80010da:	489b      	ldr	r0, [pc, #620]	; (8001348 <RTC_set_func+0x2e8>)
 80010dc:	f00a fd8a 	bl	800bbf4 <puts>

		for (j=0;j<3;j++){
 80010e0:	2300      	movs	r3, #0
 80010e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80010e4:	e022      	b.n	800112c <RTC_set_func+0xcc>
			estado = osMessageQueueGet(receive_queueHandle, &recibido[j], NULL, osWaitForever);
 80010e6:	4b99      	ldr	r3, [pc, #612]	; (800134c <RTC_set_func+0x2ec>)
 80010e8:	6818      	ldr	r0, [r3, #0]
 80010ea:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80010ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010f0:	18d1      	adds	r1, r2, r3
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	2200      	movs	r2, #0
 80010f8:	f007 fb68 	bl	80087cc <osMessageQueueGet>
 80010fc:	6678      	str	r0, [r7, #100]	; 0x64
			printf("De la cola: %c\r\n",recibido[j]);
 80010fe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001104:	4413      	add	r3, r2
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	4891      	ldr	r0, [pc, #580]	; (8001350 <RTC_set_func+0x2f0>)
 800110c:	f00a fcec 	bl	800bae8 <iprintf>
			if(recibido[j]==13){
 8001110:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001116:	4413      	add	r3, r2
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b0d      	cmp	r3, #13
 800111c:	d103      	bne.n	8001126 <RTC_set_func+0xc6>
				printf("Ha pulsado intro\r\n");
 800111e:	488d      	ldr	r0, [pc, #564]	; (8001354 <RTC_set_func+0x2f4>)
 8001120:	f00a fd68 	bl	800bbf4 <puts>
				break;
 8001124:	e005      	b.n	8001132 <RTC_set_func+0xd2>
		for (j=0;j<3;j++){
 8001126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001128:	3301      	adds	r3, #1
 800112a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800112c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800112e:	2b02      	cmp	r3, #2
 8001130:	ddd9      	ble.n	80010e6 <RTC_set_func+0x86>
			}
		}
		printf("%d\r\n",j);
 8001132:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001134:	4888      	ldr	r0, [pc, #544]	; (8001358 <RTC_set_func+0x2f8>)
 8001136:	f00a fcd7 	bl	800bae8 <iprintf>
		switch(j){
 800113a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800113c:	2b03      	cmp	r3, #3
 800113e:	d84a      	bhi.n	80011d6 <RTC_set_func+0x176>
 8001140:	a201      	add	r2, pc, #4	; (adr r2, 8001148 <RTC_set_func+0xe8>)
 8001142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001146:	bf00      	nop
 8001148:	08001159 	.word	0x08001159
 800114c:	08001161 	.word	0x08001161
 8001150:	0800116f 	.word	0x0800116f
 8001154:	08001193 	.word	0x08001193
		case 0:
			num_usuario=0;
 8001158:	2300      	movs	r3, #0
 800115a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			break;
 800115e:	e03a      	b.n	80011d6 <RTC_set_func+0x176>
		case 1:
			num_usuario = recibido[0]-48;
 8001160:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001164:	b29b      	uxth	r3, r3
 8001166:	3b30      	subs	r3, #48	; 0x30
 8001168:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			//i++;
			break;
 800116c:	e033      	b.n	80011d6 <RTC_set_func+0x176>
		case 2:
			num_usuario = 10*(recibido[0]-48)+recibido[1]-48;
 800116e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001172:	3b30      	subs	r3, #48	; 0x30
 8001174:	b29b      	uxth	r3, r3
 8001176:	461a      	mov	r2, r3
 8001178:	0092      	lsls	r2, r2, #2
 800117a:	4413      	add	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	b29a      	uxth	r2, r3
 8001180:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001184:	b29b      	uxth	r3, r3
 8001186:	4413      	add	r3, r2
 8001188:	b29b      	uxth	r3, r3
 800118a:	3b30      	subs	r3, #48	; 0x30
 800118c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			//i++;
			break;
 8001190:	e021      	b.n	80011d6 <RTC_set_func+0x176>
		case 3:
			num_usuario = 100*(recibido[0]-48)+10*(recibido[1]-48)+recibido[2]-48;
 8001192:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001196:	3b30      	subs	r3, #48	; 0x30
 8001198:	b29b      	uxth	r3, r3
 800119a:	461a      	mov	r2, r3
 800119c:	0092      	lsls	r2, r2, #2
 800119e:	4413      	add	r3, r2
 80011a0:	461a      	mov	r2, r3
 80011a2:	0091      	lsls	r1, r2, #2
 80011a4:	461a      	mov	r2, r3
 80011a6:	460b      	mov	r3, r1
 80011a8:	4413      	add	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80011b2:	3b30      	subs	r3, #48	; 0x30
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4619      	mov	r1, r3
 80011b8:	0089      	lsls	r1, r1, #2
 80011ba:	440b      	add	r3, r1
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	b29b      	uxth	r3, r3
 80011c0:	4413      	add	r3, r2
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	4413      	add	r3, r2
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	3b30      	subs	r3, #48	; 0x30
 80011d0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			break;
 80011d4:	bf00      	nop
		}
		printf("Numero: %d\r\n",num_usuario);
 80011d6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80011da:	4619      	mov	r1, r3
 80011dc:	485f      	ldr	r0, [pc, #380]	; (800135c <RTC_set_func+0x2fc>)
 80011de:	f00a fc83 	bl	800bae8 <iprintf>
		printf("Rango: %d-%d\r\n",limit[i][0],limit[i][1]);
 80011e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	3378      	adds	r3, #120	; 0x78
 80011e8:	443b      	add	r3, r7
 80011ea:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80011ee:	4619      	mov	r1, r3
 80011f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	3378      	adds	r3, #120	; 0x78
 80011f6:	443b      	add	r3, r7
 80011f8:	f813 3c53 	ldrb.w	r3, [r3, #-83]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4858      	ldr	r0, [pc, #352]	; (8001360 <RTC_set_func+0x300>)
 8001200:	f00a fc72 	bl	800bae8 <iprintf>
		if (num_usuario<limit[i][0] || num_usuario>limit[i][1]){
 8001204:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	3378      	adds	r3, #120	; 0x78
 800120a:	443b      	add	r3, r7
 800120c:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8001210:	b29b      	uxth	r3, r3
 8001212:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8001216:	429a      	cmp	r2, r3
 8001218:	d30a      	bcc.n	8001230 <RTC_set_func+0x1d0>
 800121a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	3378      	adds	r3, #120	; 0x78
 8001220:	443b      	add	r3, r7
 8001222:	f813 3c53 	ldrb.w	r3, [r3, #-83]
 8001226:	b29b      	uxth	r3, r3
 8001228:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800122c:	429a      	cmp	r2, r3
 800122e:	d914      	bls.n	800125a <RTC_set_func+0x1fa>
			estado = osMessageQueuePut(print_queueHandle, &msg_error, 0, pdMS_TO_TICKS(500));
 8001230:	4b44      	ldr	r3, [pc, #272]	; (8001344 <RTC_set_func+0x2e4>)
 8001232:	6818      	ldr	r0, [r3, #0]
 8001234:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001238:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800123c:	2200      	movs	r2, #0
 800123e:	f007 fa65 	bl	800870c <osMessageQueuePut>
 8001242:	6678      	str	r0, [r7, #100]	; 0x64
			if (estado == osOK)
 8001244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001246:	2b00      	cmp	r3, #0
 8001248:	d103      	bne.n	8001252 <RTC_set_func+0x1f2>
				printf("Enviado valor erroneo\r\n");
 800124a:	4846      	ldr	r0, [pc, #280]	; (8001364 <RTC_set_func+0x304>)
 800124c:	f00a fcd2 	bl	800bbf4 <puts>
 8001250:	e00f      	b.n	8001272 <RTC_set_func+0x212>
			else
				printf("Algo no va bien\r\n");
 8001252:	4845      	ldr	r0, [pc, #276]	; (8001368 <RTC_set_func+0x308>)
 8001254:	f00a fcce 	bl	800bbf4 <puts>
			if (estado == osOK)
 8001258:	e00b      	b.n	8001272 <RTC_set_func+0x212>
		}else{
			to_change[i]=num_usuario;
 800125a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800125e:	b2d9      	uxtb	r1, r3
 8001260:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001264:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001266:	4413      	add	r3, r2
 8001268:	460a      	mov	r2, r1
 800126a:	701a      	strb	r2, [r3, #0]
			i++;
 800126c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800126e:	3301      	adds	r3, #1
 8001270:	673b      	str	r3, [r7, #112]	; 0x70
	for (i=0;i<6;){
 8001272:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001274:	2b05      	cmp	r3, #5
 8001276:	f77f af23 	ble.w	80010c0 <RTC_set_func+0x60>
		}

	}

	RTC_TimeTypeDef sTime = {0};
 800127a:	f107 0310 	add.w	r3, r7, #16
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]

	sTime.Hours = to_change[0];
 800128e:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001292:	743b      	strb	r3, [r7, #16]
	sTime.Minutes = to_change[1];
 8001294:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001298:	747b      	strb	r3, [r7, #17]
	sTime.Seconds = to_change[2];
 800129a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800129e:	74bb      	strb	r3, [r7, #18]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	2200      	movs	r2, #0
 80012a6:	4619      	mov	r1, r3
 80012a8:	4830      	ldr	r0, [pc, #192]	; (800136c <RTC_set_func+0x30c>)
 80012aa:	f004 f834 	bl	8005316 <HAL_RTC_SetTime>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <RTC_set_func+0x258>
	  {
	    Error_Handler();
 80012b4:	f000 f98e 	bl	80015d4 <Error_Handler>
	  }

	osMessageQueuePut(print_queueHandle, &msg_hora_ok, 0, pdMS_TO_TICKS(500));
 80012b8:	4b22      	ldr	r3, [pc, #136]	; (8001344 <RTC_set_func+0x2e4>)
 80012ba:	6818      	ldr	r0, [r3, #0]
 80012bc:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80012c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012c4:	2200      	movs	r2, #0
 80012c6:	f007 fa21 	bl	800870c <osMessageQueuePut>

	sDate.Date = to_change[3];
 80012ca:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80012ce:	73bb      	strb	r3, [r7, #14]
	sDate.Month = to_change[4];
 80012d0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80012d4:	737b      	strb	r3, [r7, #13]
	sDate.Year = to_change[5];
 80012d6:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80012da:	73fb      	strb	r3, [r7, #15]
	printf("Anio: %d\r\n",to_change[5]);
 80012dc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80012e0:	4619      	mov	r1, r3
 80012e2:	4823      	ldr	r0, [pc, #140]	; (8001370 <RTC_set_func+0x310>)
 80012e4:	f00a fc00 	bl	800bae8 <iprintf>
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	2200      	movs	r2, #0
 80012ee:	4619      	mov	r1, r3
 80012f0:	481e      	ldr	r0, [pc, #120]	; (800136c <RTC_set_func+0x30c>)
 80012f2:	f004 f909 	bl	8005508 <HAL_RTC_SetDate>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <RTC_set_func+0x2a0>
	{
		Error_Handler();
 80012fc:	f000 f96a 	bl	80015d4 <Error_Handler>
	}

	osMessageQueuePut(print_queueHandle, &msg_fecha_ok, 0, pdMS_TO_TICKS(500));
 8001300:	4b10      	ldr	r3, [pc, #64]	; (8001344 <RTC_set_func+0x2e4>)
 8001302:	6818      	ldr	r0, [r3, #0]
 8001304:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001308:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800130c:	2200      	movs	r2, #0
 800130e:	f007 f9fd 	bl	800870c <osMessageQueuePut>

	osThreadFlagsSet(readAccelHandle,0x0002U);
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <RTC_set_func+0x314>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2102      	movs	r1, #2
 8001318:	4618      	mov	r0, r3
 800131a:	f007 f899 	bl	8008450 <osThreadFlagsSet>

  /* Infinite loop */
  for(;;)
  {

	  osDelay(pdMS_TO_TICKS(1000));
 800131e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001322:	f007 f964 	bl	80085ee <osDelay>
 8001326:	e7fa      	b.n	800131e <RTC_set_func+0x2be>
 8001328:	0800cd7c 	.word	0x0800cd7c
 800132c:	0800cd9c 	.word	0x0800cd9c
 8001330:	0800cdbc 	.word	0x0800cdbc
 8001334:	0800cdd8 	.word	0x0800cdd8
 8001338:	0800cee8 	.word	0x0800cee8
 800133c:	0800cf00 	.word	0x0800cf00
 8001340:	0800ce28 	.word	0x0800ce28
 8001344:	2000088c 	.word	0x2000088c
 8001348:	0800ce3c 	.word	0x0800ce3c
 800134c:	20000890 	.word	0x20000890
 8001350:	0800ce60 	.word	0x0800ce60
 8001354:	0800ce74 	.word	0x0800ce74
 8001358:	0800ce88 	.word	0x0800ce88
 800135c:	0800ce90 	.word	0x0800ce90
 8001360:	0800cea0 	.word	0x0800cea0
 8001364:	0800ceb0 	.word	0x0800ceb0
 8001368:	0800cec8 	.word	0x0800cec8
 800136c:	20000194 	.word	0x20000194
 8001370:	0800cedc 	.word	0x0800cedc
 8001374:	20000880 	.word	0x20000880

08001378 <readAccel_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readAccel_func */
void readAccel_func(void *argument)
{
 8001378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137a:	b0af      	sub	sp, #188	; 0xbc
 800137c:	af08      	add	r7, sp, #32
 800137e:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN readAccel_func */
	osStatus_t estado;
  //char mensaje[]  = "Hola mundo\r\n";
	char mensaje[100];
	char *p_mensaje = mensaje;
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	61bb      	str	r3, [r7, #24]

	//uint32_t nticks = 0;
	int16_t DataXYZ[3];
	int16_t *pDataXYZ = DataXYZ;
 8001386:	f107 0310 	add.w	r3, r7, #16
 800138a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94



	static float temp_value = 0;

	uint8_t horas,minutos,segundos,dia,mes,anio = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	uint32_t return_wait = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c


	printf("ReadAccel task esperando\r\n");
 800139a:	4849      	ldr	r0, [pc, #292]	; (80014c0 <readAccel_func+0x148>)
 800139c:	f00a fc2a 	bl	800bbf4 <puts>
	// Esperamos que el usuario configure el RTC y que el acelerometro este activo
	return_wait = osThreadFlagsWait(0x0003U, osFlagsWaitAll, osWaitForever);
 80013a0:	f04f 32ff 	mov.w	r2, #4294967295
 80013a4:	2101      	movs	r1, #1
 80013a6:	2003      	movs	r0, #3
 80013a8:	f007 f8a0 	bl	80084ec <osThreadFlagsWait>
 80013ac:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	printf("ReadAccel task se inicia\r\n");
 80013b0:	4844      	ldr	r0, [pc, #272]	; (80014c4 <readAccel_func+0x14c>)
 80013b2:	f00a fc1f 	bl	800bbf4 <puts>
		int tmpInt2 = trunc(tmpFrac * 100);
		//printf("Medida de Temperatura: %d.%02d grados\r\n",tmpInt1,tmpInt2);
		*/

		//nticks = osKernelGetTickCount();
		BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 80013b6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80013ba:	f006 fdf9 	bl	8007fb0 <BSP_ACCELERO_AccGetXYZ>
		//printf("Tick: %ld	Eje x: %d	Eje y: %d	Eje z: %d\r\n",nticks,DataXYZ[0],DataXYZ[1],DataXYZ[2]);

		printf("Lectura accel realizada\r\n");
 80013be:	4842      	ldr	r0, [pc, #264]	; (80014c8 <readAccel_func+0x150>)
 80013c0:	f00a fc18 	bl	800bbf4 <puts>
		HAL_RTC_GetTime(&hrtc, &GetTime, RTC_FORMAT_BIN);
 80013c4:	2200      	movs	r2, #0
 80013c6:	4941      	ldr	r1, [pc, #260]	; (80014cc <readAccel_func+0x154>)
 80013c8:	4841      	ldr	r0, [pc, #260]	; (80014d0 <readAccel_func+0x158>)
 80013ca:	f004 f841 	bl	8005450 <HAL_RTC_GetTime>
		horas = GetTime.Hours;
 80013ce:	4b3f      	ldr	r3, [pc, #252]	; (80014cc <readAccel_func+0x154>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
		minutos = GetTime.Minutes;
 80013d6:	4b3d      	ldr	r3, [pc, #244]	; (80014cc <readAccel_func+0x154>)
 80013d8:	785b      	ldrb	r3, [r3, #1]
 80013da:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
		segundos = GetTime.Seconds;
 80013de:	4b3b      	ldr	r3, [pc, #236]	; (80014cc <readAccel_func+0x154>)
 80013e0:	789b      	ldrb	r3, [r3, #2]
 80013e2:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

		HAL_RTC_GetDate(&hrtc, &GetDate, RTC_FORMAT_BIN);
 80013e6:	2200      	movs	r2, #0
 80013e8:	493a      	ldr	r1, [pc, #232]	; (80014d4 <readAccel_func+0x15c>)
 80013ea:	4839      	ldr	r0, [pc, #228]	; (80014d0 <readAccel_func+0x158>)
 80013ec:	f004 f913 	bl	8005616 <HAL_RTC_GetDate>
		anio = GetDate.Year;
 80013f0:	4b38      	ldr	r3, [pc, #224]	; (80014d4 <readAccel_func+0x15c>)
 80013f2:	78db      	ldrb	r3, [r3, #3]
 80013f4:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		dia = GetDate.Date;
 80013f8:	4b36      	ldr	r3, [pc, #216]	; (80014d4 <readAccel_func+0x15c>)
 80013fa:	789b      	ldrb	r3, [r3, #2]
 80013fc:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
		mes = GetDate.Month;
 8001400:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <readAccel_func+0x15c>)
 8001402:	785b      	ldrb	r3, [r3, #1]
 8001404:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87


		printf("Anio: %d\r\n",anio);
 8001408:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800140c:	4619      	mov	r1, r3
 800140e:	4832      	ldr	r0, [pc, #200]	; (80014d8 <readAccel_func+0x160>)
 8001410:	f00a fb6a 	bl	800bae8 <iprintf>
		printf("Lectura fecha realizada\r\n");
 8001414:	4831      	ldr	r0, [pc, #196]	; (80014dc <readAccel_func+0x164>)
 8001416:	f00a fbed 	bl	800bbf4 <puts>
		//printf("fecha: %d/%d/%d hora: %d:%d:%d temp: %d.%02d grados\r\n",dia,mes,anio,horas,minutos,segundos,tmpInt1,tmpInt2);
		snprintf(mensaje,100,"fecha: %d/%d/%d hora: %d:%d:%d Eje x: %d	Eje y: %d	Eje z: %d\r\n",dia,mes,anio+2000,horas,minutos,segundos,DataXYZ[0],DataXYZ[1],DataXYZ[2]);
 800141a:	f897 6088 	ldrb.w	r6, [r7, #136]	; 0x88
 800141e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8001428:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 800142c:	f897 108b 	ldrb.w	r1, [r7, #139]	; 0x8b
 8001430:	f897 008a 	ldrb.w	r0, [r7, #138]	; 0x8a
 8001434:	f897 4089 	ldrb.w	r4, [r7, #137]	; 0x89
 8001438:	f9b7 5010 	ldrsh.w	r5, [r7, #16]
 800143c:	607d      	str	r5, [r7, #4]
 800143e:	f9b7 5012 	ldrsh.w	r5, [r7, #18]
 8001442:	603d      	str	r5, [r7, #0]
 8001444:	f9b7 5014 	ldrsh.w	r5, [r7, #20]
 8001448:	462b      	mov	r3, r5
 800144a:	f107 051c 	add.w	r5, r7, #28
 800144e:	9307      	str	r3, [sp, #28]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	9306      	str	r3, [sp, #24]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	9305      	str	r3, [sp, #20]
 8001458:	9404      	str	r4, [sp, #16]
 800145a:	9003      	str	r0, [sp, #12]
 800145c:	9102      	str	r1, [sp, #8]
 800145e:	9201      	str	r2, [sp, #4]
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	4633      	mov	r3, r6
 8001466:	4a1e      	ldr	r2, [pc, #120]	; (80014e0 <readAccel_func+0x168>)
 8001468:	2164      	movs	r1, #100	; 0x64
 800146a:	4628      	mov	r0, r5
 800146c:	f00a fc44 	bl	800bcf8 <sniprintf>



		//printf("MENSAJE: %s\r\n",mensaje);
		estado = osMessageQueuePut(print_queueHandle, &p_mensaje, 0, pdMS_TO_TICKS(500));
 8001470:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <readAccel_func+0x16c>)
 8001472:	6818      	ldr	r0, [r3, #0]
 8001474:	f107 0118 	add.w	r1, r7, #24
 8001478:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800147c:	2200      	movs	r2, #0
 800147e:	f007 f945 	bl	800870c <osMessageQueuePut>
 8001482:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		if(estado == osOK){
 8001486:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800148a:	2b00      	cmp	r3, #0
 800148c:	d103      	bne.n	8001496 <readAccel_func+0x11e>
			printf("Enviada a la cola\r\n");
 800148e:	4816      	ldr	r0, [pc, #88]	; (80014e8 <readAccel_func+0x170>)
 8001490:	f00a fbb0 	bl	800bbf4 <puts>
 8001494:	e007      	b.n	80014a6 <readAccel_func+0x12e>
		}
		else if(estado == osErrorTimeout){
 8001496:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800149a:	f113 0f02 	cmn.w	r3, #2
 800149e:	d102      	bne.n	80014a6 <readAccel_func+0x12e>
			printf("Timeout agotado 1\r\n");
 80014a0:	4812      	ldr	r0, [pc, #72]	; (80014ec <readAccel_func+0x174>)
 80014a2:	f00a fba7 	bl	800bbf4 <puts>
		}


		printf("Esperamos media hora o hasta que alguien pulse el boton\r\n");
 80014a6:	4812      	ldr	r0, [pc, #72]	; (80014f0 <readAccel_func+0x178>)
 80014a8:	f00a fba4 	bl	800bbf4 <puts>
		osThreadFlagsWait(0x0002U, osFlagsWaitAll, osWaitForever); //espera media hora o que alguien pulse el boton
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295
 80014b0:	2101      	movs	r1, #1
 80014b2:	2002      	movs	r0, #2
 80014b4:	f007 f81a 	bl	80084ec <osThreadFlagsWait>
		printf("Se ha pulsado el boton o ha pasado media hora\r\n");
 80014b8:	480e      	ldr	r0, [pc, #56]	; (80014f4 <readAccel_func+0x17c>)
 80014ba:	f00a fb9b 	bl	800bbf4 <puts>
		BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 80014be:	e77a      	b.n	80013b6 <readAccel_func+0x3e>
 80014c0:	0800cf0c 	.word	0x0800cf0c
 80014c4:	0800cf28 	.word	0x0800cf28
 80014c8:	0800cf44 	.word	0x0800cf44
 80014cc:	20000898 	.word	0x20000898
 80014d0:	20000194 	.word	0x20000194
 80014d4:	20000894 	.word	0x20000894
 80014d8:	0800cedc 	.word	0x0800cedc
 80014dc:	0800cf60 	.word	0x0800cf60
 80014e0:	0800cf7c 	.word	0x0800cf7c
 80014e4:	2000088c 	.word	0x2000088c
 80014e8:	0800cfbc 	.word	0x0800cfbc
 80014ec:	0800cfd0 	.word	0x0800cfd0
 80014f0:	0800cfe4 	.word	0x0800cfe4
 80014f4:	0800d020 	.word	0x0800d020

080014f8 <printTask_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_printTask_func */
void printTask_func(void *argument)
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	uintptr_t mensaje;
	osStatus_t estado;
  /* Infinite loop */
  for(;;)
  {
	  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <printTask_func+0x58>)
 8001502:	6818      	ldr	r0, [r3, #0]
 8001504:	f107 0108 	add.w	r1, r7, #8
 8001508:	f04f 33ff 	mov.w	r3, #4294967295
 800150c:	2200      	movs	r2, #0
 800150e:	f007 f95d 	bl	80087cc <osMessageQueueGet>
 8001512:	60f8      	str	r0, [r7, #12]
	  //printf("Se ha recibido algo en print task\r\n");
	  //printf("Mensaje print task: %s\r\n",mensaje);
	  //printf("Longitud: %d",strlen((char*)mensaje));
	  if (estado == osOK)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10d      	bne.n	8001536 <printTask_func+0x3e>
	  {
		  //printf("%s",(char*)mensaje);
		  HAL_UART_Transmit(&huart1, (uint8_t*)mensaje, strlen(mensaje),10);
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	461c      	mov	r4, r3
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe fe55 	bl	80001d0 <strlen>
 8001526:	4603      	mov	r3, r0
 8001528:	b29a      	uxth	r2, r3
 800152a:	230a      	movs	r3, #10
 800152c:	4621      	mov	r1, r4
 800152e:	4809      	ldr	r0, [pc, #36]	; (8001554 <printTask_func+0x5c>)
 8001530:	f004 fdd0 	bl	80060d4 <HAL_UART_Transmit>
 8001534:	e7e4      	b.n	8001500 <printTask_func+0x8>
	  }
	  else if (estado == osErrorTimeout)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f113 0f02 	cmn.w	r3, #2
 800153c:	d103      	bne.n	8001546 <printTask_func+0x4e>
	  {
		  printf("Timeout printTask\r\n");
 800153e:	4806      	ldr	r0, [pc, #24]	; (8001558 <printTask_func+0x60>)
 8001540:	f00a fb58 	bl	800bbf4 <puts>
 8001544:	e7dc      	b.n	8001500 <printTask_func+0x8>
	  }
	  else
	  {
		  printf("Error en la tarea print\r\n");
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <printTask_func+0x64>)
 8001548:	f00a fb54 	bl	800bbf4 <puts>
	  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 800154c:	e7d8      	b.n	8001500 <printTask_func+0x8>
 800154e:	bf00      	nop
 8001550:	2000088c 	.word	0x2000088c
 8001554:	20000268 	.word	0x20000268
 8001558:	0800d050 	.word	0x0800d050
 800155c:	0800d064 	.word	0x0800d064

08001560 <tarea_UART_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tarea_UART_func */
void tarea_UART_func(void *argument)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tarea_UART_func */
	osStatus_t estado;
	uint32_t return_wait = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  return_wait = osThreadFlagsWait(0x0002U, osFlagsWaitAny, osWaitForever);
 800156c:	f04f 32ff 	mov.w	r2, #4294967295
 8001570:	2100      	movs	r1, #0
 8001572:	2002      	movs	r0, #2
 8001574:	f006 ffba 	bl	80084ec <osThreadFlagsWait>
 8001578:	60f8      	str	r0, [r7, #12]
	  estado = osMessageQueuePut(receive_queueHandle, &rec_data,0,pdMS_TO_TICKS(200));
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <tarea_UART_func+0x40>)
 800157c:	6818      	ldr	r0, [r3, #0]
 800157e:	23c8      	movs	r3, #200	; 0xc8
 8001580:	2200      	movs	r2, #0
 8001582:	4908      	ldr	r1, [pc, #32]	; (80015a4 <tarea_UART_func+0x44>)
 8001584:	f007 f8c2 	bl	800870c <osMessageQueuePut>
 8001588:	60b8      	str	r0, [r7, #8]
	  if (estado == osOK)
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d103      	bne.n	8001598 <tarea_UART_func+0x38>
		  printf("Estado: ok\r\n");
 8001590:	4805      	ldr	r0, [pc, #20]	; (80015a8 <tarea_UART_func+0x48>)
 8001592:	f00a fb2f 	bl	800bbf4 <puts>
 8001596:	e7e9      	b.n	800156c <tarea_UART_func+0xc>
	  else
		  printf("Algo no va bien\r\n");
 8001598:	4804      	ldr	r0, [pc, #16]	; (80015ac <tarea_UART_func+0x4c>)
 800159a:	f00a fb2b 	bl	800bbf4 <puts>
	  return_wait = osThreadFlagsWait(0x0002U, osFlagsWaitAny, osWaitForever);
 800159e:	e7e5      	b.n	800156c <tarea_UART_func+0xc>
 80015a0:	20000890 	.word	0x20000890
 80015a4:	200008b4 	.word	0x200008b4
 80015a8:	0800d080 	.word	0x0800d080
 80015ac:	0800cec8 	.word	0x0800cec8

080015b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d101      	bne.n	80015c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015c2:	f000 fcfd 	bl	8001fc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40001000 	.word	0x40001000

080015d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d8:	b672      	cpsid	i
}
 80015da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015dc:	e7fe      	b.n	80015dc <Error_Handler+0x8>
	...

080015e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <HAL_MspInit+0x4c>)
 80015e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ea:	4a10      	ldr	r2, [pc, #64]	; (800162c <HAL_MspInit+0x4c>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6613      	str	r3, [r2, #96]	; 0x60
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_MspInit+0x4c>)
 80015f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_MspInit+0x4c>)
 8001600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <HAL_MspInit+0x4c>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001608:	6593      	str	r3, [r2, #88]	; 0x58
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <HAL_MspInit+0x4c>)
 800160c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	210f      	movs	r1, #15
 800161a:	f06f 0001 	mvn.w	r0, #1
 800161e:	f000 fdcb 	bl	80021b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000

08001630 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b0ac      	sub	sp, #176	; 0xb0
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2288      	movs	r2, #136	; 0x88
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f00a f9ac 	bl	800b9ae <memset>
  if(DFSDM1_Init == 0)
 8001656:	4b25      	ldr	r3, [pc, #148]	; (80016ec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d142      	bne.n	80016e4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800165e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001662:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001664:	2300      	movs	r3, #0
 8001666:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4618      	mov	r0, r3
 8001670:	f003 f90a 	bl	8004888 <HAL_RCCEx_PeriphCLKConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800167a:	f7ff ffab 	bl	80015d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800167e:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001682:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001684:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001688:	6613      	str	r3, [r2, #96]	; 0x60
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800168c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800168e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001696:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	4a15      	ldr	r2, [pc, #84]	; (80016f0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800169c:	f043 0310 	orr.w	r3, r3, #16
 80016a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	f003 0310 	and.w	r3, r3, #16
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80016ae:	f44f 7320 	mov.w	r3, #640	; 0x280
 80016b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80016c8:	2306      	movs	r3, #6
 80016ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016d2:	4619      	mov	r1, r3
 80016d4:	4807      	ldr	r0, [pc, #28]	; (80016f4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80016d6:	f000 ff25 	bl	8002524 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80016da:	4b04      	ldr	r3, [pc, #16]	; (80016ec <HAL_DFSDM_ChannelMspInit+0xbc>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	3301      	adds	r3, #1
 80016e0:	4a02      	ldr	r2, [pc, #8]	; (80016ec <HAL_DFSDM_ChannelMspInit+0xbc>)
 80016e2:	6013      	str	r3, [r2, #0]
  }

}
 80016e4:	bf00      	nop
 80016e6:	37b0      	adds	r7, #176	; 0xb0
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200008b8 	.word	0x200008b8
 80016f0:	40021000 	.word	0x40021000
 80016f4:	48001000 	.word	0x48001000

080016f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b0ac      	sub	sp, #176	; 0xb0
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	2288      	movs	r2, #136	; 0x88
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f00a f948 	bl	800b9ae <memset>
  if(hi2c->Instance==I2C2)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a21      	ldr	r2, [pc, #132]	; (80017a8 <HAL_I2C_MspInit+0xb0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d13b      	bne.n	80017a0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800172c:	2300      	movs	r3, #0
 800172e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4618      	mov	r0, r3
 8001736:	f003 f8a7 	bl	8004888 <HAL_RCCEx_PeriphCLKConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001740:	f7ff ff48 	bl	80015d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_I2C_MspInit+0xb4>)
 8001746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001748:	4a18      	ldr	r2, [pc, #96]	; (80017ac <HAL_I2C_MspInit+0xb4>)
 800174a:	f043 0302 	orr.w	r3, r3, #2
 800174e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001750:	4b16      	ldr	r3, [pc, #88]	; (80017ac <HAL_I2C_MspInit+0xb4>)
 8001752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800175c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001764:	2312      	movs	r3, #18
 8001766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800176a:	2301      	movs	r3, #1
 800176c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001776:	2304      	movs	r3, #4
 8001778:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001780:	4619      	mov	r1, r3
 8001782:	480b      	ldr	r0, [pc, #44]	; (80017b0 <HAL_I2C_MspInit+0xb8>)
 8001784:	f000 fece 	bl	8002524 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <HAL_I2C_MspInit+0xb4>)
 800178a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178c:	4a07      	ldr	r2, [pc, #28]	; (80017ac <HAL_I2C_MspInit+0xb4>)
 800178e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001792:	6593      	str	r3, [r2, #88]	; 0x58
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <HAL_I2C_MspInit+0xb4>)
 8001796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017a0:	bf00      	nop
 80017a2:	37b0      	adds	r7, #176	; 0xb0
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40005800 	.word	0x40005800
 80017ac:	40021000 	.word	0x40021000
 80017b0:	48000400 	.word	0x48000400

080017b4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <HAL_I2C_MspDeInit+0x3c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d10f      	bne.n	80017e6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_I2C_MspDeInit+0x40>)
 80017c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <HAL_I2C_MspDeInit+0x40>)
 80017cc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80017d0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80017d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017d6:	4808      	ldr	r0, [pc, #32]	; (80017f8 <HAL_I2C_MspDeInit+0x44>)
 80017d8:	f001 f84e 	bl	8002878 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80017dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017e0:	4805      	ldr	r0, [pc, #20]	; (80017f8 <HAL_I2C_MspDeInit+0x44>)
 80017e2:	f001 f849 	bl	8002878 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40005800 	.word	0x40005800
 80017f4:	40021000 	.word	0x40021000
 80017f8:	48000400 	.word	0x48000400

080017fc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a17      	ldr	r2, [pc, #92]	; (8001878 <HAL_QSPI_MspInit+0x7c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d128      	bne.n	8001870 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800181e:	4b17      	ldr	r3, [pc, #92]	; (800187c <HAL_QSPI_MspInit+0x80>)
 8001820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001822:	4a16      	ldr	r2, [pc, #88]	; (800187c <HAL_QSPI_MspInit+0x80>)
 8001824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001828:	6513      	str	r3, [r2, #80]	; 0x50
 800182a:	4b14      	ldr	r3, [pc, #80]	; (800187c <HAL_QSPI_MspInit+0x80>)
 800182c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800182e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001836:	4b11      	ldr	r3, [pc, #68]	; (800187c <HAL_QSPI_MspInit+0x80>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	4a10      	ldr	r2, [pc, #64]	; (800187c <HAL_QSPI_MspInit+0x80>)
 800183c:	f043 0310 	orr.w	r3, r3, #16
 8001840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <HAL_QSPI_MspInit+0x80>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800184e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001852:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	2302      	movs	r3, #2
 8001856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185c:	2303      	movs	r3, #3
 800185e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001860:	230a      	movs	r3, #10
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4619      	mov	r1, r3
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <HAL_QSPI_MspInit+0x84>)
 800186c:	f000 fe5a 	bl	8002524 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001870:	bf00      	nop
 8001872:	3728      	adds	r7, #40	; 0x28
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	a0001000 	.word	0xa0001000
 800187c:	40021000 	.word	0x40021000
 8001880:	48001000 	.word	0x48001000

08001884 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b0a4      	sub	sp, #144	; 0x90
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	2288      	movs	r2, #136	; 0x88
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f00a f88a 	bl	800b9ae <memset>
  if(hrtc->Instance==RTC)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a10      	ldr	r2, [pc, #64]	; (80018e0 <HAL_RTC_MspInit+0x5c>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d118      	bne.n	80018d6 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80018a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018a8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80018aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018b2:	f107 0308 	add.w	r3, r7, #8
 80018b6:	4618      	mov	r0, r3
 80018b8:	f002 ffe6 	bl	8004888 <HAL_RCCEx_PeriphCLKConfig>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80018c2:	f7ff fe87 	bl	80015d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80018c6:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <HAL_RTC_MspInit+0x60>)
 80018c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018cc:	4a05      	ldr	r2, [pc, #20]	; (80018e4 <HAL_RTC_MspInit+0x60>)
 80018ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80018d6:	bf00      	nop
 80018d8:	3790      	adds	r7, #144	; 0x90
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40002800 	.word	0x40002800
 80018e4:	40021000 	.word	0x40021000

080018e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	; 0x28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a17      	ldr	r2, [pc, #92]	; (8001964 <HAL_SPI_MspInit+0x7c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d128      	bne.n	800195c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800190a:	4b17      	ldr	r3, [pc, #92]	; (8001968 <HAL_SPI_MspInit+0x80>)
 800190c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190e:	4a16      	ldr	r2, [pc, #88]	; (8001968 <HAL_SPI_MspInit+0x80>)
 8001910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001914:	6593      	str	r3, [r2, #88]	; 0x58
 8001916:	4b14      	ldr	r3, [pc, #80]	; (8001968 <HAL_SPI_MspInit+0x80>)
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001922:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_SPI_MspInit+0x80>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	4a10      	ldr	r2, [pc, #64]	; (8001968 <HAL_SPI_MspInit+0x80>)
 8001928:	f043 0304 	orr.w	r3, r3, #4
 800192c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_SPI_MspInit+0x80>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800193a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800193e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800194c:	2306      	movs	r3, #6
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4619      	mov	r1, r3
 8001956:	4805      	ldr	r0, [pc, #20]	; (800196c <HAL_SPI_MspInit+0x84>)
 8001958:	f000 fde4 	bl	8002524 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800195c:	bf00      	nop
 800195e:	3728      	adds	r7, #40	; 0x28
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40003c00 	.word	0x40003c00
 8001968:	40021000 	.word	0x40021000
 800196c:	48000800 	.word	0x48000800

08001970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0d      	ldr	r2, [pc, #52]	; (80019b4 <HAL_TIM_Base_MspInit+0x44>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d113      	bne.n	80019aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001982:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <HAL_TIM_Base_MspInit+0x48>)
 8001984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001986:	4a0c      	ldr	r2, [pc, #48]	; (80019b8 <HAL_TIM_Base_MspInit+0x48>)
 8001988:	f043 0320 	orr.w	r3, r3, #32
 800198c:	6593      	str	r3, [r2, #88]	; 0x58
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_TIM_Base_MspInit+0x48>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	f003 0320 	and.w	r3, r3, #32
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2105      	movs	r1, #5
 800199e:	2037      	movs	r0, #55	; 0x37
 80019a0:	f000 fc0a 	bl	80021b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80019a4:	2037      	movs	r0, #55	; 0x37
 80019a6:	f000 fc23 	bl	80021f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40001400 	.word	0x40001400
 80019b8:	40021000 	.word	0x40021000

080019bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b0ae      	sub	sp, #184	; 0xb8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d4:	f107 031c 	add.w	r3, r7, #28
 80019d8:	2288      	movs	r2, #136	; 0x88
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f009 ffe6 	bl	800b9ae <memset>
  if(huart->Instance==USART1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a46      	ldr	r2, [pc, #280]	; (8001b00 <HAL_UART_MspInit+0x144>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d143      	bne.n	8001a74 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019ec:	2301      	movs	r3, #1
 80019ee:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019f0:	2300      	movs	r3, #0
 80019f2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f4:	f107 031c 	add.w	r3, r7, #28
 80019f8:	4618      	mov	r0, r3
 80019fa:	f002 ff45 	bl	8004888 <HAL_RCCEx_PeriphCLKConfig>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a04:	f7ff fde6 	bl	80015d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a08:	4b3e      	ldr	r3, [pc, #248]	; (8001b04 <HAL_UART_MspInit+0x148>)
 8001a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0c:	4a3d      	ldr	r2, [pc, #244]	; (8001b04 <HAL_UART_MspInit+0x148>)
 8001a0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a12:	6613      	str	r3, [r2, #96]	; 0x60
 8001a14:	4b3b      	ldr	r3, [pc, #236]	; (8001b04 <HAL_UART_MspInit+0x148>)
 8001a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1c:	61bb      	str	r3, [r7, #24]
 8001a1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a20:	4b38      	ldr	r3, [pc, #224]	; (8001b04 <HAL_UART_MspInit+0x148>)
 8001a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a24:	4a37      	ldr	r2, [pc, #220]	; (8001b04 <HAL_UART_MspInit+0x148>)
 8001a26:	f043 0302 	orr.w	r3, r3, #2
 8001a2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2c:	4b35      	ldr	r3, [pc, #212]	; (8001b04 <HAL_UART_MspInit+0x148>)
 8001a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001a38:	23c0      	movs	r3, #192	; 0xc0
 8001a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a50:	2307      	movs	r3, #7
 8001a52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a56:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	482a      	ldr	r0, [pc, #168]	; (8001b08 <HAL_UART_MspInit+0x14c>)
 8001a5e:	f000 fd61 	bl	8002524 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2105      	movs	r1, #5
 8001a66:	2025      	movs	r0, #37	; 0x25
 8001a68:	f000 fba6 	bl	80021b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a6c:	2025      	movs	r0, #37	; 0x25
 8001a6e:	f000 fbbf 	bl	80021f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a72:	e040      	b.n	8001af6 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART3)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a24      	ldr	r2, [pc, #144]	; (8001b0c <HAL_UART_MspInit+0x150>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d13b      	bne.n	8001af6 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a7e:	2304      	movs	r3, #4
 8001a80:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a82:	2300      	movs	r3, #0
 8001a84:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a86:	f107 031c 	add.w	r3, r7, #28
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f002 fefc 	bl	8004888 <HAL_RCCEx_PeriphCLKConfig>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_UART_MspInit+0xde>
      Error_Handler();
 8001a96:	f7ff fd9d 	bl	80015d4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <HAL_UART_MspInit+0x148>)
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9e:	4a19      	ldr	r2, [pc, #100]	; (8001b04 <HAL_UART_MspInit+0x148>)
 8001aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa4:	6593      	str	r3, [r2, #88]	; 0x58
 8001aa6:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <HAL_UART_MspInit+0x148>)
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <HAL_UART_MspInit+0x148>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	4a13      	ldr	r2, [pc, #76]	; (8001b04 <HAL_UART_MspInit+0x148>)
 8001ab8:	f043 0308 	orr.w	r3, r3, #8
 8001abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <HAL_UART_MspInit+0x148>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001aca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ace:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ae4:	2307      	movs	r3, #7
 8001ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001aee:	4619      	mov	r1, r3
 8001af0:	4807      	ldr	r0, [pc, #28]	; (8001b10 <HAL_UART_MspInit+0x154>)
 8001af2:	f000 fd17 	bl	8002524 <HAL_GPIO_Init>
}
 8001af6:	bf00      	nop
 8001af8:	37b8      	adds	r7, #184	; 0xb8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40013800 	.word	0x40013800
 8001b04:	40021000 	.word	0x40021000
 8001b08:	48000400 	.word	0x48000400
 8001b0c:	40004800 	.word	0x40004800
 8001b10:	48000c00 	.word	0x48000c00

08001b14 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b0ac      	sub	sp, #176	; 0xb0
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2288      	movs	r2, #136	; 0x88
 8001b32:	2100      	movs	r1, #0
 8001b34:	4618      	mov	r0, r3
 8001b36:	f009 ff3a 	bl	800b9ae <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b42:	d17c      	bne.n	8001c3e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001b44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b48:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001b4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001b52:	2301      	movs	r3, #1
 8001b54:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b56:	2301      	movs	r3, #1
 8001b58:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001b5a:	2318      	movs	r3, #24
 8001b5c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b5e:	2307      	movs	r3, #7
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b62:	2302      	movs	r3, #2
 8001b64:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b66:	2302      	movs	r3, #2
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001b6a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b6e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4618      	mov	r0, r3
 8001b76:	f002 fe87 	bl	8004888 <HAL_RCCEx_PeriphCLKConfig>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001b80:	f7ff fd28 	bl	80015d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b84:	4b30      	ldr	r3, [pc, #192]	; (8001c48 <HAL_PCD_MspInit+0x134>)
 8001b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b88:	4a2f      	ldr	r2, [pc, #188]	; (8001c48 <HAL_PCD_MspInit+0x134>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b90:	4b2d      	ldr	r3, [pc, #180]	; (8001c48 <HAL_PCD_MspInit+0x134>)
 8001b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ba0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001bb0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bba:	f000 fcb3 	bl	8002524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001bbe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001bc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001bd8:	230a      	movs	r3, #10
 8001bda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bde:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001be2:	4619      	mov	r1, r3
 8001be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be8:	f000 fc9c 	bl	8002524 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001bec:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <HAL_PCD_MspInit+0x134>)
 8001bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf0:	4a15      	ldr	r2, [pc, #84]	; (8001c48 <HAL_PCD_MspInit+0x134>)
 8001bf2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <HAL_PCD_MspInit+0x134>)
 8001bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c04:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <HAL_PCD_MspInit+0x134>)
 8001c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d114      	bne.n	8001c3a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <HAL_PCD_MspInit+0x134>)
 8001c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c14:	4a0c      	ldr	r2, [pc, #48]	; (8001c48 <HAL_PCD_MspInit+0x134>)
 8001c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <HAL_PCD_MspInit+0x134>)
 8001c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001c28:	f001 ff30 	bl	8003a8c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_PCD_MspInit+0x134>)
 8001c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c30:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <HAL_PCD_MspInit+0x134>)
 8001c32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c36:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001c38:	e001      	b.n	8001c3e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001c3a:	f001 ff27 	bl	8003a8c <HAL_PWREx_EnableVddUSB>
}
 8001c3e:	bf00      	nop
 8001c40:	37b0      	adds	r7, #176	; 0xb0
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40021000 	.word	0x40021000

08001c4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08e      	sub	sp, #56	; 0x38
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c5a:	4b34      	ldr	r3, [pc, #208]	; (8001d2c <HAL_InitTick+0xe0>)
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5e:	4a33      	ldr	r2, [pc, #204]	; (8001d2c <HAL_InitTick+0xe0>)
 8001c60:	f043 0310 	orr.w	r3, r3, #16
 8001c64:	6593      	str	r3, [r2, #88]	; 0x58
 8001c66:	4b31      	ldr	r3, [pc, #196]	; (8001d2c <HAL_InitTick+0xe0>)
 8001c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c72:	f107 0210 	add.w	r2, r7, #16
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f002 fd71 	bl	8004764 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d103      	bne.n	8001c94 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c8c:	f002 fd3e 	bl	800470c <HAL_RCC_GetPCLK1Freq>
 8001c90:	6378      	str	r0, [r7, #52]	; 0x34
 8001c92:	e004      	b.n	8001c9e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c94:	f002 fd3a 	bl	800470c <HAL_RCC_GetPCLK1Freq>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca0:	4a23      	ldr	r2, [pc, #140]	; (8001d30 <HAL_InitTick+0xe4>)
 8001ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca6:	0c9b      	lsrs	r3, r3, #18
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001cac:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <HAL_InitTick+0xe8>)
 8001cae:	4a22      	ldr	r2, [pc, #136]	; (8001d38 <HAL_InitTick+0xec>)
 8001cb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001cb2:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <HAL_InitTick+0xe8>)
 8001cb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cb8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001cba:	4a1e      	ldr	r2, [pc, #120]	; (8001d34 <HAL_InitTick+0xe8>)
 8001cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cbe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001cc0:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <HAL_InitTick+0xe8>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc6:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <HAL_InitTick+0xe8>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ccc:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <HAL_InitTick+0xe8>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001cd2:	4818      	ldr	r0, [pc, #96]	; (8001d34 <HAL_InitTick+0xe8>)
 8001cd4:	f003 fe61 	bl	800599a <HAL_TIM_Base_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001cde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d11b      	bne.n	8001d1e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001ce6:	4813      	ldr	r0, [pc, #76]	; (8001d34 <HAL_InitTick+0xe8>)
 8001ce8:	f003 feae 	bl	8005a48 <HAL_TIM_Base_Start_IT>
 8001cec:	4603      	mov	r3, r0
 8001cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001cf2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d111      	bne.n	8001d1e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cfa:	2036      	movs	r0, #54	; 0x36
 8001cfc:	f000 fa78 	bl	80021f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b0f      	cmp	r3, #15
 8001d04:	d808      	bhi.n	8001d18 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001d06:	2200      	movs	r2, #0
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	2036      	movs	r0, #54	; 0x36
 8001d0c:	f000 fa54 	bl	80021b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d10:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <HAL_InitTick+0xf0>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	e002      	b.n	8001d1e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001d1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3738      	adds	r7, #56	; 0x38
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	431bde83 	.word	0x431bde83
 8001d34:	200008bc 	.word	0x200008bc
 8001d38:	40001000 	.word	0x40001000
 8001d3c:	20000004 	.word	0x20000004

08001d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <NMI_Handler+0x4>

08001d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <HardFault_Handler+0x4>

08001d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <MemManage_Handler+0x4>

08001d52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <BusFault_Handler+0x4>

08001d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <UsageFault_Handler+0x4>

08001d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001d70:	2020      	movs	r0, #32
 8001d72:	f000 fe8d 	bl	8002a90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001d76:	2040      	movs	r0, #64	; 0x40
 8001d78:	f000 fe8a 	bl	8002a90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001d7c:	2080      	movs	r0, #128	; 0x80
 8001d7e:	f000 fe87 	bl	8002a90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001d82:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d86:	f000 fe83 	bl	8002a90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <USART1_IRQHandler+0x10>)
 8001d96:	f004 fa87 	bl	80062a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000268 	.word	0x20000268

08001da4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001da8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001dac:	f000 fe70 	bl	8002a90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001db0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001db4:	f000 fe6c 	bl	8002a90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BOTON_Pin);
 8001db8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001dbc:	f000 fe68 	bl	8002a90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001dc0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001dc4:	f000 fe64 	bl	8002a90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001dc8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001dcc:	f000 fe60 	bl	8002a90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001dd8:	4802      	ldr	r0, [pc, #8]	; (8001de4 <TIM6_DAC_IRQHandler+0x10>)
 8001dda:	f003 fea5 	bl	8005b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200008bc 	.word	0x200008bc

08001de8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
  ulHighFrequencyTimerTicks++;
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <TIM7_IRQHandler+0x18>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	3301      	adds	r3, #1
 8001df2:	4a03      	ldr	r2, [pc, #12]	; (8001e00 <TIM7_IRQHandler+0x18>)
 8001df4:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001df6:	4803      	ldr	r0, [pc, #12]	; (8001e04 <TIM7_IRQHandler+0x1c>)
 8001df8:	f003 fe96 	bl	8005b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	200008b0 	.word	0x200008b0
 8001e04:	2000021c 	.word	0x2000021c

08001e08 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	e00a      	b.n	8001e30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e1a:	f3af 8000 	nop.w
 8001e1e:	4601      	mov	r1, r0
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	60ba      	str	r2, [r7, #8]
 8001e26:	b2ca      	uxtb	r2, r1
 8001e28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	dbf0      	blt.n	8001e1a <_read+0x12>
  }

  return len;
 8001e38:	687b      	ldr	r3, [r7, #4]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e6a:	605a      	str	r2, [r3, #4]
  return 0;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <_isatty>:

int _isatty(int file)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e82:	2301      	movs	r3, #1
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb4:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <_sbrk+0x5c>)
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <_sbrk+0x60>)
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec0:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <_sbrk+0x64>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d102      	bne.n	8001ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <_sbrk+0x64>)
 8001eca:	4a12      	ldr	r2, [pc, #72]	; (8001f14 <_sbrk+0x68>)
 8001ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <_sbrk+0x64>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d207      	bcs.n	8001eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001edc:	f009 fc36 	bl	800b74c <__errno>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	220c      	movs	r2, #12
 8001ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eea:	e009      	b.n	8001f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <_sbrk+0x64>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <_sbrk+0x64>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <_sbrk+0x64>)
 8001efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001efe:	68fb      	ldr	r3, [r7, #12]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20018000 	.word	0x20018000
 8001f0c:	00000400 	.word	0x00000400
 8001f10:	20000908 	.word	0x20000908
 8001f14:	20002b48 	.word	0x20002b48

08001f18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <SystemInit+0x20>)
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f22:	4a05      	ldr	r2, [pc, #20]	; (8001f38 <SystemInit+0x20>)
 8001f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f40:	f7ff ffea 	bl	8001f18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f44:	480c      	ldr	r0, [pc, #48]	; (8001f78 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f46:	490d      	ldr	r1, [pc, #52]	; (8001f7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f48:	4a0d      	ldr	r2, [pc, #52]	; (8001f80 <LoopForever+0xe>)
  movs r3, #0
 8001f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f4c:	e002      	b.n	8001f54 <LoopCopyDataInit>

08001f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f52:	3304      	adds	r3, #4

08001f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f58:	d3f9      	bcc.n	8001f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f5c:	4c0a      	ldr	r4, [pc, #40]	; (8001f88 <LoopForever+0x16>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f60:	e001      	b.n	8001f66 <LoopFillZerobss>

08001f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f64:	3204      	adds	r2, #4

08001f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f68:	d3fb      	bcc.n	8001f62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f6a:	f009 fceb 	bl	800b944 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f6e:	f7fe fb4b 	bl	8000608 <main>

08001f72 <LoopForever>:

LoopForever:
    b LoopForever
 8001f72:	e7fe      	b.n	8001f72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f7c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001f80:	0800d27c 	.word	0x0800d27c
  ldr r2, =_sbss
 8001f84:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001f88:	20002b44 	.word	0x20002b44

08001f8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f8c:	e7fe      	b.n	8001f8c <ADC1_2_IRQHandler>

08001f8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f98:	2003      	movs	r0, #3
 8001f9a:	f000 f902 	bl	80021a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f9e:	200f      	movs	r0, #15
 8001fa0:	f7ff fe54 	bl	8001c4c <HAL_InitTick>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d002      	beq.n	8001fb0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	71fb      	strb	r3, [r7, #7]
 8001fae:	e001      	b.n	8001fb4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fb0:	f7ff fb16 	bl	80015e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_IncTick+0x20>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_IncTick+0x24>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <HAL_IncTick+0x24>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000008 	.word	0x20000008
 8001fe4:	2000090c 	.word	0x2000090c

08001fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return uwTick;
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <HAL_GetTick+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	2000090c 	.word	0x2000090c

08002000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff ffee 	bl	8001fe8 <HAL_GetTick>
 800200c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002018:	d005      	beq.n	8002026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <HAL_Delay+0x44>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002026:	bf00      	nop
 8002028:	f7ff ffde 	bl	8001fe8 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	429a      	cmp	r2, r3
 8002036:	d8f7      	bhi.n	8002028 <HAL_Delay+0x28>
  {
  }
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000008 	.word	0x20000008

08002048 <__NVIC_SetPriorityGrouping>:
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <__NVIC_SetPriorityGrouping+0x44>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002064:	4013      	ands	r3, r2
 8002066:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207a:	4a04      	ldr	r2, [pc, #16]	; (800208c <__NVIC_SetPriorityGrouping+0x44>)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	60d3      	str	r3, [r2, #12]
}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_GetPriorityGrouping>:
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	0a1b      	lsrs	r3, r3, #8
 800209a:	f003 0307 	and.w	r3, r3, #7
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_EnableIRQ>:
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	db0b      	blt.n	80020d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	f003 021f 	and.w	r2, r3, #31
 80020c4:	4907      	ldr	r1, [pc, #28]	; (80020e4 <__NVIC_EnableIRQ+0x38>)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	2001      	movs	r0, #1
 80020ce:	fa00 f202 	lsl.w	r2, r0, r2
 80020d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000e100 	.word	0xe000e100

080020e8 <__NVIC_SetPriority>:
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	6039      	str	r1, [r7, #0]
 80020f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	db0a      	blt.n	8002112 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	490c      	ldr	r1, [pc, #48]	; (8002134 <__NVIC_SetPriority+0x4c>)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	0112      	lsls	r2, r2, #4
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	440b      	add	r3, r1
 800210c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002110:	e00a      	b.n	8002128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4908      	ldr	r1, [pc, #32]	; (8002138 <__NVIC_SetPriority+0x50>)
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	3b04      	subs	r3, #4
 8002120:	0112      	lsls	r2, r2, #4
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	440b      	add	r3, r1
 8002126:	761a      	strb	r2, [r3, #24]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000e100 	.word	0xe000e100
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <NVIC_EncodePriority>:
{
 800213c:	b480      	push	{r7}
 800213e:	b089      	sub	sp, #36	; 0x24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f1c3 0307 	rsb	r3, r3, #7
 8002156:	2b04      	cmp	r3, #4
 8002158:	bf28      	it	cs
 800215a:	2304      	movcs	r3, #4
 800215c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3304      	adds	r3, #4
 8002162:	2b06      	cmp	r3, #6
 8002164:	d902      	bls.n	800216c <NVIC_EncodePriority+0x30>
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3b03      	subs	r3, #3
 800216a:	e000      	b.n	800216e <NVIC_EncodePriority+0x32>
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	f04f 32ff 	mov.w	r2, #4294967295
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43da      	mvns	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	401a      	ands	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002184:	f04f 31ff 	mov.w	r1, #4294967295
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	fa01 f303 	lsl.w	r3, r1, r3
 800218e:	43d9      	mvns	r1, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	4313      	orrs	r3, r2
}
 8002196:	4618      	mov	r0, r3
 8002198:	3724      	adds	r7, #36	; 0x24
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ff4c 	bl	8002048 <__NVIC_SetPriorityGrouping>
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021ca:	f7ff ff61 	bl	8002090 <__NVIC_GetPriorityGrouping>
 80021ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	68b9      	ldr	r1, [r7, #8]
 80021d4:	6978      	ldr	r0, [r7, #20]
 80021d6:	f7ff ffb1 	bl	800213c <NVIC_EncodePriority>
 80021da:	4602      	mov	r2, r0
 80021dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e0:	4611      	mov	r1, r2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff ff80 	bl	80020e8 <__NVIC_SetPriority>
}
 80021e8:	bf00      	nop
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff ff54 	bl	80020ac <__NVIC_EnableIRQ>
}
 8002204:	bf00      	nop
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e0ac      	b.n	8002378 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f8b2 	bl	800238c <DFSDM_GetChannelFromInstance>
 8002228:	4603      	mov	r3, r0
 800222a:	4a55      	ldr	r2, [pc, #340]	; (8002380 <HAL_DFSDM_ChannelInit+0x174>)
 800222c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e09f      	b.n	8002378 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff f9f9 	bl	8001630 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800223e:	4b51      	ldr	r3, [pc, #324]	; (8002384 <HAL_DFSDM_ChannelInit+0x178>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	3301      	adds	r3, #1
 8002244:	4a4f      	ldr	r2, [pc, #316]	; (8002384 <HAL_DFSDM_ChannelInit+0x178>)
 8002246:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002248:	4b4e      	ldr	r3, [pc, #312]	; (8002384 <HAL_DFSDM_ChannelInit+0x178>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d125      	bne.n	800229c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002250:	4b4d      	ldr	r3, [pc, #308]	; (8002388 <HAL_DFSDM_ChannelInit+0x17c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a4c      	ldr	r2, [pc, #304]	; (8002388 <HAL_DFSDM_ChannelInit+0x17c>)
 8002256:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800225a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800225c:	4b4a      	ldr	r3, [pc, #296]	; (8002388 <HAL_DFSDM_ChannelInit+0x17c>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4948      	ldr	r1, [pc, #288]	; (8002388 <HAL_DFSDM_ChannelInit+0x17c>)
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800226a:	4b47      	ldr	r3, [pc, #284]	; (8002388 <HAL_DFSDM_ChannelInit+0x17c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a46      	ldr	r2, [pc, #280]	; (8002388 <HAL_DFSDM_ChannelInit+0x17c>)
 8002270:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002274:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	791b      	ldrb	r3, [r3, #4]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d108      	bne.n	8002290 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800227e:	4b42      	ldr	r3, [pc, #264]	; (8002388 <HAL_DFSDM_ChannelInit+0x17c>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	3b01      	subs	r3, #1
 8002288:	041b      	lsls	r3, r3, #16
 800228a:	493f      	ldr	r1, [pc, #252]	; (8002388 <HAL_DFSDM_ChannelInit+0x17c>)
 800228c:	4313      	orrs	r3, r2
 800228e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002290:	4b3d      	ldr	r3, [pc, #244]	; (8002388 <HAL_DFSDM_ChannelInit+0x17c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a3c      	ldr	r2, [pc, #240]	; (8002388 <HAL_DFSDM_ChannelInit+0x17c>)
 8002296:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800229a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80022aa:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6819      	ldr	r1, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80022ba:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80022c0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 020f 	bic.w	r2, r2, #15
 80022d8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6819      	ldr	r1, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80022e8:	431a      	orrs	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002300:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6899      	ldr	r1, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002310:	3b01      	subs	r3, #1
 8002312:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f002 0207 	and.w	r2, r2, #7
 800232c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6859      	ldr	r1, [r3, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002338:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002340:	431a      	orrs	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002358:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f000 f810 	bl	800238c <DFSDM_GetChannelFromInstance>
 800236c:	4602      	mov	r2, r0
 800236e:	4904      	ldr	r1, [pc, #16]	; (8002380 <HAL_DFSDM_ChannelInit+0x174>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20000914 	.word	0x20000914
 8002384:	20000910 	.word	0x20000910
 8002388:	40016000 	.word	0x40016000

0800238c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a1c      	ldr	r2, [pc, #112]	; (8002408 <DFSDM_GetChannelFromInstance+0x7c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d102      	bne.n	80023a2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	e02b      	b.n	80023fa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a19      	ldr	r2, [pc, #100]	; (800240c <DFSDM_GetChannelFromInstance+0x80>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d102      	bne.n	80023b0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80023aa:	2301      	movs	r3, #1
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	e024      	b.n	80023fa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a17      	ldr	r2, [pc, #92]	; (8002410 <DFSDM_GetChannelFromInstance+0x84>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d102      	bne.n	80023be <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80023b8:	2302      	movs	r3, #2
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	e01d      	b.n	80023fa <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a14      	ldr	r2, [pc, #80]	; (8002414 <DFSDM_GetChannelFromInstance+0x88>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d102      	bne.n	80023cc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80023c6:	2304      	movs	r3, #4
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	e016      	b.n	80023fa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a12      	ldr	r2, [pc, #72]	; (8002418 <DFSDM_GetChannelFromInstance+0x8c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d102      	bne.n	80023da <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80023d4:	2305      	movs	r3, #5
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	e00f      	b.n	80023fa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a0f      	ldr	r2, [pc, #60]	; (800241c <DFSDM_GetChannelFromInstance+0x90>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d102      	bne.n	80023e8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80023e2:	2306      	movs	r3, #6
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	e008      	b.n	80023fa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a0d      	ldr	r2, [pc, #52]	; (8002420 <DFSDM_GetChannelFromInstance+0x94>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d102      	bne.n	80023f6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80023f0:	2307      	movs	r3, #7
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	e001      	b.n	80023fa <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80023f6:	2303      	movs	r3, #3
 80023f8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80023fa:	68fb      	ldr	r3, [r7, #12]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	40016000 	.word	0x40016000
 800240c:	40016020 	.word	0x40016020
 8002410:	40016040 	.word	0x40016040
 8002414:	40016080 	.word	0x40016080
 8002418:	400160a0 	.word	0x400160a0
 800241c:	400160c0 	.word	0x400160c0
 8002420:	400160e0 	.word	0x400160e0

08002424 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d008      	beq.n	800244e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2204      	movs	r2, #4
 8002440:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e022      	b.n	8002494 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 020e 	bic.w	r2, r2, #14
 800245c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0201 	bic.w	r2, r2, #1
 800246c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	f003 021c 	and.w	r2, r3, #28
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	2101      	movs	r1, #1
 800247c:	fa01 f202 	lsl.w	r2, r1, r2
 8002480:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002492:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002494:	4618      	mov	r0, r3
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d005      	beq.n	80024c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2204      	movs	r2, #4
 80024bc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	73fb      	strb	r3, [r7, #15]
 80024c2:	e029      	b.n	8002518 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 020e 	bic.w	r2, r2, #14
 80024d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0201 	bic.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e8:	f003 021c 	and.w	r2, r3, #28
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	2101      	movs	r1, #1
 80024f2:	fa01 f202 	lsl.w	r2, r1, r2
 80024f6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	4798      	blx	r3
    }
  }
  return status;
 8002518:	7bfb      	ldrb	r3, [r7, #15]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002524:	b480      	push	{r7}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002532:	e17f      	b.n	8002834 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	2101      	movs	r1, #1
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	fa01 f303 	lsl.w	r3, r1, r3
 8002540:	4013      	ands	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 8171 	beq.w	800282e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b01      	cmp	r3, #1
 8002556:	d005      	beq.n	8002564 <HAL_GPIO_Init+0x40>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d130      	bne.n	80025c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	2203      	movs	r2, #3
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800259a:	2201      	movs	r2, #1
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4013      	ands	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	f003 0201 	and.w	r2, r3, #1
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d118      	bne.n	8002604 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80025d8:	2201      	movs	r2, #1
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4013      	ands	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	08db      	lsrs	r3, r3, #3
 80025ee:	f003 0201 	and.w	r2, r3, #1
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	2b03      	cmp	r3, #3
 800260e:	d017      	beq.n	8002640 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	2203      	movs	r2, #3
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d123      	bne.n	8002694 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	08da      	lsrs	r2, r3, #3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3208      	adds	r2, #8
 8002654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002658:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	220f      	movs	r2, #15
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4013      	ands	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	08da      	lsrs	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3208      	adds	r2, #8
 800268e:	6939      	ldr	r1, [r7, #16]
 8002690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	2203      	movs	r2, #3
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4013      	ands	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 0203 	and.w	r2, r3, #3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80ac 	beq.w	800282e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d6:	4b5f      	ldr	r3, [pc, #380]	; (8002854 <HAL_GPIO_Init+0x330>)
 80026d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026da:	4a5e      	ldr	r2, [pc, #376]	; (8002854 <HAL_GPIO_Init+0x330>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6613      	str	r3, [r2, #96]	; 0x60
 80026e2:	4b5c      	ldr	r3, [pc, #368]	; (8002854 <HAL_GPIO_Init+0x330>)
 80026e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026ee:	4a5a      	ldr	r2, [pc, #360]	; (8002858 <HAL_GPIO_Init+0x334>)
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	089b      	lsrs	r3, r3, #2
 80026f4:	3302      	adds	r3, #2
 80026f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	220f      	movs	r2, #15
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4013      	ands	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002718:	d025      	beq.n	8002766 <HAL_GPIO_Init+0x242>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4f      	ldr	r2, [pc, #316]	; (800285c <HAL_GPIO_Init+0x338>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d01f      	beq.n	8002762 <HAL_GPIO_Init+0x23e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4e      	ldr	r2, [pc, #312]	; (8002860 <HAL_GPIO_Init+0x33c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d019      	beq.n	800275e <HAL_GPIO_Init+0x23a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4d      	ldr	r2, [pc, #308]	; (8002864 <HAL_GPIO_Init+0x340>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d013      	beq.n	800275a <HAL_GPIO_Init+0x236>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4c      	ldr	r2, [pc, #304]	; (8002868 <HAL_GPIO_Init+0x344>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00d      	beq.n	8002756 <HAL_GPIO_Init+0x232>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4b      	ldr	r2, [pc, #300]	; (800286c <HAL_GPIO_Init+0x348>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d007      	beq.n	8002752 <HAL_GPIO_Init+0x22e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4a      	ldr	r2, [pc, #296]	; (8002870 <HAL_GPIO_Init+0x34c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d101      	bne.n	800274e <HAL_GPIO_Init+0x22a>
 800274a:	2306      	movs	r3, #6
 800274c:	e00c      	b.n	8002768 <HAL_GPIO_Init+0x244>
 800274e:	2307      	movs	r3, #7
 8002750:	e00a      	b.n	8002768 <HAL_GPIO_Init+0x244>
 8002752:	2305      	movs	r3, #5
 8002754:	e008      	b.n	8002768 <HAL_GPIO_Init+0x244>
 8002756:	2304      	movs	r3, #4
 8002758:	e006      	b.n	8002768 <HAL_GPIO_Init+0x244>
 800275a:	2303      	movs	r3, #3
 800275c:	e004      	b.n	8002768 <HAL_GPIO_Init+0x244>
 800275e:	2302      	movs	r3, #2
 8002760:	e002      	b.n	8002768 <HAL_GPIO_Init+0x244>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <HAL_GPIO_Init+0x244>
 8002766:	2300      	movs	r3, #0
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	f002 0203 	and.w	r2, r2, #3
 800276e:	0092      	lsls	r2, r2, #2
 8002770:	4093      	lsls	r3, r2
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002778:	4937      	ldr	r1, [pc, #220]	; (8002858 <HAL_GPIO_Init+0x334>)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	3302      	adds	r3, #2
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002786:	4b3b      	ldr	r3, [pc, #236]	; (8002874 <HAL_GPIO_Init+0x350>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	43db      	mvns	r3, r3
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4013      	ands	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027aa:	4a32      	ldr	r2, [pc, #200]	; (8002874 <HAL_GPIO_Init+0x350>)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027b0:	4b30      	ldr	r3, [pc, #192]	; (8002874 <HAL_GPIO_Init+0x350>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027d4:	4a27      	ldr	r2, [pc, #156]	; (8002874 <HAL_GPIO_Init+0x350>)
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027da:	4b26      	ldr	r3, [pc, #152]	; (8002874 <HAL_GPIO_Init+0x350>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	43db      	mvns	r3, r3
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4013      	ands	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027fe:	4a1d      	ldr	r2, [pc, #116]	; (8002874 <HAL_GPIO_Init+0x350>)
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002804:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <HAL_GPIO_Init+0x350>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	43db      	mvns	r3, r3
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4013      	ands	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002828:	4a12      	ldr	r2, [pc, #72]	; (8002874 <HAL_GPIO_Init+0x350>)
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	3301      	adds	r3, #1
 8002832:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	fa22 f303 	lsr.w	r3, r2, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	f47f ae78 	bne.w	8002534 <HAL_GPIO_Init+0x10>
  }
}
 8002844:	bf00      	nop
 8002846:	bf00      	nop
 8002848:	371c      	adds	r7, #28
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40021000 	.word	0x40021000
 8002858:	40010000 	.word	0x40010000
 800285c:	48000400 	.word	0x48000400
 8002860:	48000800 	.word	0x48000800
 8002864:	48000c00 	.word	0x48000c00
 8002868:	48001000 	.word	0x48001000
 800286c:	48001400 	.word	0x48001400
 8002870:	48001800 	.word	0x48001800
 8002874:	40010400 	.word	0x40010400

08002878 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002886:	e0cd      	b.n	8002a24 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002888:	2201      	movs	r2, #1
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	4013      	ands	r3, r2
 8002894:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 80c0 	beq.w	8002a1e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800289e:	4a68      	ldr	r2, [pc, #416]	; (8002a40 <HAL_GPIO_DeInit+0x1c8>)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	089b      	lsrs	r3, r3, #2
 80028a4:	3302      	adds	r3, #2
 80028a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028aa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	220f      	movs	r2, #15
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4013      	ands	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028c6:	d025      	beq.n	8002914 <HAL_GPIO_DeInit+0x9c>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a5e      	ldr	r2, [pc, #376]	; (8002a44 <HAL_GPIO_DeInit+0x1cc>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d01f      	beq.n	8002910 <HAL_GPIO_DeInit+0x98>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a5d      	ldr	r2, [pc, #372]	; (8002a48 <HAL_GPIO_DeInit+0x1d0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d019      	beq.n	800290c <HAL_GPIO_DeInit+0x94>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a5c      	ldr	r2, [pc, #368]	; (8002a4c <HAL_GPIO_DeInit+0x1d4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d013      	beq.n	8002908 <HAL_GPIO_DeInit+0x90>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a5b      	ldr	r2, [pc, #364]	; (8002a50 <HAL_GPIO_DeInit+0x1d8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d00d      	beq.n	8002904 <HAL_GPIO_DeInit+0x8c>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a5a      	ldr	r2, [pc, #360]	; (8002a54 <HAL_GPIO_DeInit+0x1dc>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d007      	beq.n	8002900 <HAL_GPIO_DeInit+0x88>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a59      	ldr	r2, [pc, #356]	; (8002a58 <HAL_GPIO_DeInit+0x1e0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d101      	bne.n	80028fc <HAL_GPIO_DeInit+0x84>
 80028f8:	2306      	movs	r3, #6
 80028fa:	e00c      	b.n	8002916 <HAL_GPIO_DeInit+0x9e>
 80028fc:	2307      	movs	r3, #7
 80028fe:	e00a      	b.n	8002916 <HAL_GPIO_DeInit+0x9e>
 8002900:	2305      	movs	r3, #5
 8002902:	e008      	b.n	8002916 <HAL_GPIO_DeInit+0x9e>
 8002904:	2304      	movs	r3, #4
 8002906:	e006      	b.n	8002916 <HAL_GPIO_DeInit+0x9e>
 8002908:	2303      	movs	r3, #3
 800290a:	e004      	b.n	8002916 <HAL_GPIO_DeInit+0x9e>
 800290c:	2302      	movs	r3, #2
 800290e:	e002      	b.n	8002916 <HAL_GPIO_DeInit+0x9e>
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <HAL_GPIO_DeInit+0x9e>
 8002914:	2300      	movs	r3, #0
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	f002 0203 	and.w	r2, r2, #3
 800291c:	0092      	lsls	r2, r2, #2
 800291e:	4093      	lsls	r3, r2
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	429a      	cmp	r2, r3
 8002924:	d132      	bne.n	800298c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002926:	4b4d      	ldr	r3, [pc, #308]	; (8002a5c <HAL_GPIO_DeInit+0x1e4>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	43db      	mvns	r3, r3
 800292e:	494b      	ldr	r1, [pc, #300]	; (8002a5c <HAL_GPIO_DeInit+0x1e4>)
 8002930:	4013      	ands	r3, r2
 8002932:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002934:	4b49      	ldr	r3, [pc, #292]	; (8002a5c <HAL_GPIO_DeInit+0x1e4>)
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	43db      	mvns	r3, r3
 800293c:	4947      	ldr	r1, [pc, #284]	; (8002a5c <HAL_GPIO_DeInit+0x1e4>)
 800293e:	4013      	ands	r3, r2
 8002940:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002942:	4b46      	ldr	r3, [pc, #280]	; (8002a5c <HAL_GPIO_DeInit+0x1e4>)
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	43db      	mvns	r3, r3
 800294a:	4944      	ldr	r1, [pc, #272]	; (8002a5c <HAL_GPIO_DeInit+0x1e4>)
 800294c:	4013      	ands	r3, r2
 800294e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002950:	4b42      	ldr	r3, [pc, #264]	; (8002a5c <HAL_GPIO_DeInit+0x1e4>)
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	43db      	mvns	r3, r3
 8002958:	4940      	ldr	r1, [pc, #256]	; (8002a5c <HAL_GPIO_DeInit+0x1e4>)
 800295a:	4013      	ands	r3, r2
 800295c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	220f      	movs	r2, #15
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800296e:	4a34      	ldr	r2, [pc, #208]	; (8002a40 <HAL_GPIO_DeInit+0x1c8>)
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	089b      	lsrs	r3, r3, #2
 8002974:	3302      	adds	r3, #2
 8002976:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	43da      	mvns	r2, r3
 800297e:	4830      	ldr	r0, [pc, #192]	; (8002a40 <HAL_GPIO_DeInit+0x1c8>)
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	089b      	lsrs	r3, r3, #2
 8002984:	400a      	ands	r2, r1
 8002986:	3302      	adds	r3, #2
 8002988:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	2103      	movs	r1, #3
 8002996:	fa01 f303 	lsl.w	r3, r1, r3
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	08da      	lsrs	r2, r3, #3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3208      	adds	r2, #8
 80029a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	220f      	movs	r2, #15
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	08d2      	lsrs	r2, r2, #3
 80029c0:	4019      	ands	r1, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3208      	adds	r2, #8
 80029c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	2103      	movs	r1, #3
 80029d4:	fa01 f303 	lsl.w	r3, r1, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	401a      	ands	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	2101      	movs	r1, #1
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	401a      	ands	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	2103      	movs	r1, #3
 80029fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	401a      	ands	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0e:	2101      	movs	r1, #1
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	fa01 f303 	lsl.w	r3, r1, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	401a      	ands	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	3301      	adds	r3, #1
 8002a22:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f47f af2b 	bne.w	8002888 <HAL_GPIO_DeInit+0x10>
  }
}
 8002a32:	bf00      	nop
 8002a34:	bf00      	nop
 8002a36:	371c      	adds	r7, #28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	40010000 	.word	0x40010000
 8002a44:	48000400 	.word	0x48000400
 8002a48:	48000800 	.word	0x48000800
 8002a4c:	48000c00 	.word	0x48000c00
 8002a50:	48001000 	.word	0x48001000
 8002a54:	48001400 	.word	0x48001400
 8002a58:	48001800 	.word	0x48001800
 8002a5c:	40010400 	.word	0x40010400

08002a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	807b      	strh	r3, [r7, #2]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a70:	787b      	ldrb	r3, [r7, #1]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a76:	887a      	ldrh	r2, [r7, #2]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a7c:	e002      	b.n	8002a84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a7e:	887a      	ldrh	r2, [r7, #2]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a9a:	4b08      	ldr	r3, [pc, #32]	; (8002abc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a9c:	695a      	ldr	r2, [r3, #20]
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d006      	beq.n	8002ab4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002aa6:	4a05      	ldr	r2, [pc, #20]	; (8002abc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002aa8:	88fb      	ldrh	r3, [r7, #6]
 8002aaa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002aac:	88fb      	ldrh	r3, [r7, #6]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe fab0 	bl	8001014 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40010400 	.word	0x40010400

08002ac0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e081      	b.n	8002bd6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d106      	bne.n	8002aec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7fe fe06 	bl	80016f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2224      	movs	r2, #36	; 0x24
 8002af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0201 	bic.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d107      	bne.n	8002b3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	e006      	b.n	8002b48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d104      	bne.n	8002b5a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691a      	ldr	r2, [r3, #16]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69d9      	ldr	r1, [r3, #28]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1a      	ldr	r2, [r3, #32]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0201 	orr.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e021      	b.n	8002c34 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2224      	movs	r2, #36	; 0x24
 8002bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0201 	bic.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7fe fdd3 	bl	80017b4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af02      	add	r7, sp, #8
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	4608      	mov	r0, r1
 8002c46:	4611      	mov	r1, r2
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	817b      	strh	r3, [r7, #10]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	813b      	strh	r3, [r7, #8]
 8002c52:	4613      	mov	r3, r2
 8002c54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b20      	cmp	r3, #32
 8002c60:	f040 80f9 	bne.w	8002e56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_I2C_Mem_Write+0x34>
 8002c6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d105      	bne.n	8002c7c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0ed      	b.n	8002e58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d101      	bne.n	8002c8a <HAL_I2C_Mem_Write+0x4e>
 8002c86:	2302      	movs	r3, #2
 8002c88:	e0e6      	b.n	8002e58 <HAL_I2C_Mem_Write+0x21c>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c92:	f7ff f9a9 	bl	8001fe8 <HAL_GetTick>
 8002c96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	2319      	movs	r3, #25
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 fac3 	bl	8003230 <I2C_WaitOnFlagUntilTimeout>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0d1      	b.n	8002e58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2221      	movs	r2, #33	; 0x21
 8002cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2240      	movs	r2, #64	; 0x40
 8002cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a3a      	ldr	r2, [r7, #32]
 8002cce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cdc:	88f8      	ldrh	r0, [r7, #6]
 8002cde:	893a      	ldrh	r2, [r7, #8]
 8002ce0:	8979      	ldrh	r1, [r7, #10]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	9301      	str	r3, [sp, #4]
 8002ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	4603      	mov	r3, r0
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f9d3 	bl	8003098 <I2C_RequestMemoryWrite>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0a9      	b.n	8002e58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	2bff      	cmp	r3, #255	; 0xff
 8002d0c:	d90e      	bls.n	8002d2c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	22ff      	movs	r2, #255	; 0xff
 8002d12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	8979      	ldrh	r1, [r7, #10]
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 fc2b 	bl	8003580 <I2C_TransferConfig>
 8002d2a:	e00f      	b.n	8002d4c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	8979      	ldrh	r1, [r7, #10]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 fc1a 	bl	8003580 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 faad 	bl	80032b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e07b      	b.n	8002e58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	781a      	ldrb	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d034      	beq.n	8002e04 <HAL_I2C_Mem_Write+0x1c8>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d130      	bne.n	8002e04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da8:	2200      	movs	r2, #0
 8002daa:	2180      	movs	r1, #128	; 0x80
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 fa3f 	bl	8003230 <I2C_WaitOnFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e04d      	b.n	8002e58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2bff      	cmp	r3, #255	; 0xff
 8002dc4:	d90e      	bls.n	8002de4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	22ff      	movs	r2, #255	; 0xff
 8002dca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	8979      	ldrh	r1, [r7, #10]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 fbcf 	bl	8003580 <I2C_TransferConfig>
 8002de2:	e00f      	b.n	8002e04 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	8979      	ldrh	r1, [r7, #10]
 8002df6:	2300      	movs	r3, #0
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 fbbe 	bl	8003580 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d19e      	bne.n	8002d4c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 fa8c 	bl	8003330 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e01a      	b.n	8002e58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2220      	movs	r2, #32
 8002e28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6859      	ldr	r1, [r3, #4]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <HAL_I2C_Mem_Write+0x224>)
 8002e36:	400b      	ands	r3, r1
 8002e38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e000      	b.n	8002e58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002e56:	2302      	movs	r3, #2
  }
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	fe00e800 	.word	0xfe00e800

08002e64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	4608      	mov	r0, r1
 8002e6e:	4611      	mov	r1, r2
 8002e70:	461a      	mov	r2, r3
 8002e72:	4603      	mov	r3, r0
 8002e74:	817b      	strh	r3, [r7, #10]
 8002e76:	460b      	mov	r3, r1
 8002e78:	813b      	strh	r3, [r7, #8]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	f040 80fd 	bne.w	8003086 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <HAL_I2C_Mem_Read+0x34>
 8002e92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d105      	bne.n	8002ea4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0f1      	b.n	8003088 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <HAL_I2C_Mem_Read+0x4e>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e0ea      	b.n	8003088 <HAL_I2C_Mem_Read+0x224>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002eba:	f7ff f895 	bl	8001fe8 <HAL_GetTick>
 8002ebe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	2319      	movs	r3, #25
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 f9af 	bl	8003230 <I2C_WaitOnFlagUntilTimeout>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0d5      	b.n	8003088 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2222      	movs	r2, #34	; 0x22
 8002ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2240      	movs	r2, #64	; 0x40
 8002ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a3a      	ldr	r2, [r7, #32]
 8002ef6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002efc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f04:	88f8      	ldrh	r0, [r7, #6]
 8002f06:	893a      	ldrh	r2, [r7, #8]
 8002f08:	8979      	ldrh	r1, [r7, #10]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	9301      	str	r3, [sp, #4]
 8002f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	4603      	mov	r3, r0
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 f913 	bl	8003140 <I2C_RequestMemoryRead>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0ad      	b.n	8003088 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2bff      	cmp	r3, #255	; 0xff
 8002f34:	d90e      	bls.n	8002f54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	22ff      	movs	r2, #255	; 0xff
 8002f3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	8979      	ldrh	r1, [r7, #10]
 8002f44:	4b52      	ldr	r3, [pc, #328]	; (8003090 <HAL_I2C_Mem_Read+0x22c>)
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 fb17 	bl	8003580 <I2C_TransferConfig>
 8002f52:	e00f      	b.n	8002f74 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	8979      	ldrh	r1, [r7, #10]
 8002f66:	4b4a      	ldr	r3, [pc, #296]	; (8003090 <HAL_I2C_Mem_Read+0x22c>)
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 fb06 	bl	8003580 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	2104      	movs	r1, #4
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f956 	bl	8003230 <I2C_WaitOnFlagUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e07c      	b.n	8003088 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d034      	beq.n	8003034 <HAL_I2C_Mem_Read+0x1d0>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d130      	bne.n	8003034 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2180      	movs	r1, #128	; 0x80
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 f927 	bl	8003230 <I2C_WaitOnFlagUntilTimeout>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e04d      	b.n	8003088 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2bff      	cmp	r3, #255	; 0xff
 8002ff4:	d90e      	bls.n	8003014 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	22ff      	movs	r2, #255	; 0xff
 8002ffa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003000:	b2da      	uxtb	r2, r3
 8003002:	8979      	ldrh	r1, [r7, #10]
 8003004:	2300      	movs	r3, #0
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 fab7 	bl	8003580 <I2C_TransferConfig>
 8003012:	e00f      	b.n	8003034 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003022:	b2da      	uxtb	r2, r3
 8003024:	8979      	ldrh	r1, [r7, #10]
 8003026:	2300      	movs	r3, #0
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 faa6 	bl	8003580 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003038:	b29b      	uxth	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d19a      	bne.n	8002f74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f974 	bl	8003330 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e01a      	b.n	8003088 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2220      	movs	r2, #32
 8003058:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6859      	ldr	r1, [r3, #4]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_I2C_Mem_Read+0x230>)
 8003066:	400b      	ands	r3, r1
 8003068:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	e000      	b.n	8003088 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003086:	2302      	movs	r3, #2
  }
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	80002400 	.word	0x80002400
 8003094:	fe00e800 	.word	0xfe00e800

08003098 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af02      	add	r7, sp, #8
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	4608      	mov	r0, r1
 80030a2:	4611      	mov	r1, r2
 80030a4:	461a      	mov	r2, r3
 80030a6:	4603      	mov	r3, r0
 80030a8:	817b      	strh	r3, [r7, #10]
 80030aa:	460b      	mov	r3, r1
 80030ac:	813b      	strh	r3, [r7, #8]
 80030ae:	4613      	mov	r3, r2
 80030b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80030b2:	88fb      	ldrh	r3, [r7, #6]
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	8979      	ldrh	r1, [r7, #10]
 80030b8:	4b20      	ldr	r3, [pc, #128]	; (800313c <I2C_RequestMemoryWrite+0xa4>)
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 fa5d 	bl	8003580 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030c6:	69fa      	ldr	r2, [r7, #28]
 80030c8:	69b9      	ldr	r1, [r7, #24]
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f8f0 	bl	80032b0 <I2C_WaitOnTXISFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e02c      	b.n	8003134 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d105      	bne.n	80030ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030e0:	893b      	ldrh	r3, [r7, #8]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	629a      	str	r2, [r3, #40]	; 0x28
 80030ea:	e015      	b.n	8003118 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030ec:	893b      	ldrh	r3, [r7, #8]
 80030ee:	0a1b      	lsrs	r3, r3, #8
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030fa:	69fa      	ldr	r2, [r7, #28]
 80030fc:	69b9      	ldr	r1, [r7, #24]
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 f8d6 	bl	80032b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e012      	b.n	8003134 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800310e:	893b      	ldrh	r3, [r7, #8]
 8003110:	b2da      	uxtb	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2200      	movs	r2, #0
 8003120:	2180      	movs	r1, #128	; 0x80
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f884 	bl	8003230 <I2C_WaitOnFlagUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e000      	b.n	8003134 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	80002000 	.word	0x80002000

08003140 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af02      	add	r7, sp, #8
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	4608      	mov	r0, r1
 800314a:	4611      	mov	r1, r2
 800314c:	461a      	mov	r2, r3
 800314e:	4603      	mov	r3, r0
 8003150:	817b      	strh	r3, [r7, #10]
 8003152:	460b      	mov	r3, r1
 8003154:	813b      	strh	r3, [r7, #8]
 8003156:	4613      	mov	r3, r2
 8003158:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	b2da      	uxtb	r2, r3
 800315e:	8979      	ldrh	r1, [r7, #10]
 8003160:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <I2C_RequestMemoryRead+0xa4>)
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	2300      	movs	r3, #0
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 fa0a 	bl	8003580 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800316c:	69fa      	ldr	r2, [r7, #28]
 800316e:	69b9      	ldr	r1, [r7, #24]
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 f89d 	bl	80032b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e02c      	b.n	80031da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003180:	88fb      	ldrh	r3, [r7, #6]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d105      	bne.n	8003192 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003186:	893b      	ldrh	r3, [r7, #8]
 8003188:	b2da      	uxtb	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	629a      	str	r2, [r3, #40]	; 0x28
 8003190:	e015      	b.n	80031be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003192:	893b      	ldrh	r3, [r7, #8]
 8003194:	0a1b      	lsrs	r3, r3, #8
 8003196:	b29b      	uxth	r3, r3
 8003198:	b2da      	uxtb	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031a0:	69fa      	ldr	r2, [r7, #28]
 80031a2:	69b9      	ldr	r1, [r7, #24]
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 f883 	bl	80032b0 <I2C_WaitOnTXISFlagUntilTimeout>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e012      	b.n	80031da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031b4:	893b      	ldrh	r3, [r7, #8]
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2200      	movs	r2, #0
 80031c6:	2140      	movs	r1, #64	; 0x40
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f831 	bl	8003230 <I2C_WaitOnFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	80002000 	.word	0x80002000

080031e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d103      	bne.n	8003206 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2200      	movs	r2, #0
 8003204:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b01      	cmp	r3, #1
 8003212:	d007      	beq.n	8003224 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	619a      	str	r2, [r3, #24]
  }
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	4613      	mov	r3, r2
 800323e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003240:	e022      	b.n	8003288 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003248:	d01e      	beq.n	8003288 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324a:	f7fe fecd 	bl	8001fe8 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d302      	bcc.n	8003260 <I2C_WaitOnFlagUntilTimeout+0x30>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d113      	bne.n	8003288 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003264:	f043 0220 	orr.w	r2, r3, #32
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e00f      	b.n	80032a8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	4013      	ands	r3, r2
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	429a      	cmp	r2, r3
 8003296:	bf0c      	ite	eq
 8003298:	2301      	moveq	r3, #1
 800329a:	2300      	movne	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	461a      	mov	r2, r3
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d0cd      	beq.n	8003242 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032bc:	e02c      	b.n	8003318 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	68b9      	ldr	r1, [r7, #8]
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f870 	bl	80033a8 <I2C_IsErrorOccurred>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e02a      	b.n	8003328 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d8:	d01e      	beq.n	8003318 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032da:	f7fe fe85 	bl	8001fe8 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d302      	bcc.n	80032f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d113      	bne.n	8003318 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f4:	f043 0220 	orr.w	r2, r3, #32
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2220      	movs	r2, #32
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e007      	b.n	8003328 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b02      	cmp	r3, #2
 8003324:	d1cb      	bne.n	80032be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800333c:	e028      	b.n	8003390 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	68b9      	ldr	r1, [r7, #8]
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f830 	bl	80033a8 <I2C_IsErrorOccurred>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e026      	b.n	80033a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003352:	f7fe fe49 	bl	8001fe8 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	429a      	cmp	r2, r3
 8003360:	d302      	bcc.n	8003368 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d113      	bne.n	8003390 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336c:	f043 0220 	orr.w	r2, r3, #32
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e007      	b.n	80033a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b20      	cmp	r3, #32
 800339c:	d1cf      	bne.n	800333e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08a      	sub	sp, #40	; 0x28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d075      	beq.n	80034c0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2210      	movs	r2, #16
 80033da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033dc:	e056      	b.n	800348c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e4:	d052      	beq.n	800348c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033e6:	f7fe fdff 	bl	8001fe8 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d302      	bcc.n	80033fc <I2C_IsErrorOccurred+0x54>
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d147      	bne.n	800348c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003406:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800340e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800341a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800341e:	d12e      	bne.n	800347e <I2C_IsErrorOccurred+0xd6>
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003426:	d02a      	beq.n	800347e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003428:	7cfb      	ldrb	r3, [r7, #19]
 800342a:	2b20      	cmp	r3, #32
 800342c:	d027      	beq.n	800347e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800343c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800343e:	f7fe fdd3 	bl	8001fe8 <HAL_GetTick>
 8003442:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003444:	e01b      	b.n	800347e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003446:	f7fe fdcf 	bl	8001fe8 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b19      	cmp	r3, #25
 8003452:	d914      	bls.n	800347e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003458:	f043 0220 	orr.w	r2, r3, #32
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b20      	cmp	r3, #32
 800348a:	d1dc      	bne.n	8003446 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b20      	cmp	r3, #32
 8003498:	d003      	beq.n	80034a2 <I2C_IsErrorOccurred+0xfa>
 800349a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d09d      	beq.n	80033de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80034a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d103      	bne.n	80034b2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2220      	movs	r2, #32
 80034b0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	f043 0304 	orr.w	r3, r3, #4
 80034b8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00b      	beq.n	80034ea <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	f043 0301 	orr.w	r3, r3, #1
 80034d8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00b      	beq.n	800350c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	f043 0308 	orr.w	r3, r3, #8
 80034fa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003504:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00b      	beq.n	800352e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	f043 0302 	orr.w	r3, r3, #2
 800351c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003526:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800352e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003532:	2b00      	cmp	r3, #0
 8003534:	d01c      	beq.n	8003570 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f7ff fe56 	bl	80031e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6859      	ldr	r1, [r3, #4]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	4b0d      	ldr	r3, [pc, #52]	; (800357c <I2C_IsErrorOccurred+0x1d4>)
 8003548:	400b      	ands	r3, r1
 800354a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	431a      	orrs	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003574:	4618      	mov	r0, r3
 8003576:	3728      	adds	r7, #40	; 0x28
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	fe00e800 	.word	0xfe00e800

08003580 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	607b      	str	r3, [r7, #4]
 800358a:	460b      	mov	r3, r1
 800358c:	817b      	strh	r3, [r7, #10]
 800358e:	4613      	mov	r3, r2
 8003590:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003592:	897b      	ldrh	r3, [r7, #10]
 8003594:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003598:	7a7b      	ldrb	r3, [r7, #9]
 800359a:	041b      	lsls	r3, r3, #16
 800359c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	0d5b      	lsrs	r3, r3, #21
 80035ba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80035be:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <I2C_TransferConfig+0x60>)
 80035c0:	430b      	orrs	r3, r1
 80035c2:	43db      	mvns	r3, r3
 80035c4:	ea02 0103 	and.w	r1, r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035d2:	bf00      	nop
 80035d4:	371c      	adds	r7, #28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	03ff63ff 	.word	0x03ff63ff

080035e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b20      	cmp	r3, #32
 80035f8:	d138      	bne.n	800366c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003604:	2302      	movs	r3, #2
 8003606:	e032      	b.n	800366e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2224      	movs	r2, #36	; 0x24
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0201 	bic.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003636:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6819      	ldr	r1, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	e000      	b.n	800366e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800366c:	2302      	movs	r3, #2
  }
}
 800366e:	4618      	mov	r0, r3
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800367a:	b480      	push	{r7}
 800367c:	b085      	sub	sp, #20
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b20      	cmp	r3, #32
 800368e:	d139      	bne.n	8003704 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800369a:	2302      	movs	r3, #2
 800369c:	e033      	b.n	8003706 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2224      	movs	r2, #36	; 0x24
 80036aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0201 	bic.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	021b      	lsls	r3, r3, #8
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	e000      	b.n	8003706 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003704:	2302      	movs	r3, #2
  }
}
 8003706:	4618      	mov	r0, r3
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003712:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003714:	b08f      	sub	sp, #60	; 0x3c
 8003716:	af0a      	add	r7, sp, #40	; 0x28
 8003718:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e116      	b.n	8003952 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fe f9e8 	bl	8001b14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2203      	movs	r2, #3
 8003748:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003754:	2b00      	cmp	r3, #0
 8003756:	d102      	bne.n	800375e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f004 f80d 	bl	8007782 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	603b      	str	r3, [r7, #0]
 800376e:	687e      	ldr	r6, [r7, #4]
 8003770:	466d      	mov	r5, sp
 8003772:	f106 0410 	add.w	r4, r6, #16
 8003776:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003778:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800377a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800377c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800377e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003782:	e885 0003 	stmia.w	r5, {r0, r1}
 8003786:	1d33      	adds	r3, r6, #4
 8003788:	cb0e      	ldmia	r3, {r1, r2, r3}
 800378a:	6838      	ldr	r0, [r7, #0]
 800378c:	f003 ffcd 	bl	800772a <USB_CoreInit>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d005      	beq.n	80037a2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2202      	movs	r2, #2
 800379a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e0d7      	b.n	8003952 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2100      	movs	r1, #0
 80037a8:	4618      	mov	r0, r3
 80037aa:	f003 fffb 	bl	80077a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ae:	2300      	movs	r3, #0
 80037b0:	73fb      	strb	r3, [r7, #15]
 80037b2:	e04a      	b.n	800384a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037b4:	7bfa      	ldrb	r2, [r7, #15]
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	333d      	adds	r3, #61	; 0x3d
 80037c4:	2201      	movs	r2, #1
 80037c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037c8:	7bfa      	ldrb	r2, [r7, #15]
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	333c      	adds	r3, #60	; 0x3c
 80037d8:	7bfa      	ldrb	r2, [r7, #15]
 80037da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037dc:	7bfa      	ldrb	r2, [r7, #15]
 80037de:	7bfb      	ldrb	r3, [r7, #15]
 80037e0:	b298      	uxth	r0, r3
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	3344      	adds	r3, #68	; 0x44
 80037f0:	4602      	mov	r2, r0
 80037f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037f4:	7bfa      	ldrb	r2, [r7, #15]
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	4613      	mov	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	3340      	adds	r3, #64	; 0x40
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003808:	7bfa      	ldrb	r2, [r7, #15]
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	3348      	adds	r3, #72	; 0x48
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800381c:	7bfa      	ldrb	r2, [r7, #15]
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	334c      	adds	r3, #76	; 0x4c
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003830:	7bfa      	ldrb	r2, [r7, #15]
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	3354      	adds	r3, #84	; 0x54
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	3301      	adds	r3, #1
 8003848:	73fb      	strb	r3, [r7, #15]
 800384a:	7bfa      	ldrb	r2, [r7, #15]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	429a      	cmp	r2, r3
 8003852:	d3af      	bcc.n	80037b4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003854:	2300      	movs	r3, #0
 8003856:	73fb      	strb	r3, [r7, #15]
 8003858:	e044      	b.n	80038e4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800385a:	7bfa      	ldrb	r2, [r7, #15]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003870:	7bfa      	ldrb	r2, [r7, #15]
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003882:	7bfa      	ldrb	r2, [r7, #15]
 8003884:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003886:	7bfa      	ldrb	r2, [r7, #15]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	4413      	add	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003898:	2200      	movs	r2, #0
 800389a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800389c:	7bfa      	ldrb	r2, [r7, #15]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038b2:	7bfa      	ldrb	r2, [r7, #15]
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	4613      	mov	r3, r2
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038c8:	7bfa      	ldrb	r2, [r7, #15]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	3301      	adds	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
 80038e4:	7bfa      	ldrb	r2, [r7, #15]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d3b5      	bcc.n	800385a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	603b      	str	r3, [r7, #0]
 80038f4:	687e      	ldr	r6, [r7, #4]
 80038f6:	466d      	mov	r5, sp
 80038f8:	f106 0410 	add.w	r4, r6, #16
 80038fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003902:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003904:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003908:	e885 0003 	stmia.w	r5, {r0, r1}
 800390c:	1d33      	adds	r3, r6, #4
 800390e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003910:	6838      	ldr	r0, [r7, #0]
 8003912:	f003 ff93 	bl	800783c <USB_DevInit>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e014      	b.n	8003952 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	2b01      	cmp	r3, #1
 800393e:	d102      	bne.n	8003946 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f80a 	bl	800395a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f004 f93f 	bl	8007bce <USB_DevDisconnect>

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800395a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800395a:	b480      	push	{r7}
 800395c:	b085      	sub	sp, #20
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800398c:	f043 0303 	orr.w	r3, r3, #3
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
	...

080039a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039a8:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a04      	ldr	r2, [pc, #16]	; (80039c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b2:	6013      	str	r3, [r2, #0]
}
 80039b4:	bf00      	nop
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	40007000 	.word	0x40007000

080039c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80039c8:	4b04      	ldr	r3, [pc, #16]	; (80039dc <HAL_PWREx_GetVoltageRange+0x18>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40007000 	.word	0x40007000

080039e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ee:	d130      	bne.n	8003a52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80039f0:	4b23      	ldr	r3, [pc, #140]	; (8003a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039fc:	d038      	beq.n	8003a70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039fe:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a06:	4a1e      	ldr	r2, [pc, #120]	; (8003a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a0e:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2232      	movs	r2, #50	; 0x32
 8003a14:	fb02 f303 	mul.w	r3, r2, r3
 8003a18:	4a1b      	ldr	r2, [pc, #108]	; (8003a88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1e:	0c9b      	lsrs	r3, r3, #18
 8003a20:	3301      	adds	r3, #1
 8003a22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a24:	e002      	b.n	8003a2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a2c:	4b14      	ldr	r3, [pc, #80]	; (8003a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a38:	d102      	bne.n	8003a40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1f2      	bne.n	8003a26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a40:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4c:	d110      	bne.n	8003a70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e00f      	b.n	8003a72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a52:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5e:	d007      	beq.n	8003a70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a60:	4b07      	ldr	r3, [pc, #28]	; (8003a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a68:	4a05      	ldr	r2, [pc, #20]	; (8003a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40007000 	.word	0x40007000
 8003a84:	20000000 	.word	0x20000000
 8003a88:	431bde83 	.word	0x431bde83

08003a8c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003a90:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	4a04      	ldr	r2, [pc, #16]	; (8003aa8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a9a:	6053      	str	r3, [r2, #4]
}
 8003a9c:	bf00      	nop
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40007000 	.word	0x40007000

08003aac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af02      	add	r7, sp, #8
 8003ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003ab4:	f7fe fa98 	bl	8001fe8 <HAL_GetTick>
 8003ab8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e063      	b.n	8003b8c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10b      	bne.n	8003ae8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7fd fe8f 	bl	80017fc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003ade:	f241 3188 	movw	r1, #5000	; 0x1388
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f858 	bl	8003b98 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	021a      	lsls	r2, r3, #8
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2120      	movs	r1, #32
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f850 	bl	8003bb4 <QSPI_WaitFlagStateUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003b18:	7afb      	ldrb	r3, [r7, #11]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d131      	bne.n	8003b82 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003b28:	f023 0310 	bic.w	r3, r3, #16
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6852      	ldr	r2, [r2, #4]
 8003b30:	0611      	lsls	r1, r2, #24
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	68d2      	ldr	r2, [r2, #12]
 8003b36:	4311      	orrs	r1, r2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	4b13      	ldr	r3, [pc, #76]	; (8003b94 <HAL_QSPI_Init+0xe8>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6912      	ldr	r2, [r2, #16]
 8003b4e:	0411      	lsls	r1, r2, #16
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6952      	ldr	r2, [r2, #20]
 8003b54:	4311      	orrs	r1, r2
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6992      	ldr	r2, [r2, #24]
 8003b5a:	4311      	orrs	r1, r2
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	430b      	orrs	r3, r1
 8003b62:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003b8a:	7afb      	ldrb	r3, [r7, #11]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	ffe0f8fe 	.word	0xffe0f8fe

08003b98 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	603b      	str	r3, [r7, #0]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003bc4:	e01a      	b.n	8003bfc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bcc:	d016      	beq.n	8003bfc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bce:	f7fe fa0b 	bl	8001fe8 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d302      	bcc.n	8003be4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10b      	bne.n	8003bfc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2204      	movs	r2, #4
 8003be8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf0:	f043 0201 	orr.w	r2, r3, #1
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e00e      	b.n	8003c1a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	4013      	ands	r3, r2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	bf14      	ite	ne
 8003c0a:	2301      	movne	r3, #1
 8003c0c:	2300      	moveq	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	461a      	mov	r2, r3
 8003c12:	79fb      	ldrb	r3, [r7, #7]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d1d6      	bne.n	8003bc6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e3ca      	b.n	80043cc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c36:	4b97      	ldr	r3, [pc, #604]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 030c 	and.w	r3, r3, #12
 8003c3e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c40:	4b94      	ldr	r3, [pc, #592]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 0303 	and.w	r3, r3, #3
 8003c48:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0310 	and.w	r3, r3, #16
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 80e4 	beq.w	8003e20 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d007      	beq.n	8003c6e <HAL_RCC_OscConfig+0x4a>
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	2b0c      	cmp	r3, #12
 8003c62:	f040 808b 	bne.w	8003d7c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	f040 8087 	bne.w	8003d7c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c6e:	4b89      	ldr	r3, [pc, #548]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d005      	beq.n	8003c86 <HAL_RCC_OscConfig+0x62>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e3a2      	b.n	80043cc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1a      	ldr	r2, [r3, #32]
 8003c8a:	4b82      	ldr	r3, [pc, #520]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0308 	and.w	r3, r3, #8
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d004      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x7c>
 8003c96:	4b7f      	ldr	r3, [pc, #508]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c9e:	e005      	b.n	8003cac <HAL_RCC_OscConfig+0x88>
 8003ca0:	4b7c      	ldr	r3, [pc, #496]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ca6:	091b      	lsrs	r3, r3, #4
 8003ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d223      	bcs.n	8003cf8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fd87 	bl	80047c8 <RCC_SetFlashLatencyFromMSIRange>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e383      	b.n	80043cc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cc4:	4b73      	ldr	r3, [pc, #460]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a72      	ldr	r2, [pc, #456]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003cca:	f043 0308 	orr.w	r3, r3, #8
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	4b70      	ldr	r3, [pc, #448]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	496d      	ldr	r1, [pc, #436]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ce2:	4b6c      	ldr	r3, [pc, #432]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	4968      	ldr	r1, [pc, #416]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	604b      	str	r3, [r1, #4]
 8003cf6:	e025      	b.n	8003d44 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cf8:	4b66      	ldr	r3, [pc, #408]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a65      	ldr	r2, [pc, #404]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003cfe:	f043 0308 	orr.w	r3, r3, #8
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	4b63      	ldr	r3, [pc, #396]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	4960      	ldr	r1, [pc, #384]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d16:	4b5f      	ldr	r3, [pc, #380]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	021b      	lsls	r3, r3, #8
 8003d24:	495b      	ldr	r1, [pc, #364]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d109      	bne.n	8003d44 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 fd47 	bl	80047c8 <RCC_SetFlashLatencyFromMSIRange>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e343      	b.n	80043cc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d44:	f000 fc4a 	bl	80045dc <HAL_RCC_GetSysClockFreq>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	4b52      	ldr	r3, [pc, #328]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	091b      	lsrs	r3, r3, #4
 8003d50:	f003 030f 	and.w	r3, r3, #15
 8003d54:	4950      	ldr	r1, [pc, #320]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003d56:	5ccb      	ldrb	r3, [r1, r3]
 8003d58:	f003 031f 	and.w	r3, r3, #31
 8003d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d60:	4a4e      	ldr	r2, [pc, #312]	; (8003e9c <HAL_RCC_OscConfig+0x278>)
 8003d62:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d64:	4b4e      	ldr	r3, [pc, #312]	; (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fd ff6f 	bl	8001c4c <HAL_InitTick>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d052      	beq.n	8003e1e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
 8003d7a:	e327      	b.n	80043cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d032      	beq.n	8003dea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d84:	4b43      	ldr	r3, [pc, #268]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a42      	ldr	r2, [pc, #264]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d90:	f7fe f92a 	bl	8001fe8 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d98:	f7fe f926 	bl	8001fe8 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e310      	b.n	80043cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003daa:	4b3a      	ldr	r3, [pc, #232]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0f0      	beq.n	8003d98 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003db6:	4b37      	ldr	r3, [pc, #220]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a36      	ldr	r2, [pc, #216]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003dbc:	f043 0308 	orr.w	r3, r3, #8
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	4b34      	ldr	r3, [pc, #208]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	4931      	ldr	r1, [pc, #196]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dd4:	4b2f      	ldr	r3, [pc, #188]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	69db      	ldr	r3, [r3, #28]
 8003de0:	021b      	lsls	r3, r3, #8
 8003de2:	492c      	ldr	r1, [pc, #176]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	604b      	str	r3, [r1, #4]
 8003de8:	e01a      	b.n	8003e20 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003dea:	4b2a      	ldr	r3, [pc, #168]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a29      	ldr	r2, [pc, #164]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003df0:	f023 0301 	bic.w	r3, r3, #1
 8003df4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003df6:	f7fe f8f7 	bl	8001fe8 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dfe:	f7fe f8f3 	bl	8001fe8 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e2dd      	b.n	80043cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e10:	4b20      	ldr	r3, [pc, #128]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1f0      	bne.n	8003dfe <HAL_RCC_OscConfig+0x1da>
 8003e1c:	e000      	b.n	8003e20 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e1e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d074      	beq.n	8003f16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d005      	beq.n	8003e3e <HAL_RCC_OscConfig+0x21a>
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	2b0c      	cmp	r3, #12
 8003e36:	d10e      	bne.n	8003e56 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	d10b      	bne.n	8003e56 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e3e:	4b15      	ldr	r3, [pc, #84]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d064      	beq.n	8003f14 <HAL_RCC_OscConfig+0x2f0>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d160      	bne.n	8003f14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e2ba      	b.n	80043cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e5e:	d106      	bne.n	8003e6e <HAL_RCC_OscConfig+0x24a>
 8003e60:	4b0c      	ldr	r3, [pc, #48]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a0b      	ldr	r2, [pc, #44]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	e026      	b.n	8003ebc <HAL_RCC_OscConfig+0x298>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e76:	d115      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x280>
 8003e78:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a05      	ldr	r2, [pc, #20]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003e7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	4b03      	ldr	r3, [pc, #12]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a02      	ldr	r2, [pc, #8]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	e014      	b.n	8003ebc <HAL_RCC_OscConfig+0x298>
 8003e92:	bf00      	nop
 8003e94:	40021000 	.word	0x40021000
 8003e98:	0800d18c 	.word	0x0800d18c
 8003e9c:	20000000 	.word	0x20000000
 8003ea0:	20000004 	.word	0x20000004
 8003ea4:	4ba0      	ldr	r3, [pc, #640]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a9f      	ldr	r2, [pc, #636]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 8003eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	4b9d      	ldr	r3, [pc, #628]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a9c      	ldr	r2, [pc, #624]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 8003eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d013      	beq.n	8003eec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec4:	f7fe f890 	bl	8001fe8 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ecc:	f7fe f88c 	bl	8001fe8 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b64      	cmp	r3, #100	; 0x64
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e276      	b.n	80043cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ede:	4b92      	ldr	r3, [pc, #584]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0x2a8>
 8003eea:	e014      	b.n	8003f16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eec:	f7fe f87c 	bl	8001fe8 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ef4:	f7fe f878 	bl	8001fe8 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b64      	cmp	r3, #100	; 0x64
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e262      	b.n	80043cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f06:	4b88      	ldr	r3, [pc, #544]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f0      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x2d0>
 8003f12:	e000      	b.n	8003f16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d060      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_OscConfig+0x310>
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	2b0c      	cmp	r3, #12
 8003f2c:	d119      	bne.n	8003f62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d116      	bne.n	8003f62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f34:	4b7c      	ldr	r3, [pc, #496]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_RCC_OscConfig+0x328>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e23f      	b.n	80043cc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4c:	4b76      	ldr	r3, [pc, #472]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	061b      	lsls	r3, r3, #24
 8003f5a:	4973      	ldr	r1, [pc, #460]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f60:	e040      	b.n	8003fe4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d023      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f6a:	4b6f      	ldr	r3, [pc, #444]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a6e      	ldr	r2, [pc, #440]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 8003f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f76:	f7fe f837 	bl	8001fe8 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f7e:	f7fe f833 	bl	8001fe8 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e21d      	b.n	80043cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f90:	4b65      	ldr	r3, [pc, #404]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0f0      	beq.n	8003f7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f9c:	4b62      	ldr	r3, [pc, #392]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	061b      	lsls	r3, r3, #24
 8003faa:	495f      	ldr	r1, [pc, #380]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	604b      	str	r3, [r1, #4]
 8003fb0:	e018      	b.n	8003fe4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fb2:	4b5d      	ldr	r3, [pc, #372]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a5c      	ldr	r2, [pc, #368]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 8003fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fbe:	f7fe f813 	bl	8001fe8 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fc6:	f7fe f80f 	bl	8001fe8 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e1f9      	b.n	80043cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fd8:	4b53      	ldr	r3, [pc, #332]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1f0      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d03c      	beq.n	800406a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01c      	beq.n	8004032 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ff8:	4b4b      	ldr	r3, [pc, #300]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 8003ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ffe:	4a4a      	ldr	r2, [pc, #296]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004008:	f7fd ffee 	bl	8001fe8 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004010:	f7fd ffea 	bl	8001fe8 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e1d4      	b.n	80043cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004022:	4b41      	ldr	r3, [pc, #260]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 8004024:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0ef      	beq.n	8004010 <HAL_RCC_OscConfig+0x3ec>
 8004030:	e01b      	b.n	800406a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004032:	4b3d      	ldr	r3, [pc, #244]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 8004034:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004038:	4a3b      	ldr	r2, [pc, #236]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 800403a:	f023 0301 	bic.w	r3, r3, #1
 800403e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004042:	f7fd ffd1 	bl	8001fe8 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800404a:	f7fd ffcd 	bl	8001fe8 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e1b7      	b.n	80043cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800405c:	4b32      	ldr	r3, [pc, #200]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 800405e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1ef      	bne.n	800404a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 80a6 	beq.w	80041c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004078:	2300      	movs	r3, #0
 800407a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800407c:	4b2a      	ldr	r3, [pc, #168]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 800407e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10d      	bne.n	80040a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004088:	4b27      	ldr	r3, [pc, #156]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 800408a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408c:	4a26      	ldr	r2, [pc, #152]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 800408e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004092:	6593      	str	r3, [r2, #88]	; 0x58
 8004094:	4b24      	ldr	r3, [pc, #144]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 8004096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409c:	60bb      	str	r3, [r7, #8]
 800409e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040a0:	2301      	movs	r3, #1
 80040a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040a4:	4b21      	ldr	r3, [pc, #132]	; (800412c <HAL_RCC_OscConfig+0x508>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d118      	bne.n	80040e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040b0:	4b1e      	ldr	r3, [pc, #120]	; (800412c <HAL_RCC_OscConfig+0x508>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a1d      	ldr	r2, [pc, #116]	; (800412c <HAL_RCC_OscConfig+0x508>)
 80040b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040bc:	f7fd ff94 	bl	8001fe8 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c4:	f7fd ff90 	bl	8001fe8 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e17a      	b.n	80043cc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040d6:	4b15      	ldr	r3, [pc, #84]	; (800412c <HAL_RCC_OscConfig+0x508>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0f0      	beq.n	80040c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d108      	bne.n	80040fc <HAL_RCC_OscConfig+0x4d8>
 80040ea:	4b0f      	ldr	r3, [pc, #60]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 80040ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f0:	4a0d      	ldr	r2, [pc, #52]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 80040f2:	f043 0301 	orr.w	r3, r3, #1
 80040f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040fa:	e029      	b.n	8004150 <HAL_RCC_OscConfig+0x52c>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	2b05      	cmp	r3, #5
 8004102:	d115      	bne.n	8004130 <HAL_RCC_OscConfig+0x50c>
 8004104:	4b08      	ldr	r3, [pc, #32]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 8004106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410a:	4a07      	ldr	r2, [pc, #28]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 800410c:	f043 0304 	orr.w	r3, r3, #4
 8004110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004114:	4b04      	ldr	r3, [pc, #16]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411a:	4a03      	ldr	r2, [pc, #12]	; (8004128 <HAL_RCC_OscConfig+0x504>)
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004124:	e014      	b.n	8004150 <HAL_RCC_OscConfig+0x52c>
 8004126:	bf00      	nop
 8004128:	40021000 	.word	0x40021000
 800412c:	40007000 	.word	0x40007000
 8004130:	4b9c      	ldr	r3, [pc, #624]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 8004132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004136:	4a9b      	ldr	r2, [pc, #620]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 8004138:	f023 0301 	bic.w	r3, r3, #1
 800413c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004140:	4b98      	ldr	r3, [pc, #608]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 8004142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004146:	4a97      	ldr	r2, [pc, #604]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 8004148:	f023 0304 	bic.w	r3, r3, #4
 800414c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d016      	beq.n	8004186 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004158:	f7fd ff46 	bl	8001fe8 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800415e:	e00a      	b.n	8004176 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004160:	f7fd ff42 	bl	8001fe8 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	; 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e12a      	b.n	80043cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004176:	4b8b      	ldr	r3, [pc, #556]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0ed      	beq.n	8004160 <HAL_RCC_OscConfig+0x53c>
 8004184:	e015      	b.n	80041b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004186:	f7fd ff2f 	bl	8001fe8 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800418c:	e00a      	b.n	80041a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800418e:	f7fd ff2b 	bl	8001fe8 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	f241 3288 	movw	r2, #5000	; 0x1388
 800419c:	4293      	cmp	r3, r2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e113      	b.n	80043cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041a4:	4b7f      	ldr	r3, [pc, #508]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1ed      	bne.n	800418e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041b2:	7ffb      	ldrb	r3, [r7, #31]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d105      	bne.n	80041c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b8:	4b7a      	ldr	r3, [pc, #488]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 80041ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041bc:	4a79      	ldr	r2, [pc, #484]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 80041be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041c2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 80fe 	beq.w	80043ca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	f040 80d0 	bne.w	8004378 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041d8:	4b72      	ldr	r3, [pc, #456]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f003 0203 	and.w	r2, r3, #3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d130      	bne.n	800424e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	3b01      	subs	r3, #1
 80041f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d127      	bne.n	800424e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004208:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800420a:	429a      	cmp	r2, r3
 800420c:	d11f      	bne.n	800424e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004218:	2a07      	cmp	r2, #7
 800421a:	bf14      	ite	ne
 800421c:	2201      	movne	r2, #1
 800421e:	2200      	moveq	r2, #0
 8004220:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004222:	4293      	cmp	r3, r2
 8004224:	d113      	bne.n	800424e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004230:	085b      	lsrs	r3, r3, #1
 8004232:	3b01      	subs	r3, #1
 8004234:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004236:	429a      	cmp	r2, r3
 8004238:	d109      	bne.n	800424e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004244:	085b      	lsrs	r3, r3, #1
 8004246:	3b01      	subs	r3, #1
 8004248:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800424a:	429a      	cmp	r2, r3
 800424c:	d06e      	beq.n	800432c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	2b0c      	cmp	r3, #12
 8004252:	d069      	beq.n	8004328 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004254:	4b53      	ldr	r3, [pc, #332]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d105      	bne.n	800426c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004260:	4b50      	ldr	r3, [pc, #320]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e0ad      	b.n	80043cc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004270:	4b4c      	ldr	r3, [pc, #304]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a4b      	ldr	r2, [pc, #300]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 8004276:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800427a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800427c:	f7fd feb4 	bl	8001fe8 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004284:	f7fd feb0 	bl	8001fe8 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e09a      	b.n	80043cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004296:	4b43      	ldr	r3, [pc, #268]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f0      	bne.n	8004284 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042a2:	4b40      	ldr	r3, [pc, #256]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	4b40      	ldr	r3, [pc, #256]	; (80043a8 <HAL_RCC_OscConfig+0x784>)
 80042a8:	4013      	ands	r3, r2
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80042b2:	3a01      	subs	r2, #1
 80042b4:	0112      	lsls	r2, r2, #4
 80042b6:	4311      	orrs	r1, r2
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042bc:	0212      	lsls	r2, r2, #8
 80042be:	4311      	orrs	r1, r2
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042c4:	0852      	lsrs	r2, r2, #1
 80042c6:	3a01      	subs	r2, #1
 80042c8:	0552      	lsls	r2, r2, #21
 80042ca:	4311      	orrs	r1, r2
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042d0:	0852      	lsrs	r2, r2, #1
 80042d2:	3a01      	subs	r2, #1
 80042d4:	0652      	lsls	r2, r2, #25
 80042d6:	4311      	orrs	r1, r2
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042dc:	0912      	lsrs	r2, r2, #4
 80042de:	0452      	lsls	r2, r2, #17
 80042e0:	430a      	orrs	r2, r1
 80042e2:	4930      	ldr	r1, [pc, #192]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042e8:	4b2e      	ldr	r3, [pc, #184]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a2d      	ldr	r2, [pc, #180]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 80042ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042f4:	4b2b      	ldr	r3, [pc, #172]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	4a2a      	ldr	r2, [pc, #168]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 80042fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004300:	f7fd fe72 	bl	8001fe8 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004308:	f7fd fe6e 	bl	8001fe8 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e058      	b.n	80043cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800431a:	4b22      	ldr	r3, [pc, #136]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0f0      	beq.n	8004308 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004326:	e050      	b.n	80043ca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e04f      	b.n	80043cc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800432c:	4b1d      	ldr	r3, [pc, #116]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d148      	bne.n	80043ca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004338:	4b1a      	ldr	r3, [pc, #104]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a19      	ldr	r2, [pc, #100]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 800433e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004342:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004344:	4b17      	ldr	r3, [pc, #92]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	4a16      	ldr	r2, [pc, #88]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 800434a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800434e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004350:	f7fd fe4a 	bl	8001fe8 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004358:	f7fd fe46 	bl	8001fe8 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e030      	b.n	80043cc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800436a:	4b0e      	ldr	r3, [pc, #56]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0x734>
 8004376:	e028      	b.n	80043ca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	2b0c      	cmp	r3, #12
 800437c:	d023      	beq.n	80043c6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800437e:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a08      	ldr	r2, [pc, #32]	; (80043a4 <HAL_RCC_OscConfig+0x780>)
 8004384:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438a:	f7fd fe2d 	bl	8001fe8 <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004390:	e00c      	b.n	80043ac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004392:	f7fd fe29 	bl	8001fe8 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d905      	bls.n	80043ac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e013      	b.n	80043cc <HAL_RCC_OscConfig+0x7a8>
 80043a4:	40021000 	.word	0x40021000
 80043a8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043ac:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <HAL_RCC_OscConfig+0x7b0>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1ec      	bne.n	8004392 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80043b8:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <HAL_RCC_OscConfig+0x7b0>)
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	4905      	ldr	r1, [pc, #20]	; (80043d4 <HAL_RCC_OscConfig+0x7b0>)
 80043be:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <HAL_RCC_OscConfig+0x7b4>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	60cb      	str	r3, [r1, #12]
 80043c4:	e001      	b.n	80043ca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3720      	adds	r7, #32
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40021000 	.word	0x40021000
 80043d8:	feeefffc 	.word	0xfeeefffc

080043dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0e7      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043f0:	4b75      	ldr	r3, [pc, #468]	; (80045c8 <HAL_RCC_ClockConfig+0x1ec>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d910      	bls.n	8004420 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fe:	4b72      	ldr	r3, [pc, #456]	; (80045c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f023 0207 	bic.w	r2, r3, #7
 8004406:	4970      	ldr	r1, [pc, #448]	; (80045c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	4313      	orrs	r3, r2
 800440c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800440e:	4b6e      	ldr	r3, [pc, #440]	; (80045c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	429a      	cmp	r2, r3
 800441a:	d001      	beq.n	8004420 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0cf      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d010      	beq.n	800444e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	4b66      	ldr	r3, [pc, #408]	; (80045cc <HAL_RCC_ClockConfig+0x1f0>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004438:	429a      	cmp	r2, r3
 800443a:	d908      	bls.n	800444e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800443c:	4b63      	ldr	r3, [pc, #396]	; (80045cc <HAL_RCC_ClockConfig+0x1f0>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	4960      	ldr	r1, [pc, #384]	; (80045cc <HAL_RCC_ClockConfig+0x1f0>)
 800444a:	4313      	orrs	r3, r2
 800444c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d04c      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b03      	cmp	r3, #3
 8004460:	d107      	bne.n	8004472 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004462:	4b5a      	ldr	r3, [pc, #360]	; (80045cc <HAL_RCC_ClockConfig+0x1f0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d121      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e0a6      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d107      	bne.n	800448a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800447a:	4b54      	ldr	r3, [pc, #336]	; (80045cc <HAL_RCC_ClockConfig+0x1f0>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d115      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e09a      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d107      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004492:	4b4e      	ldr	r3, [pc, #312]	; (80045cc <HAL_RCC_ClockConfig+0x1f0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d109      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e08e      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044a2:	4b4a      	ldr	r3, [pc, #296]	; (80045cc <HAL_RCC_ClockConfig+0x1f0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e086      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044b2:	4b46      	ldr	r3, [pc, #280]	; (80045cc <HAL_RCC_ClockConfig+0x1f0>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f023 0203 	bic.w	r2, r3, #3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	4943      	ldr	r1, [pc, #268]	; (80045cc <HAL_RCC_ClockConfig+0x1f0>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c4:	f7fd fd90 	bl	8001fe8 <HAL_GetTick>
 80044c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ca:	e00a      	b.n	80044e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044cc:	f7fd fd8c 	bl	8001fe8 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044da:	4293      	cmp	r3, r2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e06e      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e2:	4b3a      	ldr	r3, [pc, #232]	; (80045cc <HAL_RCC_ClockConfig+0x1f0>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 020c 	and.w	r2, r3, #12
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d1eb      	bne.n	80044cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d010      	beq.n	8004522 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	4b31      	ldr	r3, [pc, #196]	; (80045cc <HAL_RCC_ClockConfig+0x1f0>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800450c:	429a      	cmp	r2, r3
 800450e:	d208      	bcs.n	8004522 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004510:	4b2e      	ldr	r3, [pc, #184]	; (80045cc <HAL_RCC_ClockConfig+0x1f0>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	492b      	ldr	r1, [pc, #172]	; (80045cc <HAL_RCC_ClockConfig+0x1f0>)
 800451e:	4313      	orrs	r3, r2
 8004520:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004522:	4b29      	ldr	r3, [pc, #164]	; (80045c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d210      	bcs.n	8004552 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004530:	4b25      	ldr	r3, [pc, #148]	; (80045c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f023 0207 	bic.w	r2, r3, #7
 8004538:	4923      	ldr	r1, [pc, #140]	; (80045c8 <HAL_RCC_ClockConfig+0x1ec>)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	4313      	orrs	r3, r2
 800453e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004540:	4b21      	ldr	r3, [pc, #132]	; (80045c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d001      	beq.n	8004552 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e036      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0304 	and.w	r3, r3, #4
 800455a:	2b00      	cmp	r3, #0
 800455c:	d008      	beq.n	8004570 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800455e:	4b1b      	ldr	r3, [pc, #108]	; (80045cc <HAL_RCC_ClockConfig+0x1f0>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	4918      	ldr	r1, [pc, #96]	; (80045cc <HAL_RCC_ClockConfig+0x1f0>)
 800456c:	4313      	orrs	r3, r2
 800456e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0308 	and.w	r3, r3, #8
 8004578:	2b00      	cmp	r3, #0
 800457a:	d009      	beq.n	8004590 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800457c:	4b13      	ldr	r3, [pc, #76]	; (80045cc <HAL_RCC_ClockConfig+0x1f0>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	4910      	ldr	r1, [pc, #64]	; (80045cc <HAL_RCC_ClockConfig+0x1f0>)
 800458c:	4313      	orrs	r3, r2
 800458e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004590:	f000 f824 	bl	80045dc <HAL_RCC_GetSysClockFreq>
 8004594:	4602      	mov	r2, r0
 8004596:	4b0d      	ldr	r3, [pc, #52]	; (80045cc <HAL_RCC_ClockConfig+0x1f0>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	091b      	lsrs	r3, r3, #4
 800459c:	f003 030f 	and.w	r3, r3, #15
 80045a0:	490b      	ldr	r1, [pc, #44]	; (80045d0 <HAL_RCC_ClockConfig+0x1f4>)
 80045a2:	5ccb      	ldrb	r3, [r1, r3]
 80045a4:	f003 031f 	and.w	r3, r3, #31
 80045a8:	fa22 f303 	lsr.w	r3, r2, r3
 80045ac:	4a09      	ldr	r2, [pc, #36]	; (80045d4 <HAL_RCC_ClockConfig+0x1f8>)
 80045ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80045b0:	4b09      	ldr	r3, [pc, #36]	; (80045d8 <HAL_RCC_ClockConfig+0x1fc>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fd fb49 	bl	8001c4c <HAL_InitTick>
 80045ba:	4603      	mov	r3, r0
 80045bc:	72fb      	strb	r3, [r7, #11]

  return status;
 80045be:	7afb      	ldrb	r3, [r7, #11]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40022000 	.word	0x40022000
 80045cc:	40021000 	.word	0x40021000
 80045d0:	0800d18c 	.word	0x0800d18c
 80045d4:	20000000 	.word	0x20000000
 80045d8:	20000004 	.word	0x20000004

080045dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	b089      	sub	sp, #36	; 0x24
 80045e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	61fb      	str	r3, [r7, #28]
 80045e6:	2300      	movs	r3, #0
 80045e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045ea:	4b3e      	ldr	r3, [pc, #248]	; (80046e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 030c 	and.w	r3, r3, #12
 80045f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045f4:	4b3b      	ldr	r3, [pc, #236]	; (80046e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0303 	and.w	r3, r3, #3
 80045fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d005      	beq.n	8004610 <HAL_RCC_GetSysClockFreq+0x34>
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	2b0c      	cmp	r3, #12
 8004608:	d121      	bne.n	800464e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d11e      	bne.n	800464e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004610:	4b34      	ldr	r3, [pc, #208]	; (80046e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d107      	bne.n	800462c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800461c:	4b31      	ldr	r3, [pc, #196]	; (80046e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800461e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004622:	0a1b      	lsrs	r3, r3, #8
 8004624:	f003 030f 	and.w	r3, r3, #15
 8004628:	61fb      	str	r3, [r7, #28]
 800462a:	e005      	b.n	8004638 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800462c:	4b2d      	ldr	r3, [pc, #180]	; (80046e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	091b      	lsrs	r3, r3, #4
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004638:	4a2b      	ldr	r2, [pc, #172]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004640:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10d      	bne.n	8004664 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800464c:	e00a      	b.n	8004664 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	2b04      	cmp	r3, #4
 8004652:	d102      	bne.n	800465a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004654:	4b25      	ldr	r3, [pc, #148]	; (80046ec <HAL_RCC_GetSysClockFreq+0x110>)
 8004656:	61bb      	str	r3, [r7, #24]
 8004658:	e004      	b.n	8004664 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	2b08      	cmp	r3, #8
 800465e:	d101      	bne.n	8004664 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004660:	4b23      	ldr	r3, [pc, #140]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004662:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	2b0c      	cmp	r3, #12
 8004668:	d134      	bne.n	80046d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800466a:	4b1e      	ldr	r3, [pc, #120]	; (80046e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b02      	cmp	r3, #2
 8004678:	d003      	beq.n	8004682 <HAL_RCC_GetSysClockFreq+0xa6>
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	2b03      	cmp	r3, #3
 800467e:	d003      	beq.n	8004688 <HAL_RCC_GetSysClockFreq+0xac>
 8004680:	e005      	b.n	800468e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004682:	4b1a      	ldr	r3, [pc, #104]	; (80046ec <HAL_RCC_GetSysClockFreq+0x110>)
 8004684:	617b      	str	r3, [r7, #20]
      break;
 8004686:	e005      	b.n	8004694 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004688:	4b19      	ldr	r3, [pc, #100]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800468a:	617b      	str	r3, [r7, #20]
      break;
 800468c:	e002      	b.n	8004694 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	617b      	str	r3, [r7, #20]
      break;
 8004692:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004694:	4b13      	ldr	r3, [pc, #76]	; (80046e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	091b      	lsrs	r3, r3, #4
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	3301      	adds	r3, #1
 80046a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046a2:	4b10      	ldr	r3, [pc, #64]	; (80046e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	0a1b      	lsrs	r3, r3, #8
 80046a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	fb03 f202 	mul.w	r2, r3, r2
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046ba:	4b0a      	ldr	r3, [pc, #40]	; (80046e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	0e5b      	lsrs	r3, r3, #25
 80046c0:	f003 0303 	and.w	r3, r3, #3
 80046c4:	3301      	adds	r3, #1
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80046d4:	69bb      	ldr	r3, [r7, #24]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3724      	adds	r7, #36	; 0x24
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40021000 	.word	0x40021000
 80046e8:	0800d1a4 	.word	0x0800d1a4
 80046ec:	00f42400 	.word	0x00f42400
 80046f0:	007a1200 	.word	0x007a1200

080046f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046f8:	4b03      	ldr	r3, [pc, #12]	; (8004708 <HAL_RCC_GetHCLKFreq+0x14>)
 80046fa:	681b      	ldr	r3, [r3, #0]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	20000000 	.word	0x20000000

0800470c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004710:	f7ff fff0 	bl	80046f4 <HAL_RCC_GetHCLKFreq>
 8004714:	4602      	mov	r2, r0
 8004716:	4b06      	ldr	r3, [pc, #24]	; (8004730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	0a1b      	lsrs	r3, r3, #8
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	4904      	ldr	r1, [pc, #16]	; (8004734 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004722:	5ccb      	ldrb	r3, [r1, r3]
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40021000 	.word	0x40021000
 8004734:	0800d19c 	.word	0x0800d19c

08004738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800473c:	f7ff ffda 	bl	80046f4 <HAL_RCC_GetHCLKFreq>
 8004740:	4602      	mov	r2, r0
 8004742:	4b06      	ldr	r3, [pc, #24]	; (800475c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	0adb      	lsrs	r3, r3, #11
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	4904      	ldr	r1, [pc, #16]	; (8004760 <HAL_RCC_GetPCLK2Freq+0x28>)
 800474e:	5ccb      	ldrb	r3, [r1, r3]
 8004750:	f003 031f 	and.w	r3, r3, #31
 8004754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004758:	4618      	mov	r0, r3
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40021000 	.word	0x40021000
 8004760:	0800d19c 	.word	0x0800d19c

08004764 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	220f      	movs	r2, #15
 8004772:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004774:	4b12      	ldr	r3, [pc, #72]	; (80047c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f003 0203 	and.w	r2, r3, #3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004780:	4b0f      	ldr	r3, [pc, #60]	; (80047c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800478c:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <HAL_RCC_GetClockConfig+0x5c>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004798:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <HAL_RCC_GetClockConfig+0x5c>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	08db      	lsrs	r3, r3, #3
 800479e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80047a6:	4b07      	ldr	r3, [pc, #28]	; (80047c4 <HAL_RCC_GetClockConfig+0x60>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0207 	and.w	r2, r3, #7
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	601a      	str	r2, [r3, #0]
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40021000 	.word	0x40021000
 80047c4:	40022000 	.word	0x40022000

080047c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80047d0:	2300      	movs	r3, #0
 80047d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047d4:	4b2a      	ldr	r3, [pc, #168]	; (8004880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80047e0:	f7ff f8f0 	bl	80039c4 <HAL_PWREx_GetVoltageRange>
 80047e4:	6178      	str	r0, [r7, #20]
 80047e6:	e014      	b.n	8004812 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047e8:	4b25      	ldr	r3, [pc, #148]	; (8004880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ec:	4a24      	ldr	r2, [pc, #144]	; (8004880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f2:	6593      	str	r3, [r2, #88]	; 0x58
 80047f4:	4b22      	ldr	r3, [pc, #136]	; (8004880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004800:	f7ff f8e0 	bl	80039c4 <HAL_PWREx_GetVoltageRange>
 8004804:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004806:	4b1e      	ldr	r3, [pc, #120]	; (8004880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480a:	4a1d      	ldr	r2, [pc, #116]	; (8004880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800480c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004810:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004818:	d10b      	bne.n	8004832 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b80      	cmp	r3, #128	; 0x80
 800481e:	d919      	bls.n	8004854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2ba0      	cmp	r3, #160	; 0xa0
 8004824:	d902      	bls.n	800482c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004826:	2302      	movs	r3, #2
 8004828:	613b      	str	r3, [r7, #16]
 800482a:	e013      	b.n	8004854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800482c:	2301      	movs	r3, #1
 800482e:	613b      	str	r3, [r7, #16]
 8004830:	e010      	b.n	8004854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b80      	cmp	r3, #128	; 0x80
 8004836:	d902      	bls.n	800483e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004838:	2303      	movs	r3, #3
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	e00a      	b.n	8004854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b80      	cmp	r3, #128	; 0x80
 8004842:	d102      	bne.n	800484a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004844:	2302      	movs	r3, #2
 8004846:	613b      	str	r3, [r7, #16]
 8004848:	e004      	b.n	8004854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b70      	cmp	r3, #112	; 0x70
 800484e:	d101      	bne.n	8004854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004850:	2301      	movs	r3, #1
 8004852:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004854:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f023 0207 	bic.w	r2, r3, #7
 800485c:	4909      	ldr	r1, [pc, #36]	; (8004884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004864:	4b07      	ldr	r3, [pc, #28]	; (8004884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	429a      	cmp	r2, r3
 8004870:	d001      	beq.n	8004876 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40021000 	.word	0x40021000
 8004884:	40022000 	.word	0x40022000

08004888 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004890:	2300      	movs	r3, #0
 8004892:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004894:	2300      	movs	r3, #0
 8004896:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d041      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048ac:	d02a      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80048ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048b2:	d824      	bhi.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80048b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048b8:	d008      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80048ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048be:	d81e      	bhi.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00a      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80048c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048c8:	d010      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048ca:	e018      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048cc:	4b86      	ldr	r3, [pc, #536]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	4a85      	ldr	r2, [pc, #532]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048d8:	e015      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3304      	adds	r3, #4
 80048de:	2100      	movs	r1, #0
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 facb 	bl	8004e7c <RCCEx_PLLSAI1_Config>
 80048e6:	4603      	mov	r3, r0
 80048e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048ea:	e00c      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3320      	adds	r3, #32
 80048f0:	2100      	movs	r1, #0
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fbb6 	bl	8005064 <RCCEx_PLLSAI2_Config>
 80048f8:	4603      	mov	r3, r0
 80048fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048fc:	e003      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	74fb      	strb	r3, [r7, #19]
      break;
 8004902:	e000      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004904:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004906:	7cfb      	ldrb	r3, [r7, #19]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10b      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800490c:	4b76      	ldr	r3, [pc, #472]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004912:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800491a:	4973      	ldr	r1, [pc, #460]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004922:	e001      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004924:	7cfb      	ldrb	r3, [r7, #19]
 8004926:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d041      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004938:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800493c:	d02a      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800493e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004942:	d824      	bhi.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004944:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004948:	d008      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800494a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800494e:	d81e      	bhi.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00a      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004958:	d010      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800495a:	e018      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800495c:	4b62      	ldr	r3, [pc, #392]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	4a61      	ldr	r2, [pc, #388]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004966:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004968:	e015      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	3304      	adds	r3, #4
 800496e:	2100      	movs	r1, #0
 8004970:	4618      	mov	r0, r3
 8004972:	f000 fa83 	bl	8004e7c <RCCEx_PLLSAI1_Config>
 8004976:	4603      	mov	r3, r0
 8004978:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800497a:	e00c      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3320      	adds	r3, #32
 8004980:	2100      	movs	r1, #0
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fb6e 	bl	8005064 <RCCEx_PLLSAI2_Config>
 8004988:	4603      	mov	r3, r0
 800498a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800498c:	e003      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	74fb      	strb	r3, [r7, #19]
      break;
 8004992:	e000      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004996:	7cfb      	ldrb	r3, [r7, #19]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10b      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800499c:	4b52      	ldr	r3, [pc, #328]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800499e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049aa:	494f      	ldr	r1, [pc, #316]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049b2:	e001      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b4:	7cfb      	ldrb	r3, [r7, #19]
 80049b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 80a0 	beq.w	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049c6:	2300      	movs	r3, #0
 80049c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049ca:	4b47      	ldr	r3, [pc, #284]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80049da:	2300      	movs	r3, #0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00d      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049e0:	4b41      	ldr	r3, [pc, #260]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e4:	4a40      	ldr	r2, [pc, #256]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ea:	6593      	str	r3, [r2, #88]	; 0x58
 80049ec:	4b3e      	ldr	r3, [pc, #248]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f4:	60bb      	str	r3, [r7, #8]
 80049f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049f8:	2301      	movs	r3, #1
 80049fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049fc:	4b3b      	ldr	r3, [pc, #236]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a3a      	ldr	r2, [pc, #232]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a08:	f7fd faee 	bl	8001fe8 <HAL_GetTick>
 8004a0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a0e:	e009      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a10:	f7fd faea 	bl	8001fe8 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d902      	bls.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	74fb      	strb	r3, [r7, #19]
        break;
 8004a22:	e005      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a24:	4b31      	ldr	r3, [pc, #196]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0ef      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004a30:	7cfb      	ldrb	r3, [r7, #19]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d15c      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a36:	4b2c      	ldr	r3, [pc, #176]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d01f      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d019      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a54:	4b24      	ldr	r3, [pc, #144]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a60:	4b21      	ldr	r3, [pc, #132]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a66:	4a20      	ldr	r2, [pc, #128]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a70:	4b1d      	ldr	r3, [pc, #116]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a76:	4a1c      	ldr	r2, [pc, #112]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a80:	4a19      	ldr	r2, [pc, #100]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d016      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a92:	f7fd faa9 	bl	8001fe8 <HAL_GetTick>
 8004a96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a98:	e00b      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a9a:	f7fd faa5 	bl	8001fe8 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d902      	bls.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	74fb      	strb	r3, [r7, #19]
            break;
 8004ab0:	e006      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ab2:	4b0d      	ldr	r3, [pc, #52]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0ec      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004ac0:	7cfb      	ldrb	r3, [r7, #19]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10c      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ac6:	4b08      	ldr	r3, [pc, #32]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004acc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ad6:	4904      	ldr	r1, [pc, #16]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ade:	e009      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ae0:	7cfb      	ldrb	r3, [r7, #19]
 8004ae2:	74bb      	strb	r3, [r7, #18]
 8004ae4:	e006      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004ae6:	bf00      	nop
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af0:	7cfb      	ldrb	r3, [r7, #19]
 8004af2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004af4:	7c7b      	ldrb	r3, [r7, #17]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d105      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004afa:	4b9e      	ldr	r3, [pc, #632]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afe:	4a9d      	ldr	r2, [pc, #628]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b12:	4b98      	ldr	r3, [pc, #608]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b18:	f023 0203 	bic.w	r2, r3, #3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b20:	4994      	ldr	r1, [pc, #592]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00a      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b34:	4b8f      	ldr	r3, [pc, #572]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3a:	f023 020c 	bic.w	r2, r3, #12
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b42:	498c      	ldr	r1, [pc, #560]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0304 	and.w	r3, r3, #4
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b56:	4b87      	ldr	r3, [pc, #540]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	4983      	ldr	r1, [pc, #524]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00a      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b78:	4b7e      	ldr	r3, [pc, #504]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b86:	497b      	ldr	r1, [pc, #492]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0310 	and.w	r3, r3, #16
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00a      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b9a:	4b76      	ldr	r3, [pc, #472]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ba8:	4972      	ldr	r1, [pc, #456]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0320 	and.w	r3, r3, #32
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00a      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bbc:	4b6d      	ldr	r3, [pc, #436]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bca:	496a      	ldr	r1, [pc, #424]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bde:	4b65      	ldr	r3, [pc, #404]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bec:	4961      	ldr	r1, [pc, #388]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00a      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c00:	4b5c      	ldr	r3, [pc, #368]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c0e:	4959      	ldr	r1, [pc, #356]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c22:	4b54      	ldr	r3, [pc, #336]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c30:	4950      	ldr	r1, [pc, #320]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00a      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c44:	4b4b      	ldr	r3, [pc, #300]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c52:	4948      	ldr	r1, [pc, #288]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c66:	4b43      	ldr	r3, [pc, #268]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c74:	493f      	ldr	r1, [pc, #252]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d028      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c88:	4b3a      	ldr	r3, [pc, #232]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c96:	4937      	ldr	r1, [pc, #220]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ca2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ca6:	d106      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ca8:	4b32      	ldr	r3, [pc, #200]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	4a31      	ldr	r2, [pc, #196]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cb2:	60d3      	str	r3, [r2, #12]
 8004cb4:	e011      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cbe:	d10c      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3304      	adds	r3, #4
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 f8d8 	bl	8004e7c <RCCEx_PLLSAI1_Config>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004cd0:	7cfb      	ldrb	r3, [r7, #19]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004cd6:	7cfb      	ldrb	r3, [r7, #19]
 8004cd8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d028      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ce6:	4b23      	ldr	r3, [pc, #140]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf4:	491f      	ldr	r1, [pc, #124]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d04:	d106      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d06:	4b1b      	ldr	r3, [pc, #108]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	4a1a      	ldr	r2, [pc, #104]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d10:	60d3      	str	r3, [r2, #12]
 8004d12:	e011      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d1c:	d10c      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	3304      	adds	r3, #4
 8004d22:	2101      	movs	r1, #1
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 f8a9 	bl	8004e7c <RCCEx_PLLSAI1_Config>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d2e:	7cfb      	ldrb	r3, [r7, #19]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004d34:	7cfb      	ldrb	r3, [r7, #19]
 8004d36:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d02b      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d44:	4b0b      	ldr	r3, [pc, #44]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d52:	4908      	ldr	r1, [pc, #32]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d62:	d109      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d64:	4b03      	ldr	r3, [pc, #12]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	4a02      	ldr	r2, [pc, #8]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d6e:	60d3      	str	r3, [r2, #12]
 8004d70:	e014      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004d72:	bf00      	nop
 8004d74:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d80:	d10c      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	3304      	adds	r3, #4
 8004d86:	2101      	movs	r1, #1
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f000 f877 	bl	8004e7c <RCCEx_PLLSAI1_Config>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d92:	7cfb      	ldrb	r3, [r7, #19]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004d98:	7cfb      	ldrb	r3, [r7, #19]
 8004d9a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d02f      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004da8:	4b2b      	ldr	r3, [pc, #172]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004db6:	4928      	ldr	r1, [pc, #160]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dc6:	d10d      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	2102      	movs	r1, #2
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 f854 	bl	8004e7c <RCCEx_PLLSAI1_Config>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dd8:	7cfb      	ldrb	r3, [r7, #19]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d014      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004dde:	7cfb      	ldrb	r3, [r7, #19]
 8004de0:	74bb      	strb	r3, [r7, #18]
 8004de2:	e011      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dec:	d10c      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	3320      	adds	r3, #32
 8004df2:	2102      	movs	r1, #2
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 f935 	bl	8005064 <RCCEx_PLLSAI2_Config>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dfe:	7cfb      	ldrb	r3, [r7, #19]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004e04:	7cfb      	ldrb	r3, [r7, #19]
 8004e06:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00a      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e14:	4b10      	ldr	r3, [pc, #64]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e22:	490d      	ldr	r1, [pc, #52]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00b      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e36:	4b08      	ldr	r3, [pc, #32]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e46:	4904      	ldr	r1, [pc, #16]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e4e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40021000 	.word	0x40021000

08004e5c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004e60:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a04      	ldr	r2, [pc, #16]	; (8004e78 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e66:	f043 0304 	orr.w	r3, r3, #4
 8004e6a:	6013      	str	r3, [r2, #0]
}
 8004e6c:	bf00      	nop
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40021000 	.word	0x40021000

08004e7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e8a:	4b75      	ldr	r3, [pc, #468]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d018      	beq.n	8004ec8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e96:	4b72      	ldr	r3, [pc, #456]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f003 0203 	and.w	r2, r3, #3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d10d      	bne.n	8004ec2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
       ||
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d009      	beq.n	8004ec2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004eae:	4b6c      	ldr	r3, [pc, #432]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	091b      	lsrs	r3, r3, #4
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
       ||
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d047      	beq.n	8004f52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	73fb      	strb	r3, [r7, #15]
 8004ec6:	e044      	b.n	8004f52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b03      	cmp	r3, #3
 8004ece:	d018      	beq.n	8004f02 <RCCEx_PLLSAI1_Config+0x86>
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d825      	bhi.n	8004f20 <RCCEx_PLLSAI1_Config+0xa4>
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d002      	beq.n	8004ede <RCCEx_PLLSAI1_Config+0x62>
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d009      	beq.n	8004ef0 <RCCEx_PLLSAI1_Config+0x74>
 8004edc:	e020      	b.n	8004f20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ede:	4b60      	ldr	r3, [pc, #384]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d11d      	bne.n	8004f26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eee:	e01a      	b.n	8004f26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ef0:	4b5b      	ldr	r3, [pc, #364]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d116      	bne.n	8004f2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f00:	e013      	b.n	8004f2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f02:	4b57      	ldr	r3, [pc, #348]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10f      	bne.n	8004f2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f0e:	4b54      	ldr	r3, [pc, #336]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d109      	bne.n	8004f2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f1e:	e006      	b.n	8004f2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	73fb      	strb	r3, [r7, #15]
      break;
 8004f24:	e004      	b.n	8004f30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f26:	bf00      	nop
 8004f28:	e002      	b.n	8004f30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f2a:	bf00      	nop
 8004f2c:	e000      	b.n	8004f30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10d      	bne.n	8004f52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f36:	4b4a      	ldr	r3, [pc, #296]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6819      	ldr	r1, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	430b      	orrs	r3, r1
 8004f4c:	4944      	ldr	r1, [pc, #272]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d17d      	bne.n	8005054 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f58:	4b41      	ldr	r3, [pc, #260]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a40      	ldr	r2, [pc, #256]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f64:	f7fd f840 	bl	8001fe8 <HAL_GetTick>
 8004f68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f6a:	e009      	b.n	8004f80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f6c:	f7fd f83c 	bl	8001fe8 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d902      	bls.n	8004f80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	73fb      	strb	r3, [r7, #15]
        break;
 8004f7e:	e005      	b.n	8004f8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f80:	4b37      	ldr	r3, [pc, #220]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1ef      	bne.n	8004f6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d160      	bne.n	8005054 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d111      	bne.n	8004fbc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f98:	4b31      	ldr	r3, [pc, #196]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6892      	ldr	r2, [r2, #8]
 8004fa8:	0211      	lsls	r1, r2, #8
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	68d2      	ldr	r2, [r2, #12]
 8004fae:	0912      	lsrs	r2, r2, #4
 8004fb0:	0452      	lsls	r2, r2, #17
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	492a      	ldr	r1, [pc, #168]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	610b      	str	r3, [r1, #16]
 8004fba:	e027      	b.n	800500c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d112      	bne.n	8004fe8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fc2:	4b27      	ldr	r3, [pc, #156]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004fca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	6892      	ldr	r2, [r2, #8]
 8004fd2:	0211      	lsls	r1, r2, #8
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6912      	ldr	r2, [r2, #16]
 8004fd8:	0852      	lsrs	r2, r2, #1
 8004fda:	3a01      	subs	r2, #1
 8004fdc:	0552      	lsls	r2, r2, #21
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	491f      	ldr	r1, [pc, #124]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	610b      	str	r3, [r1, #16]
 8004fe6:	e011      	b.n	800500c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fe8:	4b1d      	ldr	r3, [pc, #116]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ff0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6892      	ldr	r2, [r2, #8]
 8004ff8:	0211      	lsls	r1, r2, #8
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6952      	ldr	r2, [r2, #20]
 8004ffe:	0852      	lsrs	r2, r2, #1
 8005000:	3a01      	subs	r2, #1
 8005002:	0652      	lsls	r2, r2, #25
 8005004:	430a      	orrs	r2, r1
 8005006:	4916      	ldr	r1, [pc, #88]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005008:	4313      	orrs	r3, r2
 800500a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800500c:	4b14      	ldr	r3, [pc, #80]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a13      	ldr	r2, [pc, #76]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005012:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005016:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005018:	f7fc ffe6 	bl	8001fe8 <HAL_GetTick>
 800501c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800501e:	e009      	b.n	8005034 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005020:	f7fc ffe2 	bl	8001fe8 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d902      	bls.n	8005034 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	73fb      	strb	r3, [r7, #15]
          break;
 8005032:	e005      	b.n	8005040 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005034:	4b0a      	ldr	r3, [pc, #40]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0ef      	beq.n	8005020 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005040:	7bfb      	ldrb	r3, [r7, #15]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d106      	bne.n	8005054 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005046:	4b06      	ldr	r3, [pc, #24]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005048:	691a      	ldr	r2, [r3, #16]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	4904      	ldr	r1, [pc, #16]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005050:	4313      	orrs	r3, r2
 8005052:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005054:	7bfb      	ldrb	r3, [r7, #15]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40021000 	.word	0x40021000

08005064 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005072:	4b6a      	ldr	r3, [pc, #424]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	f003 0303 	and.w	r3, r3, #3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d018      	beq.n	80050b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800507e:	4b67      	ldr	r3, [pc, #412]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f003 0203 	and.w	r2, r3, #3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	429a      	cmp	r2, r3
 800508c:	d10d      	bne.n	80050aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
       ||
 8005092:	2b00      	cmp	r3, #0
 8005094:	d009      	beq.n	80050aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005096:	4b61      	ldr	r3, [pc, #388]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	091b      	lsrs	r3, r3, #4
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
       ||
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d047      	beq.n	800513a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	73fb      	strb	r3, [r7, #15]
 80050ae:	e044      	b.n	800513a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b03      	cmp	r3, #3
 80050b6:	d018      	beq.n	80050ea <RCCEx_PLLSAI2_Config+0x86>
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	d825      	bhi.n	8005108 <RCCEx_PLLSAI2_Config+0xa4>
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d002      	beq.n	80050c6 <RCCEx_PLLSAI2_Config+0x62>
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d009      	beq.n	80050d8 <RCCEx_PLLSAI2_Config+0x74>
 80050c4:	e020      	b.n	8005108 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050c6:	4b55      	ldr	r3, [pc, #340]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d11d      	bne.n	800510e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050d6:	e01a      	b.n	800510e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050d8:	4b50      	ldr	r3, [pc, #320]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d116      	bne.n	8005112 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050e8:	e013      	b.n	8005112 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050ea:	4b4c      	ldr	r3, [pc, #304]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10f      	bne.n	8005116 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050f6:	4b49      	ldr	r3, [pc, #292]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d109      	bne.n	8005116 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005106:	e006      	b.n	8005116 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	73fb      	strb	r3, [r7, #15]
      break;
 800510c:	e004      	b.n	8005118 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800510e:	bf00      	nop
 8005110:	e002      	b.n	8005118 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005112:	bf00      	nop
 8005114:	e000      	b.n	8005118 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005116:	bf00      	nop
    }

    if(status == HAL_OK)
 8005118:	7bfb      	ldrb	r3, [r7, #15]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10d      	bne.n	800513a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800511e:	4b3f      	ldr	r3, [pc, #252]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6819      	ldr	r1, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	3b01      	subs	r3, #1
 8005130:	011b      	lsls	r3, r3, #4
 8005132:	430b      	orrs	r3, r1
 8005134:	4939      	ldr	r1, [pc, #228]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005136:	4313      	orrs	r3, r2
 8005138:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d167      	bne.n	8005210 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005140:	4b36      	ldr	r3, [pc, #216]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a35      	ldr	r2, [pc, #212]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800514a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800514c:	f7fc ff4c 	bl	8001fe8 <HAL_GetTick>
 8005150:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005152:	e009      	b.n	8005168 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005154:	f7fc ff48 	bl	8001fe8 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d902      	bls.n	8005168 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	73fb      	strb	r3, [r7, #15]
        break;
 8005166:	e005      	b.n	8005174 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005168:	4b2c      	ldr	r3, [pc, #176]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1ef      	bne.n	8005154 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005174:	7bfb      	ldrb	r3, [r7, #15]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d14a      	bne.n	8005210 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d111      	bne.n	80051a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005180:	4b26      	ldr	r3, [pc, #152]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6892      	ldr	r2, [r2, #8]
 8005190:	0211      	lsls	r1, r2, #8
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	68d2      	ldr	r2, [r2, #12]
 8005196:	0912      	lsrs	r2, r2, #4
 8005198:	0452      	lsls	r2, r2, #17
 800519a:	430a      	orrs	r2, r1
 800519c:	491f      	ldr	r1, [pc, #124]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	614b      	str	r3, [r1, #20]
 80051a2:	e011      	b.n	80051c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80051a4:	4b1d      	ldr	r3, [pc, #116]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80051ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6892      	ldr	r2, [r2, #8]
 80051b4:	0211      	lsls	r1, r2, #8
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6912      	ldr	r2, [r2, #16]
 80051ba:	0852      	lsrs	r2, r2, #1
 80051bc:	3a01      	subs	r2, #1
 80051be:	0652      	lsls	r2, r2, #25
 80051c0:	430a      	orrs	r2, r1
 80051c2:	4916      	ldr	r1, [pc, #88]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80051c8:	4b14      	ldr	r3, [pc, #80]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a13      	ldr	r2, [pc, #76]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d4:	f7fc ff08 	bl	8001fe8 <HAL_GetTick>
 80051d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051da:	e009      	b.n	80051f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051dc:	f7fc ff04 	bl	8001fe8 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d902      	bls.n	80051f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	73fb      	strb	r3, [r7, #15]
          break;
 80051ee:	e005      	b.n	80051fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051f0:	4b0a      	ldr	r3, [pc, #40]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0ef      	beq.n	80051dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005202:	4b06      	ldr	r3, [pc, #24]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005204:	695a      	ldr	r2, [r3, #20]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	4904      	ldr	r1, [pc, #16]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 800520c:	4313      	orrs	r3, r2
 800520e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005210:	7bfb      	ldrb	r3, [r7, #15]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	40021000 	.word	0x40021000

08005220 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d06c      	beq.n	800530c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d106      	bne.n	800524c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7fc fb1c 	bl	8001884 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	22ca      	movs	r2, #202	; 0xca
 800525a:	625a      	str	r2, [r3, #36]	; 0x24
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2253      	movs	r2, #83	; 0x53
 8005262:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 fa49 	bl	80056fc <RTC_EnterInitMode>
 800526a:	4603      	mov	r3, r0
 800526c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d14b      	bne.n	800530c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6812      	ldr	r2, [r2, #0]
 800527e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005286:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6899      	ldr	r1, [r3, #8]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	431a      	orrs	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	68d2      	ldr	r2, [r2, #12]
 80052ae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6919      	ldr	r1, [r3, #16]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	041a      	lsls	r2, r3, #16
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fa4d 	bl	8005764 <RTC_ExitInitMode>
 80052ca:	4603      	mov	r3, r0
 80052cc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d11b      	bne.n	800530c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f022 0203 	bic.w	r2, r2, #3
 80052e2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69da      	ldr	r2, [r3, #28]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	22ff      	movs	r2, #255	; 0xff
 8005302:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800530c:	7bfb      	ldrb	r3, [r7, #15]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005316:	b590      	push	{r4, r7, lr}
 8005318:	b087      	sub	sp, #28
 800531a:	af00      	add	r7, sp, #0
 800531c:	60f8      	str	r0, [r7, #12]
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d101      	bne.n	8005330 <HAL_RTC_SetTime+0x1a>
 800532c:	2302      	movs	r3, #2
 800532e:	e08b      	b.n	8005448 <HAL_RTC_SetTime+0x132>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	22ca      	movs	r2, #202	; 0xca
 8005346:	625a      	str	r2, [r3, #36]	; 0x24
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2253      	movs	r2, #83	; 0x53
 800534e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 f9d3 	bl	80056fc <RTC_EnterInitMode>
 8005356:	4603      	mov	r3, r0
 8005358:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800535a:	7cfb      	ldrb	r3, [r7, #19]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d163      	bne.n	8005428 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d126      	bne.n	80053b4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005370:	2b00      	cmp	r3, #0
 8005372:	d102      	bne.n	800537a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2200      	movs	r2, #0
 8005378:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fa2e 	bl	80057e0 <RTC_ByteToBcd2>
 8005384:	4603      	mov	r3, r0
 8005386:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	785b      	ldrb	r3, [r3, #1]
 800538c:	4618      	mov	r0, r3
 800538e:	f000 fa27 	bl	80057e0 <RTC_ByteToBcd2>
 8005392:	4603      	mov	r3, r0
 8005394:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005396:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	789b      	ldrb	r3, [r3, #2]
 800539c:	4618      	mov	r0, r3
 800539e:	f000 fa1f 	bl	80057e0 <RTC_ByteToBcd2>
 80053a2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80053a4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	78db      	ldrb	r3, [r3, #3]
 80053ac:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80053ae:	4313      	orrs	r3, r2
 80053b0:	617b      	str	r3, [r7, #20]
 80053b2:	e018      	b.n	80053e6 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d102      	bne.n	80053c8 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2200      	movs	r2, #0
 80053c6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	785b      	ldrb	r3, [r3, #1]
 80053d2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80053d4:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80053da:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	78db      	ldrb	r3, [r3, #3]
 80053e0:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80053e2:	4313      	orrs	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80053f0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80053f4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005404:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6899      	ldr	r1, [r3, #8]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	68da      	ldr	r2, [r3, #12]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	431a      	orrs	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 f9a0 	bl	8005764 <RTC_ExitInitMode>
 8005424:	4603      	mov	r3, r0
 8005426:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	22ff      	movs	r2, #255	; 0xff
 800542e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005430:	7cfb      	ldrb	r3, [r7, #19]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d103      	bne.n	800543e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005446:	7cfb      	ldrb	r3, [r7, #19]
}
 8005448:	4618      	mov	r0, r3
 800544a:	371c      	adds	r7, #28
 800544c:	46bd      	mov	sp, r7
 800544e:	bd90      	pop	{r4, r7, pc}

08005450 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800547e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005482:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	0c1b      	lsrs	r3, r3, #16
 8005488:	b2db      	uxtb	r3, r3
 800548a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800548e:	b2da      	uxtb	r2, r3
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	0a1b      	lsrs	r3, r3, #8
 8005498:	b2db      	uxtb	r3, r3
 800549a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	0d9b      	lsrs	r3, r3, #22
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d11a      	bne.n	80054fe <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 f9a7 	bl	8005820 <RTC_Bcd2ToByte>
 80054d2:	4603      	mov	r3, r0
 80054d4:	461a      	mov	r2, r3
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	785b      	ldrb	r3, [r3, #1]
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 f99e 	bl	8005820 <RTC_Bcd2ToByte>
 80054e4:	4603      	mov	r3, r0
 80054e6:	461a      	mov	r2, r3
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	789b      	ldrb	r3, [r3, #2]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 f995 	bl	8005820 <RTC_Bcd2ToByte>
 80054f6:	4603      	mov	r3, r0
 80054f8:	461a      	mov	r2, r3
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005508:	b590      	push	{r4, r7, lr}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 3020 	ldrb.w	r3, [r3, #32]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_RTC_SetDate+0x1a>
 800551e:	2302      	movs	r3, #2
 8005520:	e075      	b.n	800560e <HAL_RTC_SetDate+0x106>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2202      	movs	r2, #2
 800552e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10e      	bne.n	8005556 <HAL_RTC_SetDate+0x4e>
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	785b      	ldrb	r3, [r3, #1]
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	2b00      	cmp	r3, #0
 8005542:	d008      	beq.n	8005556 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	785b      	ldrb	r3, [r3, #1]
 8005548:	f023 0310 	bic.w	r3, r3, #16
 800554c:	b2db      	uxtb	r3, r3
 800554e:	330a      	adds	r3, #10
 8005550:	b2da      	uxtb	r2, r3
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d11c      	bne.n	8005596 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	78db      	ldrb	r3, [r3, #3]
 8005560:	4618      	mov	r0, r3
 8005562:	f000 f93d 	bl	80057e0 <RTC_ByteToBcd2>
 8005566:	4603      	mov	r3, r0
 8005568:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	785b      	ldrb	r3, [r3, #1]
 800556e:	4618      	mov	r0, r3
 8005570:	f000 f936 	bl	80057e0 <RTC_ByteToBcd2>
 8005574:	4603      	mov	r3, r0
 8005576:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005578:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	789b      	ldrb	r3, [r3, #2]
 800557e:	4618      	mov	r0, r3
 8005580:	f000 f92e 	bl	80057e0 <RTC_ByteToBcd2>
 8005584:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005586:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005590:	4313      	orrs	r3, r2
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	e00e      	b.n	80055b4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	78db      	ldrb	r3, [r3, #3]
 800559a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	785b      	ldrb	r3, [r3, #1]
 80055a0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80055a2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80055a8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80055b0:	4313      	orrs	r3, r2
 80055b2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	22ca      	movs	r2, #202	; 0xca
 80055ba:	625a      	str	r2, [r3, #36]	; 0x24
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2253      	movs	r2, #83	; 0x53
 80055c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 f899 	bl	80056fc <RTC_EnterInitMode>
 80055ca:	4603      	mov	r3, r0
 80055cc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80055ce:	7cfb      	ldrb	r3, [r7, #19]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10c      	bne.n	80055ee <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80055de:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80055e2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 f8bd 	bl	8005764 <RTC_ExitInitMode>
 80055ea:	4603      	mov	r3, r0
 80055ec:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	22ff      	movs	r2, #255	; 0xff
 80055f4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80055f6:	7cfb      	ldrb	r3, [r7, #19]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d103      	bne.n	8005604 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800560c:	7cfb      	ldrb	r3, [r7, #19]
}
 800560e:	4618      	mov	r0, r3
 8005610:	371c      	adds	r7, #28
 8005612:	46bd      	mov	sp, r7
 8005614:	bd90      	pop	{r4, r7, pc}

08005616 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b086      	sub	sp, #24
 800561a:	af00      	add	r7, sp, #0
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800562c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005630:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	0c1b      	lsrs	r3, r3, #16
 8005636:	b2da      	uxtb	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	0a1b      	lsrs	r3, r3, #8
 8005640:	b2db      	uxtb	r3, r3
 8005642:	f003 031f 	and.w	r3, r3, #31
 8005646:	b2da      	uxtb	r2, r3
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	b2db      	uxtb	r3, r3
 8005650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005654:	b2da      	uxtb	r2, r3
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	0b5b      	lsrs	r3, r3, #13
 800565e:	b2db      	uxtb	r3, r3
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	b2da      	uxtb	r2, r3
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d11a      	bne.n	80056a6 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	78db      	ldrb	r3, [r3, #3]
 8005674:	4618      	mov	r0, r3
 8005676:	f000 f8d3 	bl	8005820 <RTC_Bcd2ToByte>
 800567a:	4603      	mov	r3, r0
 800567c:	461a      	mov	r2, r3
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	785b      	ldrb	r3, [r3, #1]
 8005686:	4618      	mov	r0, r3
 8005688:	f000 f8ca 	bl	8005820 <RTC_Bcd2ToByte>
 800568c:	4603      	mov	r3, r0
 800568e:	461a      	mov	r2, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	789b      	ldrb	r3, [r3, #2]
 8005698:	4618      	mov	r0, r3
 800569a:	f000 f8c1 	bl	8005820 <RTC_Bcd2ToByte>
 800569e:	4603      	mov	r3, r0
 80056a0:	461a      	mov	r2, r3
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68da      	ldr	r2, [r3, #12]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056c6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80056c8:	f7fc fc8e 	bl	8001fe8 <HAL_GetTick>
 80056cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80056ce:	e009      	b.n	80056e4 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80056d0:	f7fc fc8a 	bl	8001fe8 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056de:	d901      	bls.n	80056e4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e007      	b.n	80056f4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f003 0320 	and.w	r3, r3, #32
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0ee      	beq.n	80056d0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005704:	2300      	movs	r3, #0
 8005706:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005712:	2b00      	cmp	r3, #0
 8005714:	d120      	bne.n	8005758 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f04f 32ff 	mov.w	r2, #4294967295
 800571e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005720:	f7fc fc62 	bl	8001fe8 <HAL_GetTick>
 8005724:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005726:	e00d      	b.n	8005744 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005728:	f7fc fc5e 	bl	8001fe8 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005736:	d905      	bls.n	8005744 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2203      	movs	r2, #3
 8005740:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574e:	2b00      	cmp	r3, #0
 8005750:	d102      	bne.n	8005758 <RTC_EnterInitMode+0x5c>
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	2b03      	cmp	r3, #3
 8005756:	d1e7      	bne.n	8005728 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005758:	7bfb      	ldrb	r3, [r7, #15]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800576c:	2300      	movs	r3, #0
 800576e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005770:	4b1a      	ldr	r3, [pc, #104]	; (80057dc <RTC_ExitInitMode+0x78>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	4a19      	ldr	r2, [pc, #100]	; (80057dc <RTC_ExitInitMode+0x78>)
 8005776:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800577a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800577c:	4b17      	ldr	r3, [pc, #92]	; (80057dc <RTC_ExitInitMode+0x78>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f003 0320 	and.w	r3, r3, #32
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10c      	bne.n	80057a2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7ff ff91 	bl	80056b0 <HAL_RTC_WaitForSynchro>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01e      	beq.n	80057d2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2203      	movs	r2, #3
 8005798:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	73fb      	strb	r3, [r7, #15]
 80057a0:	e017      	b.n	80057d2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80057a2:	4b0e      	ldr	r3, [pc, #56]	; (80057dc <RTC_ExitInitMode+0x78>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	4a0d      	ldr	r2, [pc, #52]	; (80057dc <RTC_ExitInitMode+0x78>)
 80057a8:	f023 0320 	bic.w	r3, r3, #32
 80057ac:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7ff ff7e 	bl	80056b0 <HAL_RTC_WaitForSynchro>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d005      	beq.n	80057c6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2203      	movs	r2, #3
 80057be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80057c6:	4b05      	ldr	r3, [pc, #20]	; (80057dc <RTC_ExitInitMode+0x78>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	4a04      	ldr	r2, [pc, #16]	; (80057dc <RTC_ExitInitMode+0x78>)
 80057cc:	f043 0320 	orr.w	r3, r3, #32
 80057d0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	40002800 	.word	0x40002800

080057e0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	4603      	mov	r3, r0
 80057e8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80057ee:	79fb      	ldrb	r3, [r7, #7]
 80057f0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80057f2:	e005      	b.n	8005800 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	3301      	adds	r3, #1
 80057f8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80057fa:	7afb      	ldrb	r3, [r7, #11]
 80057fc:	3b0a      	subs	r3, #10
 80057fe:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005800:	7afb      	ldrb	r3, [r7, #11]
 8005802:	2b09      	cmp	r3, #9
 8005804:	d8f6      	bhi.n	80057f4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	b2db      	uxtb	r3, r3
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	b2da      	uxtb	r2, r3
 800580e:	7afb      	ldrb	r3, [r7, #11]
 8005810:	4313      	orrs	r3, r2
 8005812:	b2db      	uxtb	r3, r3
}
 8005814:	4618      	mov	r0, r3
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	4603      	mov	r3, r0
 8005828:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800582a:	79fb      	ldrb	r3, [r7, #7]
 800582c:	091b      	lsrs	r3, r3, #4
 800582e:	b2db      	uxtb	r3, r3
 8005830:	461a      	mov	r2, r3
 8005832:	0092      	lsls	r2, r2, #2
 8005834:	4413      	add	r3, r2
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800583a:	79fb      	ldrb	r3, [r7, #7]
 800583c:	f003 030f 	and.w	r3, r3, #15
 8005840:	b2da      	uxtb	r2, r3
 8005842:	7bfb      	ldrb	r3, [r7, #15]
 8005844:	4413      	add	r3, r2
 8005846:	b2db      	uxtb	r3, r3
}
 8005848:	4618      	mov	r0, r3
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e095      	b.n	8005992 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	2b00      	cmp	r3, #0
 800586c:	d108      	bne.n	8005880 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005876:	d009      	beq.n	800588c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	61da      	str	r2, [r3, #28]
 800587e:	e005      	b.n	800588c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fc f81e 	bl	80018e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058cc:	d902      	bls.n	80058d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	e002      	b.n	80058da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80058e2:	d007      	beq.n	80058f4 <HAL_SPI_Init+0xa0>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058ec:	d002      	beq.n	80058f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	431a      	orrs	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005936:	ea42 0103 	orr.w	r1, r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	0c1b      	lsrs	r3, r3, #16
 8005950:	f003 0204 	and.w	r2, r3, #4
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	f003 0310 	and.w	r3, r3, #16
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005970:	ea42 0103 	orr.w	r1, r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b082      	sub	sp, #8
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e049      	b.n	8005a40 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d106      	bne.n	80059c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7fb ffd5 	bl	8001970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2202      	movs	r2, #2
 80059ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	3304      	adds	r3, #4
 80059d6:	4619      	mov	r1, r3
 80059d8:	4610      	mov	r0, r2
 80059da:	f000 f9ed 	bl	8005db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d001      	beq.n	8005a60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e04f      	b.n	8005b00 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68da      	ldr	r2, [r3, #12]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f042 0201 	orr.w	r2, r2, #1
 8005a76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a23      	ldr	r2, [pc, #140]	; (8005b0c <HAL_TIM_Base_Start_IT+0xc4>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d01d      	beq.n	8005abe <HAL_TIM_Base_Start_IT+0x76>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a8a:	d018      	beq.n	8005abe <HAL_TIM_Base_Start_IT+0x76>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a1f      	ldr	r2, [pc, #124]	; (8005b10 <HAL_TIM_Base_Start_IT+0xc8>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d013      	beq.n	8005abe <HAL_TIM_Base_Start_IT+0x76>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a1e      	ldr	r2, [pc, #120]	; (8005b14 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d00e      	beq.n	8005abe <HAL_TIM_Base_Start_IT+0x76>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a1c      	ldr	r2, [pc, #112]	; (8005b18 <HAL_TIM_Base_Start_IT+0xd0>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d009      	beq.n	8005abe <HAL_TIM_Base_Start_IT+0x76>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a1b      	ldr	r2, [pc, #108]	; (8005b1c <HAL_TIM_Base_Start_IT+0xd4>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d004      	beq.n	8005abe <HAL_TIM_Base_Start_IT+0x76>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a19      	ldr	r2, [pc, #100]	; (8005b20 <HAL_TIM_Base_Start_IT+0xd8>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d115      	bne.n	8005aea <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	4b17      	ldr	r3, [pc, #92]	; (8005b24 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2b06      	cmp	r3, #6
 8005ace:	d015      	beq.n	8005afc <HAL_TIM_Base_Start_IT+0xb4>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad6:	d011      	beq.n	8005afc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0201 	orr.w	r2, r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae8:	e008      	b.n	8005afc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f042 0201 	orr.w	r2, r2, #1
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	e000      	b.n	8005afe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005afc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	40012c00 	.word	0x40012c00
 8005b10:	40000400 	.word	0x40000400
 8005b14:	40000800 	.word	0x40000800
 8005b18:	40000c00 	.word	0x40000c00
 8005b1c:	40013400 	.word	0x40013400
 8005b20:	40014000 	.word	0x40014000
 8005b24:	00010007 	.word	0x00010007

08005b28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d122      	bne.n	8005b84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d11b      	bne.n	8005b84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f06f 0202 	mvn.w	r2, #2
 8005b54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	f003 0303 	and.w	r3, r3, #3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f905 	bl	8005d7a <HAL_TIM_IC_CaptureCallback>
 8005b70:	e005      	b.n	8005b7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f8f7 	bl	8005d66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f908 	bl	8005d8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	f003 0304 	and.w	r3, r3, #4
 8005b8e:	2b04      	cmp	r3, #4
 8005b90:	d122      	bne.n	8005bd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b04      	cmp	r3, #4
 8005b9e:	d11b      	bne.n	8005bd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f06f 0204 	mvn.w	r2, #4
 8005ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2202      	movs	r2, #2
 8005bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f8db 	bl	8005d7a <HAL_TIM_IC_CaptureCallback>
 8005bc4:	e005      	b.n	8005bd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f8cd 	bl	8005d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f8de 	bl	8005d8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f003 0308 	and.w	r3, r3, #8
 8005be2:	2b08      	cmp	r3, #8
 8005be4:	d122      	bne.n	8005c2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f003 0308 	and.w	r3, r3, #8
 8005bf0:	2b08      	cmp	r3, #8
 8005bf2:	d11b      	bne.n	8005c2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f06f 0208 	mvn.w	r2, #8
 8005bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2204      	movs	r2, #4
 8005c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	f003 0303 	and.w	r3, r3, #3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f8b1 	bl	8005d7a <HAL_TIM_IC_CaptureCallback>
 8005c18:	e005      	b.n	8005c26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f8a3 	bl	8005d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f8b4 	bl	8005d8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	f003 0310 	and.w	r3, r3, #16
 8005c36:	2b10      	cmp	r3, #16
 8005c38:	d122      	bne.n	8005c80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f003 0310 	and.w	r3, r3, #16
 8005c44:	2b10      	cmp	r3, #16
 8005c46:	d11b      	bne.n	8005c80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f06f 0210 	mvn.w	r2, #16
 8005c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2208      	movs	r2, #8
 8005c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f887 	bl	8005d7a <HAL_TIM_IC_CaptureCallback>
 8005c6c:	e005      	b.n	8005c7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f879 	bl	8005d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f88a 	bl	8005d8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d10e      	bne.n	8005cac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d107      	bne.n	8005cac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f06f 0201 	mvn.w	r2, #1
 8005ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7fb fc82 	bl	80015b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb6:	2b80      	cmp	r3, #128	; 0x80
 8005cb8:	d10e      	bne.n	8005cd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc4:	2b80      	cmp	r3, #128	; 0x80
 8005cc6:	d107      	bne.n	8005cd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f99c 	bl	8006010 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ce6:	d10e      	bne.n	8005d06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf2:	2b80      	cmp	r3, #128	; 0x80
 8005cf4:	d107      	bne.n	8005d06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f98f 	bl	8006024 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d10:	2b40      	cmp	r3, #64	; 0x40
 8005d12:	d10e      	bne.n	8005d32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1e:	2b40      	cmp	r3, #64	; 0x40
 8005d20:	d107      	bne.n	8005d32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 f838 	bl	8005da2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	f003 0320 	and.w	r3, r3, #32
 8005d3c:	2b20      	cmp	r3, #32
 8005d3e:	d10e      	bne.n	8005d5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	f003 0320 	and.w	r3, r3, #32
 8005d4a:	2b20      	cmp	r3, #32
 8005d4c:	d107      	bne.n	8005d5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f06f 0220 	mvn.w	r2, #32
 8005d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f94f 	bl	8005ffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d5e:	bf00      	nop
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b083      	sub	sp, #12
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b083      	sub	sp, #12
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d82:	bf00      	nop
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
	...

08005db8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a40      	ldr	r2, [pc, #256]	; (8005ecc <TIM_Base_SetConfig+0x114>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d013      	beq.n	8005df8 <TIM_Base_SetConfig+0x40>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd6:	d00f      	beq.n	8005df8 <TIM_Base_SetConfig+0x40>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a3d      	ldr	r2, [pc, #244]	; (8005ed0 <TIM_Base_SetConfig+0x118>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d00b      	beq.n	8005df8 <TIM_Base_SetConfig+0x40>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a3c      	ldr	r2, [pc, #240]	; (8005ed4 <TIM_Base_SetConfig+0x11c>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d007      	beq.n	8005df8 <TIM_Base_SetConfig+0x40>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a3b      	ldr	r2, [pc, #236]	; (8005ed8 <TIM_Base_SetConfig+0x120>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d003      	beq.n	8005df8 <TIM_Base_SetConfig+0x40>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a3a      	ldr	r2, [pc, #232]	; (8005edc <TIM_Base_SetConfig+0x124>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d108      	bne.n	8005e0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a2f      	ldr	r2, [pc, #188]	; (8005ecc <TIM_Base_SetConfig+0x114>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d01f      	beq.n	8005e52 <TIM_Base_SetConfig+0x9a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e18:	d01b      	beq.n	8005e52 <TIM_Base_SetConfig+0x9a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a2c      	ldr	r2, [pc, #176]	; (8005ed0 <TIM_Base_SetConfig+0x118>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d017      	beq.n	8005e52 <TIM_Base_SetConfig+0x9a>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a2b      	ldr	r2, [pc, #172]	; (8005ed4 <TIM_Base_SetConfig+0x11c>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d013      	beq.n	8005e52 <TIM_Base_SetConfig+0x9a>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a2a      	ldr	r2, [pc, #168]	; (8005ed8 <TIM_Base_SetConfig+0x120>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d00f      	beq.n	8005e52 <TIM_Base_SetConfig+0x9a>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a29      	ldr	r2, [pc, #164]	; (8005edc <TIM_Base_SetConfig+0x124>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d00b      	beq.n	8005e52 <TIM_Base_SetConfig+0x9a>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a28      	ldr	r2, [pc, #160]	; (8005ee0 <TIM_Base_SetConfig+0x128>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d007      	beq.n	8005e52 <TIM_Base_SetConfig+0x9a>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a27      	ldr	r2, [pc, #156]	; (8005ee4 <TIM_Base_SetConfig+0x12c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d003      	beq.n	8005e52 <TIM_Base_SetConfig+0x9a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a26      	ldr	r2, [pc, #152]	; (8005ee8 <TIM_Base_SetConfig+0x130>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d108      	bne.n	8005e64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a10      	ldr	r2, [pc, #64]	; (8005ecc <TIM_Base_SetConfig+0x114>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d00f      	beq.n	8005eb0 <TIM_Base_SetConfig+0xf8>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a12      	ldr	r2, [pc, #72]	; (8005edc <TIM_Base_SetConfig+0x124>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d00b      	beq.n	8005eb0 <TIM_Base_SetConfig+0xf8>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a11      	ldr	r2, [pc, #68]	; (8005ee0 <TIM_Base_SetConfig+0x128>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d007      	beq.n	8005eb0 <TIM_Base_SetConfig+0xf8>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a10      	ldr	r2, [pc, #64]	; (8005ee4 <TIM_Base_SetConfig+0x12c>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d003      	beq.n	8005eb0 <TIM_Base_SetConfig+0xf8>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a0f      	ldr	r2, [pc, #60]	; (8005ee8 <TIM_Base_SetConfig+0x130>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d103      	bne.n	8005eb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	691a      	ldr	r2, [r3, #16]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	615a      	str	r2, [r3, #20]
}
 8005ebe:	bf00      	nop
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	40012c00 	.word	0x40012c00
 8005ed0:	40000400 	.word	0x40000400
 8005ed4:	40000800 	.word	0x40000800
 8005ed8:	40000c00 	.word	0x40000c00
 8005edc:	40013400 	.word	0x40013400
 8005ee0:	40014000 	.word	0x40014000
 8005ee4:	40014400 	.word	0x40014400
 8005ee8:	40014800 	.word	0x40014800

08005eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d101      	bne.n	8005f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f00:	2302      	movs	r3, #2
 8005f02:	e068      	b.n	8005fd6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a2e      	ldr	r2, [pc, #184]	; (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d004      	beq.n	8005f38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a2d      	ldr	r2, [pc, #180]	; (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d108      	bne.n	8005f4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a1e      	ldr	r2, [pc, #120]	; (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d01d      	beq.n	8005faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f76:	d018      	beq.n	8005faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a1b      	ldr	r2, [pc, #108]	; (8005fec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d013      	beq.n	8005faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a1a      	ldr	r2, [pc, #104]	; (8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d00e      	beq.n	8005faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a18      	ldr	r2, [pc, #96]	; (8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d009      	beq.n	8005faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a13      	ldr	r2, [pc, #76]	; (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d004      	beq.n	8005faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a14      	ldr	r2, [pc, #80]	; (8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d10c      	bne.n	8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	40012c00 	.word	0x40012c00
 8005fe8:	40013400 	.word	0x40013400
 8005fec:	40000400 	.word	0x40000400
 8005ff0:	40000800 	.word	0x40000800
 8005ff4:	40000c00 	.word	0x40000c00
 8005ff8:	40014000 	.word	0x40014000

08005ffc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e040      	b.n	80060cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800604e:	2b00      	cmp	r3, #0
 8006050:	d106      	bne.n	8006060 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7fb fcae 	bl	80019bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2224      	movs	r2, #36	; 0x24
 8006064:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 0201 	bic.w	r2, r2, #1
 8006074:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fc18 	bl	80068ac <UART_SetConfig>
 800607c:	4603      	mov	r3, r0
 800607e:	2b01      	cmp	r3, #1
 8006080:	d101      	bne.n	8006086 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e022      	b.n	80060cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fec4 	bl	8006e1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	689a      	ldr	r2, [r3, #8]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0201 	orr.w	r2, r2, #1
 80060c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 ff4b 	bl	8006f60 <UART_CheckIdleState>
 80060ca:	4603      	mov	r3, r0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b08a      	sub	sp, #40	; 0x28
 80060d8:	af02      	add	r7, sp, #8
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	603b      	str	r3, [r7, #0]
 80060e0:	4613      	mov	r3, r2
 80060e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	f040 8082 	bne.w	80061f2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d002      	beq.n	80060fa <HAL_UART_Transmit+0x26>
 80060f4:	88fb      	ldrh	r3, [r7, #6]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e07a      	b.n	80061f4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <HAL_UART_Transmit+0x38>
 8006108:	2302      	movs	r3, #2
 800610a:	e073      	b.n	80061f4 <HAL_UART_Transmit+0x120>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2221      	movs	r2, #33	; 0x21
 8006120:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006122:	f7fb ff61 	bl	8001fe8 <HAL_GetTick>
 8006126:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	88fa      	ldrh	r2, [r7, #6]
 800612c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	88fa      	ldrh	r2, [r7, #6]
 8006134:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006140:	d108      	bne.n	8006154 <HAL_UART_Transmit+0x80>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d104      	bne.n	8006154 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800614a:	2300      	movs	r3, #0
 800614c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	61bb      	str	r3, [r7, #24]
 8006152:	e003      	b.n	800615c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006158:	2300      	movs	r3, #0
 800615a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006164:	e02d      	b.n	80061c2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	2200      	movs	r2, #0
 800616e:	2180      	movs	r1, #128	; 0x80
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 ff3e 	bl	8006ff2 <UART_WaitOnFlagUntilTimeout>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e039      	b.n	80061f4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10b      	bne.n	800619e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	881a      	ldrh	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006192:	b292      	uxth	r2, r2
 8006194:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	3302      	adds	r3, #2
 800619a:	61bb      	str	r3, [r7, #24]
 800619c:	e008      	b.n	80061b0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	781a      	ldrb	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	b292      	uxth	r2, r2
 80061a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	3301      	adds	r3, #1
 80061ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	3b01      	subs	r3, #1
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1cb      	bne.n	8006166 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2200      	movs	r2, #0
 80061d6:	2140      	movs	r1, #64	; 0x40
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 ff0a 	bl	8006ff2 <UART_WaitOnFlagUntilTimeout>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e005      	b.n	80061f4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2220      	movs	r2, #32
 80061ec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	e000      	b.n	80061f4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80061f2:	2302      	movs	r3, #2
  }
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3720      	adds	r7, #32
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08a      	sub	sp, #40	; 0x28
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	4613      	mov	r3, r2
 8006208:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800620e:	2b20      	cmp	r3, #32
 8006210:	d142      	bne.n	8006298 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <HAL_UART_Receive_IT+0x22>
 8006218:	88fb      	ldrh	r3, [r7, #6]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e03b      	b.n	800629a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006228:	2b01      	cmp	r3, #1
 800622a:	d101      	bne.n	8006230 <HAL_UART_Receive_IT+0x34>
 800622c:	2302      	movs	r3, #2
 800622e:	e034      	b.n	800629a <HAL_UART_Receive_IT+0x9e>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a18      	ldr	r2, [pc, #96]	; (80062a4 <HAL_UART_Receive_IT+0xa8>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d01f      	beq.n	8006288 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d018      	beq.n	8006288 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	e853 3f00 	ldrex	r3, [r3]
 8006262:	613b      	str	r3, [r7, #16]
   return(result);
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800626a:	627b      	str	r3, [r7, #36]	; 0x24
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	461a      	mov	r2, r3
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	623b      	str	r3, [r7, #32]
 8006276:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006278:	69f9      	ldr	r1, [r7, #28]
 800627a:	6a3a      	ldr	r2, [r7, #32]
 800627c:	e841 2300 	strex	r3, r2, [r1]
 8006280:	61bb      	str	r3, [r7, #24]
   return(result);
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e6      	bne.n	8006256 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006288:	88fb      	ldrh	r3, [r7, #6]
 800628a:	461a      	mov	r2, r3
 800628c:	68b9      	ldr	r1, [r7, #8]
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 ff74 	bl	800717c <UART_Start_Receive_IT>
 8006294:	4603      	mov	r3, r0
 8006296:	e000      	b.n	800629a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006298:	2302      	movs	r3, #2
  }
}
 800629a:	4618      	mov	r0, r3
 800629c:	3728      	adds	r7, #40	; 0x28
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	40008000 	.word	0x40008000

080062a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b0ba      	sub	sp, #232	; 0xe8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80062ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80062d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80062d6:	4013      	ands	r3, r2
 80062d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80062dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d115      	bne.n	8006310 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80062e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e8:	f003 0320 	and.w	r3, r3, #32
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00f      	beq.n	8006310 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f4:	f003 0320 	and.w	r3, r3, #32
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d009      	beq.n	8006310 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 82a6 	beq.w	8006852 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	4798      	blx	r3
      }
      return;
 800630e:	e2a0      	b.n	8006852 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006310:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 8117 	beq.w	8006548 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800631a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d106      	bne.n	8006334 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006326:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800632a:	4b85      	ldr	r3, [pc, #532]	; (8006540 <HAL_UART_IRQHandler+0x298>)
 800632c:	4013      	ands	r3, r2
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 810a 	beq.w	8006548 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	2b00      	cmp	r3, #0
 800633e:	d011      	beq.n	8006364 <HAL_UART_IRQHandler+0xbc>
 8006340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00b      	beq.n	8006364 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2201      	movs	r2, #1
 8006352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800635a:	f043 0201 	orr.w	r2, r3, #1
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d011      	beq.n	8006394 <HAL_UART_IRQHandler+0xec>
 8006370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00b      	beq.n	8006394 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2202      	movs	r2, #2
 8006382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800638a:	f043 0204 	orr.w	r2, r3, #4
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b00      	cmp	r3, #0
 800639e:	d011      	beq.n	80063c4 <HAL_UART_IRQHandler+0x11c>
 80063a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00b      	beq.n	80063c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2204      	movs	r2, #4
 80063b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063ba:	f043 0202 	orr.w	r2, r3, #2
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80063c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c8:	f003 0308 	and.w	r3, r3, #8
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d017      	beq.n	8006400 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063d4:	f003 0320 	and.w	r3, r3, #32
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d105      	bne.n	80063e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80063dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00b      	beq.n	8006400 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2208      	movs	r2, #8
 80063ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063f6:	f043 0208 	orr.w	r2, r3, #8
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006408:	2b00      	cmp	r3, #0
 800640a:	d012      	beq.n	8006432 <HAL_UART_IRQHandler+0x18a>
 800640c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006410:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00c      	beq.n	8006432 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006420:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006428:	f043 0220 	orr.w	r2, r3, #32
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 820c 	beq.w	8006856 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800643e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006442:	f003 0320 	and.w	r3, r3, #32
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00d      	beq.n	8006466 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800644a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800644e:	f003 0320 	and.w	r3, r3, #32
 8006452:	2b00      	cmp	r3, #0
 8006454:	d007      	beq.n	8006466 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800646c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800647a:	2b40      	cmp	r3, #64	; 0x40
 800647c:	d005      	beq.n	800648a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800647e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006482:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006486:	2b00      	cmp	r3, #0
 8006488:	d04f      	beq.n	800652a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 ff40 	bl	8007310 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649a:	2b40      	cmp	r3, #64	; 0x40
 800649c:	d141      	bne.n	8006522 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3308      	adds	r3, #8
 80064a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064ac:	e853 3f00 	ldrex	r3, [r3]
 80064b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80064b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3308      	adds	r3, #8
 80064c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80064ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80064ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80064d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80064e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1d9      	bne.n	800649e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d013      	beq.n	800651a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f6:	4a13      	ldr	r2, [pc, #76]	; (8006544 <HAL_UART_IRQHandler+0x29c>)
 80064f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fb ffce 	bl	80024a0 <HAL_DMA_Abort_IT>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d017      	beq.n	800653a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800650e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006514:	4610      	mov	r0, r2
 8006516:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006518:	e00f      	b.n	800653a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f9b0 	bl	8006880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006520:	e00b      	b.n	800653a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f9ac 	bl	8006880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006528:	e007      	b.n	800653a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f9a8 	bl	8006880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006538:	e18d      	b.n	8006856 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800653a:	bf00      	nop
    return;
 800653c:	e18b      	b.n	8006856 <HAL_UART_IRQHandler+0x5ae>
 800653e:	bf00      	nop
 8006540:	04000120 	.word	0x04000120
 8006544:	080073d7 	.word	0x080073d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800654c:	2b01      	cmp	r3, #1
 800654e:	f040 8146 	bne.w	80067de <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006556:	f003 0310 	and.w	r3, r3, #16
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 813f 	beq.w	80067de <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006564:	f003 0310 	and.w	r3, r3, #16
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 8138 	beq.w	80067de <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2210      	movs	r2, #16
 8006574:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006580:	2b40      	cmp	r3, #64	; 0x40
 8006582:	f040 80b4 	bne.w	80066ee <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006592:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 815f 	beq.w	800685a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80065a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065a6:	429a      	cmp	r2, r3
 80065a8:	f080 8157 	bcs.w	800685a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0320 	and.w	r3, r3, #32
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f040 8085 	bne.w	80066d2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80065dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	461a      	mov	r2, r3
 80065ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80065f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80065fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800660a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1da      	bne.n	80065c8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3308      	adds	r3, #8
 8006618:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800661c:	e853 3f00 	ldrex	r3, [r3]
 8006620:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006624:	f023 0301 	bic.w	r3, r3, #1
 8006628:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3308      	adds	r3, #8
 8006632:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006636:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800663a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800663e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006642:	e841 2300 	strex	r3, r2, [r1]
 8006646:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1e1      	bne.n	8006612 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3308      	adds	r3, #8
 8006654:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006658:	e853 3f00 	ldrex	r3, [r3]
 800665c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800665e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3308      	adds	r3, #8
 800666e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006672:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006674:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006676:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006678:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800667a:	e841 2300 	strex	r3, r2, [r1]
 800667e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1e3      	bne.n	800664e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2220      	movs	r2, #32
 800668a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800669a:	e853 3f00 	ldrex	r3, [r3]
 800669e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066a2:	f023 0310 	bic.w	r3, r3, #16
 80066a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	461a      	mov	r2, r3
 80066b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80066b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066bc:	e841 2300 	strex	r3, r2, [r1]
 80066c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1e4      	bne.n	8006692 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fb fea9 	bl	8002424 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066de:	b29b      	uxth	r3, r3
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	4619      	mov	r1, r3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f8d4 	bl	8006894 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066ec:	e0b5      	b.n	800685a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006708:	b29b      	uxth	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 80a7 	beq.w	800685e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006710:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 80a2 	beq.w	800685e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006722:	e853 3f00 	ldrex	r3, [r3]
 8006726:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800672e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	461a      	mov	r2, r3
 8006738:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800673c:	647b      	str	r3, [r7, #68]	; 0x44
 800673e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006740:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006744:	e841 2300 	strex	r3, r2, [r1]
 8006748:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800674a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1e4      	bne.n	800671a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3308      	adds	r3, #8
 8006756:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	e853 3f00 	ldrex	r3, [r3]
 800675e:	623b      	str	r3, [r7, #32]
   return(result);
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	f023 0301 	bic.w	r3, r3, #1
 8006766:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	3308      	adds	r3, #8
 8006770:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006774:	633a      	str	r2, [r7, #48]	; 0x30
 8006776:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006778:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800677a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800677c:	e841 2300 	strex	r3, r2, [r1]
 8006780:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1e3      	bne.n	8006750 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2220      	movs	r2, #32
 800678c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	e853 3f00 	ldrex	r3, [r3]
 80067a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0310 	bic.w	r3, r3, #16
 80067ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067bc:	61fb      	str	r3, [r7, #28]
 80067be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c0:	69b9      	ldr	r1, [r7, #24]
 80067c2:	69fa      	ldr	r2, [r7, #28]
 80067c4:	e841 2300 	strex	r3, r2, [r1]
 80067c8:	617b      	str	r3, [r7, #20]
   return(result);
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e4      	bne.n	800679a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067d4:	4619      	mov	r1, r3
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f85c 	bl	8006894 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067dc:	e03f      	b.n	800685e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80067de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00e      	beq.n	8006808 <HAL_UART_IRQHandler+0x560>
 80067ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d008      	beq.n	8006808 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80067fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 ff88 	bl	8007716 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006806:	e02d      	b.n	8006864 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800680c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00e      	beq.n	8006832 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800681c:	2b00      	cmp	r3, #0
 800681e:	d008      	beq.n	8006832 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006824:	2b00      	cmp	r3, #0
 8006826:	d01c      	beq.n	8006862 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	4798      	blx	r3
    }
    return;
 8006830:	e017      	b.n	8006862 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800683a:	2b00      	cmp	r3, #0
 800683c:	d012      	beq.n	8006864 <HAL_UART_IRQHandler+0x5bc>
 800683e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00c      	beq.n	8006864 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fdd9 	bl	8007402 <UART_EndTransmit_IT>
    return;
 8006850:	e008      	b.n	8006864 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006852:	bf00      	nop
 8006854:	e006      	b.n	8006864 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006856:	bf00      	nop
 8006858:	e004      	b.n	8006864 <HAL_UART_IRQHandler+0x5bc>
      return;
 800685a:	bf00      	nop
 800685c:	e002      	b.n	8006864 <HAL_UART_IRQHandler+0x5bc>
      return;
 800685e:	bf00      	nop
 8006860:	e000      	b.n	8006864 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006862:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006864:	37e8      	adds	r7, #232	; 0xe8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop

0800686c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068b0:	b08a      	sub	sp, #40	; 0x28
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	431a      	orrs	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	431a      	orrs	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	4ba4      	ldr	r3, [pc, #656]	; (8006b6c <UART_SetConfig+0x2c0>)
 80068dc:	4013      	ands	r3, r2
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	6812      	ldr	r2, [r2, #0]
 80068e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068e4:	430b      	orrs	r3, r1
 80068e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a99      	ldr	r2, [pc, #612]	; (8006b70 <UART_SetConfig+0x2c4>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d004      	beq.n	8006918 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006914:	4313      	orrs	r3, r2
 8006916:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006928:	430a      	orrs	r2, r1
 800692a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a90      	ldr	r2, [pc, #576]	; (8006b74 <UART_SetConfig+0x2c8>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d126      	bne.n	8006984 <UART_SetConfig+0xd8>
 8006936:	4b90      	ldr	r3, [pc, #576]	; (8006b78 <UART_SetConfig+0x2cc>)
 8006938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800693c:	f003 0303 	and.w	r3, r3, #3
 8006940:	2b03      	cmp	r3, #3
 8006942:	d81b      	bhi.n	800697c <UART_SetConfig+0xd0>
 8006944:	a201      	add	r2, pc, #4	; (adr r2, 800694c <UART_SetConfig+0xa0>)
 8006946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694a:	bf00      	nop
 800694c:	0800695d 	.word	0x0800695d
 8006950:	0800696d 	.word	0x0800696d
 8006954:	08006965 	.word	0x08006965
 8006958:	08006975 	.word	0x08006975
 800695c:	2301      	movs	r3, #1
 800695e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006962:	e116      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006964:	2302      	movs	r3, #2
 8006966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800696a:	e112      	b.n	8006b92 <UART_SetConfig+0x2e6>
 800696c:	2304      	movs	r3, #4
 800696e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006972:	e10e      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006974:	2308      	movs	r3, #8
 8006976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800697a:	e10a      	b.n	8006b92 <UART_SetConfig+0x2e6>
 800697c:	2310      	movs	r3, #16
 800697e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006982:	e106      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a7c      	ldr	r2, [pc, #496]	; (8006b7c <UART_SetConfig+0x2d0>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d138      	bne.n	8006a00 <UART_SetConfig+0x154>
 800698e:	4b7a      	ldr	r3, [pc, #488]	; (8006b78 <UART_SetConfig+0x2cc>)
 8006990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006994:	f003 030c 	and.w	r3, r3, #12
 8006998:	2b0c      	cmp	r3, #12
 800699a:	d82d      	bhi.n	80069f8 <UART_SetConfig+0x14c>
 800699c:	a201      	add	r2, pc, #4	; (adr r2, 80069a4 <UART_SetConfig+0xf8>)
 800699e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a2:	bf00      	nop
 80069a4:	080069d9 	.word	0x080069d9
 80069a8:	080069f9 	.word	0x080069f9
 80069ac:	080069f9 	.word	0x080069f9
 80069b0:	080069f9 	.word	0x080069f9
 80069b4:	080069e9 	.word	0x080069e9
 80069b8:	080069f9 	.word	0x080069f9
 80069bc:	080069f9 	.word	0x080069f9
 80069c0:	080069f9 	.word	0x080069f9
 80069c4:	080069e1 	.word	0x080069e1
 80069c8:	080069f9 	.word	0x080069f9
 80069cc:	080069f9 	.word	0x080069f9
 80069d0:	080069f9 	.word	0x080069f9
 80069d4:	080069f1 	.word	0x080069f1
 80069d8:	2300      	movs	r3, #0
 80069da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069de:	e0d8      	b.n	8006b92 <UART_SetConfig+0x2e6>
 80069e0:	2302      	movs	r3, #2
 80069e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e6:	e0d4      	b.n	8006b92 <UART_SetConfig+0x2e6>
 80069e8:	2304      	movs	r3, #4
 80069ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ee:	e0d0      	b.n	8006b92 <UART_SetConfig+0x2e6>
 80069f0:	2308      	movs	r3, #8
 80069f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069f6:	e0cc      	b.n	8006b92 <UART_SetConfig+0x2e6>
 80069f8:	2310      	movs	r3, #16
 80069fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069fe:	e0c8      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a5e      	ldr	r2, [pc, #376]	; (8006b80 <UART_SetConfig+0x2d4>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d125      	bne.n	8006a56 <UART_SetConfig+0x1aa>
 8006a0a:	4b5b      	ldr	r3, [pc, #364]	; (8006b78 <UART_SetConfig+0x2cc>)
 8006a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a14:	2b30      	cmp	r3, #48	; 0x30
 8006a16:	d016      	beq.n	8006a46 <UART_SetConfig+0x19a>
 8006a18:	2b30      	cmp	r3, #48	; 0x30
 8006a1a:	d818      	bhi.n	8006a4e <UART_SetConfig+0x1a2>
 8006a1c:	2b20      	cmp	r3, #32
 8006a1e:	d00a      	beq.n	8006a36 <UART_SetConfig+0x18a>
 8006a20:	2b20      	cmp	r3, #32
 8006a22:	d814      	bhi.n	8006a4e <UART_SetConfig+0x1a2>
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d002      	beq.n	8006a2e <UART_SetConfig+0x182>
 8006a28:	2b10      	cmp	r3, #16
 8006a2a:	d008      	beq.n	8006a3e <UART_SetConfig+0x192>
 8006a2c:	e00f      	b.n	8006a4e <UART_SetConfig+0x1a2>
 8006a2e:	2300      	movs	r3, #0
 8006a30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a34:	e0ad      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a36:	2302      	movs	r3, #2
 8006a38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a3c:	e0a9      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a3e:	2304      	movs	r3, #4
 8006a40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a44:	e0a5      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a46:	2308      	movs	r3, #8
 8006a48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a4c:	e0a1      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a4e:	2310      	movs	r3, #16
 8006a50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a54:	e09d      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a4a      	ldr	r2, [pc, #296]	; (8006b84 <UART_SetConfig+0x2d8>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d125      	bne.n	8006aac <UART_SetConfig+0x200>
 8006a60:	4b45      	ldr	r3, [pc, #276]	; (8006b78 <UART_SetConfig+0x2cc>)
 8006a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a6a:	2bc0      	cmp	r3, #192	; 0xc0
 8006a6c:	d016      	beq.n	8006a9c <UART_SetConfig+0x1f0>
 8006a6e:	2bc0      	cmp	r3, #192	; 0xc0
 8006a70:	d818      	bhi.n	8006aa4 <UART_SetConfig+0x1f8>
 8006a72:	2b80      	cmp	r3, #128	; 0x80
 8006a74:	d00a      	beq.n	8006a8c <UART_SetConfig+0x1e0>
 8006a76:	2b80      	cmp	r3, #128	; 0x80
 8006a78:	d814      	bhi.n	8006aa4 <UART_SetConfig+0x1f8>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d002      	beq.n	8006a84 <UART_SetConfig+0x1d8>
 8006a7e:	2b40      	cmp	r3, #64	; 0x40
 8006a80:	d008      	beq.n	8006a94 <UART_SetConfig+0x1e8>
 8006a82:	e00f      	b.n	8006aa4 <UART_SetConfig+0x1f8>
 8006a84:	2300      	movs	r3, #0
 8006a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a8a:	e082      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a92:	e07e      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a94:	2304      	movs	r3, #4
 8006a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a9a:	e07a      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a9c:	2308      	movs	r3, #8
 8006a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aa2:	e076      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006aa4:	2310      	movs	r3, #16
 8006aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aaa:	e072      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a35      	ldr	r2, [pc, #212]	; (8006b88 <UART_SetConfig+0x2dc>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d12a      	bne.n	8006b0c <UART_SetConfig+0x260>
 8006ab6:	4b30      	ldr	r3, [pc, #192]	; (8006b78 <UART_SetConfig+0x2cc>)
 8006ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006abc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ac0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ac4:	d01a      	beq.n	8006afc <UART_SetConfig+0x250>
 8006ac6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aca:	d81b      	bhi.n	8006b04 <UART_SetConfig+0x258>
 8006acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ad0:	d00c      	beq.n	8006aec <UART_SetConfig+0x240>
 8006ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ad6:	d815      	bhi.n	8006b04 <UART_SetConfig+0x258>
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <UART_SetConfig+0x238>
 8006adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ae0:	d008      	beq.n	8006af4 <UART_SetConfig+0x248>
 8006ae2:	e00f      	b.n	8006b04 <UART_SetConfig+0x258>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aea:	e052      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006aec:	2302      	movs	r3, #2
 8006aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006af2:	e04e      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006af4:	2304      	movs	r3, #4
 8006af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006afa:	e04a      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006afc:	2308      	movs	r3, #8
 8006afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b02:	e046      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006b04:	2310      	movs	r3, #16
 8006b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b0a:	e042      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a17      	ldr	r2, [pc, #92]	; (8006b70 <UART_SetConfig+0x2c4>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d13a      	bne.n	8006b8c <UART_SetConfig+0x2e0>
 8006b16:	4b18      	ldr	r3, [pc, #96]	; (8006b78 <UART_SetConfig+0x2cc>)
 8006b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b24:	d01a      	beq.n	8006b5c <UART_SetConfig+0x2b0>
 8006b26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b2a:	d81b      	bhi.n	8006b64 <UART_SetConfig+0x2b8>
 8006b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b30:	d00c      	beq.n	8006b4c <UART_SetConfig+0x2a0>
 8006b32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b36:	d815      	bhi.n	8006b64 <UART_SetConfig+0x2b8>
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d003      	beq.n	8006b44 <UART_SetConfig+0x298>
 8006b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b40:	d008      	beq.n	8006b54 <UART_SetConfig+0x2a8>
 8006b42:	e00f      	b.n	8006b64 <UART_SetConfig+0x2b8>
 8006b44:	2300      	movs	r3, #0
 8006b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b4a:	e022      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b52:	e01e      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006b54:	2304      	movs	r3, #4
 8006b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b5a:	e01a      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006b5c:	2308      	movs	r3, #8
 8006b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b62:	e016      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006b64:	2310      	movs	r3, #16
 8006b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b6a:	e012      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006b6c:	efff69f3 	.word	0xefff69f3
 8006b70:	40008000 	.word	0x40008000
 8006b74:	40013800 	.word	0x40013800
 8006b78:	40021000 	.word	0x40021000
 8006b7c:	40004400 	.word	0x40004400
 8006b80:	40004800 	.word	0x40004800
 8006b84:	40004c00 	.word	0x40004c00
 8006b88:	40005000 	.word	0x40005000
 8006b8c:	2310      	movs	r3, #16
 8006b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a9f      	ldr	r2, [pc, #636]	; (8006e14 <UART_SetConfig+0x568>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d17a      	bne.n	8006c92 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ba0:	2b08      	cmp	r3, #8
 8006ba2:	d824      	bhi.n	8006bee <UART_SetConfig+0x342>
 8006ba4:	a201      	add	r2, pc, #4	; (adr r2, 8006bac <UART_SetConfig+0x300>)
 8006ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006baa:	bf00      	nop
 8006bac:	08006bd1 	.word	0x08006bd1
 8006bb0:	08006bef 	.word	0x08006bef
 8006bb4:	08006bd9 	.word	0x08006bd9
 8006bb8:	08006bef 	.word	0x08006bef
 8006bbc:	08006bdf 	.word	0x08006bdf
 8006bc0:	08006bef 	.word	0x08006bef
 8006bc4:	08006bef 	.word	0x08006bef
 8006bc8:	08006bef 	.word	0x08006bef
 8006bcc:	08006be7 	.word	0x08006be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bd0:	f7fd fd9c 	bl	800470c <HAL_RCC_GetPCLK1Freq>
 8006bd4:	61f8      	str	r0, [r7, #28]
        break;
 8006bd6:	e010      	b.n	8006bfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bd8:	4b8f      	ldr	r3, [pc, #572]	; (8006e18 <UART_SetConfig+0x56c>)
 8006bda:	61fb      	str	r3, [r7, #28]
        break;
 8006bdc:	e00d      	b.n	8006bfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bde:	f7fd fcfd 	bl	80045dc <HAL_RCC_GetSysClockFreq>
 8006be2:	61f8      	str	r0, [r7, #28]
        break;
 8006be4:	e009      	b.n	8006bfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bea:	61fb      	str	r3, [r7, #28]
        break;
 8006bec:	e005      	b.n	8006bfa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006bf8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f000 80fb 	beq.w	8006df8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	4613      	mov	r3, r2
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	4413      	add	r3, r2
 8006c0c:	69fa      	ldr	r2, [r7, #28]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d305      	bcc.n	8006c1e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c18:	69fa      	ldr	r2, [r7, #28]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d903      	bls.n	8006c26 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c24:	e0e8      	b.n	8006df8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	461c      	mov	r4, r3
 8006c2c:	4615      	mov	r5, r2
 8006c2e:	f04f 0200 	mov.w	r2, #0
 8006c32:	f04f 0300 	mov.w	r3, #0
 8006c36:	022b      	lsls	r3, r5, #8
 8006c38:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006c3c:	0222      	lsls	r2, r4, #8
 8006c3e:	68f9      	ldr	r1, [r7, #12]
 8006c40:	6849      	ldr	r1, [r1, #4]
 8006c42:	0849      	lsrs	r1, r1, #1
 8006c44:	2000      	movs	r0, #0
 8006c46:	4688      	mov	r8, r1
 8006c48:	4681      	mov	r9, r0
 8006c4a:	eb12 0a08 	adds.w	sl, r2, r8
 8006c4e:	eb43 0b09 	adc.w	fp, r3, r9
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	603b      	str	r3, [r7, #0]
 8006c5a:	607a      	str	r2, [r7, #4]
 8006c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c60:	4650      	mov	r0, sl
 8006c62:	4659      	mov	r1, fp
 8006c64:	f7f9 fb0c 	bl	8000280 <__aeabi_uldivmod>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c76:	d308      	bcc.n	8006c8a <UART_SetConfig+0x3de>
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c7e:	d204      	bcs.n	8006c8a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	69ba      	ldr	r2, [r7, #24]
 8006c86:	60da      	str	r2, [r3, #12]
 8006c88:	e0b6      	b.n	8006df8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c90:	e0b2      	b.n	8006df8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c9a:	d15e      	bne.n	8006d5a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006c9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d828      	bhi.n	8006cf6 <UART_SetConfig+0x44a>
 8006ca4:	a201      	add	r2, pc, #4	; (adr r2, 8006cac <UART_SetConfig+0x400>)
 8006ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006caa:	bf00      	nop
 8006cac:	08006cd1 	.word	0x08006cd1
 8006cb0:	08006cd9 	.word	0x08006cd9
 8006cb4:	08006ce1 	.word	0x08006ce1
 8006cb8:	08006cf7 	.word	0x08006cf7
 8006cbc:	08006ce7 	.word	0x08006ce7
 8006cc0:	08006cf7 	.word	0x08006cf7
 8006cc4:	08006cf7 	.word	0x08006cf7
 8006cc8:	08006cf7 	.word	0x08006cf7
 8006ccc:	08006cef 	.word	0x08006cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cd0:	f7fd fd1c 	bl	800470c <HAL_RCC_GetPCLK1Freq>
 8006cd4:	61f8      	str	r0, [r7, #28]
        break;
 8006cd6:	e014      	b.n	8006d02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cd8:	f7fd fd2e 	bl	8004738 <HAL_RCC_GetPCLK2Freq>
 8006cdc:	61f8      	str	r0, [r7, #28]
        break;
 8006cde:	e010      	b.n	8006d02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ce0:	4b4d      	ldr	r3, [pc, #308]	; (8006e18 <UART_SetConfig+0x56c>)
 8006ce2:	61fb      	str	r3, [r7, #28]
        break;
 8006ce4:	e00d      	b.n	8006d02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ce6:	f7fd fc79 	bl	80045dc <HAL_RCC_GetSysClockFreq>
 8006cea:	61f8      	str	r0, [r7, #28]
        break;
 8006cec:	e009      	b.n	8006d02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cf2:	61fb      	str	r3, [r7, #28]
        break;
 8006cf4:	e005      	b.n	8006d02 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d077      	beq.n	8006df8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	005a      	lsls	r2, r3, #1
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	085b      	lsrs	r3, r3, #1
 8006d12:	441a      	add	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	2b0f      	cmp	r3, #15
 8006d22:	d916      	bls.n	8006d52 <UART_SetConfig+0x4a6>
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d2a:	d212      	bcs.n	8006d52 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	f023 030f 	bic.w	r3, r3, #15
 8006d34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	085b      	lsrs	r3, r3, #1
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	f003 0307 	and.w	r3, r3, #7
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	8afb      	ldrh	r3, [r7, #22]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	8afa      	ldrh	r2, [r7, #22]
 8006d4e:	60da      	str	r2, [r3, #12]
 8006d50:	e052      	b.n	8006df8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d58:	e04e      	b.n	8006df8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d5e:	2b08      	cmp	r3, #8
 8006d60:	d827      	bhi.n	8006db2 <UART_SetConfig+0x506>
 8006d62:	a201      	add	r2, pc, #4	; (adr r2, 8006d68 <UART_SetConfig+0x4bc>)
 8006d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d68:	08006d8d 	.word	0x08006d8d
 8006d6c:	08006d95 	.word	0x08006d95
 8006d70:	08006d9d 	.word	0x08006d9d
 8006d74:	08006db3 	.word	0x08006db3
 8006d78:	08006da3 	.word	0x08006da3
 8006d7c:	08006db3 	.word	0x08006db3
 8006d80:	08006db3 	.word	0x08006db3
 8006d84:	08006db3 	.word	0x08006db3
 8006d88:	08006dab 	.word	0x08006dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d8c:	f7fd fcbe 	bl	800470c <HAL_RCC_GetPCLK1Freq>
 8006d90:	61f8      	str	r0, [r7, #28]
        break;
 8006d92:	e014      	b.n	8006dbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d94:	f7fd fcd0 	bl	8004738 <HAL_RCC_GetPCLK2Freq>
 8006d98:	61f8      	str	r0, [r7, #28]
        break;
 8006d9a:	e010      	b.n	8006dbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d9c:	4b1e      	ldr	r3, [pc, #120]	; (8006e18 <UART_SetConfig+0x56c>)
 8006d9e:	61fb      	str	r3, [r7, #28]
        break;
 8006da0:	e00d      	b.n	8006dbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006da2:	f7fd fc1b 	bl	80045dc <HAL_RCC_GetSysClockFreq>
 8006da6:	61f8      	str	r0, [r7, #28]
        break;
 8006da8:	e009      	b.n	8006dbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dae:	61fb      	str	r3, [r7, #28]
        break;
 8006db0:	e005      	b.n	8006dbe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006dbc:	bf00      	nop
    }

    if (pclk != 0U)
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d019      	beq.n	8006df8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	085a      	lsrs	r2, r3, #1
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	441a      	add	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	2b0f      	cmp	r3, #15
 8006ddc:	d909      	bls.n	8006df2 <UART_SetConfig+0x546>
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006de4:	d205      	bcs.n	8006df2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	60da      	str	r2, [r3, #12]
 8006df0:	e002      	b.n	8006df8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006e04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3728      	adds	r7, #40	; 0x28
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e12:	bf00      	nop
 8006e14:	40008000 	.word	0x40008000
 8006e18:	00f42400 	.word	0x00f42400

08006e1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00a      	beq.n	8006e46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4a:	f003 0302 	and.w	r3, r3, #2
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00a      	beq.n	8006e68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	430a      	orrs	r2, r1
 8006e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6c:	f003 0304 	and.w	r3, r3, #4
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00a      	beq.n	8006e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8e:	f003 0308 	and.w	r3, r3, #8
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00a      	beq.n	8006eac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb0:	f003 0310 	and.w	r3, r3, #16
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00a      	beq.n	8006ece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed2:	f003 0320 	and.w	r3, r3, #32
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	430a      	orrs	r2, r1
 8006eee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d01a      	beq.n	8006f32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f1a:	d10a      	bne.n	8006f32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	430a      	orrs	r2, r1
 8006f52:	605a      	str	r2, [r3, #4]
  }
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af02      	add	r7, sp, #8
 8006f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f70:	f7fb f83a 	bl	8001fe8 <HAL_GetTick>
 8006f74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0308 	and.w	r3, r3, #8
 8006f80:	2b08      	cmp	r3, #8
 8006f82:	d10e      	bne.n	8006fa2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f82d 	bl	8006ff2 <UART_WaitOnFlagUntilTimeout>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e023      	b.n	8006fea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0304 	and.w	r3, r3, #4
 8006fac:	2b04      	cmp	r3, #4
 8006fae:	d10e      	bne.n	8006fce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f817 	bl	8006ff2 <UART_WaitOnFlagUntilTimeout>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d001      	beq.n	8006fce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e00d      	b.n	8006fea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2220      	movs	r2, #32
 8006fd2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b09c      	sub	sp, #112	; 0x70
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	60f8      	str	r0, [r7, #12]
 8006ffa:	60b9      	str	r1, [r7, #8]
 8006ffc:	603b      	str	r3, [r7, #0]
 8006ffe:	4613      	mov	r3, r2
 8007000:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007002:	e0a5      	b.n	8007150 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700a:	f000 80a1 	beq.w	8007150 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800700e:	f7fa ffeb 	bl	8001fe8 <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800701a:	429a      	cmp	r2, r3
 800701c:	d302      	bcc.n	8007024 <UART_WaitOnFlagUntilTimeout+0x32>
 800701e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007020:	2b00      	cmp	r3, #0
 8007022:	d13e      	bne.n	80070a2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800702c:	e853 3f00 	ldrex	r3, [r3]
 8007030:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007034:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007038:	667b      	str	r3, [r7, #100]	; 0x64
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	461a      	mov	r2, r3
 8007040:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007042:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007044:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007046:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007048:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800704a:	e841 2300 	strex	r3, r2, [r1]
 800704e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1e6      	bne.n	8007024 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3308      	adds	r3, #8
 800705c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007060:	e853 3f00 	ldrex	r3, [r3]
 8007064:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007068:	f023 0301 	bic.w	r3, r3, #1
 800706c:	663b      	str	r3, [r7, #96]	; 0x60
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3308      	adds	r3, #8
 8007074:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007076:	64ba      	str	r2, [r7, #72]	; 0x48
 8007078:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800707c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800707e:	e841 2300 	strex	r3, r2, [r1]
 8007082:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1e5      	bne.n	8007056 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2220      	movs	r2, #32
 800708e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2220      	movs	r2, #32
 8007094:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e067      	b.n	8007172 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0304 	and.w	r3, r3, #4
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d04f      	beq.n	8007150 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070be:	d147      	bne.n	8007150 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070c8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	461a      	mov	r2, r3
 80070e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e8:	637b      	str	r3, [r7, #52]	; 0x34
 80070ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070f0:	e841 2300 	strex	r3, r2, [r1]
 80070f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e6      	bne.n	80070ca <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3308      	adds	r3, #8
 8007102:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	e853 3f00 	ldrex	r3, [r3]
 800710a:	613b      	str	r3, [r7, #16]
   return(result);
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	f023 0301 	bic.w	r3, r3, #1
 8007112:	66bb      	str	r3, [r7, #104]	; 0x68
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	3308      	adds	r3, #8
 800711a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800711c:	623a      	str	r2, [r7, #32]
 800711e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007120:	69f9      	ldr	r1, [r7, #28]
 8007122:	6a3a      	ldr	r2, [r7, #32]
 8007124:	e841 2300 	strex	r3, r2, [r1]
 8007128:	61bb      	str	r3, [r7, #24]
   return(result);
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1e5      	bne.n	80070fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2220      	movs	r2, #32
 8007134:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2220      	movs	r2, #32
 800713a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2220      	movs	r2, #32
 8007140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e010      	b.n	8007172 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	69da      	ldr	r2, [r3, #28]
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	4013      	ands	r3, r2
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	429a      	cmp	r2, r3
 800715e:	bf0c      	ite	eq
 8007160:	2301      	moveq	r3, #1
 8007162:	2300      	movne	r3, #0
 8007164:	b2db      	uxtb	r3, r3
 8007166:	461a      	mov	r2, r3
 8007168:	79fb      	ldrb	r3, [r7, #7]
 800716a:	429a      	cmp	r2, r3
 800716c:	f43f af4a 	beq.w	8007004 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3770      	adds	r7, #112	; 0x70
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
	...

0800717c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800717c:	b480      	push	{r7}
 800717e:	b097      	sub	sp, #92	; 0x5c
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	4613      	mov	r3, r2
 8007188:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	88fa      	ldrh	r2, [r7, #6]
 8007194:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	88fa      	ldrh	r2, [r7, #6]
 800719c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ae:	d10e      	bne.n	80071ce <UART_Start_Receive_IT+0x52>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d105      	bne.n	80071c4 <UART_Start_Receive_IT+0x48>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 80071be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071c2:	e02d      	b.n	8007220 <UART_Start_Receive_IT+0xa4>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	22ff      	movs	r2, #255	; 0xff
 80071c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071cc:	e028      	b.n	8007220 <UART_Start_Receive_IT+0xa4>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10d      	bne.n	80071f2 <UART_Start_Receive_IT+0x76>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d104      	bne.n	80071e8 <UART_Start_Receive_IT+0x6c>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	22ff      	movs	r2, #255	; 0xff
 80071e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071e6:	e01b      	b.n	8007220 <UART_Start_Receive_IT+0xa4>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	227f      	movs	r2, #127	; 0x7f
 80071ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071f0:	e016      	b.n	8007220 <UART_Start_Receive_IT+0xa4>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071fa:	d10d      	bne.n	8007218 <UART_Start_Receive_IT+0x9c>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d104      	bne.n	800720e <UART_Start_Receive_IT+0x92>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	227f      	movs	r2, #127	; 0x7f
 8007208:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800720c:	e008      	b.n	8007220 <UART_Start_Receive_IT+0xa4>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	223f      	movs	r2, #63	; 0x3f
 8007212:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007216:	e003      	b.n	8007220 <UART_Start_Receive_IT+0xa4>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2222      	movs	r2, #34	; 0x22
 800722c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	3308      	adds	r3, #8
 8007234:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007238:	e853 3f00 	ldrex	r3, [r3]
 800723c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800723e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007240:	f043 0301 	orr.w	r3, r3, #1
 8007244:	657b      	str	r3, [r7, #84]	; 0x54
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	3308      	adds	r3, #8
 800724c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800724e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007250:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007252:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007254:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007256:	e841 2300 	strex	r3, r2, [r1]
 800725a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800725c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1e5      	bne.n	800722e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800726a:	d107      	bne.n	800727c <UART_Start_Receive_IT+0x100>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d103      	bne.n	800727c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4a24      	ldr	r2, [pc, #144]	; (8007308 <UART_Start_Receive_IT+0x18c>)
 8007278:	665a      	str	r2, [r3, #100]	; 0x64
 800727a:	e002      	b.n	8007282 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4a23      	ldr	r2, [pc, #140]	; (800730c <UART_Start_Receive_IT+0x190>)
 8007280:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d019      	beq.n	80072c6 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729a:	e853 3f00 	ldrex	r3, [r3]
 800729e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80072a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	461a      	mov	r2, r3
 80072ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072b0:	637b      	str	r3, [r7, #52]	; 0x34
 80072b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072b8:	e841 2300 	strex	r3, r2, [r1]
 80072bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1e6      	bne.n	8007292 <UART_Start_Receive_IT+0x116>
 80072c4:	e018      	b.n	80072f8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	e853 3f00 	ldrex	r3, [r3]
 80072d2:	613b      	str	r3, [r7, #16]
   return(result);
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	f043 0320 	orr.w	r3, r3, #32
 80072da:	653b      	str	r3, [r7, #80]	; 0x50
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	461a      	mov	r2, r3
 80072e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072e4:	623b      	str	r3, [r7, #32]
 80072e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e8:	69f9      	ldr	r1, [r7, #28]
 80072ea:	6a3a      	ldr	r2, [r7, #32]
 80072ec:	e841 2300 	strex	r3, r2, [r1]
 80072f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1e6      	bne.n	80072c6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	375c      	adds	r7, #92	; 0x5c
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	080075b7 	.word	0x080075b7
 800730c:	08007457 	.word	0x08007457

08007310 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007310:	b480      	push	{r7}
 8007312:	b095      	sub	sp, #84	; 0x54
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007320:	e853 3f00 	ldrex	r3, [r3]
 8007324:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800732c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	461a      	mov	r2, r3
 8007334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007336:	643b      	str	r3, [r7, #64]	; 0x40
 8007338:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800733c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800733e:	e841 2300 	strex	r3, r2, [r1]
 8007342:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1e6      	bne.n	8007318 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3308      	adds	r3, #8
 8007350:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	e853 3f00 	ldrex	r3, [r3]
 8007358:	61fb      	str	r3, [r7, #28]
   return(result);
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	f023 0301 	bic.w	r3, r3, #1
 8007360:	64bb      	str	r3, [r7, #72]	; 0x48
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3308      	adds	r3, #8
 8007368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800736a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800736c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007372:	e841 2300 	strex	r3, r2, [r1]
 8007376:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1e5      	bne.n	800734a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007382:	2b01      	cmp	r3, #1
 8007384:	d118      	bne.n	80073b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	e853 3f00 	ldrex	r3, [r3]
 8007392:	60bb      	str	r3, [r7, #8]
   return(result);
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	f023 0310 	bic.w	r3, r3, #16
 800739a:	647b      	str	r3, [r7, #68]	; 0x44
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	461a      	mov	r2, r3
 80073a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073a4:	61bb      	str	r3, [r7, #24]
 80073a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a8:	6979      	ldr	r1, [r7, #20]
 80073aa:	69ba      	ldr	r2, [r7, #24]
 80073ac:	e841 2300 	strex	r3, r2, [r1]
 80073b0:	613b      	str	r3, [r7, #16]
   return(result);
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1e6      	bne.n	8007386 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2220      	movs	r2, #32
 80073bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80073ca:	bf00      	nop
 80073cc:	3754      	adds	r7, #84	; 0x54
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f7ff fa43 	bl	8006880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073fa:	bf00      	nop
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b088      	sub	sp, #32
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	e853 3f00 	ldrex	r3, [r3]
 8007416:	60bb      	str	r3, [r7, #8]
   return(result);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800741e:	61fb      	str	r3, [r7, #28]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	461a      	mov	r2, r3
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	61bb      	str	r3, [r7, #24]
 800742a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	6979      	ldr	r1, [r7, #20]
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	e841 2300 	strex	r3, r2, [r1]
 8007434:	613b      	str	r3, [r7, #16]
   return(result);
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e6      	bne.n	800740a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2220      	movs	r2, #32
 8007440:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f7ff fa0f 	bl	800686c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800744e:	bf00      	nop
 8007450:	3720      	adds	r7, #32
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b096      	sub	sp, #88	; 0x58
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007464:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800746c:	2b22      	cmp	r3, #34	; 0x22
 800746e:	f040 8094 	bne.w	800759a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007478:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800747c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007480:	b2d9      	uxtb	r1, r3
 8007482:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007486:	b2da      	uxtb	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800748c:	400a      	ands	r2, r1
 800748e:	b2d2      	uxtb	r2, r2
 8007490:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007496:	1c5a      	adds	r2, r3, #1
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	3b01      	subs	r3, #1
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d179      	bne.n	80075ae <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c2:	e853 3f00 	ldrex	r3, [r3]
 80074c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074ce:	653b      	str	r3, [r7, #80]	; 0x50
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	461a      	mov	r2, r3
 80074d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074d8:	647b      	str	r3, [r7, #68]	; 0x44
 80074da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074e0:	e841 2300 	strex	r3, r2, [r1]
 80074e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1e6      	bne.n	80074ba <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	3308      	adds	r3, #8
 80074f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f6:	e853 3f00 	ldrex	r3, [r3]
 80074fa:	623b      	str	r3, [r7, #32]
   return(result);
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	f023 0301 	bic.w	r3, r3, #1
 8007502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3308      	adds	r3, #8
 800750a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800750c:	633a      	str	r2, [r7, #48]	; 0x30
 800750e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007510:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007514:	e841 2300 	strex	r3, r2, [r1]
 8007518:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800751a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1e5      	bne.n	80074ec <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2220      	movs	r2, #32
 8007524:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007530:	2b01      	cmp	r3, #1
 8007532:	d12e      	bne.n	8007592 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	e853 3f00 	ldrex	r3, [r3]
 8007546:	60fb      	str	r3, [r7, #12]
   return(result);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f023 0310 	bic.w	r3, r3, #16
 800754e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	461a      	mov	r2, r3
 8007556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007558:	61fb      	str	r3, [r7, #28]
 800755a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755c:	69b9      	ldr	r1, [r7, #24]
 800755e:	69fa      	ldr	r2, [r7, #28]
 8007560:	e841 2300 	strex	r3, r2, [r1]
 8007564:	617b      	str	r3, [r7, #20]
   return(result);
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1e6      	bne.n	800753a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	69db      	ldr	r3, [r3, #28]
 8007572:	f003 0310 	and.w	r3, r3, #16
 8007576:	2b10      	cmp	r3, #16
 8007578:	d103      	bne.n	8007582 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2210      	movs	r2, #16
 8007580:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007588:	4619      	mov	r1, r3
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7ff f982 	bl	8006894 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007590:	e00d      	b.n	80075ae <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7f9 fd18 	bl	8000fc8 <HAL_UART_RxCpltCallback>
}
 8007598:	e009      	b.n	80075ae <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	8b1b      	ldrh	r3, [r3, #24]
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f042 0208 	orr.w	r2, r2, #8
 80075aa:	b292      	uxth	r2, r2
 80075ac:	831a      	strh	r2, [r3, #24]
}
 80075ae:	bf00      	nop
 80075b0:	3758      	adds	r7, #88	; 0x58
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b096      	sub	sp, #88	; 0x58
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80075c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075cc:	2b22      	cmp	r3, #34	; 0x22
 80075ce:	f040 8094 	bne.w	80076fa <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80075d8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80075e2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80075e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80075ea:	4013      	ands	r3, r2
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075f0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f6:	1c9a      	adds	r2, r3, #2
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007602:	b29b      	uxth	r3, r3
 8007604:	3b01      	subs	r3, #1
 8007606:	b29a      	uxth	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007614:	b29b      	uxth	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d179      	bne.n	800770e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007622:	e853 3f00 	ldrex	r3, [r3]
 8007626:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800762e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	461a      	mov	r2, r3
 8007636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007638:	643b      	str	r3, [r7, #64]	; 0x40
 800763a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800763e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007640:	e841 2300 	strex	r3, r2, [r1]
 8007644:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1e6      	bne.n	800761a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	3308      	adds	r3, #8
 8007652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	e853 3f00 	ldrex	r3, [r3]
 800765a:	61fb      	str	r3, [r7, #28]
   return(result);
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	f023 0301 	bic.w	r3, r3, #1
 8007662:	64bb      	str	r3, [r7, #72]	; 0x48
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	3308      	adds	r3, #8
 800766a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800766c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800766e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007670:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007674:	e841 2300 	strex	r3, r2, [r1]
 8007678:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1e5      	bne.n	800764c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2220      	movs	r2, #32
 8007684:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007690:	2b01      	cmp	r3, #1
 8007692:	d12e      	bne.n	80076f2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	e853 3f00 	ldrex	r3, [r3]
 80076a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	f023 0310 	bic.w	r3, r3, #16
 80076ae:	647b      	str	r3, [r7, #68]	; 0x44
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	461a      	mov	r2, r3
 80076b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076b8:	61bb      	str	r3, [r7, #24]
 80076ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076bc:	6979      	ldr	r1, [r7, #20]
 80076be:	69ba      	ldr	r2, [r7, #24]
 80076c0:	e841 2300 	strex	r3, r2, [r1]
 80076c4:	613b      	str	r3, [r7, #16]
   return(result);
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1e6      	bne.n	800769a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	69db      	ldr	r3, [r3, #28]
 80076d2:	f003 0310 	and.w	r3, r3, #16
 80076d6:	2b10      	cmp	r3, #16
 80076d8:	d103      	bne.n	80076e2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2210      	movs	r2, #16
 80076e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7ff f8d2 	bl	8006894 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076f0:	e00d      	b.n	800770e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7f9 fc68 	bl	8000fc8 <HAL_UART_RxCpltCallback>
}
 80076f8:	e009      	b.n	800770e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	8b1b      	ldrh	r3, [r3, #24]
 8007700:	b29a      	uxth	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f042 0208 	orr.w	r2, r2, #8
 800770a:	b292      	uxth	r2, r2
 800770c:	831a      	strh	r2, [r3, #24]
}
 800770e:	bf00      	nop
 8007710:	3758      	adds	r7, #88	; 0x58
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800771e:	bf00      	nop
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800772a:	b084      	sub	sp, #16
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	f107 001c 	add.w	r0, r7, #28
 8007738:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fa6f 	bl	8007c2c <USB_CoreReset>
 800774e:	4603      	mov	r3, r0
 8007750:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007754:	2b00      	cmp	r3, #0
 8007756:	d106      	bne.n	8007766 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	639a      	str	r2, [r3, #56]	; 0x38
 8007764:	e005      	b.n	8007772 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007772:	7bfb      	ldrb	r3, [r7, #15]
}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800777e:	b004      	add	sp, #16
 8007780:	4770      	bx	lr

08007782 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007782:	b480      	push	{r7}
 8007784:	b083      	sub	sp, #12
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f023 0201 	bic.w	r2, r3, #1
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80077b0:	2300      	movs	r3, #0
 80077b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80077c0:	78fb      	ldrb	r3, [r7, #3]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d115      	bne.n	80077f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80077d2:	2001      	movs	r0, #1
 80077d4:	f7fa fc14 	bl	8002000 <HAL_Delay>
      ms++;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	3301      	adds	r3, #1
 80077dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fa16 	bl	8007c10 <USB_GetMode>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d01e      	beq.n	8007828 <USB_SetCurrentMode+0x84>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2b31      	cmp	r3, #49	; 0x31
 80077ee:	d9f0      	bls.n	80077d2 <USB_SetCurrentMode+0x2e>
 80077f0:	e01a      	b.n	8007828 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80077f2:	78fb      	ldrb	r3, [r7, #3]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d115      	bne.n	8007824 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007804:	2001      	movs	r0, #1
 8007806:	f7fa fbfb 	bl	8002000 <HAL_Delay>
      ms++;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	3301      	adds	r3, #1
 800780e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f9fd 	bl	8007c10 <USB_GetMode>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d005      	beq.n	8007828 <USB_SetCurrentMode+0x84>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2b31      	cmp	r3, #49	; 0x31
 8007820:	d9f0      	bls.n	8007804 <USB_SetCurrentMode+0x60>
 8007822:	e001      	b.n	8007828 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e005      	b.n	8007834 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2b32      	cmp	r3, #50	; 0x32
 800782c:	d101      	bne.n	8007832 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	e000      	b.n	8007834 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800783c:	b084      	sub	sp, #16
 800783e:	b580      	push	{r7, lr}
 8007840:	b086      	sub	sp, #24
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
 8007846:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800784a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007856:	2300      	movs	r3, #0
 8007858:	613b      	str	r3, [r7, #16]
 800785a:	e009      	b.n	8007870 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	3340      	adds	r3, #64	; 0x40
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4413      	add	r3, r2
 8007866:	2200      	movs	r2, #0
 8007868:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	3301      	adds	r3, #1
 800786e:	613b      	str	r3, [r7, #16]
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	2b0e      	cmp	r3, #14
 8007874:	d9f2      	bls.n	800785c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007878:	2b00      	cmp	r3, #0
 800787a:	d11c      	bne.n	80078b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800788a:	f043 0302 	orr.w	r3, r3, #2
 800788e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007894:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	601a      	str	r2, [r3, #0]
 80078b4:	e005      	b.n	80078c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078c8:	461a      	mov	r2, r3
 80078ca:	2300      	movs	r3, #0
 80078cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d4:	4619      	mov	r1, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078dc:	461a      	mov	r2, r3
 80078de:	680b      	ldr	r3, [r1, #0]
 80078e0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80078e2:	2103      	movs	r1, #3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f959 	bl	8007b9c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078ea:	2110      	movs	r1, #16
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f8f1 	bl	8007ad4 <USB_FlushTxFifo>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f91d 	bl	8007b3c <USB_FlushRxFifo>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d001      	beq.n	800790c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007912:	461a      	mov	r2, r3
 8007914:	2300      	movs	r3, #0
 8007916:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800791e:	461a      	mov	r2, r3
 8007920:	2300      	movs	r3, #0
 8007922:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800792a:	461a      	mov	r2, r3
 800792c:	2300      	movs	r3, #0
 800792e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007930:	2300      	movs	r3, #0
 8007932:	613b      	str	r3, [r7, #16]
 8007934:	e043      	b.n	80079be <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	4413      	add	r3, r2
 800793e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007948:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800794c:	d118      	bne.n	8007980 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10a      	bne.n	800796a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	4413      	add	r3, r2
 800795c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007960:	461a      	mov	r2, r3
 8007962:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	e013      	b.n	8007992 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	015a      	lsls	r2, r3, #5
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	4413      	add	r3, r2
 8007972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007976:	461a      	mov	r2, r3
 8007978:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800797c:	6013      	str	r3, [r2, #0]
 800797e:	e008      	b.n	8007992 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	015a      	lsls	r2, r3, #5
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4413      	add	r3, r2
 8007988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800798c:	461a      	mov	r2, r3
 800798e:	2300      	movs	r3, #0
 8007990:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	015a      	lsls	r2, r3, #5
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	4413      	add	r3, r2
 800799a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800799e:	461a      	mov	r2, r3
 80079a0:	2300      	movs	r3, #0
 80079a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	015a      	lsls	r2, r3, #5
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	4413      	add	r3, r2
 80079ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b0:	461a      	mov	r2, r3
 80079b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	3301      	adds	r3, #1
 80079bc:	613b      	str	r3, [r7, #16]
 80079be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d3b7      	bcc.n	8007936 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079c6:	2300      	movs	r3, #0
 80079c8:	613b      	str	r3, [r7, #16]
 80079ca:	e043      	b.n	8007a54 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079e2:	d118      	bne.n	8007a16 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10a      	bne.n	8007a00 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	015a      	lsls	r2, r3, #5
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	4413      	add	r3, r2
 80079f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f6:	461a      	mov	r2, r3
 80079f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80079fc:	6013      	str	r3, [r2, #0]
 80079fe:	e013      	b.n	8007a28 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	015a      	lsls	r2, r3, #5
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	4413      	add	r3, r2
 8007a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a12:	6013      	str	r3, [r2, #0]
 8007a14:	e008      	b.n	8007a28 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	015a      	lsls	r2, r3, #5
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a22:	461a      	mov	r2, r3
 8007a24:	2300      	movs	r3, #0
 8007a26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	015a      	lsls	r2, r3, #5
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	4413      	add	r3, r2
 8007a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a34:	461a      	mov	r2, r3
 8007a36:	2300      	movs	r3, #0
 8007a38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	015a      	lsls	r2, r3, #5
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a46:	461a      	mov	r2, r3
 8007a48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	3301      	adds	r3, #1
 8007a52:	613b      	str	r3, [r7, #16]
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d3b7      	bcc.n	80079cc <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007a7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	f043 0210 	orr.w	r2, r3, #16
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	699a      	ldr	r2, [r3, #24]
 8007a8e:	4b10      	ldr	r3, [pc, #64]	; (8007ad0 <USB_DevInit+0x294>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d005      	beq.n	8007aa8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	f043 0208 	orr.w	r2, r3, #8
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d107      	bne.n	8007abe <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ab6:	f043 0304 	orr.w	r3, r3, #4
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3718      	adds	r7, #24
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007aca:	b004      	add	sp, #16
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	803c3800 	.word	0x803c3800

08007ad4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	4a13      	ldr	r2, [pc, #76]	; (8007b38 <USB_FlushTxFifo+0x64>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d901      	bls.n	8007af4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007af0:	2303      	movs	r3, #3
 8007af2:	e01b      	b.n	8007b2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	daf2      	bge.n	8007ae2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007afc:	2300      	movs	r3, #0
 8007afe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	019b      	lsls	r3, r3, #6
 8007b04:	f043 0220 	orr.w	r2, r3, #32
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	4a08      	ldr	r2, [pc, #32]	; (8007b38 <USB_FlushTxFifo+0x64>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d901      	bls.n	8007b1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e006      	b.n	8007b2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	f003 0320 	and.w	r3, r3, #32
 8007b26:	2b20      	cmp	r3, #32
 8007b28:	d0f0      	beq.n	8007b0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3714      	adds	r7, #20
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	00030d40 	.word	0x00030d40

08007b3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	4a11      	ldr	r2, [pc, #68]	; (8007b98 <USB_FlushRxFifo+0x5c>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d901      	bls.n	8007b5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007b56:	2303      	movs	r3, #3
 8007b58:	e018      	b.n	8007b8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	daf2      	bge.n	8007b48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b62:	2300      	movs	r3, #0
 8007b64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2210      	movs	r2, #16
 8007b6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	4a08      	ldr	r2, [pc, #32]	; (8007b98 <USB_FlushRxFifo+0x5c>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d901      	bls.n	8007b7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e006      	b.n	8007b8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	f003 0310 	and.w	r3, r3, #16
 8007b86:	2b10      	cmp	r3, #16
 8007b88:	d0f0      	beq.n	8007b6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3714      	adds	r7, #20
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr
 8007b98:	00030d40 	.word	0x00030d40

08007b9c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	78fb      	ldrb	r3, [r7, #3]
 8007bb6:	68f9      	ldr	r1, [r7, #12]
 8007bb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b085      	sub	sp, #20
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007be8:	f023 0303 	bic.w	r3, r3, #3
 8007bec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bfc:	f043 0302 	orr.w	r3, r3, #2
 8007c00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3714      	adds	r7, #20
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	695b      	ldr	r3, [r3, #20]
 8007c1c:	f003 0301 	and.w	r3, r3, #1
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	4a13      	ldr	r2, [pc, #76]	; (8007c90 <USB_CoreReset+0x64>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d901      	bls.n	8007c4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e01b      	b.n	8007c82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	daf2      	bge.n	8007c38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c52:	2300      	movs	r3, #0
 8007c54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	f043 0201 	orr.w	r2, r3, #1
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	3301      	adds	r3, #1
 8007c66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4a09      	ldr	r2, [pc, #36]	; (8007c90 <USB_CoreReset+0x64>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d901      	bls.n	8007c74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c70:	2303      	movs	r3, #3
 8007c72:	e006      	b.n	8007c82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d0f0      	beq.n	8007c62 <USB_CoreReset+0x36>

  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	00030d40 	.word	0x00030d40

08007c94 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08a      	sub	sp, #40	; 0x28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8007c9c:	4b27      	ldr	r3, [pc, #156]	; (8007d3c <I2Cx_MspInit+0xa8>)
 8007c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ca0:	4a26      	ldr	r2, [pc, #152]	; (8007d3c <I2Cx_MspInit+0xa8>)
 8007ca2:	f043 0302 	orr.w	r3, r3, #2
 8007ca6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ca8:	4b24      	ldr	r3, [pc, #144]	; (8007d3c <I2Cx_MspInit+0xa8>)
 8007caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cac:	f003 0302 	and.w	r3, r3, #2
 8007cb0:	613b      	str	r3, [r7, #16]
 8007cb2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8007cb4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007cb8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8007cba:	2312      	movs	r3, #18
 8007cbc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8007cc6:	2304      	movs	r3, #4
 8007cc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8007cca:	f107 0314 	add.w	r3, r7, #20
 8007cce:	4619      	mov	r1, r3
 8007cd0:	481b      	ldr	r0, [pc, #108]	; (8007d40 <I2Cx_MspInit+0xac>)
 8007cd2:	f7fa fc27 	bl	8002524 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8007cd6:	f107 0314 	add.w	r3, r7, #20
 8007cda:	4619      	mov	r1, r3
 8007cdc:	4818      	ldr	r0, [pc, #96]	; (8007d40 <I2Cx_MspInit+0xac>)
 8007cde:	f7fa fc21 	bl	8002524 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8007ce2:	4b16      	ldr	r3, [pc, #88]	; (8007d3c <I2Cx_MspInit+0xa8>)
 8007ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ce6:	4a15      	ldr	r2, [pc, #84]	; (8007d3c <I2Cx_MspInit+0xa8>)
 8007ce8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007cec:	6593      	str	r3, [r2, #88]	; 0x58
 8007cee:	4b13      	ldr	r3, [pc, #76]	; (8007d3c <I2Cx_MspInit+0xa8>)
 8007cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cf6:	60fb      	str	r3, [r7, #12]
 8007cf8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8007cfa:	4b10      	ldr	r3, [pc, #64]	; (8007d3c <I2Cx_MspInit+0xa8>)
 8007cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfe:	4a0f      	ldr	r2, [pc, #60]	; (8007d3c <I2Cx_MspInit+0xa8>)
 8007d00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007d04:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8007d06:	4b0d      	ldr	r3, [pc, #52]	; (8007d3c <I2Cx_MspInit+0xa8>)
 8007d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0a:	4a0c      	ldr	r2, [pc, #48]	; (8007d3c <I2Cx_MspInit+0xa8>)
 8007d0c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007d10:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8007d12:	2200      	movs	r2, #0
 8007d14:	210f      	movs	r1, #15
 8007d16:	2021      	movs	r0, #33	; 0x21
 8007d18:	f7fa fa4e 	bl	80021b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8007d1c:	2021      	movs	r0, #33	; 0x21
 8007d1e:	f7fa fa67 	bl	80021f0 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8007d22:	2200      	movs	r2, #0
 8007d24:	210f      	movs	r1, #15
 8007d26:	2022      	movs	r0, #34	; 0x22
 8007d28:	f7fa fa46 	bl	80021b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8007d2c:	2022      	movs	r0, #34	; 0x22
 8007d2e:	f7fa fa5f 	bl	80021f0 <HAL_NVIC_EnableIRQ>
}
 8007d32:	bf00      	nop
 8007d34:	3728      	adds	r7, #40	; 0x28
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	40021000 	.word	0x40021000
 8007d40:	48000400 	.word	0x48000400

08007d44 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a12      	ldr	r2, [pc, #72]	; (8007d98 <I2Cx_Init+0x54>)
 8007d50:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a11      	ldr	r2, [pc, #68]	; (8007d9c <I2Cx_Init+0x58>)
 8007d56:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7ff ff89 	bl	8007c94 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f7fa fe9c 	bl	8002ac0 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8007d88:	2100      	movs	r1, #0
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7fb fc2a 	bl	80035e4 <HAL_I2CEx_ConfigAnalogFilter>
}
 8007d90:	bf00      	nop
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	40005800 	.word	0x40005800
 8007d9c:	00702681 	.word	0x00702681

08007da0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b08a      	sub	sp, #40	; 0x28
 8007da4:	af04      	add	r7, sp, #16
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	4608      	mov	r0, r1
 8007daa:	4611      	mov	r1, r2
 8007dac:	461a      	mov	r2, r3
 8007dae:	4603      	mov	r3, r0
 8007db0:	72fb      	strb	r3, [r7, #11]
 8007db2:	460b      	mov	r3, r1
 8007db4:	813b      	strh	r3, [r7, #8]
 8007db6:	4613      	mov	r3, r2
 8007db8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8007dbe:	7afb      	ldrb	r3, [r7, #11]
 8007dc0:	b299      	uxth	r1, r3
 8007dc2:	88f8      	ldrh	r0, [r7, #6]
 8007dc4:	893a      	ldrh	r2, [r7, #8]
 8007dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007dca:	9302      	str	r3, [sp, #8]
 8007dcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dce:	9301      	str	r3, [sp, #4]
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f7fb f844 	bl	8002e64 <HAL_I2C_Mem_Read>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8007de0:	7dfb      	ldrb	r3, [r7, #23]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d004      	beq.n	8007df0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8007de6:	7afb      	ldrb	r3, [r7, #11]
 8007de8:	4619      	mov	r1, r3
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f000 f832 	bl	8007e54 <I2Cx_Error>
  }
  return status;
 8007df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3718      	adds	r7, #24
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b08a      	sub	sp, #40	; 0x28
 8007dfe:	af04      	add	r7, sp, #16
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	4608      	mov	r0, r1
 8007e04:	4611      	mov	r1, r2
 8007e06:	461a      	mov	r2, r3
 8007e08:	4603      	mov	r3, r0
 8007e0a:	72fb      	strb	r3, [r7, #11]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	813b      	strh	r3, [r7, #8]
 8007e10:	4613      	mov	r3, r2
 8007e12:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8007e14:	2300      	movs	r3, #0
 8007e16:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8007e18:	7afb      	ldrb	r3, [r7, #11]
 8007e1a:	b299      	uxth	r1, r3
 8007e1c:	88f8      	ldrh	r0, [r7, #6]
 8007e1e:	893a      	ldrh	r2, [r7, #8]
 8007e20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e24:	9302      	str	r3, [sp, #8]
 8007e26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e28:	9301      	str	r3, [sp, #4]
 8007e2a:	6a3b      	ldr	r3, [r7, #32]
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	4603      	mov	r3, r0
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f7fa ff03 	bl	8002c3c <HAL_I2C_Mem_Write>
 8007e36:	4603      	mov	r3, r0
 8007e38:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8007e3a:	7dfb      	ldrb	r3, [r7, #23]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d004      	beq.n	8007e4a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8007e40:	7afb      	ldrb	r3, [r7, #11]
 8007e42:	4619      	mov	r1, r3
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 f805 	bl	8007e54 <I2Cx_Error>
  }
  return status;
 8007e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3718      	adds	r7, #24
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f7fa febc 	bl	8002bde <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7ff ff6c 	bl	8007d44 <I2Cx_Init>
}
 8007e6c:	bf00      	nop
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8007e78:	4802      	ldr	r0, [pc, #8]	; (8007e84 <SENSOR_IO_Init+0x10>)
 8007e7a:	f7ff ff63 	bl	8007d44 <I2Cx_Init>
}
 8007e7e:	bf00      	nop
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	20000934 	.word	0x20000934

08007e88 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af02      	add	r7, sp, #8
 8007e8e:	4603      	mov	r3, r0
 8007e90:	71fb      	strb	r3, [r7, #7]
 8007e92:	460b      	mov	r3, r1
 8007e94:	71bb      	strb	r3, [r7, #6]
 8007e96:	4613      	mov	r3, r2
 8007e98:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8007e9a:	79bb      	ldrb	r3, [r7, #6]
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	79f9      	ldrb	r1, [r7, #7]
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	9301      	str	r3, [sp, #4]
 8007ea4:	1d7b      	adds	r3, r7, #5
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	4803      	ldr	r0, [pc, #12]	; (8007eb8 <SENSOR_IO_Write+0x30>)
 8007eac:	f7ff ffa5 	bl	8007dfa <I2Cx_WriteMultiple>
}
 8007eb0:	bf00      	nop
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	20000934 	.word	0x20000934

08007ebc <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af02      	add	r7, sp, #8
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	460a      	mov	r2, r1
 8007ec6:	71fb      	strb	r3, [r7, #7]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8007ed0:	79bb      	ldrb	r3, [r7, #6]
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	79f9      	ldrb	r1, [r7, #7]
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	9301      	str	r3, [sp, #4]
 8007eda:	f107 030f 	add.w	r3, r7, #15
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	4804      	ldr	r0, [pc, #16]	; (8007ef4 <SENSOR_IO_Read+0x38>)
 8007ee4:	f7ff ff5c 	bl	8007da0 <I2Cx_ReadMultiple>

  return read_value;
 8007ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20000934 	.word	0x20000934

08007ef8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af02      	add	r7, sp, #8
 8007efe:	603a      	str	r2, [r7, #0]
 8007f00:	461a      	mov	r2, r3
 8007f02:	4603      	mov	r3, r0
 8007f04:	71fb      	strb	r3, [r7, #7]
 8007f06:	460b      	mov	r3, r1
 8007f08:	71bb      	strb	r3, [r7, #6]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8007f0e:	79bb      	ldrb	r3, [r7, #6]
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	79f9      	ldrb	r1, [r7, #7]
 8007f14:	88bb      	ldrh	r3, [r7, #4]
 8007f16:	9301      	str	r3, [sp, #4]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	4804      	ldr	r0, [pc, #16]	; (8007f30 <SENSOR_IO_ReadMultiple+0x38>)
 8007f20:	f7ff ff3e 	bl	8007da0 <I2Cx_ReadMultiple>
 8007f24:	4603      	mov	r3, r0
 8007f26:	b29b      	uxth	r3, r3
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	20000934 	.word	0x20000934

08007f34 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8007f42:	4b19      	ldr	r3, [pc, #100]	; (8007fa8 <BSP_ACCELERO_Init+0x74>)
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	4798      	blx	r3
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b6a      	cmp	r3, #106	; 0x6a
 8007f4c:	d002      	beq.n	8007f54 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	73fb      	strb	r3, [r7, #15]
 8007f52:	e024      	b.n	8007f9e <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8007f54:	4b15      	ldr	r3, [pc, #84]	; (8007fac <BSP_ACCELERO_Init+0x78>)
 8007f56:	4a14      	ldr	r2, [pc, #80]	; (8007fa8 <BSP_ACCELERO_Init+0x74>)
 8007f58:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8007f5a:	2330      	movs	r3, #48	; 0x30
 8007f5c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8007f62:	2300      	movs	r3, #0
 8007f64:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8007f66:	2340      	movs	r3, #64	; 0x40
 8007f68:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8007f72:	797a      	ldrb	r2, [r7, #5]
 8007f74:	7abb      	ldrb	r3, [r7, #10]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8007f7c:	7a3b      	ldrb	r3, [r7, #8]
 8007f7e:	f043 0304 	orr.w	r3, r3, #4
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	021b      	lsls	r3, r3, #8
 8007f86:	b21a      	sxth	r2, r3
 8007f88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	b21b      	sxth	r3, r3
 8007f90:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8007f92:	4b06      	ldr	r3, [pc, #24]	; (8007fac <BSP_ACCELERO_Init+0x78>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	89ba      	ldrh	r2, [r7, #12]
 8007f9a:	4610      	mov	r0, r2
 8007f9c:	4798      	blx	r3
  }  

  return ret;
 8007f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	2000000c 	.word	0x2000000c
 8007fac:	20000988 	.word	0x20000988

08007fb0 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8007fb8:	4b08      	ldr	r3, [pc, #32]	; (8007fdc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d009      	beq.n	8007fd4 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8007fc0:	4b06      	ldr	r3, [pc, #24]	; (8007fdc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d004      	beq.n	8007fd4 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8007fca:	4b04      	ldr	r3, [pc, #16]	; (8007fdc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	4798      	blx	r3
    }
  }
}
 8007fd4:	bf00      	nop
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	20000988 	.word	0x20000988

08007fe0 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8007fea:	2300      	movs	r3, #0
 8007fec:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8007fee:	2110      	movs	r1, #16
 8007ff0:	20d4      	movs	r0, #212	; 0xd4
 8007ff2:	f7ff ff63 	bl	8007ebc <SENSOR_IO_Read>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8007ffa:	88fb      	ldrh	r3, [r7, #6]
 8007ffc:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8007ffe:	7bbb      	ldrb	r3, [r7, #14]
 8008000:	f003 0303 	and.w	r3, r3, #3
 8008004:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8008006:	7bba      	ldrb	r2, [r7, #14]
 8008008:	7bfb      	ldrb	r3, [r7, #15]
 800800a:	4313      	orrs	r3, r2
 800800c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800800e:	7bbb      	ldrb	r3, [r7, #14]
 8008010:	461a      	mov	r2, r3
 8008012:	2110      	movs	r1, #16
 8008014:	20d4      	movs	r0, #212	; 0xd4
 8008016:	f7ff ff37 	bl	8007e88 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800801a:	2112      	movs	r1, #18
 800801c:	20d4      	movs	r0, #212	; 0xd4
 800801e:	f7ff ff4d 	bl	8007ebc <SENSOR_IO_Read>
 8008022:	4603      	mov	r3, r0
 8008024:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8008026:	88fb      	ldrh	r3, [r7, #6]
 8008028:	0a1b      	lsrs	r3, r3, #8
 800802a:	b29b      	uxth	r3, r3
 800802c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800802e:	7bbb      	ldrb	r3, [r7, #14]
 8008030:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8008034:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8008036:	7bba      	ldrb	r2, [r7, #14]
 8008038:	7bfb      	ldrb	r3, [r7, #15]
 800803a:	4313      	orrs	r3, r2
 800803c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800803e:	7bbb      	ldrb	r3, [r7, #14]
 8008040:	461a      	mov	r2, r3
 8008042:	2112      	movs	r1, #18
 8008044:	20d4      	movs	r0, #212	; 0xd4
 8008046:	f7ff ff1f 	bl	8007e88 <SENSOR_IO_Write>
}
 800804a:	bf00      	nop
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b082      	sub	sp, #8
 8008056:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8008058:	2300      	movs	r3, #0
 800805a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800805c:	2110      	movs	r1, #16
 800805e:	20d4      	movs	r0, #212	; 0xd4
 8008060:	f7ff ff2c 	bl	8007ebc <SENSOR_IO_Read>
 8008064:	4603      	mov	r3, r0
 8008066:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8008068:	79fb      	ldrb	r3, [r7, #7]
 800806a:	f003 030f 	and.w	r3, r3, #15
 800806e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8008070:	79fb      	ldrb	r3, [r7, #7]
 8008072:	461a      	mov	r2, r3
 8008074:	2110      	movs	r1, #16
 8008076:	20d4      	movs	r0, #212	; 0xd4
 8008078:	f7ff ff06 	bl	8007e88 <SENSOR_IO_Write>
}
 800807c:	bf00      	nop
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8008084:	b580      	push	{r7, lr}
 8008086:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8008088:	f7ff fef4 	bl	8007e74 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800808c:	210f      	movs	r1, #15
 800808e:	20d4      	movs	r0, #212	; 0xd4
 8008090:	f7ff ff14 	bl	8007ebc <SENSOR_IO_Read>
 8008094:	4603      	mov	r3, r0
}
 8008096:	4618      	mov	r0, r3
 8008098:	bd80      	pop	{r7, pc}

0800809a <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b084      	sub	sp, #16
 800809e:	af00      	add	r7, sp, #0
 80080a0:	4603      	mov	r3, r0
 80080a2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80080a4:	2300      	movs	r3, #0
 80080a6:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80080a8:	2115      	movs	r1, #21
 80080aa:	20d4      	movs	r0, #212	; 0xd4
 80080ac:	f7ff ff06 	bl	8007ebc <SENSOR_IO_Read>
 80080b0:	4603      	mov	r3, r0
 80080b2:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
 80080b6:	f023 0310 	bic.w	r3, r3, #16
 80080ba:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80080bc:	88fb      	ldrh	r3, [r7, #6]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d003      	beq.n	80080ca <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
 80080c4:	f043 0310 	orr.w	r3, r3, #16
 80080c8:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80080ca:	7bfb      	ldrb	r3, [r7, #15]
 80080cc:	461a      	mov	r2, r3
 80080ce:	2115      	movs	r1, #21
 80080d0:	20d4      	movs	r0, #212	; 0xd4
 80080d2:	f7ff fed9 	bl	8007e88 <SENSOR_IO_Write>
}
 80080d6:	bf00      	nop
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
	...

080080e0 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b088      	sub	sp, #32
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80080e8:	2300      	movs	r3, #0
 80080ea:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80080ec:	2300      	movs	r3, #0
 80080ee:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80080f0:	f04f 0300 	mov.w	r3, #0
 80080f4:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80080f6:	2110      	movs	r1, #16
 80080f8:	20d4      	movs	r0, #212	; 0xd4
 80080fa:	f7ff fedf 	bl	8007ebc <SENSOR_IO_Read>
 80080fe:	4603      	mov	r3, r0
 8008100:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8008102:	f107 0208 	add.w	r2, r7, #8
 8008106:	2306      	movs	r3, #6
 8008108:	2128      	movs	r1, #40	; 0x28
 800810a:	20d4      	movs	r0, #212	; 0xd4
 800810c:	f7ff fef4 	bl	8007ef8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8008110:	2300      	movs	r3, #0
 8008112:	77fb      	strb	r3, [r7, #31]
 8008114:	e01c      	b.n	8008150 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8008116:	7ffb      	ldrb	r3, [r7, #31]
 8008118:	005b      	lsls	r3, r3, #1
 800811a:	3301      	adds	r3, #1
 800811c:	3320      	adds	r3, #32
 800811e:	443b      	add	r3, r7
 8008120:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8008124:	b29b      	uxth	r3, r3
 8008126:	021b      	lsls	r3, r3, #8
 8008128:	b29a      	uxth	r2, r3
 800812a:	7ffb      	ldrb	r3, [r7, #31]
 800812c:	005b      	lsls	r3, r3, #1
 800812e:	3320      	adds	r3, #32
 8008130:	443b      	add	r3, r7
 8008132:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8008136:	b29b      	uxth	r3, r3
 8008138:	4413      	add	r3, r2
 800813a:	b29a      	uxth	r2, r3
 800813c:	7ffb      	ldrb	r3, [r7, #31]
 800813e:	b212      	sxth	r2, r2
 8008140:	005b      	lsls	r3, r3, #1
 8008142:	3320      	adds	r3, #32
 8008144:	443b      	add	r3, r7
 8008146:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800814a:	7ffb      	ldrb	r3, [r7, #31]
 800814c:	3301      	adds	r3, #1
 800814e:	77fb      	strb	r3, [r7, #31]
 8008150:	7ffb      	ldrb	r3, [r7, #31]
 8008152:	2b02      	cmp	r3, #2
 8008154:	d9df      	bls.n	8008116 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8008156:	7dfb      	ldrb	r3, [r7, #23]
 8008158:	f003 030c 	and.w	r3, r3, #12
 800815c:	2b0c      	cmp	r3, #12
 800815e:	d829      	bhi.n	80081b4 <LSM6DSL_AccReadXYZ+0xd4>
 8008160:	a201      	add	r2, pc, #4	; (adr r2, 8008168 <LSM6DSL_AccReadXYZ+0x88>)
 8008162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008166:	bf00      	nop
 8008168:	0800819d 	.word	0x0800819d
 800816c:	080081b5 	.word	0x080081b5
 8008170:	080081b5 	.word	0x080081b5
 8008174:	080081b5 	.word	0x080081b5
 8008178:	080081af 	.word	0x080081af
 800817c:	080081b5 	.word	0x080081b5
 8008180:	080081b5 	.word	0x080081b5
 8008184:	080081b5 	.word	0x080081b5
 8008188:	080081a3 	.word	0x080081a3
 800818c:	080081b5 	.word	0x080081b5
 8008190:	080081b5 	.word	0x080081b5
 8008194:	080081b5 	.word	0x080081b5
 8008198:	080081a9 	.word	0x080081a9
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800819c:	4b18      	ldr	r3, [pc, #96]	; (8008200 <LSM6DSL_AccReadXYZ+0x120>)
 800819e:	61bb      	str	r3, [r7, #24]
    break;
 80081a0:	e008      	b.n	80081b4 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80081a2:	4b18      	ldr	r3, [pc, #96]	; (8008204 <LSM6DSL_AccReadXYZ+0x124>)
 80081a4:	61bb      	str	r3, [r7, #24]
    break;
 80081a6:	e005      	b.n	80081b4 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80081a8:	4b17      	ldr	r3, [pc, #92]	; (8008208 <LSM6DSL_AccReadXYZ+0x128>)
 80081aa:	61bb      	str	r3, [r7, #24]
    break;
 80081ac:	e002      	b.n	80081b4 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80081ae:	4b17      	ldr	r3, [pc, #92]	; (800820c <LSM6DSL_AccReadXYZ+0x12c>)
 80081b0:	61bb      	str	r3, [r7, #24]
    break;    
 80081b2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80081b4:	2300      	movs	r3, #0
 80081b6:	77fb      	strb	r3, [r7, #31]
 80081b8:	e01a      	b.n	80081f0 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80081ba:	7ffb      	ldrb	r3, [r7, #31]
 80081bc:	005b      	lsls	r3, r3, #1
 80081be:	3320      	adds	r3, #32
 80081c0:	443b      	add	r3, r7
 80081c2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80081c6:	ee07 3a90 	vmov	s15, r3
 80081ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80081ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80081d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081d6:	7ffb      	ldrb	r3, [r7, #31]
 80081d8:	005b      	lsls	r3, r3, #1
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	4413      	add	r3, r2
 80081de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081e2:	ee17 2a90 	vmov	r2, s15
 80081e6:	b212      	sxth	r2, r2
 80081e8:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80081ea:	7ffb      	ldrb	r3, [r7, #31]
 80081ec:	3301      	adds	r3, #1
 80081ee:	77fb      	strb	r3, [r7, #31]
 80081f0:	7ffb      	ldrb	r3, [r7, #31]
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d9e1      	bls.n	80081ba <LSM6DSL_AccReadXYZ+0xda>
  }
}
 80081f6:	bf00      	nop
 80081f8:	bf00      	nop
 80081fa:	3720      	adds	r7, #32
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	3d79db23 	.word	0x3d79db23
 8008204:	3df9db23 	.word	0x3df9db23
 8008208:	3e79db23 	.word	0x3e79db23
 800820c:	3ef9db23 	.word	0x3ef9db23

08008210 <__NVIC_SetPriority>:
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	4603      	mov	r3, r0
 8008218:	6039      	str	r1, [r7, #0]
 800821a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800821c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008220:	2b00      	cmp	r3, #0
 8008222:	db0a      	blt.n	800823a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	b2da      	uxtb	r2, r3
 8008228:	490c      	ldr	r1, [pc, #48]	; (800825c <__NVIC_SetPriority+0x4c>)
 800822a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800822e:	0112      	lsls	r2, r2, #4
 8008230:	b2d2      	uxtb	r2, r2
 8008232:	440b      	add	r3, r1
 8008234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008238:	e00a      	b.n	8008250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	b2da      	uxtb	r2, r3
 800823e:	4908      	ldr	r1, [pc, #32]	; (8008260 <__NVIC_SetPriority+0x50>)
 8008240:	79fb      	ldrb	r3, [r7, #7]
 8008242:	f003 030f 	and.w	r3, r3, #15
 8008246:	3b04      	subs	r3, #4
 8008248:	0112      	lsls	r2, r2, #4
 800824a:	b2d2      	uxtb	r2, r2
 800824c:	440b      	add	r3, r1
 800824e:	761a      	strb	r2, [r3, #24]
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	e000e100 	.word	0xe000e100
 8008260:	e000ed00 	.word	0xe000ed00

08008264 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008264:	b580      	push	{r7, lr}
 8008266:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008268:	4b05      	ldr	r3, [pc, #20]	; (8008280 <SysTick_Handler+0x1c>)
 800826a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800826c:	f002 f804 	bl	800a278 <xTaskGetSchedulerState>
 8008270:	4603      	mov	r3, r0
 8008272:	2b01      	cmp	r3, #1
 8008274:	d001      	beq.n	800827a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008276:	f002 ffef 	bl	800b258 <xPortSysTickHandler>
  }
}
 800827a:	bf00      	nop
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	e000e010 	.word	0xe000e010

08008284 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008284:	b580      	push	{r7, lr}
 8008286:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008288:	2100      	movs	r1, #0
 800828a:	f06f 0004 	mvn.w	r0, #4
 800828e:	f7ff ffbf 	bl	8008210 <__NVIC_SetPriority>
#endif
}
 8008292:	bf00      	nop
 8008294:	bd80      	pop	{r7, pc}
	...

08008298 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800829e:	f3ef 8305 	mrs	r3, IPSR
 80082a2:	603b      	str	r3, [r7, #0]
  return(result);
 80082a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d003      	beq.n	80082b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80082aa:	f06f 0305 	mvn.w	r3, #5
 80082ae:	607b      	str	r3, [r7, #4]
 80082b0:	e00c      	b.n	80082cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80082b2:	4b0a      	ldr	r3, [pc, #40]	; (80082dc <osKernelInitialize+0x44>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d105      	bne.n	80082c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80082ba:	4b08      	ldr	r3, [pc, #32]	; (80082dc <osKernelInitialize+0x44>)
 80082bc:	2201      	movs	r2, #1
 80082be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	607b      	str	r3, [r7, #4]
 80082c4:	e002      	b.n	80082cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80082c6:	f04f 33ff 	mov.w	r3, #4294967295
 80082ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80082cc:	687b      	ldr	r3, [r7, #4]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	370c      	adds	r7, #12
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	2000098c 	.word	0x2000098c

080082e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082e6:	f3ef 8305 	mrs	r3, IPSR
 80082ea:	603b      	str	r3, [r7, #0]
  return(result);
 80082ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d003      	beq.n	80082fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80082f2:	f06f 0305 	mvn.w	r3, #5
 80082f6:	607b      	str	r3, [r7, #4]
 80082f8:	e010      	b.n	800831c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80082fa:	4b0b      	ldr	r3, [pc, #44]	; (8008328 <osKernelStart+0x48>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d109      	bne.n	8008316 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008302:	f7ff ffbf 	bl	8008284 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008306:	4b08      	ldr	r3, [pc, #32]	; (8008328 <osKernelStart+0x48>)
 8008308:	2202      	movs	r2, #2
 800830a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800830c:	f001 fb3a 	bl	8009984 <vTaskStartScheduler>
      stat = osOK;
 8008310:	2300      	movs	r3, #0
 8008312:	607b      	str	r3, [r7, #4]
 8008314:	e002      	b.n	800831c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008316:	f04f 33ff 	mov.w	r3, #4294967295
 800831a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800831c:	687b      	ldr	r3, [r7, #4]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	2000098c 	.word	0x2000098c

0800832c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800832c:	b580      	push	{r7, lr}
 800832e:	b08e      	sub	sp, #56	; 0x38
 8008330:	af04      	add	r7, sp, #16
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008338:	2300      	movs	r3, #0
 800833a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800833c:	f3ef 8305 	mrs	r3, IPSR
 8008340:	617b      	str	r3, [r7, #20]
  return(result);
 8008342:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008344:	2b00      	cmp	r3, #0
 8008346:	d17e      	bne.n	8008446 <osThreadNew+0x11a>
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d07b      	beq.n	8008446 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800834e:	2380      	movs	r3, #128	; 0x80
 8008350:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008352:	2318      	movs	r3, #24
 8008354:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008356:	2300      	movs	r3, #0
 8008358:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800835a:	f04f 33ff 	mov.w	r3, #4294967295
 800835e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d045      	beq.n	80083f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d002      	beq.n	8008374 <osThreadNew+0x48>
        name = attr->name;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d002      	beq.n	8008382 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d008      	beq.n	800839a <osThreadNew+0x6e>
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	2b38      	cmp	r3, #56	; 0x38
 800838c:	d805      	bhi.n	800839a <osThreadNew+0x6e>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	2b00      	cmp	r3, #0
 8008398:	d001      	beq.n	800839e <osThreadNew+0x72>
        return (NULL);
 800839a:	2300      	movs	r3, #0
 800839c:	e054      	b.n	8008448 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d003      	beq.n	80083ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	089b      	lsrs	r3, r3, #2
 80083ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00e      	beq.n	80083d4 <osThreadNew+0xa8>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	2bbf      	cmp	r3, #191	; 0xbf
 80083bc:	d90a      	bls.n	80083d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d006      	beq.n	80083d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d002      	beq.n	80083d4 <osThreadNew+0xa8>
        mem = 1;
 80083ce:	2301      	movs	r3, #1
 80083d0:	61bb      	str	r3, [r7, #24]
 80083d2:	e010      	b.n	80083f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10c      	bne.n	80083f6 <osThreadNew+0xca>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d108      	bne.n	80083f6 <osThreadNew+0xca>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d104      	bne.n	80083f6 <osThreadNew+0xca>
          mem = 0;
 80083ec:	2300      	movs	r3, #0
 80083ee:	61bb      	str	r3, [r7, #24]
 80083f0:	e001      	b.n	80083f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80083f2:	2300      	movs	r3, #0
 80083f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d110      	bne.n	800841e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008404:	9202      	str	r2, [sp, #8]
 8008406:	9301      	str	r3, [sp, #4]
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	6a3a      	ldr	r2, [r7, #32]
 8008410:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f001 f8c6 	bl	80095a4 <xTaskCreateStatic>
 8008418:	4603      	mov	r3, r0
 800841a:	613b      	str	r3, [r7, #16]
 800841c:	e013      	b.n	8008446 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d110      	bne.n	8008446 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	b29a      	uxth	r2, r3
 8008428:	f107 0310 	add.w	r3, r7, #16
 800842c:	9301      	str	r3, [sp, #4]
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	9300      	str	r3, [sp, #0]
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f001 f911 	bl	800965e <xTaskCreate>
 800843c:	4603      	mov	r3, r0
 800843e:	2b01      	cmp	r3, #1
 8008440:	d001      	beq.n	8008446 <osThreadNew+0x11a>
            hTask = NULL;
 8008442:	2300      	movs	r3, #0
 8008444:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008446:	693b      	ldr	r3, [r7, #16]
}
 8008448:	4618      	mov	r0, r3
 800844a:	3728      	adds	r7, #40	; 0x28
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8008450:	b580      	push	{r7, lr}
 8008452:	b088      	sub	sp, #32
 8008454:	af02      	add	r7, sp, #8
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d002      	beq.n	800846a <osThreadFlagsSet+0x1a>
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	da03      	bge.n	8008472 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800846a:	f06f 0303 	mvn.w	r3, #3
 800846e:	60fb      	str	r3, [r7, #12]
 8008470:	e035      	b.n	80084de <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8008472:	f04f 33ff 	mov.w	r3, #4294967295
 8008476:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008478:	f3ef 8305 	mrs	r3, IPSR
 800847c:	613b      	str	r3, [r7, #16]
  return(result);
 800847e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8008480:	2b00      	cmp	r3, #0
 8008482:	d01f      	beq.n	80084c4 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8008484:	2300      	movs	r3, #0
 8008486:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8008488:	f107 0308 	add.w	r3, r7, #8
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	2300      	movs	r3, #0
 8008490:	2201      	movs	r2, #1
 8008492:	6839      	ldr	r1, [r7, #0]
 8008494:	6978      	ldr	r0, [r7, #20]
 8008496:	f002 f899 	bl	800a5cc <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800849a:	f107 030c 	add.w	r3, r7, #12
 800849e:	2200      	movs	r2, #0
 80084a0:	9200      	str	r2, [sp, #0]
 80084a2:	2200      	movs	r2, #0
 80084a4:	2100      	movs	r1, #0
 80084a6:	6978      	ldr	r0, [r7, #20]
 80084a8:	f002 f890 	bl	800a5cc <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d015      	beq.n	80084de <osThreadFlagsSet+0x8e>
 80084b2:	4b0d      	ldr	r3, [pc, #52]	; (80084e8 <osThreadFlagsSet+0x98>)
 80084b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084b8:	601a      	str	r2, [r3, #0]
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	f3bf 8f6f 	isb	sy
 80084c2:	e00c      	b.n	80084de <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80084c4:	2300      	movs	r3, #0
 80084c6:	2201      	movs	r2, #1
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6978      	ldr	r0, [r7, #20]
 80084cc:	f001 ffc0 	bl	800a450 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80084d0:	f107 030c 	add.w	r3, r7, #12
 80084d4:	2200      	movs	r2, #0
 80084d6:	2100      	movs	r1, #0
 80084d8:	6978      	ldr	r0, [r7, #20]
 80084da:	f001 ffb9 	bl	800a450 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80084de:	68fb      	ldr	r3, [r7, #12]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3718      	adds	r7, #24
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	e000ed04 	.word	0xe000ed04

080084ec <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b08c      	sub	sp, #48	; 0x30
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084f8:	f3ef 8305 	mrs	r3, IPSR
 80084fc:	617b      	str	r3, [r7, #20]
  return(result);
 80084fe:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8008500:	2b00      	cmp	r3, #0
 8008502:	d003      	beq.n	800850c <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8008504:	f06f 0305 	mvn.w	r3, #5
 8008508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800850a:	e06b      	b.n	80085e4 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2b00      	cmp	r3, #0
 8008510:	da03      	bge.n	800851a <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8008512:	f06f 0303 	mvn.w	r3, #3
 8008516:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008518:	e064      	b.n	80085e4 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	f003 0302 	and.w	r3, r3, #2
 8008520:	2b00      	cmp	r3, #0
 8008522:	d002      	beq.n	800852a <osThreadFlagsWait+0x3e>
      clear = 0U;
 8008524:	2300      	movs	r3, #0
 8008526:	62bb      	str	r3, [r7, #40]	; 0x28
 8008528:	e001      	b.n	800852e <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800852e:	2300      	movs	r3, #0
 8008530:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8008536:	f001 fb43 	bl	8009bc0 <xTaskGetTickCount>
 800853a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800853c:	f107 0210 	add.w	r2, r7, #16
 8008540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008542:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008544:	2000      	movs	r0, #0
 8008546:	f001 ff23 	bl	800a390 <xTaskNotifyWait>
 800854a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d137      	bne.n	80085c2 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8008552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	4013      	ands	r3, r2
 8008558:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800855e:	4313      	orrs	r3, r2
 8008560:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	f003 0301 	and.w	r3, r3, #1
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00c      	beq.n	8008586 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008570:	4013      	ands	r3, r2
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	429a      	cmp	r2, r3
 8008576:	d032      	beq.n	80085de <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10f      	bne.n	800859e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800857e:	f06f 0302 	mvn.w	r3, #2
 8008582:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8008584:	e02e      	b.n	80085e4 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858a:	4013      	ands	r3, r2
 800858c:	2b00      	cmp	r3, #0
 800858e:	d128      	bne.n	80085e2 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d103      	bne.n	800859e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8008596:	f06f 0302 	mvn.w	r3, #2
 800859a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800859c:	e022      	b.n	80085e4 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800859e:	f001 fb0f 	bl	8009bc0 <xTaskGetTickCount>
 80085a2:	4602      	mov	r2, r0
 80085a4:	6a3b      	ldr	r3, [r7, #32]
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 80085aa:	69ba      	ldr	r2, [r7, #24]
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d902      	bls.n	80085b8 <osThreadFlagsWait+0xcc>
          tout  = 0;
 80085b2:	2300      	movs	r3, #0
 80085b4:	627b      	str	r3, [r7, #36]	; 0x24
 80085b6:	e00e      	b.n	80085d6 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 80085b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	627b      	str	r3, [r7, #36]	; 0x24
 80085c0:	e009      	b.n	80085d6 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d103      	bne.n	80085d0 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 80085c8:	f06f 0302 	mvn.w	r3, #2
 80085cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085ce:	e002      	b.n	80085d6 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80085d0:	f06f 0301 	mvn.w	r3, #1
 80085d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1af      	bne.n	800853c <osThreadFlagsWait+0x50>
 80085dc:	e002      	b.n	80085e4 <osThreadFlagsWait+0xf8>
            break;
 80085de:	bf00      	nop
 80085e0:	e000      	b.n	80085e4 <osThreadFlagsWait+0xf8>
            break;
 80085e2:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80085e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3730      	adds	r7, #48	; 0x30
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b084      	sub	sp, #16
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085f6:	f3ef 8305 	mrs	r3, IPSR
 80085fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80085fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d003      	beq.n	800860a <osDelay+0x1c>
    stat = osErrorISR;
 8008602:	f06f 0305 	mvn.w	r3, #5
 8008606:	60fb      	str	r3, [r7, #12]
 8008608:	e007      	b.n	800861a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800860a:	2300      	movs	r3, #0
 800860c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d002      	beq.n	800861a <osDelay+0x2c>
      vTaskDelay(ticks);
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f001 f981 	bl	800991c <vTaskDelay>
    }
  }

  return (stat);
 800861a:	68fb      	ldr	r3, [r7, #12]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008624:	b580      	push	{r7, lr}
 8008626:	b08a      	sub	sp, #40	; 0x28
 8008628:	af02      	add	r7, sp, #8
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008630:	2300      	movs	r3, #0
 8008632:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008634:	f3ef 8305 	mrs	r3, IPSR
 8008638:	613b      	str	r3, [r7, #16]
  return(result);
 800863a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800863c:	2b00      	cmp	r3, #0
 800863e:	d15f      	bne.n	8008700 <osMessageQueueNew+0xdc>
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d05c      	beq.n	8008700 <osMessageQueueNew+0xdc>
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d059      	beq.n	8008700 <osMessageQueueNew+0xdc>
    mem = -1;
 800864c:	f04f 33ff 	mov.w	r3, #4294967295
 8008650:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d029      	beq.n	80086ac <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d012      	beq.n	8008686 <osMessageQueueNew+0x62>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	2b4f      	cmp	r3, #79	; 0x4f
 8008666:	d90e      	bls.n	8008686 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00a      	beq.n	8008686 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	695a      	ldr	r2, [r3, #20]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	68b9      	ldr	r1, [r7, #8]
 8008678:	fb01 f303 	mul.w	r3, r1, r3
 800867c:	429a      	cmp	r2, r3
 800867e:	d302      	bcc.n	8008686 <osMessageQueueNew+0x62>
        mem = 1;
 8008680:	2301      	movs	r3, #1
 8008682:	61bb      	str	r3, [r7, #24]
 8008684:	e014      	b.n	80086b0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d110      	bne.n	80086b0 <osMessageQueueNew+0x8c>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10c      	bne.n	80086b0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800869a:	2b00      	cmp	r3, #0
 800869c:	d108      	bne.n	80086b0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d104      	bne.n	80086b0 <osMessageQueueNew+0x8c>
          mem = 0;
 80086a6:	2300      	movs	r3, #0
 80086a8:	61bb      	str	r3, [r7, #24]
 80086aa:	e001      	b.n	80086b0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80086ac:	2300      	movs	r3, #0
 80086ae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d10b      	bne.n	80086ce <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	691a      	ldr	r2, [r3, #16]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	2100      	movs	r1, #0
 80086c0:	9100      	str	r1, [sp, #0]
 80086c2:	68b9      	ldr	r1, [r7, #8]
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f000 fa2f 	bl	8008b28 <xQueueGenericCreateStatic>
 80086ca:	61f8      	str	r0, [r7, #28]
 80086cc:	e008      	b.n	80086e0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d105      	bne.n	80086e0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80086d4:	2200      	movs	r2, #0
 80086d6:	68b9      	ldr	r1, [r7, #8]
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f000 fa9d 	bl	8008c18 <xQueueGenericCreate>
 80086de:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00c      	beq.n	8008700 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d003      	beq.n	80086f4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	617b      	str	r3, [r7, #20]
 80086f2:	e001      	b.n	80086f8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80086f4:	2300      	movs	r3, #0
 80086f6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80086f8:	6979      	ldr	r1, [r7, #20]
 80086fa:	69f8      	ldr	r0, [r7, #28]
 80086fc:	f000 fef4 	bl	80094e8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008700:	69fb      	ldr	r3, [r7, #28]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3720      	adds	r7, #32
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
	...

0800870c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800870c:	b580      	push	{r7, lr}
 800870e:	b088      	sub	sp, #32
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	603b      	str	r3, [r7, #0]
 8008718:	4613      	mov	r3, r2
 800871a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008720:	2300      	movs	r3, #0
 8008722:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008724:	f3ef 8305 	mrs	r3, IPSR
 8008728:	617b      	str	r3, [r7, #20]
  return(result);
 800872a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800872c:	2b00      	cmp	r3, #0
 800872e:	d028      	beq.n	8008782 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d005      	beq.n	8008742 <osMessageQueuePut+0x36>
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <osMessageQueuePut+0x36>
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d003      	beq.n	800874a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008742:	f06f 0303 	mvn.w	r3, #3
 8008746:	61fb      	str	r3, [r7, #28]
 8008748:	e038      	b.n	80087bc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800874a:	2300      	movs	r3, #0
 800874c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800874e:	f107 0210 	add.w	r2, r7, #16
 8008752:	2300      	movs	r3, #0
 8008754:	68b9      	ldr	r1, [r7, #8]
 8008756:	69b8      	ldr	r0, [r7, #24]
 8008758:	f000 fbba 	bl	8008ed0 <xQueueGenericSendFromISR>
 800875c:	4603      	mov	r3, r0
 800875e:	2b01      	cmp	r3, #1
 8008760:	d003      	beq.n	800876a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008762:	f06f 0302 	mvn.w	r3, #2
 8008766:	61fb      	str	r3, [r7, #28]
 8008768:	e028      	b.n	80087bc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d025      	beq.n	80087bc <osMessageQueuePut+0xb0>
 8008770:	4b15      	ldr	r3, [pc, #84]	; (80087c8 <osMessageQueuePut+0xbc>)
 8008772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008776:	601a      	str	r2, [r3, #0]
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	e01c      	b.n	80087bc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d002      	beq.n	800878e <osMessageQueuePut+0x82>
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d103      	bne.n	8008796 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800878e:	f06f 0303 	mvn.w	r3, #3
 8008792:	61fb      	str	r3, [r7, #28]
 8008794:	e012      	b.n	80087bc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008796:	2300      	movs	r3, #0
 8008798:	683a      	ldr	r2, [r7, #0]
 800879a:	68b9      	ldr	r1, [r7, #8]
 800879c:	69b8      	ldr	r0, [r7, #24]
 800879e:	f000 fa99 	bl	8008cd4 <xQueueGenericSend>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d009      	beq.n	80087bc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d003      	beq.n	80087b6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80087ae:	f06f 0301 	mvn.w	r3, #1
 80087b2:	61fb      	str	r3, [r7, #28]
 80087b4:	e002      	b.n	80087bc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80087b6:	f06f 0302 	mvn.w	r3, #2
 80087ba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80087bc:	69fb      	ldr	r3, [r7, #28]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3720      	adds	r7, #32
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	e000ed04 	.word	0xe000ed04

080087cc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b088      	sub	sp, #32
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
 80087d8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80087de:	2300      	movs	r3, #0
 80087e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087e2:	f3ef 8305 	mrs	r3, IPSR
 80087e6:	617b      	str	r3, [r7, #20]
  return(result);
 80087e8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d028      	beq.n	8008840 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d005      	beq.n	8008800 <osMessageQueueGet+0x34>
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d002      	beq.n	8008800 <osMessageQueueGet+0x34>
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d003      	beq.n	8008808 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008800:	f06f 0303 	mvn.w	r3, #3
 8008804:	61fb      	str	r3, [r7, #28]
 8008806:	e037      	b.n	8008878 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008808:	2300      	movs	r3, #0
 800880a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800880c:	f107 0310 	add.w	r3, r7, #16
 8008810:	461a      	mov	r2, r3
 8008812:	68b9      	ldr	r1, [r7, #8]
 8008814:	69b8      	ldr	r0, [r7, #24]
 8008816:	f000 fcd7 	bl	80091c8 <xQueueReceiveFromISR>
 800881a:	4603      	mov	r3, r0
 800881c:	2b01      	cmp	r3, #1
 800881e:	d003      	beq.n	8008828 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008820:	f06f 0302 	mvn.w	r3, #2
 8008824:	61fb      	str	r3, [r7, #28]
 8008826:	e027      	b.n	8008878 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d024      	beq.n	8008878 <osMessageQueueGet+0xac>
 800882e:	4b15      	ldr	r3, [pc, #84]	; (8008884 <osMessageQueueGet+0xb8>)
 8008830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008834:	601a      	str	r2, [r3, #0]
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	f3bf 8f6f 	isb	sy
 800883e:	e01b      	b.n	8008878 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d002      	beq.n	800884c <osMessageQueueGet+0x80>
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d103      	bne.n	8008854 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800884c:	f06f 0303 	mvn.w	r3, #3
 8008850:	61fb      	str	r3, [r7, #28]
 8008852:	e011      	b.n	8008878 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	68b9      	ldr	r1, [r7, #8]
 8008858:	69b8      	ldr	r0, [r7, #24]
 800885a:	f000 fbd5 	bl	8009008 <xQueueReceive>
 800885e:	4603      	mov	r3, r0
 8008860:	2b01      	cmp	r3, #1
 8008862:	d009      	beq.n	8008878 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d003      	beq.n	8008872 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800886a:	f06f 0301 	mvn.w	r3, #1
 800886e:	61fb      	str	r3, [r7, #28]
 8008870:	e002      	b.n	8008878 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008872:	f06f 0302 	mvn.w	r3, #2
 8008876:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008878:	69fb      	ldr	r3, [r7, #28]
}
 800887a:	4618      	mov	r0, r3
 800887c:	3720      	adds	r7, #32
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	e000ed04 	.word	0xe000ed04

08008888 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	4a07      	ldr	r2, [pc, #28]	; (80088b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8008898:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	4a06      	ldr	r2, [pc, #24]	; (80088b8 <vApplicationGetIdleTaskMemory+0x30>)
 800889e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2280      	movs	r2, #128	; 0x80
 80088a4:	601a      	str	r2, [r3, #0]
}
 80088a6:	bf00      	nop
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	20000990 	.word	0x20000990
 80088b8:	20000a50 	.word	0x20000a50

080088bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80088bc:	b480      	push	{r7}
 80088be:	b085      	sub	sp, #20
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	4a07      	ldr	r2, [pc, #28]	; (80088e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80088cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	4a06      	ldr	r2, [pc, #24]	; (80088ec <vApplicationGetTimerTaskMemory+0x30>)
 80088d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088da:	601a      	str	r2, [r3, #0]
}
 80088dc:	bf00      	nop
 80088de:	3714      	adds	r7, #20
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr
 80088e8:	20000c50 	.word	0x20000c50
 80088ec:	20000d10 	.word	0x20000d10

080088f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f103 0208 	add.w	r2, r3, #8
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f04f 32ff 	mov.w	r2, #4294967295
 8008908:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f103 0208 	add.w	r2, r3, #8
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f103 0208 	add.w	r2, r3, #8
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008924:	bf00      	nop
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800893e:	bf00      	nop
 8008940:	370c      	adds	r7, #12
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800894a:	b480      	push	{r7}
 800894c:	b085      	sub	sp, #20
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
 8008952:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	689a      	ldr	r2, [r3, #8]
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	683a      	ldr	r2, [r7, #0]
 800896e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	683a      	ldr	r2, [r7, #0]
 8008974:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	1c5a      	adds	r2, r3, #1
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	601a      	str	r2, [r3, #0]
}
 8008986:	bf00      	nop
 8008988:	3714      	adds	r7, #20
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr

08008992 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008992:	b480      	push	{r7}
 8008994:	b085      	sub	sp, #20
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
 800899a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a8:	d103      	bne.n	80089b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	60fb      	str	r3, [r7, #12]
 80089b0:	e00c      	b.n	80089cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	3308      	adds	r3, #8
 80089b6:	60fb      	str	r3, [r7, #12]
 80089b8:	e002      	b.n	80089c0 <vListInsert+0x2e>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	60fb      	str	r3, [r7, #12]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68ba      	ldr	r2, [r7, #8]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d2f6      	bcs.n	80089ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	685a      	ldr	r2, [r3, #4]
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	683a      	ldr	r2, [r7, #0]
 80089da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	683a      	ldr	r2, [r7, #0]
 80089e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	1c5a      	adds	r2, r3, #1
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	601a      	str	r2, [r3, #0]
}
 80089f8:	bf00      	nop
 80089fa:	3714      	adds	r7, #20
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	6892      	ldr	r2, [r2, #8]
 8008a1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	6852      	ldr	r2, [r2, #4]
 8008a24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d103      	bne.n	8008a38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	689a      	ldr	r2, [r3, #8]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	1e5a      	subs	r2, r3, #1
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3714      	adds	r7, #20
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d10a      	bne.n	8008a82 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a70:	f383 8811 	msr	BASEPRI, r3
 8008a74:	f3bf 8f6f 	isb	sy
 8008a78:	f3bf 8f4f 	dsb	sy
 8008a7c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008a7e:	bf00      	nop
 8008a80:	e7fe      	b.n	8008a80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008a82:	f002 fb57 	bl	800b134 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a8e:	68f9      	ldr	r1, [r7, #12]
 8008a90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008a92:	fb01 f303 	mul.w	r3, r1, r3
 8008a96:	441a      	add	r2, r3
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	68f9      	ldr	r1, [r7, #12]
 8008ab6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ab8:	fb01 f303 	mul.w	r3, r1, r3
 8008abc:	441a      	add	r2, r3
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	22ff      	movs	r2, #255	; 0xff
 8008ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	22ff      	movs	r2, #255	; 0xff
 8008ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d114      	bne.n	8008b02 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d01a      	beq.n	8008b16 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	3310      	adds	r3, #16
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f001 fa05 	bl	8009ef4 <xTaskRemoveFromEventList>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d012      	beq.n	8008b16 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008af0:	4b0c      	ldr	r3, [pc, #48]	; (8008b24 <xQueueGenericReset+0xcc>)
 8008af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008af6:	601a      	str	r2, [r3, #0]
 8008af8:	f3bf 8f4f 	dsb	sy
 8008afc:	f3bf 8f6f 	isb	sy
 8008b00:	e009      	b.n	8008b16 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	3310      	adds	r3, #16
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7ff fef2 	bl	80088f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	3324      	adds	r3, #36	; 0x24
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7ff feed 	bl	80088f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008b16:	f002 fb3d 	bl	800b194 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008b1a:	2301      	movs	r3, #1
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	e000ed04 	.word	0xe000ed04

08008b28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b08e      	sub	sp, #56	; 0x38
 8008b2c:	af02      	add	r7, sp, #8
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	607a      	str	r2, [r7, #4]
 8008b34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d10a      	bne.n	8008b52 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b40:	f383 8811 	msr	BASEPRI, r3
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008b4e:	bf00      	nop
 8008b50:	e7fe      	b.n	8008b50 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10a      	bne.n	8008b6e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b6a:	bf00      	nop
 8008b6c:	e7fe      	b.n	8008b6c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d002      	beq.n	8008b7a <xQueueGenericCreateStatic+0x52>
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d001      	beq.n	8008b7e <xQueueGenericCreateStatic+0x56>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e000      	b.n	8008b80 <xQueueGenericCreateStatic+0x58>
 8008b7e:	2300      	movs	r3, #0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10a      	bne.n	8008b9a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b88:	f383 8811 	msr	BASEPRI, r3
 8008b8c:	f3bf 8f6f 	isb	sy
 8008b90:	f3bf 8f4f 	dsb	sy
 8008b94:	623b      	str	r3, [r7, #32]
}
 8008b96:	bf00      	nop
 8008b98:	e7fe      	b.n	8008b98 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d102      	bne.n	8008ba6 <xQueueGenericCreateStatic+0x7e>
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <xQueueGenericCreateStatic+0x82>
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e000      	b.n	8008bac <xQueueGenericCreateStatic+0x84>
 8008baa:	2300      	movs	r3, #0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d10a      	bne.n	8008bc6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb4:	f383 8811 	msr	BASEPRI, r3
 8008bb8:	f3bf 8f6f 	isb	sy
 8008bbc:	f3bf 8f4f 	dsb	sy
 8008bc0:	61fb      	str	r3, [r7, #28]
}
 8008bc2:	bf00      	nop
 8008bc4:	e7fe      	b.n	8008bc4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008bc6:	2350      	movs	r3, #80	; 0x50
 8008bc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	2b50      	cmp	r3, #80	; 0x50
 8008bce:	d00a      	beq.n	8008be6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd4:	f383 8811 	msr	BASEPRI, r3
 8008bd8:	f3bf 8f6f 	isb	sy
 8008bdc:	f3bf 8f4f 	dsb	sy
 8008be0:	61bb      	str	r3, [r7, #24]
}
 8008be2:	bf00      	nop
 8008be4:	e7fe      	b.n	8008be4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008be6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00d      	beq.n	8008c0e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008bfa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c00:	9300      	str	r3, [sp, #0]
 8008c02:	4613      	mov	r3, r2
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	68b9      	ldr	r1, [r7, #8]
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	f000 f83f 	bl	8008c8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3730      	adds	r7, #48	; 0x30
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b08a      	sub	sp, #40	; 0x28
 8008c1c:	af02      	add	r7, sp, #8
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	4613      	mov	r3, r2
 8008c24:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10a      	bne.n	8008c42 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c30:	f383 8811 	msr	BASEPRI, r3
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	613b      	str	r3, [r7, #16]
}
 8008c3e:	bf00      	nop
 8008c40:	e7fe      	b.n	8008c40 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	fb02 f303 	mul.w	r3, r2, r3
 8008c4a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	3350      	adds	r3, #80	; 0x50
 8008c50:	4618      	mov	r0, r3
 8008c52:	f002 fb91 	bl	800b378 <pvPortMalloc>
 8008c56:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d011      	beq.n	8008c82 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	3350      	adds	r3, #80	; 0x50
 8008c66:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c70:	79fa      	ldrb	r2, [r7, #7]
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	4613      	mov	r3, r2
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	68b9      	ldr	r1, [r7, #8]
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f000 f805 	bl	8008c8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c82:	69bb      	ldr	r3, [r7, #24]
	}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3720      	adds	r7, #32
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	607a      	str	r2, [r7, #4]
 8008c98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d103      	bne.n	8008ca8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	69ba      	ldr	r2, [r7, #24]
 8008ca4:	601a      	str	r2, [r3, #0]
 8008ca6:	e002      	b.n	8008cae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008cb4:	69bb      	ldr	r3, [r7, #24]
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008cba:	2101      	movs	r1, #1
 8008cbc:	69b8      	ldr	r0, [r7, #24]
 8008cbe:	f7ff fecb 	bl	8008a58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	78fa      	ldrb	r2, [r7, #3]
 8008cc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008cca:	bf00      	nop
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
	...

08008cd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b08e      	sub	sp, #56	; 0x38
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	607a      	str	r2, [r7, #4]
 8008ce0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d10a      	bne.n	8008d06 <xQueueGenericSend+0x32>
	__asm volatile
 8008cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf4:	f383 8811 	msr	BASEPRI, r3
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d02:	bf00      	nop
 8008d04:	e7fe      	b.n	8008d04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d103      	bne.n	8008d14 <xQueueGenericSend+0x40>
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d101      	bne.n	8008d18 <xQueueGenericSend+0x44>
 8008d14:	2301      	movs	r3, #1
 8008d16:	e000      	b.n	8008d1a <xQueueGenericSend+0x46>
 8008d18:	2300      	movs	r3, #0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d10a      	bne.n	8008d34 <xQueueGenericSend+0x60>
	__asm volatile
 8008d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d22:	f383 8811 	msr	BASEPRI, r3
 8008d26:	f3bf 8f6f 	isb	sy
 8008d2a:	f3bf 8f4f 	dsb	sy
 8008d2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d30:	bf00      	nop
 8008d32:	e7fe      	b.n	8008d32 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d103      	bne.n	8008d42 <xQueueGenericSend+0x6e>
 8008d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d101      	bne.n	8008d46 <xQueueGenericSend+0x72>
 8008d42:	2301      	movs	r3, #1
 8008d44:	e000      	b.n	8008d48 <xQueueGenericSend+0x74>
 8008d46:	2300      	movs	r3, #0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d10a      	bne.n	8008d62 <xQueueGenericSend+0x8e>
	__asm volatile
 8008d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d50:	f383 8811 	msr	BASEPRI, r3
 8008d54:	f3bf 8f6f 	isb	sy
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	623b      	str	r3, [r7, #32]
}
 8008d5e:	bf00      	nop
 8008d60:	e7fe      	b.n	8008d60 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d62:	f001 fa89 	bl	800a278 <xTaskGetSchedulerState>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d102      	bne.n	8008d72 <xQueueGenericSend+0x9e>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d101      	bne.n	8008d76 <xQueueGenericSend+0xa2>
 8008d72:	2301      	movs	r3, #1
 8008d74:	e000      	b.n	8008d78 <xQueueGenericSend+0xa4>
 8008d76:	2300      	movs	r3, #0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10a      	bne.n	8008d92 <xQueueGenericSend+0xbe>
	__asm volatile
 8008d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d80:	f383 8811 	msr	BASEPRI, r3
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	61fb      	str	r3, [r7, #28]
}
 8008d8e:	bf00      	nop
 8008d90:	e7fe      	b.n	8008d90 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d92:	f002 f9cf 	bl	800b134 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d302      	bcc.n	8008da8 <xQueueGenericSend+0xd4>
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d129      	bne.n	8008dfc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008da8:	683a      	ldr	r2, [r7, #0]
 8008daa:	68b9      	ldr	r1, [r7, #8]
 8008dac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dae:	f000 fa8b 	bl	80092c8 <prvCopyDataToQueue>
 8008db2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d010      	beq.n	8008dde <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dbe:	3324      	adds	r3, #36	; 0x24
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f001 f897 	bl	8009ef4 <xTaskRemoveFromEventList>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d013      	beq.n	8008df4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008dcc:	4b3f      	ldr	r3, [pc, #252]	; (8008ecc <xQueueGenericSend+0x1f8>)
 8008dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dd2:	601a      	str	r2, [r3, #0]
 8008dd4:	f3bf 8f4f 	dsb	sy
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	e00a      	b.n	8008df4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d007      	beq.n	8008df4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008de4:	4b39      	ldr	r3, [pc, #228]	; (8008ecc <xQueueGenericSend+0x1f8>)
 8008de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dea:	601a      	str	r2, [r3, #0]
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008df4:	f002 f9ce 	bl	800b194 <vPortExitCritical>
				return pdPASS;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e063      	b.n	8008ec4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d103      	bne.n	8008e0a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e02:	f002 f9c7 	bl	800b194 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008e06:	2300      	movs	r3, #0
 8008e08:	e05c      	b.n	8008ec4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d106      	bne.n	8008e1e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e10:	f107 0314 	add.w	r3, r7, #20
 8008e14:	4618      	mov	r0, r3
 8008e16:	f001 f8d1 	bl	8009fbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e1e:	f002 f9b9 	bl	800b194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e22:	f000 fe21 	bl	8009a68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e26:	f002 f985 	bl	800b134 <vPortEnterCritical>
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e30:	b25b      	sxtb	r3, r3
 8008e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e36:	d103      	bne.n	8008e40 <xQueueGenericSend+0x16c>
 8008e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e46:	b25b      	sxtb	r3, r3
 8008e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e4c:	d103      	bne.n	8008e56 <xQueueGenericSend+0x182>
 8008e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e50:	2200      	movs	r2, #0
 8008e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e56:	f002 f99d 	bl	800b194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e5a:	1d3a      	adds	r2, r7, #4
 8008e5c:	f107 0314 	add.w	r3, r7, #20
 8008e60:	4611      	mov	r1, r2
 8008e62:	4618      	mov	r0, r3
 8008e64:	f001 f8c0 	bl	8009fe8 <xTaskCheckForTimeOut>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d124      	bne.n	8008eb8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008e6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e70:	f000 fb22 	bl	80094b8 <prvIsQueueFull>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d018      	beq.n	8008eac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7c:	3310      	adds	r3, #16
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	4611      	mov	r1, r2
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 ffe6 	bl	8009e54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e8a:	f000 faad 	bl	80093e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008e8e:	f000 fdf9 	bl	8009a84 <xTaskResumeAll>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f47f af7c 	bne.w	8008d92 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008e9a:	4b0c      	ldr	r3, [pc, #48]	; (8008ecc <xQueueGenericSend+0x1f8>)
 8008e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ea0:	601a      	str	r2, [r3, #0]
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	f3bf 8f6f 	isb	sy
 8008eaa:	e772      	b.n	8008d92 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008eae:	f000 fa9b 	bl	80093e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008eb2:	f000 fde7 	bl	8009a84 <xTaskResumeAll>
 8008eb6:	e76c      	b.n	8008d92 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008eb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008eba:	f000 fa95 	bl	80093e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ebe:	f000 fde1 	bl	8009a84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008ec2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3738      	adds	r7, #56	; 0x38
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	e000ed04 	.word	0xe000ed04

08008ed0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b090      	sub	sp, #64	; 0x40
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	607a      	str	r2, [r7, #4]
 8008edc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10a      	bne.n	8008efe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eec:	f383 8811 	msr	BASEPRI, r3
 8008ef0:	f3bf 8f6f 	isb	sy
 8008ef4:	f3bf 8f4f 	dsb	sy
 8008ef8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008efa:	bf00      	nop
 8008efc:	e7fe      	b.n	8008efc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d103      	bne.n	8008f0c <xQueueGenericSendFromISR+0x3c>
 8008f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d101      	bne.n	8008f10 <xQueueGenericSendFromISR+0x40>
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e000      	b.n	8008f12 <xQueueGenericSendFromISR+0x42>
 8008f10:	2300      	movs	r3, #0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d10a      	bne.n	8008f2c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1a:	f383 8811 	msr	BASEPRI, r3
 8008f1e:	f3bf 8f6f 	isb	sy
 8008f22:	f3bf 8f4f 	dsb	sy
 8008f26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f28:	bf00      	nop
 8008f2a:	e7fe      	b.n	8008f2a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	d103      	bne.n	8008f3a <xQueueGenericSendFromISR+0x6a>
 8008f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d101      	bne.n	8008f3e <xQueueGenericSendFromISR+0x6e>
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e000      	b.n	8008f40 <xQueueGenericSendFromISR+0x70>
 8008f3e:	2300      	movs	r3, #0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d10a      	bne.n	8008f5a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f48:	f383 8811 	msr	BASEPRI, r3
 8008f4c:	f3bf 8f6f 	isb	sy
 8008f50:	f3bf 8f4f 	dsb	sy
 8008f54:	623b      	str	r3, [r7, #32]
}
 8008f56:	bf00      	nop
 8008f58:	e7fe      	b.n	8008f58 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f5a:	f002 f9cd 	bl	800b2f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008f5e:	f3ef 8211 	mrs	r2, BASEPRI
 8008f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f66:	f383 8811 	msr	BASEPRI, r3
 8008f6a:	f3bf 8f6f 	isb	sy
 8008f6e:	f3bf 8f4f 	dsb	sy
 8008f72:	61fa      	str	r2, [r7, #28]
 8008f74:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008f76:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f78:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d302      	bcc.n	8008f8c <xQueueGenericSendFromISR+0xbc>
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d12f      	bne.n	8008fec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f9c:	683a      	ldr	r2, [r7, #0]
 8008f9e:	68b9      	ldr	r1, [r7, #8]
 8008fa0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008fa2:	f000 f991 	bl	80092c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008fa6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fae:	d112      	bne.n	8008fd6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d016      	beq.n	8008fe6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fba:	3324      	adds	r3, #36	; 0x24
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f000 ff99 	bl	8009ef4 <xTaskRemoveFromEventList>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00e      	beq.n	8008fe6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00b      	beq.n	8008fe6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	601a      	str	r2, [r3, #0]
 8008fd4:	e007      	b.n	8008fe6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008fd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008fda:	3301      	adds	r3, #1
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	b25a      	sxtb	r2, r3
 8008fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008fea:	e001      	b.n	8008ff0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008fec:	2300      	movs	r3, #0
 8008fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ff2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008ffa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3740      	adds	r7, #64	; 0x40
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
	...

08009008 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b08c      	sub	sp, #48	; 0x30
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009014:	2300      	movs	r3, #0
 8009016:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800901c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901e:	2b00      	cmp	r3, #0
 8009020:	d10a      	bne.n	8009038 <xQueueReceive+0x30>
	__asm volatile
 8009022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009026:	f383 8811 	msr	BASEPRI, r3
 800902a:	f3bf 8f6f 	isb	sy
 800902e:	f3bf 8f4f 	dsb	sy
 8009032:	623b      	str	r3, [r7, #32]
}
 8009034:	bf00      	nop
 8009036:	e7fe      	b.n	8009036 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d103      	bne.n	8009046 <xQueueReceive+0x3e>
 800903e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009042:	2b00      	cmp	r3, #0
 8009044:	d101      	bne.n	800904a <xQueueReceive+0x42>
 8009046:	2301      	movs	r3, #1
 8009048:	e000      	b.n	800904c <xQueueReceive+0x44>
 800904a:	2300      	movs	r3, #0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d10a      	bne.n	8009066 <xQueueReceive+0x5e>
	__asm volatile
 8009050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009054:	f383 8811 	msr	BASEPRI, r3
 8009058:	f3bf 8f6f 	isb	sy
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	61fb      	str	r3, [r7, #28]
}
 8009062:	bf00      	nop
 8009064:	e7fe      	b.n	8009064 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009066:	f001 f907 	bl	800a278 <xTaskGetSchedulerState>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d102      	bne.n	8009076 <xQueueReceive+0x6e>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d101      	bne.n	800907a <xQueueReceive+0x72>
 8009076:	2301      	movs	r3, #1
 8009078:	e000      	b.n	800907c <xQueueReceive+0x74>
 800907a:	2300      	movs	r3, #0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d10a      	bne.n	8009096 <xQueueReceive+0x8e>
	__asm volatile
 8009080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009084:	f383 8811 	msr	BASEPRI, r3
 8009088:	f3bf 8f6f 	isb	sy
 800908c:	f3bf 8f4f 	dsb	sy
 8009090:	61bb      	str	r3, [r7, #24]
}
 8009092:	bf00      	nop
 8009094:	e7fe      	b.n	8009094 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009096:	f002 f84d 	bl	800b134 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800909a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d01f      	beq.n	80090e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80090a6:	68b9      	ldr	r1, [r7, #8]
 80090a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090aa:	f000 f977 	bl	800939c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80090ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b0:	1e5a      	subs	r2, r3, #1
 80090b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00f      	beq.n	80090de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c0:	3310      	adds	r3, #16
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 ff16 	bl	8009ef4 <xTaskRemoveFromEventList>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d007      	beq.n	80090de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80090ce:	4b3d      	ldr	r3, [pc, #244]	; (80091c4 <xQueueReceive+0x1bc>)
 80090d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090d4:	601a      	str	r2, [r3, #0]
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80090de:	f002 f859 	bl	800b194 <vPortExitCritical>
				return pdPASS;
 80090e2:	2301      	movs	r3, #1
 80090e4:	e069      	b.n	80091ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d103      	bne.n	80090f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80090ec:	f002 f852 	bl	800b194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80090f0:	2300      	movs	r3, #0
 80090f2:	e062      	b.n	80091ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d106      	bne.n	8009108 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090fa:	f107 0310 	add.w	r3, r7, #16
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 ff5c 	bl	8009fbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009104:	2301      	movs	r3, #1
 8009106:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009108:	f002 f844 	bl	800b194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800910c:	f000 fcac 	bl	8009a68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009110:	f002 f810 	bl	800b134 <vPortEnterCritical>
 8009114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009116:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800911a:	b25b      	sxtb	r3, r3
 800911c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009120:	d103      	bne.n	800912a <xQueueReceive+0x122>
 8009122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009124:	2200      	movs	r2, #0
 8009126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800912a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009130:	b25b      	sxtb	r3, r3
 8009132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009136:	d103      	bne.n	8009140 <xQueueReceive+0x138>
 8009138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913a:	2200      	movs	r2, #0
 800913c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009140:	f002 f828 	bl	800b194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009144:	1d3a      	adds	r2, r7, #4
 8009146:	f107 0310 	add.w	r3, r7, #16
 800914a:	4611      	mov	r1, r2
 800914c:	4618      	mov	r0, r3
 800914e:	f000 ff4b 	bl	8009fe8 <xTaskCheckForTimeOut>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	d123      	bne.n	80091a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800915a:	f000 f997 	bl	800948c <prvIsQueueEmpty>
 800915e:	4603      	mov	r3, r0
 8009160:	2b00      	cmp	r3, #0
 8009162:	d017      	beq.n	8009194 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009166:	3324      	adds	r3, #36	; 0x24
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	4611      	mov	r1, r2
 800916c:	4618      	mov	r0, r3
 800916e:	f000 fe71 	bl	8009e54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009174:	f000 f938 	bl	80093e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009178:	f000 fc84 	bl	8009a84 <xTaskResumeAll>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d189      	bne.n	8009096 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009182:	4b10      	ldr	r3, [pc, #64]	; (80091c4 <xQueueReceive+0x1bc>)
 8009184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009188:	601a      	str	r2, [r3, #0]
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	e780      	b.n	8009096 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009196:	f000 f927 	bl	80093e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800919a:	f000 fc73 	bl	8009a84 <xTaskResumeAll>
 800919e:	e77a      	b.n	8009096 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80091a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091a2:	f000 f921 	bl	80093e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091a6:	f000 fc6d 	bl	8009a84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091ac:	f000 f96e 	bl	800948c <prvIsQueueEmpty>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f43f af6f 	beq.w	8009096 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80091b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3730      	adds	r7, #48	; 0x30
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	e000ed04 	.word	0xe000ed04

080091c8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b08e      	sub	sp, #56	; 0x38
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80091d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10a      	bne.n	80091f4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80091de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	623b      	str	r3, [r7, #32]
}
 80091f0:	bf00      	nop
 80091f2:	e7fe      	b.n	80091f2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d103      	bne.n	8009202 <xQueueReceiveFromISR+0x3a>
 80091fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d101      	bne.n	8009206 <xQueueReceiveFromISR+0x3e>
 8009202:	2301      	movs	r3, #1
 8009204:	e000      	b.n	8009208 <xQueueReceiveFromISR+0x40>
 8009206:	2300      	movs	r3, #0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d10a      	bne.n	8009222 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800920c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009210:	f383 8811 	msr	BASEPRI, r3
 8009214:	f3bf 8f6f 	isb	sy
 8009218:	f3bf 8f4f 	dsb	sy
 800921c:	61fb      	str	r3, [r7, #28]
}
 800921e:	bf00      	nop
 8009220:	e7fe      	b.n	8009220 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009222:	f002 f869 	bl	800b2f8 <vPortValidateInterruptPriority>
	__asm volatile
 8009226:	f3ef 8211 	mrs	r2, BASEPRI
 800922a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922e:	f383 8811 	msr	BASEPRI, r3
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	61ba      	str	r2, [r7, #24]
 800923c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800923e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009240:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009246:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924a:	2b00      	cmp	r3, #0
 800924c:	d02f      	beq.n	80092ae <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800924e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009250:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009258:	68b9      	ldr	r1, [r7, #8]
 800925a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800925c:	f000 f89e 	bl	800939c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009262:	1e5a      	subs	r2, r3, #1
 8009264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009266:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009268:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800926c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009270:	d112      	bne.n	8009298 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d016      	beq.n	80092a8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800927a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927c:	3310      	adds	r3, #16
 800927e:	4618      	mov	r0, r3
 8009280:	f000 fe38 	bl	8009ef4 <xTaskRemoveFromEventList>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00e      	beq.n	80092a8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00b      	beq.n	80092a8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	601a      	str	r2, [r3, #0]
 8009296:	e007      	b.n	80092a8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800929c:	3301      	adds	r3, #1
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	b25a      	sxtb	r2, r3
 80092a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80092a8:	2301      	movs	r3, #1
 80092aa:	637b      	str	r3, [r7, #52]	; 0x34
 80092ac:	e001      	b.n	80092b2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80092ae:	2300      	movs	r3, #0
 80092b0:	637b      	str	r3, [r7, #52]	; 0x34
 80092b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	f383 8811 	msr	BASEPRI, r3
}
 80092bc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80092be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3738      	adds	r7, #56	; 0x38
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80092d4:	2300      	movs	r3, #0
 80092d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10d      	bne.n	8009302 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d14d      	bne.n	800938a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	4618      	mov	r0, r3
 80092f4:	f000 ffde 	bl	800a2b4 <xTaskPriorityDisinherit>
 80092f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	609a      	str	r2, [r3, #8]
 8009300:	e043      	b.n	800938a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d119      	bne.n	800933c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6858      	ldr	r0, [r3, #4]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009310:	461a      	mov	r2, r3
 8009312:	68b9      	ldr	r1, [r7, #8]
 8009314:	f002 fb3d 	bl	800b992 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	685a      	ldr	r2, [r3, #4]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009320:	441a      	add	r2, r3
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	685a      	ldr	r2, [r3, #4]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	429a      	cmp	r2, r3
 8009330:	d32b      	bcc.n	800938a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	605a      	str	r2, [r3, #4]
 800933a:	e026      	b.n	800938a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	68d8      	ldr	r0, [r3, #12]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009344:	461a      	mov	r2, r3
 8009346:	68b9      	ldr	r1, [r7, #8]
 8009348:	f002 fb23 	bl	800b992 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	68da      	ldr	r2, [r3, #12]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009354:	425b      	negs	r3, r3
 8009356:	441a      	add	r2, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	68da      	ldr	r2, [r3, #12]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	429a      	cmp	r2, r3
 8009366:	d207      	bcs.n	8009378 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	689a      	ldr	r2, [r3, #8]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009370:	425b      	negs	r3, r3
 8009372:	441a      	add	r2, r3
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b02      	cmp	r3, #2
 800937c:	d105      	bne.n	800938a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d002      	beq.n	800938a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	3b01      	subs	r3, #1
 8009388:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	1c5a      	adds	r2, r3, #1
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009392:	697b      	ldr	r3, [r7, #20]
}
 8009394:	4618      	mov	r0, r3
 8009396:	3718      	adds	r7, #24
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d018      	beq.n	80093e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	68da      	ldr	r2, [r3, #12]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b6:	441a      	add	r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	68da      	ldr	r2, [r3, #12]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d303      	bcc.n	80093d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	68d9      	ldr	r1, [r3, #12]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d8:	461a      	mov	r2, r3
 80093da:	6838      	ldr	r0, [r7, #0]
 80093dc:	f002 fad9 	bl	800b992 <memcpy>
	}
}
 80093e0:	bf00      	nop
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80093f0:	f001 fea0 	bl	800b134 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093fc:	e011      	b.n	8009422 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009402:	2b00      	cmp	r3, #0
 8009404:	d012      	beq.n	800942c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	3324      	adds	r3, #36	; 0x24
 800940a:	4618      	mov	r0, r3
 800940c:	f000 fd72 	bl	8009ef4 <xTaskRemoveFromEventList>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d001      	beq.n	800941a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009416:	f000 fe49 	bl	800a0ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800941a:	7bfb      	ldrb	r3, [r7, #15]
 800941c:	3b01      	subs	r3, #1
 800941e:	b2db      	uxtb	r3, r3
 8009420:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009426:	2b00      	cmp	r3, #0
 8009428:	dce9      	bgt.n	80093fe <prvUnlockQueue+0x16>
 800942a:	e000      	b.n	800942e <prvUnlockQueue+0x46>
					break;
 800942c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	22ff      	movs	r2, #255	; 0xff
 8009432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009436:	f001 fead 	bl	800b194 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800943a:	f001 fe7b 	bl	800b134 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009444:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009446:	e011      	b.n	800946c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d012      	beq.n	8009476 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	3310      	adds	r3, #16
 8009454:	4618      	mov	r0, r3
 8009456:	f000 fd4d 	bl	8009ef4 <xTaskRemoveFromEventList>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d001      	beq.n	8009464 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009460:	f000 fe24 	bl	800a0ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009464:	7bbb      	ldrb	r3, [r7, #14]
 8009466:	3b01      	subs	r3, #1
 8009468:	b2db      	uxtb	r3, r3
 800946a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800946c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009470:	2b00      	cmp	r3, #0
 8009472:	dce9      	bgt.n	8009448 <prvUnlockQueue+0x60>
 8009474:	e000      	b.n	8009478 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009476:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	22ff      	movs	r2, #255	; 0xff
 800947c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009480:	f001 fe88 	bl	800b194 <vPortExitCritical>
}
 8009484:	bf00      	nop
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009494:	f001 fe4e 	bl	800b134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800949c:	2b00      	cmp	r3, #0
 800949e:	d102      	bne.n	80094a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80094a0:	2301      	movs	r3, #1
 80094a2:	60fb      	str	r3, [r7, #12]
 80094a4:	e001      	b.n	80094aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80094a6:	2300      	movs	r3, #0
 80094a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094aa:	f001 fe73 	bl	800b194 <vPortExitCritical>

	return xReturn;
 80094ae:	68fb      	ldr	r3, [r7, #12]
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80094c0:	f001 fe38 	bl	800b134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d102      	bne.n	80094d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80094d0:	2301      	movs	r3, #1
 80094d2:	60fb      	str	r3, [r7, #12]
 80094d4:	e001      	b.n	80094da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80094d6:	2300      	movs	r3, #0
 80094d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094da:	f001 fe5b 	bl	800b194 <vPortExitCritical>

	return xReturn;
 80094de:	68fb      	ldr	r3, [r7, #12]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094f2:	2300      	movs	r3, #0
 80094f4:	60fb      	str	r3, [r7, #12]
 80094f6:	e014      	b.n	8009522 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80094f8:	4a0f      	ldr	r2, [pc, #60]	; (8009538 <vQueueAddToRegistry+0x50>)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d10b      	bne.n	800951c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009504:	490c      	ldr	r1, [pc, #48]	; (8009538 <vQueueAddToRegistry+0x50>)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	683a      	ldr	r2, [r7, #0]
 800950a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800950e:	4a0a      	ldr	r2, [pc, #40]	; (8009538 <vQueueAddToRegistry+0x50>)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	00db      	lsls	r3, r3, #3
 8009514:	4413      	add	r3, r2
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800951a:	e006      	b.n	800952a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	3301      	adds	r3, #1
 8009520:	60fb      	str	r3, [r7, #12]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2b07      	cmp	r3, #7
 8009526:	d9e7      	bls.n	80094f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009528:	bf00      	nop
 800952a:	bf00      	nop
 800952c:	3714      	adds	r7, #20
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	20001110 	.word	0x20001110

0800953c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800953c:	b580      	push	{r7, lr}
 800953e:	b086      	sub	sp, #24
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800954c:	f001 fdf2 	bl	800b134 <vPortEnterCritical>
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009556:	b25b      	sxtb	r3, r3
 8009558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800955c:	d103      	bne.n	8009566 <vQueueWaitForMessageRestricted+0x2a>
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	2200      	movs	r2, #0
 8009562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800956c:	b25b      	sxtb	r3, r3
 800956e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009572:	d103      	bne.n	800957c <vQueueWaitForMessageRestricted+0x40>
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	2200      	movs	r2, #0
 8009578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800957c:	f001 fe0a 	bl	800b194 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009584:	2b00      	cmp	r3, #0
 8009586:	d106      	bne.n	8009596 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	3324      	adds	r3, #36	; 0x24
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	68b9      	ldr	r1, [r7, #8]
 8009590:	4618      	mov	r0, r3
 8009592:	f000 fc83 	bl	8009e9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009596:	6978      	ldr	r0, [r7, #20]
 8009598:	f7ff ff26 	bl	80093e8 <prvUnlockQueue>
	}
 800959c:	bf00      	nop
 800959e:	3718      	adds	r7, #24
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b08e      	sub	sp, #56	; 0x38
 80095a8:	af04      	add	r7, sp, #16
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
 80095b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80095b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10a      	bne.n	80095ce <xTaskCreateStatic+0x2a>
	__asm volatile
 80095b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095bc:	f383 8811 	msr	BASEPRI, r3
 80095c0:	f3bf 8f6f 	isb	sy
 80095c4:	f3bf 8f4f 	dsb	sy
 80095c8:	623b      	str	r3, [r7, #32]
}
 80095ca:	bf00      	nop
 80095cc:	e7fe      	b.n	80095cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80095ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d10a      	bne.n	80095ea <xTaskCreateStatic+0x46>
	__asm volatile
 80095d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d8:	f383 8811 	msr	BASEPRI, r3
 80095dc:	f3bf 8f6f 	isb	sy
 80095e0:	f3bf 8f4f 	dsb	sy
 80095e4:	61fb      	str	r3, [r7, #28]
}
 80095e6:	bf00      	nop
 80095e8:	e7fe      	b.n	80095e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80095ea:	23c0      	movs	r3, #192	; 0xc0
 80095ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	2bc0      	cmp	r3, #192	; 0xc0
 80095f2:	d00a      	beq.n	800960a <xTaskCreateStatic+0x66>
	__asm volatile
 80095f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f8:	f383 8811 	msr	BASEPRI, r3
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	61bb      	str	r3, [r7, #24]
}
 8009606:	bf00      	nop
 8009608:	e7fe      	b.n	8009608 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800960a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800960c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960e:	2b00      	cmp	r3, #0
 8009610:	d01e      	beq.n	8009650 <xTaskCreateStatic+0xac>
 8009612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009614:	2b00      	cmp	r3, #0
 8009616:	d01b      	beq.n	8009650 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800961c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009620:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009624:	2202      	movs	r2, #2
 8009626:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800962a:	2300      	movs	r3, #0
 800962c:	9303      	str	r3, [sp, #12]
 800962e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009630:	9302      	str	r3, [sp, #8]
 8009632:	f107 0314 	add.w	r3, r7, #20
 8009636:	9301      	str	r3, [sp, #4]
 8009638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963a:	9300      	str	r3, [sp, #0]
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	68b9      	ldr	r1, [r7, #8]
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f000 f850 	bl	80096e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009648:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800964a:	f000 f8f7 	bl	800983c <prvAddNewTaskToReadyList>
 800964e:	e001      	b.n	8009654 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009650:	2300      	movs	r3, #0
 8009652:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009654:	697b      	ldr	r3, [r7, #20]
	}
 8009656:	4618      	mov	r0, r3
 8009658:	3728      	adds	r7, #40	; 0x28
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800965e:	b580      	push	{r7, lr}
 8009660:	b08c      	sub	sp, #48	; 0x30
 8009662:	af04      	add	r7, sp, #16
 8009664:	60f8      	str	r0, [r7, #12]
 8009666:	60b9      	str	r1, [r7, #8]
 8009668:	603b      	str	r3, [r7, #0]
 800966a:	4613      	mov	r3, r2
 800966c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800966e:	88fb      	ldrh	r3, [r7, #6]
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	4618      	mov	r0, r3
 8009674:	f001 fe80 	bl	800b378 <pvPortMalloc>
 8009678:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00e      	beq.n	800969e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009680:	20c0      	movs	r0, #192	; 0xc0
 8009682:	f001 fe79 	bl	800b378 <pvPortMalloc>
 8009686:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d003      	beq.n	8009696 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	697a      	ldr	r2, [r7, #20]
 8009692:	631a      	str	r2, [r3, #48]	; 0x30
 8009694:	e005      	b.n	80096a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009696:	6978      	ldr	r0, [r7, #20]
 8009698:	f001 ff3a 	bl	800b510 <vPortFree>
 800969c:	e001      	b.n	80096a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800969e:	2300      	movs	r3, #0
 80096a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d017      	beq.n	80096d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80096b0:	88fa      	ldrh	r2, [r7, #6]
 80096b2:	2300      	movs	r3, #0
 80096b4:	9303      	str	r3, [sp, #12]
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	9302      	str	r3, [sp, #8]
 80096ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096bc:	9301      	str	r3, [sp, #4]
 80096be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c0:	9300      	str	r3, [sp, #0]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	68b9      	ldr	r1, [r7, #8]
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f000 f80e 	bl	80096e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80096cc:	69f8      	ldr	r0, [r7, #28]
 80096ce:	f000 f8b5 	bl	800983c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80096d2:	2301      	movs	r3, #1
 80096d4:	61bb      	str	r3, [r7, #24]
 80096d6:	e002      	b.n	80096de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80096d8:	f04f 33ff 	mov.w	r3, #4294967295
 80096dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80096de:	69bb      	ldr	r3, [r7, #24]
	}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3720      	adds	r7, #32
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b088      	sub	sp, #32
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	607a      	str	r2, [r7, #4]
 80096f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80096f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	461a      	mov	r2, r3
 8009700:	21a5      	movs	r1, #165	; 0xa5
 8009702:	f002 f954 	bl	800b9ae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009710:	3b01      	subs	r3, #1
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	4413      	add	r3, r2
 8009716:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	f023 0307 	bic.w	r3, r3, #7
 800971e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	f003 0307 	and.w	r3, r3, #7
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00a      	beq.n	8009740 <prvInitialiseNewTask+0x58>
	__asm volatile
 800972a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972e:	f383 8811 	msr	BASEPRI, r3
 8009732:	f3bf 8f6f 	isb	sy
 8009736:	f3bf 8f4f 	dsb	sy
 800973a:	617b      	str	r3, [r7, #20]
}
 800973c:	bf00      	nop
 800973e:	e7fe      	b.n	800973e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d01f      	beq.n	8009786 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009746:	2300      	movs	r3, #0
 8009748:	61fb      	str	r3, [r7, #28]
 800974a:	e012      	b.n	8009772 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	4413      	add	r3, r2
 8009752:	7819      	ldrb	r1, [r3, #0]
 8009754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	4413      	add	r3, r2
 800975a:	3334      	adds	r3, #52	; 0x34
 800975c:	460a      	mov	r2, r1
 800975e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	4413      	add	r3, r2
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d006      	beq.n	800977a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	3301      	adds	r3, #1
 8009770:	61fb      	str	r3, [r7, #28]
 8009772:	69fb      	ldr	r3, [r7, #28]
 8009774:	2b0f      	cmp	r3, #15
 8009776:	d9e9      	bls.n	800974c <prvInitialiseNewTask+0x64>
 8009778:	e000      	b.n	800977c <prvInitialiseNewTask+0x94>
			{
				break;
 800977a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800977c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977e:	2200      	movs	r2, #0
 8009780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009784:	e003      	b.n	800978e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009788:	2200      	movs	r2, #0
 800978a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800978e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009790:	2b37      	cmp	r3, #55	; 0x37
 8009792:	d901      	bls.n	8009798 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009794:	2337      	movs	r3, #55	; 0x37
 8009796:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800979c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800979e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80097a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a6:	2200      	movs	r2, #0
 80097a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80097aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ac:	3304      	adds	r3, #4
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7ff f8be 	bl	8008930 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80097b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b6:	3318      	adds	r3, #24
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7ff f8b9 	bl	8008930 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80097be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80097ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80097ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80097d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d6:	2200      	movs	r2, #0
 80097d8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80097da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097dc:	2200      	movs	r2, #0
 80097de:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80097e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e4:	2200      	movs	r2, #0
 80097e6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80097ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ec:	3358      	adds	r3, #88	; 0x58
 80097ee:	2260      	movs	r2, #96	; 0x60
 80097f0:	2100      	movs	r1, #0
 80097f2:	4618      	mov	r0, r3
 80097f4:	f002 f8db 	bl	800b9ae <memset>
 80097f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fa:	4a0d      	ldr	r2, [pc, #52]	; (8009830 <prvInitialiseNewTask+0x148>)
 80097fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80097fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009800:	4a0c      	ldr	r2, [pc, #48]	; (8009834 <prvInitialiseNewTask+0x14c>)
 8009802:	661a      	str	r2, [r3, #96]	; 0x60
 8009804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009806:	4a0c      	ldr	r2, [pc, #48]	; (8009838 <prvInitialiseNewTask+0x150>)
 8009808:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	68f9      	ldr	r1, [r7, #12]
 800980e:	69b8      	ldr	r0, [r7, #24]
 8009810:	f001 fb62 	bl	800aed8 <pxPortInitialiseStack>
 8009814:	4602      	mov	r2, r0
 8009816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009818:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800981a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800981c:	2b00      	cmp	r3, #0
 800981e:	d002      	beq.n	8009826 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009826:	bf00      	nop
 8009828:	3720      	adds	r7, #32
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	0800d1f4 	.word	0x0800d1f4
 8009834:	0800d214 	.word	0x0800d214
 8009838:	0800d1d4 	.word	0x0800d1d4

0800983c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009844:	f001 fc76 	bl	800b134 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009848:	4b2d      	ldr	r3, [pc, #180]	; (8009900 <prvAddNewTaskToReadyList+0xc4>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	3301      	adds	r3, #1
 800984e:	4a2c      	ldr	r2, [pc, #176]	; (8009900 <prvAddNewTaskToReadyList+0xc4>)
 8009850:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009852:	4b2c      	ldr	r3, [pc, #176]	; (8009904 <prvAddNewTaskToReadyList+0xc8>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d109      	bne.n	800986e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800985a:	4a2a      	ldr	r2, [pc, #168]	; (8009904 <prvAddNewTaskToReadyList+0xc8>)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009860:	4b27      	ldr	r3, [pc, #156]	; (8009900 <prvAddNewTaskToReadyList+0xc4>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2b01      	cmp	r3, #1
 8009866:	d110      	bne.n	800988a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009868:	f000 fc44 	bl	800a0f4 <prvInitialiseTaskLists>
 800986c:	e00d      	b.n	800988a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800986e:	4b26      	ldr	r3, [pc, #152]	; (8009908 <prvAddNewTaskToReadyList+0xcc>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d109      	bne.n	800988a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009876:	4b23      	ldr	r3, [pc, #140]	; (8009904 <prvAddNewTaskToReadyList+0xc8>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009880:	429a      	cmp	r2, r3
 8009882:	d802      	bhi.n	800988a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009884:	4a1f      	ldr	r2, [pc, #124]	; (8009904 <prvAddNewTaskToReadyList+0xc8>)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800988a:	4b20      	ldr	r3, [pc, #128]	; (800990c <prvAddNewTaskToReadyList+0xd0>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	3301      	adds	r3, #1
 8009890:	4a1e      	ldr	r2, [pc, #120]	; (800990c <prvAddNewTaskToReadyList+0xd0>)
 8009892:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009894:	4b1d      	ldr	r3, [pc, #116]	; (800990c <prvAddNewTaskToReadyList+0xd0>)
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a0:	4b1b      	ldr	r3, [pc, #108]	; (8009910 <prvAddNewTaskToReadyList+0xd4>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d903      	bls.n	80098b0 <prvAddNewTaskToReadyList+0x74>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ac:	4a18      	ldr	r2, [pc, #96]	; (8009910 <prvAddNewTaskToReadyList+0xd4>)
 80098ae:	6013      	str	r3, [r2, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098b4:	4613      	mov	r3, r2
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	4413      	add	r3, r2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	4a15      	ldr	r2, [pc, #84]	; (8009914 <prvAddNewTaskToReadyList+0xd8>)
 80098be:	441a      	add	r2, r3
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	3304      	adds	r3, #4
 80098c4:	4619      	mov	r1, r3
 80098c6:	4610      	mov	r0, r2
 80098c8:	f7ff f83f 	bl	800894a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80098cc:	f001 fc62 	bl	800b194 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80098d0:	4b0d      	ldr	r3, [pc, #52]	; (8009908 <prvAddNewTaskToReadyList+0xcc>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00e      	beq.n	80098f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80098d8:	4b0a      	ldr	r3, [pc, #40]	; (8009904 <prvAddNewTaskToReadyList+0xc8>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d207      	bcs.n	80098f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80098e6:	4b0c      	ldr	r3, [pc, #48]	; (8009918 <prvAddNewTaskToReadyList+0xdc>)
 80098e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ec:	601a      	str	r2, [r3, #0]
 80098ee:	f3bf 8f4f 	dsb	sy
 80098f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098f6:	bf00      	nop
 80098f8:	3708      	adds	r7, #8
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	20001624 	.word	0x20001624
 8009904:	20001150 	.word	0x20001150
 8009908:	20001630 	.word	0x20001630
 800990c:	20001640 	.word	0x20001640
 8009910:	2000162c 	.word	0x2000162c
 8009914:	20001154 	.word	0x20001154
 8009918:	e000ed04 	.word	0xe000ed04

0800991c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009924:	2300      	movs	r3, #0
 8009926:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d017      	beq.n	800995e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800992e:	4b13      	ldr	r3, [pc, #76]	; (800997c <vTaskDelay+0x60>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00a      	beq.n	800994c <vTaskDelay+0x30>
	__asm volatile
 8009936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993a:	f383 8811 	msr	BASEPRI, r3
 800993e:	f3bf 8f6f 	isb	sy
 8009942:	f3bf 8f4f 	dsb	sy
 8009946:	60bb      	str	r3, [r7, #8]
}
 8009948:	bf00      	nop
 800994a:	e7fe      	b.n	800994a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800994c:	f000 f88c 	bl	8009a68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009950:	2100      	movs	r1, #0
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 ff1e 	bl	800a794 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009958:	f000 f894 	bl	8009a84 <xTaskResumeAll>
 800995c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d107      	bne.n	8009974 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009964:	4b06      	ldr	r3, [pc, #24]	; (8009980 <vTaskDelay+0x64>)
 8009966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800996a:	601a      	str	r2, [r3, #0]
 800996c:	f3bf 8f4f 	dsb	sy
 8009970:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009974:	bf00      	nop
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	2000164c 	.word	0x2000164c
 8009980:	e000ed04 	.word	0xe000ed04

08009984 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b08a      	sub	sp, #40	; 0x28
 8009988:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800998a:	2300      	movs	r3, #0
 800998c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800998e:	2300      	movs	r3, #0
 8009990:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009992:	463a      	mov	r2, r7
 8009994:	1d39      	adds	r1, r7, #4
 8009996:	f107 0308 	add.w	r3, r7, #8
 800999a:	4618      	mov	r0, r3
 800999c:	f7fe ff74 	bl	8008888 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80099a0:	6839      	ldr	r1, [r7, #0]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	68ba      	ldr	r2, [r7, #8]
 80099a6:	9202      	str	r2, [sp, #8]
 80099a8:	9301      	str	r3, [sp, #4]
 80099aa:	2300      	movs	r3, #0
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	2300      	movs	r3, #0
 80099b0:	460a      	mov	r2, r1
 80099b2:	4925      	ldr	r1, [pc, #148]	; (8009a48 <vTaskStartScheduler+0xc4>)
 80099b4:	4825      	ldr	r0, [pc, #148]	; (8009a4c <vTaskStartScheduler+0xc8>)
 80099b6:	f7ff fdf5 	bl	80095a4 <xTaskCreateStatic>
 80099ba:	4603      	mov	r3, r0
 80099bc:	4a24      	ldr	r2, [pc, #144]	; (8009a50 <vTaskStartScheduler+0xcc>)
 80099be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80099c0:	4b23      	ldr	r3, [pc, #140]	; (8009a50 <vTaskStartScheduler+0xcc>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d002      	beq.n	80099ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80099c8:	2301      	movs	r3, #1
 80099ca:	617b      	str	r3, [r7, #20]
 80099cc:	e001      	b.n	80099d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80099ce:	2300      	movs	r3, #0
 80099d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d102      	bne.n	80099de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80099d8:	f000 ff30 	bl	800a83c <xTimerCreateTimerTask>
 80099dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d11d      	bne.n	8009a20 <vTaskStartScheduler+0x9c>
	__asm volatile
 80099e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e8:	f383 8811 	msr	BASEPRI, r3
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	613b      	str	r3, [r7, #16]
}
 80099f6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80099f8:	4b16      	ldr	r3, [pc, #88]	; (8009a54 <vTaskStartScheduler+0xd0>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	3358      	adds	r3, #88	; 0x58
 80099fe:	4a16      	ldr	r2, [pc, #88]	; (8009a58 <vTaskStartScheduler+0xd4>)
 8009a00:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009a02:	4b16      	ldr	r3, [pc, #88]	; (8009a5c <vTaskStartScheduler+0xd8>)
 8009a04:	f04f 32ff 	mov.w	r2, #4294967295
 8009a08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009a0a:	4b15      	ldr	r3, [pc, #84]	; (8009a60 <vTaskStartScheduler+0xdc>)
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009a10:	4b14      	ldr	r3, [pc, #80]	; (8009a64 <vTaskStartScheduler+0xe0>)
 8009a12:	2200      	movs	r2, #0
 8009a14:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8009a16:	f7f6 fddd 	bl	80005d4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009a1a:	f001 fae9 	bl	800aff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009a1e:	e00e      	b.n	8009a3e <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a26:	d10a      	bne.n	8009a3e <vTaskStartScheduler+0xba>
	__asm volatile
 8009a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2c:	f383 8811 	msr	BASEPRI, r3
 8009a30:	f3bf 8f6f 	isb	sy
 8009a34:	f3bf 8f4f 	dsb	sy
 8009a38:	60fb      	str	r3, [r7, #12]
}
 8009a3a:	bf00      	nop
 8009a3c:	e7fe      	b.n	8009a3c <vTaskStartScheduler+0xb8>
}
 8009a3e:	bf00      	nop
 8009a40:	3718      	adds	r7, #24
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	0800d08c 	.word	0x0800d08c
 8009a4c:	0800a0c5 	.word	0x0800a0c5
 8009a50:	20001648 	.word	0x20001648
 8009a54:	20001150 	.word	0x20001150
 8009a58:	20000044 	.word	0x20000044
 8009a5c:	20001644 	.word	0x20001644
 8009a60:	20001630 	.word	0x20001630
 8009a64:	20001628 	.word	0x20001628

08009a68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a68:	b480      	push	{r7}
 8009a6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009a6c:	4b04      	ldr	r3, [pc, #16]	; (8009a80 <vTaskSuspendAll+0x18>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	3301      	adds	r3, #1
 8009a72:	4a03      	ldr	r2, [pc, #12]	; (8009a80 <vTaskSuspendAll+0x18>)
 8009a74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009a76:	bf00      	nop
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr
 8009a80:	2000164c 	.word	0x2000164c

08009a84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a92:	4b42      	ldr	r3, [pc, #264]	; (8009b9c <xTaskResumeAll+0x118>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d10a      	bne.n	8009ab0 <xTaskResumeAll+0x2c>
	__asm volatile
 8009a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9e:	f383 8811 	msr	BASEPRI, r3
 8009aa2:	f3bf 8f6f 	isb	sy
 8009aa6:	f3bf 8f4f 	dsb	sy
 8009aaa:	603b      	str	r3, [r7, #0]
}
 8009aac:	bf00      	nop
 8009aae:	e7fe      	b.n	8009aae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009ab0:	f001 fb40 	bl	800b134 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009ab4:	4b39      	ldr	r3, [pc, #228]	; (8009b9c <xTaskResumeAll+0x118>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	4a38      	ldr	r2, [pc, #224]	; (8009b9c <xTaskResumeAll+0x118>)
 8009abc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009abe:	4b37      	ldr	r3, [pc, #220]	; (8009b9c <xTaskResumeAll+0x118>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d162      	bne.n	8009b8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009ac6:	4b36      	ldr	r3, [pc, #216]	; (8009ba0 <xTaskResumeAll+0x11c>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d05e      	beq.n	8009b8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ace:	e02f      	b.n	8009b30 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ad0:	4b34      	ldr	r3, [pc, #208]	; (8009ba4 <xTaskResumeAll+0x120>)
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	3318      	adds	r3, #24
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7fe ff91 	bl	8008a04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	3304      	adds	r3, #4
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7fe ff8c 	bl	8008a04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af0:	4b2d      	ldr	r3, [pc, #180]	; (8009ba8 <xTaskResumeAll+0x124>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d903      	bls.n	8009b00 <xTaskResumeAll+0x7c>
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afc:	4a2a      	ldr	r2, [pc, #168]	; (8009ba8 <xTaskResumeAll+0x124>)
 8009afe:	6013      	str	r3, [r2, #0]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b04:	4613      	mov	r3, r2
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	4413      	add	r3, r2
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	4a27      	ldr	r2, [pc, #156]	; (8009bac <xTaskResumeAll+0x128>)
 8009b0e:	441a      	add	r2, r3
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	3304      	adds	r3, #4
 8009b14:	4619      	mov	r1, r3
 8009b16:	4610      	mov	r0, r2
 8009b18:	f7fe ff17 	bl	800894a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b20:	4b23      	ldr	r3, [pc, #140]	; (8009bb0 <xTaskResumeAll+0x12c>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d302      	bcc.n	8009b30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009b2a:	4b22      	ldr	r3, [pc, #136]	; (8009bb4 <xTaskResumeAll+0x130>)
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b30:	4b1c      	ldr	r3, [pc, #112]	; (8009ba4 <xTaskResumeAll+0x120>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d1cb      	bne.n	8009ad0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d001      	beq.n	8009b42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b3e:	f000 fb7b 	bl	800a238 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009b42:	4b1d      	ldr	r3, [pc, #116]	; (8009bb8 <xTaskResumeAll+0x134>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d010      	beq.n	8009b70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b4e:	f000 f847 	bl	8009be0 <xTaskIncrementTick>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d002      	beq.n	8009b5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009b58:	4b16      	ldr	r3, [pc, #88]	; (8009bb4 <xTaskResumeAll+0x130>)
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	3b01      	subs	r3, #1
 8009b62:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d1f1      	bne.n	8009b4e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009b6a:	4b13      	ldr	r3, [pc, #76]	; (8009bb8 <xTaskResumeAll+0x134>)
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b70:	4b10      	ldr	r3, [pc, #64]	; (8009bb4 <xTaskResumeAll+0x130>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d009      	beq.n	8009b8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b7c:	4b0f      	ldr	r3, [pc, #60]	; (8009bbc <xTaskResumeAll+0x138>)
 8009b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b82:	601a      	str	r2, [r3, #0]
 8009b84:	f3bf 8f4f 	dsb	sy
 8009b88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b8c:	f001 fb02 	bl	800b194 <vPortExitCritical>

	return xAlreadyYielded;
 8009b90:	68bb      	ldr	r3, [r7, #8]
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	2000164c 	.word	0x2000164c
 8009ba0:	20001624 	.word	0x20001624
 8009ba4:	200015e4 	.word	0x200015e4
 8009ba8:	2000162c 	.word	0x2000162c
 8009bac:	20001154 	.word	0x20001154
 8009bb0:	20001150 	.word	0x20001150
 8009bb4:	20001638 	.word	0x20001638
 8009bb8:	20001634 	.word	0x20001634
 8009bbc:	e000ed04 	.word	0xe000ed04

08009bc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009bc6:	4b05      	ldr	r3, [pc, #20]	; (8009bdc <xTaskGetTickCount+0x1c>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009bcc:	687b      	ldr	r3, [r7, #4]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	370c      	adds	r7, #12
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr
 8009bda:	bf00      	nop
 8009bdc:	20001628 	.word	0x20001628

08009be0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009be6:	2300      	movs	r3, #0
 8009be8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bea:	4b4f      	ldr	r3, [pc, #316]	; (8009d28 <xTaskIncrementTick+0x148>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	f040 808f 	bne.w	8009d12 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009bf4:	4b4d      	ldr	r3, [pc, #308]	; (8009d2c <xTaskIncrementTick+0x14c>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009bfc:	4a4b      	ldr	r2, [pc, #300]	; (8009d2c <xTaskIncrementTick+0x14c>)
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d120      	bne.n	8009c4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009c08:	4b49      	ldr	r3, [pc, #292]	; (8009d30 <xTaskIncrementTick+0x150>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00a      	beq.n	8009c28 <xTaskIncrementTick+0x48>
	__asm volatile
 8009c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c16:	f383 8811 	msr	BASEPRI, r3
 8009c1a:	f3bf 8f6f 	isb	sy
 8009c1e:	f3bf 8f4f 	dsb	sy
 8009c22:	603b      	str	r3, [r7, #0]
}
 8009c24:	bf00      	nop
 8009c26:	e7fe      	b.n	8009c26 <xTaskIncrementTick+0x46>
 8009c28:	4b41      	ldr	r3, [pc, #260]	; (8009d30 <xTaskIncrementTick+0x150>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	60fb      	str	r3, [r7, #12]
 8009c2e:	4b41      	ldr	r3, [pc, #260]	; (8009d34 <xTaskIncrementTick+0x154>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a3f      	ldr	r2, [pc, #252]	; (8009d30 <xTaskIncrementTick+0x150>)
 8009c34:	6013      	str	r3, [r2, #0]
 8009c36:	4a3f      	ldr	r2, [pc, #252]	; (8009d34 <xTaskIncrementTick+0x154>)
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6013      	str	r3, [r2, #0]
 8009c3c:	4b3e      	ldr	r3, [pc, #248]	; (8009d38 <xTaskIncrementTick+0x158>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	3301      	adds	r3, #1
 8009c42:	4a3d      	ldr	r2, [pc, #244]	; (8009d38 <xTaskIncrementTick+0x158>)
 8009c44:	6013      	str	r3, [r2, #0]
 8009c46:	f000 faf7 	bl	800a238 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009c4a:	4b3c      	ldr	r3, [pc, #240]	; (8009d3c <xTaskIncrementTick+0x15c>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	693a      	ldr	r2, [r7, #16]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d349      	bcc.n	8009ce8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c54:	4b36      	ldr	r3, [pc, #216]	; (8009d30 <xTaskIncrementTick+0x150>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d104      	bne.n	8009c68 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c5e:	4b37      	ldr	r3, [pc, #220]	; (8009d3c <xTaskIncrementTick+0x15c>)
 8009c60:	f04f 32ff 	mov.w	r2, #4294967295
 8009c64:	601a      	str	r2, [r3, #0]
					break;
 8009c66:	e03f      	b.n	8009ce8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c68:	4b31      	ldr	r3, [pc, #196]	; (8009d30 <xTaskIncrementTick+0x150>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c78:	693a      	ldr	r2, [r7, #16]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d203      	bcs.n	8009c88 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c80:	4a2e      	ldr	r2, [pc, #184]	; (8009d3c <xTaskIncrementTick+0x15c>)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c86:	e02f      	b.n	8009ce8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	3304      	adds	r3, #4
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7fe feb9 	bl	8008a04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d004      	beq.n	8009ca4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	3318      	adds	r3, #24
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7fe feb0 	bl	8008a04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca8:	4b25      	ldr	r3, [pc, #148]	; (8009d40 <xTaskIncrementTick+0x160>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d903      	bls.n	8009cb8 <xTaskIncrementTick+0xd8>
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb4:	4a22      	ldr	r2, [pc, #136]	; (8009d40 <xTaskIncrementTick+0x160>)
 8009cb6:	6013      	str	r3, [r2, #0]
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	4413      	add	r3, r2
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	4a1f      	ldr	r2, [pc, #124]	; (8009d44 <xTaskIncrementTick+0x164>)
 8009cc6:	441a      	add	r2, r3
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	3304      	adds	r3, #4
 8009ccc:	4619      	mov	r1, r3
 8009cce:	4610      	mov	r0, r2
 8009cd0:	f7fe fe3b 	bl	800894a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd8:	4b1b      	ldr	r3, [pc, #108]	; (8009d48 <xTaskIncrementTick+0x168>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d3b8      	bcc.n	8009c54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ce6:	e7b5      	b.n	8009c54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ce8:	4b17      	ldr	r3, [pc, #92]	; (8009d48 <xTaskIncrementTick+0x168>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cee:	4915      	ldr	r1, [pc, #84]	; (8009d44 <xTaskIncrementTick+0x164>)
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	4413      	add	r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	440b      	add	r3, r1
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d901      	bls.n	8009d04 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009d00:	2301      	movs	r3, #1
 8009d02:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009d04:	4b11      	ldr	r3, [pc, #68]	; (8009d4c <xTaskIncrementTick+0x16c>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d007      	beq.n	8009d1c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	617b      	str	r3, [r7, #20]
 8009d10:	e004      	b.n	8009d1c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009d12:	4b0f      	ldr	r3, [pc, #60]	; (8009d50 <xTaskIncrementTick+0x170>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	3301      	adds	r3, #1
 8009d18:	4a0d      	ldr	r2, [pc, #52]	; (8009d50 <xTaskIncrementTick+0x170>)
 8009d1a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009d1c:	697b      	ldr	r3, [r7, #20]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3718      	adds	r7, #24
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	2000164c 	.word	0x2000164c
 8009d2c:	20001628 	.word	0x20001628
 8009d30:	200015dc 	.word	0x200015dc
 8009d34:	200015e0 	.word	0x200015e0
 8009d38:	2000163c 	.word	0x2000163c
 8009d3c:	20001644 	.word	0x20001644
 8009d40:	2000162c 	.word	0x2000162c
 8009d44:	20001154 	.word	0x20001154
 8009d48:	20001150 	.word	0x20001150
 8009d4c:	20001638 	.word	0x20001638
 8009d50:	20001634 	.word	0x20001634

08009d54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d5a:	4b36      	ldr	r3, [pc, #216]	; (8009e34 <vTaskSwitchContext+0xe0>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d003      	beq.n	8009d6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d62:	4b35      	ldr	r3, [pc, #212]	; (8009e38 <vTaskSwitchContext+0xe4>)
 8009d64:	2201      	movs	r2, #1
 8009d66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d68:	e05f      	b.n	8009e2a <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8009d6a:	4b33      	ldr	r3, [pc, #204]	; (8009e38 <vTaskSwitchContext+0xe4>)
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009d70:	f7f6 fc3e 	bl	80005f0 <getRunTimeCounterValue>
 8009d74:	4603      	mov	r3, r0
 8009d76:	4a31      	ldr	r2, [pc, #196]	; (8009e3c <vTaskSwitchContext+0xe8>)
 8009d78:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009d7a:	4b30      	ldr	r3, [pc, #192]	; (8009e3c <vTaskSwitchContext+0xe8>)
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	4b30      	ldr	r3, [pc, #192]	; (8009e40 <vTaskSwitchContext+0xec>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d909      	bls.n	8009d9a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009d86:	4b2f      	ldr	r3, [pc, #188]	; (8009e44 <vTaskSwitchContext+0xf0>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009d8c:	4a2b      	ldr	r2, [pc, #172]	; (8009e3c <vTaskSwitchContext+0xe8>)
 8009d8e:	6810      	ldr	r0, [r2, #0]
 8009d90:	4a2b      	ldr	r2, [pc, #172]	; (8009e40 <vTaskSwitchContext+0xec>)
 8009d92:	6812      	ldr	r2, [r2, #0]
 8009d94:	1a82      	subs	r2, r0, r2
 8009d96:	440a      	add	r2, r1
 8009d98:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009d9a:	4b28      	ldr	r3, [pc, #160]	; (8009e3c <vTaskSwitchContext+0xe8>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a28      	ldr	r2, [pc, #160]	; (8009e40 <vTaskSwitchContext+0xec>)
 8009da0:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009da2:	4b29      	ldr	r3, [pc, #164]	; (8009e48 <vTaskSwitchContext+0xf4>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	60fb      	str	r3, [r7, #12]
 8009da8:	e010      	b.n	8009dcc <vTaskSwitchContext+0x78>
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d10a      	bne.n	8009dc6 <vTaskSwitchContext+0x72>
	__asm volatile
 8009db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db4:	f383 8811 	msr	BASEPRI, r3
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	f3bf 8f4f 	dsb	sy
 8009dc0:	607b      	str	r3, [r7, #4]
}
 8009dc2:	bf00      	nop
 8009dc4:	e7fe      	b.n	8009dc4 <vTaskSwitchContext+0x70>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	60fb      	str	r3, [r7, #12]
 8009dcc:	491f      	ldr	r1, [pc, #124]	; (8009e4c <vTaskSwitchContext+0xf8>)
 8009dce:	68fa      	ldr	r2, [r7, #12]
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4413      	add	r3, r2
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	440b      	add	r3, r1
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d0e4      	beq.n	8009daa <vTaskSwitchContext+0x56>
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	4613      	mov	r3, r2
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	4413      	add	r3, r2
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4a18      	ldr	r2, [pc, #96]	; (8009e4c <vTaskSwitchContext+0xf8>)
 8009dec:	4413      	add	r3, r2
 8009dee:	60bb      	str	r3, [r7, #8]
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	685a      	ldr	r2, [r3, #4]
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	605a      	str	r2, [r3, #4]
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	685a      	ldr	r2, [r3, #4]
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	3308      	adds	r3, #8
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d104      	bne.n	8009e10 <vTaskSwitchContext+0xbc>
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	685a      	ldr	r2, [r3, #4]
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	605a      	str	r2, [r3, #4]
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	4a0b      	ldr	r2, [pc, #44]	; (8009e44 <vTaskSwitchContext+0xf0>)
 8009e18:	6013      	str	r3, [r2, #0]
 8009e1a:	4a0b      	ldr	r2, [pc, #44]	; (8009e48 <vTaskSwitchContext+0xf4>)
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009e20:	4b08      	ldr	r3, [pc, #32]	; (8009e44 <vTaskSwitchContext+0xf0>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	3358      	adds	r3, #88	; 0x58
 8009e26:	4a0a      	ldr	r2, [pc, #40]	; (8009e50 <vTaskSwitchContext+0xfc>)
 8009e28:	6013      	str	r3, [r2, #0]
}
 8009e2a:	bf00      	nop
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	2000164c 	.word	0x2000164c
 8009e38:	20001638 	.word	0x20001638
 8009e3c:	20001654 	.word	0x20001654
 8009e40:	20001650 	.word	0x20001650
 8009e44:	20001150 	.word	0x20001150
 8009e48:	2000162c 	.word	0x2000162c
 8009e4c:	20001154 	.word	0x20001154
 8009e50:	20000044 	.word	0x20000044

08009e54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d10a      	bne.n	8009e7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	60fb      	str	r3, [r7, #12]
}
 8009e76:	bf00      	nop
 8009e78:	e7fe      	b.n	8009e78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e7a:	4b07      	ldr	r3, [pc, #28]	; (8009e98 <vTaskPlaceOnEventList+0x44>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	3318      	adds	r3, #24
 8009e80:	4619      	mov	r1, r3
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f7fe fd85 	bl	8008992 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e88:	2101      	movs	r1, #1
 8009e8a:	6838      	ldr	r0, [r7, #0]
 8009e8c:	f000 fc82 	bl	800a794 <prvAddCurrentTaskToDelayedList>
}
 8009e90:	bf00      	nop
 8009e92:	3710      	adds	r7, #16
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	20001150 	.word	0x20001150

08009e9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b086      	sub	sp, #24
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d10a      	bne.n	8009ec4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb2:	f383 8811 	msr	BASEPRI, r3
 8009eb6:	f3bf 8f6f 	isb	sy
 8009eba:	f3bf 8f4f 	dsb	sy
 8009ebe:	617b      	str	r3, [r7, #20]
}
 8009ec0:	bf00      	nop
 8009ec2:	e7fe      	b.n	8009ec2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ec4:	4b0a      	ldr	r3, [pc, #40]	; (8009ef0 <vTaskPlaceOnEventListRestricted+0x54>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	3318      	adds	r3, #24
 8009eca:	4619      	mov	r1, r3
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	f7fe fd3c 	bl	800894a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d002      	beq.n	8009ede <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8009edc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009ede:	6879      	ldr	r1, [r7, #4]
 8009ee0:	68b8      	ldr	r0, [r7, #8]
 8009ee2:	f000 fc57 	bl	800a794 <prvAddCurrentTaskToDelayedList>
	}
 8009ee6:	bf00      	nop
 8009ee8:	3718      	adds	r7, #24
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	20001150 	.word	0x20001150

08009ef4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b086      	sub	sp, #24
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d10a      	bne.n	8009f20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0e:	f383 8811 	msr	BASEPRI, r3
 8009f12:	f3bf 8f6f 	isb	sy
 8009f16:	f3bf 8f4f 	dsb	sy
 8009f1a:	60fb      	str	r3, [r7, #12]
}
 8009f1c:	bf00      	nop
 8009f1e:	e7fe      	b.n	8009f1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	3318      	adds	r3, #24
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7fe fd6d 	bl	8008a04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f2a:	4b1e      	ldr	r3, [pc, #120]	; (8009fa4 <xTaskRemoveFromEventList+0xb0>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d11d      	bne.n	8009f6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	3304      	adds	r3, #4
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fe fd64 	bl	8008a04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f40:	4b19      	ldr	r3, [pc, #100]	; (8009fa8 <xTaskRemoveFromEventList+0xb4>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d903      	bls.n	8009f50 <xTaskRemoveFromEventList+0x5c>
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4c:	4a16      	ldr	r2, [pc, #88]	; (8009fa8 <xTaskRemoveFromEventList+0xb4>)
 8009f4e:	6013      	str	r3, [r2, #0]
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f54:	4613      	mov	r3, r2
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	4413      	add	r3, r2
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	4a13      	ldr	r2, [pc, #76]	; (8009fac <xTaskRemoveFromEventList+0xb8>)
 8009f5e:	441a      	add	r2, r3
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	3304      	adds	r3, #4
 8009f64:	4619      	mov	r1, r3
 8009f66:	4610      	mov	r0, r2
 8009f68:	f7fe fcef 	bl	800894a <vListInsertEnd>
 8009f6c:	e005      	b.n	8009f7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	3318      	adds	r3, #24
 8009f72:	4619      	mov	r1, r3
 8009f74:	480e      	ldr	r0, [pc, #56]	; (8009fb0 <xTaskRemoveFromEventList+0xbc>)
 8009f76:	f7fe fce8 	bl	800894a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f7e:	4b0d      	ldr	r3, [pc, #52]	; (8009fb4 <xTaskRemoveFromEventList+0xc0>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d905      	bls.n	8009f94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009f8c:	4b0a      	ldr	r3, [pc, #40]	; (8009fb8 <xTaskRemoveFromEventList+0xc4>)
 8009f8e:	2201      	movs	r2, #1
 8009f90:	601a      	str	r2, [r3, #0]
 8009f92:	e001      	b.n	8009f98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009f94:	2300      	movs	r3, #0
 8009f96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009f98:	697b      	ldr	r3, [r7, #20]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3718      	adds	r7, #24
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	2000164c 	.word	0x2000164c
 8009fa8:	2000162c 	.word	0x2000162c
 8009fac:	20001154 	.word	0x20001154
 8009fb0:	200015e4 	.word	0x200015e4
 8009fb4:	20001150 	.word	0x20001150
 8009fb8:	20001638 	.word	0x20001638

08009fbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009fc4:	4b06      	ldr	r3, [pc, #24]	; (8009fe0 <vTaskInternalSetTimeOutState+0x24>)
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009fcc:	4b05      	ldr	r3, [pc, #20]	; (8009fe4 <vTaskInternalSetTimeOutState+0x28>)
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	605a      	str	r2, [r3, #4]
}
 8009fd4:	bf00      	nop
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr
 8009fe0:	2000163c 	.word	0x2000163c
 8009fe4:	20001628 	.word	0x20001628

08009fe8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b088      	sub	sp, #32
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10a      	bne.n	800a00e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	613b      	str	r3, [r7, #16]
}
 800a00a:	bf00      	nop
 800a00c:	e7fe      	b.n	800a00c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10a      	bne.n	800a02a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a018:	f383 8811 	msr	BASEPRI, r3
 800a01c:	f3bf 8f6f 	isb	sy
 800a020:	f3bf 8f4f 	dsb	sy
 800a024:	60fb      	str	r3, [r7, #12]
}
 800a026:	bf00      	nop
 800a028:	e7fe      	b.n	800a028 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a02a:	f001 f883 	bl	800b134 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a02e:	4b1d      	ldr	r3, [pc, #116]	; (800a0a4 <xTaskCheckForTimeOut+0xbc>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	69ba      	ldr	r2, [r7, #24]
 800a03a:	1ad3      	subs	r3, r2, r3
 800a03c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a046:	d102      	bne.n	800a04e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a048:	2300      	movs	r3, #0
 800a04a:	61fb      	str	r3, [r7, #28]
 800a04c:	e023      	b.n	800a096 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	4b15      	ldr	r3, [pc, #84]	; (800a0a8 <xTaskCheckForTimeOut+0xc0>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	429a      	cmp	r2, r3
 800a058:	d007      	beq.n	800a06a <xTaskCheckForTimeOut+0x82>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	69ba      	ldr	r2, [r7, #24]
 800a060:	429a      	cmp	r2, r3
 800a062:	d302      	bcc.n	800a06a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a064:	2301      	movs	r3, #1
 800a066:	61fb      	str	r3, [r7, #28]
 800a068:	e015      	b.n	800a096 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	697a      	ldr	r2, [r7, #20]
 800a070:	429a      	cmp	r2, r3
 800a072:	d20b      	bcs.n	800a08c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	1ad2      	subs	r2, r2, r3
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f7ff ff9b 	bl	8009fbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a086:	2300      	movs	r3, #0
 800a088:	61fb      	str	r3, [r7, #28]
 800a08a:	e004      	b.n	800a096 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	2200      	movs	r2, #0
 800a090:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a092:	2301      	movs	r3, #1
 800a094:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a096:	f001 f87d 	bl	800b194 <vPortExitCritical>

	return xReturn;
 800a09a:	69fb      	ldr	r3, [r7, #28]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3720      	adds	r7, #32
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	20001628 	.word	0x20001628
 800a0a8:	2000163c 	.word	0x2000163c

0800a0ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a0b0:	4b03      	ldr	r3, [pc, #12]	; (800a0c0 <vTaskMissedYield+0x14>)
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	601a      	str	r2, [r3, #0]
}
 800a0b6:	bf00      	nop
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr
 800a0c0:	20001638 	.word	0x20001638

0800a0c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a0cc:	f000 f852 	bl	800a174 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a0d0:	4b06      	ldr	r3, [pc, #24]	; (800a0ec <prvIdleTask+0x28>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d9f9      	bls.n	800a0cc <prvIdleTask+0x8>
			{
				taskYIELD();
 800a0d8:	4b05      	ldr	r3, [pc, #20]	; (800a0f0 <prvIdleTask+0x2c>)
 800a0da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0de:	601a      	str	r2, [r3, #0]
 800a0e0:	f3bf 8f4f 	dsb	sy
 800a0e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a0e8:	e7f0      	b.n	800a0cc <prvIdleTask+0x8>
 800a0ea:	bf00      	nop
 800a0ec:	20001154 	.word	0x20001154
 800a0f0:	e000ed04 	.word	0xe000ed04

0800a0f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	607b      	str	r3, [r7, #4]
 800a0fe:	e00c      	b.n	800a11a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	4613      	mov	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	4413      	add	r3, r2
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	4a12      	ldr	r2, [pc, #72]	; (800a154 <prvInitialiseTaskLists+0x60>)
 800a10c:	4413      	add	r3, r2
 800a10e:	4618      	mov	r0, r3
 800a110:	f7fe fbee 	bl	80088f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	3301      	adds	r3, #1
 800a118:	607b      	str	r3, [r7, #4]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2b37      	cmp	r3, #55	; 0x37
 800a11e:	d9ef      	bls.n	800a100 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a120:	480d      	ldr	r0, [pc, #52]	; (800a158 <prvInitialiseTaskLists+0x64>)
 800a122:	f7fe fbe5 	bl	80088f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a126:	480d      	ldr	r0, [pc, #52]	; (800a15c <prvInitialiseTaskLists+0x68>)
 800a128:	f7fe fbe2 	bl	80088f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a12c:	480c      	ldr	r0, [pc, #48]	; (800a160 <prvInitialiseTaskLists+0x6c>)
 800a12e:	f7fe fbdf 	bl	80088f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a132:	480c      	ldr	r0, [pc, #48]	; (800a164 <prvInitialiseTaskLists+0x70>)
 800a134:	f7fe fbdc 	bl	80088f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a138:	480b      	ldr	r0, [pc, #44]	; (800a168 <prvInitialiseTaskLists+0x74>)
 800a13a:	f7fe fbd9 	bl	80088f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a13e:	4b0b      	ldr	r3, [pc, #44]	; (800a16c <prvInitialiseTaskLists+0x78>)
 800a140:	4a05      	ldr	r2, [pc, #20]	; (800a158 <prvInitialiseTaskLists+0x64>)
 800a142:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a144:	4b0a      	ldr	r3, [pc, #40]	; (800a170 <prvInitialiseTaskLists+0x7c>)
 800a146:	4a05      	ldr	r2, [pc, #20]	; (800a15c <prvInitialiseTaskLists+0x68>)
 800a148:	601a      	str	r2, [r3, #0]
}
 800a14a:	bf00      	nop
 800a14c:	3708      	adds	r7, #8
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	20001154 	.word	0x20001154
 800a158:	200015b4 	.word	0x200015b4
 800a15c:	200015c8 	.word	0x200015c8
 800a160:	200015e4 	.word	0x200015e4
 800a164:	200015f8 	.word	0x200015f8
 800a168:	20001610 	.word	0x20001610
 800a16c:	200015dc 	.word	0x200015dc
 800a170:	200015e0 	.word	0x200015e0

0800a174 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a17a:	e019      	b.n	800a1b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a17c:	f000 ffda 	bl	800b134 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a180:	4b10      	ldr	r3, [pc, #64]	; (800a1c4 <prvCheckTasksWaitingTermination+0x50>)
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	3304      	adds	r3, #4
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7fe fc39 	bl	8008a04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a192:	4b0d      	ldr	r3, [pc, #52]	; (800a1c8 <prvCheckTasksWaitingTermination+0x54>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	3b01      	subs	r3, #1
 800a198:	4a0b      	ldr	r2, [pc, #44]	; (800a1c8 <prvCheckTasksWaitingTermination+0x54>)
 800a19a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a19c:	4b0b      	ldr	r3, [pc, #44]	; (800a1cc <prvCheckTasksWaitingTermination+0x58>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	4a0a      	ldr	r2, [pc, #40]	; (800a1cc <prvCheckTasksWaitingTermination+0x58>)
 800a1a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a1a6:	f000 fff5 	bl	800b194 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 f810 	bl	800a1d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a1b0:	4b06      	ldr	r3, [pc, #24]	; (800a1cc <prvCheckTasksWaitingTermination+0x58>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d1e1      	bne.n	800a17c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a1b8:	bf00      	nop
 800a1ba:	bf00      	nop
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	200015f8 	.word	0x200015f8
 800a1c8:	20001624 	.word	0x20001624
 800a1cc:	2000160c 	.word	0x2000160c

0800a1d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	3358      	adds	r3, #88	; 0x58
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f001 fd1f 	bl	800bc20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d108      	bne.n	800a1fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f001 f98d 	bl	800b510 <vPortFree>
				vPortFree( pxTCB );
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f001 f98a 	bl	800b510 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a1fc:	e018      	b.n	800a230 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800a204:	2b01      	cmp	r3, #1
 800a206:	d103      	bne.n	800a210 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f001 f981 	bl	800b510 <vPortFree>
	}
 800a20e:	e00f      	b.n	800a230 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800a216:	2b02      	cmp	r3, #2
 800a218:	d00a      	beq.n	800a230 <prvDeleteTCB+0x60>
	__asm volatile
 800a21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21e:	f383 8811 	msr	BASEPRI, r3
 800a222:	f3bf 8f6f 	isb	sy
 800a226:	f3bf 8f4f 	dsb	sy
 800a22a:	60fb      	str	r3, [r7, #12]
}
 800a22c:	bf00      	nop
 800a22e:	e7fe      	b.n	800a22e <prvDeleteTCB+0x5e>
	}
 800a230:	bf00      	nop
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a23e:	4b0c      	ldr	r3, [pc, #48]	; (800a270 <prvResetNextTaskUnblockTime+0x38>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d104      	bne.n	800a252 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a248:	4b0a      	ldr	r3, [pc, #40]	; (800a274 <prvResetNextTaskUnblockTime+0x3c>)
 800a24a:	f04f 32ff 	mov.w	r2, #4294967295
 800a24e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a250:	e008      	b.n	800a264 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a252:	4b07      	ldr	r3, [pc, #28]	; (800a270 <prvResetNextTaskUnblockTime+0x38>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	4a04      	ldr	r2, [pc, #16]	; (800a274 <prvResetNextTaskUnblockTime+0x3c>)
 800a262:	6013      	str	r3, [r2, #0]
}
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr
 800a270:	200015dc 	.word	0x200015dc
 800a274:	20001644 	.word	0x20001644

0800a278 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a27e:	4b0b      	ldr	r3, [pc, #44]	; (800a2ac <xTaskGetSchedulerState+0x34>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d102      	bne.n	800a28c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a286:	2301      	movs	r3, #1
 800a288:	607b      	str	r3, [r7, #4]
 800a28a:	e008      	b.n	800a29e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a28c:	4b08      	ldr	r3, [pc, #32]	; (800a2b0 <xTaskGetSchedulerState+0x38>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d102      	bne.n	800a29a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a294:	2302      	movs	r3, #2
 800a296:	607b      	str	r3, [r7, #4]
 800a298:	e001      	b.n	800a29e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a29a:	2300      	movs	r3, #0
 800a29c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a29e:	687b      	ldr	r3, [r7, #4]
	}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr
 800a2ac:	20001630 	.word	0x20001630
 800a2b0:	2000164c 	.word	0x2000164c

0800a2b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d056      	beq.n	800a378 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a2ca:	4b2e      	ldr	r3, [pc, #184]	; (800a384 <xTaskPriorityDisinherit+0xd0>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	693a      	ldr	r2, [r7, #16]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d00a      	beq.n	800a2ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	60fb      	str	r3, [r7, #12]
}
 800a2e6:	bf00      	nop
 800a2e8:	e7fe      	b.n	800a2e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10a      	bne.n	800a308 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	60bb      	str	r3, [r7, #8]
}
 800a304:	bf00      	nop
 800a306:	e7fe      	b.n	800a306 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a30c:	1e5a      	subs	r2, r3, #1
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d02c      	beq.n	800a378 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a322:	2b00      	cmp	r3, #0
 800a324:	d128      	bne.n	800a378 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	3304      	adds	r3, #4
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7fe fb6a 	bl	8008a04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a33c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a348:	4b0f      	ldr	r3, [pc, #60]	; (800a388 <xTaskPriorityDisinherit+0xd4>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d903      	bls.n	800a358 <xTaskPriorityDisinherit+0xa4>
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a354:	4a0c      	ldr	r2, [pc, #48]	; (800a388 <xTaskPriorityDisinherit+0xd4>)
 800a356:	6013      	str	r3, [r2, #0]
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a35c:	4613      	mov	r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4413      	add	r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4a09      	ldr	r2, [pc, #36]	; (800a38c <xTaskPriorityDisinherit+0xd8>)
 800a366:	441a      	add	r2, r3
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	3304      	adds	r3, #4
 800a36c:	4619      	mov	r1, r3
 800a36e:	4610      	mov	r0, r2
 800a370:	f7fe faeb 	bl	800894a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a374:	2301      	movs	r3, #1
 800a376:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a378:	697b      	ldr	r3, [r7, #20]
	}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3718      	adds	r7, #24
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	20001150 	.word	0x20001150
 800a388:	2000162c 	.word	0x2000162c
 800a38c:	20001154 	.word	0x20001154

0800a390 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
 800a39c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800a39e:	f000 fec9 	bl	800b134 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a3a2:	4b29      	ldr	r3, [pc, #164]	; (800a448 <xTaskNotifyWait+0xb8>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d01c      	beq.n	800a3ea <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800a3b0:	4b25      	ldr	r3, [pc, #148]	; (800a448 <xTaskNotifyWait+0xb8>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800a3b8:	68fa      	ldr	r2, [r7, #12]
 800a3ba:	43d2      	mvns	r2, r2
 800a3bc:	400a      	ands	r2, r1
 800a3be:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a3c2:	4b21      	ldr	r3, [pc, #132]	; (800a448 <xTaskNotifyWait+0xb8>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d00b      	beq.n	800a3ea <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a3d2:	2101      	movs	r1, #1
 800a3d4:	6838      	ldr	r0, [r7, #0]
 800a3d6:	f000 f9dd 	bl	800a794 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a3da:	4b1c      	ldr	r3, [pc, #112]	; (800a44c <xTaskNotifyWait+0xbc>)
 800a3dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3e0:	601a      	str	r2, [r3, #0]
 800a3e2:	f3bf 8f4f 	dsb	sy
 800a3e6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a3ea:	f000 fed3 	bl	800b194 <vPortExitCritical>

		taskENTER_CRITICAL();
 800a3ee:	f000 fea1 	bl	800b134 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d005      	beq.n	800a404 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800a3f8:	4b13      	ldr	r3, [pc, #76]	; (800a448 <xTaskNotifyWait+0xb8>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a404:	4b10      	ldr	r3, [pc, #64]	; (800a448 <xTaskNotifyWait+0xb8>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	2b02      	cmp	r3, #2
 800a410:	d002      	beq.n	800a418 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800a412:	2300      	movs	r3, #0
 800a414:	617b      	str	r3, [r7, #20]
 800a416:	e00a      	b.n	800a42e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800a418:	4b0b      	ldr	r3, [pc, #44]	; (800a448 <xTaskNotifyWait+0xb8>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800a420:	68ba      	ldr	r2, [r7, #8]
 800a422:	43d2      	mvns	r2, r2
 800a424:	400a      	ands	r2, r1
 800a426:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 800a42a:	2301      	movs	r3, #1
 800a42c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a42e:	4b06      	ldr	r3, [pc, #24]	; (800a448 <xTaskNotifyWait+0xb8>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2200      	movs	r2, #0
 800a434:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 800a438:	f000 feac 	bl	800b194 <vPortExitCritical>

		return xReturn;
 800a43c:	697b      	ldr	r3, [r7, #20]
	}
 800a43e:	4618      	mov	r0, r3
 800a440:	3718      	adds	r7, #24
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	20001150 	.word	0x20001150
 800a44c:	e000ed04 	.word	0xe000ed04

0800a450 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800a450:	b580      	push	{r7, lr}
 800a452:	b08a      	sub	sp, #40	; 0x28
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	603b      	str	r3, [r7, #0]
 800a45c:	4613      	mov	r3, r2
 800a45e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800a460:	2301      	movs	r3, #1
 800a462:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d10a      	bne.n	800a480 <xTaskGenericNotify+0x30>
	__asm volatile
 800a46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46e:	f383 8811 	msr	BASEPRI, r3
 800a472:	f3bf 8f6f 	isb	sy
 800a476:	f3bf 8f4f 	dsb	sy
 800a47a:	61bb      	str	r3, [r7, #24]
}
 800a47c:	bf00      	nop
 800a47e:	e7fe      	b.n	800a47e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a484:	f000 fe56 	bl	800b134 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d004      	beq.n	800a498 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a48e:	6a3b      	ldr	r3, [r7, #32]
 800a490:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a498:	6a3b      	ldr	r3, [r7, #32]
 800a49a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800a49e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a4a0:	6a3b      	ldr	r3, [r7, #32]
 800a4a2:	2202      	movs	r2, #2
 800a4a4:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 800a4a8:	79fb      	ldrb	r3, [r7, #7]
 800a4aa:	2b04      	cmp	r3, #4
 800a4ac:	d82d      	bhi.n	800a50a <xTaskGenericNotify+0xba>
 800a4ae:	a201      	add	r2, pc, #4	; (adr r2, 800a4b4 <xTaskGenericNotify+0x64>)
 800a4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b4:	0800a52d 	.word	0x0800a52d
 800a4b8:	0800a4c9 	.word	0x0800a4c9
 800a4bc:	0800a4db 	.word	0x0800a4db
 800a4c0:	0800a4eb 	.word	0x0800a4eb
 800a4c4:	0800a4f5 	.word	0x0800a4f5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a4c8:	6a3b      	ldr	r3, [r7, #32]
 800a4ca:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	431a      	orrs	r2, r3
 800a4d2:	6a3b      	ldr	r3, [r7, #32]
 800a4d4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800a4d8:	e02b      	b.n	800a532 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a4da:	6a3b      	ldr	r3, [r7, #32]
 800a4dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a4e0:	1c5a      	adds	r2, r3, #1
 800a4e2:	6a3b      	ldr	r3, [r7, #32]
 800a4e4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800a4e8:	e023      	b.n	800a532 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a4ea:	6a3b      	ldr	r3, [r7, #32]
 800a4ec:	68ba      	ldr	r2, [r7, #8]
 800a4ee:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800a4f2:	e01e      	b.n	800a532 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a4f4:	7ffb      	ldrb	r3, [r7, #31]
 800a4f6:	2b02      	cmp	r3, #2
 800a4f8:	d004      	beq.n	800a504 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a4fa:	6a3b      	ldr	r3, [r7, #32]
 800a4fc:	68ba      	ldr	r2, [r7, #8]
 800a4fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a502:	e016      	b.n	800a532 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800a504:	2300      	movs	r3, #0
 800a506:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800a508:	e013      	b.n	800a532 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a50a:	6a3b      	ldr	r3, [r7, #32]
 800a50c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a510:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a514:	d00c      	beq.n	800a530 <xTaskGenericNotify+0xe0>
	__asm volatile
 800a516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51a:	f383 8811 	msr	BASEPRI, r3
 800a51e:	f3bf 8f6f 	isb	sy
 800a522:	f3bf 8f4f 	dsb	sy
 800a526:	617b      	str	r3, [r7, #20]
}
 800a528:	bf00      	nop
 800a52a:	e7fe      	b.n	800a52a <xTaskGenericNotify+0xda>
					break;
 800a52c:	bf00      	nop
 800a52e:	e000      	b.n	800a532 <xTaskGenericNotify+0xe2>

					break;
 800a530:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a532:	7ffb      	ldrb	r3, [r7, #31]
 800a534:	2b01      	cmp	r3, #1
 800a536:	d13a      	bne.n	800a5ae <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a538:	6a3b      	ldr	r3, [r7, #32]
 800a53a:	3304      	adds	r3, #4
 800a53c:	4618      	mov	r0, r3
 800a53e:	f7fe fa61 	bl	8008a04 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a542:	6a3b      	ldr	r3, [r7, #32]
 800a544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a546:	4b1d      	ldr	r3, [pc, #116]	; (800a5bc <xTaskGenericNotify+0x16c>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d903      	bls.n	800a556 <xTaskGenericNotify+0x106>
 800a54e:	6a3b      	ldr	r3, [r7, #32]
 800a550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a552:	4a1a      	ldr	r2, [pc, #104]	; (800a5bc <xTaskGenericNotify+0x16c>)
 800a554:	6013      	str	r3, [r2, #0]
 800a556:	6a3b      	ldr	r3, [r7, #32]
 800a558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a55a:	4613      	mov	r3, r2
 800a55c:	009b      	lsls	r3, r3, #2
 800a55e:	4413      	add	r3, r2
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	4a17      	ldr	r2, [pc, #92]	; (800a5c0 <xTaskGenericNotify+0x170>)
 800a564:	441a      	add	r2, r3
 800a566:	6a3b      	ldr	r3, [r7, #32]
 800a568:	3304      	adds	r3, #4
 800a56a:	4619      	mov	r1, r3
 800a56c:	4610      	mov	r0, r2
 800a56e:	f7fe f9ec 	bl	800894a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a572:	6a3b      	ldr	r3, [r7, #32]
 800a574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00a      	beq.n	800a590 <xTaskGenericNotify+0x140>
	__asm volatile
 800a57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57e:	f383 8811 	msr	BASEPRI, r3
 800a582:	f3bf 8f6f 	isb	sy
 800a586:	f3bf 8f4f 	dsb	sy
 800a58a:	613b      	str	r3, [r7, #16]
}
 800a58c:	bf00      	nop
 800a58e:	e7fe      	b.n	800a58e <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a590:	6a3b      	ldr	r3, [r7, #32]
 800a592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a594:	4b0b      	ldr	r3, [pc, #44]	; (800a5c4 <xTaskGenericNotify+0x174>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d907      	bls.n	800a5ae <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a59e:	4b0a      	ldr	r3, [pc, #40]	; (800a5c8 <xTaskGenericNotify+0x178>)
 800a5a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5a4:	601a      	str	r2, [r3, #0]
 800a5a6:	f3bf 8f4f 	dsb	sy
 800a5aa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a5ae:	f000 fdf1 	bl	800b194 <vPortExitCritical>

		return xReturn;
 800a5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3728      	adds	r7, #40	; 0x28
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	2000162c 	.word	0x2000162c
 800a5c0:	20001154 	.word	0x20001154
 800a5c4:	20001150 	.word	0x20001150
 800a5c8:	e000ed04 	.word	0xe000ed04

0800a5cc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b08e      	sub	sp, #56	; 0x38
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	603b      	str	r3, [r7, #0]
 800a5d8:	4613      	mov	r3, r2
 800a5da:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d10a      	bne.n	800a5fc <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800a5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ea:	f383 8811 	msr	BASEPRI, r3
 800a5ee:	f3bf 8f6f 	isb	sy
 800a5f2:	f3bf 8f4f 	dsb	sy
 800a5f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a5f8:	bf00      	nop
 800a5fa:	e7fe      	b.n	800a5fa <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a5fc:	f000 fe7c 	bl	800b2f8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800a604:	f3ef 8211 	mrs	r2, BASEPRI
 800a608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60c:	f383 8811 	msr	BASEPRI, r3
 800a610:	f3bf 8f6f 	isb	sy
 800a614:	f3bf 8f4f 	dsb	sy
 800a618:	623a      	str	r2, [r7, #32]
 800a61a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800a61c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a61e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d004      	beq.n	800a630 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a628:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a632:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800a636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63c:	2202      	movs	r2, #2
 800a63e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 800a642:	79fb      	ldrb	r3, [r7, #7]
 800a644:	2b04      	cmp	r3, #4
 800a646:	d82f      	bhi.n	800a6a8 <xTaskGenericNotifyFromISR+0xdc>
 800a648:	a201      	add	r2, pc, #4	; (adr r2, 800a650 <xTaskGenericNotifyFromISR+0x84>)
 800a64a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a64e:	bf00      	nop
 800a650:	0800a6cb 	.word	0x0800a6cb
 800a654:	0800a665 	.word	0x0800a665
 800a658:	0800a677 	.word	0x0800a677
 800a65c:	0800a687 	.word	0x0800a687
 800a660:	0800a691 	.word	0x0800a691
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a666:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	431a      	orrs	r2, r3
 800a66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a670:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800a674:	e02c      	b.n	800a6d0 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a678:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a67c:	1c5a      	adds	r2, r3, #1
 800a67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a680:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800a684:	e024      	b.n	800a6d0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a688:	68ba      	ldr	r2, [r7, #8]
 800a68a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800a68e:	e01f      	b.n	800a6d0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a690:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a694:	2b02      	cmp	r3, #2
 800a696:	d004      	beq.n	800a6a2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a6a0:	e016      	b.n	800a6d0 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800a6a6:	e013      	b.n	800a6d0 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b2:	d00c      	beq.n	800a6ce <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800a6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b8:	f383 8811 	msr	BASEPRI, r3
 800a6bc:	f3bf 8f6f 	isb	sy
 800a6c0:	f3bf 8f4f 	dsb	sy
 800a6c4:	61bb      	str	r3, [r7, #24]
}
 800a6c6:	bf00      	nop
 800a6c8:	e7fe      	b.n	800a6c8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800a6ca:	bf00      	nop
 800a6cc:	e000      	b.n	800a6d0 <xTaskGenericNotifyFromISR+0x104>
					break;
 800a6ce:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a6d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d146      	bne.n	800a766 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d00a      	beq.n	800a6f6 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800a6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e4:	f383 8811 	msr	BASEPRI, r3
 800a6e8:	f3bf 8f6f 	isb	sy
 800a6ec:	f3bf 8f4f 	dsb	sy
 800a6f0:	617b      	str	r3, [r7, #20]
}
 800a6f2:	bf00      	nop
 800a6f4:	e7fe      	b.n	800a6f4 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6f6:	4b21      	ldr	r3, [pc, #132]	; (800a77c <xTaskGenericNotifyFromISR+0x1b0>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d11d      	bne.n	800a73a <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a700:	3304      	adds	r3, #4
 800a702:	4618      	mov	r0, r3
 800a704:	f7fe f97e 	bl	8008a04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a70c:	4b1c      	ldr	r3, [pc, #112]	; (800a780 <xTaskGenericNotifyFromISR+0x1b4>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	429a      	cmp	r2, r3
 800a712:	d903      	bls.n	800a71c <xTaskGenericNotifyFromISR+0x150>
 800a714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a718:	4a19      	ldr	r2, [pc, #100]	; (800a780 <xTaskGenericNotifyFromISR+0x1b4>)
 800a71a:	6013      	str	r3, [r2, #0]
 800a71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a71e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a720:	4613      	mov	r3, r2
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	4413      	add	r3, r2
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	4a16      	ldr	r2, [pc, #88]	; (800a784 <xTaskGenericNotifyFromISR+0x1b8>)
 800a72a:	441a      	add	r2, r3
 800a72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72e:	3304      	adds	r3, #4
 800a730:	4619      	mov	r1, r3
 800a732:	4610      	mov	r0, r2
 800a734:	f7fe f909 	bl	800894a <vListInsertEnd>
 800a738:	e005      	b.n	800a746 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73c:	3318      	adds	r3, #24
 800a73e:	4619      	mov	r1, r3
 800a740:	4811      	ldr	r0, [pc, #68]	; (800a788 <xTaskGenericNotifyFromISR+0x1bc>)
 800a742:	f7fe f902 	bl	800894a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a74a:	4b10      	ldr	r3, [pc, #64]	; (800a78c <xTaskGenericNotifyFromISR+0x1c0>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a750:	429a      	cmp	r2, r3
 800a752:	d908      	bls.n	800a766 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800a754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a756:	2b00      	cmp	r3, #0
 800a758:	d002      	beq.n	800a760 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a75a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a75c:	2201      	movs	r2, #1
 800a75e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800a760:	4b0b      	ldr	r3, [pc, #44]	; (800a790 <xTaskGenericNotifyFromISR+0x1c4>)
 800a762:	2201      	movs	r2, #1
 800a764:	601a      	str	r2, [r3, #0]
 800a766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a768:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	f383 8811 	msr	BASEPRI, r3
}
 800a770:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800a772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800a774:	4618      	mov	r0, r3
 800a776:	3738      	adds	r7, #56	; 0x38
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	2000164c 	.word	0x2000164c
 800a780:	2000162c 	.word	0x2000162c
 800a784:	20001154 	.word	0x20001154
 800a788:	200015e4 	.word	0x200015e4
 800a78c:	20001150 	.word	0x20001150
 800a790:	20001638 	.word	0x20001638

0800a794 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a79e:	4b21      	ldr	r3, [pc, #132]	; (800a824 <prvAddCurrentTaskToDelayedList+0x90>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7a4:	4b20      	ldr	r3, [pc, #128]	; (800a828 <prvAddCurrentTaskToDelayedList+0x94>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	3304      	adds	r3, #4
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7fe f92a 	bl	8008a04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b6:	d10a      	bne.n	800a7ce <prvAddCurrentTaskToDelayedList+0x3a>
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d007      	beq.n	800a7ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7be:	4b1a      	ldr	r3, [pc, #104]	; (800a828 <prvAddCurrentTaskToDelayedList+0x94>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	3304      	adds	r3, #4
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	4819      	ldr	r0, [pc, #100]	; (800a82c <prvAddCurrentTaskToDelayedList+0x98>)
 800a7c8:	f7fe f8bf 	bl	800894a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a7cc:	e026      	b.n	800a81c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a7ce:	68fa      	ldr	r2, [r7, #12]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a7d6:	4b14      	ldr	r3, [pc, #80]	; (800a828 <prvAddCurrentTaskToDelayedList+0x94>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	68ba      	ldr	r2, [r7, #8]
 800a7dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a7de:	68ba      	ldr	r2, [r7, #8]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d209      	bcs.n	800a7fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7e6:	4b12      	ldr	r3, [pc, #72]	; (800a830 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	4b0f      	ldr	r3, [pc, #60]	; (800a828 <prvAddCurrentTaskToDelayedList+0x94>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	3304      	adds	r3, #4
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	4610      	mov	r0, r2
 800a7f4:	f7fe f8cd 	bl	8008992 <vListInsert>
}
 800a7f8:	e010      	b.n	800a81c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7fa:	4b0e      	ldr	r3, [pc, #56]	; (800a834 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	4b0a      	ldr	r3, [pc, #40]	; (800a828 <prvAddCurrentTaskToDelayedList+0x94>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	3304      	adds	r3, #4
 800a804:	4619      	mov	r1, r3
 800a806:	4610      	mov	r0, r2
 800a808:	f7fe f8c3 	bl	8008992 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a80c:	4b0a      	ldr	r3, [pc, #40]	; (800a838 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	429a      	cmp	r2, r3
 800a814:	d202      	bcs.n	800a81c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a816:	4a08      	ldr	r2, [pc, #32]	; (800a838 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	6013      	str	r3, [r2, #0]
}
 800a81c:	bf00      	nop
 800a81e:	3710      	adds	r7, #16
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	20001628 	.word	0x20001628
 800a828:	20001150 	.word	0x20001150
 800a82c:	20001610 	.word	0x20001610
 800a830:	200015e0 	.word	0x200015e0
 800a834:	200015dc 	.word	0x200015dc
 800a838:	20001644 	.word	0x20001644

0800a83c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b08a      	sub	sp, #40	; 0x28
 800a840:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a842:	2300      	movs	r3, #0
 800a844:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a846:	f000 fb07 	bl	800ae58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a84a:	4b1c      	ldr	r3, [pc, #112]	; (800a8bc <xTimerCreateTimerTask+0x80>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d021      	beq.n	800a896 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a852:	2300      	movs	r3, #0
 800a854:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a856:	2300      	movs	r3, #0
 800a858:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a85a:	1d3a      	adds	r2, r7, #4
 800a85c:	f107 0108 	add.w	r1, r7, #8
 800a860:	f107 030c 	add.w	r3, r7, #12
 800a864:	4618      	mov	r0, r3
 800a866:	f7fe f829 	bl	80088bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a86a:	6879      	ldr	r1, [r7, #4]
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	68fa      	ldr	r2, [r7, #12]
 800a870:	9202      	str	r2, [sp, #8]
 800a872:	9301      	str	r3, [sp, #4]
 800a874:	2302      	movs	r3, #2
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	2300      	movs	r3, #0
 800a87a:	460a      	mov	r2, r1
 800a87c:	4910      	ldr	r1, [pc, #64]	; (800a8c0 <xTimerCreateTimerTask+0x84>)
 800a87e:	4811      	ldr	r0, [pc, #68]	; (800a8c4 <xTimerCreateTimerTask+0x88>)
 800a880:	f7fe fe90 	bl	80095a4 <xTaskCreateStatic>
 800a884:	4603      	mov	r3, r0
 800a886:	4a10      	ldr	r2, [pc, #64]	; (800a8c8 <xTimerCreateTimerTask+0x8c>)
 800a888:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a88a:	4b0f      	ldr	r3, [pc, #60]	; (800a8c8 <xTimerCreateTimerTask+0x8c>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d001      	beq.n	800a896 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a892:	2301      	movs	r3, #1
 800a894:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d10a      	bne.n	800a8b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a0:	f383 8811 	msr	BASEPRI, r3
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	f3bf 8f4f 	dsb	sy
 800a8ac:	613b      	str	r3, [r7, #16]
}
 800a8ae:	bf00      	nop
 800a8b0:	e7fe      	b.n	800a8b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a8b2:	697b      	ldr	r3, [r7, #20]
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3718      	adds	r7, #24
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	20001688 	.word	0x20001688
 800a8c0:	0800d0bc 	.word	0x0800d0bc
 800a8c4:	0800aa01 	.word	0x0800aa01
 800a8c8:	2000168c 	.word	0x2000168c

0800a8cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b08a      	sub	sp, #40	; 0x28
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	607a      	str	r2, [r7, #4]
 800a8d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d10a      	bne.n	800a8fa <xTimerGenericCommand+0x2e>
	__asm volatile
 800a8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e8:	f383 8811 	msr	BASEPRI, r3
 800a8ec:	f3bf 8f6f 	isb	sy
 800a8f0:	f3bf 8f4f 	dsb	sy
 800a8f4:	623b      	str	r3, [r7, #32]
}
 800a8f6:	bf00      	nop
 800a8f8:	e7fe      	b.n	800a8f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a8fa:	4b1a      	ldr	r3, [pc, #104]	; (800a964 <xTimerGenericCommand+0x98>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d02a      	beq.n	800a958 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	2b05      	cmp	r3, #5
 800a912:	dc18      	bgt.n	800a946 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a914:	f7ff fcb0 	bl	800a278 <xTaskGetSchedulerState>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b02      	cmp	r3, #2
 800a91c:	d109      	bne.n	800a932 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a91e:	4b11      	ldr	r3, [pc, #68]	; (800a964 <xTimerGenericCommand+0x98>)
 800a920:	6818      	ldr	r0, [r3, #0]
 800a922:	f107 0110 	add.w	r1, r7, #16
 800a926:	2300      	movs	r3, #0
 800a928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a92a:	f7fe f9d3 	bl	8008cd4 <xQueueGenericSend>
 800a92e:	6278      	str	r0, [r7, #36]	; 0x24
 800a930:	e012      	b.n	800a958 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a932:	4b0c      	ldr	r3, [pc, #48]	; (800a964 <xTimerGenericCommand+0x98>)
 800a934:	6818      	ldr	r0, [r3, #0]
 800a936:	f107 0110 	add.w	r1, r7, #16
 800a93a:	2300      	movs	r3, #0
 800a93c:	2200      	movs	r2, #0
 800a93e:	f7fe f9c9 	bl	8008cd4 <xQueueGenericSend>
 800a942:	6278      	str	r0, [r7, #36]	; 0x24
 800a944:	e008      	b.n	800a958 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a946:	4b07      	ldr	r3, [pc, #28]	; (800a964 <xTimerGenericCommand+0x98>)
 800a948:	6818      	ldr	r0, [r3, #0]
 800a94a:	f107 0110 	add.w	r1, r7, #16
 800a94e:	2300      	movs	r3, #0
 800a950:	683a      	ldr	r2, [r7, #0]
 800a952:	f7fe fabd 	bl	8008ed0 <xQueueGenericSendFromISR>
 800a956:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3728      	adds	r7, #40	; 0x28
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	20001688 	.word	0x20001688

0800a968 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b088      	sub	sp, #32
 800a96c:	af02      	add	r7, sp, #8
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a972:	4b22      	ldr	r3, [pc, #136]	; (800a9fc <prvProcessExpiredTimer+0x94>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	68db      	ldr	r3, [r3, #12]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	3304      	adds	r3, #4
 800a980:	4618      	mov	r0, r3
 800a982:	f7fe f83f 	bl	8008a04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a98c:	f003 0304 	and.w	r3, r3, #4
 800a990:	2b00      	cmp	r3, #0
 800a992:	d022      	beq.n	800a9da <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	699a      	ldr	r2, [r3, #24]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	18d1      	adds	r1, r2, r3
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	683a      	ldr	r2, [r7, #0]
 800a9a0:	6978      	ldr	r0, [r7, #20]
 800a9a2:	f000 f8d1 	bl	800ab48 <prvInsertTimerInActiveList>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d01f      	beq.n	800a9ec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	9300      	str	r3, [sp, #0]
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	6978      	ldr	r0, [r7, #20]
 800a9b8:	f7ff ff88 	bl	800a8cc <xTimerGenericCommand>
 800a9bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d113      	bne.n	800a9ec <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c8:	f383 8811 	msr	BASEPRI, r3
 800a9cc:	f3bf 8f6f 	isb	sy
 800a9d0:	f3bf 8f4f 	dsb	sy
 800a9d4:	60fb      	str	r3, [r7, #12]
}
 800a9d6:	bf00      	nop
 800a9d8:	e7fe      	b.n	800a9d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9e0:	f023 0301 	bic.w	r3, r3, #1
 800a9e4:	b2da      	uxtb	r2, r3
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	6a1b      	ldr	r3, [r3, #32]
 800a9f0:	6978      	ldr	r0, [r7, #20]
 800a9f2:	4798      	blx	r3
}
 800a9f4:	bf00      	nop
 800a9f6:	3718      	adds	r7, #24
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	20001680 	.word	0x20001680

0800aa00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aa08:	f107 0308 	add.w	r3, r7, #8
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f000 f857 	bl	800aac0 <prvGetNextExpireTime>
 800aa12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	4619      	mov	r1, r3
 800aa18:	68f8      	ldr	r0, [r7, #12]
 800aa1a:	f000 f803 	bl	800aa24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aa1e:	f000 f8d5 	bl	800abcc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aa22:	e7f1      	b.n	800aa08 <prvTimerTask+0x8>

0800aa24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aa2e:	f7ff f81b 	bl	8009a68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa32:	f107 0308 	add.w	r3, r7, #8
 800aa36:	4618      	mov	r0, r3
 800aa38:	f000 f866 	bl	800ab08 <prvSampleTimeNow>
 800aa3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d130      	bne.n	800aaa6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d10a      	bne.n	800aa60 <prvProcessTimerOrBlockTask+0x3c>
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d806      	bhi.n	800aa60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aa52:	f7ff f817 	bl	8009a84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aa56:	68f9      	ldr	r1, [r7, #12]
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f7ff ff85 	bl	800a968 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aa5e:	e024      	b.n	800aaaa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d008      	beq.n	800aa78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aa66:	4b13      	ldr	r3, [pc, #76]	; (800aab4 <prvProcessTimerOrBlockTask+0x90>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d101      	bne.n	800aa74 <prvProcessTimerOrBlockTask+0x50>
 800aa70:	2301      	movs	r3, #1
 800aa72:	e000      	b.n	800aa76 <prvProcessTimerOrBlockTask+0x52>
 800aa74:	2300      	movs	r3, #0
 800aa76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aa78:	4b0f      	ldr	r3, [pc, #60]	; (800aab8 <prvProcessTimerOrBlockTask+0x94>)
 800aa7a:	6818      	ldr	r0, [r3, #0]
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	1ad3      	subs	r3, r2, r3
 800aa82:	683a      	ldr	r2, [r7, #0]
 800aa84:	4619      	mov	r1, r3
 800aa86:	f7fe fd59 	bl	800953c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aa8a:	f7fe fffb 	bl	8009a84 <xTaskResumeAll>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d10a      	bne.n	800aaaa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aa94:	4b09      	ldr	r3, [pc, #36]	; (800aabc <prvProcessTimerOrBlockTask+0x98>)
 800aa96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa9a:	601a      	str	r2, [r3, #0]
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	f3bf 8f6f 	isb	sy
}
 800aaa4:	e001      	b.n	800aaaa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aaa6:	f7fe ffed 	bl	8009a84 <xTaskResumeAll>
}
 800aaaa:	bf00      	nop
 800aaac:	3710      	adds	r7, #16
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	20001684 	.word	0x20001684
 800aab8:	20001688 	.word	0x20001688
 800aabc:	e000ed04 	.word	0xe000ed04

0800aac0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aac0:	b480      	push	{r7}
 800aac2:	b085      	sub	sp, #20
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aac8:	4b0e      	ldr	r3, [pc, #56]	; (800ab04 <prvGetNextExpireTime+0x44>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d101      	bne.n	800aad6 <prvGetNextExpireTime+0x16>
 800aad2:	2201      	movs	r2, #1
 800aad4:	e000      	b.n	800aad8 <prvGetNextExpireTime+0x18>
 800aad6:	2200      	movs	r2, #0
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d105      	bne.n	800aaf0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aae4:	4b07      	ldr	r3, [pc, #28]	; (800ab04 <prvGetNextExpireTime+0x44>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	60fb      	str	r3, [r7, #12]
 800aaee:	e001      	b.n	800aaf4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3714      	adds	r7, #20
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	20001680 	.word	0x20001680

0800ab08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ab10:	f7ff f856 	bl	8009bc0 <xTaskGetTickCount>
 800ab14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ab16:	4b0b      	ldr	r3, [pc, #44]	; (800ab44 <prvSampleTimeNow+0x3c>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d205      	bcs.n	800ab2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ab20:	f000 f936 	bl	800ad90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2201      	movs	r2, #1
 800ab28:	601a      	str	r2, [r3, #0]
 800ab2a:	e002      	b.n	800ab32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ab32:	4a04      	ldr	r2, [pc, #16]	; (800ab44 <prvSampleTimeNow+0x3c>)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ab38:	68fb      	ldr	r3, [r7, #12]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3710      	adds	r7, #16
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	20001690 	.word	0x20001690

0800ab48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b086      	sub	sp, #24
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	607a      	str	r2, [r7, #4]
 800ab54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ab56:	2300      	movs	r3, #0
 800ab58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	68ba      	ldr	r2, [r7, #8]
 800ab5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	68fa      	ldr	r2, [r7, #12]
 800ab64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ab66:	68ba      	ldr	r2, [r7, #8]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d812      	bhi.n	800ab94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	1ad2      	subs	r2, r2, r3
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	699b      	ldr	r3, [r3, #24]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d302      	bcc.n	800ab82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	617b      	str	r3, [r7, #20]
 800ab80:	e01b      	b.n	800abba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ab82:	4b10      	ldr	r3, [pc, #64]	; (800abc4 <prvInsertTimerInActiveList+0x7c>)
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	3304      	adds	r3, #4
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	4610      	mov	r0, r2
 800ab8e:	f7fd ff00 	bl	8008992 <vListInsert>
 800ab92:	e012      	b.n	800abba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d206      	bcs.n	800abaa <prvInsertTimerInActiveList+0x62>
 800ab9c:	68ba      	ldr	r2, [r7, #8]
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d302      	bcc.n	800abaa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aba4:	2301      	movs	r3, #1
 800aba6:	617b      	str	r3, [r7, #20]
 800aba8:	e007      	b.n	800abba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800abaa:	4b07      	ldr	r3, [pc, #28]	; (800abc8 <prvInsertTimerInActiveList+0x80>)
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	3304      	adds	r3, #4
 800abb2:	4619      	mov	r1, r3
 800abb4:	4610      	mov	r0, r2
 800abb6:	f7fd feec 	bl	8008992 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800abba:	697b      	ldr	r3, [r7, #20]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3718      	adds	r7, #24
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	20001684 	.word	0x20001684
 800abc8:	20001680 	.word	0x20001680

0800abcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b08e      	sub	sp, #56	; 0x38
 800abd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800abd2:	e0ca      	b.n	800ad6a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	da18      	bge.n	800ac0c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800abda:	1d3b      	adds	r3, r7, #4
 800abdc:	3304      	adds	r3, #4
 800abde:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800abe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d10a      	bne.n	800abfc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800abe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abea:	f383 8811 	msr	BASEPRI, r3
 800abee:	f3bf 8f6f 	isb	sy
 800abf2:	f3bf 8f4f 	dsb	sy
 800abf6:	61fb      	str	r3, [r7, #28]
}
 800abf8:	bf00      	nop
 800abfa:	e7fe      	b.n	800abfa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800abfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac02:	6850      	ldr	r0, [r2, #4]
 800ac04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac06:	6892      	ldr	r2, [r2, #8]
 800ac08:	4611      	mov	r1, r2
 800ac0a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f2c0 80aa 	blt.w	800ad68 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ac18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1a:	695b      	ldr	r3, [r3, #20]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d004      	beq.n	800ac2a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac22:	3304      	adds	r3, #4
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7fd feed 	bl	8008a04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac2a:	463b      	mov	r3, r7
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7ff ff6b 	bl	800ab08 <prvSampleTimeNow>
 800ac32:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b09      	cmp	r3, #9
 800ac38:	f200 8097 	bhi.w	800ad6a <prvProcessReceivedCommands+0x19e>
 800ac3c:	a201      	add	r2, pc, #4	; (adr r2, 800ac44 <prvProcessReceivedCommands+0x78>)
 800ac3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac42:	bf00      	nop
 800ac44:	0800ac6d 	.word	0x0800ac6d
 800ac48:	0800ac6d 	.word	0x0800ac6d
 800ac4c:	0800ac6d 	.word	0x0800ac6d
 800ac50:	0800ace1 	.word	0x0800ace1
 800ac54:	0800acf5 	.word	0x0800acf5
 800ac58:	0800ad3f 	.word	0x0800ad3f
 800ac5c:	0800ac6d 	.word	0x0800ac6d
 800ac60:	0800ac6d 	.word	0x0800ac6d
 800ac64:	0800ace1 	.word	0x0800ace1
 800ac68:	0800acf5 	.word	0x0800acf5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac72:	f043 0301 	orr.w	r3, r3, #1
 800ac76:	b2da      	uxtb	r2, r3
 800ac78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ac7e:	68ba      	ldr	r2, [r7, #8]
 800ac80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac82:	699b      	ldr	r3, [r3, #24]
 800ac84:	18d1      	adds	r1, r2, r3
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac8c:	f7ff ff5c 	bl	800ab48 <prvInsertTimerInActiveList>
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d069      	beq.n	800ad6a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac98:	6a1b      	ldr	r3, [r3, #32]
 800ac9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aca4:	f003 0304 	and.w	r3, r3, #4
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d05e      	beq.n	800ad6a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800acac:	68ba      	ldr	r2, [r7, #8]
 800acae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb0:	699b      	ldr	r3, [r3, #24]
 800acb2:	441a      	add	r2, r3
 800acb4:	2300      	movs	r3, #0
 800acb6:	9300      	str	r3, [sp, #0]
 800acb8:	2300      	movs	r3, #0
 800acba:	2100      	movs	r1, #0
 800acbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acbe:	f7ff fe05 	bl	800a8cc <xTimerGenericCommand>
 800acc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800acc4:	6a3b      	ldr	r3, [r7, #32]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d14f      	bne.n	800ad6a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800acca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acce:	f383 8811 	msr	BASEPRI, r3
 800acd2:	f3bf 8f6f 	isb	sy
 800acd6:	f3bf 8f4f 	dsb	sy
 800acda:	61bb      	str	r3, [r7, #24]
}
 800acdc:	bf00      	nop
 800acde:	e7fe      	b.n	800acde <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ace0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ace6:	f023 0301 	bic.w	r3, r3, #1
 800acea:	b2da      	uxtb	r2, r3
 800acec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800acf2:	e03a      	b.n	800ad6a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800acf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acfa:	f043 0301 	orr.w	r3, r3, #1
 800acfe:	b2da      	uxtb	r2, r3
 800ad00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ad06:	68ba      	ldr	r2, [r7, #8]
 800ad08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ad0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0e:	699b      	ldr	r3, [r3, #24]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d10a      	bne.n	800ad2a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ad14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad18:	f383 8811 	msr	BASEPRI, r3
 800ad1c:	f3bf 8f6f 	isb	sy
 800ad20:	f3bf 8f4f 	dsb	sy
 800ad24:	617b      	str	r3, [r7, #20]
}
 800ad26:	bf00      	nop
 800ad28:	e7fe      	b.n	800ad28 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ad2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2c:	699a      	ldr	r2, [r3, #24]
 800ad2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad30:	18d1      	adds	r1, r2, r3
 800ad32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad38:	f7ff ff06 	bl	800ab48 <prvInsertTimerInActiveList>
					break;
 800ad3c:	e015      	b.n	800ad6a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ad3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad44:	f003 0302 	and.w	r3, r3, #2
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d103      	bne.n	800ad54 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ad4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad4e:	f000 fbdf 	bl	800b510 <vPortFree>
 800ad52:	e00a      	b.n	800ad6a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad5a:	f023 0301 	bic.w	r3, r3, #1
 800ad5e:	b2da      	uxtb	r2, r3
 800ad60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ad66:	e000      	b.n	800ad6a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ad68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad6a:	4b08      	ldr	r3, [pc, #32]	; (800ad8c <prvProcessReceivedCommands+0x1c0>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	1d39      	adds	r1, r7, #4
 800ad70:	2200      	movs	r2, #0
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7fe f948 	bl	8009008 <xQueueReceive>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	f47f af2a 	bne.w	800abd4 <prvProcessReceivedCommands+0x8>
	}
}
 800ad80:	bf00      	nop
 800ad82:	bf00      	nop
 800ad84:	3730      	adds	r7, #48	; 0x30
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	20001688 	.word	0x20001688

0800ad90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b088      	sub	sp, #32
 800ad94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad96:	e048      	b.n	800ae2a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad98:	4b2d      	ldr	r3, [pc, #180]	; (800ae50 <prvSwitchTimerLists+0xc0>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ada2:	4b2b      	ldr	r3, [pc, #172]	; (800ae50 <prvSwitchTimerLists+0xc0>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	68db      	ldr	r3, [r3, #12]
 800ada8:	68db      	ldr	r3, [r3, #12]
 800adaa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	3304      	adds	r3, #4
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7fd fe27 	bl	8008a04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	6a1b      	ldr	r3, [r3, #32]
 800adba:	68f8      	ldr	r0, [r7, #12]
 800adbc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adc4:	f003 0304 	and.w	r3, r3, #4
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d02e      	beq.n	800ae2a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	699b      	ldr	r3, [r3, #24]
 800add0:	693a      	ldr	r2, [r7, #16]
 800add2:	4413      	add	r3, r2
 800add4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800add6:	68ba      	ldr	r2, [r7, #8]
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	429a      	cmp	r2, r3
 800addc:	d90e      	bls.n	800adfc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	68ba      	ldr	r2, [r7, #8]
 800ade2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	68fa      	ldr	r2, [r7, #12]
 800ade8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800adea:	4b19      	ldr	r3, [pc, #100]	; (800ae50 <prvSwitchTimerLists+0xc0>)
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	3304      	adds	r3, #4
 800adf2:	4619      	mov	r1, r3
 800adf4:	4610      	mov	r0, r2
 800adf6:	f7fd fdcc 	bl	8008992 <vListInsert>
 800adfa:	e016      	b.n	800ae2a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800adfc:	2300      	movs	r3, #0
 800adfe:	9300      	str	r3, [sp, #0]
 800ae00:	2300      	movs	r3, #0
 800ae02:	693a      	ldr	r2, [r7, #16]
 800ae04:	2100      	movs	r1, #0
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f7ff fd60 	bl	800a8cc <xTimerGenericCommand>
 800ae0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d10a      	bne.n	800ae2a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ae14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae18:	f383 8811 	msr	BASEPRI, r3
 800ae1c:	f3bf 8f6f 	isb	sy
 800ae20:	f3bf 8f4f 	dsb	sy
 800ae24:	603b      	str	r3, [r7, #0]
}
 800ae26:	bf00      	nop
 800ae28:	e7fe      	b.n	800ae28 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae2a:	4b09      	ldr	r3, [pc, #36]	; (800ae50 <prvSwitchTimerLists+0xc0>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d1b1      	bne.n	800ad98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ae34:	4b06      	ldr	r3, [pc, #24]	; (800ae50 <prvSwitchTimerLists+0xc0>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ae3a:	4b06      	ldr	r3, [pc, #24]	; (800ae54 <prvSwitchTimerLists+0xc4>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4a04      	ldr	r2, [pc, #16]	; (800ae50 <prvSwitchTimerLists+0xc0>)
 800ae40:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ae42:	4a04      	ldr	r2, [pc, #16]	; (800ae54 <prvSwitchTimerLists+0xc4>)
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	6013      	str	r3, [r2, #0]
}
 800ae48:	bf00      	nop
 800ae4a:	3718      	adds	r7, #24
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	20001680 	.word	0x20001680
 800ae54:	20001684 	.word	0x20001684

0800ae58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ae5e:	f000 f969 	bl	800b134 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ae62:	4b15      	ldr	r3, [pc, #84]	; (800aeb8 <prvCheckForValidListAndQueue+0x60>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d120      	bne.n	800aeac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ae6a:	4814      	ldr	r0, [pc, #80]	; (800aebc <prvCheckForValidListAndQueue+0x64>)
 800ae6c:	f7fd fd40 	bl	80088f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ae70:	4813      	ldr	r0, [pc, #76]	; (800aec0 <prvCheckForValidListAndQueue+0x68>)
 800ae72:	f7fd fd3d 	bl	80088f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ae76:	4b13      	ldr	r3, [pc, #76]	; (800aec4 <prvCheckForValidListAndQueue+0x6c>)
 800ae78:	4a10      	ldr	r2, [pc, #64]	; (800aebc <prvCheckForValidListAndQueue+0x64>)
 800ae7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ae7c:	4b12      	ldr	r3, [pc, #72]	; (800aec8 <prvCheckForValidListAndQueue+0x70>)
 800ae7e:	4a10      	ldr	r2, [pc, #64]	; (800aec0 <prvCheckForValidListAndQueue+0x68>)
 800ae80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ae82:	2300      	movs	r3, #0
 800ae84:	9300      	str	r3, [sp, #0]
 800ae86:	4b11      	ldr	r3, [pc, #68]	; (800aecc <prvCheckForValidListAndQueue+0x74>)
 800ae88:	4a11      	ldr	r2, [pc, #68]	; (800aed0 <prvCheckForValidListAndQueue+0x78>)
 800ae8a:	2110      	movs	r1, #16
 800ae8c:	200a      	movs	r0, #10
 800ae8e:	f7fd fe4b 	bl	8008b28 <xQueueGenericCreateStatic>
 800ae92:	4603      	mov	r3, r0
 800ae94:	4a08      	ldr	r2, [pc, #32]	; (800aeb8 <prvCheckForValidListAndQueue+0x60>)
 800ae96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ae98:	4b07      	ldr	r3, [pc, #28]	; (800aeb8 <prvCheckForValidListAndQueue+0x60>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d005      	beq.n	800aeac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aea0:	4b05      	ldr	r3, [pc, #20]	; (800aeb8 <prvCheckForValidListAndQueue+0x60>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	490b      	ldr	r1, [pc, #44]	; (800aed4 <prvCheckForValidListAndQueue+0x7c>)
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fe fb1e 	bl	80094e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aeac:	f000 f972 	bl	800b194 <vPortExitCritical>
}
 800aeb0:	bf00      	nop
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	20001688 	.word	0x20001688
 800aebc:	20001658 	.word	0x20001658
 800aec0:	2000166c 	.word	0x2000166c
 800aec4:	20001680 	.word	0x20001680
 800aec8:	20001684 	.word	0x20001684
 800aecc:	20001734 	.word	0x20001734
 800aed0:	20001694 	.word	0x20001694
 800aed4:	0800d0c4 	.word	0x0800d0c4

0800aed8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aed8:	b480      	push	{r7}
 800aeda:	b085      	sub	sp, #20
 800aedc:	af00      	add	r7, sp, #0
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	60b9      	str	r1, [r7, #8]
 800aee2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	3b04      	subs	r3, #4
 800aee8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aef0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	3b04      	subs	r3, #4
 800aef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	f023 0201 	bic.w	r2, r3, #1
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	3b04      	subs	r3, #4
 800af06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800af08:	4a0c      	ldr	r2, [pc, #48]	; (800af3c <pxPortInitialiseStack+0x64>)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	3b14      	subs	r3, #20
 800af12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	3b04      	subs	r3, #4
 800af1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f06f 0202 	mvn.w	r2, #2
 800af26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	3b20      	subs	r3, #32
 800af2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800af2e:	68fb      	ldr	r3, [r7, #12]
}
 800af30:	4618      	mov	r0, r3
 800af32:	3714      	adds	r7, #20
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr
 800af3c:	0800af41 	.word	0x0800af41

0800af40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800af46:	2300      	movs	r3, #0
 800af48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800af4a:	4b12      	ldr	r3, [pc, #72]	; (800af94 <prvTaskExitError+0x54>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af52:	d00a      	beq.n	800af6a <prvTaskExitError+0x2a>
	__asm volatile
 800af54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af58:	f383 8811 	msr	BASEPRI, r3
 800af5c:	f3bf 8f6f 	isb	sy
 800af60:	f3bf 8f4f 	dsb	sy
 800af64:	60fb      	str	r3, [r7, #12]
}
 800af66:	bf00      	nop
 800af68:	e7fe      	b.n	800af68 <prvTaskExitError+0x28>
	__asm volatile
 800af6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6e:	f383 8811 	msr	BASEPRI, r3
 800af72:	f3bf 8f6f 	isb	sy
 800af76:	f3bf 8f4f 	dsb	sy
 800af7a:	60bb      	str	r3, [r7, #8]
}
 800af7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800af7e:	bf00      	nop
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d0fc      	beq.n	800af80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800af86:	bf00      	nop
 800af88:	bf00      	nop
 800af8a:	3714      	adds	r7, #20
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr
 800af94:	20000040 	.word	0x20000040
	...

0800afa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800afa0:	4b07      	ldr	r3, [pc, #28]	; (800afc0 <pxCurrentTCBConst2>)
 800afa2:	6819      	ldr	r1, [r3, #0]
 800afa4:	6808      	ldr	r0, [r1, #0]
 800afa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afaa:	f380 8809 	msr	PSP, r0
 800afae:	f3bf 8f6f 	isb	sy
 800afb2:	f04f 0000 	mov.w	r0, #0
 800afb6:	f380 8811 	msr	BASEPRI, r0
 800afba:	4770      	bx	lr
 800afbc:	f3af 8000 	nop.w

0800afc0 <pxCurrentTCBConst2>:
 800afc0:	20001150 	.word	0x20001150
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800afc4:	bf00      	nop
 800afc6:	bf00      	nop

0800afc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800afc8:	4808      	ldr	r0, [pc, #32]	; (800afec <prvPortStartFirstTask+0x24>)
 800afca:	6800      	ldr	r0, [r0, #0]
 800afcc:	6800      	ldr	r0, [r0, #0]
 800afce:	f380 8808 	msr	MSP, r0
 800afd2:	f04f 0000 	mov.w	r0, #0
 800afd6:	f380 8814 	msr	CONTROL, r0
 800afda:	b662      	cpsie	i
 800afdc:	b661      	cpsie	f
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	f3bf 8f6f 	isb	sy
 800afe6:	df00      	svc	0
 800afe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800afea:	bf00      	nop
 800afec:	e000ed08 	.word	0xe000ed08

0800aff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b086      	sub	sp, #24
 800aff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aff6:	4b46      	ldr	r3, [pc, #280]	; (800b110 <xPortStartScheduler+0x120>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a46      	ldr	r2, [pc, #280]	; (800b114 <xPortStartScheduler+0x124>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d10a      	bne.n	800b016 <xPortStartScheduler+0x26>
	__asm volatile
 800b000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b004:	f383 8811 	msr	BASEPRI, r3
 800b008:	f3bf 8f6f 	isb	sy
 800b00c:	f3bf 8f4f 	dsb	sy
 800b010:	613b      	str	r3, [r7, #16]
}
 800b012:	bf00      	nop
 800b014:	e7fe      	b.n	800b014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b016:	4b3e      	ldr	r3, [pc, #248]	; (800b110 <xPortStartScheduler+0x120>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a3f      	ldr	r2, [pc, #252]	; (800b118 <xPortStartScheduler+0x128>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d10a      	bne.n	800b036 <xPortStartScheduler+0x46>
	__asm volatile
 800b020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	60fb      	str	r3, [r7, #12]
}
 800b032:	bf00      	nop
 800b034:	e7fe      	b.n	800b034 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b036:	4b39      	ldr	r3, [pc, #228]	; (800b11c <xPortStartScheduler+0x12c>)
 800b038:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	22ff      	movs	r2, #255	; 0xff
 800b046:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b050:	78fb      	ldrb	r3, [r7, #3]
 800b052:	b2db      	uxtb	r3, r3
 800b054:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b058:	b2da      	uxtb	r2, r3
 800b05a:	4b31      	ldr	r3, [pc, #196]	; (800b120 <xPortStartScheduler+0x130>)
 800b05c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b05e:	4b31      	ldr	r3, [pc, #196]	; (800b124 <xPortStartScheduler+0x134>)
 800b060:	2207      	movs	r2, #7
 800b062:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b064:	e009      	b.n	800b07a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b066:	4b2f      	ldr	r3, [pc, #188]	; (800b124 <xPortStartScheduler+0x134>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	3b01      	subs	r3, #1
 800b06c:	4a2d      	ldr	r2, [pc, #180]	; (800b124 <xPortStartScheduler+0x134>)
 800b06e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b070:	78fb      	ldrb	r3, [r7, #3]
 800b072:	b2db      	uxtb	r3, r3
 800b074:	005b      	lsls	r3, r3, #1
 800b076:	b2db      	uxtb	r3, r3
 800b078:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b07a:	78fb      	ldrb	r3, [r7, #3]
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b082:	2b80      	cmp	r3, #128	; 0x80
 800b084:	d0ef      	beq.n	800b066 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b086:	4b27      	ldr	r3, [pc, #156]	; (800b124 <xPortStartScheduler+0x134>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f1c3 0307 	rsb	r3, r3, #7
 800b08e:	2b04      	cmp	r3, #4
 800b090:	d00a      	beq.n	800b0a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b096:	f383 8811 	msr	BASEPRI, r3
 800b09a:	f3bf 8f6f 	isb	sy
 800b09e:	f3bf 8f4f 	dsb	sy
 800b0a2:	60bb      	str	r3, [r7, #8]
}
 800b0a4:	bf00      	nop
 800b0a6:	e7fe      	b.n	800b0a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b0a8:	4b1e      	ldr	r3, [pc, #120]	; (800b124 <xPortStartScheduler+0x134>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	021b      	lsls	r3, r3, #8
 800b0ae:	4a1d      	ldr	r2, [pc, #116]	; (800b124 <xPortStartScheduler+0x134>)
 800b0b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b0b2:	4b1c      	ldr	r3, [pc, #112]	; (800b124 <xPortStartScheduler+0x134>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b0ba:	4a1a      	ldr	r2, [pc, #104]	; (800b124 <xPortStartScheduler+0x134>)
 800b0bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	b2da      	uxtb	r2, r3
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b0c6:	4b18      	ldr	r3, [pc, #96]	; (800b128 <xPortStartScheduler+0x138>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a17      	ldr	r2, [pc, #92]	; (800b128 <xPortStartScheduler+0x138>)
 800b0cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b0d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b0d2:	4b15      	ldr	r3, [pc, #84]	; (800b128 <xPortStartScheduler+0x138>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a14      	ldr	r2, [pc, #80]	; (800b128 <xPortStartScheduler+0x138>)
 800b0d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b0dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b0de:	f000 f8dd 	bl	800b29c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b0e2:	4b12      	ldr	r3, [pc, #72]	; (800b12c <xPortStartScheduler+0x13c>)
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b0e8:	f000 f8fc 	bl	800b2e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b0ec:	4b10      	ldr	r3, [pc, #64]	; (800b130 <xPortStartScheduler+0x140>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4a0f      	ldr	r2, [pc, #60]	; (800b130 <xPortStartScheduler+0x140>)
 800b0f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b0f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b0f8:	f7ff ff66 	bl	800afc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b0fc:	f7fe fe2a 	bl	8009d54 <vTaskSwitchContext>
	prvTaskExitError();
 800b100:	f7ff ff1e 	bl	800af40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b104:	2300      	movs	r3, #0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3718      	adds	r7, #24
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	e000ed00 	.word	0xe000ed00
 800b114:	410fc271 	.word	0x410fc271
 800b118:	410fc270 	.word	0x410fc270
 800b11c:	e000e400 	.word	0xe000e400
 800b120:	20001784 	.word	0x20001784
 800b124:	20001788 	.word	0x20001788
 800b128:	e000ed20 	.word	0xe000ed20
 800b12c:	20000040 	.word	0x20000040
 800b130:	e000ef34 	.word	0xe000ef34

0800b134 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
	__asm volatile
 800b13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13e:	f383 8811 	msr	BASEPRI, r3
 800b142:	f3bf 8f6f 	isb	sy
 800b146:	f3bf 8f4f 	dsb	sy
 800b14a:	607b      	str	r3, [r7, #4]
}
 800b14c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b14e:	4b0f      	ldr	r3, [pc, #60]	; (800b18c <vPortEnterCritical+0x58>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	3301      	adds	r3, #1
 800b154:	4a0d      	ldr	r2, [pc, #52]	; (800b18c <vPortEnterCritical+0x58>)
 800b156:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b158:	4b0c      	ldr	r3, [pc, #48]	; (800b18c <vPortEnterCritical+0x58>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d10f      	bne.n	800b180 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b160:	4b0b      	ldr	r3, [pc, #44]	; (800b190 <vPortEnterCritical+0x5c>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	b2db      	uxtb	r3, r3
 800b166:	2b00      	cmp	r3, #0
 800b168:	d00a      	beq.n	800b180 <vPortEnterCritical+0x4c>
	__asm volatile
 800b16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16e:	f383 8811 	msr	BASEPRI, r3
 800b172:	f3bf 8f6f 	isb	sy
 800b176:	f3bf 8f4f 	dsb	sy
 800b17a:	603b      	str	r3, [r7, #0]
}
 800b17c:	bf00      	nop
 800b17e:	e7fe      	b.n	800b17e <vPortEnterCritical+0x4a>
	}
}
 800b180:	bf00      	nop
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr
 800b18c:	20000040 	.word	0x20000040
 800b190:	e000ed04 	.word	0xe000ed04

0800b194 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b19a:	4b12      	ldr	r3, [pc, #72]	; (800b1e4 <vPortExitCritical+0x50>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d10a      	bne.n	800b1b8 <vPortExitCritical+0x24>
	__asm volatile
 800b1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a6:	f383 8811 	msr	BASEPRI, r3
 800b1aa:	f3bf 8f6f 	isb	sy
 800b1ae:	f3bf 8f4f 	dsb	sy
 800b1b2:	607b      	str	r3, [r7, #4]
}
 800b1b4:	bf00      	nop
 800b1b6:	e7fe      	b.n	800b1b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b1b8:	4b0a      	ldr	r3, [pc, #40]	; (800b1e4 <vPortExitCritical+0x50>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	4a09      	ldr	r2, [pc, #36]	; (800b1e4 <vPortExitCritical+0x50>)
 800b1c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b1c2:	4b08      	ldr	r3, [pc, #32]	; (800b1e4 <vPortExitCritical+0x50>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d105      	bne.n	800b1d6 <vPortExitCritical+0x42>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	f383 8811 	msr	BASEPRI, r3
}
 800b1d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b1d6:	bf00      	nop
 800b1d8:	370c      	adds	r7, #12
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop
 800b1e4:	20000040 	.word	0x20000040
	...

0800b1f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b1f0:	f3ef 8009 	mrs	r0, PSP
 800b1f4:	f3bf 8f6f 	isb	sy
 800b1f8:	4b15      	ldr	r3, [pc, #84]	; (800b250 <pxCurrentTCBConst>)
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	f01e 0f10 	tst.w	lr, #16
 800b200:	bf08      	it	eq
 800b202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b20a:	6010      	str	r0, [r2, #0]
 800b20c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b210:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b214:	f380 8811 	msr	BASEPRI, r0
 800b218:	f3bf 8f4f 	dsb	sy
 800b21c:	f3bf 8f6f 	isb	sy
 800b220:	f7fe fd98 	bl	8009d54 <vTaskSwitchContext>
 800b224:	f04f 0000 	mov.w	r0, #0
 800b228:	f380 8811 	msr	BASEPRI, r0
 800b22c:	bc09      	pop	{r0, r3}
 800b22e:	6819      	ldr	r1, [r3, #0]
 800b230:	6808      	ldr	r0, [r1, #0]
 800b232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b236:	f01e 0f10 	tst.w	lr, #16
 800b23a:	bf08      	it	eq
 800b23c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b240:	f380 8809 	msr	PSP, r0
 800b244:	f3bf 8f6f 	isb	sy
 800b248:	4770      	bx	lr
 800b24a:	bf00      	nop
 800b24c:	f3af 8000 	nop.w

0800b250 <pxCurrentTCBConst>:
 800b250:	20001150 	.word	0x20001150
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b254:	bf00      	nop
 800b256:	bf00      	nop

0800b258 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
	__asm volatile
 800b25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b262:	f383 8811 	msr	BASEPRI, r3
 800b266:	f3bf 8f6f 	isb	sy
 800b26a:	f3bf 8f4f 	dsb	sy
 800b26e:	607b      	str	r3, [r7, #4]
}
 800b270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b272:	f7fe fcb5 	bl	8009be0 <xTaskIncrementTick>
 800b276:	4603      	mov	r3, r0
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d003      	beq.n	800b284 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b27c:	4b06      	ldr	r3, [pc, #24]	; (800b298 <xPortSysTickHandler+0x40>)
 800b27e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b282:	601a      	str	r2, [r3, #0]
 800b284:	2300      	movs	r3, #0
 800b286:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	f383 8811 	msr	BASEPRI, r3
}
 800b28e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b290:	bf00      	nop
 800b292:	3708      	adds	r7, #8
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}
 800b298:	e000ed04 	.word	0xe000ed04

0800b29c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b29c:	b480      	push	{r7}
 800b29e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b2a0:	4b0b      	ldr	r3, [pc, #44]	; (800b2d0 <vPortSetupTimerInterrupt+0x34>)
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b2a6:	4b0b      	ldr	r3, [pc, #44]	; (800b2d4 <vPortSetupTimerInterrupt+0x38>)
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b2ac:	4b0a      	ldr	r3, [pc, #40]	; (800b2d8 <vPortSetupTimerInterrupt+0x3c>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a0a      	ldr	r2, [pc, #40]	; (800b2dc <vPortSetupTimerInterrupt+0x40>)
 800b2b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2b6:	099b      	lsrs	r3, r3, #6
 800b2b8:	4a09      	ldr	r2, [pc, #36]	; (800b2e0 <vPortSetupTimerInterrupt+0x44>)
 800b2ba:	3b01      	subs	r3, #1
 800b2bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b2be:	4b04      	ldr	r3, [pc, #16]	; (800b2d0 <vPortSetupTimerInterrupt+0x34>)
 800b2c0:	2207      	movs	r2, #7
 800b2c2:	601a      	str	r2, [r3, #0]
}
 800b2c4:	bf00      	nop
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr
 800b2ce:	bf00      	nop
 800b2d0:	e000e010 	.word	0xe000e010
 800b2d4:	e000e018 	.word	0xe000e018
 800b2d8:	20000000 	.word	0x20000000
 800b2dc:	10624dd3 	.word	0x10624dd3
 800b2e0:	e000e014 	.word	0xe000e014

0800b2e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b2e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b2f4 <vPortEnableVFP+0x10>
 800b2e8:	6801      	ldr	r1, [r0, #0]
 800b2ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b2ee:	6001      	str	r1, [r0, #0]
 800b2f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b2f2:	bf00      	nop
 800b2f4:	e000ed88 	.word	0xe000ed88

0800b2f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b2fe:	f3ef 8305 	mrs	r3, IPSR
 800b302:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2b0f      	cmp	r3, #15
 800b308:	d914      	bls.n	800b334 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b30a:	4a17      	ldr	r2, [pc, #92]	; (800b368 <vPortValidateInterruptPriority+0x70>)
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	4413      	add	r3, r2
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b314:	4b15      	ldr	r3, [pc, #84]	; (800b36c <vPortValidateInterruptPriority+0x74>)
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	7afa      	ldrb	r2, [r7, #11]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d20a      	bcs.n	800b334 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b322:	f383 8811 	msr	BASEPRI, r3
 800b326:	f3bf 8f6f 	isb	sy
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	607b      	str	r3, [r7, #4]
}
 800b330:	bf00      	nop
 800b332:	e7fe      	b.n	800b332 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b334:	4b0e      	ldr	r3, [pc, #56]	; (800b370 <vPortValidateInterruptPriority+0x78>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b33c:	4b0d      	ldr	r3, [pc, #52]	; (800b374 <vPortValidateInterruptPriority+0x7c>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	429a      	cmp	r2, r3
 800b342:	d90a      	bls.n	800b35a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b348:	f383 8811 	msr	BASEPRI, r3
 800b34c:	f3bf 8f6f 	isb	sy
 800b350:	f3bf 8f4f 	dsb	sy
 800b354:	603b      	str	r3, [r7, #0]
}
 800b356:	bf00      	nop
 800b358:	e7fe      	b.n	800b358 <vPortValidateInterruptPriority+0x60>
	}
 800b35a:	bf00      	nop
 800b35c:	3714      	adds	r7, #20
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr
 800b366:	bf00      	nop
 800b368:	e000e3f0 	.word	0xe000e3f0
 800b36c:	20001784 	.word	0x20001784
 800b370:	e000ed0c 	.word	0xe000ed0c
 800b374:	20001788 	.word	0x20001788

0800b378 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b08a      	sub	sp, #40	; 0x28
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b380:	2300      	movs	r3, #0
 800b382:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b384:	f7fe fb70 	bl	8009a68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b388:	4b5b      	ldr	r3, [pc, #364]	; (800b4f8 <pvPortMalloc+0x180>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d101      	bne.n	800b394 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b390:	f000 f920 	bl	800b5d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b394:	4b59      	ldr	r3, [pc, #356]	; (800b4fc <pvPortMalloc+0x184>)
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4013      	ands	r3, r2
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	f040 8093 	bne.w	800b4c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d01d      	beq.n	800b3e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b3a8:	2208      	movs	r2, #8
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f003 0307 	and.w	r3, r3, #7
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d014      	beq.n	800b3e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f023 0307 	bic.w	r3, r3, #7
 800b3c0:	3308      	adds	r3, #8
 800b3c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f003 0307 	and.w	r3, r3, #7
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00a      	beq.n	800b3e4 <pvPortMalloc+0x6c>
	__asm volatile
 800b3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d2:	f383 8811 	msr	BASEPRI, r3
 800b3d6:	f3bf 8f6f 	isb	sy
 800b3da:	f3bf 8f4f 	dsb	sy
 800b3de:	617b      	str	r3, [r7, #20]
}
 800b3e0:	bf00      	nop
 800b3e2:	e7fe      	b.n	800b3e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d06e      	beq.n	800b4c8 <pvPortMalloc+0x150>
 800b3ea:	4b45      	ldr	r3, [pc, #276]	; (800b500 <pvPortMalloc+0x188>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d869      	bhi.n	800b4c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b3f4:	4b43      	ldr	r3, [pc, #268]	; (800b504 <pvPortMalloc+0x18c>)
 800b3f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b3f8:	4b42      	ldr	r3, [pc, #264]	; (800b504 <pvPortMalloc+0x18c>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3fe:	e004      	b.n	800b40a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b402:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	429a      	cmp	r2, r3
 800b412:	d903      	bls.n	800b41c <pvPortMalloc+0xa4>
 800b414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d1f1      	bne.n	800b400 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b41c:	4b36      	ldr	r3, [pc, #216]	; (800b4f8 <pvPortMalloc+0x180>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b422:	429a      	cmp	r2, r3
 800b424:	d050      	beq.n	800b4c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b426:	6a3b      	ldr	r3, [r7, #32]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	2208      	movs	r2, #8
 800b42c:	4413      	add	r3, r2
 800b42e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	6a3b      	ldr	r3, [r7, #32]
 800b436:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43a:	685a      	ldr	r2, [r3, #4]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	1ad2      	subs	r2, r2, r3
 800b440:	2308      	movs	r3, #8
 800b442:	005b      	lsls	r3, r3, #1
 800b444:	429a      	cmp	r2, r3
 800b446:	d91f      	bls.n	800b488 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	4413      	add	r3, r2
 800b44e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	f003 0307 	and.w	r3, r3, #7
 800b456:	2b00      	cmp	r3, #0
 800b458:	d00a      	beq.n	800b470 <pvPortMalloc+0xf8>
	__asm volatile
 800b45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45e:	f383 8811 	msr	BASEPRI, r3
 800b462:	f3bf 8f6f 	isb	sy
 800b466:	f3bf 8f4f 	dsb	sy
 800b46a:	613b      	str	r3, [r7, #16]
}
 800b46c:	bf00      	nop
 800b46e:	e7fe      	b.n	800b46e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b472:	685a      	ldr	r2, [r3, #4]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	1ad2      	subs	r2, r2, r3
 800b478:	69bb      	ldr	r3, [r7, #24]
 800b47a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b482:	69b8      	ldr	r0, [r7, #24]
 800b484:	f000 f908 	bl	800b698 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b488:	4b1d      	ldr	r3, [pc, #116]	; (800b500 <pvPortMalloc+0x188>)
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	1ad3      	subs	r3, r2, r3
 800b492:	4a1b      	ldr	r2, [pc, #108]	; (800b500 <pvPortMalloc+0x188>)
 800b494:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b496:	4b1a      	ldr	r3, [pc, #104]	; (800b500 <pvPortMalloc+0x188>)
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	4b1b      	ldr	r3, [pc, #108]	; (800b508 <pvPortMalloc+0x190>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d203      	bcs.n	800b4aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b4a2:	4b17      	ldr	r3, [pc, #92]	; (800b500 <pvPortMalloc+0x188>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a18      	ldr	r2, [pc, #96]	; (800b508 <pvPortMalloc+0x190>)
 800b4a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ac:	685a      	ldr	r2, [r3, #4]
 800b4ae:	4b13      	ldr	r3, [pc, #76]	; (800b4fc <pvPortMalloc+0x184>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	431a      	orrs	r2, r3
 800b4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b4be:	4b13      	ldr	r3, [pc, #76]	; (800b50c <pvPortMalloc+0x194>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	4a11      	ldr	r2, [pc, #68]	; (800b50c <pvPortMalloc+0x194>)
 800b4c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b4c8:	f7fe fadc 	bl	8009a84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	f003 0307 	and.w	r3, r3, #7
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d00a      	beq.n	800b4ec <pvPortMalloc+0x174>
	__asm volatile
 800b4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4da:	f383 8811 	msr	BASEPRI, r3
 800b4de:	f3bf 8f6f 	isb	sy
 800b4e2:	f3bf 8f4f 	dsb	sy
 800b4e6:	60fb      	str	r3, [r7, #12]
}
 800b4e8:	bf00      	nop
 800b4ea:	e7fe      	b.n	800b4ea <pvPortMalloc+0x172>
	return pvReturn;
 800b4ec:	69fb      	ldr	r3, [r7, #28]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3728      	adds	r7, #40	; 0x28
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	20002b1c 	.word	0x20002b1c
 800b4fc:	20002b30 	.word	0x20002b30
 800b500:	20002b20 	.word	0x20002b20
 800b504:	20002b14 	.word	0x20002b14
 800b508:	20002b24 	.word	0x20002b24
 800b50c:	20002b28 	.word	0x20002b28

0800b510 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b086      	sub	sp, #24
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d04d      	beq.n	800b5be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b522:	2308      	movs	r3, #8
 800b524:	425b      	negs	r3, r3
 800b526:	697a      	ldr	r2, [r7, #20]
 800b528:	4413      	add	r3, r2
 800b52a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	685a      	ldr	r2, [r3, #4]
 800b534:	4b24      	ldr	r3, [pc, #144]	; (800b5c8 <vPortFree+0xb8>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4013      	ands	r3, r2
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d10a      	bne.n	800b554 <vPortFree+0x44>
	__asm volatile
 800b53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b542:	f383 8811 	msr	BASEPRI, r3
 800b546:	f3bf 8f6f 	isb	sy
 800b54a:	f3bf 8f4f 	dsb	sy
 800b54e:	60fb      	str	r3, [r7, #12]
}
 800b550:	bf00      	nop
 800b552:	e7fe      	b.n	800b552 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d00a      	beq.n	800b572 <vPortFree+0x62>
	__asm volatile
 800b55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b560:	f383 8811 	msr	BASEPRI, r3
 800b564:	f3bf 8f6f 	isb	sy
 800b568:	f3bf 8f4f 	dsb	sy
 800b56c:	60bb      	str	r3, [r7, #8]
}
 800b56e:	bf00      	nop
 800b570:	e7fe      	b.n	800b570 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	685a      	ldr	r2, [r3, #4]
 800b576:	4b14      	ldr	r3, [pc, #80]	; (800b5c8 <vPortFree+0xb8>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4013      	ands	r3, r2
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d01e      	beq.n	800b5be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d11a      	bne.n	800b5be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	685a      	ldr	r2, [r3, #4]
 800b58c:	4b0e      	ldr	r3, [pc, #56]	; (800b5c8 <vPortFree+0xb8>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	43db      	mvns	r3, r3
 800b592:	401a      	ands	r2, r3
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b598:	f7fe fa66 	bl	8009a68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	685a      	ldr	r2, [r3, #4]
 800b5a0:	4b0a      	ldr	r3, [pc, #40]	; (800b5cc <vPortFree+0xbc>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	4a09      	ldr	r2, [pc, #36]	; (800b5cc <vPortFree+0xbc>)
 800b5a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b5aa:	6938      	ldr	r0, [r7, #16]
 800b5ac:	f000 f874 	bl	800b698 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b5b0:	4b07      	ldr	r3, [pc, #28]	; (800b5d0 <vPortFree+0xc0>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	3301      	adds	r3, #1
 800b5b6:	4a06      	ldr	r2, [pc, #24]	; (800b5d0 <vPortFree+0xc0>)
 800b5b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b5ba:	f7fe fa63 	bl	8009a84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b5be:	bf00      	nop
 800b5c0:	3718      	adds	r7, #24
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	20002b30 	.word	0x20002b30
 800b5cc:	20002b20 	.word	0x20002b20
 800b5d0:	20002b2c 	.word	0x20002b2c

0800b5d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b085      	sub	sp, #20
 800b5d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b5da:	f241 3388 	movw	r3, #5000	; 0x1388
 800b5de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b5e0:	4b27      	ldr	r3, [pc, #156]	; (800b680 <prvHeapInit+0xac>)
 800b5e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f003 0307 	and.w	r3, r3, #7
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d00c      	beq.n	800b608 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	3307      	adds	r3, #7
 800b5f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f023 0307 	bic.w	r3, r3, #7
 800b5fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b5fc:	68ba      	ldr	r2, [r7, #8]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	1ad3      	subs	r3, r2, r3
 800b602:	4a1f      	ldr	r2, [pc, #124]	; (800b680 <prvHeapInit+0xac>)
 800b604:	4413      	add	r3, r2
 800b606:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b60c:	4a1d      	ldr	r2, [pc, #116]	; (800b684 <prvHeapInit+0xb0>)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b612:	4b1c      	ldr	r3, [pc, #112]	; (800b684 <prvHeapInit+0xb0>)
 800b614:	2200      	movs	r2, #0
 800b616:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	68ba      	ldr	r2, [r7, #8]
 800b61c:	4413      	add	r3, r2
 800b61e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b620:	2208      	movs	r2, #8
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	1a9b      	subs	r3, r3, r2
 800b626:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f023 0307 	bic.w	r3, r3, #7
 800b62e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	4a15      	ldr	r2, [pc, #84]	; (800b688 <prvHeapInit+0xb4>)
 800b634:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b636:	4b14      	ldr	r3, [pc, #80]	; (800b688 <prvHeapInit+0xb4>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	2200      	movs	r2, #0
 800b63c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b63e:	4b12      	ldr	r3, [pc, #72]	; (800b688 <prvHeapInit+0xb4>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	2200      	movs	r2, #0
 800b644:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	68fa      	ldr	r2, [r7, #12]
 800b64e:	1ad2      	subs	r2, r2, r3
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b654:	4b0c      	ldr	r3, [pc, #48]	; (800b688 <prvHeapInit+0xb4>)
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	4a0a      	ldr	r2, [pc, #40]	; (800b68c <prvHeapInit+0xb8>)
 800b662:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	4a09      	ldr	r2, [pc, #36]	; (800b690 <prvHeapInit+0xbc>)
 800b66a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b66c:	4b09      	ldr	r3, [pc, #36]	; (800b694 <prvHeapInit+0xc0>)
 800b66e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b672:	601a      	str	r2, [r3, #0]
}
 800b674:	bf00      	nop
 800b676:	3714      	adds	r7, #20
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr
 800b680:	2000178c 	.word	0x2000178c
 800b684:	20002b14 	.word	0x20002b14
 800b688:	20002b1c 	.word	0x20002b1c
 800b68c:	20002b24 	.word	0x20002b24
 800b690:	20002b20 	.word	0x20002b20
 800b694:	20002b30 	.word	0x20002b30

0800b698 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b698:	b480      	push	{r7}
 800b69a:	b085      	sub	sp, #20
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b6a0:	4b28      	ldr	r3, [pc, #160]	; (800b744 <prvInsertBlockIntoFreeList+0xac>)
 800b6a2:	60fb      	str	r3, [r7, #12]
 800b6a4:	e002      	b.n	800b6ac <prvInsertBlockIntoFreeList+0x14>
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	60fb      	str	r3, [r7, #12]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d8f7      	bhi.n	800b6a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	68ba      	ldr	r2, [r7, #8]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	687a      	ldr	r2, [r7, #4]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d108      	bne.n	800b6da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	685a      	ldr	r2, [r3, #4]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	441a      	add	r2, r3
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	68ba      	ldr	r2, [r7, #8]
 800b6e4:	441a      	add	r2, r3
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d118      	bne.n	800b720 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	4b15      	ldr	r3, [pc, #84]	; (800b748 <prvInsertBlockIntoFreeList+0xb0>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d00d      	beq.n	800b716 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	685a      	ldr	r2, [r3, #4]
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	441a      	add	r2, r3
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	681a      	ldr	r2, [r3, #0]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	601a      	str	r2, [r3, #0]
 800b714:	e008      	b.n	800b728 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b716:	4b0c      	ldr	r3, [pc, #48]	; (800b748 <prvInsertBlockIntoFreeList+0xb0>)
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	601a      	str	r2, [r3, #0]
 800b71e:	e003      	b.n	800b728 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d002      	beq.n	800b736 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b736:	bf00      	nop
 800b738:	3714      	adds	r7, #20
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	20002b14 	.word	0x20002b14
 800b748:	20002b1c 	.word	0x20002b1c

0800b74c <__errno>:
 800b74c:	4b01      	ldr	r3, [pc, #4]	; (800b754 <__errno+0x8>)
 800b74e:	6818      	ldr	r0, [r3, #0]
 800b750:	4770      	bx	lr
 800b752:	bf00      	nop
 800b754:	20000044 	.word	0x20000044

0800b758 <std>:
 800b758:	2300      	movs	r3, #0
 800b75a:	b510      	push	{r4, lr}
 800b75c:	4604      	mov	r4, r0
 800b75e:	e9c0 3300 	strd	r3, r3, [r0]
 800b762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b766:	6083      	str	r3, [r0, #8]
 800b768:	8181      	strh	r1, [r0, #12]
 800b76a:	6643      	str	r3, [r0, #100]	; 0x64
 800b76c:	81c2      	strh	r2, [r0, #14]
 800b76e:	6183      	str	r3, [r0, #24]
 800b770:	4619      	mov	r1, r3
 800b772:	2208      	movs	r2, #8
 800b774:	305c      	adds	r0, #92	; 0x5c
 800b776:	f000 f91a 	bl	800b9ae <memset>
 800b77a:	4b05      	ldr	r3, [pc, #20]	; (800b790 <std+0x38>)
 800b77c:	6263      	str	r3, [r4, #36]	; 0x24
 800b77e:	4b05      	ldr	r3, [pc, #20]	; (800b794 <std+0x3c>)
 800b780:	62a3      	str	r3, [r4, #40]	; 0x28
 800b782:	4b05      	ldr	r3, [pc, #20]	; (800b798 <std+0x40>)
 800b784:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b786:	4b05      	ldr	r3, [pc, #20]	; (800b79c <std+0x44>)
 800b788:	6224      	str	r4, [r4, #32]
 800b78a:	6323      	str	r3, [r4, #48]	; 0x30
 800b78c:	bd10      	pop	{r4, pc}
 800b78e:	bf00      	nop
 800b790:	0800bd61 	.word	0x0800bd61
 800b794:	0800bd83 	.word	0x0800bd83
 800b798:	0800bdbb 	.word	0x0800bdbb
 800b79c:	0800bddf 	.word	0x0800bddf

0800b7a0 <_cleanup_r>:
 800b7a0:	4901      	ldr	r1, [pc, #4]	; (800b7a8 <_cleanup_r+0x8>)
 800b7a2:	f000 b8af 	b.w	800b904 <_fwalk_reent>
 800b7a6:	bf00      	nop
 800b7a8:	0800c0b9 	.word	0x0800c0b9

0800b7ac <__sfmoreglue>:
 800b7ac:	b570      	push	{r4, r5, r6, lr}
 800b7ae:	2268      	movs	r2, #104	; 0x68
 800b7b0:	1e4d      	subs	r5, r1, #1
 800b7b2:	4355      	muls	r5, r2
 800b7b4:	460e      	mov	r6, r1
 800b7b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b7ba:	f000 f921 	bl	800ba00 <_malloc_r>
 800b7be:	4604      	mov	r4, r0
 800b7c0:	b140      	cbz	r0, 800b7d4 <__sfmoreglue+0x28>
 800b7c2:	2100      	movs	r1, #0
 800b7c4:	e9c0 1600 	strd	r1, r6, [r0]
 800b7c8:	300c      	adds	r0, #12
 800b7ca:	60a0      	str	r0, [r4, #8]
 800b7cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b7d0:	f000 f8ed 	bl	800b9ae <memset>
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	bd70      	pop	{r4, r5, r6, pc}

0800b7d8 <__sfp_lock_acquire>:
 800b7d8:	4801      	ldr	r0, [pc, #4]	; (800b7e0 <__sfp_lock_acquire+0x8>)
 800b7da:	f000 b8d8 	b.w	800b98e <__retarget_lock_acquire_recursive>
 800b7de:	bf00      	nop
 800b7e0:	20002b35 	.word	0x20002b35

0800b7e4 <__sfp_lock_release>:
 800b7e4:	4801      	ldr	r0, [pc, #4]	; (800b7ec <__sfp_lock_release+0x8>)
 800b7e6:	f000 b8d3 	b.w	800b990 <__retarget_lock_release_recursive>
 800b7ea:	bf00      	nop
 800b7ec:	20002b35 	.word	0x20002b35

0800b7f0 <__sinit_lock_acquire>:
 800b7f0:	4801      	ldr	r0, [pc, #4]	; (800b7f8 <__sinit_lock_acquire+0x8>)
 800b7f2:	f000 b8cc 	b.w	800b98e <__retarget_lock_acquire_recursive>
 800b7f6:	bf00      	nop
 800b7f8:	20002b36 	.word	0x20002b36

0800b7fc <__sinit_lock_release>:
 800b7fc:	4801      	ldr	r0, [pc, #4]	; (800b804 <__sinit_lock_release+0x8>)
 800b7fe:	f000 b8c7 	b.w	800b990 <__retarget_lock_release_recursive>
 800b802:	bf00      	nop
 800b804:	20002b36 	.word	0x20002b36

0800b808 <__sinit>:
 800b808:	b510      	push	{r4, lr}
 800b80a:	4604      	mov	r4, r0
 800b80c:	f7ff fff0 	bl	800b7f0 <__sinit_lock_acquire>
 800b810:	69a3      	ldr	r3, [r4, #24]
 800b812:	b11b      	cbz	r3, 800b81c <__sinit+0x14>
 800b814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b818:	f7ff bff0 	b.w	800b7fc <__sinit_lock_release>
 800b81c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b820:	6523      	str	r3, [r4, #80]	; 0x50
 800b822:	4b13      	ldr	r3, [pc, #76]	; (800b870 <__sinit+0x68>)
 800b824:	4a13      	ldr	r2, [pc, #76]	; (800b874 <__sinit+0x6c>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	62a2      	str	r2, [r4, #40]	; 0x28
 800b82a:	42a3      	cmp	r3, r4
 800b82c:	bf04      	itt	eq
 800b82e:	2301      	moveq	r3, #1
 800b830:	61a3      	streq	r3, [r4, #24]
 800b832:	4620      	mov	r0, r4
 800b834:	f000 f820 	bl	800b878 <__sfp>
 800b838:	6060      	str	r0, [r4, #4]
 800b83a:	4620      	mov	r0, r4
 800b83c:	f000 f81c 	bl	800b878 <__sfp>
 800b840:	60a0      	str	r0, [r4, #8]
 800b842:	4620      	mov	r0, r4
 800b844:	f000 f818 	bl	800b878 <__sfp>
 800b848:	2200      	movs	r2, #0
 800b84a:	60e0      	str	r0, [r4, #12]
 800b84c:	2104      	movs	r1, #4
 800b84e:	6860      	ldr	r0, [r4, #4]
 800b850:	f7ff ff82 	bl	800b758 <std>
 800b854:	68a0      	ldr	r0, [r4, #8]
 800b856:	2201      	movs	r2, #1
 800b858:	2109      	movs	r1, #9
 800b85a:	f7ff ff7d 	bl	800b758 <std>
 800b85e:	68e0      	ldr	r0, [r4, #12]
 800b860:	2202      	movs	r2, #2
 800b862:	2112      	movs	r1, #18
 800b864:	f7ff ff78 	bl	800b758 <std>
 800b868:	2301      	movs	r3, #1
 800b86a:	61a3      	str	r3, [r4, #24]
 800b86c:	e7d2      	b.n	800b814 <__sinit+0xc>
 800b86e:	bf00      	nop
 800b870:	0800d234 	.word	0x0800d234
 800b874:	0800b7a1 	.word	0x0800b7a1

0800b878 <__sfp>:
 800b878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b87a:	4607      	mov	r7, r0
 800b87c:	f7ff ffac 	bl	800b7d8 <__sfp_lock_acquire>
 800b880:	4b1e      	ldr	r3, [pc, #120]	; (800b8fc <__sfp+0x84>)
 800b882:	681e      	ldr	r6, [r3, #0]
 800b884:	69b3      	ldr	r3, [r6, #24]
 800b886:	b913      	cbnz	r3, 800b88e <__sfp+0x16>
 800b888:	4630      	mov	r0, r6
 800b88a:	f7ff ffbd 	bl	800b808 <__sinit>
 800b88e:	3648      	adds	r6, #72	; 0x48
 800b890:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b894:	3b01      	subs	r3, #1
 800b896:	d503      	bpl.n	800b8a0 <__sfp+0x28>
 800b898:	6833      	ldr	r3, [r6, #0]
 800b89a:	b30b      	cbz	r3, 800b8e0 <__sfp+0x68>
 800b89c:	6836      	ldr	r6, [r6, #0]
 800b89e:	e7f7      	b.n	800b890 <__sfp+0x18>
 800b8a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b8a4:	b9d5      	cbnz	r5, 800b8dc <__sfp+0x64>
 800b8a6:	4b16      	ldr	r3, [pc, #88]	; (800b900 <__sfp+0x88>)
 800b8a8:	60e3      	str	r3, [r4, #12]
 800b8aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b8ae:	6665      	str	r5, [r4, #100]	; 0x64
 800b8b0:	f000 f86c 	bl	800b98c <__retarget_lock_init_recursive>
 800b8b4:	f7ff ff96 	bl	800b7e4 <__sfp_lock_release>
 800b8b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b8bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b8c0:	6025      	str	r5, [r4, #0]
 800b8c2:	61a5      	str	r5, [r4, #24]
 800b8c4:	2208      	movs	r2, #8
 800b8c6:	4629      	mov	r1, r5
 800b8c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b8cc:	f000 f86f 	bl	800b9ae <memset>
 800b8d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b8d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b8d8:	4620      	mov	r0, r4
 800b8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8dc:	3468      	adds	r4, #104	; 0x68
 800b8de:	e7d9      	b.n	800b894 <__sfp+0x1c>
 800b8e0:	2104      	movs	r1, #4
 800b8e2:	4638      	mov	r0, r7
 800b8e4:	f7ff ff62 	bl	800b7ac <__sfmoreglue>
 800b8e8:	4604      	mov	r4, r0
 800b8ea:	6030      	str	r0, [r6, #0]
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	d1d5      	bne.n	800b89c <__sfp+0x24>
 800b8f0:	f7ff ff78 	bl	800b7e4 <__sfp_lock_release>
 800b8f4:	230c      	movs	r3, #12
 800b8f6:	603b      	str	r3, [r7, #0]
 800b8f8:	e7ee      	b.n	800b8d8 <__sfp+0x60>
 800b8fa:	bf00      	nop
 800b8fc:	0800d234 	.word	0x0800d234
 800b900:	ffff0001 	.word	0xffff0001

0800b904 <_fwalk_reent>:
 800b904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b908:	4606      	mov	r6, r0
 800b90a:	4688      	mov	r8, r1
 800b90c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b910:	2700      	movs	r7, #0
 800b912:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b916:	f1b9 0901 	subs.w	r9, r9, #1
 800b91a:	d505      	bpl.n	800b928 <_fwalk_reent+0x24>
 800b91c:	6824      	ldr	r4, [r4, #0]
 800b91e:	2c00      	cmp	r4, #0
 800b920:	d1f7      	bne.n	800b912 <_fwalk_reent+0xe>
 800b922:	4638      	mov	r0, r7
 800b924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b928:	89ab      	ldrh	r3, [r5, #12]
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d907      	bls.n	800b93e <_fwalk_reent+0x3a>
 800b92e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b932:	3301      	adds	r3, #1
 800b934:	d003      	beq.n	800b93e <_fwalk_reent+0x3a>
 800b936:	4629      	mov	r1, r5
 800b938:	4630      	mov	r0, r6
 800b93a:	47c0      	blx	r8
 800b93c:	4307      	orrs	r7, r0
 800b93e:	3568      	adds	r5, #104	; 0x68
 800b940:	e7e9      	b.n	800b916 <_fwalk_reent+0x12>
	...

0800b944 <__libc_init_array>:
 800b944:	b570      	push	{r4, r5, r6, lr}
 800b946:	4d0d      	ldr	r5, [pc, #52]	; (800b97c <__libc_init_array+0x38>)
 800b948:	4c0d      	ldr	r4, [pc, #52]	; (800b980 <__libc_init_array+0x3c>)
 800b94a:	1b64      	subs	r4, r4, r5
 800b94c:	10a4      	asrs	r4, r4, #2
 800b94e:	2600      	movs	r6, #0
 800b950:	42a6      	cmp	r6, r4
 800b952:	d109      	bne.n	800b968 <__libc_init_array+0x24>
 800b954:	4d0b      	ldr	r5, [pc, #44]	; (800b984 <__libc_init_array+0x40>)
 800b956:	4c0c      	ldr	r4, [pc, #48]	; (800b988 <__libc_init_array+0x44>)
 800b958:	f001 f98a 	bl	800cc70 <_init>
 800b95c:	1b64      	subs	r4, r4, r5
 800b95e:	10a4      	asrs	r4, r4, #2
 800b960:	2600      	movs	r6, #0
 800b962:	42a6      	cmp	r6, r4
 800b964:	d105      	bne.n	800b972 <__libc_init_array+0x2e>
 800b966:	bd70      	pop	{r4, r5, r6, pc}
 800b968:	f855 3b04 	ldr.w	r3, [r5], #4
 800b96c:	4798      	blx	r3
 800b96e:	3601      	adds	r6, #1
 800b970:	e7ee      	b.n	800b950 <__libc_init_array+0xc>
 800b972:	f855 3b04 	ldr.w	r3, [r5], #4
 800b976:	4798      	blx	r3
 800b978:	3601      	adds	r6, #1
 800b97a:	e7f2      	b.n	800b962 <__libc_init_array+0x1e>
 800b97c:	0800d274 	.word	0x0800d274
 800b980:	0800d274 	.word	0x0800d274
 800b984:	0800d274 	.word	0x0800d274
 800b988:	0800d278 	.word	0x0800d278

0800b98c <__retarget_lock_init_recursive>:
 800b98c:	4770      	bx	lr

0800b98e <__retarget_lock_acquire_recursive>:
 800b98e:	4770      	bx	lr

0800b990 <__retarget_lock_release_recursive>:
 800b990:	4770      	bx	lr

0800b992 <memcpy>:
 800b992:	440a      	add	r2, r1
 800b994:	4291      	cmp	r1, r2
 800b996:	f100 33ff 	add.w	r3, r0, #4294967295
 800b99a:	d100      	bne.n	800b99e <memcpy+0xc>
 800b99c:	4770      	bx	lr
 800b99e:	b510      	push	{r4, lr}
 800b9a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9a8:	4291      	cmp	r1, r2
 800b9aa:	d1f9      	bne.n	800b9a0 <memcpy+0xe>
 800b9ac:	bd10      	pop	{r4, pc}

0800b9ae <memset>:
 800b9ae:	4402      	add	r2, r0
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d100      	bne.n	800b9b8 <memset+0xa>
 800b9b6:	4770      	bx	lr
 800b9b8:	f803 1b01 	strb.w	r1, [r3], #1
 800b9bc:	e7f9      	b.n	800b9b2 <memset+0x4>
	...

0800b9c0 <sbrk_aligned>:
 800b9c0:	b570      	push	{r4, r5, r6, lr}
 800b9c2:	4e0e      	ldr	r6, [pc, #56]	; (800b9fc <sbrk_aligned+0x3c>)
 800b9c4:	460c      	mov	r4, r1
 800b9c6:	6831      	ldr	r1, [r6, #0]
 800b9c8:	4605      	mov	r5, r0
 800b9ca:	b911      	cbnz	r1, 800b9d2 <sbrk_aligned+0x12>
 800b9cc:	f000 f984 	bl	800bcd8 <_sbrk_r>
 800b9d0:	6030      	str	r0, [r6, #0]
 800b9d2:	4621      	mov	r1, r4
 800b9d4:	4628      	mov	r0, r5
 800b9d6:	f000 f97f 	bl	800bcd8 <_sbrk_r>
 800b9da:	1c43      	adds	r3, r0, #1
 800b9dc:	d00a      	beq.n	800b9f4 <sbrk_aligned+0x34>
 800b9de:	1cc4      	adds	r4, r0, #3
 800b9e0:	f024 0403 	bic.w	r4, r4, #3
 800b9e4:	42a0      	cmp	r0, r4
 800b9e6:	d007      	beq.n	800b9f8 <sbrk_aligned+0x38>
 800b9e8:	1a21      	subs	r1, r4, r0
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	f000 f974 	bl	800bcd8 <_sbrk_r>
 800b9f0:	3001      	adds	r0, #1
 800b9f2:	d101      	bne.n	800b9f8 <sbrk_aligned+0x38>
 800b9f4:	f04f 34ff 	mov.w	r4, #4294967295
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	bd70      	pop	{r4, r5, r6, pc}
 800b9fc:	20002b3c 	.word	0x20002b3c

0800ba00 <_malloc_r>:
 800ba00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba04:	1ccd      	adds	r5, r1, #3
 800ba06:	f025 0503 	bic.w	r5, r5, #3
 800ba0a:	3508      	adds	r5, #8
 800ba0c:	2d0c      	cmp	r5, #12
 800ba0e:	bf38      	it	cc
 800ba10:	250c      	movcc	r5, #12
 800ba12:	2d00      	cmp	r5, #0
 800ba14:	4607      	mov	r7, r0
 800ba16:	db01      	blt.n	800ba1c <_malloc_r+0x1c>
 800ba18:	42a9      	cmp	r1, r5
 800ba1a:	d905      	bls.n	800ba28 <_malloc_r+0x28>
 800ba1c:	230c      	movs	r3, #12
 800ba1e:	603b      	str	r3, [r7, #0]
 800ba20:	2600      	movs	r6, #0
 800ba22:	4630      	mov	r0, r6
 800ba24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba28:	4e2e      	ldr	r6, [pc, #184]	; (800bae4 <_malloc_r+0xe4>)
 800ba2a:	f000 fbf9 	bl	800c220 <__malloc_lock>
 800ba2e:	6833      	ldr	r3, [r6, #0]
 800ba30:	461c      	mov	r4, r3
 800ba32:	bb34      	cbnz	r4, 800ba82 <_malloc_r+0x82>
 800ba34:	4629      	mov	r1, r5
 800ba36:	4638      	mov	r0, r7
 800ba38:	f7ff ffc2 	bl	800b9c0 <sbrk_aligned>
 800ba3c:	1c43      	adds	r3, r0, #1
 800ba3e:	4604      	mov	r4, r0
 800ba40:	d14d      	bne.n	800bade <_malloc_r+0xde>
 800ba42:	6834      	ldr	r4, [r6, #0]
 800ba44:	4626      	mov	r6, r4
 800ba46:	2e00      	cmp	r6, #0
 800ba48:	d140      	bne.n	800bacc <_malloc_r+0xcc>
 800ba4a:	6823      	ldr	r3, [r4, #0]
 800ba4c:	4631      	mov	r1, r6
 800ba4e:	4638      	mov	r0, r7
 800ba50:	eb04 0803 	add.w	r8, r4, r3
 800ba54:	f000 f940 	bl	800bcd8 <_sbrk_r>
 800ba58:	4580      	cmp	r8, r0
 800ba5a:	d13a      	bne.n	800bad2 <_malloc_r+0xd2>
 800ba5c:	6821      	ldr	r1, [r4, #0]
 800ba5e:	3503      	adds	r5, #3
 800ba60:	1a6d      	subs	r5, r5, r1
 800ba62:	f025 0503 	bic.w	r5, r5, #3
 800ba66:	3508      	adds	r5, #8
 800ba68:	2d0c      	cmp	r5, #12
 800ba6a:	bf38      	it	cc
 800ba6c:	250c      	movcc	r5, #12
 800ba6e:	4629      	mov	r1, r5
 800ba70:	4638      	mov	r0, r7
 800ba72:	f7ff ffa5 	bl	800b9c0 <sbrk_aligned>
 800ba76:	3001      	adds	r0, #1
 800ba78:	d02b      	beq.n	800bad2 <_malloc_r+0xd2>
 800ba7a:	6823      	ldr	r3, [r4, #0]
 800ba7c:	442b      	add	r3, r5
 800ba7e:	6023      	str	r3, [r4, #0]
 800ba80:	e00e      	b.n	800baa0 <_malloc_r+0xa0>
 800ba82:	6822      	ldr	r2, [r4, #0]
 800ba84:	1b52      	subs	r2, r2, r5
 800ba86:	d41e      	bmi.n	800bac6 <_malloc_r+0xc6>
 800ba88:	2a0b      	cmp	r2, #11
 800ba8a:	d916      	bls.n	800baba <_malloc_r+0xba>
 800ba8c:	1961      	adds	r1, r4, r5
 800ba8e:	42a3      	cmp	r3, r4
 800ba90:	6025      	str	r5, [r4, #0]
 800ba92:	bf18      	it	ne
 800ba94:	6059      	strne	r1, [r3, #4]
 800ba96:	6863      	ldr	r3, [r4, #4]
 800ba98:	bf08      	it	eq
 800ba9a:	6031      	streq	r1, [r6, #0]
 800ba9c:	5162      	str	r2, [r4, r5]
 800ba9e:	604b      	str	r3, [r1, #4]
 800baa0:	4638      	mov	r0, r7
 800baa2:	f104 060b 	add.w	r6, r4, #11
 800baa6:	f000 fbc1 	bl	800c22c <__malloc_unlock>
 800baaa:	f026 0607 	bic.w	r6, r6, #7
 800baae:	1d23      	adds	r3, r4, #4
 800bab0:	1af2      	subs	r2, r6, r3
 800bab2:	d0b6      	beq.n	800ba22 <_malloc_r+0x22>
 800bab4:	1b9b      	subs	r3, r3, r6
 800bab6:	50a3      	str	r3, [r4, r2]
 800bab8:	e7b3      	b.n	800ba22 <_malloc_r+0x22>
 800baba:	6862      	ldr	r2, [r4, #4]
 800babc:	42a3      	cmp	r3, r4
 800babe:	bf0c      	ite	eq
 800bac0:	6032      	streq	r2, [r6, #0]
 800bac2:	605a      	strne	r2, [r3, #4]
 800bac4:	e7ec      	b.n	800baa0 <_malloc_r+0xa0>
 800bac6:	4623      	mov	r3, r4
 800bac8:	6864      	ldr	r4, [r4, #4]
 800baca:	e7b2      	b.n	800ba32 <_malloc_r+0x32>
 800bacc:	4634      	mov	r4, r6
 800bace:	6876      	ldr	r6, [r6, #4]
 800bad0:	e7b9      	b.n	800ba46 <_malloc_r+0x46>
 800bad2:	230c      	movs	r3, #12
 800bad4:	603b      	str	r3, [r7, #0]
 800bad6:	4638      	mov	r0, r7
 800bad8:	f000 fba8 	bl	800c22c <__malloc_unlock>
 800badc:	e7a1      	b.n	800ba22 <_malloc_r+0x22>
 800bade:	6025      	str	r5, [r4, #0]
 800bae0:	e7de      	b.n	800baa0 <_malloc_r+0xa0>
 800bae2:	bf00      	nop
 800bae4:	20002b38 	.word	0x20002b38

0800bae8 <iprintf>:
 800bae8:	b40f      	push	{r0, r1, r2, r3}
 800baea:	4b0a      	ldr	r3, [pc, #40]	; (800bb14 <iprintf+0x2c>)
 800baec:	b513      	push	{r0, r1, r4, lr}
 800baee:	681c      	ldr	r4, [r3, #0]
 800baf0:	b124      	cbz	r4, 800bafc <iprintf+0x14>
 800baf2:	69a3      	ldr	r3, [r4, #24]
 800baf4:	b913      	cbnz	r3, 800bafc <iprintf+0x14>
 800baf6:	4620      	mov	r0, r4
 800baf8:	f7ff fe86 	bl	800b808 <__sinit>
 800bafc:	ab05      	add	r3, sp, #20
 800bafe:	9a04      	ldr	r2, [sp, #16]
 800bb00:	68a1      	ldr	r1, [r4, #8]
 800bb02:	9301      	str	r3, [sp, #4]
 800bb04:	4620      	mov	r0, r4
 800bb06:	f000 fd69 	bl	800c5dc <_vfiprintf_r>
 800bb0a:	b002      	add	sp, #8
 800bb0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb10:	b004      	add	sp, #16
 800bb12:	4770      	bx	lr
 800bb14:	20000044 	.word	0x20000044

0800bb18 <_puts_r>:
 800bb18:	b570      	push	{r4, r5, r6, lr}
 800bb1a:	460e      	mov	r6, r1
 800bb1c:	4605      	mov	r5, r0
 800bb1e:	b118      	cbz	r0, 800bb28 <_puts_r+0x10>
 800bb20:	6983      	ldr	r3, [r0, #24]
 800bb22:	b90b      	cbnz	r3, 800bb28 <_puts_r+0x10>
 800bb24:	f7ff fe70 	bl	800b808 <__sinit>
 800bb28:	69ab      	ldr	r3, [r5, #24]
 800bb2a:	68ac      	ldr	r4, [r5, #8]
 800bb2c:	b913      	cbnz	r3, 800bb34 <_puts_r+0x1c>
 800bb2e:	4628      	mov	r0, r5
 800bb30:	f7ff fe6a 	bl	800b808 <__sinit>
 800bb34:	4b2c      	ldr	r3, [pc, #176]	; (800bbe8 <_puts_r+0xd0>)
 800bb36:	429c      	cmp	r4, r3
 800bb38:	d120      	bne.n	800bb7c <_puts_r+0x64>
 800bb3a:	686c      	ldr	r4, [r5, #4]
 800bb3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb3e:	07db      	lsls	r3, r3, #31
 800bb40:	d405      	bmi.n	800bb4e <_puts_r+0x36>
 800bb42:	89a3      	ldrh	r3, [r4, #12]
 800bb44:	0598      	lsls	r0, r3, #22
 800bb46:	d402      	bmi.n	800bb4e <_puts_r+0x36>
 800bb48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb4a:	f7ff ff20 	bl	800b98e <__retarget_lock_acquire_recursive>
 800bb4e:	89a3      	ldrh	r3, [r4, #12]
 800bb50:	0719      	lsls	r1, r3, #28
 800bb52:	d51d      	bpl.n	800bb90 <_puts_r+0x78>
 800bb54:	6923      	ldr	r3, [r4, #16]
 800bb56:	b1db      	cbz	r3, 800bb90 <_puts_r+0x78>
 800bb58:	3e01      	subs	r6, #1
 800bb5a:	68a3      	ldr	r3, [r4, #8]
 800bb5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bb60:	3b01      	subs	r3, #1
 800bb62:	60a3      	str	r3, [r4, #8]
 800bb64:	bb39      	cbnz	r1, 800bbb6 <_puts_r+0x9e>
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	da38      	bge.n	800bbdc <_puts_r+0xc4>
 800bb6a:	4622      	mov	r2, r4
 800bb6c:	210a      	movs	r1, #10
 800bb6e:	4628      	mov	r0, r5
 800bb70:	f000 f93a 	bl	800bde8 <__swbuf_r>
 800bb74:	3001      	adds	r0, #1
 800bb76:	d011      	beq.n	800bb9c <_puts_r+0x84>
 800bb78:	250a      	movs	r5, #10
 800bb7a:	e011      	b.n	800bba0 <_puts_r+0x88>
 800bb7c:	4b1b      	ldr	r3, [pc, #108]	; (800bbec <_puts_r+0xd4>)
 800bb7e:	429c      	cmp	r4, r3
 800bb80:	d101      	bne.n	800bb86 <_puts_r+0x6e>
 800bb82:	68ac      	ldr	r4, [r5, #8]
 800bb84:	e7da      	b.n	800bb3c <_puts_r+0x24>
 800bb86:	4b1a      	ldr	r3, [pc, #104]	; (800bbf0 <_puts_r+0xd8>)
 800bb88:	429c      	cmp	r4, r3
 800bb8a:	bf08      	it	eq
 800bb8c:	68ec      	ldreq	r4, [r5, #12]
 800bb8e:	e7d5      	b.n	800bb3c <_puts_r+0x24>
 800bb90:	4621      	mov	r1, r4
 800bb92:	4628      	mov	r0, r5
 800bb94:	f000 f98c 	bl	800beb0 <__swsetup_r>
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d0dd      	beq.n	800bb58 <_puts_r+0x40>
 800bb9c:	f04f 35ff 	mov.w	r5, #4294967295
 800bba0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bba2:	07da      	lsls	r2, r3, #31
 800bba4:	d405      	bmi.n	800bbb2 <_puts_r+0x9a>
 800bba6:	89a3      	ldrh	r3, [r4, #12]
 800bba8:	059b      	lsls	r3, r3, #22
 800bbaa:	d402      	bmi.n	800bbb2 <_puts_r+0x9a>
 800bbac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbae:	f7ff feef 	bl	800b990 <__retarget_lock_release_recursive>
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	bd70      	pop	{r4, r5, r6, pc}
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	da04      	bge.n	800bbc4 <_puts_r+0xac>
 800bbba:	69a2      	ldr	r2, [r4, #24]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	dc06      	bgt.n	800bbce <_puts_r+0xb6>
 800bbc0:	290a      	cmp	r1, #10
 800bbc2:	d004      	beq.n	800bbce <_puts_r+0xb6>
 800bbc4:	6823      	ldr	r3, [r4, #0]
 800bbc6:	1c5a      	adds	r2, r3, #1
 800bbc8:	6022      	str	r2, [r4, #0]
 800bbca:	7019      	strb	r1, [r3, #0]
 800bbcc:	e7c5      	b.n	800bb5a <_puts_r+0x42>
 800bbce:	4622      	mov	r2, r4
 800bbd0:	4628      	mov	r0, r5
 800bbd2:	f000 f909 	bl	800bde8 <__swbuf_r>
 800bbd6:	3001      	adds	r0, #1
 800bbd8:	d1bf      	bne.n	800bb5a <_puts_r+0x42>
 800bbda:	e7df      	b.n	800bb9c <_puts_r+0x84>
 800bbdc:	6823      	ldr	r3, [r4, #0]
 800bbde:	250a      	movs	r5, #10
 800bbe0:	1c5a      	adds	r2, r3, #1
 800bbe2:	6022      	str	r2, [r4, #0]
 800bbe4:	701d      	strb	r5, [r3, #0]
 800bbe6:	e7db      	b.n	800bba0 <_puts_r+0x88>
 800bbe8:	0800d1f4 	.word	0x0800d1f4
 800bbec:	0800d214 	.word	0x0800d214
 800bbf0:	0800d1d4 	.word	0x0800d1d4

0800bbf4 <puts>:
 800bbf4:	4b02      	ldr	r3, [pc, #8]	; (800bc00 <puts+0xc>)
 800bbf6:	4601      	mov	r1, r0
 800bbf8:	6818      	ldr	r0, [r3, #0]
 800bbfa:	f7ff bf8d 	b.w	800bb18 <_puts_r>
 800bbfe:	bf00      	nop
 800bc00:	20000044 	.word	0x20000044

0800bc04 <cleanup_glue>:
 800bc04:	b538      	push	{r3, r4, r5, lr}
 800bc06:	460c      	mov	r4, r1
 800bc08:	6809      	ldr	r1, [r1, #0]
 800bc0a:	4605      	mov	r5, r0
 800bc0c:	b109      	cbz	r1, 800bc12 <cleanup_glue+0xe>
 800bc0e:	f7ff fff9 	bl	800bc04 <cleanup_glue>
 800bc12:	4621      	mov	r1, r4
 800bc14:	4628      	mov	r0, r5
 800bc16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc1a:	f000 bb0d 	b.w	800c238 <_free_r>
	...

0800bc20 <_reclaim_reent>:
 800bc20:	4b2c      	ldr	r3, [pc, #176]	; (800bcd4 <_reclaim_reent+0xb4>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4283      	cmp	r3, r0
 800bc26:	b570      	push	{r4, r5, r6, lr}
 800bc28:	4604      	mov	r4, r0
 800bc2a:	d051      	beq.n	800bcd0 <_reclaim_reent+0xb0>
 800bc2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bc2e:	b143      	cbz	r3, 800bc42 <_reclaim_reent+0x22>
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d14a      	bne.n	800bccc <_reclaim_reent+0xac>
 800bc36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc38:	6819      	ldr	r1, [r3, #0]
 800bc3a:	b111      	cbz	r1, 800bc42 <_reclaim_reent+0x22>
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	f000 fafb 	bl	800c238 <_free_r>
 800bc42:	6961      	ldr	r1, [r4, #20]
 800bc44:	b111      	cbz	r1, 800bc4c <_reclaim_reent+0x2c>
 800bc46:	4620      	mov	r0, r4
 800bc48:	f000 faf6 	bl	800c238 <_free_r>
 800bc4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bc4e:	b111      	cbz	r1, 800bc56 <_reclaim_reent+0x36>
 800bc50:	4620      	mov	r0, r4
 800bc52:	f000 faf1 	bl	800c238 <_free_r>
 800bc56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bc58:	b111      	cbz	r1, 800bc60 <_reclaim_reent+0x40>
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	f000 faec 	bl	800c238 <_free_r>
 800bc60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bc62:	b111      	cbz	r1, 800bc6a <_reclaim_reent+0x4a>
 800bc64:	4620      	mov	r0, r4
 800bc66:	f000 fae7 	bl	800c238 <_free_r>
 800bc6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bc6c:	b111      	cbz	r1, 800bc74 <_reclaim_reent+0x54>
 800bc6e:	4620      	mov	r0, r4
 800bc70:	f000 fae2 	bl	800c238 <_free_r>
 800bc74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bc76:	b111      	cbz	r1, 800bc7e <_reclaim_reent+0x5e>
 800bc78:	4620      	mov	r0, r4
 800bc7a:	f000 fadd 	bl	800c238 <_free_r>
 800bc7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bc80:	b111      	cbz	r1, 800bc88 <_reclaim_reent+0x68>
 800bc82:	4620      	mov	r0, r4
 800bc84:	f000 fad8 	bl	800c238 <_free_r>
 800bc88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc8a:	b111      	cbz	r1, 800bc92 <_reclaim_reent+0x72>
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	f000 fad3 	bl	800c238 <_free_r>
 800bc92:	69a3      	ldr	r3, [r4, #24]
 800bc94:	b1e3      	cbz	r3, 800bcd0 <_reclaim_reent+0xb0>
 800bc96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bc98:	4620      	mov	r0, r4
 800bc9a:	4798      	blx	r3
 800bc9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bc9e:	b1b9      	cbz	r1, 800bcd0 <_reclaim_reent+0xb0>
 800bca0:	4620      	mov	r0, r4
 800bca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bca6:	f7ff bfad 	b.w	800bc04 <cleanup_glue>
 800bcaa:	5949      	ldr	r1, [r1, r5]
 800bcac:	b941      	cbnz	r1, 800bcc0 <_reclaim_reent+0xa0>
 800bcae:	3504      	adds	r5, #4
 800bcb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcb2:	2d80      	cmp	r5, #128	; 0x80
 800bcb4:	68d9      	ldr	r1, [r3, #12]
 800bcb6:	d1f8      	bne.n	800bcaa <_reclaim_reent+0x8a>
 800bcb8:	4620      	mov	r0, r4
 800bcba:	f000 fabd 	bl	800c238 <_free_r>
 800bcbe:	e7ba      	b.n	800bc36 <_reclaim_reent+0x16>
 800bcc0:	680e      	ldr	r6, [r1, #0]
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	f000 fab8 	bl	800c238 <_free_r>
 800bcc8:	4631      	mov	r1, r6
 800bcca:	e7ef      	b.n	800bcac <_reclaim_reent+0x8c>
 800bccc:	2500      	movs	r5, #0
 800bcce:	e7ef      	b.n	800bcb0 <_reclaim_reent+0x90>
 800bcd0:	bd70      	pop	{r4, r5, r6, pc}
 800bcd2:	bf00      	nop
 800bcd4:	20000044 	.word	0x20000044

0800bcd8 <_sbrk_r>:
 800bcd8:	b538      	push	{r3, r4, r5, lr}
 800bcda:	4d06      	ldr	r5, [pc, #24]	; (800bcf4 <_sbrk_r+0x1c>)
 800bcdc:	2300      	movs	r3, #0
 800bcde:	4604      	mov	r4, r0
 800bce0:	4608      	mov	r0, r1
 800bce2:	602b      	str	r3, [r5, #0]
 800bce4:	f7f6 f8e2 	bl	8001eac <_sbrk>
 800bce8:	1c43      	adds	r3, r0, #1
 800bcea:	d102      	bne.n	800bcf2 <_sbrk_r+0x1a>
 800bcec:	682b      	ldr	r3, [r5, #0]
 800bcee:	b103      	cbz	r3, 800bcf2 <_sbrk_r+0x1a>
 800bcf0:	6023      	str	r3, [r4, #0]
 800bcf2:	bd38      	pop	{r3, r4, r5, pc}
 800bcf4:	20002b40 	.word	0x20002b40

0800bcf8 <sniprintf>:
 800bcf8:	b40c      	push	{r2, r3}
 800bcfa:	b530      	push	{r4, r5, lr}
 800bcfc:	4b17      	ldr	r3, [pc, #92]	; (800bd5c <sniprintf+0x64>)
 800bcfe:	1e0c      	subs	r4, r1, #0
 800bd00:	681d      	ldr	r5, [r3, #0]
 800bd02:	b09d      	sub	sp, #116	; 0x74
 800bd04:	da08      	bge.n	800bd18 <sniprintf+0x20>
 800bd06:	238b      	movs	r3, #139	; 0x8b
 800bd08:	602b      	str	r3, [r5, #0]
 800bd0a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd0e:	b01d      	add	sp, #116	; 0x74
 800bd10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd14:	b002      	add	sp, #8
 800bd16:	4770      	bx	lr
 800bd18:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bd1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bd20:	bf14      	ite	ne
 800bd22:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bd26:	4623      	moveq	r3, r4
 800bd28:	9304      	str	r3, [sp, #16]
 800bd2a:	9307      	str	r3, [sp, #28]
 800bd2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd30:	9002      	str	r0, [sp, #8]
 800bd32:	9006      	str	r0, [sp, #24]
 800bd34:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bd38:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bd3a:	ab21      	add	r3, sp, #132	; 0x84
 800bd3c:	a902      	add	r1, sp, #8
 800bd3e:	4628      	mov	r0, r5
 800bd40:	9301      	str	r3, [sp, #4]
 800bd42:	f000 fb21 	bl	800c388 <_svfiprintf_r>
 800bd46:	1c43      	adds	r3, r0, #1
 800bd48:	bfbc      	itt	lt
 800bd4a:	238b      	movlt	r3, #139	; 0x8b
 800bd4c:	602b      	strlt	r3, [r5, #0]
 800bd4e:	2c00      	cmp	r4, #0
 800bd50:	d0dd      	beq.n	800bd0e <sniprintf+0x16>
 800bd52:	9b02      	ldr	r3, [sp, #8]
 800bd54:	2200      	movs	r2, #0
 800bd56:	701a      	strb	r2, [r3, #0]
 800bd58:	e7d9      	b.n	800bd0e <sniprintf+0x16>
 800bd5a:	bf00      	nop
 800bd5c:	20000044 	.word	0x20000044

0800bd60 <__sread>:
 800bd60:	b510      	push	{r4, lr}
 800bd62:	460c      	mov	r4, r1
 800bd64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd68:	f000 fefc 	bl	800cb64 <_read_r>
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	bfab      	itete	ge
 800bd70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd72:	89a3      	ldrhlt	r3, [r4, #12]
 800bd74:	181b      	addge	r3, r3, r0
 800bd76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd7a:	bfac      	ite	ge
 800bd7c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd7e:	81a3      	strhlt	r3, [r4, #12]
 800bd80:	bd10      	pop	{r4, pc}

0800bd82 <__swrite>:
 800bd82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd86:	461f      	mov	r7, r3
 800bd88:	898b      	ldrh	r3, [r1, #12]
 800bd8a:	05db      	lsls	r3, r3, #23
 800bd8c:	4605      	mov	r5, r0
 800bd8e:	460c      	mov	r4, r1
 800bd90:	4616      	mov	r6, r2
 800bd92:	d505      	bpl.n	800bda0 <__swrite+0x1e>
 800bd94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd98:	2302      	movs	r3, #2
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	f000 f9c8 	bl	800c130 <_lseek_r>
 800bda0:	89a3      	ldrh	r3, [r4, #12]
 800bda2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bda6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bdaa:	81a3      	strh	r3, [r4, #12]
 800bdac:	4632      	mov	r2, r6
 800bdae:	463b      	mov	r3, r7
 800bdb0:	4628      	mov	r0, r5
 800bdb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdb6:	f000 b869 	b.w	800be8c <_write_r>

0800bdba <__sseek>:
 800bdba:	b510      	push	{r4, lr}
 800bdbc:	460c      	mov	r4, r1
 800bdbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdc2:	f000 f9b5 	bl	800c130 <_lseek_r>
 800bdc6:	1c43      	adds	r3, r0, #1
 800bdc8:	89a3      	ldrh	r3, [r4, #12]
 800bdca:	bf15      	itete	ne
 800bdcc:	6560      	strne	r0, [r4, #84]	; 0x54
 800bdce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bdd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bdd6:	81a3      	strheq	r3, [r4, #12]
 800bdd8:	bf18      	it	ne
 800bdda:	81a3      	strhne	r3, [r4, #12]
 800bddc:	bd10      	pop	{r4, pc}

0800bdde <__sclose>:
 800bdde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bde2:	f000 b8d3 	b.w	800bf8c <_close_r>
	...

0800bde8 <__swbuf_r>:
 800bde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdea:	460e      	mov	r6, r1
 800bdec:	4614      	mov	r4, r2
 800bdee:	4605      	mov	r5, r0
 800bdf0:	b118      	cbz	r0, 800bdfa <__swbuf_r+0x12>
 800bdf2:	6983      	ldr	r3, [r0, #24]
 800bdf4:	b90b      	cbnz	r3, 800bdfa <__swbuf_r+0x12>
 800bdf6:	f7ff fd07 	bl	800b808 <__sinit>
 800bdfa:	4b21      	ldr	r3, [pc, #132]	; (800be80 <__swbuf_r+0x98>)
 800bdfc:	429c      	cmp	r4, r3
 800bdfe:	d12b      	bne.n	800be58 <__swbuf_r+0x70>
 800be00:	686c      	ldr	r4, [r5, #4]
 800be02:	69a3      	ldr	r3, [r4, #24]
 800be04:	60a3      	str	r3, [r4, #8]
 800be06:	89a3      	ldrh	r3, [r4, #12]
 800be08:	071a      	lsls	r2, r3, #28
 800be0a:	d52f      	bpl.n	800be6c <__swbuf_r+0x84>
 800be0c:	6923      	ldr	r3, [r4, #16]
 800be0e:	b36b      	cbz	r3, 800be6c <__swbuf_r+0x84>
 800be10:	6923      	ldr	r3, [r4, #16]
 800be12:	6820      	ldr	r0, [r4, #0]
 800be14:	1ac0      	subs	r0, r0, r3
 800be16:	6963      	ldr	r3, [r4, #20]
 800be18:	b2f6      	uxtb	r6, r6
 800be1a:	4283      	cmp	r3, r0
 800be1c:	4637      	mov	r7, r6
 800be1e:	dc04      	bgt.n	800be2a <__swbuf_r+0x42>
 800be20:	4621      	mov	r1, r4
 800be22:	4628      	mov	r0, r5
 800be24:	f000 f948 	bl	800c0b8 <_fflush_r>
 800be28:	bb30      	cbnz	r0, 800be78 <__swbuf_r+0x90>
 800be2a:	68a3      	ldr	r3, [r4, #8]
 800be2c:	3b01      	subs	r3, #1
 800be2e:	60a3      	str	r3, [r4, #8]
 800be30:	6823      	ldr	r3, [r4, #0]
 800be32:	1c5a      	adds	r2, r3, #1
 800be34:	6022      	str	r2, [r4, #0]
 800be36:	701e      	strb	r6, [r3, #0]
 800be38:	6963      	ldr	r3, [r4, #20]
 800be3a:	3001      	adds	r0, #1
 800be3c:	4283      	cmp	r3, r0
 800be3e:	d004      	beq.n	800be4a <__swbuf_r+0x62>
 800be40:	89a3      	ldrh	r3, [r4, #12]
 800be42:	07db      	lsls	r3, r3, #31
 800be44:	d506      	bpl.n	800be54 <__swbuf_r+0x6c>
 800be46:	2e0a      	cmp	r6, #10
 800be48:	d104      	bne.n	800be54 <__swbuf_r+0x6c>
 800be4a:	4621      	mov	r1, r4
 800be4c:	4628      	mov	r0, r5
 800be4e:	f000 f933 	bl	800c0b8 <_fflush_r>
 800be52:	b988      	cbnz	r0, 800be78 <__swbuf_r+0x90>
 800be54:	4638      	mov	r0, r7
 800be56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be58:	4b0a      	ldr	r3, [pc, #40]	; (800be84 <__swbuf_r+0x9c>)
 800be5a:	429c      	cmp	r4, r3
 800be5c:	d101      	bne.n	800be62 <__swbuf_r+0x7a>
 800be5e:	68ac      	ldr	r4, [r5, #8]
 800be60:	e7cf      	b.n	800be02 <__swbuf_r+0x1a>
 800be62:	4b09      	ldr	r3, [pc, #36]	; (800be88 <__swbuf_r+0xa0>)
 800be64:	429c      	cmp	r4, r3
 800be66:	bf08      	it	eq
 800be68:	68ec      	ldreq	r4, [r5, #12]
 800be6a:	e7ca      	b.n	800be02 <__swbuf_r+0x1a>
 800be6c:	4621      	mov	r1, r4
 800be6e:	4628      	mov	r0, r5
 800be70:	f000 f81e 	bl	800beb0 <__swsetup_r>
 800be74:	2800      	cmp	r0, #0
 800be76:	d0cb      	beq.n	800be10 <__swbuf_r+0x28>
 800be78:	f04f 37ff 	mov.w	r7, #4294967295
 800be7c:	e7ea      	b.n	800be54 <__swbuf_r+0x6c>
 800be7e:	bf00      	nop
 800be80:	0800d1f4 	.word	0x0800d1f4
 800be84:	0800d214 	.word	0x0800d214
 800be88:	0800d1d4 	.word	0x0800d1d4

0800be8c <_write_r>:
 800be8c:	b538      	push	{r3, r4, r5, lr}
 800be8e:	4d07      	ldr	r5, [pc, #28]	; (800beac <_write_r+0x20>)
 800be90:	4604      	mov	r4, r0
 800be92:	4608      	mov	r0, r1
 800be94:	4611      	mov	r1, r2
 800be96:	2200      	movs	r2, #0
 800be98:	602a      	str	r2, [r5, #0]
 800be9a:	461a      	mov	r2, r3
 800be9c:	f7f5 f838 	bl	8000f10 <_write>
 800bea0:	1c43      	adds	r3, r0, #1
 800bea2:	d102      	bne.n	800beaa <_write_r+0x1e>
 800bea4:	682b      	ldr	r3, [r5, #0]
 800bea6:	b103      	cbz	r3, 800beaa <_write_r+0x1e>
 800bea8:	6023      	str	r3, [r4, #0]
 800beaa:	bd38      	pop	{r3, r4, r5, pc}
 800beac:	20002b40 	.word	0x20002b40

0800beb0 <__swsetup_r>:
 800beb0:	4b32      	ldr	r3, [pc, #200]	; (800bf7c <__swsetup_r+0xcc>)
 800beb2:	b570      	push	{r4, r5, r6, lr}
 800beb4:	681d      	ldr	r5, [r3, #0]
 800beb6:	4606      	mov	r6, r0
 800beb8:	460c      	mov	r4, r1
 800beba:	b125      	cbz	r5, 800bec6 <__swsetup_r+0x16>
 800bebc:	69ab      	ldr	r3, [r5, #24]
 800bebe:	b913      	cbnz	r3, 800bec6 <__swsetup_r+0x16>
 800bec0:	4628      	mov	r0, r5
 800bec2:	f7ff fca1 	bl	800b808 <__sinit>
 800bec6:	4b2e      	ldr	r3, [pc, #184]	; (800bf80 <__swsetup_r+0xd0>)
 800bec8:	429c      	cmp	r4, r3
 800beca:	d10f      	bne.n	800beec <__swsetup_r+0x3c>
 800becc:	686c      	ldr	r4, [r5, #4]
 800bece:	89a3      	ldrh	r3, [r4, #12]
 800bed0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bed4:	0719      	lsls	r1, r3, #28
 800bed6:	d42c      	bmi.n	800bf32 <__swsetup_r+0x82>
 800bed8:	06dd      	lsls	r5, r3, #27
 800beda:	d411      	bmi.n	800bf00 <__swsetup_r+0x50>
 800bedc:	2309      	movs	r3, #9
 800bede:	6033      	str	r3, [r6, #0]
 800bee0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bee4:	81a3      	strh	r3, [r4, #12]
 800bee6:	f04f 30ff 	mov.w	r0, #4294967295
 800beea:	e03e      	b.n	800bf6a <__swsetup_r+0xba>
 800beec:	4b25      	ldr	r3, [pc, #148]	; (800bf84 <__swsetup_r+0xd4>)
 800beee:	429c      	cmp	r4, r3
 800bef0:	d101      	bne.n	800bef6 <__swsetup_r+0x46>
 800bef2:	68ac      	ldr	r4, [r5, #8]
 800bef4:	e7eb      	b.n	800bece <__swsetup_r+0x1e>
 800bef6:	4b24      	ldr	r3, [pc, #144]	; (800bf88 <__swsetup_r+0xd8>)
 800bef8:	429c      	cmp	r4, r3
 800befa:	bf08      	it	eq
 800befc:	68ec      	ldreq	r4, [r5, #12]
 800befe:	e7e6      	b.n	800bece <__swsetup_r+0x1e>
 800bf00:	0758      	lsls	r0, r3, #29
 800bf02:	d512      	bpl.n	800bf2a <__swsetup_r+0x7a>
 800bf04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf06:	b141      	cbz	r1, 800bf1a <__swsetup_r+0x6a>
 800bf08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf0c:	4299      	cmp	r1, r3
 800bf0e:	d002      	beq.n	800bf16 <__swsetup_r+0x66>
 800bf10:	4630      	mov	r0, r6
 800bf12:	f000 f991 	bl	800c238 <_free_r>
 800bf16:	2300      	movs	r3, #0
 800bf18:	6363      	str	r3, [r4, #52]	; 0x34
 800bf1a:	89a3      	ldrh	r3, [r4, #12]
 800bf1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf20:	81a3      	strh	r3, [r4, #12]
 800bf22:	2300      	movs	r3, #0
 800bf24:	6063      	str	r3, [r4, #4]
 800bf26:	6923      	ldr	r3, [r4, #16]
 800bf28:	6023      	str	r3, [r4, #0]
 800bf2a:	89a3      	ldrh	r3, [r4, #12]
 800bf2c:	f043 0308 	orr.w	r3, r3, #8
 800bf30:	81a3      	strh	r3, [r4, #12]
 800bf32:	6923      	ldr	r3, [r4, #16]
 800bf34:	b94b      	cbnz	r3, 800bf4a <__swsetup_r+0x9a>
 800bf36:	89a3      	ldrh	r3, [r4, #12]
 800bf38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf40:	d003      	beq.n	800bf4a <__swsetup_r+0x9a>
 800bf42:	4621      	mov	r1, r4
 800bf44:	4630      	mov	r0, r6
 800bf46:	f000 f92b 	bl	800c1a0 <__smakebuf_r>
 800bf4a:	89a0      	ldrh	r0, [r4, #12]
 800bf4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf50:	f010 0301 	ands.w	r3, r0, #1
 800bf54:	d00a      	beq.n	800bf6c <__swsetup_r+0xbc>
 800bf56:	2300      	movs	r3, #0
 800bf58:	60a3      	str	r3, [r4, #8]
 800bf5a:	6963      	ldr	r3, [r4, #20]
 800bf5c:	425b      	negs	r3, r3
 800bf5e:	61a3      	str	r3, [r4, #24]
 800bf60:	6923      	ldr	r3, [r4, #16]
 800bf62:	b943      	cbnz	r3, 800bf76 <__swsetup_r+0xc6>
 800bf64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf68:	d1ba      	bne.n	800bee0 <__swsetup_r+0x30>
 800bf6a:	bd70      	pop	{r4, r5, r6, pc}
 800bf6c:	0781      	lsls	r1, r0, #30
 800bf6e:	bf58      	it	pl
 800bf70:	6963      	ldrpl	r3, [r4, #20]
 800bf72:	60a3      	str	r3, [r4, #8]
 800bf74:	e7f4      	b.n	800bf60 <__swsetup_r+0xb0>
 800bf76:	2000      	movs	r0, #0
 800bf78:	e7f7      	b.n	800bf6a <__swsetup_r+0xba>
 800bf7a:	bf00      	nop
 800bf7c:	20000044 	.word	0x20000044
 800bf80:	0800d1f4 	.word	0x0800d1f4
 800bf84:	0800d214 	.word	0x0800d214
 800bf88:	0800d1d4 	.word	0x0800d1d4

0800bf8c <_close_r>:
 800bf8c:	b538      	push	{r3, r4, r5, lr}
 800bf8e:	4d06      	ldr	r5, [pc, #24]	; (800bfa8 <_close_r+0x1c>)
 800bf90:	2300      	movs	r3, #0
 800bf92:	4604      	mov	r4, r0
 800bf94:	4608      	mov	r0, r1
 800bf96:	602b      	str	r3, [r5, #0]
 800bf98:	f7f5 ff53 	bl	8001e42 <_close>
 800bf9c:	1c43      	adds	r3, r0, #1
 800bf9e:	d102      	bne.n	800bfa6 <_close_r+0x1a>
 800bfa0:	682b      	ldr	r3, [r5, #0]
 800bfa2:	b103      	cbz	r3, 800bfa6 <_close_r+0x1a>
 800bfa4:	6023      	str	r3, [r4, #0]
 800bfa6:	bd38      	pop	{r3, r4, r5, pc}
 800bfa8:	20002b40 	.word	0x20002b40

0800bfac <__sflush_r>:
 800bfac:	898a      	ldrh	r2, [r1, #12]
 800bfae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb2:	4605      	mov	r5, r0
 800bfb4:	0710      	lsls	r0, r2, #28
 800bfb6:	460c      	mov	r4, r1
 800bfb8:	d458      	bmi.n	800c06c <__sflush_r+0xc0>
 800bfba:	684b      	ldr	r3, [r1, #4]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	dc05      	bgt.n	800bfcc <__sflush_r+0x20>
 800bfc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	dc02      	bgt.n	800bfcc <__sflush_r+0x20>
 800bfc6:	2000      	movs	r0, #0
 800bfc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfce:	2e00      	cmp	r6, #0
 800bfd0:	d0f9      	beq.n	800bfc6 <__sflush_r+0x1a>
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bfd8:	682f      	ldr	r7, [r5, #0]
 800bfda:	602b      	str	r3, [r5, #0]
 800bfdc:	d032      	beq.n	800c044 <__sflush_r+0x98>
 800bfde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bfe0:	89a3      	ldrh	r3, [r4, #12]
 800bfe2:	075a      	lsls	r2, r3, #29
 800bfe4:	d505      	bpl.n	800bff2 <__sflush_r+0x46>
 800bfe6:	6863      	ldr	r3, [r4, #4]
 800bfe8:	1ac0      	subs	r0, r0, r3
 800bfea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bfec:	b10b      	cbz	r3, 800bff2 <__sflush_r+0x46>
 800bfee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bff0:	1ac0      	subs	r0, r0, r3
 800bff2:	2300      	movs	r3, #0
 800bff4:	4602      	mov	r2, r0
 800bff6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bff8:	6a21      	ldr	r1, [r4, #32]
 800bffa:	4628      	mov	r0, r5
 800bffc:	47b0      	blx	r6
 800bffe:	1c43      	adds	r3, r0, #1
 800c000:	89a3      	ldrh	r3, [r4, #12]
 800c002:	d106      	bne.n	800c012 <__sflush_r+0x66>
 800c004:	6829      	ldr	r1, [r5, #0]
 800c006:	291d      	cmp	r1, #29
 800c008:	d82c      	bhi.n	800c064 <__sflush_r+0xb8>
 800c00a:	4a2a      	ldr	r2, [pc, #168]	; (800c0b4 <__sflush_r+0x108>)
 800c00c:	40ca      	lsrs	r2, r1
 800c00e:	07d6      	lsls	r6, r2, #31
 800c010:	d528      	bpl.n	800c064 <__sflush_r+0xb8>
 800c012:	2200      	movs	r2, #0
 800c014:	6062      	str	r2, [r4, #4]
 800c016:	04d9      	lsls	r1, r3, #19
 800c018:	6922      	ldr	r2, [r4, #16]
 800c01a:	6022      	str	r2, [r4, #0]
 800c01c:	d504      	bpl.n	800c028 <__sflush_r+0x7c>
 800c01e:	1c42      	adds	r2, r0, #1
 800c020:	d101      	bne.n	800c026 <__sflush_r+0x7a>
 800c022:	682b      	ldr	r3, [r5, #0]
 800c024:	b903      	cbnz	r3, 800c028 <__sflush_r+0x7c>
 800c026:	6560      	str	r0, [r4, #84]	; 0x54
 800c028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c02a:	602f      	str	r7, [r5, #0]
 800c02c:	2900      	cmp	r1, #0
 800c02e:	d0ca      	beq.n	800bfc6 <__sflush_r+0x1a>
 800c030:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c034:	4299      	cmp	r1, r3
 800c036:	d002      	beq.n	800c03e <__sflush_r+0x92>
 800c038:	4628      	mov	r0, r5
 800c03a:	f000 f8fd 	bl	800c238 <_free_r>
 800c03e:	2000      	movs	r0, #0
 800c040:	6360      	str	r0, [r4, #52]	; 0x34
 800c042:	e7c1      	b.n	800bfc8 <__sflush_r+0x1c>
 800c044:	6a21      	ldr	r1, [r4, #32]
 800c046:	2301      	movs	r3, #1
 800c048:	4628      	mov	r0, r5
 800c04a:	47b0      	blx	r6
 800c04c:	1c41      	adds	r1, r0, #1
 800c04e:	d1c7      	bne.n	800bfe0 <__sflush_r+0x34>
 800c050:	682b      	ldr	r3, [r5, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d0c4      	beq.n	800bfe0 <__sflush_r+0x34>
 800c056:	2b1d      	cmp	r3, #29
 800c058:	d001      	beq.n	800c05e <__sflush_r+0xb2>
 800c05a:	2b16      	cmp	r3, #22
 800c05c:	d101      	bne.n	800c062 <__sflush_r+0xb6>
 800c05e:	602f      	str	r7, [r5, #0]
 800c060:	e7b1      	b.n	800bfc6 <__sflush_r+0x1a>
 800c062:	89a3      	ldrh	r3, [r4, #12]
 800c064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c068:	81a3      	strh	r3, [r4, #12]
 800c06a:	e7ad      	b.n	800bfc8 <__sflush_r+0x1c>
 800c06c:	690f      	ldr	r7, [r1, #16]
 800c06e:	2f00      	cmp	r7, #0
 800c070:	d0a9      	beq.n	800bfc6 <__sflush_r+0x1a>
 800c072:	0793      	lsls	r3, r2, #30
 800c074:	680e      	ldr	r6, [r1, #0]
 800c076:	bf08      	it	eq
 800c078:	694b      	ldreq	r3, [r1, #20]
 800c07a:	600f      	str	r7, [r1, #0]
 800c07c:	bf18      	it	ne
 800c07e:	2300      	movne	r3, #0
 800c080:	eba6 0807 	sub.w	r8, r6, r7
 800c084:	608b      	str	r3, [r1, #8]
 800c086:	f1b8 0f00 	cmp.w	r8, #0
 800c08a:	dd9c      	ble.n	800bfc6 <__sflush_r+0x1a>
 800c08c:	6a21      	ldr	r1, [r4, #32]
 800c08e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c090:	4643      	mov	r3, r8
 800c092:	463a      	mov	r2, r7
 800c094:	4628      	mov	r0, r5
 800c096:	47b0      	blx	r6
 800c098:	2800      	cmp	r0, #0
 800c09a:	dc06      	bgt.n	800c0aa <__sflush_r+0xfe>
 800c09c:	89a3      	ldrh	r3, [r4, #12]
 800c09e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0a2:	81a3      	strh	r3, [r4, #12]
 800c0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0a8:	e78e      	b.n	800bfc8 <__sflush_r+0x1c>
 800c0aa:	4407      	add	r7, r0
 800c0ac:	eba8 0800 	sub.w	r8, r8, r0
 800c0b0:	e7e9      	b.n	800c086 <__sflush_r+0xda>
 800c0b2:	bf00      	nop
 800c0b4:	20400001 	.word	0x20400001

0800c0b8 <_fflush_r>:
 800c0b8:	b538      	push	{r3, r4, r5, lr}
 800c0ba:	690b      	ldr	r3, [r1, #16]
 800c0bc:	4605      	mov	r5, r0
 800c0be:	460c      	mov	r4, r1
 800c0c0:	b913      	cbnz	r3, 800c0c8 <_fflush_r+0x10>
 800c0c2:	2500      	movs	r5, #0
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	bd38      	pop	{r3, r4, r5, pc}
 800c0c8:	b118      	cbz	r0, 800c0d2 <_fflush_r+0x1a>
 800c0ca:	6983      	ldr	r3, [r0, #24]
 800c0cc:	b90b      	cbnz	r3, 800c0d2 <_fflush_r+0x1a>
 800c0ce:	f7ff fb9b 	bl	800b808 <__sinit>
 800c0d2:	4b14      	ldr	r3, [pc, #80]	; (800c124 <_fflush_r+0x6c>)
 800c0d4:	429c      	cmp	r4, r3
 800c0d6:	d11b      	bne.n	800c110 <_fflush_r+0x58>
 800c0d8:	686c      	ldr	r4, [r5, #4]
 800c0da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d0ef      	beq.n	800c0c2 <_fflush_r+0xa>
 800c0e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c0e4:	07d0      	lsls	r0, r2, #31
 800c0e6:	d404      	bmi.n	800c0f2 <_fflush_r+0x3a>
 800c0e8:	0599      	lsls	r1, r3, #22
 800c0ea:	d402      	bmi.n	800c0f2 <_fflush_r+0x3a>
 800c0ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0ee:	f7ff fc4e 	bl	800b98e <__retarget_lock_acquire_recursive>
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	4621      	mov	r1, r4
 800c0f6:	f7ff ff59 	bl	800bfac <__sflush_r>
 800c0fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0fc:	07da      	lsls	r2, r3, #31
 800c0fe:	4605      	mov	r5, r0
 800c100:	d4e0      	bmi.n	800c0c4 <_fflush_r+0xc>
 800c102:	89a3      	ldrh	r3, [r4, #12]
 800c104:	059b      	lsls	r3, r3, #22
 800c106:	d4dd      	bmi.n	800c0c4 <_fflush_r+0xc>
 800c108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c10a:	f7ff fc41 	bl	800b990 <__retarget_lock_release_recursive>
 800c10e:	e7d9      	b.n	800c0c4 <_fflush_r+0xc>
 800c110:	4b05      	ldr	r3, [pc, #20]	; (800c128 <_fflush_r+0x70>)
 800c112:	429c      	cmp	r4, r3
 800c114:	d101      	bne.n	800c11a <_fflush_r+0x62>
 800c116:	68ac      	ldr	r4, [r5, #8]
 800c118:	e7df      	b.n	800c0da <_fflush_r+0x22>
 800c11a:	4b04      	ldr	r3, [pc, #16]	; (800c12c <_fflush_r+0x74>)
 800c11c:	429c      	cmp	r4, r3
 800c11e:	bf08      	it	eq
 800c120:	68ec      	ldreq	r4, [r5, #12]
 800c122:	e7da      	b.n	800c0da <_fflush_r+0x22>
 800c124:	0800d1f4 	.word	0x0800d1f4
 800c128:	0800d214 	.word	0x0800d214
 800c12c:	0800d1d4 	.word	0x0800d1d4

0800c130 <_lseek_r>:
 800c130:	b538      	push	{r3, r4, r5, lr}
 800c132:	4d07      	ldr	r5, [pc, #28]	; (800c150 <_lseek_r+0x20>)
 800c134:	4604      	mov	r4, r0
 800c136:	4608      	mov	r0, r1
 800c138:	4611      	mov	r1, r2
 800c13a:	2200      	movs	r2, #0
 800c13c:	602a      	str	r2, [r5, #0]
 800c13e:	461a      	mov	r2, r3
 800c140:	f7f5 fea6 	bl	8001e90 <_lseek>
 800c144:	1c43      	adds	r3, r0, #1
 800c146:	d102      	bne.n	800c14e <_lseek_r+0x1e>
 800c148:	682b      	ldr	r3, [r5, #0]
 800c14a:	b103      	cbz	r3, 800c14e <_lseek_r+0x1e>
 800c14c:	6023      	str	r3, [r4, #0]
 800c14e:	bd38      	pop	{r3, r4, r5, pc}
 800c150:	20002b40 	.word	0x20002b40

0800c154 <__swhatbuf_r>:
 800c154:	b570      	push	{r4, r5, r6, lr}
 800c156:	460e      	mov	r6, r1
 800c158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c15c:	2900      	cmp	r1, #0
 800c15e:	b096      	sub	sp, #88	; 0x58
 800c160:	4614      	mov	r4, r2
 800c162:	461d      	mov	r5, r3
 800c164:	da08      	bge.n	800c178 <__swhatbuf_r+0x24>
 800c166:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c16a:	2200      	movs	r2, #0
 800c16c:	602a      	str	r2, [r5, #0]
 800c16e:	061a      	lsls	r2, r3, #24
 800c170:	d410      	bmi.n	800c194 <__swhatbuf_r+0x40>
 800c172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c176:	e00e      	b.n	800c196 <__swhatbuf_r+0x42>
 800c178:	466a      	mov	r2, sp
 800c17a:	f000 fd05 	bl	800cb88 <_fstat_r>
 800c17e:	2800      	cmp	r0, #0
 800c180:	dbf1      	blt.n	800c166 <__swhatbuf_r+0x12>
 800c182:	9a01      	ldr	r2, [sp, #4]
 800c184:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c188:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c18c:	425a      	negs	r2, r3
 800c18e:	415a      	adcs	r2, r3
 800c190:	602a      	str	r2, [r5, #0]
 800c192:	e7ee      	b.n	800c172 <__swhatbuf_r+0x1e>
 800c194:	2340      	movs	r3, #64	; 0x40
 800c196:	2000      	movs	r0, #0
 800c198:	6023      	str	r3, [r4, #0]
 800c19a:	b016      	add	sp, #88	; 0x58
 800c19c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c1a0 <__smakebuf_r>:
 800c1a0:	898b      	ldrh	r3, [r1, #12]
 800c1a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c1a4:	079d      	lsls	r5, r3, #30
 800c1a6:	4606      	mov	r6, r0
 800c1a8:	460c      	mov	r4, r1
 800c1aa:	d507      	bpl.n	800c1bc <__smakebuf_r+0x1c>
 800c1ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c1b0:	6023      	str	r3, [r4, #0]
 800c1b2:	6123      	str	r3, [r4, #16]
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	6163      	str	r3, [r4, #20]
 800c1b8:	b002      	add	sp, #8
 800c1ba:	bd70      	pop	{r4, r5, r6, pc}
 800c1bc:	ab01      	add	r3, sp, #4
 800c1be:	466a      	mov	r2, sp
 800c1c0:	f7ff ffc8 	bl	800c154 <__swhatbuf_r>
 800c1c4:	9900      	ldr	r1, [sp, #0]
 800c1c6:	4605      	mov	r5, r0
 800c1c8:	4630      	mov	r0, r6
 800c1ca:	f7ff fc19 	bl	800ba00 <_malloc_r>
 800c1ce:	b948      	cbnz	r0, 800c1e4 <__smakebuf_r+0x44>
 800c1d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1d4:	059a      	lsls	r2, r3, #22
 800c1d6:	d4ef      	bmi.n	800c1b8 <__smakebuf_r+0x18>
 800c1d8:	f023 0303 	bic.w	r3, r3, #3
 800c1dc:	f043 0302 	orr.w	r3, r3, #2
 800c1e0:	81a3      	strh	r3, [r4, #12]
 800c1e2:	e7e3      	b.n	800c1ac <__smakebuf_r+0xc>
 800c1e4:	4b0d      	ldr	r3, [pc, #52]	; (800c21c <__smakebuf_r+0x7c>)
 800c1e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c1e8:	89a3      	ldrh	r3, [r4, #12]
 800c1ea:	6020      	str	r0, [r4, #0]
 800c1ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1f0:	81a3      	strh	r3, [r4, #12]
 800c1f2:	9b00      	ldr	r3, [sp, #0]
 800c1f4:	6163      	str	r3, [r4, #20]
 800c1f6:	9b01      	ldr	r3, [sp, #4]
 800c1f8:	6120      	str	r0, [r4, #16]
 800c1fa:	b15b      	cbz	r3, 800c214 <__smakebuf_r+0x74>
 800c1fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c200:	4630      	mov	r0, r6
 800c202:	f000 fcd3 	bl	800cbac <_isatty_r>
 800c206:	b128      	cbz	r0, 800c214 <__smakebuf_r+0x74>
 800c208:	89a3      	ldrh	r3, [r4, #12]
 800c20a:	f023 0303 	bic.w	r3, r3, #3
 800c20e:	f043 0301 	orr.w	r3, r3, #1
 800c212:	81a3      	strh	r3, [r4, #12]
 800c214:	89a0      	ldrh	r0, [r4, #12]
 800c216:	4305      	orrs	r5, r0
 800c218:	81a5      	strh	r5, [r4, #12]
 800c21a:	e7cd      	b.n	800c1b8 <__smakebuf_r+0x18>
 800c21c:	0800b7a1 	.word	0x0800b7a1

0800c220 <__malloc_lock>:
 800c220:	4801      	ldr	r0, [pc, #4]	; (800c228 <__malloc_lock+0x8>)
 800c222:	f7ff bbb4 	b.w	800b98e <__retarget_lock_acquire_recursive>
 800c226:	bf00      	nop
 800c228:	20002b34 	.word	0x20002b34

0800c22c <__malloc_unlock>:
 800c22c:	4801      	ldr	r0, [pc, #4]	; (800c234 <__malloc_unlock+0x8>)
 800c22e:	f7ff bbaf 	b.w	800b990 <__retarget_lock_release_recursive>
 800c232:	bf00      	nop
 800c234:	20002b34 	.word	0x20002b34

0800c238 <_free_r>:
 800c238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c23a:	2900      	cmp	r1, #0
 800c23c:	d044      	beq.n	800c2c8 <_free_r+0x90>
 800c23e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c242:	9001      	str	r0, [sp, #4]
 800c244:	2b00      	cmp	r3, #0
 800c246:	f1a1 0404 	sub.w	r4, r1, #4
 800c24a:	bfb8      	it	lt
 800c24c:	18e4      	addlt	r4, r4, r3
 800c24e:	f7ff ffe7 	bl	800c220 <__malloc_lock>
 800c252:	4a1e      	ldr	r2, [pc, #120]	; (800c2cc <_free_r+0x94>)
 800c254:	9801      	ldr	r0, [sp, #4]
 800c256:	6813      	ldr	r3, [r2, #0]
 800c258:	b933      	cbnz	r3, 800c268 <_free_r+0x30>
 800c25a:	6063      	str	r3, [r4, #4]
 800c25c:	6014      	str	r4, [r2, #0]
 800c25e:	b003      	add	sp, #12
 800c260:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c264:	f7ff bfe2 	b.w	800c22c <__malloc_unlock>
 800c268:	42a3      	cmp	r3, r4
 800c26a:	d908      	bls.n	800c27e <_free_r+0x46>
 800c26c:	6825      	ldr	r5, [r4, #0]
 800c26e:	1961      	adds	r1, r4, r5
 800c270:	428b      	cmp	r3, r1
 800c272:	bf01      	itttt	eq
 800c274:	6819      	ldreq	r1, [r3, #0]
 800c276:	685b      	ldreq	r3, [r3, #4]
 800c278:	1949      	addeq	r1, r1, r5
 800c27a:	6021      	streq	r1, [r4, #0]
 800c27c:	e7ed      	b.n	800c25a <_free_r+0x22>
 800c27e:	461a      	mov	r2, r3
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	b10b      	cbz	r3, 800c288 <_free_r+0x50>
 800c284:	42a3      	cmp	r3, r4
 800c286:	d9fa      	bls.n	800c27e <_free_r+0x46>
 800c288:	6811      	ldr	r1, [r2, #0]
 800c28a:	1855      	adds	r5, r2, r1
 800c28c:	42a5      	cmp	r5, r4
 800c28e:	d10b      	bne.n	800c2a8 <_free_r+0x70>
 800c290:	6824      	ldr	r4, [r4, #0]
 800c292:	4421      	add	r1, r4
 800c294:	1854      	adds	r4, r2, r1
 800c296:	42a3      	cmp	r3, r4
 800c298:	6011      	str	r1, [r2, #0]
 800c29a:	d1e0      	bne.n	800c25e <_free_r+0x26>
 800c29c:	681c      	ldr	r4, [r3, #0]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	6053      	str	r3, [r2, #4]
 800c2a2:	4421      	add	r1, r4
 800c2a4:	6011      	str	r1, [r2, #0]
 800c2a6:	e7da      	b.n	800c25e <_free_r+0x26>
 800c2a8:	d902      	bls.n	800c2b0 <_free_r+0x78>
 800c2aa:	230c      	movs	r3, #12
 800c2ac:	6003      	str	r3, [r0, #0]
 800c2ae:	e7d6      	b.n	800c25e <_free_r+0x26>
 800c2b0:	6825      	ldr	r5, [r4, #0]
 800c2b2:	1961      	adds	r1, r4, r5
 800c2b4:	428b      	cmp	r3, r1
 800c2b6:	bf04      	itt	eq
 800c2b8:	6819      	ldreq	r1, [r3, #0]
 800c2ba:	685b      	ldreq	r3, [r3, #4]
 800c2bc:	6063      	str	r3, [r4, #4]
 800c2be:	bf04      	itt	eq
 800c2c0:	1949      	addeq	r1, r1, r5
 800c2c2:	6021      	streq	r1, [r4, #0]
 800c2c4:	6054      	str	r4, [r2, #4]
 800c2c6:	e7ca      	b.n	800c25e <_free_r+0x26>
 800c2c8:	b003      	add	sp, #12
 800c2ca:	bd30      	pop	{r4, r5, pc}
 800c2cc:	20002b38 	.word	0x20002b38

0800c2d0 <__ssputs_r>:
 800c2d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2d4:	688e      	ldr	r6, [r1, #8]
 800c2d6:	429e      	cmp	r6, r3
 800c2d8:	4682      	mov	sl, r0
 800c2da:	460c      	mov	r4, r1
 800c2dc:	4690      	mov	r8, r2
 800c2de:	461f      	mov	r7, r3
 800c2e0:	d838      	bhi.n	800c354 <__ssputs_r+0x84>
 800c2e2:	898a      	ldrh	r2, [r1, #12]
 800c2e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c2e8:	d032      	beq.n	800c350 <__ssputs_r+0x80>
 800c2ea:	6825      	ldr	r5, [r4, #0]
 800c2ec:	6909      	ldr	r1, [r1, #16]
 800c2ee:	eba5 0901 	sub.w	r9, r5, r1
 800c2f2:	6965      	ldr	r5, [r4, #20]
 800c2f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	444b      	add	r3, r9
 800c300:	106d      	asrs	r5, r5, #1
 800c302:	429d      	cmp	r5, r3
 800c304:	bf38      	it	cc
 800c306:	461d      	movcc	r5, r3
 800c308:	0553      	lsls	r3, r2, #21
 800c30a:	d531      	bpl.n	800c370 <__ssputs_r+0xa0>
 800c30c:	4629      	mov	r1, r5
 800c30e:	f7ff fb77 	bl	800ba00 <_malloc_r>
 800c312:	4606      	mov	r6, r0
 800c314:	b950      	cbnz	r0, 800c32c <__ssputs_r+0x5c>
 800c316:	230c      	movs	r3, #12
 800c318:	f8ca 3000 	str.w	r3, [sl]
 800c31c:	89a3      	ldrh	r3, [r4, #12]
 800c31e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c322:	81a3      	strh	r3, [r4, #12]
 800c324:	f04f 30ff 	mov.w	r0, #4294967295
 800c328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c32c:	6921      	ldr	r1, [r4, #16]
 800c32e:	464a      	mov	r2, r9
 800c330:	f7ff fb2f 	bl	800b992 <memcpy>
 800c334:	89a3      	ldrh	r3, [r4, #12]
 800c336:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c33a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c33e:	81a3      	strh	r3, [r4, #12]
 800c340:	6126      	str	r6, [r4, #16]
 800c342:	6165      	str	r5, [r4, #20]
 800c344:	444e      	add	r6, r9
 800c346:	eba5 0509 	sub.w	r5, r5, r9
 800c34a:	6026      	str	r6, [r4, #0]
 800c34c:	60a5      	str	r5, [r4, #8]
 800c34e:	463e      	mov	r6, r7
 800c350:	42be      	cmp	r6, r7
 800c352:	d900      	bls.n	800c356 <__ssputs_r+0x86>
 800c354:	463e      	mov	r6, r7
 800c356:	6820      	ldr	r0, [r4, #0]
 800c358:	4632      	mov	r2, r6
 800c35a:	4641      	mov	r1, r8
 800c35c:	f000 fc36 	bl	800cbcc <memmove>
 800c360:	68a3      	ldr	r3, [r4, #8]
 800c362:	1b9b      	subs	r3, r3, r6
 800c364:	60a3      	str	r3, [r4, #8]
 800c366:	6823      	ldr	r3, [r4, #0]
 800c368:	4433      	add	r3, r6
 800c36a:	6023      	str	r3, [r4, #0]
 800c36c:	2000      	movs	r0, #0
 800c36e:	e7db      	b.n	800c328 <__ssputs_r+0x58>
 800c370:	462a      	mov	r2, r5
 800c372:	f000 fc45 	bl	800cc00 <_realloc_r>
 800c376:	4606      	mov	r6, r0
 800c378:	2800      	cmp	r0, #0
 800c37a:	d1e1      	bne.n	800c340 <__ssputs_r+0x70>
 800c37c:	6921      	ldr	r1, [r4, #16]
 800c37e:	4650      	mov	r0, sl
 800c380:	f7ff ff5a 	bl	800c238 <_free_r>
 800c384:	e7c7      	b.n	800c316 <__ssputs_r+0x46>
	...

0800c388 <_svfiprintf_r>:
 800c388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c38c:	4698      	mov	r8, r3
 800c38e:	898b      	ldrh	r3, [r1, #12]
 800c390:	061b      	lsls	r3, r3, #24
 800c392:	b09d      	sub	sp, #116	; 0x74
 800c394:	4607      	mov	r7, r0
 800c396:	460d      	mov	r5, r1
 800c398:	4614      	mov	r4, r2
 800c39a:	d50e      	bpl.n	800c3ba <_svfiprintf_r+0x32>
 800c39c:	690b      	ldr	r3, [r1, #16]
 800c39e:	b963      	cbnz	r3, 800c3ba <_svfiprintf_r+0x32>
 800c3a0:	2140      	movs	r1, #64	; 0x40
 800c3a2:	f7ff fb2d 	bl	800ba00 <_malloc_r>
 800c3a6:	6028      	str	r0, [r5, #0]
 800c3a8:	6128      	str	r0, [r5, #16]
 800c3aa:	b920      	cbnz	r0, 800c3b6 <_svfiprintf_r+0x2e>
 800c3ac:	230c      	movs	r3, #12
 800c3ae:	603b      	str	r3, [r7, #0]
 800c3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b4:	e0d1      	b.n	800c55a <_svfiprintf_r+0x1d2>
 800c3b6:	2340      	movs	r3, #64	; 0x40
 800c3b8:	616b      	str	r3, [r5, #20]
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	9309      	str	r3, [sp, #36]	; 0x24
 800c3be:	2320      	movs	r3, #32
 800c3c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3c8:	2330      	movs	r3, #48	; 0x30
 800c3ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c574 <_svfiprintf_r+0x1ec>
 800c3ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3d2:	f04f 0901 	mov.w	r9, #1
 800c3d6:	4623      	mov	r3, r4
 800c3d8:	469a      	mov	sl, r3
 800c3da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3de:	b10a      	cbz	r2, 800c3e4 <_svfiprintf_r+0x5c>
 800c3e0:	2a25      	cmp	r2, #37	; 0x25
 800c3e2:	d1f9      	bne.n	800c3d8 <_svfiprintf_r+0x50>
 800c3e4:	ebba 0b04 	subs.w	fp, sl, r4
 800c3e8:	d00b      	beq.n	800c402 <_svfiprintf_r+0x7a>
 800c3ea:	465b      	mov	r3, fp
 800c3ec:	4622      	mov	r2, r4
 800c3ee:	4629      	mov	r1, r5
 800c3f0:	4638      	mov	r0, r7
 800c3f2:	f7ff ff6d 	bl	800c2d0 <__ssputs_r>
 800c3f6:	3001      	adds	r0, #1
 800c3f8:	f000 80aa 	beq.w	800c550 <_svfiprintf_r+0x1c8>
 800c3fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3fe:	445a      	add	r2, fp
 800c400:	9209      	str	r2, [sp, #36]	; 0x24
 800c402:	f89a 3000 	ldrb.w	r3, [sl]
 800c406:	2b00      	cmp	r3, #0
 800c408:	f000 80a2 	beq.w	800c550 <_svfiprintf_r+0x1c8>
 800c40c:	2300      	movs	r3, #0
 800c40e:	f04f 32ff 	mov.w	r2, #4294967295
 800c412:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c416:	f10a 0a01 	add.w	sl, sl, #1
 800c41a:	9304      	str	r3, [sp, #16]
 800c41c:	9307      	str	r3, [sp, #28]
 800c41e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c422:	931a      	str	r3, [sp, #104]	; 0x68
 800c424:	4654      	mov	r4, sl
 800c426:	2205      	movs	r2, #5
 800c428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c42c:	4851      	ldr	r0, [pc, #324]	; (800c574 <_svfiprintf_r+0x1ec>)
 800c42e:	f7f3 fed7 	bl	80001e0 <memchr>
 800c432:	9a04      	ldr	r2, [sp, #16]
 800c434:	b9d8      	cbnz	r0, 800c46e <_svfiprintf_r+0xe6>
 800c436:	06d0      	lsls	r0, r2, #27
 800c438:	bf44      	itt	mi
 800c43a:	2320      	movmi	r3, #32
 800c43c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c440:	0711      	lsls	r1, r2, #28
 800c442:	bf44      	itt	mi
 800c444:	232b      	movmi	r3, #43	; 0x2b
 800c446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c44a:	f89a 3000 	ldrb.w	r3, [sl]
 800c44e:	2b2a      	cmp	r3, #42	; 0x2a
 800c450:	d015      	beq.n	800c47e <_svfiprintf_r+0xf6>
 800c452:	9a07      	ldr	r2, [sp, #28]
 800c454:	4654      	mov	r4, sl
 800c456:	2000      	movs	r0, #0
 800c458:	f04f 0c0a 	mov.w	ip, #10
 800c45c:	4621      	mov	r1, r4
 800c45e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c462:	3b30      	subs	r3, #48	; 0x30
 800c464:	2b09      	cmp	r3, #9
 800c466:	d94e      	bls.n	800c506 <_svfiprintf_r+0x17e>
 800c468:	b1b0      	cbz	r0, 800c498 <_svfiprintf_r+0x110>
 800c46a:	9207      	str	r2, [sp, #28]
 800c46c:	e014      	b.n	800c498 <_svfiprintf_r+0x110>
 800c46e:	eba0 0308 	sub.w	r3, r0, r8
 800c472:	fa09 f303 	lsl.w	r3, r9, r3
 800c476:	4313      	orrs	r3, r2
 800c478:	9304      	str	r3, [sp, #16]
 800c47a:	46a2      	mov	sl, r4
 800c47c:	e7d2      	b.n	800c424 <_svfiprintf_r+0x9c>
 800c47e:	9b03      	ldr	r3, [sp, #12]
 800c480:	1d19      	adds	r1, r3, #4
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	9103      	str	r1, [sp, #12]
 800c486:	2b00      	cmp	r3, #0
 800c488:	bfbb      	ittet	lt
 800c48a:	425b      	neglt	r3, r3
 800c48c:	f042 0202 	orrlt.w	r2, r2, #2
 800c490:	9307      	strge	r3, [sp, #28]
 800c492:	9307      	strlt	r3, [sp, #28]
 800c494:	bfb8      	it	lt
 800c496:	9204      	strlt	r2, [sp, #16]
 800c498:	7823      	ldrb	r3, [r4, #0]
 800c49a:	2b2e      	cmp	r3, #46	; 0x2e
 800c49c:	d10c      	bne.n	800c4b8 <_svfiprintf_r+0x130>
 800c49e:	7863      	ldrb	r3, [r4, #1]
 800c4a0:	2b2a      	cmp	r3, #42	; 0x2a
 800c4a2:	d135      	bne.n	800c510 <_svfiprintf_r+0x188>
 800c4a4:	9b03      	ldr	r3, [sp, #12]
 800c4a6:	1d1a      	adds	r2, r3, #4
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	9203      	str	r2, [sp, #12]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	bfb8      	it	lt
 800c4b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4b4:	3402      	adds	r4, #2
 800c4b6:	9305      	str	r3, [sp, #20]
 800c4b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c584 <_svfiprintf_r+0x1fc>
 800c4bc:	7821      	ldrb	r1, [r4, #0]
 800c4be:	2203      	movs	r2, #3
 800c4c0:	4650      	mov	r0, sl
 800c4c2:	f7f3 fe8d 	bl	80001e0 <memchr>
 800c4c6:	b140      	cbz	r0, 800c4da <_svfiprintf_r+0x152>
 800c4c8:	2340      	movs	r3, #64	; 0x40
 800c4ca:	eba0 000a 	sub.w	r0, r0, sl
 800c4ce:	fa03 f000 	lsl.w	r0, r3, r0
 800c4d2:	9b04      	ldr	r3, [sp, #16]
 800c4d4:	4303      	orrs	r3, r0
 800c4d6:	3401      	adds	r4, #1
 800c4d8:	9304      	str	r3, [sp, #16]
 800c4da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4de:	4826      	ldr	r0, [pc, #152]	; (800c578 <_svfiprintf_r+0x1f0>)
 800c4e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4e4:	2206      	movs	r2, #6
 800c4e6:	f7f3 fe7b 	bl	80001e0 <memchr>
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	d038      	beq.n	800c560 <_svfiprintf_r+0x1d8>
 800c4ee:	4b23      	ldr	r3, [pc, #140]	; (800c57c <_svfiprintf_r+0x1f4>)
 800c4f0:	bb1b      	cbnz	r3, 800c53a <_svfiprintf_r+0x1b2>
 800c4f2:	9b03      	ldr	r3, [sp, #12]
 800c4f4:	3307      	adds	r3, #7
 800c4f6:	f023 0307 	bic.w	r3, r3, #7
 800c4fa:	3308      	adds	r3, #8
 800c4fc:	9303      	str	r3, [sp, #12]
 800c4fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c500:	4433      	add	r3, r6
 800c502:	9309      	str	r3, [sp, #36]	; 0x24
 800c504:	e767      	b.n	800c3d6 <_svfiprintf_r+0x4e>
 800c506:	fb0c 3202 	mla	r2, ip, r2, r3
 800c50a:	460c      	mov	r4, r1
 800c50c:	2001      	movs	r0, #1
 800c50e:	e7a5      	b.n	800c45c <_svfiprintf_r+0xd4>
 800c510:	2300      	movs	r3, #0
 800c512:	3401      	adds	r4, #1
 800c514:	9305      	str	r3, [sp, #20]
 800c516:	4619      	mov	r1, r3
 800c518:	f04f 0c0a 	mov.w	ip, #10
 800c51c:	4620      	mov	r0, r4
 800c51e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c522:	3a30      	subs	r2, #48	; 0x30
 800c524:	2a09      	cmp	r2, #9
 800c526:	d903      	bls.n	800c530 <_svfiprintf_r+0x1a8>
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d0c5      	beq.n	800c4b8 <_svfiprintf_r+0x130>
 800c52c:	9105      	str	r1, [sp, #20]
 800c52e:	e7c3      	b.n	800c4b8 <_svfiprintf_r+0x130>
 800c530:	fb0c 2101 	mla	r1, ip, r1, r2
 800c534:	4604      	mov	r4, r0
 800c536:	2301      	movs	r3, #1
 800c538:	e7f0      	b.n	800c51c <_svfiprintf_r+0x194>
 800c53a:	ab03      	add	r3, sp, #12
 800c53c:	9300      	str	r3, [sp, #0]
 800c53e:	462a      	mov	r2, r5
 800c540:	4b0f      	ldr	r3, [pc, #60]	; (800c580 <_svfiprintf_r+0x1f8>)
 800c542:	a904      	add	r1, sp, #16
 800c544:	4638      	mov	r0, r7
 800c546:	f3af 8000 	nop.w
 800c54a:	1c42      	adds	r2, r0, #1
 800c54c:	4606      	mov	r6, r0
 800c54e:	d1d6      	bne.n	800c4fe <_svfiprintf_r+0x176>
 800c550:	89ab      	ldrh	r3, [r5, #12]
 800c552:	065b      	lsls	r3, r3, #25
 800c554:	f53f af2c 	bmi.w	800c3b0 <_svfiprintf_r+0x28>
 800c558:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c55a:	b01d      	add	sp, #116	; 0x74
 800c55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c560:	ab03      	add	r3, sp, #12
 800c562:	9300      	str	r3, [sp, #0]
 800c564:	462a      	mov	r2, r5
 800c566:	4b06      	ldr	r3, [pc, #24]	; (800c580 <_svfiprintf_r+0x1f8>)
 800c568:	a904      	add	r1, sp, #16
 800c56a:	4638      	mov	r0, r7
 800c56c:	f000 f9d4 	bl	800c918 <_printf_i>
 800c570:	e7eb      	b.n	800c54a <_svfiprintf_r+0x1c2>
 800c572:	bf00      	nop
 800c574:	0800d238 	.word	0x0800d238
 800c578:	0800d242 	.word	0x0800d242
 800c57c:	00000000 	.word	0x00000000
 800c580:	0800c2d1 	.word	0x0800c2d1
 800c584:	0800d23e 	.word	0x0800d23e

0800c588 <__sfputc_r>:
 800c588:	6893      	ldr	r3, [r2, #8]
 800c58a:	3b01      	subs	r3, #1
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	b410      	push	{r4}
 800c590:	6093      	str	r3, [r2, #8]
 800c592:	da08      	bge.n	800c5a6 <__sfputc_r+0x1e>
 800c594:	6994      	ldr	r4, [r2, #24]
 800c596:	42a3      	cmp	r3, r4
 800c598:	db01      	blt.n	800c59e <__sfputc_r+0x16>
 800c59a:	290a      	cmp	r1, #10
 800c59c:	d103      	bne.n	800c5a6 <__sfputc_r+0x1e>
 800c59e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5a2:	f7ff bc21 	b.w	800bde8 <__swbuf_r>
 800c5a6:	6813      	ldr	r3, [r2, #0]
 800c5a8:	1c58      	adds	r0, r3, #1
 800c5aa:	6010      	str	r0, [r2, #0]
 800c5ac:	7019      	strb	r1, [r3, #0]
 800c5ae:	4608      	mov	r0, r1
 800c5b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5b4:	4770      	bx	lr

0800c5b6 <__sfputs_r>:
 800c5b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b8:	4606      	mov	r6, r0
 800c5ba:	460f      	mov	r7, r1
 800c5bc:	4614      	mov	r4, r2
 800c5be:	18d5      	adds	r5, r2, r3
 800c5c0:	42ac      	cmp	r4, r5
 800c5c2:	d101      	bne.n	800c5c8 <__sfputs_r+0x12>
 800c5c4:	2000      	movs	r0, #0
 800c5c6:	e007      	b.n	800c5d8 <__sfputs_r+0x22>
 800c5c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5cc:	463a      	mov	r2, r7
 800c5ce:	4630      	mov	r0, r6
 800c5d0:	f7ff ffda 	bl	800c588 <__sfputc_r>
 800c5d4:	1c43      	adds	r3, r0, #1
 800c5d6:	d1f3      	bne.n	800c5c0 <__sfputs_r+0xa>
 800c5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c5dc <_vfiprintf_r>:
 800c5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e0:	460d      	mov	r5, r1
 800c5e2:	b09d      	sub	sp, #116	; 0x74
 800c5e4:	4614      	mov	r4, r2
 800c5e6:	4698      	mov	r8, r3
 800c5e8:	4606      	mov	r6, r0
 800c5ea:	b118      	cbz	r0, 800c5f4 <_vfiprintf_r+0x18>
 800c5ec:	6983      	ldr	r3, [r0, #24]
 800c5ee:	b90b      	cbnz	r3, 800c5f4 <_vfiprintf_r+0x18>
 800c5f0:	f7ff f90a 	bl	800b808 <__sinit>
 800c5f4:	4b89      	ldr	r3, [pc, #548]	; (800c81c <_vfiprintf_r+0x240>)
 800c5f6:	429d      	cmp	r5, r3
 800c5f8:	d11b      	bne.n	800c632 <_vfiprintf_r+0x56>
 800c5fa:	6875      	ldr	r5, [r6, #4]
 800c5fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5fe:	07d9      	lsls	r1, r3, #31
 800c600:	d405      	bmi.n	800c60e <_vfiprintf_r+0x32>
 800c602:	89ab      	ldrh	r3, [r5, #12]
 800c604:	059a      	lsls	r2, r3, #22
 800c606:	d402      	bmi.n	800c60e <_vfiprintf_r+0x32>
 800c608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c60a:	f7ff f9c0 	bl	800b98e <__retarget_lock_acquire_recursive>
 800c60e:	89ab      	ldrh	r3, [r5, #12]
 800c610:	071b      	lsls	r3, r3, #28
 800c612:	d501      	bpl.n	800c618 <_vfiprintf_r+0x3c>
 800c614:	692b      	ldr	r3, [r5, #16]
 800c616:	b9eb      	cbnz	r3, 800c654 <_vfiprintf_r+0x78>
 800c618:	4629      	mov	r1, r5
 800c61a:	4630      	mov	r0, r6
 800c61c:	f7ff fc48 	bl	800beb0 <__swsetup_r>
 800c620:	b1c0      	cbz	r0, 800c654 <_vfiprintf_r+0x78>
 800c622:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c624:	07dc      	lsls	r4, r3, #31
 800c626:	d50e      	bpl.n	800c646 <_vfiprintf_r+0x6a>
 800c628:	f04f 30ff 	mov.w	r0, #4294967295
 800c62c:	b01d      	add	sp, #116	; 0x74
 800c62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c632:	4b7b      	ldr	r3, [pc, #492]	; (800c820 <_vfiprintf_r+0x244>)
 800c634:	429d      	cmp	r5, r3
 800c636:	d101      	bne.n	800c63c <_vfiprintf_r+0x60>
 800c638:	68b5      	ldr	r5, [r6, #8]
 800c63a:	e7df      	b.n	800c5fc <_vfiprintf_r+0x20>
 800c63c:	4b79      	ldr	r3, [pc, #484]	; (800c824 <_vfiprintf_r+0x248>)
 800c63e:	429d      	cmp	r5, r3
 800c640:	bf08      	it	eq
 800c642:	68f5      	ldreq	r5, [r6, #12]
 800c644:	e7da      	b.n	800c5fc <_vfiprintf_r+0x20>
 800c646:	89ab      	ldrh	r3, [r5, #12]
 800c648:	0598      	lsls	r0, r3, #22
 800c64a:	d4ed      	bmi.n	800c628 <_vfiprintf_r+0x4c>
 800c64c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c64e:	f7ff f99f 	bl	800b990 <__retarget_lock_release_recursive>
 800c652:	e7e9      	b.n	800c628 <_vfiprintf_r+0x4c>
 800c654:	2300      	movs	r3, #0
 800c656:	9309      	str	r3, [sp, #36]	; 0x24
 800c658:	2320      	movs	r3, #32
 800c65a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c65e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c662:	2330      	movs	r3, #48	; 0x30
 800c664:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c828 <_vfiprintf_r+0x24c>
 800c668:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c66c:	f04f 0901 	mov.w	r9, #1
 800c670:	4623      	mov	r3, r4
 800c672:	469a      	mov	sl, r3
 800c674:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c678:	b10a      	cbz	r2, 800c67e <_vfiprintf_r+0xa2>
 800c67a:	2a25      	cmp	r2, #37	; 0x25
 800c67c:	d1f9      	bne.n	800c672 <_vfiprintf_r+0x96>
 800c67e:	ebba 0b04 	subs.w	fp, sl, r4
 800c682:	d00b      	beq.n	800c69c <_vfiprintf_r+0xc0>
 800c684:	465b      	mov	r3, fp
 800c686:	4622      	mov	r2, r4
 800c688:	4629      	mov	r1, r5
 800c68a:	4630      	mov	r0, r6
 800c68c:	f7ff ff93 	bl	800c5b6 <__sfputs_r>
 800c690:	3001      	adds	r0, #1
 800c692:	f000 80aa 	beq.w	800c7ea <_vfiprintf_r+0x20e>
 800c696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c698:	445a      	add	r2, fp
 800c69a:	9209      	str	r2, [sp, #36]	; 0x24
 800c69c:	f89a 3000 	ldrb.w	r3, [sl]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	f000 80a2 	beq.w	800c7ea <_vfiprintf_r+0x20e>
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	f04f 32ff 	mov.w	r2, #4294967295
 800c6ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6b0:	f10a 0a01 	add.w	sl, sl, #1
 800c6b4:	9304      	str	r3, [sp, #16]
 800c6b6:	9307      	str	r3, [sp, #28]
 800c6b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6bc:	931a      	str	r3, [sp, #104]	; 0x68
 800c6be:	4654      	mov	r4, sl
 800c6c0:	2205      	movs	r2, #5
 800c6c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6c6:	4858      	ldr	r0, [pc, #352]	; (800c828 <_vfiprintf_r+0x24c>)
 800c6c8:	f7f3 fd8a 	bl	80001e0 <memchr>
 800c6cc:	9a04      	ldr	r2, [sp, #16]
 800c6ce:	b9d8      	cbnz	r0, 800c708 <_vfiprintf_r+0x12c>
 800c6d0:	06d1      	lsls	r1, r2, #27
 800c6d2:	bf44      	itt	mi
 800c6d4:	2320      	movmi	r3, #32
 800c6d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6da:	0713      	lsls	r3, r2, #28
 800c6dc:	bf44      	itt	mi
 800c6de:	232b      	movmi	r3, #43	; 0x2b
 800c6e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6e4:	f89a 3000 	ldrb.w	r3, [sl]
 800c6e8:	2b2a      	cmp	r3, #42	; 0x2a
 800c6ea:	d015      	beq.n	800c718 <_vfiprintf_r+0x13c>
 800c6ec:	9a07      	ldr	r2, [sp, #28]
 800c6ee:	4654      	mov	r4, sl
 800c6f0:	2000      	movs	r0, #0
 800c6f2:	f04f 0c0a 	mov.w	ip, #10
 800c6f6:	4621      	mov	r1, r4
 800c6f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6fc:	3b30      	subs	r3, #48	; 0x30
 800c6fe:	2b09      	cmp	r3, #9
 800c700:	d94e      	bls.n	800c7a0 <_vfiprintf_r+0x1c4>
 800c702:	b1b0      	cbz	r0, 800c732 <_vfiprintf_r+0x156>
 800c704:	9207      	str	r2, [sp, #28]
 800c706:	e014      	b.n	800c732 <_vfiprintf_r+0x156>
 800c708:	eba0 0308 	sub.w	r3, r0, r8
 800c70c:	fa09 f303 	lsl.w	r3, r9, r3
 800c710:	4313      	orrs	r3, r2
 800c712:	9304      	str	r3, [sp, #16]
 800c714:	46a2      	mov	sl, r4
 800c716:	e7d2      	b.n	800c6be <_vfiprintf_r+0xe2>
 800c718:	9b03      	ldr	r3, [sp, #12]
 800c71a:	1d19      	adds	r1, r3, #4
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	9103      	str	r1, [sp, #12]
 800c720:	2b00      	cmp	r3, #0
 800c722:	bfbb      	ittet	lt
 800c724:	425b      	neglt	r3, r3
 800c726:	f042 0202 	orrlt.w	r2, r2, #2
 800c72a:	9307      	strge	r3, [sp, #28]
 800c72c:	9307      	strlt	r3, [sp, #28]
 800c72e:	bfb8      	it	lt
 800c730:	9204      	strlt	r2, [sp, #16]
 800c732:	7823      	ldrb	r3, [r4, #0]
 800c734:	2b2e      	cmp	r3, #46	; 0x2e
 800c736:	d10c      	bne.n	800c752 <_vfiprintf_r+0x176>
 800c738:	7863      	ldrb	r3, [r4, #1]
 800c73a:	2b2a      	cmp	r3, #42	; 0x2a
 800c73c:	d135      	bne.n	800c7aa <_vfiprintf_r+0x1ce>
 800c73e:	9b03      	ldr	r3, [sp, #12]
 800c740:	1d1a      	adds	r2, r3, #4
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	9203      	str	r2, [sp, #12]
 800c746:	2b00      	cmp	r3, #0
 800c748:	bfb8      	it	lt
 800c74a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c74e:	3402      	adds	r4, #2
 800c750:	9305      	str	r3, [sp, #20]
 800c752:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c838 <_vfiprintf_r+0x25c>
 800c756:	7821      	ldrb	r1, [r4, #0]
 800c758:	2203      	movs	r2, #3
 800c75a:	4650      	mov	r0, sl
 800c75c:	f7f3 fd40 	bl	80001e0 <memchr>
 800c760:	b140      	cbz	r0, 800c774 <_vfiprintf_r+0x198>
 800c762:	2340      	movs	r3, #64	; 0x40
 800c764:	eba0 000a 	sub.w	r0, r0, sl
 800c768:	fa03 f000 	lsl.w	r0, r3, r0
 800c76c:	9b04      	ldr	r3, [sp, #16]
 800c76e:	4303      	orrs	r3, r0
 800c770:	3401      	adds	r4, #1
 800c772:	9304      	str	r3, [sp, #16]
 800c774:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c778:	482c      	ldr	r0, [pc, #176]	; (800c82c <_vfiprintf_r+0x250>)
 800c77a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c77e:	2206      	movs	r2, #6
 800c780:	f7f3 fd2e 	bl	80001e0 <memchr>
 800c784:	2800      	cmp	r0, #0
 800c786:	d03f      	beq.n	800c808 <_vfiprintf_r+0x22c>
 800c788:	4b29      	ldr	r3, [pc, #164]	; (800c830 <_vfiprintf_r+0x254>)
 800c78a:	bb1b      	cbnz	r3, 800c7d4 <_vfiprintf_r+0x1f8>
 800c78c:	9b03      	ldr	r3, [sp, #12]
 800c78e:	3307      	adds	r3, #7
 800c790:	f023 0307 	bic.w	r3, r3, #7
 800c794:	3308      	adds	r3, #8
 800c796:	9303      	str	r3, [sp, #12]
 800c798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c79a:	443b      	add	r3, r7
 800c79c:	9309      	str	r3, [sp, #36]	; 0x24
 800c79e:	e767      	b.n	800c670 <_vfiprintf_r+0x94>
 800c7a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7a4:	460c      	mov	r4, r1
 800c7a6:	2001      	movs	r0, #1
 800c7a8:	e7a5      	b.n	800c6f6 <_vfiprintf_r+0x11a>
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	3401      	adds	r4, #1
 800c7ae:	9305      	str	r3, [sp, #20]
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	f04f 0c0a 	mov.w	ip, #10
 800c7b6:	4620      	mov	r0, r4
 800c7b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7bc:	3a30      	subs	r2, #48	; 0x30
 800c7be:	2a09      	cmp	r2, #9
 800c7c0:	d903      	bls.n	800c7ca <_vfiprintf_r+0x1ee>
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d0c5      	beq.n	800c752 <_vfiprintf_r+0x176>
 800c7c6:	9105      	str	r1, [sp, #20]
 800c7c8:	e7c3      	b.n	800c752 <_vfiprintf_r+0x176>
 800c7ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7ce:	4604      	mov	r4, r0
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	e7f0      	b.n	800c7b6 <_vfiprintf_r+0x1da>
 800c7d4:	ab03      	add	r3, sp, #12
 800c7d6:	9300      	str	r3, [sp, #0]
 800c7d8:	462a      	mov	r2, r5
 800c7da:	4b16      	ldr	r3, [pc, #88]	; (800c834 <_vfiprintf_r+0x258>)
 800c7dc:	a904      	add	r1, sp, #16
 800c7de:	4630      	mov	r0, r6
 800c7e0:	f3af 8000 	nop.w
 800c7e4:	4607      	mov	r7, r0
 800c7e6:	1c78      	adds	r0, r7, #1
 800c7e8:	d1d6      	bne.n	800c798 <_vfiprintf_r+0x1bc>
 800c7ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7ec:	07d9      	lsls	r1, r3, #31
 800c7ee:	d405      	bmi.n	800c7fc <_vfiprintf_r+0x220>
 800c7f0:	89ab      	ldrh	r3, [r5, #12]
 800c7f2:	059a      	lsls	r2, r3, #22
 800c7f4:	d402      	bmi.n	800c7fc <_vfiprintf_r+0x220>
 800c7f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7f8:	f7ff f8ca 	bl	800b990 <__retarget_lock_release_recursive>
 800c7fc:	89ab      	ldrh	r3, [r5, #12]
 800c7fe:	065b      	lsls	r3, r3, #25
 800c800:	f53f af12 	bmi.w	800c628 <_vfiprintf_r+0x4c>
 800c804:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c806:	e711      	b.n	800c62c <_vfiprintf_r+0x50>
 800c808:	ab03      	add	r3, sp, #12
 800c80a:	9300      	str	r3, [sp, #0]
 800c80c:	462a      	mov	r2, r5
 800c80e:	4b09      	ldr	r3, [pc, #36]	; (800c834 <_vfiprintf_r+0x258>)
 800c810:	a904      	add	r1, sp, #16
 800c812:	4630      	mov	r0, r6
 800c814:	f000 f880 	bl	800c918 <_printf_i>
 800c818:	e7e4      	b.n	800c7e4 <_vfiprintf_r+0x208>
 800c81a:	bf00      	nop
 800c81c:	0800d1f4 	.word	0x0800d1f4
 800c820:	0800d214 	.word	0x0800d214
 800c824:	0800d1d4 	.word	0x0800d1d4
 800c828:	0800d238 	.word	0x0800d238
 800c82c:	0800d242 	.word	0x0800d242
 800c830:	00000000 	.word	0x00000000
 800c834:	0800c5b7 	.word	0x0800c5b7
 800c838:	0800d23e 	.word	0x0800d23e

0800c83c <_printf_common>:
 800c83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c840:	4616      	mov	r6, r2
 800c842:	4699      	mov	r9, r3
 800c844:	688a      	ldr	r2, [r1, #8]
 800c846:	690b      	ldr	r3, [r1, #16]
 800c848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c84c:	4293      	cmp	r3, r2
 800c84e:	bfb8      	it	lt
 800c850:	4613      	movlt	r3, r2
 800c852:	6033      	str	r3, [r6, #0]
 800c854:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c858:	4607      	mov	r7, r0
 800c85a:	460c      	mov	r4, r1
 800c85c:	b10a      	cbz	r2, 800c862 <_printf_common+0x26>
 800c85e:	3301      	adds	r3, #1
 800c860:	6033      	str	r3, [r6, #0]
 800c862:	6823      	ldr	r3, [r4, #0]
 800c864:	0699      	lsls	r1, r3, #26
 800c866:	bf42      	ittt	mi
 800c868:	6833      	ldrmi	r3, [r6, #0]
 800c86a:	3302      	addmi	r3, #2
 800c86c:	6033      	strmi	r3, [r6, #0]
 800c86e:	6825      	ldr	r5, [r4, #0]
 800c870:	f015 0506 	ands.w	r5, r5, #6
 800c874:	d106      	bne.n	800c884 <_printf_common+0x48>
 800c876:	f104 0a19 	add.w	sl, r4, #25
 800c87a:	68e3      	ldr	r3, [r4, #12]
 800c87c:	6832      	ldr	r2, [r6, #0]
 800c87e:	1a9b      	subs	r3, r3, r2
 800c880:	42ab      	cmp	r3, r5
 800c882:	dc26      	bgt.n	800c8d2 <_printf_common+0x96>
 800c884:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c888:	1e13      	subs	r3, r2, #0
 800c88a:	6822      	ldr	r2, [r4, #0]
 800c88c:	bf18      	it	ne
 800c88e:	2301      	movne	r3, #1
 800c890:	0692      	lsls	r2, r2, #26
 800c892:	d42b      	bmi.n	800c8ec <_printf_common+0xb0>
 800c894:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c898:	4649      	mov	r1, r9
 800c89a:	4638      	mov	r0, r7
 800c89c:	47c0      	blx	r8
 800c89e:	3001      	adds	r0, #1
 800c8a0:	d01e      	beq.n	800c8e0 <_printf_common+0xa4>
 800c8a2:	6823      	ldr	r3, [r4, #0]
 800c8a4:	68e5      	ldr	r5, [r4, #12]
 800c8a6:	6832      	ldr	r2, [r6, #0]
 800c8a8:	f003 0306 	and.w	r3, r3, #6
 800c8ac:	2b04      	cmp	r3, #4
 800c8ae:	bf08      	it	eq
 800c8b0:	1aad      	subeq	r5, r5, r2
 800c8b2:	68a3      	ldr	r3, [r4, #8]
 800c8b4:	6922      	ldr	r2, [r4, #16]
 800c8b6:	bf0c      	ite	eq
 800c8b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8bc:	2500      	movne	r5, #0
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	bfc4      	itt	gt
 800c8c2:	1a9b      	subgt	r3, r3, r2
 800c8c4:	18ed      	addgt	r5, r5, r3
 800c8c6:	2600      	movs	r6, #0
 800c8c8:	341a      	adds	r4, #26
 800c8ca:	42b5      	cmp	r5, r6
 800c8cc:	d11a      	bne.n	800c904 <_printf_common+0xc8>
 800c8ce:	2000      	movs	r0, #0
 800c8d0:	e008      	b.n	800c8e4 <_printf_common+0xa8>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	4652      	mov	r2, sl
 800c8d6:	4649      	mov	r1, r9
 800c8d8:	4638      	mov	r0, r7
 800c8da:	47c0      	blx	r8
 800c8dc:	3001      	adds	r0, #1
 800c8de:	d103      	bne.n	800c8e8 <_printf_common+0xac>
 800c8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8e8:	3501      	adds	r5, #1
 800c8ea:	e7c6      	b.n	800c87a <_printf_common+0x3e>
 800c8ec:	18e1      	adds	r1, r4, r3
 800c8ee:	1c5a      	adds	r2, r3, #1
 800c8f0:	2030      	movs	r0, #48	; 0x30
 800c8f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8f6:	4422      	add	r2, r4
 800c8f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c900:	3302      	adds	r3, #2
 800c902:	e7c7      	b.n	800c894 <_printf_common+0x58>
 800c904:	2301      	movs	r3, #1
 800c906:	4622      	mov	r2, r4
 800c908:	4649      	mov	r1, r9
 800c90a:	4638      	mov	r0, r7
 800c90c:	47c0      	blx	r8
 800c90e:	3001      	adds	r0, #1
 800c910:	d0e6      	beq.n	800c8e0 <_printf_common+0xa4>
 800c912:	3601      	adds	r6, #1
 800c914:	e7d9      	b.n	800c8ca <_printf_common+0x8e>
	...

0800c918 <_printf_i>:
 800c918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c91c:	7e0f      	ldrb	r7, [r1, #24]
 800c91e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c920:	2f78      	cmp	r7, #120	; 0x78
 800c922:	4691      	mov	r9, r2
 800c924:	4680      	mov	r8, r0
 800c926:	460c      	mov	r4, r1
 800c928:	469a      	mov	sl, r3
 800c92a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c92e:	d807      	bhi.n	800c940 <_printf_i+0x28>
 800c930:	2f62      	cmp	r7, #98	; 0x62
 800c932:	d80a      	bhi.n	800c94a <_printf_i+0x32>
 800c934:	2f00      	cmp	r7, #0
 800c936:	f000 80d8 	beq.w	800caea <_printf_i+0x1d2>
 800c93a:	2f58      	cmp	r7, #88	; 0x58
 800c93c:	f000 80a3 	beq.w	800ca86 <_printf_i+0x16e>
 800c940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c944:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c948:	e03a      	b.n	800c9c0 <_printf_i+0xa8>
 800c94a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c94e:	2b15      	cmp	r3, #21
 800c950:	d8f6      	bhi.n	800c940 <_printf_i+0x28>
 800c952:	a101      	add	r1, pc, #4	; (adr r1, 800c958 <_printf_i+0x40>)
 800c954:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c958:	0800c9b1 	.word	0x0800c9b1
 800c95c:	0800c9c5 	.word	0x0800c9c5
 800c960:	0800c941 	.word	0x0800c941
 800c964:	0800c941 	.word	0x0800c941
 800c968:	0800c941 	.word	0x0800c941
 800c96c:	0800c941 	.word	0x0800c941
 800c970:	0800c9c5 	.word	0x0800c9c5
 800c974:	0800c941 	.word	0x0800c941
 800c978:	0800c941 	.word	0x0800c941
 800c97c:	0800c941 	.word	0x0800c941
 800c980:	0800c941 	.word	0x0800c941
 800c984:	0800cad1 	.word	0x0800cad1
 800c988:	0800c9f5 	.word	0x0800c9f5
 800c98c:	0800cab3 	.word	0x0800cab3
 800c990:	0800c941 	.word	0x0800c941
 800c994:	0800c941 	.word	0x0800c941
 800c998:	0800caf3 	.word	0x0800caf3
 800c99c:	0800c941 	.word	0x0800c941
 800c9a0:	0800c9f5 	.word	0x0800c9f5
 800c9a4:	0800c941 	.word	0x0800c941
 800c9a8:	0800c941 	.word	0x0800c941
 800c9ac:	0800cabb 	.word	0x0800cabb
 800c9b0:	682b      	ldr	r3, [r5, #0]
 800c9b2:	1d1a      	adds	r2, r3, #4
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	602a      	str	r2, [r5, #0]
 800c9b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	e0a3      	b.n	800cb0c <_printf_i+0x1f4>
 800c9c4:	6820      	ldr	r0, [r4, #0]
 800c9c6:	6829      	ldr	r1, [r5, #0]
 800c9c8:	0606      	lsls	r6, r0, #24
 800c9ca:	f101 0304 	add.w	r3, r1, #4
 800c9ce:	d50a      	bpl.n	800c9e6 <_printf_i+0xce>
 800c9d0:	680e      	ldr	r6, [r1, #0]
 800c9d2:	602b      	str	r3, [r5, #0]
 800c9d4:	2e00      	cmp	r6, #0
 800c9d6:	da03      	bge.n	800c9e0 <_printf_i+0xc8>
 800c9d8:	232d      	movs	r3, #45	; 0x2d
 800c9da:	4276      	negs	r6, r6
 800c9dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9e0:	485e      	ldr	r0, [pc, #376]	; (800cb5c <_printf_i+0x244>)
 800c9e2:	230a      	movs	r3, #10
 800c9e4:	e019      	b.n	800ca1a <_printf_i+0x102>
 800c9e6:	680e      	ldr	r6, [r1, #0]
 800c9e8:	602b      	str	r3, [r5, #0]
 800c9ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c9ee:	bf18      	it	ne
 800c9f0:	b236      	sxthne	r6, r6
 800c9f2:	e7ef      	b.n	800c9d4 <_printf_i+0xbc>
 800c9f4:	682b      	ldr	r3, [r5, #0]
 800c9f6:	6820      	ldr	r0, [r4, #0]
 800c9f8:	1d19      	adds	r1, r3, #4
 800c9fa:	6029      	str	r1, [r5, #0]
 800c9fc:	0601      	lsls	r1, r0, #24
 800c9fe:	d501      	bpl.n	800ca04 <_printf_i+0xec>
 800ca00:	681e      	ldr	r6, [r3, #0]
 800ca02:	e002      	b.n	800ca0a <_printf_i+0xf2>
 800ca04:	0646      	lsls	r6, r0, #25
 800ca06:	d5fb      	bpl.n	800ca00 <_printf_i+0xe8>
 800ca08:	881e      	ldrh	r6, [r3, #0]
 800ca0a:	4854      	ldr	r0, [pc, #336]	; (800cb5c <_printf_i+0x244>)
 800ca0c:	2f6f      	cmp	r7, #111	; 0x6f
 800ca0e:	bf0c      	ite	eq
 800ca10:	2308      	moveq	r3, #8
 800ca12:	230a      	movne	r3, #10
 800ca14:	2100      	movs	r1, #0
 800ca16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca1a:	6865      	ldr	r5, [r4, #4]
 800ca1c:	60a5      	str	r5, [r4, #8]
 800ca1e:	2d00      	cmp	r5, #0
 800ca20:	bfa2      	ittt	ge
 800ca22:	6821      	ldrge	r1, [r4, #0]
 800ca24:	f021 0104 	bicge.w	r1, r1, #4
 800ca28:	6021      	strge	r1, [r4, #0]
 800ca2a:	b90e      	cbnz	r6, 800ca30 <_printf_i+0x118>
 800ca2c:	2d00      	cmp	r5, #0
 800ca2e:	d04d      	beq.n	800cacc <_printf_i+0x1b4>
 800ca30:	4615      	mov	r5, r2
 800ca32:	fbb6 f1f3 	udiv	r1, r6, r3
 800ca36:	fb03 6711 	mls	r7, r3, r1, r6
 800ca3a:	5dc7      	ldrb	r7, [r0, r7]
 800ca3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ca40:	4637      	mov	r7, r6
 800ca42:	42bb      	cmp	r3, r7
 800ca44:	460e      	mov	r6, r1
 800ca46:	d9f4      	bls.n	800ca32 <_printf_i+0x11a>
 800ca48:	2b08      	cmp	r3, #8
 800ca4a:	d10b      	bne.n	800ca64 <_printf_i+0x14c>
 800ca4c:	6823      	ldr	r3, [r4, #0]
 800ca4e:	07de      	lsls	r6, r3, #31
 800ca50:	d508      	bpl.n	800ca64 <_printf_i+0x14c>
 800ca52:	6923      	ldr	r3, [r4, #16]
 800ca54:	6861      	ldr	r1, [r4, #4]
 800ca56:	4299      	cmp	r1, r3
 800ca58:	bfde      	ittt	le
 800ca5a:	2330      	movle	r3, #48	; 0x30
 800ca5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca60:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ca64:	1b52      	subs	r2, r2, r5
 800ca66:	6122      	str	r2, [r4, #16]
 800ca68:	f8cd a000 	str.w	sl, [sp]
 800ca6c:	464b      	mov	r3, r9
 800ca6e:	aa03      	add	r2, sp, #12
 800ca70:	4621      	mov	r1, r4
 800ca72:	4640      	mov	r0, r8
 800ca74:	f7ff fee2 	bl	800c83c <_printf_common>
 800ca78:	3001      	adds	r0, #1
 800ca7a:	d14c      	bne.n	800cb16 <_printf_i+0x1fe>
 800ca7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca80:	b004      	add	sp, #16
 800ca82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca86:	4835      	ldr	r0, [pc, #212]	; (800cb5c <_printf_i+0x244>)
 800ca88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ca8c:	6829      	ldr	r1, [r5, #0]
 800ca8e:	6823      	ldr	r3, [r4, #0]
 800ca90:	f851 6b04 	ldr.w	r6, [r1], #4
 800ca94:	6029      	str	r1, [r5, #0]
 800ca96:	061d      	lsls	r5, r3, #24
 800ca98:	d514      	bpl.n	800cac4 <_printf_i+0x1ac>
 800ca9a:	07df      	lsls	r7, r3, #31
 800ca9c:	bf44      	itt	mi
 800ca9e:	f043 0320 	orrmi.w	r3, r3, #32
 800caa2:	6023      	strmi	r3, [r4, #0]
 800caa4:	b91e      	cbnz	r6, 800caae <_printf_i+0x196>
 800caa6:	6823      	ldr	r3, [r4, #0]
 800caa8:	f023 0320 	bic.w	r3, r3, #32
 800caac:	6023      	str	r3, [r4, #0]
 800caae:	2310      	movs	r3, #16
 800cab0:	e7b0      	b.n	800ca14 <_printf_i+0xfc>
 800cab2:	6823      	ldr	r3, [r4, #0]
 800cab4:	f043 0320 	orr.w	r3, r3, #32
 800cab8:	6023      	str	r3, [r4, #0]
 800caba:	2378      	movs	r3, #120	; 0x78
 800cabc:	4828      	ldr	r0, [pc, #160]	; (800cb60 <_printf_i+0x248>)
 800cabe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cac2:	e7e3      	b.n	800ca8c <_printf_i+0x174>
 800cac4:	0659      	lsls	r1, r3, #25
 800cac6:	bf48      	it	mi
 800cac8:	b2b6      	uxthmi	r6, r6
 800caca:	e7e6      	b.n	800ca9a <_printf_i+0x182>
 800cacc:	4615      	mov	r5, r2
 800cace:	e7bb      	b.n	800ca48 <_printf_i+0x130>
 800cad0:	682b      	ldr	r3, [r5, #0]
 800cad2:	6826      	ldr	r6, [r4, #0]
 800cad4:	6961      	ldr	r1, [r4, #20]
 800cad6:	1d18      	adds	r0, r3, #4
 800cad8:	6028      	str	r0, [r5, #0]
 800cada:	0635      	lsls	r5, r6, #24
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	d501      	bpl.n	800cae4 <_printf_i+0x1cc>
 800cae0:	6019      	str	r1, [r3, #0]
 800cae2:	e002      	b.n	800caea <_printf_i+0x1d2>
 800cae4:	0670      	lsls	r0, r6, #25
 800cae6:	d5fb      	bpl.n	800cae0 <_printf_i+0x1c8>
 800cae8:	8019      	strh	r1, [r3, #0]
 800caea:	2300      	movs	r3, #0
 800caec:	6123      	str	r3, [r4, #16]
 800caee:	4615      	mov	r5, r2
 800caf0:	e7ba      	b.n	800ca68 <_printf_i+0x150>
 800caf2:	682b      	ldr	r3, [r5, #0]
 800caf4:	1d1a      	adds	r2, r3, #4
 800caf6:	602a      	str	r2, [r5, #0]
 800caf8:	681d      	ldr	r5, [r3, #0]
 800cafa:	6862      	ldr	r2, [r4, #4]
 800cafc:	2100      	movs	r1, #0
 800cafe:	4628      	mov	r0, r5
 800cb00:	f7f3 fb6e 	bl	80001e0 <memchr>
 800cb04:	b108      	cbz	r0, 800cb0a <_printf_i+0x1f2>
 800cb06:	1b40      	subs	r0, r0, r5
 800cb08:	6060      	str	r0, [r4, #4]
 800cb0a:	6863      	ldr	r3, [r4, #4]
 800cb0c:	6123      	str	r3, [r4, #16]
 800cb0e:	2300      	movs	r3, #0
 800cb10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb14:	e7a8      	b.n	800ca68 <_printf_i+0x150>
 800cb16:	6923      	ldr	r3, [r4, #16]
 800cb18:	462a      	mov	r2, r5
 800cb1a:	4649      	mov	r1, r9
 800cb1c:	4640      	mov	r0, r8
 800cb1e:	47d0      	blx	sl
 800cb20:	3001      	adds	r0, #1
 800cb22:	d0ab      	beq.n	800ca7c <_printf_i+0x164>
 800cb24:	6823      	ldr	r3, [r4, #0]
 800cb26:	079b      	lsls	r3, r3, #30
 800cb28:	d413      	bmi.n	800cb52 <_printf_i+0x23a>
 800cb2a:	68e0      	ldr	r0, [r4, #12]
 800cb2c:	9b03      	ldr	r3, [sp, #12]
 800cb2e:	4298      	cmp	r0, r3
 800cb30:	bfb8      	it	lt
 800cb32:	4618      	movlt	r0, r3
 800cb34:	e7a4      	b.n	800ca80 <_printf_i+0x168>
 800cb36:	2301      	movs	r3, #1
 800cb38:	4632      	mov	r2, r6
 800cb3a:	4649      	mov	r1, r9
 800cb3c:	4640      	mov	r0, r8
 800cb3e:	47d0      	blx	sl
 800cb40:	3001      	adds	r0, #1
 800cb42:	d09b      	beq.n	800ca7c <_printf_i+0x164>
 800cb44:	3501      	adds	r5, #1
 800cb46:	68e3      	ldr	r3, [r4, #12]
 800cb48:	9903      	ldr	r1, [sp, #12]
 800cb4a:	1a5b      	subs	r3, r3, r1
 800cb4c:	42ab      	cmp	r3, r5
 800cb4e:	dcf2      	bgt.n	800cb36 <_printf_i+0x21e>
 800cb50:	e7eb      	b.n	800cb2a <_printf_i+0x212>
 800cb52:	2500      	movs	r5, #0
 800cb54:	f104 0619 	add.w	r6, r4, #25
 800cb58:	e7f5      	b.n	800cb46 <_printf_i+0x22e>
 800cb5a:	bf00      	nop
 800cb5c:	0800d249 	.word	0x0800d249
 800cb60:	0800d25a 	.word	0x0800d25a

0800cb64 <_read_r>:
 800cb64:	b538      	push	{r3, r4, r5, lr}
 800cb66:	4d07      	ldr	r5, [pc, #28]	; (800cb84 <_read_r+0x20>)
 800cb68:	4604      	mov	r4, r0
 800cb6a:	4608      	mov	r0, r1
 800cb6c:	4611      	mov	r1, r2
 800cb6e:	2200      	movs	r2, #0
 800cb70:	602a      	str	r2, [r5, #0]
 800cb72:	461a      	mov	r2, r3
 800cb74:	f7f5 f948 	bl	8001e08 <_read>
 800cb78:	1c43      	adds	r3, r0, #1
 800cb7a:	d102      	bne.n	800cb82 <_read_r+0x1e>
 800cb7c:	682b      	ldr	r3, [r5, #0]
 800cb7e:	b103      	cbz	r3, 800cb82 <_read_r+0x1e>
 800cb80:	6023      	str	r3, [r4, #0]
 800cb82:	bd38      	pop	{r3, r4, r5, pc}
 800cb84:	20002b40 	.word	0x20002b40

0800cb88 <_fstat_r>:
 800cb88:	b538      	push	{r3, r4, r5, lr}
 800cb8a:	4d07      	ldr	r5, [pc, #28]	; (800cba8 <_fstat_r+0x20>)
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	4604      	mov	r4, r0
 800cb90:	4608      	mov	r0, r1
 800cb92:	4611      	mov	r1, r2
 800cb94:	602b      	str	r3, [r5, #0]
 800cb96:	f7f5 f960 	bl	8001e5a <_fstat>
 800cb9a:	1c43      	adds	r3, r0, #1
 800cb9c:	d102      	bne.n	800cba4 <_fstat_r+0x1c>
 800cb9e:	682b      	ldr	r3, [r5, #0]
 800cba0:	b103      	cbz	r3, 800cba4 <_fstat_r+0x1c>
 800cba2:	6023      	str	r3, [r4, #0]
 800cba4:	bd38      	pop	{r3, r4, r5, pc}
 800cba6:	bf00      	nop
 800cba8:	20002b40 	.word	0x20002b40

0800cbac <_isatty_r>:
 800cbac:	b538      	push	{r3, r4, r5, lr}
 800cbae:	4d06      	ldr	r5, [pc, #24]	; (800cbc8 <_isatty_r+0x1c>)
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	4604      	mov	r4, r0
 800cbb4:	4608      	mov	r0, r1
 800cbb6:	602b      	str	r3, [r5, #0]
 800cbb8:	f7f5 f95f 	bl	8001e7a <_isatty>
 800cbbc:	1c43      	adds	r3, r0, #1
 800cbbe:	d102      	bne.n	800cbc6 <_isatty_r+0x1a>
 800cbc0:	682b      	ldr	r3, [r5, #0]
 800cbc2:	b103      	cbz	r3, 800cbc6 <_isatty_r+0x1a>
 800cbc4:	6023      	str	r3, [r4, #0]
 800cbc6:	bd38      	pop	{r3, r4, r5, pc}
 800cbc8:	20002b40 	.word	0x20002b40

0800cbcc <memmove>:
 800cbcc:	4288      	cmp	r0, r1
 800cbce:	b510      	push	{r4, lr}
 800cbd0:	eb01 0402 	add.w	r4, r1, r2
 800cbd4:	d902      	bls.n	800cbdc <memmove+0x10>
 800cbd6:	4284      	cmp	r4, r0
 800cbd8:	4623      	mov	r3, r4
 800cbda:	d807      	bhi.n	800cbec <memmove+0x20>
 800cbdc:	1e43      	subs	r3, r0, #1
 800cbde:	42a1      	cmp	r1, r4
 800cbe0:	d008      	beq.n	800cbf4 <memmove+0x28>
 800cbe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbe6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cbea:	e7f8      	b.n	800cbde <memmove+0x12>
 800cbec:	4402      	add	r2, r0
 800cbee:	4601      	mov	r1, r0
 800cbf0:	428a      	cmp	r2, r1
 800cbf2:	d100      	bne.n	800cbf6 <memmove+0x2a>
 800cbf4:	bd10      	pop	{r4, pc}
 800cbf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cbfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cbfe:	e7f7      	b.n	800cbf0 <memmove+0x24>

0800cc00 <_realloc_r>:
 800cc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc04:	4680      	mov	r8, r0
 800cc06:	4614      	mov	r4, r2
 800cc08:	460e      	mov	r6, r1
 800cc0a:	b921      	cbnz	r1, 800cc16 <_realloc_r+0x16>
 800cc0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc10:	4611      	mov	r1, r2
 800cc12:	f7fe bef5 	b.w	800ba00 <_malloc_r>
 800cc16:	b92a      	cbnz	r2, 800cc24 <_realloc_r+0x24>
 800cc18:	f7ff fb0e 	bl	800c238 <_free_r>
 800cc1c:	4625      	mov	r5, r4
 800cc1e:	4628      	mov	r0, r5
 800cc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc24:	f000 f81b 	bl	800cc5e <_malloc_usable_size_r>
 800cc28:	4284      	cmp	r4, r0
 800cc2a:	4607      	mov	r7, r0
 800cc2c:	d802      	bhi.n	800cc34 <_realloc_r+0x34>
 800cc2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cc32:	d812      	bhi.n	800cc5a <_realloc_r+0x5a>
 800cc34:	4621      	mov	r1, r4
 800cc36:	4640      	mov	r0, r8
 800cc38:	f7fe fee2 	bl	800ba00 <_malloc_r>
 800cc3c:	4605      	mov	r5, r0
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	d0ed      	beq.n	800cc1e <_realloc_r+0x1e>
 800cc42:	42bc      	cmp	r4, r7
 800cc44:	4622      	mov	r2, r4
 800cc46:	4631      	mov	r1, r6
 800cc48:	bf28      	it	cs
 800cc4a:	463a      	movcs	r2, r7
 800cc4c:	f7fe fea1 	bl	800b992 <memcpy>
 800cc50:	4631      	mov	r1, r6
 800cc52:	4640      	mov	r0, r8
 800cc54:	f7ff faf0 	bl	800c238 <_free_r>
 800cc58:	e7e1      	b.n	800cc1e <_realloc_r+0x1e>
 800cc5a:	4635      	mov	r5, r6
 800cc5c:	e7df      	b.n	800cc1e <_realloc_r+0x1e>

0800cc5e <_malloc_usable_size_r>:
 800cc5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc62:	1f18      	subs	r0, r3, #4
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	bfbc      	itt	lt
 800cc68:	580b      	ldrlt	r3, [r1, r0]
 800cc6a:	18c0      	addlt	r0, r0, r3
 800cc6c:	4770      	bx	lr
	...

0800cc70 <_init>:
 800cc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc72:	bf00      	nop
 800cc74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc76:	bc08      	pop	{r3}
 800cc78:	469e      	mov	lr, r3
 800cc7a:	4770      	bx	lr

0800cc7c <_fini>:
 800cc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc7e:	bf00      	nop
 800cc80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc82:	bc08      	pop	{r3}
 800cc84:	469e      	mov	lr, r3
 800cc86:	4770      	bx	lr
