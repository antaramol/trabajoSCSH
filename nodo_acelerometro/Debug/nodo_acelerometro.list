
nodo_acelerometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013834  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001dc4  080139c4  080139c4  000239c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015788  08015788  000300b8  2**0
                  CONTENTS
  4 .ARM          00000008  08015788  08015788  00025788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015790  08015790  000300b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015790  08015790  00025790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015794  08015794  00025794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08015798  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e78  200000b8  08015850  000300b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f30  08015850  00034f30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039600  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006e0f  00000000  00000000  000696e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002fc0  00000000  00000000  000704f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002d28  00000000  00000000  000734b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000098ec  00000000  00000000  000761e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003492e  00000000  00000000  0007facc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117d1a  00000000  00000000  000b43fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cc114  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d970  00000000  00000000  001cc164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080139ac 	.word	0x080139ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	080139ac 	.word	0x080139ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	2b00      	cmp	r3, #0
 800059a:	d013      	beq.n	80005c4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00b      	beq.n	80005c4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005ac:	e000      	b.n	80005b0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0f9      	beq.n	80005ae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c4:	687b      	ldr	r3, [r7, #4]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <configureTimerForRunTimeStats>:
void wifiStartTask_func(void *argument);
void temp_sub_func(void *argument);

/* USER CODE BEGIN PFP */
volatile unsigned long ulHighFrequencyTimerTicks;
void configureTimerForRunTimeStats(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	ulHighFrequencyTimerTicks = 0;
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <configureTimerForRunTimeStats+0x14>)
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7);
 80005de:	4803      	ldr	r0, [pc, #12]	; (80005ec <configureTimerForRunTimeStats+0x18>)
 80005e0:	f007 f894 	bl	800770c <HAL_TIM_Base_Start_IT>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200007cc 	.word	0x200007cc
 80005ec:	20000224 	.word	0x20000224

080005f0 <getRunTimeCounterValue>:
unsigned long getRunTimeCounterValue(void) {
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <getRunTimeCounterValue+0x14>)
 80005f6:	681b      	ldr	r3, [r3, #0]

}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	200007cc 	.word	0x200007cc

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f002 f8e9 	bl	80027e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f8c8 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 fb24 	bl	8000c60 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000618:	f000 f928 	bl	800086c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800061c:	f000 f95e 	bl	80008dc <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000620:	f000 f99a 	bl	8000958 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000624:	f000 fa1a 	bl	8000a5c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000628:	f000 fa8c 	bl	8000b44 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800062c:	f000 faba 	bl	8000ba4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000630:	f000 fae8 	bl	8000c04 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8000634:	f000 fa50 	bl	8000ad8 <MX_TIM7_Init>
  MX_RTC_Init();
 8000638:	f000 f9b4 	bl	80009a4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  status_acc = BSP_ACCELERO_Init_INT();
 800063c:	f000 fcce 	bl	8000fdc <BSP_ACCELERO_Init_INT>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	4b35      	ldr	r3, [pc, #212]	; (800071c <main+0x114>)
 8000646:	701a      	strb	r2, [r3, #0]
  if (status_acc == ACCELERO_OK){
 8000648:	4b34      	ldr	r3, [pc, #208]	; (800071c <main+0x114>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d102      	bne.n	8000656 <main+0x4e>
	  printf("Acelerometro inicializado\r\n");
 8000650:	4833      	ldr	r0, [pc, #204]	; (8000720 <main+0x118>)
 8000652:	f012 fb7f 	bl	8012d54 <puts>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000656:	f00e fb8b 	bl	800ed70 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of print_queue */
  print_queueHandle = osMessageQueueNew (2, sizeof(uintptr_t), &print_queue_attributes);
 800065a:	4a32      	ldr	r2, [pc, #200]	; (8000724 <main+0x11c>)
 800065c:	2104      	movs	r1, #4
 800065e:	2002      	movs	r0, #2
 8000660:	f00e fd4c 	bl	800f0fc <osMessageQueueNew>
 8000664:	4603      	mov	r3, r0
 8000666:	4a30      	ldr	r2, [pc, #192]	; (8000728 <main+0x120>)
 8000668:	6013      	str	r3, [r2, #0]

  /* creation of receive_queue */
  receive_queueHandle = osMessageQueueNew (3, sizeof(uint8_t), &receive_queue_attributes);
 800066a:	4a30      	ldr	r2, [pc, #192]	; (800072c <main+0x124>)
 800066c:	2101      	movs	r1, #1
 800066e:	2003      	movs	r0, #3
 8000670:	f00e fd44 	bl	800f0fc <osMessageQueueNew>
 8000674:	4603      	mov	r3, r0
 8000676:	4a2e      	ldr	r2, [pc, #184]	; (8000730 <main+0x128>)
 8000678:	6013      	str	r3, [r2, #0]

  /* creation of publish_queue */
  publish_queueHandle = osMessageQueueNew (5, sizeof(uintptr_t), &publish_queue_attributes);
 800067a:	4a2e      	ldr	r2, [pc, #184]	; (8000734 <main+0x12c>)
 800067c:	2104      	movs	r1, #4
 800067e:	2005      	movs	r0, #5
 8000680:	f00e fd3c 	bl	800f0fc <osMessageQueueNew>
 8000684:	4603      	mov	r3, r0
 8000686:	4a2c      	ldr	r2, [pc, #176]	; (8000738 <main+0x130>)
 8000688:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of RTC_set */
  RTC_setHandle = osThreadNew(RTC_set_func, NULL, &RTC_set_attributes);
 800068a:	4a2c      	ldr	r2, [pc, #176]	; (800073c <main+0x134>)
 800068c:	2100      	movs	r1, #0
 800068e:	482c      	ldr	r0, [pc, #176]	; (8000740 <main+0x138>)
 8000690:	f00e fbb8 	bl	800ee04 <osThreadNew>
 8000694:	4603      	mov	r3, r0
 8000696:	4a2b      	ldr	r2, [pc, #172]	; (8000744 <main+0x13c>)
 8000698:	6013      	str	r3, [r2, #0]

  /* creation of readAccel */
  readAccelHandle = osThreadNew(readAccel_func, NULL, &readAccel_attributes);
 800069a:	4a2b      	ldr	r2, [pc, #172]	; (8000748 <main+0x140>)
 800069c:	2100      	movs	r1, #0
 800069e:	482b      	ldr	r0, [pc, #172]	; (800074c <main+0x144>)
 80006a0:	f00e fbb0 	bl	800ee04 <osThreadNew>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a2a      	ldr	r2, [pc, #168]	; (8000750 <main+0x148>)
 80006a8:	6013      	str	r3, [r2, #0]

  /* creation of printTask */
  printTaskHandle = osThreadNew(printTask_func, NULL, &printTask_attributes);
 80006aa:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <main+0x14c>)
 80006ac:	2100      	movs	r1, #0
 80006ae:	482a      	ldr	r0, [pc, #168]	; (8000758 <main+0x150>)
 80006b0:	f00e fba8 	bl	800ee04 <osThreadNew>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a29      	ldr	r2, [pc, #164]	; (800075c <main+0x154>)
 80006b8:	6013      	str	r3, [r2, #0]

  /* creation of tarea_UART */
  tarea_UARTHandle = osThreadNew(tarea_UART_func, NULL, &tarea_UART_attributes);
 80006ba:	4a29      	ldr	r2, [pc, #164]	; (8000760 <main+0x158>)
 80006bc:	2100      	movs	r1, #0
 80006be:	4829      	ldr	r0, [pc, #164]	; (8000764 <main+0x15c>)
 80006c0:	f00e fba0 	bl	800ee04 <osThreadNew>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4a28      	ldr	r2, [pc, #160]	; (8000768 <main+0x160>)
 80006c8:	6013      	str	r3, [r2, #0]

  /* creation of temporizador */
  temporizadorHandle = osThreadNew(temporizador_func, NULL, &temporizador_attributes);
 80006ca:	4a28      	ldr	r2, [pc, #160]	; (800076c <main+0x164>)
 80006cc:	2100      	movs	r1, #0
 80006ce:	4828      	ldr	r0, [pc, #160]	; (8000770 <main+0x168>)
 80006d0:	f00e fb98 	bl	800ee04 <osThreadNew>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a27      	ldr	r2, [pc, #156]	; (8000774 <main+0x16c>)
 80006d8:	6013      	str	r3, [r2, #0]

  /* creation of sendMQTT */
  sendMQTTHandle = osThreadNew(sendMQTT_func, NULL, &sendMQTT_attributes);
 80006da:	4a27      	ldr	r2, [pc, #156]	; (8000778 <main+0x170>)
 80006dc:	2100      	movs	r1, #0
 80006de:	4827      	ldr	r0, [pc, #156]	; (800077c <main+0x174>)
 80006e0:	f00e fb90 	bl	800ee04 <osThreadNew>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a26      	ldr	r2, [pc, #152]	; (8000780 <main+0x178>)
 80006e8:	6013      	str	r3, [r2, #0]

  /* creation of wifiStartTask */
  wifiStartTaskHandle = osThreadNew(wifiStartTask_func, NULL, &wifiStartTask_attributes);
 80006ea:	4a26      	ldr	r2, [pc, #152]	; (8000784 <main+0x17c>)
 80006ec:	2100      	movs	r1, #0
 80006ee:	4826      	ldr	r0, [pc, #152]	; (8000788 <main+0x180>)
 80006f0:	f00e fb88 	bl	800ee04 <osThreadNew>
 80006f4:	4603      	mov	r3, r0
 80006f6:	4a25      	ldr	r2, [pc, #148]	; (800078c <main+0x184>)
 80006f8:	6013      	str	r3, [r2, #0]

  /* creation of temp_sub */
  temp_subHandle = osThreadNew(temp_sub_func, NULL, &temp_sub_attributes);
 80006fa:	4a25      	ldr	r2, [pc, #148]	; (8000790 <main+0x188>)
 80006fc:	2100      	movs	r1, #0
 80006fe:	4825      	ldr	r0, [pc, #148]	; (8000794 <main+0x18c>)
 8000700:	f00e fb80 	bl	800ee04 <osThreadNew>
 8000704:	4603      	mov	r3, r0
 8000706:	4a24      	ldr	r2, [pc, #144]	; (8000798 <main+0x190>)
 8000708:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_UART_Receive_IT(&huart1,&rec_data,1);
 800070a:	2201      	movs	r2, #1
 800070c:	4923      	ldr	r1, [pc, #140]	; (800079c <main+0x194>)
 800070e:	4824      	ldr	r0, [pc, #144]	; (80007a0 <main+0x198>)
 8000710:	f007 fbd6 	bl	8007ec0 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000714:	f00e fb50 	bl	800edb8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000718:	e7fe      	b.n	8000718 <main+0x110>
 800071a:	bf00      	nop
 800071c:	200007c4 	.word	0x200007c4
 8000720:	08013abc 	.word	0x08013abc
 8000724:	080152d4 	.word	0x080152d4
 8000728:	200007a0 	.word	0x200007a0
 800072c:	080152ec 	.word	0x080152ec
 8000730:	200007a4 	.word	0x200007a4
 8000734:	08015304 	.word	0x08015304
 8000738:	200007a8 	.word	0x200007a8
 800073c:	080151b4 	.word	0x080151b4
 8000740:	0800123d 	.word	0x0800123d
 8000744:	20000780 	.word	0x20000780
 8000748:	080151d8 	.word	0x080151d8
 800074c:	08001559 	.word	0x08001559
 8000750:	20000784 	.word	0x20000784
 8000754:	080151fc 	.word	0x080151fc
 8000758:	08001719 	.word	0x08001719
 800075c:	20000788 	.word	0x20000788
 8000760:	08015220 	.word	0x08015220
 8000764:	08001781 	.word	0x08001781
 8000768:	2000078c 	.word	0x2000078c
 800076c:	08015244 	.word	0x08015244
 8000770:	080017d1 	.word	0x080017d1
 8000774:	20000790 	.word	0x20000790
 8000778:	08015268 	.word	0x08015268
 800077c:	0800180d 	.word	0x0800180d
 8000780:	20000794 	.word	0x20000794
 8000784:	0801528c 	.word	0x0801528c
 8000788:	08001929 	.word	0x08001929
 800078c:	20000798 	.word	0x20000798
 8000790:	080152b0 	.word	0x080152b0
 8000794:	08001949 	.word	0x08001949
 8000798:	2000079c 	.word	0x2000079c
 800079c:	200007d0 	.word	0x200007d0
 80007a0:	20000270 	.word	0x20000270

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b096      	sub	sp, #88	; 0x58
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	2244      	movs	r2, #68	; 0x44
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f011 febd 	bl	8012532 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	463b      	mov	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007ca:	f003 fcf3 	bl	80041b4 <HAL_PWREx_ControlVoltageScaling>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007d4:	f001 f8e2 	bl	800199c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007d8:	f003 fcce 	bl	8004178 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007dc:	4b22      	ldr	r3, [pc, #136]	; (8000868 <SystemClock_Config+0xc4>)
 80007de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007e2:	4a21      	ldr	r2, [pc, #132]	; (8000868 <SystemClock_Config+0xc4>)
 80007e4:	f023 0318 	bic.w	r3, r3, #24
 80007e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80007ec:	231c      	movs	r3, #28
 80007ee:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007f0:	2301      	movs	r3, #1
 80007f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007f4:	2301      	movs	r3, #1
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007f8:	2301      	movs	r3, #1
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000800:	2360      	movs	r3, #96	; 0x60
 8000802:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000804:	2302      	movs	r3, #2
 8000806:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000808:	2301      	movs	r3, #1
 800080a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800080c:	2301      	movs	r3, #1
 800080e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000810:	2328      	movs	r3, #40	; 0x28
 8000812:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000814:	2307      	movs	r3, #7
 8000816:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000818:	2302      	movs	r3, #2
 800081a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800081c:	2302      	movs	r3, #2
 800081e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4618      	mov	r0, r3
 8000826:	f003 fde7 	bl	80043f8 <HAL_RCC_OscConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000830:	f001 f8b4 	bl	800199c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000834:	230f      	movs	r3, #15
 8000836:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000838:	2303      	movs	r3, #3
 800083a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000848:	463b      	mov	r3, r7
 800084a:	2104      	movs	r1, #4
 800084c:	4618      	mov	r0, r3
 800084e:	f004 f9bb 	bl	8004bc8 <HAL_RCC_ClockConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000858:	f001 f8a0 	bl	800199c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800085c:	f004 fed6 	bl	800560c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000860:	bf00      	nop
 8000862:	3758      	adds	r7, #88	; 0x58
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40021000 	.word	0x40021000

0800086c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000870:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 8000872:	4a19      	ldr	r2, [pc, #100]	; (80008d8 <MX_DFSDM1_Init+0x6c>)
 8000874:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 8000878:	2201      	movs	r2, #1
 800087a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800087c:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 8000884:	2202      	movs	r2, #2
 8000886:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 8000896:	f44f 7280 	mov.w	r2, #256	; 0x100
 800089a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800089c:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 80008a4:	2204      	movs	r2, #4
 80008a6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 80008bc:	2200      	movs	r2, #0
 80008be:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 80008c2:	f002 f8ff 	bl	8002ac4 <HAL_DFSDM_ChannelInit>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80008cc:	f001 f866 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200000d4 	.word	0x200000d4
 80008d8:	40016020 	.word	0x40016020

080008dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <MX_I2C2_Init+0x74>)
 80008e2:	4a1c      	ldr	r2, [pc, #112]	; (8000954 <MX_I2C2_Init+0x78>)
 80008e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_I2C2_Init+0x74>)
 80008e8:	f640 6214 	movw	r2, #3604	; 0xe14
 80008ec:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_I2C2_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008f4:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_I2C2_Init+0x74>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <MX_I2C2_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_I2C2_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000906:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_I2C2_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800090c:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_I2C2_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_I2C2_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000918:	480d      	ldr	r0, [pc, #52]	; (8000950 <MX_I2C2_Init+0x74>)
 800091a:	f002 fd45 	bl	80033a8 <HAL_I2C_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000924:	f001 f83a 	bl	800199c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000928:	2100      	movs	r1, #0
 800092a:	4809      	ldr	r0, [pc, #36]	; (8000950 <MX_I2C2_Init+0x74>)
 800092c:	f003 fa44 	bl	8003db8 <HAL_I2CEx_ConfigAnalogFilter>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000936:	f001 f831 	bl	800199c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_I2C2_Init+0x74>)
 800093e:	f003 fa86 	bl	8003e4e <HAL_I2CEx_ConfigDigitalFilter>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000948:	f001 f828 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	2000010c 	.word	0x2000010c
 8000954:	40005800 	.word	0x40005800

08000958 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_QUADSPI_Init+0x44>)
 800095e:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <MX_QUADSPI_Init+0x48>)
 8000960:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_QUADSPI_Init+0x44>)
 8000964:	2202      	movs	r2, #2
 8000966:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_QUADSPI_Init+0x44>)
 800096a:	2204      	movs	r2, #4
 800096c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_QUADSPI_Init+0x44>)
 8000970:	2210      	movs	r2, #16
 8000972:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_QUADSPI_Init+0x44>)
 8000976:	2217      	movs	r2, #23
 8000978:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_QUADSPI_Init+0x44>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_QUADSPI_Init+0x44>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_QUADSPI_Init+0x44>)
 8000988:	f003 fc7a 	bl	8004280 <HAL_QSPI_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000992:	f001 f803 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000158 	.word	0x20000158
 80009a0:	a0001000 	.word	0xa0001000

080009a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80009b8:	2300      	movs	r3, #0
 80009ba:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009bc:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009be:	4a26      	ldr	r2, [pc, #152]	; (8000a58 <MX_RTC_Init+0xb4>)
 80009c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009c2:	4b24      	ldr	r3, [pc, #144]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009c8:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009ca:	227f      	movs	r2, #127	; 0x7f
 80009cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009ce:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009d0:	22ff      	movs	r2, #255	; 0xff
 80009d2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009d4:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009da:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009e0:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009e6:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009ec:	4819      	ldr	r0, [pc, #100]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009ee:	f004 ffef 	bl	80059d0 <HAL_RTC_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80009f8:	f000 ffd0 	bl	800199c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 80009fc:	230d      	movs	r3, #13
 80009fe:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2200      	movs	r2, #0
 8000a14:	4619      	mov	r1, r3
 8000a16:	480f      	ldr	r0, [pc, #60]	; (8000a54 <MX_RTC_Init+0xb0>)
 8000a18:	f005 f855 	bl	8005ac6 <HAL_RTC_SetTime>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000a22:	f000 ffbb 	bl	800199c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a26:	2301      	movs	r3, #1
 8000a28:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000a36:	463b      	mov	r3, r7
 8000a38:	2200      	movs	r2, #0
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_RTC_Init+0xb0>)
 8000a3e:	f005 f93b 	bl	8005cb8 <HAL_RTC_SetDate>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000a48:	f000 ffa8 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	2000019c 	.word	0x2000019c
 8000a58:	40002800 	.word	0x40002800

08000a5c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a60:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000a62:	4a1c      	ldr	r2, [pc, #112]	; (8000ad4 <MX_SPI3_Init+0x78>)
 8000a64:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a66:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000a68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a6c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000a76:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a7a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a82:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000a8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a8e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000aaa:	2207      	movs	r2, #7
 8000aac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000ab6:	2208      	movs	r2, #8
 8000ab8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000abc:	f005 faa2 	bl	8006004 <HAL_SPI_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000ac6:	f000 ff69 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200001c0 	.word	0x200001c0
 8000ad4:	40003c00 	.word	0x40003c00

08000ad8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <MX_TIM7_Init+0x64>)
 8000aea:	4a15      	ldr	r2, [pc, #84]	; (8000b40 <MX_TIM7_Init+0x68>)
 8000aec:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <MX_TIM7_Init+0x64>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_TIM7_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 799;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <MX_TIM7_Init+0x64>)
 8000afc:	f240 321f 	movw	r2, #799	; 0x31f
 8000b00:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_TIM7_Init+0x64>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000b08:	480c      	ldr	r0, [pc, #48]	; (8000b3c <MX_TIM7_Init+0x64>)
 8000b0a:	f006 fda8 	bl	800765e <HAL_TIM_Base_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000b14:	f000 ff42 	bl	800199c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_TIM7_Init+0x64>)
 8000b26:	f007 f843 	bl	8007bb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000b30:	f000 ff34 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000224 	.word	0x20000224
 8000b40:	40001400 	.word	0x40001400

08000b44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b4a:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <MX_USART1_UART_Init+0x5c>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b88:	f007 f8b8 	bl	8007cfc <HAL_UART_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b92:	f000 ff03 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000270 	.word	0x20000270
 8000ba0:	40013800 	.word	0x40013800

08000ba4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000baa:	4a15      	ldr	r2, [pc, #84]	; (8000c00 <MX_USART3_UART_Init+0x5c>)
 8000bac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000be8:	f007 f888 	bl	8007cfc <HAL_UART_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000bf2:	f000 fed3 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200002f4 	.word	0x200002f4
 8000c00:	40004800 	.word	0x40004800

08000c04 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c12:	2206      	movs	r2, #6
 8000c14:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c18:	2202      	movs	r2, #2
 8000c1a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c1e:	2202      	movs	r2, #2
 8000c20:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c48:	f003 f94d 	bl	8003ee6 <HAL_PCD_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c52:	f000 fea3 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000378 	.word	0x20000378

08000c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c76:	4bbb      	ldr	r3, [pc, #748]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	4aba      	ldr	r2, [pc, #744]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000c7c:	f043 0310 	orr.w	r3, r3, #16
 8000c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c82:	4bb8      	ldr	r3, [pc, #736]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	f003 0310 	and.w	r3, r3, #16
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	4bb5      	ldr	r3, [pc, #724]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	4ab4      	ldr	r2, [pc, #720]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9a:	4bb2      	ldr	r3, [pc, #712]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	4baf      	ldr	r3, [pc, #700]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	4aae      	ldr	r2, [pc, #696]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb2:	4bac      	ldr	r3, [pc, #688]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	4ba9      	ldr	r3, [pc, #676]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	4aa8      	ldr	r2, [pc, #672]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cca:	4ba6      	ldr	r3, [pc, #664]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd6:	4ba3      	ldr	r3, [pc, #652]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	4aa2      	ldr	r2, [pc, #648]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000cdc:	f043 0308 	orr.w	r3, r3, #8
 8000ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce2:	4ba0      	ldr	r3, [pc, #640]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f003 0308 	and.w	r3, r3, #8
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000cf4:	489c      	ldr	r0, [pc, #624]	; (8000f68 <MX_GPIO_Init+0x308>)
 8000cf6:	f002 fb27 	bl	8003348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LED1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f248 1124 	movw	r1, #33060	; 0x8124
 8000d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d04:	f002 fb20 	bl	8003348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000d0e:	4897      	ldr	r0, [pc, #604]	; (8000f6c <MX_GPIO_Init+0x30c>)
 8000d10:	f002 fb1a 	bl	8003348 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	f241 0181 	movw	r1, #4225	; 0x1081
 8000d1a:	4895      	ldr	r0, [pc, #596]	; (8000f70 <MX_GPIO_Init+0x310>)
 8000d1c:	f002 fb14 	bl	8003348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d26:	4892      	ldr	r0, [pc, #584]	; (8000f70 <MX_GPIO_Init+0x310>)
 8000d28:	f002 fb0e 	bl	8003348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000d32:	4890      	ldr	r0, [pc, #576]	; (8000f74 <MX_GPIO_Init+0x314>)
 8000d34:	f002 fb08 	bl	8003348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	488a      	ldr	r0, [pc, #552]	; (8000f68 <MX_GPIO_Init+0x308>)
 8000d3e:	f002 fb03 	bl	8003348 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000d42:	f240 1315 	movw	r3, #277	; 0x115
 8000d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4883      	ldr	r0, [pc, #524]	; (8000f68 <MX_GPIO_Init+0x308>)
 8000d5c:	f002 f83e 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000d60:	236a      	movs	r3, #106	; 0x6a
 8000d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d64:	4b84      	ldr	r3, [pc, #528]	; (8000f78 <MX_GPIO_Init+0x318>)
 8000d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	487d      	ldr	r0, [pc, #500]	; (8000f68 <MX_GPIO_Init+0x308>)
 8000d74:	f002 f832 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : BOTON_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BOTON_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000d78:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d7e:	4b7e      	ldr	r3, [pc, #504]	; (8000f78 <MX_GPIO_Init+0x318>)
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4879      	ldr	r0, [pc, #484]	; (8000f74 <MX_GPIO_Init+0x314>)
 8000d8e:	f002 f825 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000d92:	233f      	movs	r3, #63	; 0x3f
 8000d94:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d96:	230b      	movs	r3, #11
 8000d98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	4873      	ldr	r0, [pc, #460]	; (8000f74 <MX_GPIO_Init+0x314>)
 8000da6:	f002 f819 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000daa:	2303      	movs	r3, #3
 8000dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000dba:	2308      	movs	r3, #8
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc8:	f002 f808 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin LED1_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|LED1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000dcc:	f248 1324 	movw	r3, #33060	; 0x8124
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de8:	f001 fff8 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000dec:	2308      	movs	r3, #8
 8000dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0a:	f001 ffe7 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000e0e:	2310      	movs	r3, #16
 8000e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e12:	230b      	movs	r3, #11
 8000e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e24:	f001 ffda 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000e28:	23c0      	movs	r3, #192	; 0xc0
 8000e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e38:	2305      	movs	r3, #5
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4619      	mov	r1, r3
 8000e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e46:	f001 ffc9 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e4e:	4b4a      	ldr	r3, [pc, #296]	; (8000f78 <MX_GPIO_Init+0x318>)
 8000e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4843      	ldr	r0, [pc, #268]	; (8000f6c <MX_GPIO_Init+0x30c>)
 8000e5e:	f001 ffbd 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000e62:	2302      	movs	r3, #2
 8000e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e66:	230b      	movs	r3, #11
 8000e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	483d      	ldr	r0, [pc, #244]	; (8000f6c <MX_GPIO_Init+0x30c>)
 8000e76:	f001 ffb1 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e7a:	f24f 0314 	movw	r3, #61460	; 0xf014
 8000e7e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	4836      	ldr	r0, [pc, #216]	; (8000f6c <MX_GPIO_Init+0x30c>)
 8000e94:	f001 ffa2 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000e98:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000e9c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e9e:	4b36      	ldr	r3, [pc, #216]	; (8000f78 <MX_GPIO_Init+0x318>)
 8000ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4830      	ldr	r0, [pc, #192]	; (8000f70 <MX_GPIO_Init+0x310>)
 8000eae:	f001 ff95 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000eb2:	f243 0381 	movw	r3, #12417	; 0x3081
 8000eb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4829      	ldr	r0, [pc, #164]	; (8000f70 <MX_GPIO_Init+0x310>)
 8000ecc:	f001 ff86 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000ed0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4822      	ldr	r0, [pc, #136]	; (8000f74 <MX_GPIO_Init+0x314>)
 8000eea:	f001 ff77 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000efe:	2305      	movs	r3, #5
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	4819      	ldr	r0, [pc, #100]	; (8000f70 <MX_GPIO_Init+0x310>)
 8000f0a:	f001 ff67 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000f0e:	2378      	movs	r3, #120	; 0x78
 8000f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f1e:	2307      	movs	r3, #7
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	4811      	ldr	r0, [pc, #68]	; (8000f70 <MX_GPIO_Init+0x310>)
 8000f2a:	f001 ff57 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000f2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f34:	2312      	movs	r3, #18
 8000f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f40:	2304      	movs	r3, #4
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4808      	ldr	r0, [pc, #32]	; (8000f6c <MX_GPIO_Init+0x30c>)
 8000f4c:	f001 ff46 	bl	8002ddc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2105      	movs	r1, #5
 8000f54:	2007      	movs	r0, #7
 8000f56:	f001 fd7d 	bl	8002a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f5a:	2007      	movs	r0, #7
 8000f5c:	f001 fd96 	bl	8002a8c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	e00b      	b.n	8000f7c <MX_GPIO_Init+0x31c>
 8000f64:	40021000 	.word	0x40021000
 8000f68:	48001000 	.word	0x48001000
 8000f6c:	48000400 	.word	0x48000400
 8000f70:	48000c00 	.word	0x48000c00
 8000f74:	48000800 	.word	0x48000800
 8000f78:	10110000 	.word	0x10110000
 8000f7c:	2105      	movs	r1, #5
 8000f7e:	2017      	movs	r0, #23
 8000f80:	f001 fd68 	bl	8002a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f84:	2017      	movs	r0, #23
 8000f86:	f001 fd81 	bl	8002a8c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2105      	movs	r1, #5
 8000f8e:	2028      	movs	r0, #40	; 0x28
 8000f90:	f001 fd60 	bl	8002a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f94:	2028      	movs	r0, #40	; 0x28
 8000f96:	f001 fd79 	bl	8002a8c <HAL_NVIC_EnableIRQ>

}
 8000f9a:	bf00      	nop
 8000f9c:	3728      	adds	r7, #40	; 0x28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop

08000fa4 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	e009      	b.n	8000fca <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1c5a      	adds	r2, r3, #1
 8000fba:	60ba      	str	r2, [r7, #8]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fae0 	bl	8000584 <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	dbf1      	blt.n	8000fb6 <_write+0x12>
	}
	return len;
 8000fd2:	687b      	ldr	r3, [r7, #4]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <BSP_ACCELERO_Init_INT>:

ACCELERO_StatusTypeDef BSP_ACCELERO_Init_INT(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
	ACCELERO_StatusTypeDef ret;
	ret = BSP_ACCELERO_Init();
 8000fe2:	f008 fb77 	bl	80096d4 <BSP_ACCELERO_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
	if (ret == ACCELERO_OK)
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d12f      	bne.n	8001050 <BSP_ACCELERO_Init_INT+0x74>
	{
		/* Initialize interruption*/
		uint8_t tmp;
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G);
 8000ff0:	210b      	movs	r1, #11
 8000ff2:	20d4      	movs	r0, #212	; 0xd4
 8000ff4:	f008 fb32 	bl	800965c <SENSOR_IO_Read>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71bb      	strb	r3, [r7, #6]
		tmp |=0b10000000;
 8000ffc:	79bb      	ldrb	r3, [r7, #6]
 8000ffe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001002:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G, tmp);
 8001004:	79bb      	ldrb	r3, [r7, #6]
 8001006:	461a      	mov	r2, r3
 8001008:	210b      	movs	r1, #11
 800100a:	20d4      	movs	r0, #212	; 0xd4
 800100c:	f008 fb0c 	bl	8009628 <SENSOR_IO_Write>
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL);
 8001010:	210d      	movs	r1, #13
 8001012:	20d4      	movs	r0, #212	; 0xd4
 8001014:	f008 fb22 	bl	800965c <SENSOR_IO_Read>
 8001018:	4603      	mov	r3, r0
 800101a:	71bb      	strb	r3, [r7, #6]
		tmp |=0b00000001;
 800101c:	79bb      	ldrb	r3, [r7, #6]
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, tmp);
 8001024:	79bb      	ldrb	r3, [r7, #6]
 8001026:	461a      	mov	r2, r3
 8001028:	210d      	movs	r1, #13
 800102a:	20d4      	movs	r0, #212	; 0xd4
 800102c:	f008 fafc 	bl	8009628 <SENSOR_IO_Write>
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG);
 8001030:	211a      	movs	r1, #26
 8001032:	20d4      	movs	r0, #212	; 0xd4
 8001034:	f008 fb12 	bl	800965c <SENSOR_IO_Read>
 8001038:	4603      	mov	r3, r0
 800103a:	71bb      	strb	r3, [r7, #6]
		tmp |=0b10000000;
 800103c:	79bb      	ldrb	r3, [r7, #6]
 800103e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001042:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG, tmp);
 8001044:	79bb      	ldrb	r3, [r7, #6]
 8001046:	461a      	mov	r2, r3
 8001048:	211a      	movs	r1, #26
 800104a:	20d4      	movs	r0, #212	; 0xd4
 800104c:	f008 faec 	bl	8009628 <SENSOR_IO_Write>
	}
	return ret;
 8001050:	79fb      	ldrb	r3, [r7, #7]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

	static osStatus_t estado;
	if (huart == &huart1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <HAL_UART_RxCpltCallback+0x3c>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d110      	bne.n	800108e <HAL_UART_RxCpltCallback+0x32>
	{
		HAL_UART_Receive_IT(&huart1,&rec_data,1);
 800106c:	2201      	movs	r2, #1
 800106e:	490b      	ldr	r1, [pc, #44]	; (800109c <HAL_UART_RxCpltCallback+0x40>)
 8001070:	4809      	ldr	r0, [pc, #36]	; (8001098 <HAL_UART_RxCpltCallback+0x3c>)
 8001072:	f006 ff25 	bl	8007ec0 <HAL_UART_Receive_IT>
		printf("Recibido: %d\r\n",rec_data);
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_UART_RxCpltCallback+0x40>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	4619      	mov	r1, r3
 800107c:	4808      	ldr	r0, [pc, #32]	; (80010a0 <HAL_UART_RxCpltCallback+0x44>)
 800107e:	f011 fde3 	bl	8012c48 <iprintf>
		osThreadFlagsSet(tarea_UARTHandle,0x0002U);
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <HAL_UART_RxCpltCallback+0x48>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2102      	movs	r1, #2
 8001088:	4618      	mov	r0, r3
 800108a:	f00d ff4d 	bl	800ef28 <osThreadFlagsSet>
			printf("Estado: ok\r\n");
		else
			printf("Algo no va bien\r\n");
			*/
	}
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000270 	.word	0x20000270
 800109c:	200007d0 	.word	0x200007d0
 80010a0:	08013ad8 	.word	0x08013ad8
 80010a4:	2000078c 	.word	0x2000078c

080010a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010b8:	d00e      	beq.n	80010d8 <HAL_GPIO_EXTI_Callback+0x30>
 80010ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010be:	dc18      	bgt.n	80010f2 <HAL_GPIO_EXTI_Callback+0x4a>
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d013      	beq.n	80010ec <HAL_GPIO_EXTI_Callback+0x44>
 80010c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010c8:	d113      	bne.n	80010f2 <HAL_GPIO_EXTI_Callback+0x4a>
	{
		case (LSM6DSL_INT1_EXTI11_Pin):
		{
			osThreadFlagsSet(readAccelHandle,0x0001U);
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <HAL_GPIO_EXTI_Callback+0x54>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2101      	movs	r1, #1
 80010d0:	4618      	mov	r0, r3
 80010d2:	f00d ff29 	bl	800ef28 <osThreadFlagsSet>
			break;
 80010d6:	e00d      	b.n	80010f4 <HAL_GPIO_EXTI_Callback+0x4c>
		}
		case(BOTON_Pin):
		{
			printf("Ha pulsado el boton\r\n");
 80010d8:	4809      	ldr	r0, [pc, #36]	; (8001100 <HAL_GPIO_EXTI_Callback+0x58>)
 80010da:	f011 fe3b 	bl	8012d54 <puts>
			osThreadFlagsSet(readAccelHandle,0x0002U);
 80010de:	4b07      	ldr	r3, [pc, #28]	; (80010fc <HAL_GPIO_EXTI_Callback+0x54>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2102      	movs	r1, #2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f00d ff1f 	bl	800ef28 <osThreadFlagsSet>
			break;
 80010ea:	e003      	b.n	80010f4 <HAL_GPIO_EXTI_Callback+0x4c>
		}
		case (GPIO_PIN_1):
		{
			SPI_WIFI_ISR();
 80010ec:	f009 ff5e 	bl	800afac <SPI_WIFI_ISR>
			break;
 80010f0:	e000      	b.n	80010f4 <HAL_GPIO_EXTI_Callback+0x4c>
		}
		default:
		{
		  break;
 80010f2:	bf00      	nop
		}
	}
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000784 	.word	0x20000784
 8001100:	08013ae8 	.word	0x08013ae8

08001104 <wifi_start>:

static int wifi_start(void)
{
 8001104:	b5b0      	push	{r4, r5, r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];
  printf("wifistart\r\n");
 800110a:	481d      	ldr	r0, [pc, #116]	; (8001180 <wifi_start+0x7c>)
 800110c:	f011 fe22 	bl	8012d54 <puts>
 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 8001110:	f009 ff5c 	bl	800afcc <WIFI_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d129      	bne.n	800116e <wifi_start+0x6a>
  {
	printf("xddddddd\r\n");
 800111a:	481a      	ldr	r0, [pc, #104]	; (8001184 <wifi_start+0x80>)
 800111c:	f011 fe1a 	bl	8012d54 <puts>
    printf(("ES-WIFI Initialized.\r\n"));
 8001120:	4819      	ldr	r0, [pc, #100]	; (8001188 <wifi_start+0x84>)
 8001122:	f011 fe17 	bl	8012d54 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 8001126:	463b      	mov	r3, r7
 8001128:	4618      	mov	r0, r3
 800112a:	f009 ff9d 	bl	800b068 <WIFI_GetMAC_Address>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d116      	bne.n	8001162 <wifi_start+0x5e>
    {
      printf("MAC asignada\r\n");
 8001134:	4815      	ldr	r0, [pc, #84]	; (800118c <wifi_start+0x88>)
 8001136:	f011 fe0d 	bl	8012d54 <puts>
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
               MAC_Addr[0],
 800113a:	783b      	ldrb	r3, [r7, #0]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800113c:	4618      	mov	r0, r3
               MAC_Addr[1],
 800113e:	787b      	ldrb	r3, [r7, #1]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001140:	461c      	mov	r4, r3
               MAC_Addr[2],
 8001142:	78bb      	ldrb	r3, [r7, #2]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001144:	461d      	mov	r5, r3
               MAC_Addr[3],
 8001146:	78fb      	ldrb	r3, [r7, #3]
               MAC_Addr[4],
 8001148:	793a      	ldrb	r2, [r7, #4]
               MAC_Addr[5]);
 800114a:	7979      	ldrb	r1, [r7, #5]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800114c:	9102      	str	r1, [sp, #8]
 800114e:	9201      	str	r2, [sp, #4]
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	462b      	mov	r3, r5
 8001154:	4622      	mov	r2, r4
 8001156:	4601      	mov	r1, r0
 8001158:	480d      	ldr	r0, [pc, #52]	; (8001190 <wifi_start+0x8c>)
 800115a:	f011 fd75 	bl	8012c48 <iprintf>
  else
  {
	printf("Errorfifi\r\n");
    return -1;
  }
  return 0;
 800115e:	2300      	movs	r3, #0
 8001160:	e00a      	b.n	8001178 <wifi_start+0x74>
      printf("> ERROR : CANNOT get MAC address\r\n");
 8001162:	480c      	ldr	r0, [pc, #48]	; (8001194 <wifi_start+0x90>)
 8001164:	f011 fdf6 	bl	8012d54 <puts>
      return -1;
 8001168:	f04f 33ff 	mov.w	r3, #4294967295
 800116c:	e004      	b.n	8001178 <wifi_start+0x74>
	printf("Errorfifi\r\n");
 800116e:	480a      	ldr	r0, [pc, #40]	; (8001198 <wifi_start+0x94>)
 8001170:	f011 fdf0 	bl	8012d54 <puts>
    return -1;
 8001174:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bdb0      	pop	{r4, r5, r7, pc}
 8001180:	08013b00 	.word	0x08013b00
 8001184:	08013b0c 	.word	0x08013b0c
 8001188:	08013b18 	.word	0x08013b18
 800118c:	08013b30 	.word	0x08013b30
 8001190:	08013b40 	.word	0x08013b40
 8001194:	08013b80 	.word	0x08013b80
 8001198:	08013ba4 	.word	0x08013ba4

0800119c <wifi_connect>:

int wifi_connect(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af02      	add	r7, sp, #8

  wifi_start();
 80011a2:	f7ff ffaf 	bl	8001104 <wifi_start>

  printf("Connecting to %s\r\n",SSID);
 80011a6:	4919      	ldr	r1, [pc, #100]	; (800120c <wifi_connect+0x70>)
 80011a8:	4819      	ldr	r0, [pc, #100]	; (8001210 <wifi_connect+0x74>)
 80011aa:	f011 fd4d 	bl	8012c48 <iprintf>
  if( WIFI_Connect(SSID, PASSWORD, WIFISECURITY) == WIFI_STATUS_OK)
 80011ae:	2203      	movs	r2, #3
 80011b0:	4918      	ldr	r1, [pc, #96]	; (8001214 <wifi_connect+0x78>)
 80011b2:	4816      	ldr	r0, [pc, #88]	; (800120c <wifi_connect+0x70>)
 80011b4:	f009 ff36 	bl	800b024 <WIFI_Connect>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d11d      	bne.n	80011fa <wifi_connect+0x5e>
  {
    if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 80011be:	4816      	ldr	r0, [pc, #88]	; (8001218 <wifi_connect+0x7c>)
 80011c0:	f009 ff68 	bl	800b094 <WIFI_GetIP_Address>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d111      	bne.n	80011ee <wifi_connect+0x52>
    {
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
               IP_Addr[0],
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <wifi_connect+0x7c>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 80011ce:	4619      	mov	r1, r3
               IP_Addr[1],
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <wifi_connect+0x7c>)
 80011d2:	785b      	ldrb	r3, [r3, #1]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 80011d4:	461a      	mov	r2, r3
               IP_Addr[2],
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <wifi_connect+0x7c>)
 80011d8:	789b      	ldrb	r3, [r3, #2]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 80011da:	4618      	mov	r0, r3
               IP_Addr[3]);
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <wifi_connect+0x7c>)
 80011de:	78db      	ldrb	r3, [r3, #3]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	4603      	mov	r3, r0
 80011e4:	480d      	ldr	r0, [pc, #52]	; (800121c <wifi_connect+0x80>)
 80011e6:	f011 fd2f 	bl	8012c48 <iprintf>
  else
  {
		 printf("ERROR : es-wifi module NOT connected\n");
     return -1;
  }
  return 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e00a      	b.n	8001204 <wifi_connect+0x68>
		  printf(" ERROR : es-wifi module CANNOT get IP address\r\n");
 80011ee:	480c      	ldr	r0, [pc, #48]	; (8001220 <wifi_connect+0x84>)
 80011f0:	f011 fdb0 	bl	8012d54 <puts>
      return -1;
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295
 80011f8:	e004      	b.n	8001204 <wifi_connect+0x68>
		 printf("ERROR : es-wifi module NOT connected\n");
 80011fa:	480a      	ldr	r0, [pc, #40]	; (8001224 <wifi_connect+0x88>)
 80011fc:	f011 fdaa 	bl	8012d54 <puts>
     return -1;
 8001200:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	08013bb0 	.word	0x08013bb0
 8001210:	08013bb8 	.word	0x08013bb8
 8001214:	08013bcc 	.word	0x08013bcc
 8001218:	200007c8 	.word	0x200007c8
 800121c:	08013bdc 	.word	0x08013bdc
 8001220:	08013c18 	.word	0x08013c18
 8001224:	08013c48 	.word	0x08013c48

08001228 <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 800122c:	4802      	ldr	r0, [pc, #8]	; (8001238 <SPI3_IRQHandler+0x10>)
 800122e:	f005 fce5 	bl	8006bfc <HAL_SPI_IRQHandler>
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000c94 	.word	0x20000c94

0800123c <RTC_set_func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RTC_set_func */
void RTC_set_func(void *argument)
{
 800123c:	b5b0      	push	{r4, r5, r7, lr}
 800123e:	b09e      	sub	sp, #120	; 0x78
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t recibido[3];
	//uint32_t flag_rec;
	osStatus_t estado;
	uint32_t return_wait = 0U;
 8001244:	2300      	movs	r3, #0
 8001246:	66bb      	str	r3, [r7, #104]	; 0x68

	uint16_t num_usuario;
	uint8_t to_change[6];
	const char* msg_hora_ok = "\r\nHora cambiada correctamente\r\n";
 8001248:	4baf      	ldr	r3, [pc, #700]	; (8001508 <RTC_set_func+0x2cc>)
 800124a:	657b      	str	r3, [r7, #84]	; 0x54
	const char* msg_fecha_ok = "Fecha cambiada correctamente\r\n";
 800124c:	4baf      	ldr	r3, [pc, #700]	; (800150c <RTC_set_func+0x2d0>)
 800124e:	653b      	str	r3, [r7, #80]	; 0x50
	const char* msg_error = "\r\nERROR: Valor no válido\r\n";
 8001250:	4baf      	ldr	r3, [pc, #700]	; (8001510 <RTC_set_func+0x2d4>)
 8001252:	64fb      	str	r3, [r7, #76]	; 0x4c
	const char* msg_rtc1 = "\r\n\r\n========================\r\n"
 8001254:	4baf      	ldr	r3, [pc, #700]	; (8001514 <RTC_set_func+0x2d8>)
 8001256:	64bb      	str	r3, [r7, #72]	; 0x48
	"| Configurar rtc |\r\n"
	"========================\r\n\r\n";
	const char* msg[6] = {
 8001258:	4baf      	ldr	r3, [pc, #700]	; (8001518 <RTC_set_func+0x2dc>)
 800125a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800125e:	461d      	mov	r5, r3
 8001260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001264:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001268:	e884 0003 	stmia.w	r4, {r0, r1}
	"Hora (0-23): ", "\r\nMinuto (0-59): ","\r\nSegundo (0-59): ","\r\nDía (1-31): ","\r\nMes (1-12): ",
	"\r\nAño (0-99): "};
	uint8_t limit[6][2] = {{0,23},{0,59},{0,59},{1,31},{1,12},{0,99}};
 800126c:	4aab      	ldr	r2, [pc, #684]	; (800151c <RTC_set_func+0x2e0>)
 800126e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001272:	ca07      	ldmia	r2, {r0, r1, r2}
 8001274:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//uint8_t *toChange[6] = {&GetTime.Hours, &GetTime.Minutes, &GetTime.Seconds, &GetDate.Date,&GetDate.Month, &GetDate.Year};

	printf("Empieza el bucle\r\n");
 8001278:	48a9      	ldr	r0, [pc, #676]	; (8001520 <RTC_set_func+0x2e4>)
 800127a:	f011 fd6b 	bl	8012d54 <puts>
	estado = osMessageQueuePut(print_queueHandle, &msg_rtc1, 0, pdMS_TO_TICKS(500));
 800127e:	4ba9      	ldr	r3, [pc, #676]	; (8001524 <RTC_set_func+0x2e8>)
 8001280:	6818      	ldr	r0, [r3, #0]
 8001282:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001286:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800128a:	2200      	movs	r2, #0
 800128c:	f00d ffaa 	bl	800f1e4 <osMessageQueuePut>
 8001290:	6678      	str	r0, [r7, #100]	; 0x64
	int i,j = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (i=0;i<6;){
 8001296:	2300      	movs	r3, #0
 8001298:	673b      	str	r3, [r7, #112]	; 0x70
 800129a:	e0d8      	b.n	800144e <RTC_set_func+0x212>
		estado = osMessageQueuePut(print_queueHandle, &msg[i], 0, pdMS_TO_TICKS(500));
 800129c:	4ba1      	ldr	r3, [pc, #644]	; (8001524 <RTC_set_func+0x2e8>)
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80012a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	18d1      	adds	r1, r2, r3
 80012aa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012ae:	2200      	movs	r2, #0
 80012b0:	f00d ff98 	bl	800f1e4 <osMessageQueuePut>
 80012b4:	6678      	str	r0, [r7, #100]	; 0x64
		printf("Esperando a que ser reciba el dato\r\n");
 80012b6:	489c      	ldr	r0, [pc, #624]	; (8001528 <RTC_set_func+0x2ec>)
 80012b8:	f011 fd4c 	bl	8012d54 <puts>

		for (j=0;j<3;j++){
 80012bc:	2300      	movs	r3, #0
 80012be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80012c0:	e022      	b.n	8001308 <RTC_set_func+0xcc>
			estado = osMessageQueueGet(receive_queueHandle, &recibido[j], NULL, osWaitForever);
 80012c2:	4b9a      	ldr	r3, [pc, #616]	; (800152c <RTC_set_func+0x2f0>)
 80012c4:	6818      	ldr	r0, [r3, #0]
 80012c6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80012ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012cc:	18d1      	adds	r1, r2, r3
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	2200      	movs	r2, #0
 80012d4:	f00d ffe6 	bl	800f2a4 <osMessageQueueGet>
 80012d8:	6678      	str	r0, [r7, #100]	; 0x64
			printf("De la cola: %c\r\n",recibido[j]);
 80012da:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80012de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012e0:	4413      	add	r3, r2
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4619      	mov	r1, r3
 80012e6:	4892      	ldr	r0, [pc, #584]	; (8001530 <RTC_set_func+0x2f4>)
 80012e8:	f011 fcae 	bl	8012c48 <iprintf>
			if(recibido[j]==13){
 80012ec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80012f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012f2:	4413      	add	r3, r2
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b0d      	cmp	r3, #13
 80012f8:	d103      	bne.n	8001302 <RTC_set_func+0xc6>
				printf("Ha pulsado intro\r\n");
 80012fa:	488e      	ldr	r0, [pc, #568]	; (8001534 <RTC_set_func+0x2f8>)
 80012fc:	f011 fd2a 	bl	8012d54 <puts>
				break;
 8001300:	e005      	b.n	800130e <RTC_set_func+0xd2>
		for (j=0;j<3;j++){
 8001302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001304:	3301      	adds	r3, #1
 8001306:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800130a:	2b02      	cmp	r3, #2
 800130c:	ddd9      	ble.n	80012c2 <RTC_set_func+0x86>
			}
		}
		printf("%d\r\n",j);
 800130e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001310:	4889      	ldr	r0, [pc, #548]	; (8001538 <RTC_set_func+0x2fc>)
 8001312:	f011 fc99 	bl	8012c48 <iprintf>
		switch(j){
 8001316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001318:	2b03      	cmp	r3, #3
 800131a:	d84a      	bhi.n	80013b2 <RTC_set_func+0x176>
 800131c:	a201      	add	r2, pc, #4	; (adr r2, 8001324 <RTC_set_func+0xe8>)
 800131e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001322:	bf00      	nop
 8001324:	08001335 	.word	0x08001335
 8001328:	0800133d 	.word	0x0800133d
 800132c:	0800134b 	.word	0x0800134b
 8001330:	0800136f 	.word	0x0800136f
		case 0:
			num_usuario=0;
 8001334:	2300      	movs	r3, #0
 8001336:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			break;
 800133a:	e03a      	b.n	80013b2 <RTC_set_func+0x176>
		case 1:
			num_usuario = recibido[0]-48;
 800133c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001340:	b29b      	uxth	r3, r3
 8001342:	3b30      	subs	r3, #48	; 0x30
 8001344:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			//i++;
			break;
 8001348:	e033      	b.n	80013b2 <RTC_set_func+0x176>
		case 2:
			num_usuario = 10*(recibido[0]-48)+recibido[1]-48;
 800134a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800134e:	3b30      	subs	r3, #48	; 0x30
 8001350:	b29b      	uxth	r3, r3
 8001352:	461a      	mov	r2, r3
 8001354:	0092      	lsls	r2, r2, #2
 8001356:	4413      	add	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	b29a      	uxth	r2, r3
 800135c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001360:	b29b      	uxth	r3, r3
 8001362:	4413      	add	r3, r2
 8001364:	b29b      	uxth	r3, r3
 8001366:	3b30      	subs	r3, #48	; 0x30
 8001368:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			//i++;
			break;
 800136c:	e021      	b.n	80013b2 <RTC_set_func+0x176>
		case 3:
			num_usuario = 100*(recibido[0]-48)+10*(recibido[1]-48)+recibido[2]-48;
 800136e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001372:	3b30      	subs	r3, #48	; 0x30
 8001374:	b29b      	uxth	r3, r3
 8001376:	461a      	mov	r2, r3
 8001378:	0092      	lsls	r2, r2, #2
 800137a:	4413      	add	r3, r2
 800137c:	461a      	mov	r2, r3
 800137e:	0091      	lsls	r1, r2, #2
 8001380:	461a      	mov	r2, r3
 8001382:	460b      	mov	r3, r1
 8001384:	4413      	add	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	b29a      	uxth	r2, r3
 800138a:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800138e:	3b30      	subs	r3, #48	; 0x30
 8001390:	b29b      	uxth	r3, r3
 8001392:	4619      	mov	r1, r3
 8001394:	0089      	lsls	r1, r1, #2
 8001396:	440b      	add	r3, r1
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	b29b      	uxth	r3, r3
 800139c:	4413      	add	r3, r2
 800139e:	b29a      	uxth	r2, r3
 80013a0:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	4413      	add	r3, r2
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	3b30      	subs	r3, #48	; 0x30
 80013ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			break;
 80013b0:	bf00      	nop
		}
		printf("Numero: %d\r\n",num_usuario);
 80013b2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80013b6:	4619      	mov	r1, r3
 80013b8:	4860      	ldr	r0, [pc, #384]	; (800153c <RTC_set_func+0x300>)
 80013ba:	f011 fc45 	bl	8012c48 <iprintf>
		printf("Rango: %d-%d\r\n",limit[i][0],limit[i][1]);
 80013be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	3378      	adds	r3, #120	; 0x78
 80013c4:	443b      	add	r3, r7
 80013c6:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80013ca:	4619      	mov	r1, r3
 80013cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	3378      	adds	r3, #120	; 0x78
 80013d2:	443b      	add	r3, r7
 80013d4:	f813 3c53 	ldrb.w	r3, [r3, #-83]
 80013d8:	461a      	mov	r2, r3
 80013da:	4859      	ldr	r0, [pc, #356]	; (8001540 <RTC_set_func+0x304>)
 80013dc:	f011 fc34 	bl	8012c48 <iprintf>
		if (num_usuario<limit[i][0] || num_usuario>limit[i][1]){
 80013e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	3378      	adds	r3, #120	; 0x78
 80013e6:	443b      	add	r3, r7
 80013e8:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d30a      	bcc.n	800140c <RTC_set_func+0x1d0>
 80013f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	3378      	adds	r3, #120	; 0x78
 80013fc:	443b      	add	r3, r7
 80013fe:	f813 3c53 	ldrb.w	r3, [r3, #-83]
 8001402:	b29b      	uxth	r3, r3
 8001404:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8001408:	429a      	cmp	r2, r3
 800140a:	d914      	bls.n	8001436 <RTC_set_func+0x1fa>
			estado = osMessageQueuePut(print_queueHandle, &msg_error, 0, pdMS_TO_TICKS(500));
 800140c:	4b45      	ldr	r3, [pc, #276]	; (8001524 <RTC_set_func+0x2e8>)
 800140e:	6818      	ldr	r0, [r3, #0]
 8001410:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001414:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001418:	2200      	movs	r2, #0
 800141a:	f00d fee3 	bl	800f1e4 <osMessageQueuePut>
 800141e:	6678      	str	r0, [r7, #100]	; 0x64
			if (estado == osOK)
 8001420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001422:	2b00      	cmp	r3, #0
 8001424:	d103      	bne.n	800142e <RTC_set_func+0x1f2>
				printf("Enviado valor erroneo\r\n");
 8001426:	4847      	ldr	r0, [pc, #284]	; (8001544 <RTC_set_func+0x308>)
 8001428:	f011 fc94 	bl	8012d54 <puts>
 800142c:	e00f      	b.n	800144e <RTC_set_func+0x212>
			else
				printf("Algo no va bien\r\n");
 800142e:	4846      	ldr	r0, [pc, #280]	; (8001548 <RTC_set_func+0x30c>)
 8001430:	f011 fc90 	bl	8012d54 <puts>
			if (estado == osOK)
 8001434:	e00b      	b.n	800144e <RTC_set_func+0x212>
		}else{
			to_change[i]=num_usuario;
 8001436:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800143a:	b2d9      	uxtb	r1, r3
 800143c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001440:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001442:	4413      	add	r3, r2
 8001444:	460a      	mov	r2, r1
 8001446:	701a      	strb	r2, [r3, #0]
			i++;
 8001448:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800144a:	3301      	adds	r3, #1
 800144c:	673b      	str	r3, [r7, #112]	; 0x70
	for (i=0;i<6;){
 800144e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001450:	2b05      	cmp	r3, #5
 8001452:	f77f af23 	ble.w	800129c <RTC_set_func+0x60>
		}

	}

	RTC_TimeTypeDef sTime = {0};
 8001456:	f107 0310 	add.w	r3, r7, #16
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]

	sTime.Hours = to_change[0];
 800146a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800146e:	743b      	strb	r3, [r7, #16]
	sTime.Minutes = to_change[1];
 8001470:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001474:	747b      	strb	r3, [r7, #17]
	sTime.Seconds = to_change[2];
 8001476:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800147a:	74bb      	strb	r3, [r7, #18]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	4831      	ldr	r0, [pc, #196]	; (800154c <RTC_set_func+0x310>)
 8001486:	f004 fb1e 	bl	8005ac6 <HAL_RTC_SetTime>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <RTC_set_func+0x258>
	  {
	    Error_Handler();
 8001490:	f000 fa84 	bl	800199c <Error_Handler>
	  }

	osMessageQueuePut(print_queueHandle, &msg_hora_ok, 0, pdMS_TO_TICKS(500));
 8001494:	4b23      	ldr	r3, [pc, #140]	; (8001524 <RTC_set_func+0x2e8>)
 8001496:	6818      	ldr	r0, [r3, #0]
 8001498:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800149c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014a0:	2200      	movs	r2, #0
 80014a2:	f00d fe9f 	bl	800f1e4 <osMessageQueuePut>

	sDate.Date = to_change[3];
 80014a6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80014aa:	73bb      	strb	r3, [r7, #14]
	sDate.Month = to_change[4];
 80014ac:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80014b0:	737b      	strb	r3, [r7, #13]
	sDate.Year = to_change[5];
 80014b2:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80014b6:	73fb      	strb	r3, [r7, #15]
	printf("Anio: %d\r\n",to_change[5]);
 80014b8:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80014bc:	4619      	mov	r1, r3
 80014be:	4824      	ldr	r0, [pc, #144]	; (8001550 <RTC_set_func+0x314>)
 80014c0:	f011 fbc2 	bl	8012c48 <iprintf>
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	2200      	movs	r2, #0
 80014ca:	4619      	mov	r1, r3
 80014cc:	481f      	ldr	r0, [pc, #124]	; (800154c <RTC_set_func+0x310>)
 80014ce:	f004 fbf3 	bl	8005cb8 <HAL_RTC_SetDate>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <RTC_set_func+0x2a0>
	{
		Error_Handler();
 80014d8:	f000 fa60 	bl	800199c <Error_Handler>
	}

	osMessageQueuePut(print_queueHandle, &msg_fecha_ok, 0, pdMS_TO_TICKS(500));
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <RTC_set_func+0x2e8>)
 80014de:	6818      	ldr	r0, [r3, #0]
 80014e0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80014e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014e8:	2200      	movs	r2, #0
 80014ea:	f00d fe7b 	bl	800f1e4 <osMessageQueuePut>

	wifi_connect();
 80014ee:	f7ff fe55 	bl	800119c <wifi_connect>

	osThreadFlagsSet(sendMQTTHandle,0x0001U);
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <RTC_set_func+0x318>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2101      	movs	r1, #1
 80014f8:	4618      	mov	r0, r3
 80014fa:	f00d fd15 	bl	800ef28 <osThreadFlagsSet>

  /* Infinite loop */
  for(;;)
  {

	  osDelay(pdMS_TO_TICKS(1000));
 80014fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001502:	f00d fde0 	bl	800f0c6 <osDelay>
 8001506:	e7fa      	b.n	80014fe <RTC_set_func+0x2c2>
 8001508:	08013c70 	.word	0x08013c70
 800150c:	08013c90 	.word	0x08013c90
 8001510:	08013cb0 	.word	0x08013cb0
 8001514:	08013ccc 	.word	0x08013ccc
 8001518:	08013ddc 	.word	0x08013ddc
 800151c:	08013df4 	.word	0x08013df4
 8001520:	08013d1c 	.word	0x08013d1c
 8001524:	200007a0 	.word	0x200007a0
 8001528:	08013d30 	.word	0x08013d30
 800152c:	200007a4 	.word	0x200007a4
 8001530:	08013d54 	.word	0x08013d54
 8001534:	08013d68 	.word	0x08013d68
 8001538:	08013d7c 	.word	0x08013d7c
 800153c:	08013d84 	.word	0x08013d84
 8001540:	08013d94 	.word	0x08013d94
 8001544:	08013da4 	.word	0x08013da4
 8001548:	08013dbc 	.word	0x08013dbc
 800154c:	2000019c 	.word	0x2000019c
 8001550:	08013dd0 	.word	0x08013dd0
 8001554:	20000794 	.word	0x20000794

08001558 <readAccel_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readAccel_func */
void readAccel_func(void *argument)
{
 8001558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155a:	b0b1      	sub	sp, #196	; 0xc4
 800155c:	af08      	add	r7, sp, #32
 800155e:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN readAccel_func */
	osStatus_t estado;
  //char mensaje[]  = "Hola mundo\r\n";
	char mensaje[100];
	char *p_mensaje = mensaje;
 8001560:	f107 0320 	add.w	r3, r7, #32
 8001564:	61fb      	str	r3, [r7, #28]

	//uint32_t nticks = 0;
	int16_t DataXYZ[3];
	int16_t *pDataXYZ = DataXYZ;
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


	uint8_t horas,minutos,segundos,dia,mes,anio = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint32_t return_wait = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	uint16_t iter; // Se usa para iterar en 64 o 1024 aceleraciones
	uint16_t max_iter;

	printf("ReadAccel task esperando\r\n");
 800157a:	485a      	ldr	r0, [pc, #360]	; (80016e4 <readAccel_func+0x18c>)
 800157c:	f011 fbea 	bl	8012d54 <puts>
	// Esperamos que el usuario configure el RTC y que el acelerometro este activo
	return_wait = osThreadFlagsWait(0x0008U, osFlagsWaitAll, osWaitForever);
 8001580:	f04f 32ff 	mov.w	r2, #4294967295
 8001584:	2101      	movs	r1, #1
 8001586:	2008      	movs	r0, #8
 8001588:	f00d fd1c 	bl	800efc4 <osThreadFlagsWait>
 800158c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

	//Activamos el temporizador
	osThreadFlagsSet(temporizadorHandle,0x0001U);
 8001590:	4b55      	ldr	r3, [pc, #340]	; (80016e8 <readAccel_func+0x190>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2101      	movs	r1, #1
 8001596:	4618      	mov	r0, r3
 8001598:	f00d fcc6 	bl	800ef28 <osThreadFlagsSet>


	printf("ReadAccel task se inicia\r\n");
 800159c:	4853      	ldr	r0, [pc, #332]	; (80016ec <readAccel_func+0x194>)
 800159e:	f011 fbd9 	bl	8012d54 <puts>


	/* Infinite loop */
	for(;;)
	{
		return_wait = osThreadFlagsWait(0x0006U, osFlagsWaitAny, osWaitForever); //espera media hora o que alguien pulse el boton
 80015a2:	f04f 32ff 	mov.w	r2, #4294967295
 80015a6:	2100      	movs	r1, #0
 80015a8:	2006      	movs	r0, #6
 80015aa:	f00d fd0b 	bl	800efc4 <osThreadFlagsWait>
 80015ae:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		if(return_wait == osFlagsErrorTimeout){
 80015b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015b6:	f113 0f02 	cmn.w	r3, #2
 80015ba:	d103      	bne.n	80015c4 <readAccel_func+0x6c>
			printf("Ha pasado media hora\r\n");
 80015bc:	484c      	ldr	r0, [pc, #304]	; (80016f0 <readAccel_func+0x198>)
 80015be:	f011 fbc9 	bl	8012d54 <puts>
 80015c2:	e006      	b.n	80015d2 <readAccel_func+0x7a>
		}
		else {
			printf("El usuario quiere enviar aceleraciones, modo continuo = %d\r\n",modo_continuo);
 80015c4:	4b4b      	ldr	r3, [pc, #300]	; (80016f4 <readAccel_func+0x19c>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	4619      	mov	r1, r3
 80015cc:	484a      	ldr	r0, [pc, #296]	; (80016f8 <readAccel_func+0x1a0>)
 80015ce:	f011 fb3b 	bl	8012c48 <iprintf>
		}

		if (modo_continuo){
 80015d2:	4b48      	ldr	r3, [pc, #288]	; (80016f4 <readAccel_func+0x19c>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00a      	beq.n	80015f2 <readAccel_func+0x9a>
			max_iter = MUESTRAS_CONTINUO;
 80015dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e0:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
			osThreadFlagsSet(sendMQTTHandle,MODO_CONTINUO);
 80015e4:	4b45      	ldr	r3, [pc, #276]	; (80016fc <readAccel_func+0x1a4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2102      	movs	r1, #2
 80015ea:	4618      	mov	r0, r3
 80015ec:	f00d fc9c 	bl	800ef28 <osThreadFlagsSet>
 80015f0:	e008      	b.n	8001604 <readAccel_func+0xac>
		}else{
			max_iter = MUESTRAS_NORMAL;
 80015f2:	2340      	movs	r3, #64	; 0x40
 80015f4:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
			osThreadFlagsSet(sendMQTTHandle,MODO_NORMAL);
 80015f8:	4b40      	ldr	r3, [pc, #256]	; (80016fc <readAccel_func+0x1a4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2101      	movs	r1, #1
 80015fe:	4618      	mov	r0, r3
 8001600:	f00d fc92 	bl	800ef28 <osThreadFlagsSet>
		}

		for (iter=0 ; iter<max_iter ; iter++){
 8001604:	2300      	movs	r3, #0
 8001606:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800160a:	e060      	b.n	80016ce <readAccel_func+0x176>
			BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 800160c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001610:	f008 f89e 	bl	8009750 <BSP_ACCELERO_AccGetXYZ>
			//printf("Tick: %ld	Eje x: %d	Eje y: %d	Eje z: %d\r\n",nticks,DataXYZ[0],DataXYZ[1],DataXYZ[2]);

			//printf("Lectura accel realizada\r\n");
			HAL_RTC_GetTime(&hrtc, &GetTime, RTC_FORMAT_BIN);
 8001614:	2200      	movs	r2, #0
 8001616:	493a      	ldr	r1, [pc, #232]	; (8001700 <readAccel_func+0x1a8>)
 8001618:	483a      	ldr	r0, [pc, #232]	; (8001704 <readAccel_func+0x1ac>)
 800161a:	f004 faf1 	bl	8005c00 <HAL_RTC_GetTime>
			horas = GetTime.Hours;
 800161e:	4b38      	ldr	r3, [pc, #224]	; (8001700 <readAccel_func+0x1a8>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			minutos = GetTime.Minutes;
 8001626:	4b36      	ldr	r3, [pc, #216]	; (8001700 <readAccel_func+0x1a8>)
 8001628:	785b      	ldrb	r3, [r3, #1]
 800162a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			segundos = GetTime.Seconds;
 800162e:	4b34      	ldr	r3, [pc, #208]	; (8001700 <readAccel_func+0x1a8>)
 8001630:	789b      	ldrb	r3, [r3, #2]
 8001632:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

			HAL_RTC_GetDate(&hrtc, &GetDate, RTC_FORMAT_BIN);
 8001636:	2200      	movs	r2, #0
 8001638:	4933      	ldr	r1, [pc, #204]	; (8001708 <readAccel_func+0x1b0>)
 800163a:	4832      	ldr	r0, [pc, #200]	; (8001704 <readAccel_func+0x1ac>)
 800163c:	f004 fbc3 	bl	8005dc6 <HAL_RTC_GetDate>
			anio = GetDate.Year;
 8001640:	4b31      	ldr	r3, [pc, #196]	; (8001708 <readAccel_func+0x1b0>)
 8001642:	78db      	ldrb	r3, [r3, #3]
 8001644:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			dia = GetDate.Date;
 8001648:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <readAccel_func+0x1b0>)
 800164a:	789b      	ldrb	r3, [r3, #2]
 800164c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			mes = GetDate.Month;
 8001650:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <readAccel_func+0x1b0>)
 8001652:	785b      	ldrb	r3, [r3, #1]
 8001654:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

			//printf("Anio: %d\r\n",anio);
			//printf("Lectura fecha realizada\r\n");
			//printf("fecha: %d/%d/%d hora: %d:%d:%d temp: %d.%02d grados\r\n",dia,mes,anio,horas,minutos,segundos,tmpInt1,tmpInt2);
			//snprintf(mensaje,100,"fecha: %d/%d/%d hora: %d:%d:%d Eje x: %d	Eje y: %d	Eje z: %d\r\n",dia,mes,anio+2000,horas,minutos,segundos,DataXYZ[0],DataXYZ[1],DataXYZ[2]);
			snprintf(mensaje,100,"%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n",dia,mes,anio+2000,horas,minutos,segundos,DataXYZ[0],DataXYZ[1],DataXYZ[2]);
 8001658:	f897 608c 	ldrb.w	r6, [r7, #140]	; 0x8c
 800165c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001666:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 800166a:	f897 108f 	ldrb.w	r1, [r7, #143]	; 0x8f
 800166e:	f897 008e 	ldrb.w	r0, [r7, #142]	; 0x8e
 8001672:	f897 408d 	ldrb.w	r4, [r7, #141]	; 0x8d
 8001676:	f9b7 5014 	ldrsh.w	r5, [r7, #20]
 800167a:	607d      	str	r5, [r7, #4]
 800167c:	f9b7 5016 	ldrsh.w	r5, [r7, #22]
 8001680:	603d      	str	r5, [r7, #0]
 8001682:	f9b7 5018 	ldrsh.w	r5, [r7, #24]
 8001686:	462b      	mov	r3, r5
 8001688:	f107 0520 	add.w	r5, r7, #32
 800168c:	9307      	str	r3, [sp, #28]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	9306      	str	r3, [sp, #24]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	9305      	str	r3, [sp, #20]
 8001696:	9404      	str	r4, [sp, #16]
 8001698:	9003      	str	r0, [sp, #12]
 800169a:	9102      	str	r1, [sp, #8]
 800169c:	9201      	str	r2, [sp, #4]
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	4633      	mov	r3, r6
 80016a4:	4a19      	ldr	r2, [pc, #100]	; (800170c <readAccel_func+0x1b4>)
 80016a6:	2164      	movs	r1, #100	; 0x64
 80016a8:	4628      	mov	r0, r5
 80016aa:	f011 fbd5 	bl	8012e58 <sniprintf>



			//printf("MENSAJE: %s\r\n",mensaje);
			estado = osMessageQueuePut(print_queueHandle, &p_mensaje, 0, pdMS_TO_TICKS(500));
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <readAccel_func+0x1b8>)
 80016b0:	6818      	ldr	r0, [r3, #0]
 80016b2:	f107 011c 	add.w	r1, r7, #28
 80016b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016ba:	2200      	movs	r2, #0
 80016bc:	f00d fd92 	bl	800f1e4 <osMessageQueuePut>
 80016c0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		for (iter=0 ; iter<max_iter ; iter++){
 80016c4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80016c8:	3301      	adds	r3, #1
 80016ca:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80016ce:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80016d2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d398      	bcc.n	800160c <readAccel_func+0xb4>
				printf("Timeout agotado 1\r\n");
			}*/

		}

		printf("Se han leido todas las aceleraciones, esperamos media hora o hasta que alguien pulse el boton\r\n");
 80016da:	480e      	ldr	r0, [pc, #56]	; (8001714 <readAccel_func+0x1bc>)
 80016dc:	f011 fb3a 	bl	8012d54 <puts>
		return_wait = osThreadFlagsWait(0x0006U, osFlagsWaitAny, osWaitForever); //espera media hora o que alguien pulse el boton
 80016e0:	e75f      	b.n	80015a2 <readAccel_func+0x4a>
 80016e2:	bf00      	nop
 80016e4:	08013e00 	.word	0x08013e00
 80016e8:	20000790 	.word	0x20000790
 80016ec:	08013e1c 	.word	0x08013e1c
 80016f0:	08013e38 	.word	0x08013e38
 80016f4:	200007d1 	.word	0x200007d1
 80016f8:	08013e50 	.word	0x08013e50
 80016fc:	20000794 	.word	0x20000794
 8001700:	200007b0 	.word	0x200007b0
 8001704:	2000019c 	.word	0x2000019c
 8001708:	200007ac 	.word	0x200007ac
 800170c:	08013e90 	.word	0x08013e90
 8001710:	200007a0 	.word	0x200007a0
 8001714:	08013eb0 	.word	0x08013eb0

08001718 <printTask_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_printTask_func */
void printTask_func(void *argument)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	uintptr_t mensaje;
	osStatus_t estado;
  /* Infinite loop */
  for(;;)
  {
	  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 8001720:	4b13      	ldr	r3, [pc, #76]	; (8001770 <printTask_func+0x58>)
 8001722:	6818      	ldr	r0, [r3, #0]
 8001724:	f107 0108 	add.w	r1, r7, #8
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
 800172c:	2200      	movs	r2, #0
 800172e:	f00d fdb9 	bl	800f2a4 <osMessageQueueGet>
 8001732:	60f8      	str	r0, [r7, #12]
	  //printf("Se ha recibido algo en print task\r\n");
	  //printf("Mensaje print task: %s\r\n",mensaje);
	  //printf("Longitud: %d",strlen((char*)mensaje));
	  if (estado == osOK)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10d      	bne.n	8001756 <printTask_func+0x3e>
	  {
		  //printf("%s",(char*)mensaje);
		  HAL_UART_Transmit(&huart1, (uint8_t*)mensaje, strlen(mensaje),10);
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	461c      	mov	r4, r3
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe fd45 	bl	80001d0 <strlen>
 8001746:	4603      	mov	r3, r0
 8001748:	b29a      	uxth	r2, r3
 800174a:	230a      	movs	r3, #10
 800174c:	4621      	mov	r1, r4
 800174e:	4809      	ldr	r0, [pc, #36]	; (8001774 <printTask_func+0x5c>)
 8001750:	f006 fb22 	bl	8007d98 <HAL_UART_Transmit>
 8001754:	e7e4      	b.n	8001720 <printTask_func+0x8>
	  }
	  else if (estado == osErrorTimeout)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f113 0f02 	cmn.w	r3, #2
 800175c:	d103      	bne.n	8001766 <printTask_func+0x4e>
	  {
		  printf("Timeout printTask\r\n");
 800175e:	4806      	ldr	r0, [pc, #24]	; (8001778 <printTask_func+0x60>)
 8001760:	f011 faf8 	bl	8012d54 <puts>
 8001764:	e7dc      	b.n	8001720 <printTask_func+0x8>
	  }
	  else
	  {
		  printf("Error en la tarea print\r\n");
 8001766:	4805      	ldr	r0, [pc, #20]	; (800177c <printTask_func+0x64>)
 8001768:	f011 faf4 	bl	8012d54 <puts>
	  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 800176c:	e7d8      	b.n	8001720 <printTask_func+0x8>
 800176e:	bf00      	nop
 8001770:	200007a0 	.word	0x200007a0
 8001774:	20000270 	.word	0x20000270
 8001778:	08013f10 	.word	0x08013f10
 800177c:	08013f24 	.word	0x08013f24

08001780 <tarea_UART_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tarea_UART_func */
void tarea_UART_func(void *argument)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tarea_UART_func */
	osStatus_t estado;
	uint32_t return_wait = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  return_wait = osThreadFlagsWait(0x0002U, osFlagsWaitAny, osWaitForever);
 800178c:	f04f 32ff 	mov.w	r2, #4294967295
 8001790:	2100      	movs	r1, #0
 8001792:	2002      	movs	r0, #2
 8001794:	f00d fc16 	bl	800efc4 <osThreadFlagsWait>
 8001798:	60f8      	str	r0, [r7, #12]
	  estado = osMessageQueuePut(receive_queueHandle, &rec_data,0,pdMS_TO_TICKS(200));
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <tarea_UART_func+0x40>)
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	23c8      	movs	r3, #200	; 0xc8
 80017a0:	2200      	movs	r2, #0
 80017a2:	4908      	ldr	r1, [pc, #32]	; (80017c4 <tarea_UART_func+0x44>)
 80017a4:	f00d fd1e 	bl	800f1e4 <osMessageQueuePut>
 80017a8:	60b8      	str	r0, [r7, #8]
	  if (estado == osOK)
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d103      	bne.n	80017b8 <tarea_UART_func+0x38>
		  printf("Estado: ok\r\n");
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <tarea_UART_func+0x48>)
 80017b2:	f011 facf 	bl	8012d54 <puts>
 80017b6:	e7e9      	b.n	800178c <tarea_UART_func+0xc>
	  else
		  printf("Algo no va bien\r\n");
 80017b8:	4804      	ldr	r0, [pc, #16]	; (80017cc <tarea_UART_func+0x4c>)
 80017ba:	f011 facb 	bl	8012d54 <puts>
	  return_wait = osThreadFlagsWait(0x0002U, osFlagsWaitAny, osWaitForever);
 80017be:	e7e5      	b.n	800178c <tarea_UART_func+0xc>
 80017c0:	200007a4 	.word	0x200007a4
 80017c4:	200007d0 	.word	0x200007d0
 80017c8:	08013f40 	.word	0x08013f40
 80017cc:	08013dbc 	.word	0x08013dbc

080017d0 <temporizador_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_temporizador_func */
void temporizador_func(void *argument)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temporizador_func */
	osThreadFlagsWait(0x0001U, osFlagsWaitAll, osWaitForever);
 80017d8:	f04f 32ff 	mov.w	r2, #4294967295
 80017dc:	2101      	movs	r1, #1
 80017de:	2001      	movs	r0, #1
 80017e0:	f00d fbf0 	bl	800efc4 <osThreadFlagsWait>
	printf("Temporizador activado\r\n");
 80017e4:	4806      	ldr	r0, [pc, #24]	; (8001800 <temporizador_func+0x30>)
 80017e6:	f011 fab5 	bl	8012d54 <puts>
  /* Infinite loop */
  for(;;)
  {
    osDelay(pdMS_TO_TICKS(1000000)); //Periodo en ms con el que se mandan las aceleraciones
 80017ea:	4806      	ldr	r0, [pc, #24]	; (8001804 <temporizador_func+0x34>)
 80017ec:	f00d fc6b 	bl	800f0c6 <osDelay>
    osThreadFlagsSet(readAccelHandle,0x0004U);
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <temporizador_func+0x38>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2104      	movs	r1, #4
 80017f6:	4618      	mov	r0, r3
 80017f8:	f00d fb96 	bl	800ef28 <osThreadFlagsSet>
    osDelay(pdMS_TO_TICKS(1000000)); //Periodo en ms con el que se mandan las aceleraciones
 80017fc:	e7f5      	b.n	80017ea <temporizador_func+0x1a>
 80017fe:	bf00      	nop
 8001800:	08013f4c 	.word	0x08013f4c
 8001804:	000f4240 	.word	0x000f4240
 8001808:	20000784 	.word	0x20000784

0800180c <sendMQTT_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendMQTT_func */
void sendMQTT_func(void *argument)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b0a2      	sub	sp, #136	; 0x88
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendMQTT_func */
	uint32_t return_wait = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint16_t max_iter;

	char payLoad[16];


	osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 800181a:	f04f 32ff 	mov.w	r2, #4294967295
 800181e:	2100      	movs	r1, #0
 8001820:	2001      	movs	r0, #1
 8001822:	f00d fbcf 	bl	800efc4 <osThreadFlagsWait>

	const uint32_t ulMaxPublishCount = 5UL;
 8001826:	2305      	movs	r3, #5
 8001828:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	NetworkContext_t xNetworkContext = { 0 };
 800182c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
	MQTTStatus_t xMQTTStatus;
	TransportStatus_t xNetworkStatus;

	/* Attempt to connect to the MQTT broker. The socket is returned in
	* the network context structure. */
	xNetworkStatus = prvConnectToServer( &xNetworkContext, SOCKET );
 8001836:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800183a:	2100      	movs	r1, #0
 800183c:	4618      	mov	r0, r3
 800183e:	f000 f8b3 	bl	80019a8 <prvConnectToServer>
 8001842:	4603      	mov	r3, r0
 8001844:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	printf("Mitad de la definicion mqtt\r\n");
 8001848:	482d      	ldr	r0, [pc, #180]	; (8001900 <sendMQTT_func+0xf4>)
 800184a:	f011 fa83 	bl	8012d54 <puts>
	configASSERT( xNetworkStatus == PLAINTEXT_TRANSPORT_SUCCESS );
 800184e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001852:	2b01      	cmp	r3, #1
 8001854:	d00a      	beq.n	800186c <sendMQTT_func+0x60>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800185a:	f383 8811 	msr	BASEPRI, r3
 800185e:	f3bf 8f6f 	isb	sy
 8001862:	f3bf 8f4f 	dsb	sy
 8001866:	677b      	str	r3, [r7, #116]	; 0x74
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001868:	bf00      	nop
 800186a:	e7fe      	b.n	800186a <sendMQTT_func+0x5e>
	//LOG(("Trying to create an MQTT connection\n"));
	prvCreateMQTTConnectionWithBroker( &xMQTTContext, &xNetworkContext );
 800186c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001870:	f107 0308 	add.w	r3, r7, #8
 8001874:	4611      	mov	r1, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f8e2 	bl	8001a40 <prvCreateMQTTConnectionWithBroker>
	prvMQTTSubscribeToTopic(&xMQTTContext,pcTempTopic2);
 800187c:	f107 0308 	add.w	r3, r7, #8
 8001880:	4920      	ldr	r1, [pc, #128]	; (8001904 <sendMQTT_func+0xf8>)
 8001882:	4618      	mov	r0, r3
 8001884:	f000 f986 	bl	8001b94 <prvMQTTSubscribeToTopic>
	printf("Contexto mqtt inicializado\r\n");
 8001888:	481f      	ldr	r0, [pc, #124]	; (8001908 <sendMQTT_func+0xfc>)
 800188a:	f011 fa63 	bl	8012d54 <puts>

	osThreadFlagsSet(readAccelHandle,0x0008U);
 800188e:	4b1f      	ldr	r3, [pc, #124]	; (800190c <sendMQTT_func+0x100>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2108      	movs	r1, #8
 8001894:	4618      	mov	r0, r3
 8001896:	f00d fb47 	bl	800ef28 <osThreadFlagsSet>


  /* Infinite loop */
  for(;;)
  {
	  estado = osMessageQueueGet(publish_queueHandle, &mensaje, NULL, pdMS_TO_TICKS(1000));
 800189a:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <sendMQTT_func+0x104>)
 800189c:	6818      	ldr	r0, [r3, #0]
 800189e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80018a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a6:	2200      	movs	r2, #0
 80018a8:	f00d fcfc 	bl	800f2a4 <osMessageQueueGet>
 80018ac:	67b8      	str	r0, [r7, #120]	; 0x78

	  if (estado == osOK)
 80018ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d114      	bne.n	80018de <sendMQTT_func+0xd2>
	  {
		  printf("Publicamos: %s",(char*)mensaje);
 80018b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018b6:	4619      	mov	r1, r3
 80018b8:	4816      	ldr	r0, [pc, #88]	; (8001914 <sendMQTT_func+0x108>)
 80018ba:	f011 f9c5 	bl	8012c48 <iprintf>
		  sprintf(payLoad,"%s",mensaje);
 80018be:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80018c0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018c4:	4914      	ldr	r1, [pc, #80]	; (8001918 <sendMQTT_func+0x10c>)
 80018c6:	4618      	mov	r0, r3
 80018c8:	f011 fafa 	bl	8012ec0 <siprintf>
		  prvMQTTPublishToTopic(&xMQTTContext,pcTempTopic,payLoad);
 80018cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	4911      	ldr	r1, [pc, #68]	; (800191c <sendMQTT_func+0x110>)
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 f92e 	bl	8001b38 <prvMQTTPublishToTopic>
 80018dc:	e7dd      	b.n	800189a <sendMQTT_func+0x8e>
	  }
	  else if (estado == osErrorTimeout)
 80018de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018e0:	f113 0f02 	cmn.w	r3, #2
 80018e4:	d108      	bne.n	80018f8 <sendMQTT_func+0xec>
	  {
		  printf("Procesamos subscripción\r\n");
 80018e6:	480e      	ldr	r0, [pc, #56]	; (8001920 <sendMQTT_func+0x114>)
 80018e8:	f011 fa34 	bl	8012d54 <puts>
		  MQTT_ProcessLoop(&xMQTTContext);
 80018ec:	f107 0308 	add.w	r3, r7, #8
 80018f0:	4618      	mov	r0, r3
 80018f2:	f00b f9d6 	bl	800cca2 <MQTT_ProcessLoop>
 80018f6:	e7d0      	b.n	800189a <sendMQTT_func+0x8e>
	  }
	  else
	  {
		  printf("Error en la tarea sendMQTT\r\n");
 80018f8:	480a      	ldr	r0, [pc, #40]	; (8001924 <sendMQTT_func+0x118>)
 80018fa:	f011 fa2b 	bl	8012d54 <puts>
	  estado = osMessageQueueGet(publish_queueHandle, &mensaje, NULL, pdMS_TO_TICKS(1000));
 80018fe:	e7cc      	b.n	800189a <sendMQTT_func+0x8e>
 8001900:	08013f64 	.word	0x08013f64
 8001904:	08013f84 	.word	0x08013f84
 8001908:	08013fa0 	.word	0x08013fa0
 800190c:	20000784 	.word	0x20000784
 8001910:	200007a8 	.word	0x200007a8
 8001914:	08013fbc 	.word	0x08013fbc
 8001918:	08013fcc 	.word	0x08013fcc
 800191c:	08013fd0 	.word	0x08013fd0
 8001920:	08013fe8 	.word	0x08013fe8
 8001924:	08014004 	.word	0x08014004

08001928 <wifiStartTask_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_wifiStartTask_func */
void wifiStartTask_func(void *argument)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN wifiStartTask_func */
	osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 8001930:	f04f 32ff 	mov.w	r2, #4294967295
 8001934:	2100      	movs	r1, #0
 8001936:	2001      	movs	r0, #1
 8001938:	f00d fb44 	bl	800efc4 <osThreadFlagsWait>



	wifi_connect();
 800193c:	f7ff fc2e 	bl	800119c <wifi_connect>


  /* Infinite loop */
  for(;;)
  {
	  osDelay(pdMS_TO_TICKS(1));
 8001940:	2001      	movs	r0, #1
 8001942:	f00d fbc0 	bl	800f0c6 <osDelay>
 8001946:	e7fb      	b.n	8001940 <wifiStartTask_func+0x18>

08001948 <temp_sub_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_temp_sub_func */
void temp_sub_func(void *argument)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temp_sub_func */
	osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 8001950:	f04f 32ff 	mov.w	r2, #4294967295
 8001954:	2100      	movs	r1, #0
 8001956:	2001      	movs	r0, #1
 8001958:	f00d fb34 	bl	800efc4 <osThreadFlagsWait>
  /* Infinite loop */
  for(;;)
  {
    osDelay(pdMS_TO_TICKS(15000));
 800195c:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001960:	f00d fbb1 	bl	800f0c6 <osDelay>
    osThreadFlagsSet(sendMQTTHandle, TIMER_MQTT);
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <temp_sub_func+0x2c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2104      	movs	r1, #4
 800196a:	4618      	mov	r0, r3
 800196c:	f00d fadc 	bl	800ef28 <osThreadFlagsSet>
    osDelay(pdMS_TO_TICKS(15000));
 8001970:	e7f4      	b.n	800195c <temp_sub_func+0x14>
 8001972:	bf00      	nop
 8001974:	20000794 	.word	0x20000794

08001978 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a04      	ldr	r2, [pc, #16]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d101      	bne.n	800198e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800198a:	f000 ff43 	bl	8002814 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40001000 	.word	0x40001000

0800199c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a0:	b672      	cpsid	i
}
 80019a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <Error_Handler+0x8>
	...

080019a8 <prvConnectToServer>:
 */
static uint32_t ulGlobalEntryTimeMs;


TransportStatus_t prvConnectToServer( NetworkContext_t * pxNetworkContext, uint8_t socket )
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af02      	add	r7, sp, #8
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	70fb      	strb	r3, [r7, #3]
   TransportStatus_t xNetworkStatus;
   uint8_t ret;
   uint8_t ipaddr[4]=MQTT_BROKER_ENDPOINT_IP;
 80019b4:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <prvConnectToServer+0x84>)
 80019b6:	60bb      	str	r3, [r7, #8]

    /* Attempt to connect to MQTT broker. */
    do
    {
        /* Establish a TCP connection with the MQTT broker. */
        LOG( ( "Create a TCP connection to %s:%d.\n",
 80019b8:	f240 725b 	movw	r2, #1883	; 0x75b
 80019bc:	491c      	ldr	r1, [pc, #112]	; (8001a30 <prvConnectToServer+0x88>)
 80019be:	481d      	ldr	r0, [pc, #116]	; (8001a34 <prvConnectToServer+0x8c>)
 80019c0:	f011 f942 	bl	8012c48 <iprintf>
                   MQTT_BROKER_ENDPOINT,
                   MQTT_BROKER_PORT ) );
        ret=WIFI_OpenClientConnection(socket, WIFI_TCP_PROTOCOL, "mqtt", ipaddr , MQTT_BROKER_PORT, 0);
 80019c4:	78f8      	ldrb	r0, [r7, #3]
 80019c6:	f107 0308 	add.w	r3, r7, #8
 80019ca:	2200      	movs	r2, #0
 80019cc:	9201      	str	r2, [sp, #4]
 80019ce:	f240 725b 	movw	r2, #1883	; 0x75b
 80019d2:	9200      	str	r2, [sp, #0]
 80019d4:	4a18      	ldr	r2, [pc, #96]	; (8001a38 <prvConnectToServer+0x90>)
 80019d6:	2100      	movs	r1, #0
 80019d8:	f009 fb78 	bl	800b0cc <WIFI_OpenClientConnection>
 80019dc:	4603      	mov	r3, r0
 80019de:	73bb      	strb	r3, [r7, #14]
		if(ret!=WIFI_STATUS_OK) {
 80019e0:	7bbb      	ldrb	r3, [r7, #14]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d009      	beq.n	80019fa <prvConnectToServer+0x52>
			LOG(("Error in opening MQTT connection: %d\n",ret));
 80019e6:	7bbb      	ldrb	r3, [r7, #14]
 80019e8:	4619      	mov	r1, r3
 80019ea:	4814      	ldr	r0, [pc, #80]	; (8001a3c <prvConnectToServer+0x94>)
 80019ec:	f011 f92c 	bl	8012c48 <iprintf>
			osDelay(pdMS_TO_TICKS(10000));
 80019f0:	f242 7010 	movw	r0, #10000	; 0x2710
 80019f4:	f00d fb67 	bl	800f0c6 <osDelay>
 80019f8:	e00f      	b.n	8001a1a <prvConnectToServer+0x72>
		} else {
	        pxNetworkContext->socket = socket;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	78fa      	ldrb	r2, [r7, #3]
 80019fe:	701a      	strb	r2, [r3, #0]
	        pxNetworkContext->socket_open=1;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	705a      	strb	r2, [r3, #1]
	        memcpy(pxNetworkContext->ipaddr,ipaddr,4*sizeof(uint8_t));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3302      	adds	r3, #2
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	601a      	str	r2, [r3, #0]
	        pxNetworkContext->remote_port=MQTT_BROKER_PORT;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f240 725b 	movw	r2, #1883	; 0x75b
 8001a14:	80da      	strh	r2, [r3, #6]
	        xNetworkStatus = PLAINTEXT_TRANSPORT_SUCCESS;
 8001a16:	2301      	movs	r3, #1
 8001a18:	73fb      	strb	r3, [r7, #15]
		}


    } while( ( xNetworkStatus != PLAINTEXT_TRANSPORT_SUCCESS ) );
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d1cb      	bne.n	80019b8 <prvConnectToServer+0x10>

    return PLAINTEXT_TRANSPORT_SUCCESS;
 8001a20:	2301      	movs	r3, #1
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	5e5d795b 	.word	0x5e5d795b
 8001a30:	08014038 	.word	0x08014038
 8001a34:	0801404c 	.word	0x0801404c
 8001a38:	08014070 	.word	0x08014070
 8001a3c:	08014078 	.word	0x08014078

08001a40 <prvCreateMQTTConnectionWithBroker>:

void prvCreateMQTTConnectionWithBroker( MQTTContext_t * pxMQTTContext,
                                               NetworkContext_t * pxNetworkContext )
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b094      	sub	sp, #80	; 0x50
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
    MQTTConnectInfo_t xConnectInfo;
    bool xSessionPresent;
    TransportInterface_t xTransport;

    /* Fill in Transport Interface send and receive function pointers. */
    init_transport_from_socket( pxNetworkContext->socket, 1,
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	7818      	ldrb	r0, [r3, #0]
 8001a4e:	f107 030c 	add.w	r3, r7, #12
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	2101      	movs	r1, #1
 8001a56:	f00d f921 	bl	800ec9c <init_transport_from_socket>
                                     pxNetworkContext,
                                     &xTransport );
    /* Initialize MQTT library. */
    xResult = MQTT_Init( pxMQTTContext,
 8001a5a:	f107 010c 	add.w	r1, r7, #12
 8001a5e:	4b30      	ldr	r3, [pc, #192]	; (8001b20 <prvCreateMQTTConnectionWithBroker+0xe0>)
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	4b30      	ldr	r3, [pc, #192]	; (8001b24 <prvCreateMQTTConnectionWithBroker+0xe4>)
 8001a64:	4a30      	ldr	r2, [pc, #192]	; (8001b28 <prvCreateMQTTConnectionWithBroker+0xe8>)
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f00a ff4e 	bl	800c908 <MQTT_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                         &xTransport,
                         prvGetTimeMs,
                         prvEventCallback,
                         &xBuffer );

    configASSERT( xResult == MQTTSuccess );
 8001a72:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00a      	beq.n	8001a90 <prvCreateMQTTConnectionWithBroker+0x50>
	__asm volatile
 8001a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a7e:	f383 8811 	msr	BASEPRI, r3
 8001a82:	f3bf 8f6f 	isb	sy
 8001a86:	f3bf 8f4f 	dsb	sy
 8001a8a:	643b      	str	r3, [r7, #64]	; 0x40
}
 8001a8c:	bf00      	nop
 8001a8e:	e7fe      	b.n	8001a8e <prvCreateMQTTConnectionWithBroker+0x4e>
    LOG(("MQTT initialized\n"));
 8001a90:	4826      	ldr	r0, [pc, #152]	; (8001b2c <prvCreateMQTTConnectionWithBroker+0xec>)
 8001a92:	f011 f95f 	bl	8012d54 <puts>

    /* Many fields not used in this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xConnectInfo, 0x00, sizeof( xConnectInfo ) );
 8001a96:	f107 0320 	add.w	r3, r7, #32
 8001a9a:	221c      	movs	r2, #28
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f010 fd47 	bl	8012532 <memset>

    /* Start with a clean session i.e. direct the MQTT broker to discard any
     * previous session data. Also, establishing a connection with clean
     * session will ensure that the broker does not store any data when this
     * client gets disconnected. */
    xConnectInfo.cleanSession = true;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	f887 3020 	strb.w	r3, [r7, #32]

    /* The client identifier is used to uniquely identify this MQTT client to
     * the MQTT broker. In a production device the identifier can be something
     * unique, such as a device serial number. */
    xConnectInfo.pClientIdentifier = MQTTCLIENT_IDENTIFIER;
 8001aaa:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <prvCreateMQTTConnectionWithBroker+0xf0>)
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
    xConnectInfo.clientIdentifierLength = ( uint16_t ) strlen(
 8001aae:	230f      	movs	r3, #15
 8001ab0:	853b      	strh	r3, [r7, #40]	; 0x28
                                                  MQTTCLIENT_IDENTIFIER );
    xConnectInfo.pUserName=mqttUserName;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    xConnectInfo.userNameLength=strlen(mqttUserName);
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f7fe fb8a 	bl	80001d0 <strlen>
 8001abc:	4603      	mov	r3, r0
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	863b      	strh	r3, [r7, #48]	; 0x30
    xConnectInfo.pPassword=mqttPass;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	637b      	str	r3, [r7, #52]	; 0x34
    xConnectInfo.passwordLength=strlen(mqttPass);
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f7fe fb82 	bl	80001d0 <strlen>
 8001acc:	4603      	mov	r3, r0
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	873b      	strh	r3, [r7, #56]	; 0x38

    /* Set MQTT keep-alive period. It is the responsibility of the application
     * to ensure that the interval between Control Packets being sent does not
     * exceed the Keep Alive value.  In the absence of sending any other
     * Control Packets, the Client MUST send a PINGREQ Packet. */
    xConnectInfo.keepAliveSeconds = 60U;;
 8001ad2:	233c      	movs	r3, #60	; 0x3c
 8001ad4:	847b      	strh	r3, [r7, #34]	; 0x22

    /* Send MQTT CONNECT packet to broker. LWT is not used in this demo, so it
     * is passed as NULL. */
    xResult = MQTT_Connect( pxMQTTContext,
 8001ad6:	f107 0120 	add.w	r1, r7, #32
 8001ada:	f107 031f 	add.w	r3, r7, #31
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f00a ff63 	bl	800c9b2 <MQTT_Connect>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            &xConnectInfo,
                            NULL,
                            1000U,
                            &xSessionPresent );
    configASSERT( xResult == MQTTSuccess );
 8001af2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00a      	beq.n	8001b10 <prvCreateMQTTConnectionWithBroker+0xd0>
	__asm volatile
 8001afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001afe:	f383 8811 	msr	BASEPRI, r3
 8001b02:	f3bf 8f6f 	isb	sy
 8001b06:	f3bf 8f4f 	dsb	sy
 8001b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
}
 8001b0c:	bf00      	nop
 8001b0e:	e7fe      	b.n	8001b0e <prvCreateMQTTConnectionWithBroker+0xce>
    LOG(("MQTT connected to broker\n"));
 8001b10:	4808      	ldr	r0, [pc, #32]	; (8001b34 <prvCreateMQTTConnectionWithBroker+0xf4>)
 8001b12:	f011 f91f 	bl	8012d54 <puts>

}
 8001b16:	bf00      	nop
 8001b18:	3748      	adds	r7, #72	; 0x48
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000000 	.word	0x20000000
 8001b24:	08001d65 	.word	0x08001d65
 8001b28:	08001d35 	.word	0x08001d35
 8001b2c:	080140a0 	.word	0x080140a0
 8001b30:	080140b4 	.word	0x080140b4
 8001b34:	080140c4 	.word	0x080140c4

08001b38 <prvMQTTPublishToTopic>:

void prvMQTTPublishToTopic( MQTTContext_t * pxMQTTContext, char * topic, void * payload )
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
    MQTTStatus_t xResult;
    MQTTPublishInfo_t xMQTTPublishInfo;

    /* Some fields are not used by this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xMQTTPublishInfo, 0x00, sizeof(
 8001b44:	f107 0310 	add.w	r3, r7, #16
 8001b48:	2214      	movs	r2, #20
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f010 fcf0 	bl	8012532 <memset>
                                                        xMQTTPublishInfo ) );

    /* This demo uses QoS0. */
    xMQTTPublishInfo.qos = MQTTQoS0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	743b      	strb	r3, [r7, #16]
    xMQTTPublishInfo.retain = false;
 8001b56:	2300      	movs	r3, #0
 8001b58:	747b      	strb	r3, [r7, #17]
    xMQTTPublishInfo.pTopicName = topic;
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	617b      	str	r3, [r7, #20]
    xMQTTPublishInfo.topicNameLength = ( uint16_t ) strlen( topic );
 8001b5e:	68b8      	ldr	r0, [r7, #8]
 8001b60:	f7fe fb36 	bl	80001d0 <strlen>
 8001b64:	4603      	mov	r3, r0
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	833b      	strh	r3, [r7, #24]
    xMQTTPublishInfo.pPayload = payload;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	61fb      	str	r3, [r7, #28]
    xMQTTPublishInfo.payloadLength = strlen( payload );
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7fe fb2e 	bl	80001d0 <strlen>
 8001b74:	4603      	mov	r3, r0
 8001b76:	623b      	str	r3, [r7, #32]

    /* Send PUBLISH packet. Packet ID is not used for a QoS0 publish. */
    xResult = MQTT_Publish( pxMQTTContext, &xMQTTPublishInfo, 0U );
 8001b78:	f107 0310 	add.w	r3, r7, #16
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	4619      	mov	r1, r3
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f00a ffc1 	bl	800cb08 <MQTT_Publish>
 8001b86:	4603      	mov	r3, r0
 8001b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    //if(xResult==MQTTSuccess) LOG(("Published to topic %s: %s\n",topic,payload));
    //configASSERT( xResult == MQTTSuccess );
}
 8001b8c:	bf00      	nop
 8001b8e:	3728      	adds	r7, #40	; 0x28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <prvMQTTSubscribeToTopic>:

void prvMQTTSubscribeToTopic( MQTTContext_t * pxMQTTContext, char * topic )
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
    MQTTStatus_t xResult = MQTTSuccess;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	75fb      	strb	r3, [r7, #23]
    MQTTSubscribeInfo_t xMQTTSubscription[ TOPIC_COUNT ];
    bool xFailedSubscribeToTopic = false;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	75bb      	strb	r3, [r7, #22]

    /* Some fields not used by this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xMQTTSubscription, 0x00, sizeof( xMQTTSubscription ) );
 8001ba6:	f107 0308 	add.w	r3, r7, #8
 8001baa:	220c      	movs	r2, #12
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f010 fcbf 	bl	8012532 <memset>

    /* Each packet requires a unique ID. */
    usSubscribePacketIdentifier = MQTT_GetPacketId( pxMQTTContext );
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f00b f894 	bl	800cce2 <MQTT_GetPacketId>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <prvMQTTSubscribeToTopic+0xa4>)
 8001bc0:	801a      	strh	r2, [r3, #0]

    /* Subscribe to the pcExampleTopic topic filter. This example subscribes
     * to only one topic and uses QoS0. */
    xMQTTSubscription[ 0 ].qos = MQTTQoS0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	723b      	strb	r3, [r7, #8]
    xMQTTSubscription[ 0 ].pTopicFilter = topic;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]
    xMQTTSubscription[ 0 ].topicFilterLength = strlen( topic );
 8001bca:	6838      	ldr	r0, [r7, #0]
 8001bcc:	f7fe fb00 	bl	80001d0 <strlen>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	823b      	strh	r3, [r7, #16]
    do
    {
        /* The client is already connected to the broker. Subscribe to the topic
         * as specified in pcExampleTopic by sending a subscribe packet then
         * waiting for a subscribe acknowledgment (SUBACK). */
        xResult = MQTT_Subscribe( pxMQTTContext,
 8001bd6:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <prvMQTTSubscribeToTopic+0xa4>)
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	f107 0108 	add.w	r1, r7, #8
 8001bde:	2201      	movs	r2, #1
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f00a ff5e 	bl	800caa2 <MQTT_Subscribe>
 8001be6:	4603      	mov	r3, r0
 8001be8:	75fb      	strb	r3, [r7, #23]
                                  xMQTTSubscription,
                                  1, /* Only subscribing to one topic. */
                                  usSubscribePacketIdentifier );
        if(xResult==MQTTSuccess) LOG(("Subscription to %s, result: %d, success\n",topic,xResult));
 8001bea:	7dfb      	ldrb	r3, [r7, #23]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d106      	bne.n	8001bfe <prvMQTTSubscribeToTopic+0x6a>
 8001bf0:	7dfb      	ldrb	r3, [r7, #23]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	6839      	ldr	r1, [r7, #0]
 8001bf6:	4811      	ldr	r0, [pc, #68]	; (8001c3c <prvMQTTSubscribeToTopic+0xa8>)
 8001bf8:	f011 f826 	bl	8012c48 <iprintf>
 8001bfc:	e005      	b.n	8001c0a <prvMQTTSubscribeToTopic+0x76>
        else LOG(("Subscription to %s, result: %d, failed\n",topic,xResult));
 8001bfe:	7dfb      	ldrb	r3, [r7, #23]
 8001c00:	461a      	mov	r2, r3
 8001c02:	6839      	ldr	r1, [r7, #0]
 8001c04:	480e      	ldr	r0, [pc, #56]	; (8001c40 <prvMQTTSubscribeToTopic+0xac>)
 8001c06:	f011 f81f 	bl	8012c48 <iprintf>
         * packet.  This demo uses the generic packet processing function
         * everywhere to highlight this fact. Note there is a separate demo that
         * shows how to use coreMQTT in a thread safe way – in which case the
         * MQTT protocol runs in the background and this call is not required. */
        /* For version 1.1.0: xResult = MQTT_ProcessLoop( pxMQTTContext, 1000 ); */
        xResult = MQTT_ProcessLoop( pxMQTTContext );
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f00b f849 	bl	800cca2 <MQTT_ProcessLoop>
 8001c10:	4603      	mov	r3, r0
 8001c12:	75fb      	strb	r3, [r7, #23]
        //configASSERT( xResult == MQTTSuccess );

        /* Reset flag before checking suback responses. */
        xFailedSubscribeToTopic = false;
 8001c14:	2300      	movs	r3, #0
 8001c16:	75bb      	strb	r3, [r7, #22]
         * #xTopicFilterContext is updated in the event callback (shown in a
         * code block below) to reflect the status of the SUBACK sent by the
         * broker. It represents either the QoS level granted by the server upon
         * subscription, or acknowledgment of server rejection of the
         * subscription request. */
        if( xTopicFilterContext[0].xSubAckStatus == MQTTSubAckFailure )
 8001c18:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <prvMQTTSubscribeToTopic+0xb0>)
 8001c1a:	791b      	ldrb	r3, [r3, #4]
 8001c1c:	2b80      	cmp	r3, #128	; 0x80
 8001c1e:	d102      	bne.n	8001c26 <prvMQTTSubscribeToTopic+0x92>
        {
            xFailedSubscribeToTopic = true;
 8001c20:	2301      	movs	r3, #1
 8001c22:	75bb      	strb	r3, [r7, #22]
            break;
 8001c24:	e003      	b.n	8001c2e <prvMQTTSubscribeToTopic+0x9a>
        }

    } while( xFailedSubscribeToTopic == true  );
 8001c26:	7dbb      	ldrb	r3, [r7, #22]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1d4      	bne.n	8001bd6 <prvMQTTSubscribeToTopic+0x42>
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000bbc 	.word	0x20000bbc
 8001c3c:	080140e0 	.word	0x080140e0
 8001c40:	0801410c 	.word	0x0801410c
 8001c44:	20000008 	.word	0x20000008

08001c48 <prvMQTTProcessIncomingPublish>:

void prvMQTTProcessIncomingPublish( MQTTPublishInfo_t *pxPublishInfo )
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b0c2      	sub	sp, #264	; 0x108
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c56:	6018      	str	r0, [r3, #0]
	char buffer1[128];
	char buffer2[128];
    const char * pTopicName;

	// pPayload no termina en \0, hay que copiarlo en un buffer para imprimirlo. Lo mismo con pTopicName
	memcpy(buffer1,pxPublishInfo->pPayload,min(127,pxPublishInfo->payloadLength));
 8001c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68d9      	ldr	r1, [r3, #12]
 8001c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	2b7f      	cmp	r3, #127	; 0x7f
 8001c72:	bf28      	it	cs
 8001c74:	237f      	movcs	r3, #127	; 0x7f
 8001c76:	461a      	mov	r2, r3
 8001c78:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f010 fc30 	bl	80124e2 <memcpy>
	buffer1[min(1023,pxPublishInfo->payloadLength)]='\0';
 8001c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001c92:	4293      	cmp	r3, r2
 8001c94:	bf28      	it	cs
 8001c96:	4613      	movcs	r3, r2
 8001c98:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001c9c:	443b      	add	r3, r7
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f803 2c80 	strb.w	r2, [r3, #-128]
	memcpy(buffer2,pxPublishInfo->pTopicName,min(127,pxPublishInfo->topicNameLength));
 8001ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ca8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6859      	ldr	r1, [r3, #4]
 8001cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001cb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	891b      	ldrh	r3, [r3, #8]
 8001cbc:	2b7f      	cmp	r3, #127	; 0x7f
 8001cbe:	bf28      	it	cs
 8001cc0:	237f      	movcs	r3, #127	; 0x7f
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	f107 0308 	add.w	r3, r7, #8
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f010 fc09 	bl	80124e2 <memcpy>
	buffer2[min(1023,pxPublishInfo->topicNameLength)]='\0';
 8001cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001cd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	891b      	ldrh	r3, [r3, #8]
 8001cdc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	bf28      	it	cs
 8001ce4:	4613      	movcs	r3, r2
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001cee:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	5499      	strb	r1, [r3, r2]

	printf("Topic \"%s\": publicado \"%s\"\n",buffer2,buffer1);
 8001cf6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001cfa:	f107 0308 	add.w	r3, r7, #8
 8001cfe:	4619      	mov	r1, r3
 8001d00:	480a      	ldr	r0, [pc, #40]	; (8001d2c <prvMQTTProcessIncomingPublish+0xe4>)
 8001d02:	f010 ffa1 	bl	8012c48 <iprintf>

  // Actuar localmente sobre los LEDs o alguna otra cosa
	if(buffer1[0]=='1') modo_continuo = true;
 8001d06:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8001d0a:	2b31      	cmp	r3, #49	; 0x31
 8001d0c:	d102      	bne.n	8001d14 <prvMQTTProcessIncomingPublish+0xcc>
 8001d0e:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <prvMQTTProcessIncomingPublish+0xe8>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	701a      	strb	r2, [r3, #0]
	if(buffer1[0]=='0') modo_continuo = false;
 8001d14:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8001d18:	2b30      	cmp	r3, #48	; 0x30
 8001d1a:	d102      	bne.n	8001d22 <prvMQTTProcessIncomingPublish+0xda>
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <prvMQTTProcessIncomingPublish+0xe8>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	701a      	strb	r2, [r3, #0]

}
 8001d22:	bf00      	nop
 8001d24:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	08014134 	.word	0x08014134
 8001d30:	200007d1 	.word	0x200007d1

08001d34 <prvGetTimeMs>:

uint32_t prvGetTimeMs( void )
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
#define MILLISECONDS_PER_TICK                             ( 1000 / configTICK_RATE_HZ )
    TickType_t xTickCount = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]
    uint32_t ulTimeMs = 0UL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	603b      	str	r3, [r7, #0]

    /* Get the current tick count. */
    xTickCount = xTaskGetTickCount();
 8001d42:	f00e fca9 	bl	8010698 <xTaskGetTickCount>
 8001d46:	6078      	str	r0, [r7, #4]

    /* Convert the ticks to milliseconds. */
    ulTimeMs = ( uint32_t ) xTickCount * MILLISECONDS_PER_TICK;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	603b      	str	r3, [r7, #0]

    /* Reduce ulGlobalEntryTimeMs from obtained time so as to always return the
     * elapsed time in the application. */
    ulTimeMs = ( uint32_t ) ( ulTimeMs - ulGlobalEntryTimeMs );
 8001d4c:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <prvGetTimeMs+0x2c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	603b      	str	r3, [r7, #0]

    return ulTimeMs;
 8001d56:	683b      	ldr	r3, [r7, #0]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000bc0 	.word	0x20000bc0

08001d64 <prvEventCallback>:

void prvEventCallback( MQTTContext_t * pxMQTTContext,
                              MQTTPacketInfo_t * pxPacketInfo,
                              MQTTDeserializedInfo_t * pxDeserializedInfo )
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
    /* The MQTT context is not used for this demo. */
    ( void ) pxMQTTContext;

    if( ( pxPacketInfo->type & 0xF0U ) == MQTT_PACKET_TYPE_PUBLISH )
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d78:	2b30      	cmp	r3, #48	; 0x30
 8001d7a:	d104      	bne.n	8001d86 <prvEventCallback+0x22>
    {
    	// procesar un paquete PUBLISH recibido,
    	//por ejemplo llamando a la función prvMQTTProcessIncomingPublish, que hay que desarrollar
      prvMQTTProcessIncomingPublish( pxDeserializedInfo->pPublishInfo );
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff61 	bl	8001c48 <prvMQTTProcessIncomingPublish>
    {
       // también se podría hacer algo con otros paquetes si fuera necesario
    	 //prvMQTTProcessResponse( pxPacketInfo, pxDeserializedInfo->packetIdentifier );
    }

}
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d96:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <HAL_MspInit+0x4c>)
 8001d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d9a:	4a10      	ldr	r2, [pc, #64]	; (8001ddc <HAL_MspInit+0x4c>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6613      	str	r3, [r2, #96]	; 0x60
 8001da2:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <HAL_MspInit+0x4c>)
 8001da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dae:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_MspInit+0x4c>)
 8001db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db2:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <HAL_MspInit+0x4c>)
 8001db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <HAL_MspInit+0x4c>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	210f      	movs	r1, #15
 8001dca:	f06f 0001 	mvn.w	r0, #1
 8001dce:	f000 fe41 	bl	8002a54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000

08001de0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b0ac      	sub	sp, #176	; 0xb0
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	2288      	movs	r2, #136	; 0x88
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f010 fb96 	bl	8012532 <memset>
  if(DFSDM1_Init == 0)
 8001e06:	4b25      	ldr	r3, [pc, #148]	; (8001e9c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d142      	bne.n	8001e94 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001e0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e12:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e1a:	f107 0314 	add.w	r3, r7, #20
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f003 f90a 	bl	8005038 <HAL_RCCEx_PeriphCLKConfig>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001e2a:	f7ff fdb7 	bl	800199c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001e2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e32:	4a1b      	ldr	r2, [pc, #108]	; (8001ea0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e38:	6613      	str	r3, [r2, #96]	; 0x60
 8001e3a:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e46:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4a:	4a15      	ldr	r2, [pc, #84]	; (8001ea0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e4c:	f043 0310 	orr.w	r3, r3, #16
 8001e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e52:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	f003 0310 	and.w	r3, r3, #16
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001e5e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001e62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	2302      	movs	r3, #2
 8001e68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001e78:	2306      	movs	r3, #6
 8001e7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e7e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e82:	4619      	mov	r1, r3
 8001e84:	4807      	ldr	r0, [pc, #28]	; (8001ea4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001e86:	f000 ffa9 	bl	8002ddc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001e8a:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	4a02      	ldr	r2, [pc, #8]	; (8001e9c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001e92:	6013      	str	r3, [r2, #0]
  }

}
 8001e94:	bf00      	nop
 8001e96:	37b0      	adds	r7, #176	; 0xb0
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000bc4 	.word	0x20000bc4
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	48001000 	.word	0x48001000

08001ea8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b0ac      	sub	sp, #176	; 0xb0
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	2288      	movs	r2, #136	; 0x88
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f010 fb32 	bl	8012532 <memset>
  if(hi2c->Instance==I2C2)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a21      	ldr	r2, [pc, #132]	; (8001f58 <HAL_I2C_MspInit+0xb0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d13b      	bne.n	8001f50 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f003 f8a7 	bl	8005038 <HAL_RCCEx_PeriphCLKConfig>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001ef0:	f7ff fd54 	bl	800199c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef4:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <HAL_I2C_MspInit+0xb4>)
 8001ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef8:	4a18      	ldr	r2, [pc, #96]	; (8001f5c <HAL_I2C_MspInit+0xb4>)
 8001efa:	f043 0302 	orr.w	r3, r3, #2
 8001efe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f00:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <HAL_I2C_MspInit+0xb4>)
 8001f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001f0c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f14:	2312      	movs	r3, #18
 8001f16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f20:	2303      	movs	r3, #3
 8001f22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f26:	2304      	movs	r3, #4
 8001f28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f30:	4619      	mov	r1, r3
 8001f32:	480b      	ldr	r0, [pc, #44]	; (8001f60 <HAL_I2C_MspInit+0xb8>)
 8001f34:	f000 ff52 	bl	8002ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_I2C_MspInit+0xb4>)
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3c:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <HAL_I2C_MspInit+0xb4>)
 8001f3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f42:	6593      	str	r3, [r2, #88]	; 0x58
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_I2C_MspInit+0xb4>)
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f50:	bf00      	nop
 8001f52:	37b0      	adds	r7, #176	; 0xb0
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40005800 	.word	0x40005800
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	48000400 	.word	0x48000400

08001f64 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0b      	ldr	r2, [pc, #44]	; (8001fa0 <HAL_I2C_MspDeInit+0x3c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d10f      	bne.n	8001f96 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001f76:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_I2C_MspDeInit+0x40>)
 8001f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7a:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <HAL_I2C_MspDeInit+0x40>)
 8001f7c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f80:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001f82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f86:	4808      	ldr	r0, [pc, #32]	; (8001fa8 <HAL_I2C_MspDeInit+0x44>)
 8001f88:	f001 f8d2 	bl	8003130 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001f8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f90:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <HAL_I2C_MspDeInit+0x44>)
 8001f92:	f001 f8cd 	bl	8003130 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40005800 	.word	0x40005800
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	48000400 	.word	0x48000400

08001fac <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	; 0x28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a17      	ldr	r2, [pc, #92]	; (8002028 <HAL_QSPI_MspInit+0x7c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d128      	bne.n	8002020 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001fce:	4b17      	ldr	r3, [pc, #92]	; (800202c <HAL_QSPI_MspInit+0x80>)
 8001fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd2:	4a16      	ldr	r2, [pc, #88]	; (800202c <HAL_QSPI_MspInit+0x80>)
 8001fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd8:	6513      	str	r3, [r2, #80]	; 0x50
 8001fda:	4b14      	ldr	r3, [pc, #80]	; (800202c <HAL_QSPI_MspInit+0x80>)
 8001fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fe6:	4b11      	ldr	r3, [pc, #68]	; (800202c <HAL_QSPI_MspInit+0x80>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fea:	4a10      	ldr	r2, [pc, #64]	; (800202c <HAL_QSPI_MspInit+0x80>)
 8001fec:	f043 0310 	orr.w	r3, r3, #16
 8001ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	; (800202c <HAL_QSPI_MspInit+0x80>)
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001ffe:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002002:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200c:	2303      	movs	r3, #3
 800200e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002010:	230a      	movs	r3, #10
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	4619      	mov	r1, r3
 800201a:	4805      	ldr	r0, [pc, #20]	; (8002030 <HAL_QSPI_MspInit+0x84>)
 800201c:	f000 fede 	bl	8002ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002020:	bf00      	nop
 8002022:	3728      	adds	r7, #40	; 0x28
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	a0001000 	.word	0xa0001000
 800202c:	40021000 	.word	0x40021000
 8002030:	48001000 	.word	0x48001000

08002034 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b0a4      	sub	sp, #144	; 0x90
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800203c:	f107 0308 	add.w	r3, r7, #8
 8002040:	2288      	movs	r2, #136	; 0x88
 8002042:	2100      	movs	r1, #0
 8002044:	4618      	mov	r0, r3
 8002046:	f010 fa74 	bl	8012532 <memset>
  if(hrtc->Instance==RTC)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a10      	ldr	r2, [pc, #64]	; (8002090 <HAL_RTC_MspInit+0x5c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d118      	bne.n	8002086 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002058:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800205a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800205e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002062:	f107 0308 	add.w	r3, r7, #8
 8002066:	4618      	mov	r0, r3
 8002068:	f002 ffe6 	bl	8005038 <HAL_RCCEx_PeriphCLKConfig>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002072:	f7ff fc93 	bl	800199c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002076:	4b07      	ldr	r3, [pc, #28]	; (8002094 <HAL_RTC_MspInit+0x60>)
 8002078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207c:	4a05      	ldr	r2, [pc, #20]	; (8002094 <HAL_RTC_MspInit+0x60>)
 800207e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002082:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002086:	bf00      	nop
 8002088:	3790      	adds	r7, #144	; 0x90
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40002800 	.word	0x40002800
 8002094:	40021000 	.word	0x40021000

08002098 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	; 0x28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1b      	ldr	r2, [pc, #108]	; (8002124 <HAL_SPI_MspInit+0x8c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d130      	bne.n	800211c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80020ba:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <HAL_SPI_MspInit+0x90>)
 80020bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020be:	4a1a      	ldr	r2, [pc, #104]	; (8002128 <HAL_SPI_MspInit+0x90>)
 80020c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020c4:	6593      	str	r3, [r2, #88]	; 0x58
 80020c6:	4b18      	ldr	r3, [pc, #96]	; (8002128 <HAL_SPI_MspInit+0x90>)
 80020c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d2:	4b15      	ldr	r3, [pc, #84]	; (8002128 <HAL_SPI_MspInit+0x90>)
 80020d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d6:	4a14      	ldr	r2, [pc, #80]	; (8002128 <HAL_SPI_MspInit+0x90>)
 80020d8:	f043 0304 	orr.w	r3, r3, #4
 80020dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020de:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_SPI_MspInit+0x90>)
 80020e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80020ea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80020ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f0:	2302      	movs	r3, #2
 80020f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f8:	2303      	movs	r3, #3
 80020fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80020fc:	2306      	movs	r3, #6
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	4619      	mov	r1, r3
 8002106:	4809      	ldr	r0, [pc, #36]	; (800212c <HAL_SPI_MspInit+0x94>)
 8002108:	f000 fe68 	bl	8002ddc <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 800210c:	2200      	movs	r2, #0
 800210e:	2105      	movs	r1, #5
 8002110:	2033      	movs	r0, #51	; 0x33
 8002112:	f000 fc9f 	bl	8002a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002116:	2033      	movs	r0, #51	; 0x33
 8002118:	f000 fcb8 	bl	8002a8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800211c:	bf00      	nop
 800211e:	3728      	adds	r7, #40	; 0x28
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40003c00 	.word	0x40003c00
 8002128:	40021000 	.word	0x40021000
 800212c:	48000800 	.word	0x48000800

08002130 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <HAL_SPI_MspDeInit+0x38>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d10d      	bne.n	800215e <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_SPI_MspDeInit+0x3c>)
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	4a09      	ldr	r2, [pc, #36]	; (800216c <HAL_SPI_MspDeInit+0x3c>)
 8002148:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800214c:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 800214e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002152:	4807      	ldr	r0, [pc, #28]	; (8002170 <HAL_SPI_MspDeInit+0x40>)
 8002154:	f000 ffec 	bl	8003130 <HAL_GPIO_DeInit>

    /* SPI3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
 8002158:	2033      	movs	r0, #51	; 0x33
 800215a:	f000 fca5 	bl	8002aa8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40003c00 	.word	0x40003c00
 800216c:	40021000 	.word	0x40021000
 8002170:	48000800 	.word	0x48000800

08002174 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <HAL_TIM_Base_MspInit+0x44>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d113      	bne.n	80021ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002186:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <HAL_TIM_Base_MspInit+0x48>)
 8002188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218a:	4a0c      	ldr	r2, [pc, #48]	; (80021bc <HAL_TIM_Base_MspInit+0x48>)
 800218c:	f043 0320 	orr.w	r3, r3, #32
 8002190:	6593      	str	r3, [r2, #88]	; 0x58
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_TIM_Base_MspInit+0x48>)
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	2105      	movs	r1, #5
 80021a2:	2037      	movs	r0, #55	; 0x37
 80021a4:	f000 fc56 	bl	8002a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80021a8:	2037      	movs	r0, #55	; 0x37
 80021aa:	f000 fc6f 	bl	8002a8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80021ae:	bf00      	nop
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40001400 	.word	0x40001400
 80021bc:	40021000 	.word	0x40021000

080021c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b0ae      	sub	sp, #184	; 0xb8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021d8:	f107 031c 	add.w	r3, r7, #28
 80021dc:	2288      	movs	r2, #136	; 0x88
 80021de:	2100      	movs	r1, #0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f010 f9a6 	bl	8012532 <memset>
  if(huart->Instance==USART1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a46      	ldr	r2, [pc, #280]	; (8002304 <HAL_UART_MspInit+0x144>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d143      	bne.n	8002278 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021f0:	2301      	movs	r3, #1
 80021f2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021f4:	2300      	movs	r3, #0
 80021f6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021f8:	f107 031c 	add.w	r3, r7, #28
 80021fc:	4618      	mov	r0, r3
 80021fe:	f002 ff1b 	bl	8005038 <HAL_RCCEx_PeriphCLKConfig>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002208:	f7ff fbc8 	bl	800199c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800220c:	4b3e      	ldr	r3, [pc, #248]	; (8002308 <HAL_UART_MspInit+0x148>)
 800220e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002210:	4a3d      	ldr	r2, [pc, #244]	; (8002308 <HAL_UART_MspInit+0x148>)
 8002212:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002216:	6613      	str	r3, [r2, #96]	; 0x60
 8002218:	4b3b      	ldr	r3, [pc, #236]	; (8002308 <HAL_UART_MspInit+0x148>)
 800221a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800221c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002224:	4b38      	ldr	r3, [pc, #224]	; (8002308 <HAL_UART_MspInit+0x148>)
 8002226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002228:	4a37      	ldr	r2, [pc, #220]	; (8002308 <HAL_UART_MspInit+0x148>)
 800222a:	f043 0302 	orr.w	r3, r3, #2
 800222e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002230:	4b35      	ldr	r3, [pc, #212]	; (8002308 <HAL_UART_MspInit+0x148>)
 8002232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800223c:	23c0      	movs	r3, #192	; 0xc0
 800223e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002242:	2302      	movs	r3, #2
 8002244:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224e:	2303      	movs	r3, #3
 8002250:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002254:	2307      	movs	r3, #7
 8002256:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800225e:	4619      	mov	r1, r3
 8002260:	482a      	ldr	r0, [pc, #168]	; (800230c <HAL_UART_MspInit+0x14c>)
 8002262:	f000 fdbb 	bl	8002ddc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	2105      	movs	r1, #5
 800226a:	2025      	movs	r0, #37	; 0x25
 800226c:	f000 fbf2 	bl	8002a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002270:	2025      	movs	r0, #37	; 0x25
 8002272:	f000 fc0b 	bl	8002a8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002276:	e040      	b.n	80022fa <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART3)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a24      	ldr	r2, [pc, #144]	; (8002310 <HAL_UART_MspInit+0x150>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d13b      	bne.n	80022fa <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002282:	2304      	movs	r3, #4
 8002284:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002286:	2300      	movs	r3, #0
 8002288:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800228a:	f107 031c 	add.w	r3, r7, #28
 800228e:	4618      	mov	r0, r3
 8002290:	f002 fed2 	bl	8005038 <HAL_RCCEx_PeriphCLKConfig>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_UART_MspInit+0xde>
      Error_Handler();
 800229a:	f7ff fb7f 	bl	800199c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800229e:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <HAL_UART_MspInit+0x148>)
 80022a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a2:	4a19      	ldr	r2, [pc, #100]	; (8002308 <HAL_UART_MspInit+0x148>)
 80022a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a8:	6593      	str	r3, [r2, #88]	; 0x58
 80022aa:	4b17      	ldr	r3, [pc, #92]	; (8002308 <HAL_UART_MspInit+0x148>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022b6:	4b14      	ldr	r3, [pc, #80]	; (8002308 <HAL_UART_MspInit+0x148>)
 80022b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ba:	4a13      	ldr	r2, [pc, #76]	; (8002308 <HAL_UART_MspInit+0x148>)
 80022bc:	f043 0308 	orr.w	r3, r3, #8
 80022c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_UART_MspInit+0x148>)
 80022c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80022ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e2:	2303      	movs	r3, #3
 80022e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022e8:	2307      	movs	r3, #7
 80022ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80022f2:	4619      	mov	r1, r3
 80022f4:	4807      	ldr	r0, [pc, #28]	; (8002314 <HAL_UART_MspInit+0x154>)
 80022f6:	f000 fd71 	bl	8002ddc <HAL_GPIO_Init>
}
 80022fa:	bf00      	nop
 80022fc:	37b8      	adds	r7, #184	; 0xb8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40013800 	.word	0x40013800
 8002308:	40021000 	.word	0x40021000
 800230c:	48000400 	.word	0x48000400
 8002310:	40004800 	.word	0x40004800
 8002314:	48000c00 	.word	0x48000c00

08002318 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b0ac      	sub	sp, #176	; 0xb0
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	2288      	movs	r2, #136	; 0x88
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f010 f8fa 	bl	8012532 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002346:	d17c      	bne.n	8002442 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002348:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800234c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800234e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002352:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002356:	2301      	movs	r3, #1
 8002358:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800235a:	2301      	movs	r3, #1
 800235c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800235e:	2318      	movs	r3, #24
 8002360:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002362:	2307      	movs	r3, #7
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002366:	2302      	movs	r3, #2
 8002368:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800236a:	2302      	movs	r3, #2
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800236e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002372:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	4618      	mov	r0, r3
 800237a:	f002 fe5d 	bl	8005038 <HAL_RCCEx_PeriphCLKConfig>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002384:	f7ff fb0a 	bl	800199c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002388:	4b30      	ldr	r3, [pc, #192]	; (800244c <HAL_PCD_MspInit+0x134>)
 800238a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238c:	4a2f      	ldr	r2, [pc, #188]	; (800244c <HAL_PCD_MspInit+0x134>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002394:	4b2d      	ldr	r3, [pc, #180]	; (800244c <HAL_PCD_MspInit+0x134>)
 8002396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80023a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023a8:	2300      	movs	r3, #0
 80023aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023b8:	4619      	mov	r1, r3
 80023ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023be:	f000 fd0d 	bl	8002ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80023c2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80023c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	2302      	movs	r3, #2
 80023cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d6:	2303      	movs	r3, #3
 80023d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80023dc:	230a      	movs	r3, #10
 80023de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023e6:	4619      	mov	r1, r3
 80023e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ec:	f000 fcf6 	bl	8002ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80023f0:	4b16      	ldr	r3, [pc, #88]	; (800244c <HAL_PCD_MspInit+0x134>)
 80023f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f4:	4a15      	ldr	r2, [pc, #84]	; (800244c <HAL_PCD_MspInit+0x134>)
 80023f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023fc:	4b13      	ldr	r3, [pc, #76]	; (800244c <HAL_PCD_MspInit+0x134>)
 80023fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002400:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002408:	4b10      	ldr	r3, [pc, #64]	; (800244c <HAL_PCD_MspInit+0x134>)
 800240a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d114      	bne.n	800243e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002414:	4b0d      	ldr	r3, [pc, #52]	; (800244c <HAL_PCD_MspInit+0x134>)
 8002416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002418:	4a0c      	ldr	r2, [pc, #48]	; (800244c <HAL_PCD_MspInit+0x134>)
 800241a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241e:	6593      	str	r3, [r2, #88]	; 0x58
 8002420:	4b0a      	ldr	r3, [pc, #40]	; (800244c <HAL_PCD_MspInit+0x134>)
 8002422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800242c:	f001 ff18 	bl	8004260 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_PCD_MspInit+0x134>)
 8002432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002434:	4a05      	ldr	r2, [pc, #20]	; (800244c <HAL_PCD_MspInit+0x134>)
 8002436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800243a:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800243c:	e001      	b.n	8002442 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800243e:	f001 ff0f 	bl	8004260 <HAL_PWREx_EnableVddUSB>
}
 8002442:	bf00      	nop
 8002444:	37b0      	adds	r7, #176	; 0xb0
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000

08002450 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08e      	sub	sp, #56	; 0x38
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800245e:	4b34      	ldr	r3, [pc, #208]	; (8002530 <HAL_InitTick+0xe0>)
 8002460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002462:	4a33      	ldr	r2, [pc, #204]	; (8002530 <HAL_InitTick+0xe0>)
 8002464:	f043 0310 	orr.w	r3, r3, #16
 8002468:	6593      	str	r3, [r2, #88]	; 0x58
 800246a:	4b31      	ldr	r3, [pc, #196]	; (8002530 <HAL_InitTick+0xe0>)
 800246c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246e:	f003 0310 	and.w	r3, r3, #16
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002476:	f107 0210 	add.w	r2, r7, #16
 800247a:	f107 0314 	add.w	r3, r7, #20
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f002 fd47 	bl	8004f14 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d103      	bne.n	8002498 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002490:	f002 fd14 	bl	8004ebc <HAL_RCC_GetPCLK1Freq>
 8002494:	6378      	str	r0, [r7, #52]	; 0x34
 8002496:	e004      	b.n	80024a2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002498:	f002 fd10 	bl	8004ebc <HAL_RCC_GetPCLK1Freq>
 800249c:	4603      	mov	r3, r0
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a4:	4a23      	ldr	r2, [pc, #140]	; (8002534 <HAL_InitTick+0xe4>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	0c9b      	lsrs	r3, r3, #18
 80024ac:	3b01      	subs	r3, #1
 80024ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80024b0:	4b21      	ldr	r3, [pc, #132]	; (8002538 <HAL_InitTick+0xe8>)
 80024b2:	4a22      	ldr	r2, [pc, #136]	; (800253c <HAL_InitTick+0xec>)
 80024b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80024b6:	4b20      	ldr	r3, [pc, #128]	; (8002538 <HAL_InitTick+0xe8>)
 80024b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024bc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80024be:	4a1e      	ldr	r2, [pc, #120]	; (8002538 <HAL_InitTick+0xe8>)
 80024c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80024c4:	4b1c      	ldr	r3, [pc, #112]	; (8002538 <HAL_InitTick+0xe8>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ca:	4b1b      	ldr	r3, [pc, #108]	; (8002538 <HAL_InitTick+0xe8>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d0:	4b19      	ldr	r3, [pc, #100]	; (8002538 <HAL_InitTick+0xe8>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80024d6:	4818      	ldr	r0, [pc, #96]	; (8002538 <HAL_InitTick+0xe8>)
 80024d8:	f005 f8c1 	bl	800765e <HAL_TIM_Base_Init>
 80024dc:	4603      	mov	r3, r0
 80024de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80024e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d11b      	bne.n	8002522 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80024ea:	4813      	ldr	r0, [pc, #76]	; (8002538 <HAL_InitTick+0xe8>)
 80024ec:	f005 f90e 	bl	800770c <HAL_TIM_Base_Start_IT>
 80024f0:	4603      	mov	r3, r0
 80024f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80024f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d111      	bne.n	8002522 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024fe:	2036      	movs	r0, #54	; 0x36
 8002500:	f000 fac4 	bl	8002a8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b0f      	cmp	r3, #15
 8002508:	d808      	bhi.n	800251c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800250a:	2200      	movs	r2, #0
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	2036      	movs	r0, #54	; 0x36
 8002510:	f000 faa0 	bl	8002a54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002514:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <HAL_InitTick+0xf0>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e002      	b.n	8002522 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002522:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002526:	4618      	mov	r0, r3
 8002528:	3738      	adds	r7, #56	; 0x38
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40021000 	.word	0x40021000
 8002534:	431bde83 	.word	0x431bde83
 8002538:	20000bc8 	.word	0x20000bc8
 800253c:	40001000 	.word	0x40001000
 8002540:	20000014 	.word	0x20000014

08002544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002548:	e7fe      	b.n	8002548 <NMI_Handler+0x4>

0800254a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800254e:	e7fe      	b.n	800254e <HardFault_Handler+0x4>

08002550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002554:	e7fe      	b.n	8002554 <MemManage_Handler+0x4>

08002556 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800255a:	e7fe      	b.n	800255a <BusFault_Handler+0x4>

0800255c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002560:	e7fe      	b.n	8002560 <UsageFault_Handler+0x4>

08002562 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ISM43362_DRDY_EXTI1_Pin);
 8002574:	2002      	movs	r0, #2
 8002576:	f000 feff 	bl	8003378 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}

0800257e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002582:	2020      	movs	r0, #32
 8002584:	f000 fef8 	bl	8003378 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002588:	2040      	movs	r0, #64	; 0x40
 800258a:	f000 fef5 	bl	8003378 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800258e:	2080      	movs	r0, #128	; 0x80
 8002590:	f000 fef2 	bl	8003378 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002594:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002598:	f000 feee 	bl	8003378 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}

080025a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025a4:	4802      	ldr	r0, [pc, #8]	; (80025b0 <USART1_IRQHandler+0x10>)
 80025a6:	f005 fccf 	bl	8007f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000270 	.word	0x20000270

080025b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80025b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80025bc:	f000 fedc 	bl	8003378 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80025c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80025c4:	f000 fed8 	bl	8003378 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BOTON_Pin);
 80025c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80025cc:	f000 fed4 	bl	8003378 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80025d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025d4:	f000 fed0 	bl	8003378 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80025d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80025dc:	f000 fecc 	bl	8003378 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025e8:	4802      	ldr	r0, [pc, #8]	; (80025f4 <TIM6_DAC_IRQHandler+0x10>)
 80025ea:	f005 f8ff 	bl	80077ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000bc8 	.word	0x20000bc8

080025f8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
  ulHighFrequencyTimerTicks++;
 80025fc:	4b04      	ldr	r3, [pc, #16]	; (8002610 <TIM7_IRQHandler+0x18>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	3301      	adds	r3, #1
 8002602:	4a03      	ldr	r2, [pc, #12]	; (8002610 <TIM7_IRQHandler+0x18>)
 8002604:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002606:	4803      	ldr	r0, [pc, #12]	; (8002614 <TIM7_IRQHandler+0x1c>)
 8002608:	f005 f8f0 	bl	80077ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	bd80      	pop	{r7, pc}
 8002610:	200007cc 	.word	0x200007cc
 8002614:	20000224 	.word	0x20000224

08002618 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return 1;
 800261c:	2301      	movs	r3, #1
}
 800261e:	4618      	mov	r0, r3
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <_kill>:

int _kill(int pid, int sig)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002632:	f00f fe11 	bl	8012258 <__errno>
 8002636:	4603      	mov	r3, r0
 8002638:	2216      	movs	r2, #22
 800263a:	601a      	str	r2, [r3, #0]
  return -1;
 800263c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <_exit>:

void _exit (int status)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002650:	f04f 31ff 	mov.w	r1, #4294967295
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff ffe7 	bl	8002628 <_kill>
  while (1) {}    /* Make sure we hang here */
 800265a:	e7fe      	b.n	800265a <_exit+0x12>

0800265c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	e00a      	b.n	8002684 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800266e:	f3af 8000 	nop.w
 8002672:	4601      	mov	r1, r0
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	60ba      	str	r2, [r7, #8]
 800267a:	b2ca      	uxtb	r2, r1
 800267c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	3301      	adds	r3, #1
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	429a      	cmp	r2, r3
 800268a:	dbf0      	blt.n	800266e <_read+0x12>
  }

  return len;
 800268c:	687b      	ldr	r3, [r7, #4]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800269e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026be:	605a      	str	r2, [r3, #4]
  return 0;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <_isatty>:

int _isatty(int file)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026d6:	2301      	movs	r3, #1
}
 80026d8:	4618      	mov	r0, r3
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002708:	4a14      	ldr	r2, [pc, #80]	; (800275c <_sbrk+0x5c>)
 800270a:	4b15      	ldr	r3, [pc, #84]	; (8002760 <_sbrk+0x60>)
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002714:	4b13      	ldr	r3, [pc, #76]	; (8002764 <_sbrk+0x64>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d102      	bne.n	8002722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800271c:	4b11      	ldr	r3, [pc, #68]	; (8002764 <_sbrk+0x64>)
 800271e:	4a12      	ldr	r2, [pc, #72]	; (8002768 <_sbrk+0x68>)
 8002720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002722:	4b10      	ldr	r3, [pc, #64]	; (8002764 <_sbrk+0x64>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4413      	add	r3, r2
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	429a      	cmp	r2, r3
 800272e:	d207      	bcs.n	8002740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002730:	f00f fd92 	bl	8012258 <__errno>
 8002734:	4603      	mov	r3, r0
 8002736:	220c      	movs	r2, #12
 8002738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800273a:	f04f 33ff 	mov.w	r3, #4294967295
 800273e:	e009      	b.n	8002754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002740:	4b08      	ldr	r3, [pc, #32]	; (8002764 <_sbrk+0x64>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002746:	4b07      	ldr	r3, [pc, #28]	; (8002764 <_sbrk+0x64>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4413      	add	r3, r2
 800274e:	4a05      	ldr	r2, [pc, #20]	; (8002764 <_sbrk+0x64>)
 8002750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002752:	68fb      	ldr	r3, [r7, #12]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20018000 	.word	0x20018000
 8002760:	00000400 	.word	0x00000400
 8002764:	20000c14 	.word	0x20000c14
 8002768:	20004f30 	.word	0x20004f30

0800276c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002770:	4b06      	ldr	r3, [pc, #24]	; (800278c <SystemInit+0x20>)
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002776:	4a05      	ldr	r2, [pc, #20]	; (800278c <SystemInit+0x20>)
 8002778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800277c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002794:	f7ff ffea 	bl	800276c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002798:	480c      	ldr	r0, [pc, #48]	; (80027cc <LoopForever+0x6>)
  ldr r1, =_edata
 800279a:	490d      	ldr	r1, [pc, #52]	; (80027d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800279c:	4a0d      	ldr	r2, [pc, #52]	; (80027d4 <LoopForever+0xe>)
  movs r3, #0
 800279e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027a0:	e002      	b.n	80027a8 <LoopCopyDataInit>

080027a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027a6:	3304      	adds	r3, #4

080027a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027ac:	d3f9      	bcc.n	80027a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ae:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027b0:	4c0a      	ldr	r4, [pc, #40]	; (80027dc <LoopForever+0x16>)
  movs r3, #0
 80027b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b4:	e001      	b.n	80027ba <LoopFillZerobss>

080027b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027b8:	3204      	adds	r2, #4

080027ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027bc:	d3fb      	bcc.n	80027b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027be:	f00f fe59 	bl	8012474 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027c2:	f7fd ff21 	bl	8000608 <main>

080027c6 <LoopForever>:

LoopForever:
    b LoopForever
 80027c6:	e7fe      	b.n	80027c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80027cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027d0:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80027d4:	08015798 	.word	0x08015798
  ldr r2, =_sbss
 80027d8:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80027dc:	20004f30 	.word	0x20004f30

080027e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027e0:	e7fe      	b.n	80027e0 <ADC1_2_IRQHandler>

080027e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ec:	2003      	movs	r0, #3
 80027ee:	f000 f926 	bl	8002a3e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027f2:	200f      	movs	r0, #15
 80027f4:	f7ff fe2c 	bl	8002450 <HAL_InitTick>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	71fb      	strb	r3, [r7, #7]
 8002802:	e001      	b.n	8002808 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002804:	f7ff fac4 	bl	8001d90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002808:	79fb      	ldrb	r3, [r7, #7]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002818:	4b06      	ldr	r3, [pc, #24]	; (8002834 <HAL_IncTick+0x20>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_IncTick+0x24>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4413      	add	r3, r2
 8002824:	4a04      	ldr	r2, [pc, #16]	; (8002838 <HAL_IncTick+0x24>)
 8002826:	6013      	str	r3, [r2, #0]
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20000018 	.word	0x20000018
 8002838:	20000c18 	.word	0x20000c18

0800283c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return uwTick;
 8002840:	4b03      	ldr	r3, [pc, #12]	; (8002850 <HAL_GetTick+0x14>)
 8002842:	681b      	ldr	r3, [r3, #0]
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000c18 	.word	0x20000c18

08002854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800285c:	f7ff ffee 	bl	800283c <HAL_GetTick>
 8002860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286c:	d005      	beq.n	800287a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800286e:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <HAL_Delay+0x44>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4413      	add	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800287a:	bf00      	nop
 800287c:	f7ff ffde 	bl	800283c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	429a      	cmp	r2, r3
 800288a:	d8f7      	bhi.n	800287c <HAL_Delay+0x28>
  {
  }
}
 800288c:	bf00      	nop
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000018 	.word	0x20000018

0800289c <__NVIC_SetPriorityGrouping>:
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028ac:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <__NVIC_SetPriorityGrouping+0x44>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028b8:	4013      	ands	r3, r2
 80028ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ce:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <__NVIC_SetPriorityGrouping+0x44>)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	60d3      	str	r3, [r2, #12]
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	e000ed00 	.word	0xe000ed00

080028e4 <__NVIC_GetPriorityGrouping>:
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028e8:	4b04      	ldr	r3, [pc, #16]	; (80028fc <__NVIC_GetPriorityGrouping+0x18>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	0a1b      	lsrs	r3, r3, #8
 80028ee:	f003 0307 	and.w	r3, r3, #7
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <__NVIC_EnableIRQ>:
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800290a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290e:	2b00      	cmp	r3, #0
 8002910:	db0b      	blt.n	800292a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	f003 021f 	and.w	r2, r3, #31
 8002918:	4907      	ldr	r1, [pc, #28]	; (8002938 <__NVIC_EnableIRQ+0x38>)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	095b      	lsrs	r3, r3, #5
 8002920:	2001      	movs	r0, #1
 8002922:	fa00 f202 	lsl.w	r2, r0, r2
 8002926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	e000e100 	.word	0xe000e100

0800293c <__NVIC_DisableIRQ>:
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	2b00      	cmp	r3, #0
 800294c:	db12      	blt.n	8002974 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	f003 021f 	and.w	r2, r3, #31
 8002954:	490a      	ldr	r1, [pc, #40]	; (8002980 <__NVIC_DisableIRQ+0x44>)
 8002956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	2001      	movs	r0, #1
 800295e:	fa00 f202 	lsl.w	r2, r0, r2
 8002962:	3320      	adds	r3, #32
 8002964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002968:	f3bf 8f4f 	dsb	sy
}
 800296c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800296e:	f3bf 8f6f 	isb	sy
}
 8002972:	bf00      	nop
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000e100 	.word	0xe000e100

08002984 <__NVIC_SetPriority>:
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	6039      	str	r1, [r7, #0]
 800298e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002994:	2b00      	cmp	r3, #0
 8002996:	db0a      	blt.n	80029ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	b2da      	uxtb	r2, r3
 800299c:	490c      	ldr	r1, [pc, #48]	; (80029d0 <__NVIC_SetPriority+0x4c>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	0112      	lsls	r2, r2, #4
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	440b      	add	r3, r1
 80029a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80029ac:	e00a      	b.n	80029c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	4908      	ldr	r1, [pc, #32]	; (80029d4 <__NVIC_SetPriority+0x50>)
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	3b04      	subs	r3, #4
 80029bc:	0112      	lsls	r2, r2, #4
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	440b      	add	r3, r1
 80029c2:	761a      	strb	r2, [r3, #24]
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000e100 	.word	0xe000e100
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <NVIC_EncodePriority>:
{
 80029d8:	b480      	push	{r7}
 80029da:	b089      	sub	sp, #36	; 0x24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f1c3 0307 	rsb	r3, r3, #7
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	bf28      	it	cs
 80029f6:	2304      	movcs	r3, #4
 80029f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3304      	adds	r3, #4
 80029fe:	2b06      	cmp	r3, #6
 8002a00:	d902      	bls.n	8002a08 <NVIC_EncodePriority+0x30>
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	3b03      	subs	r3, #3
 8002a06:	e000      	b.n	8002a0a <NVIC_EncodePriority+0x32>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43da      	mvns	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a20:	f04f 31ff 	mov.w	r1, #4294967295
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2a:	43d9      	mvns	r1, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a30:	4313      	orrs	r3, r2
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3724      	adds	r7, #36	; 0x24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff ff28 	bl	800289c <__NVIC_SetPriorityGrouping>
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a66:	f7ff ff3d 	bl	80028e4 <__NVIC_GetPriorityGrouping>
 8002a6a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	68b9      	ldr	r1, [r7, #8]
 8002a70:	6978      	ldr	r0, [r7, #20]
 8002a72:	f7ff ffb1 	bl	80029d8 <NVIC_EncodePriority>
 8002a76:	4602      	mov	r2, r0
 8002a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff ff80 	bl	8002984 <__NVIC_SetPriority>
}
 8002a84:	bf00      	nop
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff ff30 	bl	8002900 <__NVIC_EnableIRQ>
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff ff40 	bl	800293c <__NVIC_DisableIRQ>
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e0ac      	b.n	8002c30 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 f8b2 	bl	8002c44 <DFSDM_GetChannelFromInstance>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4a55      	ldr	r2, [pc, #340]	; (8002c38 <HAL_DFSDM_ChannelInit+0x174>)
 8002ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e09f      	b.n	8002c30 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7ff f975 	bl	8001de0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002af6:	4b51      	ldr	r3, [pc, #324]	; (8002c3c <HAL_DFSDM_ChannelInit+0x178>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	3301      	adds	r3, #1
 8002afc:	4a4f      	ldr	r2, [pc, #316]	; (8002c3c <HAL_DFSDM_ChannelInit+0x178>)
 8002afe:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002b00:	4b4e      	ldr	r3, [pc, #312]	; (8002c3c <HAL_DFSDM_ChannelInit+0x178>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d125      	bne.n	8002b54 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002b08:	4b4d      	ldr	r3, [pc, #308]	; (8002c40 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a4c      	ldr	r2, [pc, #304]	; (8002c40 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b12:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002b14:	4b4a      	ldr	r3, [pc, #296]	; (8002c40 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	4948      	ldr	r1, [pc, #288]	; (8002c40 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002b22:	4b47      	ldr	r3, [pc, #284]	; (8002c40 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a46      	ldr	r2, [pc, #280]	; (8002c40 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b28:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002b2c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	791b      	ldrb	r3, [r3, #4]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d108      	bne.n	8002b48 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002b36:	4b42      	ldr	r3, [pc, #264]	; (8002c40 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	041b      	lsls	r3, r3, #16
 8002b42:	493f      	ldr	r1, [pc, #252]	; (8002c40 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002b48:	4b3d      	ldr	r3, [pc, #244]	; (8002c40 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a3c      	ldr	r2, [pc, #240]	; (8002c40 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b52:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002b62:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6819      	ldr	r1, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b72:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002b78:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 020f 	bic.w	r2, r2, #15
 8002b90:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6819      	ldr	r1, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002bb8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6899      	ldr	r1, [r3, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f002 0207 	and.w	r2, r2, #7
 8002be4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6859      	ldr	r1, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c10:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 f810 	bl	8002c44 <DFSDM_GetChannelFromInstance>
 8002c24:	4602      	mov	r2, r0
 8002c26:	4904      	ldr	r1, [pc, #16]	; (8002c38 <HAL_DFSDM_ChannelInit+0x174>)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	20000c20 	.word	0x20000c20
 8002c3c:	20000c1c 	.word	0x20000c1c
 8002c40:	40016000 	.word	0x40016000

08002c44 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a1c      	ldr	r2, [pc, #112]	; (8002cc0 <DFSDM_GetChannelFromInstance+0x7c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d102      	bne.n	8002c5a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	e02b      	b.n	8002cb2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a19      	ldr	r2, [pc, #100]	; (8002cc4 <DFSDM_GetChannelFromInstance+0x80>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d102      	bne.n	8002c68 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002c62:	2301      	movs	r3, #1
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	e024      	b.n	8002cb2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a17      	ldr	r2, [pc, #92]	; (8002cc8 <DFSDM_GetChannelFromInstance+0x84>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d102      	bne.n	8002c76 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002c70:	2302      	movs	r3, #2
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	e01d      	b.n	8002cb2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a14      	ldr	r2, [pc, #80]	; (8002ccc <DFSDM_GetChannelFromInstance+0x88>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d102      	bne.n	8002c84 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002c7e:	2304      	movs	r3, #4
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	e016      	b.n	8002cb2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a12      	ldr	r2, [pc, #72]	; (8002cd0 <DFSDM_GetChannelFromInstance+0x8c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d102      	bne.n	8002c92 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002c8c:	2305      	movs	r3, #5
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	e00f      	b.n	8002cb2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a0f      	ldr	r2, [pc, #60]	; (8002cd4 <DFSDM_GetChannelFromInstance+0x90>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d102      	bne.n	8002ca0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002c9a:	2306      	movs	r3, #6
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	e008      	b.n	8002cb2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a0d      	ldr	r2, [pc, #52]	; (8002cd8 <DFSDM_GetChannelFromInstance+0x94>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d102      	bne.n	8002cae <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002ca8:	2307      	movs	r3, #7
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	e001      	b.n	8002cb2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	40016000 	.word	0x40016000
 8002cc4:	40016020 	.word	0x40016020
 8002cc8:	40016040 	.word	0x40016040
 8002ccc:	40016080 	.word	0x40016080
 8002cd0:	400160a0 	.word	0x400160a0
 8002cd4:	400160c0 	.word	0x400160c0
 8002cd8:	400160e0 	.word	0x400160e0

08002cdc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d008      	beq.n	8002d06 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e022      	b.n	8002d4c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 020e 	bic.w	r2, r2, #14
 8002d14:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0201 	bic.w	r2, r2, #1
 8002d24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f003 021c 	and.w	r2, r3, #28
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	2101      	movs	r1, #1
 8002d34:	fa01 f202 	lsl.w	r2, r1, r2
 8002d38:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d60:	2300      	movs	r3, #0
 8002d62:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d005      	beq.n	8002d7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2204      	movs	r2, #4
 8002d74:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
 8002d7a:	e029      	b.n	8002dd0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 020e 	bic.w	r2, r2, #14
 8002d8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0201 	bic.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da0:	f003 021c 	and.w	r2, r3, #28
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	2101      	movs	r1, #1
 8002daa:	fa01 f202 	lsl.w	r2, r1, r2
 8002dae:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	4798      	blx	r3
    }
  }
  return status;
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dea:	e17f      	b.n	80030ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	2101      	movs	r1, #1
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	fa01 f303 	lsl.w	r3, r1, r3
 8002df8:	4013      	ands	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 8171 	beq.w	80030e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d00b      	beq.n	8002e24 <HAL_GPIO_Init+0x48>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d007      	beq.n	8002e24 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e18:	2b11      	cmp	r3, #17
 8002e1a:	d003      	beq.n	8002e24 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b12      	cmp	r3, #18
 8002e22:	d130      	bne.n	8002e86 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	2203      	movs	r2, #3
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4013      	ands	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	091b      	lsrs	r3, r3, #4
 8002e70:	f003 0201 	and.w	r2, r3, #1
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	2b03      	cmp	r3, #3
 8002e90:	d118      	bne.n	8002ec4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002e98:	2201      	movs	r2, #1
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	08db      	lsrs	r3, r3, #3
 8002eae:	f003 0201 	and.w	r2, r3, #1
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	2203      	movs	r2, #3
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d003      	beq.n	8002f04 <HAL_GPIO_Init+0x128>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b12      	cmp	r3, #18
 8002f02:	d123      	bne.n	8002f4c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	08da      	lsrs	r2, r3, #3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3208      	adds	r2, #8
 8002f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f10:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	220f      	movs	r2, #15
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	4013      	ands	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	08da      	lsrs	r2, r3, #3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3208      	adds	r2, #8
 8002f46:	6939      	ldr	r1, [r7, #16]
 8002f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	2203      	movs	r2, #3
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4013      	ands	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 0203 	and.w	r2, r3, #3
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 80ac 	beq.w	80030e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f8e:	4b5f      	ldr	r3, [pc, #380]	; (800310c <HAL_GPIO_Init+0x330>)
 8002f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f92:	4a5e      	ldr	r2, [pc, #376]	; (800310c <HAL_GPIO_Init+0x330>)
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	6613      	str	r3, [r2, #96]	; 0x60
 8002f9a:	4b5c      	ldr	r3, [pc, #368]	; (800310c <HAL_GPIO_Init+0x330>)
 8002f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fa6:	4a5a      	ldr	r2, [pc, #360]	; (8003110 <HAL_GPIO_Init+0x334>)
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	089b      	lsrs	r3, r3, #2
 8002fac:	3302      	adds	r3, #2
 8002fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	220f      	movs	r2, #15
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fd0:	d025      	beq.n	800301e <HAL_GPIO_Init+0x242>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a4f      	ldr	r2, [pc, #316]	; (8003114 <HAL_GPIO_Init+0x338>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d01f      	beq.n	800301a <HAL_GPIO_Init+0x23e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a4e      	ldr	r2, [pc, #312]	; (8003118 <HAL_GPIO_Init+0x33c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d019      	beq.n	8003016 <HAL_GPIO_Init+0x23a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a4d      	ldr	r2, [pc, #308]	; (800311c <HAL_GPIO_Init+0x340>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d013      	beq.n	8003012 <HAL_GPIO_Init+0x236>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a4c      	ldr	r2, [pc, #304]	; (8003120 <HAL_GPIO_Init+0x344>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d00d      	beq.n	800300e <HAL_GPIO_Init+0x232>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a4b      	ldr	r2, [pc, #300]	; (8003124 <HAL_GPIO_Init+0x348>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d007      	beq.n	800300a <HAL_GPIO_Init+0x22e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a4a      	ldr	r2, [pc, #296]	; (8003128 <HAL_GPIO_Init+0x34c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d101      	bne.n	8003006 <HAL_GPIO_Init+0x22a>
 8003002:	2306      	movs	r3, #6
 8003004:	e00c      	b.n	8003020 <HAL_GPIO_Init+0x244>
 8003006:	2307      	movs	r3, #7
 8003008:	e00a      	b.n	8003020 <HAL_GPIO_Init+0x244>
 800300a:	2305      	movs	r3, #5
 800300c:	e008      	b.n	8003020 <HAL_GPIO_Init+0x244>
 800300e:	2304      	movs	r3, #4
 8003010:	e006      	b.n	8003020 <HAL_GPIO_Init+0x244>
 8003012:	2303      	movs	r3, #3
 8003014:	e004      	b.n	8003020 <HAL_GPIO_Init+0x244>
 8003016:	2302      	movs	r3, #2
 8003018:	e002      	b.n	8003020 <HAL_GPIO_Init+0x244>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <HAL_GPIO_Init+0x244>
 800301e:	2300      	movs	r3, #0
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	f002 0203 	and.w	r2, r2, #3
 8003026:	0092      	lsls	r2, r2, #2
 8003028:	4093      	lsls	r3, r2
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4313      	orrs	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003030:	4937      	ldr	r1, [pc, #220]	; (8003110 <HAL_GPIO_Init+0x334>)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	089b      	lsrs	r3, r3, #2
 8003036:	3302      	adds	r3, #2
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800303e:	4b3b      	ldr	r3, [pc, #236]	; (800312c <HAL_GPIO_Init+0x350>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	43db      	mvns	r3, r3
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4013      	ands	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003062:	4a32      	ldr	r2, [pc, #200]	; (800312c <HAL_GPIO_Init+0x350>)
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003068:	4b30      	ldr	r3, [pc, #192]	; (800312c <HAL_GPIO_Init+0x350>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	43db      	mvns	r3, r3
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	4013      	ands	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4313      	orrs	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800308c:	4a27      	ldr	r2, [pc, #156]	; (800312c <HAL_GPIO_Init+0x350>)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003092:	4b26      	ldr	r3, [pc, #152]	; (800312c <HAL_GPIO_Init+0x350>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	43db      	mvns	r3, r3
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4013      	ands	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030b6:	4a1d      	ldr	r2, [pc, #116]	; (800312c <HAL_GPIO_Init+0x350>)
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030bc:	4b1b      	ldr	r3, [pc, #108]	; (800312c <HAL_GPIO_Init+0x350>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	43db      	mvns	r3, r3
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4013      	ands	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030e0:	4a12      	ldr	r2, [pc, #72]	; (800312c <HAL_GPIO_Init+0x350>)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	3301      	adds	r3, #1
 80030ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	fa22 f303 	lsr.w	r3, r2, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f47f ae78 	bne.w	8002dec <HAL_GPIO_Init+0x10>
  }
}
 80030fc:	bf00      	nop
 80030fe:	bf00      	nop
 8003100:	371c      	adds	r7, #28
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40021000 	.word	0x40021000
 8003110:	40010000 	.word	0x40010000
 8003114:	48000400 	.word	0x48000400
 8003118:	48000800 	.word	0x48000800
 800311c:	48000c00 	.word	0x48000c00
 8003120:	48001000 	.word	0x48001000
 8003124:	48001400 	.word	0x48001400
 8003128:	48001800 	.word	0x48001800
 800312c:	40010400 	.word	0x40010400

08003130 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003130:	b480      	push	{r7}
 8003132:	b087      	sub	sp, #28
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800313a:	2300      	movs	r3, #0
 800313c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800313e:	e0cd      	b.n	80032dc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003140:	2201      	movs	r2, #1
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	4013      	ands	r3, r2
 800314c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80c0 	beq.w	80032d6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003156:	4a68      	ldr	r2, [pc, #416]	; (80032f8 <HAL_GPIO_DeInit+0x1c8>)
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	089b      	lsrs	r3, r3, #2
 800315c:	3302      	adds	r3, #2
 800315e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003162:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	220f      	movs	r2, #15
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4013      	ands	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800317e:	d025      	beq.n	80031cc <HAL_GPIO_DeInit+0x9c>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a5e      	ldr	r2, [pc, #376]	; (80032fc <HAL_GPIO_DeInit+0x1cc>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d01f      	beq.n	80031c8 <HAL_GPIO_DeInit+0x98>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a5d      	ldr	r2, [pc, #372]	; (8003300 <HAL_GPIO_DeInit+0x1d0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d019      	beq.n	80031c4 <HAL_GPIO_DeInit+0x94>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a5c      	ldr	r2, [pc, #368]	; (8003304 <HAL_GPIO_DeInit+0x1d4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d013      	beq.n	80031c0 <HAL_GPIO_DeInit+0x90>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a5b      	ldr	r2, [pc, #364]	; (8003308 <HAL_GPIO_DeInit+0x1d8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d00d      	beq.n	80031bc <HAL_GPIO_DeInit+0x8c>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a5a      	ldr	r2, [pc, #360]	; (800330c <HAL_GPIO_DeInit+0x1dc>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d007      	beq.n	80031b8 <HAL_GPIO_DeInit+0x88>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a59      	ldr	r2, [pc, #356]	; (8003310 <HAL_GPIO_DeInit+0x1e0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d101      	bne.n	80031b4 <HAL_GPIO_DeInit+0x84>
 80031b0:	2306      	movs	r3, #6
 80031b2:	e00c      	b.n	80031ce <HAL_GPIO_DeInit+0x9e>
 80031b4:	2307      	movs	r3, #7
 80031b6:	e00a      	b.n	80031ce <HAL_GPIO_DeInit+0x9e>
 80031b8:	2305      	movs	r3, #5
 80031ba:	e008      	b.n	80031ce <HAL_GPIO_DeInit+0x9e>
 80031bc:	2304      	movs	r3, #4
 80031be:	e006      	b.n	80031ce <HAL_GPIO_DeInit+0x9e>
 80031c0:	2303      	movs	r3, #3
 80031c2:	e004      	b.n	80031ce <HAL_GPIO_DeInit+0x9e>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e002      	b.n	80031ce <HAL_GPIO_DeInit+0x9e>
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <HAL_GPIO_DeInit+0x9e>
 80031cc:	2300      	movs	r3, #0
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	f002 0203 	and.w	r2, r2, #3
 80031d4:	0092      	lsls	r2, r2, #2
 80031d6:	4093      	lsls	r3, r2
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d132      	bne.n	8003244 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80031de:	4b4d      	ldr	r3, [pc, #308]	; (8003314 <HAL_GPIO_DeInit+0x1e4>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	43db      	mvns	r3, r3
 80031e6:	494b      	ldr	r1, [pc, #300]	; (8003314 <HAL_GPIO_DeInit+0x1e4>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80031ec:	4b49      	ldr	r3, [pc, #292]	; (8003314 <HAL_GPIO_DeInit+0x1e4>)
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	43db      	mvns	r3, r3
 80031f4:	4947      	ldr	r1, [pc, #284]	; (8003314 <HAL_GPIO_DeInit+0x1e4>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80031fa:	4b46      	ldr	r3, [pc, #280]	; (8003314 <HAL_GPIO_DeInit+0x1e4>)
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	43db      	mvns	r3, r3
 8003202:	4944      	ldr	r1, [pc, #272]	; (8003314 <HAL_GPIO_DeInit+0x1e4>)
 8003204:	4013      	ands	r3, r2
 8003206:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003208:	4b42      	ldr	r3, [pc, #264]	; (8003314 <HAL_GPIO_DeInit+0x1e4>)
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	43db      	mvns	r3, r3
 8003210:	4940      	ldr	r1, [pc, #256]	; (8003314 <HAL_GPIO_DeInit+0x1e4>)
 8003212:	4013      	ands	r3, r2
 8003214:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	220f      	movs	r2, #15
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003226:	4a34      	ldr	r2, [pc, #208]	; (80032f8 <HAL_GPIO_DeInit+0x1c8>)
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	089b      	lsrs	r3, r3, #2
 800322c:	3302      	adds	r3, #2
 800322e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	43da      	mvns	r2, r3
 8003236:	4830      	ldr	r0, [pc, #192]	; (80032f8 <HAL_GPIO_DeInit+0x1c8>)
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	089b      	lsrs	r3, r3, #2
 800323c:	400a      	ands	r2, r1
 800323e:	3302      	adds	r3, #2
 8003240:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	2103      	movs	r1, #3
 800324e:	fa01 f303 	lsl.w	r3, r1, r3
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	08da      	lsrs	r2, r3, #3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3208      	adds	r2, #8
 8003260:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	220f      	movs	r2, #15
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	08d2      	lsrs	r2, r2, #3
 8003278:	4019      	ands	r1, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3208      	adds	r2, #8
 800327e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	2103      	movs	r1, #3
 800328c:	fa01 f303 	lsl.w	r3, r1, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	401a      	ands	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	2101      	movs	r1, #1
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	fa01 f303 	lsl.w	r3, r1, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	401a      	ands	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	2103      	movs	r1, #3
 80032b6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ba:	43db      	mvns	r3, r3
 80032bc:	401a      	ands	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c6:	2101      	movs	r1, #1
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	fa01 f303 	lsl.w	r3, r1, r3
 80032ce:	43db      	mvns	r3, r3
 80032d0:	401a      	ands	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	3301      	adds	r3, #1
 80032da:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	fa22 f303 	lsr.w	r3, r2, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f47f af2b 	bne.w	8003140 <HAL_GPIO_DeInit+0x10>
  }
}
 80032ea:	bf00      	nop
 80032ec:	bf00      	nop
 80032ee:	371c      	adds	r7, #28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	40010000 	.word	0x40010000
 80032fc:	48000400 	.word	0x48000400
 8003300:	48000800 	.word	0x48000800
 8003304:	48000c00 	.word	0x48000c00
 8003308:	48001000 	.word	0x48001000
 800330c:	48001400 	.word	0x48001400
 8003310:	48001800 	.word	0x48001800
 8003314:	40010400 	.word	0x40010400

08003318 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	887b      	ldrh	r3, [r7, #2]
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003330:	2301      	movs	r3, #1
 8003332:	73fb      	strb	r3, [r7, #15]
 8003334:	e001      	b.n	800333a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003336:	2300      	movs	r3, #0
 8003338:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800333a:	7bfb      	ldrb	r3, [r7, #15]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	807b      	strh	r3, [r7, #2]
 8003354:	4613      	mov	r3, r2
 8003356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003358:	787b      	ldrb	r3, [r7, #1]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800335e:	887a      	ldrh	r2, [r7, #2]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003364:	e002      	b.n	800336c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003366:	887a      	ldrh	r2, [r7, #2]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003382:	4b08      	ldr	r3, [pc, #32]	; (80033a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003384:	695a      	ldr	r2, [r3, #20]
 8003386:	88fb      	ldrh	r3, [r7, #6]
 8003388:	4013      	ands	r3, r2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d006      	beq.n	800339c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800338e:	4a05      	ldr	r2, [pc, #20]	; (80033a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003390:	88fb      	ldrh	r3, [r7, #6]
 8003392:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003394:	88fb      	ldrh	r3, [r7, #6]
 8003396:	4618      	mov	r0, r3
 8003398:	f7fd fe86 	bl	80010a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40010400 	.word	0x40010400

080033a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e081      	b.n	80034be <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d106      	bne.n	80033d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fe fd6a 	bl	8001ea8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2224      	movs	r2, #36	; 0x24
 80033d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0201 	bic.w	r2, r2, #1
 80033ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003408:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d107      	bne.n	8003422 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	e006      	b.n	8003430 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800342e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d104      	bne.n	8003442 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003440:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6812      	ldr	r2, [r2, #0]
 800344c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003450:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003454:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003464:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691a      	ldr	r2, [r3, #16]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	ea42 0103 	orr.w	r1, r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	021a      	lsls	r2, r3, #8
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69d9      	ldr	r1, [r3, #28]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1a      	ldr	r2, [r3, #32]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b082      	sub	sp, #8
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e021      	b.n	800351c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2224      	movs	r2, #36	; 0x24
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7fe fd37 	bl	8001f64 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af02      	add	r7, sp, #8
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	4608      	mov	r0, r1
 800352e:	4611      	mov	r1, r2
 8003530:	461a      	mov	r2, r3
 8003532:	4603      	mov	r3, r0
 8003534:	817b      	strh	r3, [r7, #10]
 8003536:	460b      	mov	r3, r1
 8003538:	813b      	strh	r3, [r7, #8]
 800353a:	4613      	mov	r3, r2
 800353c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b20      	cmp	r3, #32
 8003548:	f040 80f9 	bne.w	800373e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <HAL_I2C_Mem_Write+0x34>
 8003552:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003554:	2b00      	cmp	r3, #0
 8003556:	d105      	bne.n	8003564 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800355e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0ed      	b.n	8003740 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_I2C_Mem_Write+0x4e>
 800356e:	2302      	movs	r3, #2
 8003570:	e0e6      	b.n	8003740 <HAL_I2C_Mem_Write+0x21c>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800357a:	f7ff f95f 	bl	800283c <HAL_GetTick>
 800357e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	2319      	movs	r3, #25
 8003586:	2201      	movs	r2, #1
 8003588:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 fac3 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0d1      	b.n	8003740 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2221      	movs	r2, #33	; 0x21
 80035a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2240      	movs	r2, #64	; 0x40
 80035a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a3a      	ldr	r2, [r7, #32]
 80035b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035c4:	88f8      	ldrh	r0, [r7, #6]
 80035c6:	893a      	ldrh	r2, [r7, #8]
 80035c8:	8979      	ldrh	r1, [r7, #10]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	4603      	mov	r3, r0
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 f9d3 	bl	8003980 <I2C_RequestMemoryWrite>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d005      	beq.n	80035ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0a9      	b.n	8003740 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2bff      	cmp	r3, #255	; 0xff
 80035f4:	d90e      	bls.n	8003614 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	22ff      	movs	r2, #255	; 0xff
 80035fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003600:	b2da      	uxtb	r2, r3
 8003602:	8979      	ldrh	r1, [r7, #10]
 8003604:	2300      	movs	r3, #0
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 fba5 	bl	8003d5c <I2C_TransferConfig>
 8003612:	e00f      	b.n	8003634 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003622:	b2da      	uxtb	r2, r3
 8003624:	8979      	ldrh	r1, [r7, #10]
 8003626:	2300      	movs	r3, #0
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 fb94 	bl	8003d5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 faad 	bl	8003b98 <I2C_WaitOnTXISFlagUntilTimeout>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e07b      	b.n	8003740 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	781a      	ldrb	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003662:	b29b      	uxth	r3, r3
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003670:	3b01      	subs	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367c:	b29b      	uxth	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d034      	beq.n	80036ec <HAL_I2C_Mem_Write+0x1c8>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003686:	2b00      	cmp	r3, #0
 8003688:	d130      	bne.n	80036ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003690:	2200      	movs	r2, #0
 8003692:	2180      	movs	r1, #128	; 0x80
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 fa3f 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e04d      	b.n	8003740 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2bff      	cmp	r3, #255	; 0xff
 80036ac:	d90e      	bls.n	80036cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	22ff      	movs	r2, #255	; 0xff
 80036b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	8979      	ldrh	r1, [r7, #10]
 80036bc:	2300      	movs	r3, #0
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 fb49 	bl	8003d5c <I2C_TransferConfig>
 80036ca:	e00f      	b.n	80036ec <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	8979      	ldrh	r1, [r7, #10]
 80036de:	2300      	movs	r3, #0
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 fb38 	bl	8003d5c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d19e      	bne.n	8003634 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 fa8c 	bl	8003c18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e01a      	b.n	8003740 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2220      	movs	r2, #32
 8003710:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6859      	ldr	r1, [r3, #4]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <HAL_I2C_Mem_Write+0x224>)
 800371e:	400b      	ands	r3, r1
 8003720:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	e000      	b.n	8003740 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800373e:	2302      	movs	r3, #2
  }
}
 8003740:	4618      	mov	r0, r3
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	fe00e800 	.word	0xfe00e800

0800374c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af02      	add	r7, sp, #8
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	4608      	mov	r0, r1
 8003756:	4611      	mov	r1, r2
 8003758:	461a      	mov	r2, r3
 800375a:	4603      	mov	r3, r0
 800375c:	817b      	strh	r3, [r7, #10]
 800375e:	460b      	mov	r3, r1
 8003760:	813b      	strh	r3, [r7, #8]
 8003762:	4613      	mov	r3, r2
 8003764:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b20      	cmp	r3, #32
 8003770:	f040 80fd 	bne.w	800396e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <HAL_I2C_Mem_Read+0x34>
 800377a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800377c:	2b00      	cmp	r3, #0
 800377e:	d105      	bne.n	800378c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003786:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e0f1      	b.n	8003970 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_I2C_Mem_Read+0x4e>
 8003796:	2302      	movs	r3, #2
 8003798:	e0ea      	b.n	8003970 <HAL_I2C_Mem_Read+0x224>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037a2:	f7ff f84b 	bl	800283c <HAL_GetTick>
 80037a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	2319      	movs	r3, #25
 80037ae:	2201      	movs	r2, #1
 80037b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 f9af 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e0d5      	b.n	8003970 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2222      	movs	r2, #34	; 0x22
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2240      	movs	r2, #64	; 0x40
 80037d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6a3a      	ldr	r2, [r7, #32]
 80037de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037ec:	88f8      	ldrh	r0, [r7, #6]
 80037ee:	893a      	ldrh	r2, [r7, #8]
 80037f0:	8979      	ldrh	r1, [r7, #10]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	9301      	str	r3, [sp, #4]
 80037f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	4603      	mov	r3, r0
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 f913 	bl	8003a28 <I2C_RequestMemoryRead>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e0ad      	b.n	8003970 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003818:	b29b      	uxth	r3, r3
 800381a:	2bff      	cmp	r3, #255	; 0xff
 800381c:	d90e      	bls.n	800383c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	22ff      	movs	r2, #255	; 0xff
 8003822:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003828:	b2da      	uxtb	r2, r3
 800382a:	8979      	ldrh	r1, [r7, #10]
 800382c:	4b52      	ldr	r3, [pc, #328]	; (8003978 <HAL_I2C_Mem_Read+0x22c>)
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 fa91 	bl	8003d5c <I2C_TransferConfig>
 800383a:	e00f      	b.n	800385c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003840:	b29a      	uxth	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384a:	b2da      	uxtb	r2, r3
 800384c:	8979      	ldrh	r1, [r7, #10]
 800384e:	4b4a      	ldr	r3, [pc, #296]	; (8003978 <HAL_I2C_Mem_Read+0x22c>)
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 fa80 	bl	8003d5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003862:	2200      	movs	r2, #0
 8003864:	2104      	movs	r1, #4
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f956 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e07c      	b.n	8003970 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d034      	beq.n	800391c <HAL_I2C_Mem_Read+0x1d0>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d130      	bne.n	800391c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c0:	2200      	movs	r2, #0
 80038c2:	2180      	movs	r1, #128	; 0x80
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 f927 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e04d      	b.n	8003970 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d8:	b29b      	uxth	r3, r3
 80038da:	2bff      	cmp	r3, #255	; 0xff
 80038dc:	d90e      	bls.n	80038fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	22ff      	movs	r2, #255	; 0xff
 80038e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	8979      	ldrh	r1, [r7, #10]
 80038ec:	2300      	movs	r3, #0
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 fa31 	bl	8003d5c <I2C_TransferConfig>
 80038fa:	e00f      	b.n	800391c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390a:	b2da      	uxtb	r2, r3
 800390c:	8979      	ldrh	r1, [r7, #10]
 800390e:	2300      	movs	r3, #0
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 fa20 	bl	8003d5c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d19a      	bne.n	800385c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 f974 	bl	8003c18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e01a      	b.n	8003970 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2220      	movs	r2, #32
 8003940:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6859      	ldr	r1, [r3, #4]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	4b0b      	ldr	r3, [pc, #44]	; (800397c <HAL_I2C_Mem_Read+0x230>)
 800394e:	400b      	ands	r3, r1
 8003950:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	e000      	b.n	8003970 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800396e:	2302      	movs	r3, #2
  }
}
 8003970:	4618      	mov	r0, r3
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	80002400 	.word	0x80002400
 800397c:	fe00e800 	.word	0xfe00e800

08003980 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af02      	add	r7, sp, #8
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	4608      	mov	r0, r1
 800398a:	4611      	mov	r1, r2
 800398c:	461a      	mov	r2, r3
 800398e:	4603      	mov	r3, r0
 8003990:	817b      	strh	r3, [r7, #10]
 8003992:	460b      	mov	r3, r1
 8003994:	813b      	strh	r3, [r7, #8]
 8003996:	4613      	mov	r3, r2
 8003998:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800399a:	88fb      	ldrh	r3, [r7, #6]
 800399c:	b2da      	uxtb	r2, r3
 800399e:	8979      	ldrh	r1, [r7, #10]
 80039a0:	4b20      	ldr	r3, [pc, #128]	; (8003a24 <I2C_RequestMemoryWrite+0xa4>)
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 f9d7 	bl	8003d5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ae:	69fa      	ldr	r2, [r7, #28]
 80039b0:	69b9      	ldr	r1, [r7, #24]
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 f8f0 	bl	8003b98 <I2C_WaitOnTXISFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e02c      	b.n	8003a1c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039c2:	88fb      	ldrh	r3, [r7, #6]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d105      	bne.n	80039d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039c8:	893b      	ldrh	r3, [r7, #8]
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	629a      	str	r2, [r3, #40]	; 0x28
 80039d2:	e015      	b.n	8003a00 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80039d4:	893b      	ldrh	r3, [r7, #8]
 80039d6:	0a1b      	lsrs	r3, r3, #8
 80039d8:	b29b      	uxth	r3, r3
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039e2:	69fa      	ldr	r2, [r7, #28]
 80039e4:	69b9      	ldr	r1, [r7, #24]
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 f8d6 	bl	8003b98 <I2C_WaitOnTXISFlagUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e012      	b.n	8003a1c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039f6:	893b      	ldrh	r3, [r7, #8]
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	2200      	movs	r2, #0
 8003a08:	2180      	movs	r1, #128	; 0x80
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f884 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	80002000 	.word	0x80002000

08003a28 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	4608      	mov	r0, r1
 8003a32:	4611      	mov	r1, r2
 8003a34:	461a      	mov	r2, r3
 8003a36:	4603      	mov	r3, r0
 8003a38:	817b      	strh	r3, [r7, #10]
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	813b      	strh	r3, [r7, #8]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	8979      	ldrh	r1, [r7, #10]
 8003a48:	4b20      	ldr	r3, [pc, #128]	; (8003acc <I2C_RequestMemoryRead+0xa4>)
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f984 	bl	8003d5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a54:	69fa      	ldr	r2, [r7, #28]
 8003a56:	69b9      	ldr	r1, [r7, #24]
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 f89d 	bl	8003b98 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e02c      	b.n	8003ac2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a68:	88fb      	ldrh	r3, [r7, #6]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d105      	bne.n	8003a7a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a6e:	893b      	ldrh	r3, [r7, #8]
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	629a      	str	r2, [r3, #40]	; 0x28
 8003a78:	e015      	b.n	8003aa6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a7a:	893b      	ldrh	r3, [r7, #8]
 8003a7c:	0a1b      	lsrs	r3, r3, #8
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a88:	69fa      	ldr	r2, [r7, #28]
 8003a8a:	69b9      	ldr	r1, [r7, #24]
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f883 	bl	8003b98 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e012      	b.n	8003ac2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a9c:	893b      	ldrh	r3, [r7, #8]
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	2200      	movs	r2, #0
 8003aae:	2140      	movs	r1, #64	; 0x40
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 f831 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e000      	b.n	8003ac2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	80002000 	.word	0x80002000

08003ad0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d103      	bne.n	8003aee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2200      	movs	r2, #0
 8003aec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d007      	beq.n	8003b0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699a      	ldr	r2, [r3, #24]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	619a      	str	r2, [r3, #24]
  }
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	4613      	mov	r3, r2
 8003b26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b28:	e022      	b.n	8003b70 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b30:	d01e      	beq.n	8003b70 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b32:	f7fe fe83 	bl	800283c <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d302      	bcc.n	8003b48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d113      	bne.n	8003b70 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4c:	f043 0220 	orr.w	r2, r3, #32
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e00f      	b.n	8003b90 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	bf0c      	ite	eq
 8003b80:	2301      	moveq	r3, #1
 8003b82:	2300      	movne	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	461a      	mov	r2, r3
 8003b88:	79fb      	ldrb	r3, [r7, #7]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d0cd      	beq.n	8003b2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ba4:	e02c      	b.n	8003c00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	68b9      	ldr	r1, [r7, #8]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 f870 	bl	8003c90 <I2C_IsAcknowledgeFailed>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e02a      	b.n	8003c10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc0:	d01e      	beq.n	8003c00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc2:	f7fe fe3b 	bl	800283c <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d302      	bcc.n	8003bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d113      	bne.n	8003c00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bdc:	f043 0220 	orr.w	r2, r3, #32
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e007      	b.n	8003c10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d1cb      	bne.n	8003ba6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c24:	e028      	b.n	8003c78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	68b9      	ldr	r1, [r7, #8]
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 f830 	bl	8003c90 <I2C_IsAcknowledgeFailed>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e026      	b.n	8003c88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c3a:	f7fe fdff 	bl	800283c <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d302      	bcc.n	8003c50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d113      	bne.n	8003c78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c54:	f043 0220 	orr.w	r2, r3, #32
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e007      	b.n	8003c88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	f003 0320 	and.w	r3, r3, #32
 8003c82:	2b20      	cmp	r3, #32
 8003c84:	d1cf      	bne.n	8003c26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	f003 0310 	and.w	r3, r3, #16
 8003ca6:	2b10      	cmp	r3, #16
 8003ca8:	d151      	bne.n	8003d4e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003caa:	e022      	b.n	8003cf2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb2:	d01e      	beq.n	8003cf2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb4:	f7fe fdc2 	bl	800283c <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d302      	bcc.n	8003cca <I2C_IsAcknowledgeFailed+0x3a>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d113      	bne.n	8003cf2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cce:	f043 0220 	orr.w	r2, r3, #32
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e02e      	b.n	8003d50 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	f003 0320 	and.w	r3, r3, #32
 8003cfc:	2b20      	cmp	r3, #32
 8003cfe:	d1d5      	bne.n	8003cac <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2210      	movs	r2, #16
 8003d06:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f7ff fedd 	bl	8003ad0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6859      	ldr	r1, [r3, #4]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	4b0d      	ldr	r3, [pc, #52]	; (8003d58 <I2C_IsAcknowledgeFailed+0xc8>)
 8003d22:	400b      	ands	r3, r1
 8003d24:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2a:	f043 0204 	orr.w	r2, r3, #4
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	fe00e800 	.word	0xfe00e800

08003d5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	607b      	str	r3, [r7, #4]
 8003d66:	460b      	mov	r3, r1
 8003d68:	817b      	strh	r3, [r7, #10]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	0d5b      	lsrs	r3, r3, #21
 8003d78:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003d7c:	4b0d      	ldr	r3, [pc, #52]	; (8003db4 <I2C_TransferConfig+0x58>)
 8003d7e:	430b      	orrs	r3, r1
 8003d80:	43db      	mvns	r3, r3
 8003d82:	ea02 0103 	and.w	r1, r2, r3
 8003d86:	897b      	ldrh	r3, [r7, #10]
 8003d88:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d8c:	7a7b      	ldrb	r3, [r7, #9]
 8003d8e:	041b      	lsls	r3, r3, #16
 8003d90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003da6:	bf00      	nop
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	03ff63ff 	.word	0x03ff63ff

08003db8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b20      	cmp	r3, #32
 8003dcc:	d138      	bne.n	8003e40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e032      	b.n	8003e42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2224      	movs	r2, #36	; 0x24
 8003de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0201 	bic.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6819      	ldr	r1, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	e000      	b.n	8003e42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e40:	2302      	movs	r3, #2
  }
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b085      	sub	sp, #20
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	d139      	bne.n	8003ed8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d101      	bne.n	8003e72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	e033      	b.n	8003eda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2224      	movs	r2, #36	; 0x24
 8003e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0201 	bic.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ea0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	021b      	lsls	r3, r3, #8
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0201 	orr.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	e000      	b.n	8003eda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ed8:	2302      	movs	r3, #2
  }
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ee6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ee8:	b08f      	sub	sp, #60	; 0x3c
 8003eea:	af0a      	add	r7, sp, #40	; 0x28
 8003eec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e116      	b.n	8004126 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fe fa00 	bl	8002318 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2203      	movs	r2, #3
 8003f1c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d102      	bne.n	8003f32 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f005 f83e 	bl	8008fb8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	603b      	str	r3, [r7, #0]
 8003f42:	687e      	ldr	r6, [r7, #4]
 8003f44:	466d      	mov	r5, sp
 8003f46:	f106 0410 	add.w	r4, r6, #16
 8003f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f56:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f5a:	1d33      	adds	r3, r6, #4
 8003f5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f5e:	6838      	ldr	r0, [r7, #0]
 8003f60:	f004 fffe 	bl	8008f60 <USB_CoreInit>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e0d7      	b.n	8004126 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f005 f82c 	bl	8008fda <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f82:	2300      	movs	r3, #0
 8003f84:	73fb      	strb	r3, [r7, #15]
 8003f86:	e04a      	b.n	800401e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f88:	7bfa      	ldrb	r2, [r7, #15]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	333d      	adds	r3, #61	; 0x3d
 8003f98:	2201      	movs	r2, #1
 8003f9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f9c:	7bfa      	ldrb	r2, [r7, #15]
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	333c      	adds	r3, #60	; 0x3c
 8003fac:	7bfa      	ldrb	r2, [r7, #15]
 8003fae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003fb0:	7bfa      	ldrb	r2, [r7, #15]
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	b298      	uxth	r0, r3
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	3342      	adds	r3, #66	; 0x42
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fc8:	7bfa      	ldrb	r2, [r7, #15]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	1a9b      	subs	r3, r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	333f      	adds	r3, #63	; 0x3f
 8003fd8:	2200      	movs	r2, #0
 8003fda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fdc:	7bfa      	ldrb	r2, [r7, #15]
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	1a9b      	subs	r3, r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	3344      	adds	r3, #68	; 0x44
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ff0:	7bfa      	ldrb	r2, [r7, #15]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	3348      	adds	r3, #72	; 0x48
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004004:	7bfa      	ldrb	r2, [r7, #15]
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	4613      	mov	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	1a9b      	subs	r3, r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	3350      	adds	r3, #80	; 0x50
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004018:	7bfb      	ldrb	r3, [r7, #15]
 800401a:	3301      	adds	r3, #1
 800401c:	73fb      	strb	r3, [r7, #15]
 800401e:	7bfa      	ldrb	r2, [r7, #15]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	429a      	cmp	r2, r3
 8004026:	d3af      	bcc.n	8003f88 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004028:	2300      	movs	r3, #0
 800402a:	73fb      	strb	r3, [r7, #15]
 800402c:	e044      	b.n	80040b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800402e:	7bfa      	ldrb	r2, [r7, #15]
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	4613      	mov	r3, r2
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	1a9b      	subs	r3, r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	440b      	add	r3, r1
 800403c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004040:	2200      	movs	r2, #0
 8004042:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004044:	7bfa      	ldrb	r2, [r7, #15]
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	4613      	mov	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004056:	7bfa      	ldrb	r2, [r7, #15]
 8004058:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800405a:	7bfa      	ldrb	r2, [r7, #15]
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	4613      	mov	r3, r2
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	1a9b      	subs	r3, r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	440b      	add	r3, r1
 8004068:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800406c:	2200      	movs	r2, #0
 800406e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004070:	7bfa      	ldrb	r2, [r7, #15]
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	4613      	mov	r3, r2
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	1a9b      	subs	r3, r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004086:	7bfa      	ldrb	r2, [r7, #15]
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	1a9b      	subs	r3, r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800409c:	7bfa      	ldrb	r2, [r7, #15]
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	3301      	adds	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
 80040b8:	7bfa      	ldrb	r2, [r7, #15]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d3b5      	bcc.n	800402e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	687e      	ldr	r6, [r7, #4]
 80040ca:	466d      	mov	r5, sp
 80040cc:	f106 0410 	add.w	r4, r6, #16
 80040d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80040e0:	1d33      	adds	r3, r6, #4
 80040e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040e4:	6838      	ldr	r0, [r7, #0]
 80040e6:	f004 ffa3 	bl	8009030 <USB_DevInit>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e014      	b.n	8004126 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	2b01      	cmp	r3, #1
 8004112:	d102      	bne.n	800411a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f80a 	bl	800412e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f005 f933 	bl	800938a <USB_DevDisconnect>

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800412e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800412e:	b480      	push	{r7}
 8004130:	b085      	sub	sp, #20
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004160:	f043 0303 	orr.w	r3, r3, #3
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
	...

08004178 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800417c:	4b05      	ldr	r3, [pc, #20]	; (8004194 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a04      	ldr	r2, [pc, #16]	; (8004194 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004186:	6013      	str	r3, [r2, #0]
}
 8004188:	bf00      	nop
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40007000 	.word	0x40007000

08004198 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800419c:	4b04      	ldr	r3, [pc, #16]	; (80041b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40007000 	.word	0x40007000

080041b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c2:	d130      	bne.n	8004226 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041c4:	4b23      	ldr	r3, [pc, #140]	; (8004254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d0:	d038      	beq.n	8004244 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041d2:	4b20      	ldr	r3, [pc, #128]	; (8004254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041da:	4a1e      	ldr	r2, [pc, #120]	; (8004254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041e2:	4b1d      	ldr	r3, [pc, #116]	; (8004258 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2232      	movs	r2, #50	; 0x32
 80041e8:	fb02 f303 	mul.w	r3, r2, r3
 80041ec:	4a1b      	ldr	r2, [pc, #108]	; (800425c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	0c9b      	lsrs	r3, r3, #18
 80041f4:	3301      	adds	r3, #1
 80041f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041f8:	e002      	b.n	8004200 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3b01      	subs	r3, #1
 80041fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004200:	4b14      	ldr	r3, [pc, #80]	; (8004254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800420c:	d102      	bne.n	8004214 <HAL_PWREx_ControlVoltageScaling+0x60>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1f2      	bne.n	80041fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004214:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800421c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004220:	d110      	bne.n	8004244 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e00f      	b.n	8004246 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004226:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800422e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004232:	d007      	beq.n	8004244 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004234:	4b07      	ldr	r3, [pc, #28]	; (8004254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800423c:	4a05      	ldr	r2, [pc, #20]	; (8004254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800423e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004242:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40007000 	.word	0x40007000
 8004258:	20000010 	.word	0x20000010
 800425c:	431bde83 	.word	0x431bde83

08004260 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004264:	4b05      	ldr	r3, [pc, #20]	; (800427c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	4a04      	ldr	r2, [pc, #16]	; (800427c <HAL_PWREx_EnableVddUSB+0x1c>)
 800426a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800426e:	6053      	str	r3, [r2, #4]
}
 8004270:	bf00      	nop
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40007000 	.word	0x40007000

08004280 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af02      	add	r7, sp, #8
 8004286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004288:	f7fe fad8 	bl	800283c <HAL_GetTick>
 800428c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e063      	b.n	8004360 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10b      	bne.n	80042bc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7fd fe7d 	bl	8001fac <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80042b2:	f241 3188 	movw	r1, #5000	; 0x1388
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f858 	bl	800436c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	021a      	lsls	r2, r3, #8
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	2120      	movs	r1, #32
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f850 	bl	8004388 <QSPI_WaitFlagStateUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80042ec:	7afb      	ldrb	r3, [r7, #11]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d131      	bne.n	8004356 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80042fc:	f023 0310 	bic.w	r3, r3, #16
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6852      	ldr	r2, [r2, #4]
 8004304:	0611      	lsls	r1, r2, #24
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	68d2      	ldr	r2, [r2, #12]
 800430a:	4311      	orrs	r1, r2
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6812      	ldr	r2, [r2, #0]
 8004310:	430b      	orrs	r3, r1
 8004312:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	4b13      	ldr	r3, [pc, #76]	; (8004368 <HAL_QSPI_Init+0xe8>)
 800431c:	4013      	ands	r3, r2
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6912      	ldr	r2, [r2, #16]
 8004322:	0411      	lsls	r1, r2, #16
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6952      	ldr	r2, [r2, #20]
 8004328:	4311      	orrs	r1, r2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6992      	ldr	r2, [r2, #24]
 800432e:	4311      	orrs	r1, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6812      	ldr	r2, [r2, #0]
 8004334:	430b      	orrs	r3, r1
 8004336:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800435e:	7afb      	ldrb	r3, [r7, #11]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	ffe0f8fe 	.word	0xffe0f8fe

0800436c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	603b      	str	r3, [r7, #0]
 8004394:	4613      	mov	r3, r2
 8004396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004398:	e01a      	b.n	80043d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a0:	d016      	beq.n	80043d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a2:	f7fe fa4b 	bl	800283c <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d302      	bcc.n	80043b8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10b      	bne.n	80043d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2204      	movs	r2, #4
 80043bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c4:	f043 0201 	orr.w	r2, r3, #1
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e00e      	b.n	80043ee <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	4013      	ands	r3, r2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	bf14      	ite	ne
 80043de:	2301      	movne	r3, #1
 80043e0:	2300      	moveq	r3, #0
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	461a      	mov	r2, r3
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d1d6      	bne.n	800439a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e3d8      	b.n	8004bbc <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800440a:	4b97      	ldr	r3, [pc, #604]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 030c 	and.w	r3, r3, #12
 8004412:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004414:	4b94      	ldr	r3, [pc, #592]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0310 	and.w	r3, r3, #16
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 80e4 	beq.w	80045f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d007      	beq.n	8004442 <HAL_RCC_OscConfig+0x4a>
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	2b0c      	cmp	r3, #12
 8004436:	f040 808b 	bne.w	8004550 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b01      	cmp	r3, #1
 800443e:	f040 8087 	bne.w	8004550 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004442:	4b89      	ldr	r3, [pc, #548]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d005      	beq.n	800445a <HAL_RCC_OscConfig+0x62>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e3b0      	b.n	8004bbc <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1a      	ldr	r2, [r3, #32]
 800445e:	4b82      	ldr	r3, [pc, #520]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d004      	beq.n	8004474 <HAL_RCC_OscConfig+0x7c>
 800446a:	4b7f      	ldr	r3, [pc, #508]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004472:	e005      	b.n	8004480 <HAL_RCC_OscConfig+0x88>
 8004474:	4b7c      	ldr	r3, [pc, #496]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 8004476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800447a:	091b      	lsrs	r3, r3, #4
 800447c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004480:	4293      	cmp	r3, r2
 8004482:	d223      	bcs.n	80044cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fd75 	bl	8004f78 <RCC_SetFlashLatencyFromMSIRange>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e391      	b.n	8004bbc <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004498:	4b73      	ldr	r3, [pc, #460]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a72      	ldr	r2, [pc, #456]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 800449e:	f043 0308 	orr.w	r3, r3, #8
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	4b70      	ldr	r3, [pc, #448]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	496d      	ldr	r1, [pc, #436]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044b6:	4b6c      	ldr	r3, [pc, #432]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	021b      	lsls	r3, r3, #8
 80044c4:	4968      	ldr	r1, [pc, #416]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	604b      	str	r3, [r1, #4]
 80044ca:	e025      	b.n	8004518 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044cc:	4b66      	ldr	r3, [pc, #408]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a65      	ldr	r2, [pc, #404]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80044d2:	f043 0308 	orr.w	r3, r3, #8
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	4b63      	ldr	r3, [pc, #396]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	4960      	ldr	r1, [pc, #384]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044ea:	4b5f      	ldr	r3, [pc, #380]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	021b      	lsls	r3, r3, #8
 80044f8:	495b      	ldr	r1, [pc, #364]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d109      	bne.n	8004518 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	4618      	mov	r0, r3
 800450a:	f000 fd35 	bl	8004f78 <RCC_SetFlashLatencyFromMSIRange>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e351      	b.n	8004bbc <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004518:	f000 fc38 	bl	8004d8c <HAL_RCC_GetSysClockFreq>
 800451c:	4602      	mov	r2, r0
 800451e:	4b52      	ldr	r3, [pc, #328]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	091b      	lsrs	r3, r3, #4
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	4950      	ldr	r1, [pc, #320]	; (800466c <HAL_RCC_OscConfig+0x274>)
 800452a:	5ccb      	ldrb	r3, [r1, r3]
 800452c:	f003 031f 	and.w	r3, r3, #31
 8004530:	fa22 f303 	lsr.w	r3, r2, r3
 8004534:	4a4e      	ldr	r2, [pc, #312]	; (8004670 <HAL_RCC_OscConfig+0x278>)
 8004536:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004538:	4b4e      	ldr	r3, [pc, #312]	; (8004674 <HAL_RCC_OscConfig+0x27c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4618      	mov	r0, r3
 800453e:	f7fd ff87 	bl	8002450 <HAL_InitTick>
 8004542:	4603      	mov	r3, r0
 8004544:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004546:	7bfb      	ldrb	r3, [r7, #15]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d052      	beq.n	80045f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	e335      	b.n	8004bbc <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d032      	beq.n	80045be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004558:	4b43      	ldr	r3, [pc, #268]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a42      	ldr	r2, [pc, #264]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004564:	f7fe f96a 	bl	800283c <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800456c:	f7fe f966 	bl	800283c <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e31e      	b.n	8004bbc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800457e:	4b3a      	ldr	r3, [pc, #232]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0f0      	beq.n	800456c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800458a:	4b37      	ldr	r3, [pc, #220]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a36      	ldr	r2, [pc, #216]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 8004590:	f043 0308 	orr.w	r3, r3, #8
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	4b34      	ldr	r3, [pc, #208]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	4931      	ldr	r1, [pc, #196]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045a8:	4b2f      	ldr	r3, [pc, #188]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	021b      	lsls	r3, r3, #8
 80045b6:	492c      	ldr	r1, [pc, #176]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	604b      	str	r3, [r1, #4]
 80045bc:	e01a      	b.n	80045f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80045be:	4b2a      	ldr	r3, [pc, #168]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a29      	ldr	r2, [pc, #164]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80045c4:	f023 0301 	bic.w	r3, r3, #1
 80045c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045ca:	f7fe f937 	bl	800283c <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045d2:	f7fe f933 	bl	800283c <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e2eb      	b.n	8004bbc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045e4:	4b20      	ldr	r3, [pc, #128]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1f0      	bne.n	80045d2 <HAL_RCC_OscConfig+0x1da>
 80045f0:	e000      	b.n	80045f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d074      	beq.n	80046ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2b08      	cmp	r3, #8
 8004604:	d005      	beq.n	8004612 <HAL_RCC_OscConfig+0x21a>
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	2b0c      	cmp	r3, #12
 800460a:	d10e      	bne.n	800462a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	2b03      	cmp	r3, #3
 8004610:	d10b      	bne.n	800462a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004612:	4b15      	ldr	r3, [pc, #84]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d064      	beq.n	80046e8 <HAL_RCC_OscConfig+0x2f0>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d160      	bne.n	80046e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e2c8      	b.n	8004bbc <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004632:	d106      	bne.n	8004642 <HAL_RCC_OscConfig+0x24a>
 8004634:	4b0c      	ldr	r3, [pc, #48]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a0b      	ldr	r2, [pc, #44]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 800463a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	e026      	b.n	8004690 <HAL_RCC_OscConfig+0x298>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800464a:	d115      	bne.n	8004678 <HAL_RCC_OscConfig+0x280>
 800464c:	4b06      	ldr	r3, [pc, #24]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a05      	ldr	r2, [pc, #20]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 8004652:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004656:	6013      	str	r3, [r2, #0]
 8004658:	4b03      	ldr	r3, [pc, #12]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a02      	ldr	r2, [pc, #8]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 800465e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	e014      	b.n	8004690 <HAL_RCC_OscConfig+0x298>
 8004666:	bf00      	nop
 8004668:	40021000 	.word	0x40021000
 800466c:	0801531c 	.word	0x0801531c
 8004670:	20000010 	.word	0x20000010
 8004674:	20000014 	.word	0x20000014
 8004678:	4ba0      	ldr	r3, [pc, #640]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a9f      	ldr	r2, [pc, #636]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 800467e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	4b9d      	ldr	r3, [pc, #628]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a9c      	ldr	r2, [pc, #624]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 800468a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800468e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d013      	beq.n	80046c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004698:	f7fe f8d0 	bl	800283c <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046a0:	f7fe f8cc 	bl	800283c <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b64      	cmp	r3, #100	; 0x64
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e284      	b.n	8004bbc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046b2:	4b92      	ldr	r3, [pc, #584]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0f0      	beq.n	80046a0 <HAL_RCC_OscConfig+0x2a8>
 80046be:	e014      	b.n	80046ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c0:	f7fe f8bc 	bl	800283c <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046c8:	f7fe f8b8 	bl	800283c <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b64      	cmp	r3, #100	; 0x64
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e270      	b.n	8004bbc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046da:	4b88      	ldr	r3, [pc, #544]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f0      	bne.n	80046c8 <HAL_RCC_OscConfig+0x2d0>
 80046e6:	e000      	b.n	80046ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d060      	beq.n	80047b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d005      	beq.n	8004708 <HAL_RCC_OscConfig+0x310>
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	2b0c      	cmp	r3, #12
 8004700:	d119      	bne.n	8004736 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2b02      	cmp	r3, #2
 8004706:	d116      	bne.n	8004736 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004708:	4b7c      	ldr	r3, [pc, #496]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <HAL_RCC_OscConfig+0x328>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e24d      	b.n	8004bbc <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004720:	4b76      	ldr	r3, [pc, #472]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	061b      	lsls	r3, r3, #24
 800472e:	4973      	ldr	r1, [pc, #460]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 8004730:	4313      	orrs	r3, r2
 8004732:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004734:	e040      	b.n	80047b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d023      	beq.n	8004786 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800473e:	4b6f      	ldr	r3, [pc, #444]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a6e      	ldr	r2, [pc, #440]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 8004744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474a:	f7fe f877 	bl	800283c <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004752:	f7fe f873 	bl	800283c <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e22b      	b.n	8004bbc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004764:	4b65      	ldr	r3, [pc, #404]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0f0      	beq.n	8004752 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004770:	4b62      	ldr	r3, [pc, #392]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	061b      	lsls	r3, r3, #24
 800477e:	495f      	ldr	r1, [pc, #380]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 8004780:	4313      	orrs	r3, r2
 8004782:	604b      	str	r3, [r1, #4]
 8004784:	e018      	b.n	80047b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004786:	4b5d      	ldr	r3, [pc, #372]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a5c      	ldr	r2, [pc, #368]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 800478c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004792:	f7fe f853 	bl	800283c <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800479a:	f7fe f84f 	bl	800283c <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e207      	b.n	8004bbc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047ac:	4b53      	ldr	r3, [pc, #332]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1f0      	bne.n	800479a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d03c      	beq.n	800483e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d01c      	beq.n	8004806 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047cc:	4b4b      	ldr	r3, [pc, #300]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 80047ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047d2:	4a4a      	ldr	r2, [pc, #296]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 80047d4:	f043 0301 	orr.w	r3, r3, #1
 80047d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047dc:	f7fe f82e 	bl	800283c <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047e4:	f7fe f82a 	bl	800283c <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e1e2      	b.n	8004bbc <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047f6:	4b41      	ldr	r3, [pc, #260]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 80047f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0ef      	beq.n	80047e4 <HAL_RCC_OscConfig+0x3ec>
 8004804:	e01b      	b.n	800483e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004806:	4b3d      	ldr	r3, [pc, #244]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 8004808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800480c:	4a3b      	ldr	r2, [pc, #236]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 800480e:	f023 0301 	bic.w	r3, r3, #1
 8004812:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004816:	f7fe f811 	bl	800283c <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800481c:	e008      	b.n	8004830 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800481e:	f7fe f80d 	bl	800283c <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e1c5      	b.n	8004bbc <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004830:	4b32      	ldr	r3, [pc, #200]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 8004832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1ef      	bne.n	800481e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 80a6 	beq.w	8004998 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800484c:	2300      	movs	r3, #0
 800484e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004850:	4b2a      	ldr	r3, [pc, #168]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 8004852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10d      	bne.n	8004878 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800485c:	4b27      	ldr	r3, [pc, #156]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 800485e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004860:	4a26      	ldr	r2, [pc, #152]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 8004862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004866:	6593      	str	r3, [r2, #88]	; 0x58
 8004868:	4b24      	ldr	r3, [pc, #144]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 800486a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004870:	60bb      	str	r3, [r7, #8]
 8004872:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004874:	2301      	movs	r3, #1
 8004876:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004878:	4b21      	ldr	r3, [pc, #132]	; (8004900 <HAL_RCC_OscConfig+0x508>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004880:	2b00      	cmp	r3, #0
 8004882:	d118      	bne.n	80048b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004884:	4b1e      	ldr	r3, [pc, #120]	; (8004900 <HAL_RCC_OscConfig+0x508>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a1d      	ldr	r2, [pc, #116]	; (8004900 <HAL_RCC_OscConfig+0x508>)
 800488a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800488e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004890:	f7fd ffd4 	bl	800283c <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004898:	f7fd ffd0 	bl	800283c <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e188      	b.n	8004bbc <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048aa:	4b15      	ldr	r3, [pc, #84]	; (8004900 <HAL_RCC_OscConfig+0x508>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d108      	bne.n	80048d0 <HAL_RCC_OscConfig+0x4d8>
 80048be:	4b0f      	ldr	r3, [pc, #60]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 80048c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c4:	4a0d      	ldr	r2, [pc, #52]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048ce:	e029      	b.n	8004924 <HAL_RCC_OscConfig+0x52c>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	2b05      	cmp	r3, #5
 80048d6:	d115      	bne.n	8004904 <HAL_RCC_OscConfig+0x50c>
 80048d8:	4b08      	ldr	r3, [pc, #32]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 80048da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048de:	4a07      	ldr	r2, [pc, #28]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 80048e0:	f043 0304 	orr.w	r3, r3, #4
 80048e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048e8:	4b04      	ldr	r3, [pc, #16]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ee:	4a03      	ldr	r2, [pc, #12]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 80048f0:	f043 0301 	orr.w	r3, r3, #1
 80048f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048f8:	e014      	b.n	8004924 <HAL_RCC_OscConfig+0x52c>
 80048fa:	bf00      	nop
 80048fc:	40021000 	.word	0x40021000
 8004900:	40007000 	.word	0x40007000
 8004904:	4b91      	ldr	r3, [pc, #580]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 8004906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490a:	4a90      	ldr	r2, [pc, #576]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 800490c:	f023 0301 	bic.w	r3, r3, #1
 8004910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004914:	4b8d      	ldr	r3, [pc, #564]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 8004916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491a:	4a8c      	ldr	r2, [pc, #560]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 800491c:	f023 0304 	bic.w	r3, r3, #4
 8004920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d016      	beq.n	800495a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492c:	f7fd ff86 	bl	800283c <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004932:	e00a      	b.n	800494a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004934:	f7fd ff82 	bl	800283c <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004942:	4293      	cmp	r3, r2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e138      	b.n	8004bbc <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800494a:	4b80      	ldr	r3, [pc, #512]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 800494c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0ed      	beq.n	8004934 <HAL_RCC_OscConfig+0x53c>
 8004958:	e015      	b.n	8004986 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495a:	f7fd ff6f 	bl	800283c <HAL_GetTick>
 800495e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004960:	e00a      	b.n	8004978 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004962:	f7fd ff6b 	bl	800283c <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004970:	4293      	cmp	r3, r2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e121      	b.n	8004bbc <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004978:	4b74      	ldr	r3, [pc, #464]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 800497a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1ed      	bne.n	8004962 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004986:	7ffb      	ldrb	r3, [r7, #31]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d105      	bne.n	8004998 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800498c:	4b6f      	ldr	r3, [pc, #444]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 800498e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004990:	4a6e      	ldr	r2, [pc, #440]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 8004992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004996:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 810c 	beq.w	8004bba <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	f040 80d4 	bne.w	8004b54 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80049ac:	4b67      	ldr	r3, [pc, #412]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f003 0203 	and.w	r2, r3, #3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	429a      	cmp	r2, r3
 80049be:	d130      	bne.n	8004a22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ca:	3b01      	subs	r3, #1
 80049cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d127      	bne.n	8004a22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049de:	429a      	cmp	r2, r3
 80049e0:	d11f      	bne.n	8004a22 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049ec:	2a07      	cmp	r2, #7
 80049ee:	bf14      	ite	ne
 80049f0:	2201      	movne	r2, #1
 80049f2:	2200      	moveq	r2, #0
 80049f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d113      	bne.n	8004a22 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a04:	085b      	lsrs	r3, r3, #1
 8004a06:	3b01      	subs	r3, #1
 8004a08:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d109      	bne.n	8004a22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a18:	085b      	lsrs	r3, r3, #1
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d06e      	beq.n	8004b00 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2b0c      	cmp	r3, #12
 8004a26:	d069      	beq.n	8004afc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a28:	4b48      	ldr	r3, [pc, #288]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d105      	bne.n	8004a40 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004a34:	4b45      	ldr	r3, [pc, #276]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e0bb      	b.n	8004bbc <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a44:	4b41      	ldr	r3, [pc, #260]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a40      	ldr	r2, [pc, #256]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 8004a4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a4e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a50:	f7fd fef4 	bl	800283c <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a58:	f7fd fef0 	bl	800283c <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e0a8      	b.n	8004bbc <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a6a:	4b38      	ldr	r3, [pc, #224]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1f0      	bne.n	8004a58 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a76:	4b35      	ldr	r3, [pc, #212]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	4b35      	ldr	r3, [pc, #212]	; (8004b50 <HAL_RCC_OscConfig+0x758>)
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a86:	3a01      	subs	r2, #1
 8004a88:	0112      	lsls	r2, r2, #4
 8004a8a:	4311      	orrs	r1, r2
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a90:	0212      	lsls	r2, r2, #8
 8004a92:	4311      	orrs	r1, r2
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a98:	0852      	lsrs	r2, r2, #1
 8004a9a:	3a01      	subs	r2, #1
 8004a9c:	0552      	lsls	r2, r2, #21
 8004a9e:	4311      	orrs	r1, r2
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004aa4:	0852      	lsrs	r2, r2, #1
 8004aa6:	3a01      	subs	r2, #1
 8004aa8:	0652      	lsls	r2, r2, #25
 8004aaa:	4311      	orrs	r1, r2
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ab0:	0912      	lsrs	r2, r2, #4
 8004ab2:	0452      	lsls	r2, r2, #17
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	4925      	ldr	r1, [pc, #148]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004abc:	4b23      	ldr	r3, [pc, #140]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a22      	ldr	r2, [pc, #136]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 8004ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ac6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ac8:	4b20      	ldr	r3, [pc, #128]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	4a1f      	ldr	r2, [pc, #124]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 8004ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ad2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ad4:	f7fd feb2 	bl	800283c <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004adc:	f7fd feae 	bl	800283c <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e066      	b.n	8004bbc <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aee:	4b17      	ldr	r3, [pc, #92]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0f0      	beq.n	8004adc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004afa:	e05e      	b.n	8004bba <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e05d      	b.n	8004bbc <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b00:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d156      	bne.n	8004bba <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b0c:	4b0f      	ldr	r3, [pc, #60]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a0e      	ldr	r2, [pc, #56]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 8004b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b18:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	4a0b      	ldr	r2, [pc, #44]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 8004b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b24:	f7fd fe8a 	bl	800283c <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b2c:	f7fd fe86 	bl	800283c <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e03e      	b.n	8004bbc <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b3e:	4b03      	ldr	r3, [pc, #12]	; (8004b4c <HAL_RCC_OscConfig+0x754>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0f0      	beq.n	8004b2c <HAL_RCC_OscConfig+0x734>
 8004b4a:	e036      	b.n	8004bba <HAL_RCC_OscConfig+0x7c2>
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2b0c      	cmp	r3, #12
 8004b58:	d02d      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5a:	4b1a      	ldr	r3, [pc, #104]	; (8004bc4 <HAL_RCC_OscConfig+0x7cc>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a19      	ldr	r2, [pc, #100]	; (8004bc4 <HAL_RCC_OscConfig+0x7cc>)
 8004b60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b64:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004b66:	4b17      	ldr	r3, [pc, #92]	; (8004bc4 <HAL_RCC_OscConfig+0x7cc>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d105      	bne.n	8004b7e <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004b72:	4b14      	ldr	r3, [pc, #80]	; (8004bc4 <HAL_RCC_OscConfig+0x7cc>)
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	4a13      	ldr	r2, [pc, #76]	; (8004bc4 <HAL_RCC_OscConfig+0x7cc>)
 8004b78:	f023 0303 	bic.w	r3, r3, #3
 8004b7c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b7e:	4b11      	ldr	r3, [pc, #68]	; (8004bc4 <HAL_RCC_OscConfig+0x7cc>)
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	4a10      	ldr	r2, [pc, #64]	; (8004bc4 <HAL_RCC_OscConfig+0x7cc>)
 8004b84:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b8c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8e:	f7fd fe55 	bl	800283c <HAL_GetTick>
 8004b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b94:	e008      	b.n	8004ba8 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b96:	f7fd fe51 	bl	800283c <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e009      	b.n	8004bbc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ba8:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <HAL_RCC_OscConfig+0x7cc>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1f0      	bne.n	8004b96 <HAL_RCC_OscConfig+0x79e>
 8004bb4:	e001      	b.n	8004bba <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3720      	adds	r7, #32
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40021000 	.word	0x40021000

08004bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e0c8      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bdc:	4b66      	ldr	r3, [pc, #408]	; (8004d78 <HAL_RCC_ClockConfig+0x1b0>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d910      	bls.n	8004c0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bea:	4b63      	ldr	r3, [pc, #396]	; (8004d78 <HAL_RCC_ClockConfig+0x1b0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f023 0207 	bic.w	r2, r3, #7
 8004bf2:	4961      	ldr	r1, [pc, #388]	; (8004d78 <HAL_RCC_ClockConfig+0x1b0>)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfa:	4b5f      	ldr	r3, [pc, #380]	; (8004d78 <HAL_RCC_ClockConfig+0x1b0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d001      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e0b0      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d04c      	beq.n	8004cb2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d107      	bne.n	8004c30 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c20:	4b56      	ldr	r3, [pc, #344]	; (8004d7c <HAL_RCC_ClockConfig+0x1b4>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d121      	bne.n	8004c70 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e09e      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d107      	bne.n	8004c48 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c38:	4b50      	ldr	r3, [pc, #320]	; (8004d7c <HAL_RCC_ClockConfig+0x1b4>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d115      	bne.n	8004c70 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e092      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d107      	bne.n	8004c60 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c50:	4b4a      	ldr	r3, [pc, #296]	; (8004d7c <HAL_RCC_ClockConfig+0x1b4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d109      	bne.n	8004c70 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e086      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c60:	4b46      	ldr	r3, [pc, #280]	; (8004d7c <HAL_RCC_ClockConfig+0x1b4>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e07e      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c70:	4b42      	ldr	r3, [pc, #264]	; (8004d7c <HAL_RCC_ClockConfig+0x1b4>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f023 0203 	bic.w	r2, r3, #3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	493f      	ldr	r1, [pc, #252]	; (8004d7c <HAL_RCC_ClockConfig+0x1b4>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c82:	f7fd fddb 	bl	800283c <HAL_GetTick>
 8004c86:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c88:	e00a      	b.n	8004ca0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c8a:	f7fd fdd7 	bl	800283c <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e066      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ca0:	4b36      	ldr	r3, [pc, #216]	; (8004d7c <HAL_RCC_ClockConfig+0x1b4>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 020c 	and.w	r2, r3, #12
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d1eb      	bne.n	8004c8a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d008      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cbe:	4b2f      	ldr	r3, [pc, #188]	; (8004d7c <HAL_RCC_ClockConfig+0x1b4>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	492c      	ldr	r1, [pc, #176]	; (8004d7c <HAL_RCC_ClockConfig+0x1b4>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cd0:	4b29      	ldr	r3, [pc, #164]	; (8004d78 <HAL_RCC_ClockConfig+0x1b0>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d210      	bcs.n	8004d00 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cde:	4b26      	ldr	r3, [pc, #152]	; (8004d78 <HAL_RCC_ClockConfig+0x1b0>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f023 0207 	bic.w	r2, r3, #7
 8004ce6:	4924      	ldr	r1, [pc, #144]	; (8004d78 <HAL_RCC_ClockConfig+0x1b0>)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cee:	4b22      	ldr	r3, [pc, #136]	; (8004d78 <HAL_RCC_ClockConfig+0x1b0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0307 	and.w	r3, r3, #7
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d001      	beq.n	8004d00 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e036      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d008      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d0c:	4b1b      	ldr	r3, [pc, #108]	; (8004d7c <HAL_RCC_ClockConfig+0x1b4>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	4918      	ldr	r1, [pc, #96]	; (8004d7c <HAL_RCC_ClockConfig+0x1b4>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0308 	and.w	r3, r3, #8
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d009      	beq.n	8004d3e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d2a:	4b14      	ldr	r3, [pc, #80]	; (8004d7c <HAL_RCC_ClockConfig+0x1b4>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	4910      	ldr	r1, [pc, #64]	; (8004d7c <HAL_RCC_ClockConfig+0x1b4>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d3e:	f000 f825 	bl	8004d8c <HAL_RCC_GetSysClockFreq>
 8004d42:	4602      	mov	r2, r0
 8004d44:	4b0d      	ldr	r3, [pc, #52]	; (8004d7c <HAL_RCC_ClockConfig+0x1b4>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	091b      	lsrs	r3, r3, #4
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	490c      	ldr	r1, [pc, #48]	; (8004d80 <HAL_RCC_ClockConfig+0x1b8>)
 8004d50:	5ccb      	ldrb	r3, [r1, r3]
 8004d52:	f003 031f 	and.w	r3, r3, #31
 8004d56:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5a:	4a0a      	ldr	r2, [pc, #40]	; (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d5e:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <HAL_RCC_ClockConfig+0x1c0>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fd fb74 	bl	8002450 <HAL_InitTick>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d6c:	7afb      	ldrb	r3, [r7, #11]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	40022000 	.word	0x40022000
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	0801531c 	.word	0x0801531c
 8004d84:	20000010 	.word	0x20000010
 8004d88:	20000014 	.word	0x20000014

08004d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b089      	sub	sp, #36	; 0x24
 8004d90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	61fb      	str	r3, [r7, #28]
 8004d96:	2300      	movs	r3, #0
 8004d98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d9a:	4b3e      	ldr	r3, [pc, #248]	; (8004e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 030c 	and.w	r3, r3, #12
 8004da2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004da4:	4b3b      	ldr	r3, [pc, #236]	; (8004e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f003 0303 	and.w	r3, r3, #3
 8004dac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d005      	beq.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x34>
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	2b0c      	cmp	r3, #12
 8004db8:	d121      	bne.n	8004dfe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d11e      	bne.n	8004dfe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004dc0:	4b34      	ldr	r3, [pc, #208]	; (8004e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0308 	and.w	r3, r3, #8
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d107      	bne.n	8004ddc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004dcc:	4b31      	ldr	r3, [pc, #196]	; (8004e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dd2:	0a1b      	lsrs	r3, r3, #8
 8004dd4:	f003 030f 	and.w	r3, r3, #15
 8004dd8:	61fb      	str	r3, [r7, #28]
 8004dda:	e005      	b.n	8004de8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ddc:	4b2d      	ldr	r3, [pc, #180]	; (8004e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	091b      	lsrs	r3, r3, #4
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004de8:	4a2b      	ldr	r2, [pc, #172]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10d      	bne.n	8004e14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dfc:	e00a      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d102      	bne.n	8004e0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e04:	4b25      	ldr	r3, [pc, #148]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x110>)
 8004e06:	61bb      	str	r3, [r7, #24]
 8004e08:	e004      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d101      	bne.n	8004e14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e10:	4b23      	ldr	r3, [pc, #140]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	2b0c      	cmp	r3, #12
 8004e18:	d134      	bne.n	8004e84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e1a:	4b1e      	ldr	r3, [pc, #120]	; (8004e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d003      	beq.n	8004e32 <HAL_RCC_GetSysClockFreq+0xa6>
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d003      	beq.n	8004e38 <HAL_RCC_GetSysClockFreq+0xac>
 8004e30:	e005      	b.n	8004e3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e32:	4b1a      	ldr	r3, [pc, #104]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x110>)
 8004e34:	617b      	str	r3, [r7, #20]
      break;
 8004e36:	e005      	b.n	8004e44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e38:	4b19      	ldr	r3, [pc, #100]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e3a:	617b      	str	r3, [r7, #20]
      break;
 8004e3c:	e002      	b.n	8004e44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	617b      	str	r3, [r7, #20]
      break;
 8004e42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e44:	4b13      	ldr	r3, [pc, #76]	; (8004e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	091b      	lsrs	r3, r3, #4
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	3301      	adds	r3, #1
 8004e50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e52:	4b10      	ldr	r3, [pc, #64]	; (8004e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	0a1b      	lsrs	r3, r3, #8
 8004e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	fb03 f202 	mul.w	r2, r3, r2
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e6a:	4b0a      	ldr	r3, [pc, #40]	; (8004e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	0e5b      	lsrs	r3, r3, #25
 8004e70:	f003 0303 	and.w	r3, r3, #3
 8004e74:	3301      	adds	r3, #1
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e84:	69bb      	ldr	r3, [r7, #24]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3724      	adds	r7, #36	; 0x24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40021000 	.word	0x40021000
 8004e98:	08015334 	.word	0x08015334
 8004e9c:	00f42400 	.word	0x00f42400
 8004ea0:	007a1200 	.word	0x007a1200

08004ea4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ea8:	4b03      	ldr	r3, [pc, #12]	; (8004eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	20000010 	.word	0x20000010

08004ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ec0:	f7ff fff0 	bl	8004ea4 <HAL_RCC_GetHCLKFreq>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	4b06      	ldr	r3, [pc, #24]	; (8004ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	0a1b      	lsrs	r3, r3, #8
 8004ecc:	f003 0307 	and.w	r3, r3, #7
 8004ed0:	4904      	ldr	r1, [pc, #16]	; (8004ee4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ed2:	5ccb      	ldrb	r3, [r1, r3]
 8004ed4:	f003 031f 	and.w	r3, r3, #31
 8004ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	0801532c 	.word	0x0801532c

08004ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004eec:	f7ff ffda 	bl	8004ea4 <HAL_RCC_GetHCLKFreq>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	4b06      	ldr	r3, [pc, #24]	; (8004f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	0adb      	lsrs	r3, r3, #11
 8004ef8:	f003 0307 	and.w	r3, r3, #7
 8004efc:	4904      	ldr	r1, [pc, #16]	; (8004f10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004efe:	5ccb      	ldrb	r3, [r1, r3]
 8004f00:	f003 031f 	and.w	r3, r3, #31
 8004f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	0801532c 	.word	0x0801532c

08004f14 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	220f      	movs	r2, #15
 8004f22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004f24:	4b12      	ldr	r3, [pc, #72]	; (8004f70 <HAL_RCC_GetClockConfig+0x5c>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f003 0203 	and.w	r2, r3, #3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004f30:	4b0f      	ldr	r3, [pc, #60]	; (8004f70 <HAL_RCC_GetClockConfig+0x5c>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004f3c:	4b0c      	ldr	r3, [pc, #48]	; (8004f70 <HAL_RCC_GetClockConfig+0x5c>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004f48:	4b09      	ldr	r3, [pc, #36]	; (8004f70 <HAL_RCC_GetClockConfig+0x5c>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	08db      	lsrs	r3, r3, #3
 8004f4e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004f56:	4b07      	ldr	r3, [pc, #28]	; (8004f74 <HAL_RCC_GetClockConfig+0x60>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0207 	and.w	r2, r3, #7
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	601a      	str	r2, [r3, #0]
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40021000 	.word	0x40021000
 8004f74:	40022000 	.word	0x40022000

08004f78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f80:	2300      	movs	r3, #0
 8004f82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f84:	4b2a      	ldr	r3, [pc, #168]	; (8005030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f90:	f7ff f902 	bl	8004198 <HAL_PWREx_GetVoltageRange>
 8004f94:	6178      	str	r0, [r7, #20]
 8004f96:	e014      	b.n	8004fc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f98:	4b25      	ldr	r3, [pc, #148]	; (8005030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9c:	4a24      	ldr	r2, [pc, #144]	; (8005030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa2:	6593      	str	r3, [r2, #88]	; 0x58
 8004fa4:	4b22      	ldr	r3, [pc, #136]	; (8005030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004fb0:	f7ff f8f2 	bl	8004198 <HAL_PWREx_GetVoltageRange>
 8004fb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004fb6:	4b1e      	ldr	r3, [pc, #120]	; (8005030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fba:	4a1d      	ldr	r2, [pc, #116]	; (8005030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fc8:	d10b      	bne.n	8004fe2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b80      	cmp	r3, #128	; 0x80
 8004fce:	d919      	bls.n	8005004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2ba0      	cmp	r3, #160	; 0xa0
 8004fd4:	d902      	bls.n	8004fdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	613b      	str	r3, [r7, #16]
 8004fda:	e013      	b.n	8005004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fdc:	2301      	movs	r3, #1
 8004fde:	613b      	str	r3, [r7, #16]
 8004fe0:	e010      	b.n	8005004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b80      	cmp	r3, #128	; 0x80
 8004fe6:	d902      	bls.n	8004fee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004fe8:	2303      	movs	r3, #3
 8004fea:	613b      	str	r3, [r7, #16]
 8004fec:	e00a      	b.n	8005004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b80      	cmp	r3, #128	; 0x80
 8004ff2:	d102      	bne.n	8004ffa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	613b      	str	r3, [r7, #16]
 8004ff8:	e004      	b.n	8005004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b70      	cmp	r3, #112	; 0x70
 8004ffe:	d101      	bne.n	8005004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005000:	2301      	movs	r3, #1
 8005002:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005004:	4b0b      	ldr	r3, [pc, #44]	; (8005034 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f023 0207 	bic.w	r2, r3, #7
 800500c:	4909      	ldr	r1, [pc, #36]	; (8005034 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005014:	4b07      	ldr	r3, [pc, #28]	; (8005034 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	429a      	cmp	r2, r3
 8005020:	d001      	beq.n	8005026 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e000      	b.n	8005028 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3718      	adds	r7, #24
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	40021000 	.word	0x40021000
 8005034:	40022000 	.word	0x40022000

08005038 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005040:	2300      	movs	r3, #0
 8005042:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005044:	2300      	movs	r3, #0
 8005046:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005050:	2b00      	cmp	r3, #0
 8005052:	d041      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005058:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800505c:	d02a      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800505e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005062:	d824      	bhi.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005064:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005068:	d008      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800506a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800506e:	d81e      	bhi.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005074:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005078:	d010      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800507a:	e018      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800507c:	4b86      	ldr	r3, [pc, #536]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	4a85      	ldr	r2, [pc, #532]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005086:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005088:	e015      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	3304      	adds	r3, #4
 800508e:	2100      	movs	r1, #0
 8005090:	4618      	mov	r0, r3
 8005092:	f000 facb 	bl	800562c <RCCEx_PLLSAI1_Config>
 8005096:	4603      	mov	r3, r0
 8005098:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800509a:	e00c      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3320      	adds	r3, #32
 80050a0:	2100      	movs	r1, #0
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fbb6 	bl	8005814 <RCCEx_PLLSAI2_Config>
 80050a8:	4603      	mov	r3, r0
 80050aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050ac:	e003      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	74fb      	strb	r3, [r7, #19]
      break;
 80050b2:	e000      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80050b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050b6:	7cfb      	ldrb	r3, [r7, #19]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10b      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050bc:	4b76      	ldr	r3, [pc, #472]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050ca:	4973      	ldr	r1, [pc, #460]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050d2:	e001      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d4:	7cfb      	ldrb	r3, [r7, #19]
 80050d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d041      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050ec:	d02a      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80050ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050f2:	d824      	bhi.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80050f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050f8:	d008      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80050fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050fe:	d81e      	bhi.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00a      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005108:	d010      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800510a:	e018      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800510c:	4b62      	ldr	r3, [pc, #392]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	4a61      	ldr	r2, [pc, #388]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005116:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005118:	e015      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	3304      	adds	r3, #4
 800511e:	2100      	movs	r1, #0
 8005120:	4618      	mov	r0, r3
 8005122:	f000 fa83 	bl	800562c <RCCEx_PLLSAI1_Config>
 8005126:	4603      	mov	r3, r0
 8005128:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800512a:	e00c      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3320      	adds	r3, #32
 8005130:	2100      	movs	r1, #0
 8005132:	4618      	mov	r0, r3
 8005134:	f000 fb6e 	bl	8005814 <RCCEx_PLLSAI2_Config>
 8005138:	4603      	mov	r3, r0
 800513a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800513c:	e003      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	74fb      	strb	r3, [r7, #19]
      break;
 8005142:	e000      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005146:	7cfb      	ldrb	r3, [r7, #19]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10b      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800514c:	4b52      	ldr	r3, [pc, #328]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800514e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005152:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800515a:	494f      	ldr	r1, [pc, #316]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800515c:	4313      	orrs	r3, r2
 800515e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005162:	e001      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005164:	7cfb      	ldrb	r3, [r7, #19]
 8005166:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 80a0 	beq.w	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005176:	2300      	movs	r3, #0
 8005178:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800517a:	4b47      	ldr	r3, [pc, #284]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800517c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005186:	2301      	movs	r3, #1
 8005188:	e000      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800518a:	2300      	movs	r3, #0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00d      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005190:	4b41      	ldr	r3, [pc, #260]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005194:	4a40      	ldr	r2, [pc, #256]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800519a:	6593      	str	r3, [r2, #88]	; 0x58
 800519c:	4b3e      	ldr	r3, [pc, #248]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800519e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a4:	60bb      	str	r3, [r7, #8]
 80051a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051a8:	2301      	movs	r3, #1
 80051aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051ac:	4b3b      	ldr	r3, [pc, #236]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a3a      	ldr	r2, [pc, #232]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80051b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051b8:	f7fd fb40 	bl	800283c <HAL_GetTick>
 80051bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051be:	e009      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051c0:	f7fd fb3c 	bl	800283c <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d902      	bls.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	74fb      	strb	r3, [r7, #19]
        break;
 80051d2:	e005      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051d4:	4b31      	ldr	r3, [pc, #196]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0ef      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80051e0:	7cfb      	ldrb	r3, [r7, #19]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d15c      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051e6:	4b2c      	ldr	r3, [pc, #176]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d01f      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	429a      	cmp	r2, r3
 8005202:	d019      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005204:	4b24      	ldr	r3, [pc, #144]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800520e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005210:	4b21      	ldr	r3, [pc, #132]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005216:	4a20      	ldr	r2, [pc, #128]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800521c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005220:	4b1d      	ldr	r3, [pc, #116]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005226:	4a1c      	ldr	r2, [pc, #112]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800522c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005230:	4a19      	ldr	r2, [pc, #100]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d016      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005242:	f7fd fafb 	bl	800283c <HAL_GetTick>
 8005246:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005248:	e00b      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800524a:	f7fd faf7 	bl	800283c <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	f241 3288 	movw	r2, #5000	; 0x1388
 8005258:	4293      	cmp	r3, r2
 800525a:	d902      	bls.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	74fb      	strb	r3, [r7, #19]
            break;
 8005260:	e006      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005262:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0ec      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005270:	7cfb      	ldrb	r3, [r7, #19]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10c      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005276:	4b08      	ldr	r3, [pc, #32]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005286:	4904      	ldr	r1, [pc, #16]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005288:	4313      	orrs	r3, r2
 800528a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800528e:	e009      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005290:	7cfb      	ldrb	r3, [r7, #19]
 8005292:	74bb      	strb	r3, [r7, #18]
 8005294:	e006      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005296:	bf00      	nop
 8005298:	40021000 	.word	0x40021000
 800529c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a0:	7cfb      	ldrb	r3, [r7, #19]
 80052a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052a4:	7c7b      	ldrb	r3, [r7, #17]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d105      	bne.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052aa:	4b9e      	ldr	r3, [pc, #632]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ae:	4a9d      	ldr	r2, [pc, #628]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052c2:	4b98      	ldr	r3, [pc, #608]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c8:	f023 0203 	bic.w	r2, r3, #3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	4994      	ldr	r1, [pc, #592]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00a      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052e4:	4b8f      	ldr	r3, [pc, #572]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ea:	f023 020c 	bic.w	r2, r3, #12
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f2:	498c      	ldr	r1, [pc, #560]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0304 	and.w	r3, r3, #4
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005306:	4b87      	ldr	r3, [pc, #540]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005314:	4983      	ldr	r1, [pc, #524]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0308 	and.w	r3, r3, #8
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00a      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005328:	4b7e      	ldr	r3, [pc, #504]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800532a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005336:	497b      	ldr	r1, [pc, #492]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0310 	and.w	r3, r3, #16
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800534a:	4b76      	ldr	r3, [pc, #472]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800534c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005350:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005358:	4972      	ldr	r1, [pc, #456]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0320 	and.w	r3, r3, #32
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800536c:	4b6d      	ldr	r3, [pc, #436]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800536e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005372:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800537a:	496a      	ldr	r1, [pc, #424]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00a      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800538e:	4b65      	ldr	r3, [pc, #404]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005394:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800539c:	4961      	ldr	r1, [pc, #388]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00a      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053b0:	4b5c      	ldr	r3, [pc, #368]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053be:	4959      	ldr	r1, [pc, #356]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00a      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053d2:	4b54      	ldr	r3, [pc, #336]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e0:	4950      	ldr	r1, [pc, #320]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00a      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053f4:	4b4b      	ldr	r3, [pc, #300]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005402:	4948      	ldr	r1, [pc, #288]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005404:	4313      	orrs	r3, r2
 8005406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00a      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005416:	4b43      	ldr	r3, [pc, #268]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005424:	493f      	ldr	r1, [pc, #252]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005426:	4313      	orrs	r3, r2
 8005428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d028      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005438:	4b3a      	ldr	r3, [pc, #232]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800543a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005446:	4937      	ldr	r1, [pc, #220]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005448:	4313      	orrs	r3, r2
 800544a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005452:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005456:	d106      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005458:	4b32      	ldr	r3, [pc, #200]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	4a31      	ldr	r2, [pc, #196]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800545e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005462:	60d3      	str	r3, [r2, #12]
 8005464:	e011      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800546a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800546e:	d10c      	bne.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3304      	adds	r3, #4
 8005474:	2101      	movs	r1, #1
 8005476:	4618      	mov	r0, r3
 8005478:	f000 f8d8 	bl	800562c <RCCEx_PLLSAI1_Config>
 800547c:	4603      	mov	r3, r0
 800547e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005480:	7cfb      	ldrb	r3, [r7, #19]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005486:	7cfb      	ldrb	r3, [r7, #19]
 8005488:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d028      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005496:	4b23      	ldr	r3, [pc, #140]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a4:	491f      	ldr	r1, [pc, #124]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054b4:	d106      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054b6:	4b1b      	ldr	r3, [pc, #108]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	4a1a      	ldr	r2, [pc, #104]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054c0:	60d3      	str	r3, [r2, #12]
 80054c2:	e011      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054cc:	d10c      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3304      	adds	r3, #4
 80054d2:	2101      	movs	r1, #1
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 f8a9 	bl	800562c <RCCEx_PLLSAI1_Config>
 80054da:	4603      	mov	r3, r0
 80054dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054de:	7cfb      	ldrb	r3, [r7, #19]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80054e4:	7cfb      	ldrb	r3, [r7, #19]
 80054e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d02b      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054f4:	4b0b      	ldr	r3, [pc, #44]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005502:	4908      	ldr	r1, [pc, #32]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800550e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005512:	d109      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005514:	4b03      	ldr	r3, [pc, #12]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	4a02      	ldr	r2, [pc, #8]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800551a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800551e:	60d3      	str	r3, [r2, #12]
 8005520:	e014      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005522:	bf00      	nop
 8005524:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800552c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005530:	d10c      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3304      	adds	r3, #4
 8005536:	2101      	movs	r1, #1
 8005538:	4618      	mov	r0, r3
 800553a:	f000 f877 	bl	800562c <RCCEx_PLLSAI1_Config>
 800553e:	4603      	mov	r3, r0
 8005540:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005542:	7cfb      	ldrb	r3, [r7, #19]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005548:	7cfb      	ldrb	r3, [r7, #19]
 800554a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d02f      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005558:	4b2b      	ldr	r3, [pc, #172]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800555a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005566:	4928      	ldr	r1, [pc, #160]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005568:	4313      	orrs	r3, r2
 800556a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005572:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005576:	d10d      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3304      	adds	r3, #4
 800557c:	2102      	movs	r1, #2
 800557e:	4618      	mov	r0, r3
 8005580:	f000 f854 	bl	800562c <RCCEx_PLLSAI1_Config>
 8005584:	4603      	mov	r3, r0
 8005586:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005588:	7cfb      	ldrb	r3, [r7, #19]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d014      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800558e:	7cfb      	ldrb	r3, [r7, #19]
 8005590:	74bb      	strb	r3, [r7, #18]
 8005592:	e011      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800559c:	d10c      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	3320      	adds	r3, #32
 80055a2:	2102      	movs	r1, #2
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 f935 	bl	8005814 <RCCEx_PLLSAI2_Config>
 80055aa:	4603      	mov	r3, r0
 80055ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055ae:	7cfb      	ldrb	r3, [r7, #19]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80055b4:	7cfb      	ldrb	r3, [r7, #19]
 80055b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00a      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055c4:	4b10      	ldr	r3, [pc, #64]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055d2:	490d      	ldr	r1, [pc, #52]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00b      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055e6:	4b08      	ldr	r3, [pc, #32]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055f6:	4904      	ldr	r1, [pc, #16]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80055fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40021000 	.word	0x40021000

0800560c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005610:	4b05      	ldr	r3, [pc, #20]	; (8005628 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a04      	ldr	r2, [pc, #16]	; (8005628 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005616:	f043 0304 	orr.w	r3, r3, #4
 800561a:	6013      	str	r3, [r2, #0]
}
 800561c:	bf00      	nop
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	40021000 	.word	0x40021000

0800562c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005636:	2300      	movs	r3, #0
 8005638:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800563a:	4b75      	ldr	r3, [pc, #468]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f003 0303 	and.w	r3, r3, #3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d018      	beq.n	8005678 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005646:	4b72      	ldr	r3, [pc, #456]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f003 0203 	and.w	r2, r3, #3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	429a      	cmp	r2, r3
 8005654:	d10d      	bne.n	8005672 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
       ||
 800565a:	2b00      	cmp	r3, #0
 800565c:	d009      	beq.n	8005672 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800565e:	4b6c      	ldr	r3, [pc, #432]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	091b      	lsrs	r3, r3, #4
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
       ||
 800566e:	429a      	cmp	r2, r3
 8005670:	d047      	beq.n	8005702 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	73fb      	strb	r3, [r7, #15]
 8005676:	e044      	b.n	8005702 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b03      	cmp	r3, #3
 800567e:	d018      	beq.n	80056b2 <RCCEx_PLLSAI1_Config+0x86>
 8005680:	2b03      	cmp	r3, #3
 8005682:	d825      	bhi.n	80056d0 <RCCEx_PLLSAI1_Config+0xa4>
 8005684:	2b01      	cmp	r3, #1
 8005686:	d002      	beq.n	800568e <RCCEx_PLLSAI1_Config+0x62>
 8005688:	2b02      	cmp	r3, #2
 800568a:	d009      	beq.n	80056a0 <RCCEx_PLLSAI1_Config+0x74>
 800568c:	e020      	b.n	80056d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800568e:	4b60      	ldr	r3, [pc, #384]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d11d      	bne.n	80056d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800569e:	e01a      	b.n	80056d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056a0:	4b5b      	ldr	r3, [pc, #364]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d116      	bne.n	80056da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056b0:	e013      	b.n	80056da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056b2:	4b57      	ldr	r3, [pc, #348]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10f      	bne.n	80056de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056be:	4b54      	ldr	r3, [pc, #336]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d109      	bne.n	80056de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056ce:	e006      	b.n	80056de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	73fb      	strb	r3, [r7, #15]
      break;
 80056d4:	e004      	b.n	80056e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056d6:	bf00      	nop
 80056d8:	e002      	b.n	80056e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056da:	bf00      	nop
 80056dc:	e000      	b.n	80056e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056de:	bf00      	nop
    }

    if(status == HAL_OK)
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10d      	bne.n	8005702 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056e6:	4b4a      	ldr	r3, [pc, #296]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6819      	ldr	r1, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	430b      	orrs	r3, r1
 80056fc:	4944      	ldr	r1, [pc, #272]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005702:	7bfb      	ldrb	r3, [r7, #15]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d17d      	bne.n	8005804 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005708:	4b41      	ldr	r3, [pc, #260]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a40      	ldr	r2, [pc, #256]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 800570e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005712:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005714:	f7fd f892 	bl	800283c <HAL_GetTick>
 8005718:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800571a:	e009      	b.n	8005730 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800571c:	f7fd f88e 	bl	800283c <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d902      	bls.n	8005730 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	73fb      	strb	r3, [r7, #15]
        break;
 800572e:	e005      	b.n	800573c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005730:	4b37      	ldr	r3, [pc, #220]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1ef      	bne.n	800571c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800573c:	7bfb      	ldrb	r3, [r7, #15]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d160      	bne.n	8005804 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d111      	bne.n	800576c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005748:	4b31      	ldr	r3, [pc, #196]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005750:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6892      	ldr	r2, [r2, #8]
 8005758:	0211      	lsls	r1, r2, #8
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	68d2      	ldr	r2, [r2, #12]
 800575e:	0912      	lsrs	r2, r2, #4
 8005760:	0452      	lsls	r2, r2, #17
 8005762:	430a      	orrs	r2, r1
 8005764:	492a      	ldr	r1, [pc, #168]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005766:	4313      	orrs	r3, r2
 8005768:	610b      	str	r3, [r1, #16]
 800576a:	e027      	b.n	80057bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d112      	bne.n	8005798 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005772:	4b27      	ldr	r3, [pc, #156]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800577a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	6892      	ldr	r2, [r2, #8]
 8005782:	0211      	lsls	r1, r2, #8
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6912      	ldr	r2, [r2, #16]
 8005788:	0852      	lsrs	r2, r2, #1
 800578a:	3a01      	subs	r2, #1
 800578c:	0552      	lsls	r2, r2, #21
 800578e:	430a      	orrs	r2, r1
 8005790:	491f      	ldr	r1, [pc, #124]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005792:	4313      	orrs	r3, r2
 8005794:	610b      	str	r3, [r1, #16]
 8005796:	e011      	b.n	80057bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005798:	4b1d      	ldr	r3, [pc, #116]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80057a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6892      	ldr	r2, [r2, #8]
 80057a8:	0211      	lsls	r1, r2, #8
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6952      	ldr	r2, [r2, #20]
 80057ae:	0852      	lsrs	r2, r2, #1
 80057b0:	3a01      	subs	r2, #1
 80057b2:	0652      	lsls	r2, r2, #25
 80057b4:	430a      	orrs	r2, r1
 80057b6:	4916      	ldr	r1, [pc, #88]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80057bc:	4b14      	ldr	r3, [pc, #80]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a13      	ldr	r2, [pc, #76]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c8:	f7fd f838 	bl	800283c <HAL_GetTick>
 80057cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057ce:	e009      	b.n	80057e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057d0:	f7fd f834 	bl	800283c <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d902      	bls.n	80057e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	73fb      	strb	r3, [r7, #15]
          break;
 80057e2:	e005      	b.n	80057f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057e4:	4b0a      	ldr	r3, [pc, #40]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0ef      	beq.n	80057d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d106      	bne.n	8005804 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80057f6:	4b06      	ldr	r3, [pc, #24]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057f8:	691a      	ldr	r2, [r3, #16]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	4904      	ldr	r1, [pc, #16]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005800:	4313      	orrs	r3, r2
 8005802:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005804:	7bfb      	ldrb	r3, [r7, #15]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	40021000 	.word	0x40021000

08005814 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005822:	4b6a      	ldr	r3, [pc, #424]	; (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f003 0303 	and.w	r3, r3, #3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d018      	beq.n	8005860 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800582e:	4b67      	ldr	r3, [pc, #412]	; (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f003 0203 	and.w	r2, r3, #3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	429a      	cmp	r2, r3
 800583c:	d10d      	bne.n	800585a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
       ||
 8005842:	2b00      	cmp	r3, #0
 8005844:	d009      	beq.n	800585a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005846:	4b61      	ldr	r3, [pc, #388]	; (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	091b      	lsrs	r3, r3, #4
 800584c:	f003 0307 	and.w	r3, r3, #7
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
       ||
 8005856:	429a      	cmp	r2, r3
 8005858:	d047      	beq.n	80058ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	73fb      	strb	r3, [r7, #15]
 800585e:	e044      	b.n	80058ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b03      	cmp	r3, #3
 8005866:	d018      	beq.n	800589a <RCCEx_PLLSAI2_Config+0x86>
 8005868:	2b03      	cmp	r3, #3
 800586a:	d825      	bhi.n	80058b8 <RCCEx_PLLSAI2_Config+0xa4>
 800586c:	2b01      	cmp	r3, #1
 800586e:	d002      	beq.n	8005876 <RCCEx_PLLSAI2_Config+0x62>
 8005870:	2b02      	cmp	r3, #2
 8005872:	d009      	beq.n	8005888 <RCCEx_PLLSAI2_Config+0x74>
 8005874:	e020      	b.n	80058b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005876:	4b55      	ldr	r3, [pc, #340]	; (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d11d      	bne.n	80058be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005886:	e01a      	b.n	80058be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005888:	4b50      	ldr	r3, [pc, #320]	; (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005890:	2b00      	cmp	r3, #0
 8005892:	d116      	bne.n	80058c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005898:	e013      	b.n	80058c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800589a:	4b4c      	ldr	r3, [pc, #304]	; (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10f      	bne.n	80058c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058a6:	4b49      	ldr	r3, [pc, #292]	; (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d109      	bne.n	80058c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058b6:	e006      	b.n	80058c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	73fb      	strb	r3, [r7, #15]
      break;
 80058bc:	e004      	b.n	80058c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80058be:	bf00      	nop
 80058c0:	e002      	b.n	80058c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80058c2:	bf00      	nop
 80058c4:	e000      	b.n	80058c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80058c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10d      	bne.n	80058ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80058ce:	4b3f      	ldr	r3, [pc, #252]	; (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6819      	ldr	r1, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	3b01      	subs	r3, #1
 80058e0:	011b      	lsls	r3, r3, #4
 80058e2:	430b      	orrs	r3, r1
 80058e4:	4939      	ldr	r1, [pc, #228]	; (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d167      	bne.n	80059c0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80058f0:	4b36      	ldr	r3, [pc, #216]	; (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a35      	ldr	r2, [pc, #212]	; (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80058f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058fc:	f7fc ff9e 	bl	800283c <HAL_GetTick>
 8005900:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005902:	e009      	b.n	8005918 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005904:	f7fc ff9a 	bl	800283c <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d902      	bls.n	8005918 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	73fb      	strb	r3, [r7, #15]
        break;
 8005916:	e005      	b.n	8005924 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005918:	4b2c      	ldr	r3, [pc, #176]	; (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1ef      	bne.n	8005904 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005924:	7bfb      	ldrb	r3, [r7, #15]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d14a      	bne.n	80059c0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d111      	bne.n	8005954 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005930:	4b26      	ldr	r3, [pc, #152]	; (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6892      	ldr	r2, [r2, #8]
 8005940:	0211      	lsls	r1, r2, #8
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	68d2      	ldr	r2, [r2, #12]
 8005946:	0912      	lsrs	r2, r2, #4
 8005948:	0452      	lsls	r2, r2, #17
 800594a:	430a      	orrs	r2, r1
 800594c:	491f      	ldr	r1, [pc, #124]	; (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800594e:	4313      	orrs	r3, r2
 8005950:	614b      	str	r3, [r1, #20]
 8005952:	e011      	b.n	8005978 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005954:	4b1d      	ldr	r3, [pc, #116]	; (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800595c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	6892      	ldr	r2, [r2, #8]
 8005964:	0211      	lsls	r1, r2, #8
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	6912      	ldr	r2, [r2, #16]
 800596a:	0852      	lsrs	r2, r2, #1
 800596c:	3a01      	subs	r2, #1
 800596e:	0652      	lsls	r2, r2, #25
 8005970:	430a      	orrs	r2, r1
 8005972:	4916      	ldr	r1, [pc, #88]	; (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005974:	4313      	orrs	r3, r2
 8005976:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005978:	4b14      	ldr	r3, [pc, #80]	; (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a13      	ldr	r2, [pc, #76]	; (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800597e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005982:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005984:	f7fc ff5a 	bl	800283c <HAL_GetTick>
 8005988:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800598a:	e009      	b.n	80059a0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800598c:	f7fc ff56 	bl	800283c <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d902      	bls.n	80059a0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	73fb      	strb	r3, [r7, #15]
          break;
 800599e:	e005      	b.n	80059ac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80059a0:	4b0a      	ldr	r3, [pc, #40]	; (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0ef      	beq.n	800598c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d106      	bne.n	80059c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80059b2:	4b06      	ldr	r3, [pc, #24]	; (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80059b4:	695a      	ldr	r2, [r3, #20]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	4904      	ldr	r1, [pc, #16]	; (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	40021000 	.word	0x40021000

080059d0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d06c      	beq.n	8005abc <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d106      	bne.n	80059fc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fc fb1c 	bl	8002034 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2202      	movs	r2, #2
 8005a00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	22ca      	movs	r2, #202	; 0xca
 8005a0a:	625a      	str	r2, [r3, #36]	; 0x24
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2253      	movs	r2, #83	; 0x53
 8005a12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fa49 	bl	8005eac <RTC_EnterInitMode>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005a1e:	7bfb      	ldrb	r3, [r7, #15]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d14b      	bne.n	8005abc <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	6812      	ldr	r2, [r2, #0]
 8005a2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a36:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6899      	ldr	r1, [r3, #8]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	68d2      	ldr	r2, [r2, #12]
 8005a5e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6919      	ldr	r1, [r3, #16]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	041a      	lsls	r2, r3, #16
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 fa4d 	bl	8005f14 <RTC_ExitInitMode>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d11b      	bne.n	8005abc <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 0203 	bic.w	r2, r2, #3
 8005a92:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	69da      	ldr	r2, [r3, #28]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	22ff      	movs	r2, #255	; 0xff
 8005ab2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ac6:	b590      	push	{r4, r7, lr}
 8005ac8:	b087      	sub	sp, #28
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_RTC_SetTime+0x1a>
 8005adc:	2302      	movs	r3, #2
 8005ade:	e08b      	b.n	8005bf8 <HAL_RTC_SetTime+0x132>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	22ca      	movs	r2, #202	; 0xca
 8005af6:	625a      	str	r2, [r3, #36]	; 0x24
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2253      	movs	r2, #83	; 0x53
 8005afe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 f9d3 	bl	8005eac <RTC_EnterInitMode>
 8005b06:	4603      	mov	r3, r0
 8005b08:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005b0a:	7cfb      	ldrb	r3, [r7, #19]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d163      	bne.n	8005bd8 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d126      	bne.n	8005b64 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d102      	bne.n	8005b2a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2200      	movs	r2, #0
 8005b28:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fa2e 	bl	8005f90 <RTC_ByteToBcd2>
 8005b34:	4603      	mov	r3, r0
 8005b36:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	785b      	ldrb	r3, [r3, #1]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 fa27 	bl	8005f90 <RTC_ByteToBcd2>
 8005b42:	4603      	mov	r3, r0
 8005b44:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b46:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	789b      	ldrb	r3, [r3, #2]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 fa1f 	bl	8005f90 <RTC_ByteToBcd2>
 8005b52:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b54:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	78db      	ldrb	r3, [r3, #3]
 8005b5c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	e018      	b.n	8005b96 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d102      	bne.n	8005b78 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2200      	movs	r2, #0
 8005b76:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	785b      	ldrb	r3, [r3, #1]
 8005b82:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b84:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b8a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	78db      	ldrb	r3, [r3, #3]
 8005b90:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b92:	4313      	orrs	r3, r2
 8005b94:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005ba0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005ba4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005bb4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6899      	ldr	r1, [r3, #8]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 f9a0 	bl	8005f14 <RTC_ExitInitMode>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	22ff      	movs	r2, #255	; 0xff
 8005bde:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005be0:	7cfb      	ldrb	r3, [r7, #19]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d103      	bne.n	8005bee <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005bf6:	7cfb      	ldrb	r3, [r7, #19]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	371c      	adds	r7, #28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd90      	pop	{r4, r7, pc}

08005c00 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005c2e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c32:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	0c1b      	lsrs	r3, r3, #16
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	0a1b      	lsrs	r3, r3, #8
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c5c:	b2da      	uxtb	r2, r3
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	0d9b      	lsrs	r3, r3, #22
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	b2da      	uxtb	r2, r3
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d11a      	bne.n	8005cae <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 f9a7 	bl	8005fd0 <RTC_Bcd2ToByte>
 8005c82:	4603      	mov	r3, r0
 8005c84:	461a      	mov	r2, r3
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	785b      	ldrb	r3, [r3, #1]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 f99e 	bl	8005fd0 <RTC_Bcd2ToByte>
 8005c94:	4603      	mov	r3, r0
 8005c96:	461a      	mov	r2, r3
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	789b      	ldrb	r3, [r3, #2]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 f995 	bl	8005fd0 <RTC_Bcd2ToByte>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	461a      	mov	r2, r3
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3718      	adds	r7, #24
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005cb8:	b590      	push	{r4, r7, lr}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d101      	bne.n	8005cd2 <HAL_RTC_SetDate+0x1a>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	e075      	b.n	8005dbe <HAL_RTC_SetDate+0x106>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2202      	movs	r2, #2
 8005cde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10e      	bne.n	8005d06 <HAL_RTC_SetDate+0x4e>
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	785b      	ldrb	r3, [r3, #1]
 8005cec:	f003 0310 	and.w	r3, r3, #16
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d008      	beq.n	8005d06 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	785b      	ldrb	r3, [r3, #1]
 8005cf8:	f023 0310 	bic.w	r3, r3, #16
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	330a      	adds	r3, #10
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d11c      	bne.n	8005d46 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	78db      	ldrb	r3, [r3, #3]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 f93d 	bl	8005f90 <RTC_ByteToBcd2>
 8005d16:	4603      	mov	r3, r0
 8005d18:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	785b      	ldrb	r3, [r3, #1]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 f936 	bl	8005f90 <RTC_ByteToBcd2>
 8005d24:	4603      	mov	r3, r0
 8005d26:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005d28:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	789b      	ldrb	r3, [r3, #2]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 f92e 	bl	8005f90 <RTC_ByteToBcd2>
 8005d34:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d36:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005d40:	4313      	orrs	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]
 8005d44:	e00e      	b.n	8005d64 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	78db      	ldrb	r3, [r3, #3]
 8005d4a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	785b      	ldrb	r3, [r3, #1]
 8005d50:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005d52:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005d58:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005d60:	4313      	orrs	r3, r2
 8005d62:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	22ca      	movs	r2, #202	; 0xca
 8005d6a:	625a      	str	r2, [r3, #36]	; 0x24
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2253      	movs	r2, #83	; 0x53
 8005d72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 f899 	bl	8005eac <RTC_EnterInitMode>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005d7e:	7cfb      	ldrb	r3, [r7, #19]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10c      	bne.n	8005d9e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d8e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d92:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f000 f8bd 	bl	8005f14 <RTC_ExitInitMode>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	22ff      	movs	r2, #255	; 0xff
 8005da4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005da6:	7cfb      	ldrb	r3, [r7, #19]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d103      	bne.n	8005db4 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005dbc:	7cfb      	ldrb	r3, [r7, #19]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	371c      	adds	r7, #28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd90      	pop	{r4, r7, pc}

08005dc6 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b086      	sub	sp, #24
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	60f8      	str	r0, [r7, #12]
 8005dce:	60b9      	str	r1, [r7, #8]
 8005dd0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ddc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005de0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	0c1b      	lsrs	r3, r3, #16
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	0a1b      	lsrs	r3, r3, #8
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	f003 031f 	and.w	r3, r3, #31
 8005df6:	b2da      	uxtb	r2, r3
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	0b5b      	lsrs	r3, r3, #13
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d11a      	bne.n	8005e56 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	78db      	ldrb	r3, [r3, #3]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f000 f8d3 	bl	8005fd0 <RTC_Bcd2ToByte>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	785b      	ldrb	r3, [r3, #1]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 f8ca 	bl	8005fd0 <RTC_Bcd2ToByte>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	461a      	mov	r2, r3
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	789b      	ldrb	r3, [r3, #2]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 f8c1 	bl	8005fd0 <RTC_Bcd2ToByte>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	461a      	mov	r2, r3
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3718      	adds	r7, #24
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e76:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005e78:	f7fc fce0 	bl	800283c <HAL_GetTick>
 8005e7c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e7e:	e009      	b.n	8005e94 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e80:	f7fc fcdc 	bl	800283c <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e8e:	d901      	bls.n	8005e94 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e007      	b.n	8005ea4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f003 0320 	and.w	r3, r3, #32
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d0ee      	beq.n	8005e80 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d120      	bne.n	8005f08 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f04f 32ff 	mov.w	r2, #4294967295
 8005ece:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005ed0:	f7fc fcb4 	bl	800283c <HAL_GetTick>
 8005ed4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005ed6:	e00d      	b.n	8005ef4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005ed8:	f7fc fcb0 	bl	800283c <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ee6:	d905      	bls.n	8005ef4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2203      	movs	r2, #3
 8005ef0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d102      	bne.n	8005f08 <RTC_EnterInitMode+0x5c>
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
 8005f04:	2b03      	cmp	r3, #3
 8005f06:	d1e7      	bne.n	8005ed8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005f20:	4b1a      	ldr	r3, [pc, #104]	; (8005f8c <RTC_ExitInitMode+0x78>)
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	4a19      	ldr	r2, [pc, #100]	; (8005f8c <RTC_ExitInitMode+0x78>)
 8005f26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f2a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005f2c:	4b17      	ldr	r3, [pc, #92]	; (8005f8c <RTC_ExitInitMode+0x78>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f003 0320 	and.w	r3, r3, #32
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10c      	bne.n	8005f52 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7ff ff91 	bl	8005e60 <HAL_RTC_WaitForSynchro>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d01e      	beq.n	8005f82 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2203      	movs	r2, #3
 8005f48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	73fb      	strb	r3, [r7, #15]
 8005f50:	e017      	b.n	8005f82 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f52:	4b0e      	ldr	r3, [pc, #56]	; (8005f8c <RTC_ExitInitMode+0x78>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	4a0d      	ldr	r2, [pc, #52]	; (8005f8c <RTC_ExitInitMode+0x78>)
 8005f58:	f023 0320 	bic.w	r3, r3, #32
 8005f5c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7ff ff7e 	bl	8005e60 <HAL_RTC_WaitForSynchro>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d005      	beq.n	8005f76 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2203      	movs	r2, #3
 8005f6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f76:	4b05      	ldr	r3, [pc, #20]	; (8005f8c <RTC_ExitInitMode+0x78>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	4a04      	ldr	r2, [pc, #16]	; (8005f8c <RTC_ExitInitMode+0x78>)
 8005f7c:	f043 0320 	orr.w	r3, r3, #32
 8005f80:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	40002800 	.word	0x40002800

08005f90 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	4603      	mov	r3, r0
 8005f98:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005f9e:	79fb      	ldrb	r3, [r7, #7]
 8005fa0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005fa2:	e005      	b.n	8005fb0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005faa:	7afb      	ldrb	r3, [r7, #11]
 8005fac:	3b0a      	subs	r3, #10
 8005fae:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005fb0:	7afb      	ldrb	r3, [r7, #11]
 8005fb2:	2b09      	cmp	r3, #9
 8005fb4:	d8f6      	bhi.n	8005fa4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	011b      	lsls	r3, r3, #4
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	7afb      	ldrb	r3, [r7, #11]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	b2db      	uxtb	r3, r3
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8005fda:	79fb      	ldrb	r3, [r7, #7]
 8005fdc:	091b      	lsrs	r3, r3, #4
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	0092      	lsls	r2, r2, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8005fea:	79fb      	ldrb	r3, [r7, #7]
 8005fec:	f003 030f 	and.w	r3, r3, #15
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	b2db      	uxtb	r3, r3
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e095      	b.n	8006142 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	2b00      	cmp	r3, #0
 800601c:	d108      	bne.n	8006030 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006026:	d009      	beq.n	800603c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	61da      	str	r2, [r3, #28]
 800602e:	e005      	b.n	800603c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d106      	bne.n	800605c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7fc f81e 	bl	8002098 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006072:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800607c:	d902      	bls.n	8006084 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800607e:	2300      	movs	r3, #0
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	e002      	b.n	800608a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006088:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006092:	d007      	beq.n	80060a4 <HAL_SPI_Init+0xa0>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800609c:	d002      	beq.n	80060a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80060b4:	431a      	orrs	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	431a      	orrs	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	431a      	orrs	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060d2:	431a      	orrs	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060dc:	431a      	orrs	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e6:	ea42 0103 	orr.w	r1, r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	0c1b      	lsrs	r3, r3, #16
 8006100:	f003 0204 	and.w	r2, r3, #4
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	f003 0310 	and.w	r3, r3, #16
 800610c:	431a      	orrs	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006112:	f003 0308 	and.w	r3, r3, #8
 8006116:	431a      	orrs	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006120:	ea42 0103 	orr.w	r1, r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b082      	sub	sp, #8
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d101      	bne.n	800615c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e01a      	b.n	8006192 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006172:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7fb ffdb 	bl	8002130 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b088      	sub	sp, #32
 800619e:	af02      	add	r7, sp, #8
 80061a0:	60f8      	str	r0, [r7, #12]
 80061a2:	60b9      	str	r1, [r7, #8]
 80061a4:	603b      	str	r3, [r7, #0]
 80061a6:	4613      	mov	r3, r2
 80061a8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061aa:	2300      	movs	r3, #0
 80061ac:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061b6:	d112      	bne.n	80061de <HAL_SPI_Receive+0x44>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10e      	bne.n	80061de <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2204      	movs	r2, #4
 80061c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80061c8:	88fa      	ldrh	r2, [r7, #6]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	4613      	mov	r3, r2
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	68b9      	ldr	r1, [r7, #8]
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 f910 	bl	80063fa <HAL_SPI_TransmitReceive>
 80061da:	4603      	mov	r3, r0
 80061dc:	e109      	b.n	80063f2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d101      	bne.n	80061ec <HAL_SPI_Receive+0x52>
 80061e8:	2302      	movs	r3, #2
 80061ea:	e102      	b.n	80063f2 <HAL_SPI_Receive+0x258>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061f4:	f7fc fb22 	bl	800283c <HAL_GetTick>
 80061f8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b01      	cmp	r3, #1
 8006204:	d002      	beq.n	800620c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006206:	2302      	movs	r3, #2
 8006208:	75fb      	strb	r3, [r7, #23]
    goto error;
 800620a:	e0e9      	b.n	80063e0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d002      	beq.n	8006218 <HAL_SPI_Receive+0x7e>
 8006212:	88fb      	ldrh	r3, [r7, #6]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d102      	bne.n	800621e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800621c:	e0e0      	b.n	80063e0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2204      	movs	r2, #4
 8006222:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	88fa      	ldrh	r2, [r7, #6]
 8006236:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	88fa      	ldrh	r2, [r7, #6]
 800623e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006268:	d908      	bls.n	800627c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006278:	605a      	str	r2, [r3, #4]
 800627a:	e007      	b.n	800628c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800628a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006294:	d10f      	bne.n	80062b6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c0:	2b40      	cmp	r3, #64	; 0x40
 80062c2:	d007      	beq.n	80062d4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062dc:	d867      	bhi.n	80063ae <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80062de:	e030      	b.n	8006342 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d117      	bne.n	800631e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f103 020c 	add.w	r2, r3, #12
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fa:	7812      	ldrb	r2, [r2, #0]
 80062fc:	b2d2      	uxtb	r2, r2
 80062fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006304:	1c5a      	adds	r2, r3, #1
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006310:	b29b      	uxth	r3, r3
 8006312:	3b01      	subs	r3, #1
 8006314:	b29a      	uxth	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800631c:	e011      	b.n	8006342 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800631e:	f7fc fa8d 	bl	800283c <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	429a      	cmp	r2, r3
 800632c:	d803      	bhi.n	8006336 <HAL_SPI_Receive+0x19c>
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006334:	d102      	bne.n	800633c <HAL_SPI_Receive+0x1a2>
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d102      	bne.n	8006342 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006340:	e04e      	b.n	80063e0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006348:	b29b      	uxth	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1c8      	bne.n	80062e0 <HAL_SPI_Receive+0x146>
 800634e:	e034      	b.n	80063ba <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b01      	cmp	r3, #1
 800635c:	d115      	bne.n	800638a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68da      	ldr	r2, [r3, #12]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006368:	b292      	uxth	r2, r2
 800636a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006370:	1c9a      	adds	r2, r3, #2
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800637c:	b29b      	uxth	r3, r3
 800637e:	3b01      	subs	r3, #1
 8006380:	b29a      	uxth	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006388:	e011      	b.n	80063ae <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800638a:	f7fc fa57 	bl	800283c <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	683a      	ldr	r2, [r7, #0]
 8006396:	429a      	cmp	r2, r3
 8006398:	d803      	bhi.n	80063a2 <HAL_SPI_Receive+0x208>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a0:	d102      	bne.n	80063a8 <HAL_SPI_Receive+0x20e>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d102      	bne.n	80063ae <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80063ac:	e018      	b.n	80063e0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1ca      	bne.n	8006350 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	6839      	ldr	r1, [r7, #0]
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f000 fffe 	bl	80073c0 <SPI_EndRxTransaction>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d002      	beq.n	80063d0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2220      	movs	r2, #32
 80063ce:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	75fb      	strb	r3, [r7, #23]
 80063dc:	e000      	b.n	80063e0 <HAL_SPI_Receive+0x246>
  }

error :
 80063de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80063f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b08a      	sub	sp, #40	; 0x28
 80063fe:	af00      	add	r7, sp, #0
 8006400:	60f8      	str	r0, [r7, #12]
 8006402:	60b9      	str	r1, [r7, #8]
 8006404:	607a      	str	r2, [r7, #4]
 8006406:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006408:	2301      	movs	r3, #1
 800640a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800640c:	2300      	movs	r3, #0
 800640e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006418:	2b01      	cmp	r3, #1
 800641a:	d101      	bne.n	8006420 <HAL_SPI_TransmitReceive+0x26>
 800641c:	2302      	movs	r3, #2
 800641e:	e1fb      	b.n	8006818 <HAL_SPI_TransmitReceive+0x41e>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006428:	f7fc fa08 	bl	800283c <HAL_GetTick>
 800642c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006434:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800643c:	887b      	ldrh	r3, [r7, #2]
 800643e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006440:	887b      	ldrh	r3, [r7, #2]
 8006442:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006444:	7efb      	ldrb	r3, [r7, #27]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d00e      	beq.n	8006468 <HAL_SPI_TransmitReceive+0x6e>
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006450:	d106      	bne.n	8006460 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d102      	bne.n	8006460 <HAL_SPI_TransmitReceive+0x66>
 800645a:	7efb      	ldrb	r3, [r7, #27]
 800645c:	2b04      	cmp	r3, #4
 800645e:	d003      	beq.n	8006468 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006460:	2302      	movs	r3, #2
 8006462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006466:	e1cd      	b.n	8006804 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d005      	beq.n	800647a <HAL_SPI_TransmitReceive+0x80>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d002      	beq.n	800647a <HAL_SPI_TransmitReceive+0x80>
 8006474:	887b      	ldrh	r3, [r7, #2]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d103      	bne.n	8006482 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006480:	e1c0      	b.n	8006804 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b04      	cmp	r3, #4
 800648c:	d003      	beq.n	8006496 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2205      	movs	r2, #5
 8006492:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	887a      	ldrh	r2, [r7, #2]
 80064a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	887a      	ldrh	r2, [r7, #2]
 80064ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	887a      	ldrh	r2, [r7, #2]
 80064bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	887a      	ldrh	r2, [r7, #2]
 80064c2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064d8:	d802      	bhi.n	80064e0 <HAL_SPI_TransmitReceive+0xe6>
 80064da:	8a3b      	ldrh	r3, [r7, #16]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d908      	bls.n	80064f2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80064ee:	605a      	str	r2, [r3, #4]
 80064f0:	e007      	b.n	8006502 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006500:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650c:	2b40      	cmp	r3, #64	; 0x40
 800650e:	d007      	beq.n	8006520 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800651e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006528:	d97c      	bls.n	8006624 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d002      	beq.n	8006538 <HAL_SPI_TransmitReceive+0x13e>
 8006532:	8a7b      	ldrh	r3, [r7, #18]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d169      	bne.n	800660c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653c:	881a      	ldrh	r2, [r3, #0]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006548:	1c9a      	adds	r2, r3, #2
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006552:	b29b      	uxth	r3, r3
 8006554:	3b01      	subs	r3, #1
 8006556:	b29a      	uxth	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800655c:	e056      	b.n	800660c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f003 0302 	and.w	r3, r3, #2
 8006568:	2b02      	cmp	r3, #2
 800656a:	d11b      	bne.n	80065a4 <HAL_SPI_TransmitReceive+0x1aa>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006570:	b29b      	uxth	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d016      	beq.n	80065a4 <HAL_SPI_TransmitReceive+0x1aa>
 8006576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006578:	2b01      	cmp	r3, #1
 800657a:	d113      	bne.n	80065a4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006580:	881a      	ldrh	r2, [r3, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658c:	1c9a      	adds	r2, r3, #2
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006596:	b29b      	uxth	r3, r3
 8006598:	3b01      	subs	r3, #1
 800659a:	b29a      	uxth	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065a0:	2300      	movs	r3, #0
 80065a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d11c      	bne.n	80065ec <HAL_SPI_TransmitReceive+0x1f2>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d016      	beq.n	80065ec <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68da      	ldr	r2, [r3, #12]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c8:	b292      	uxth	r2, r2
 80065ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d0:	1c9a      	adds	r2, r3, #2
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065dc:	b29b      	uxth	r3, r3
 80065de:	3b01      	subs	r3, #1
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065e8:	2301      	movs	r3, #1
 80065ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80065ec:	f7fc f926 	bl	800283c <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d807      	bhi.n	800660c <HAL_SPI_TransmitReceive+0x212>
 80065fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006602:	d003      	beq.n	800660c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800660a:	e0fb      	b.n	8006804 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006610:	b29b      	uxth	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1a3      	bne.n	800655e <HAL_SPI_TransmitReceive+0x164>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800661c:	b29b      	uxth	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d19d      	bne.n	800655e <HAL_SPI_TransmitReceive+0x164>
 8006622:	e0df      	b.n	80067e4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <HAL_SPI_TransmitReceive+0x23a>
 800662c:	8a7b      	ldrh	r3, [r7, #18]
 800662e:	2b01      	cmp	r3, #1
 8006630:	f040 80cb 	bne.w	80067ca <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006638:	b29b      	uxth	r3, r3
 800663a:	2b01      	cmp	r3, #1
 800663c:	d912      	bls.n	8006664 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006642:	881a      	ldrh	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664e:	1c9a      	adds	r2, r3, #2
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006658:	b29b      	uxth	r3, r3
 800665a:	3b02      	subs	r3, #2
 800665c:	b29a      	uxth	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006662:	e0b2      	b.n	80067ca <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	330c      	adds	r3, #12
 800666e:	7812      	ldrb	r2, [r2, #0]
 8006670:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006676:	1c5a      	adds	r2, r3, #1
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006680:	b29b      	uxth	r3, r3
 8006682:	3b01      	subs	r3, #1
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800668a:	e09e      	b.n	80067ca <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b02      	cmp	r3, #2
 8006698:	d134      	bne.n	8006704 <HAL_SPI_TransmitReceive+0x30a>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800669e:	b29b      	uxth	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d02f      	beq.n	8006704 <HAL_SPI_TransmitReceive+0x30a>
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d12c      	bne.n	8006704 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d912      	bls.n	80066da <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b8:	881a      	ldrh	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c4:	1c9a      	adds	r2, r3, #2
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	3b02      	subs	r3, #2
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066d8:	e012      	b.n	8006700 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	330c      	adds	r3, #12
 80066e4:	7812      	ldrb	r2, [r2, #0]
 80066e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	3b01      	subs	r3, #1
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006700:	2300      	movs	r3, #0
 8006702:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b01      	cmp	r3, #1
 8006710:	d148      	bne.n	80067a4 <HAL_SPI_TransmitReceive+0x3aa>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006718:	b29b      	uxth	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d042      	beq.n	80067a4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006724:	b29b      	uxth	r3, r3
 8006726:	2b01      	cmp	r3, #1
 8006728:	d923      	bls.n	8006772 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006734:	b292      	uxth	r2, r2
 8006736:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673c:	1c9a      	adds	r2, r3, #2
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006748:	b29b      	uxth	r3, r3
 800674a:	3b02      	subs	r3, #2
 800674c:	b29a      	uxth	r2, r3
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800675a:	b29b      	uxth	r3, r3
 800675c:	2b01      	cmp	r3, #1
 800675e:	d81f      	bhi.n	80067a0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800676e:	605a      	str	r2, [r3, #4]
 8006770:	e016      	b.n	80067a0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f103 020c 	add.w	r2, r3, #12
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	7812      	ldrb	r2, [r2, #0]
 8006780:	b2d2      	uxtb	r2, r2
 8006782:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006788:	1c5a      	adds	r2, r3, #1
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006794:	b29b      	uxth	r3, r3
 8006796:	3b01      	subs	r3, #1
 8006798:	b29a      	uxth	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067a0:	2301      	movs	r3, #1
 80067a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80067a4:	f7fc f84a 	bl	800283c <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d803      	bhi.n	80067bc <HAL_SPI_TransmitReceive+0x3c2>
 80067b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ba:	d102      	bne.n	80067c2 <HAL_SPI_TransmitReceive+0x3c8>
 80067bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d103      	bne.n	80067ca <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80067c8:	e01c      	b.n	8006804 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f47f af5b 	bne.w	800668c <HAL_SPI_TransmitReceive+0x292>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067dc:	b29b      	uxth	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f47f af54 	bne.w	800668c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067e4:	69fa      	ldr	r2, [r7, #28]
 80067e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 fe41 	bl	8007470 <SPI_EndRxTxTransaction>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d006      	beq.n	8006802 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2220      	movs	r2, #32
 80067fe:	661a      	str	r2, [r3, #96]	; 0x60
 8006800:	e000      	b.n	8006804 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006802:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006814:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006818:	4618      	mov	r0, r3
 800681a:	3728      	adds	r7, #40	; 0x28
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	4613      	mov	r3, r2
 800682c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006838:	2b01      	cmp	r3, #1
 800683a:	d101      	bne.n	8006840 <HAL_SPI_Transmit_IT+0x20>
 800683c:	2302      	movs	r3, #2
 800683e:	e072      	b.n	8006926 <HAL_SPI_Transmit_IT+0x106>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <HAL_SPI_Transmit_IT+0x34>
 800684e:	88fb      	ldrh	r3, [r7, #6]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d102      	bne.n	800685a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006858:	e060      	b.n	800691c <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b01      	cmp	r3, #1
 8006864:	d002      	beq.n	800686c <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8006866:	2302      	movs	r3, #2
 8006868:	75fb      	strb	r3, [r7, #23]
    goto error;
 800686a:	e057      	b.n	800691c <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2203      	movs	r2, #3
 8006870:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	88fa      	ldrh	r2, [r7, #6]
 8006884:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	88fa      	ldrh	r2, [r7, #6]
 800688a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068b0:	d903      	bls.n	80068ba <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	4a1f      	ldr	r2, [pc, #124]	; (8006934 <HAL_SPI_Transmit_IT+0x114>)
 80068b6:	651a      	str	r2, [r3, #80]	; 0x50
 80068b8:	e002      	b.n	80068c0 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	4a1e      	ldr	r2, [pc, #120]	; (8006938 <HAL_SPI_Transmit_IT+0x118>)
 80068be:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068c8:	d10f      	bne.n	80068ea <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80068f8:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006904:	2b40      	cmp	r3, #64	; 0x40
 8006906:	d008      	beq.n	800691a <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006916:	601a      	str	r2, [r3, #0]
 8006918:	e000      	b.n	800691c <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800691a:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006924:	7dfb      	ldrb	r3, [r7, #23]
}
 8006926:	4618      	mov	r0, r3
 8006928:	371c      	adds	r7, #28
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	08007147 	.word	0x08007147
 8006938:	08007101 	.word	0x08007101

0800693c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	4613      	mov	r3, r2
 8006948:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d110      	bne.n	8006978 <HAL_SPI_Receive_IT+0x3c>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800695e:	d10b      	bne.n	8006978 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2204      	movs	r2, #4
 8006964:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8006968:	88fb      	ldrh	r3, [r7, #6]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	68b9      	ldr	r1, [r7, #8]
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 f894 	bl	8006a9c <HAL_SPI_TransmitReceive_IT>
 8006974:	4603      	mov	r3, r0
 8006976:	e089      	b.n	8006a8c <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800697e:	2b01      	cmp	r3, #1
 8006980:	d101      	bne.n	8006986 <HAL_SPI_Receive_IT+0x4a>
 8006982:	2302      	movs	r3, #2
 8006984:	e082      	b.n	8006a8c <HAL_SPI_Receive_IT+0x150>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b01      	cmp	r3, #1
 8006998:	d002      	beq.n	80069a0 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800699a:	2302      	movs	r3, #2
 800699c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800699e:	e070      	b.n	8006a82 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <HAL_SPI_Receive_IT+0x70>
 80069a6:	88fb      	ldrh	r3, [r7, #6]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d102      	bne.n	80069b2 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80069b0:	e067      	b.n	8006a82 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2204      	movs	r2, #4
 80069b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	88fa      	ldrh	r2, [r7, #6]
 80069ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	88fa      	ldrh	r2, [r7, #6]
 80069d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069f6:	d90b      	bls.n	8006a10 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a06:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4a22      	ldr	r2, [pc, #136]	; (8006a94 <HAL_SPI_Receive_IT+0x158>)
 8006a0c:	64da      	str	r2, [r3, #76]	; 0x4c
 8006a0e:	e00a      	b.n	8006a26 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a1e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4a1d      	ldr	r2, [pc, #116]	; (8006a98 <HAL_SPI_Receive_IT+0x15c>)
 8006a24:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a2e:	d10f      	bne.n	8006a50 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006a4e:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685a      	ldr	r2, [r3, #4]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006a5e:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6a:	2b40      	cmp	r3, #64	; 0x40
 8006a6c:	d008      	beq.n	8006a80 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	e000      	b.n	8006a82 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8006a80:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3718      	adds	r7, #24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	080070b5 	.word	0x080070b5
 8006a98:	08007065 	.word	0x08007065

08006a9c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
 8006aa8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d101      	bne.n	8006abc <HAL_SPI_TransmitReceive_IT+0x20>
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e091      	b.n	8006be0 <HAL_SPI_TransmitReceive_IT+0x144>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006aca:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ad2:	7dbb      	ldrb	r3, [r7, #22]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d00d      	beq.n	8006af4 <HAL_SPI_TransmitReceive_IT+0x58>
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ade:	d106      	bne.n	8006aee <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d102      	bne.n	8006aee <HAL_SPI_TransmitReceive_IT+0x52>
 8006ae8:	7dbb      	ldrb	r3, [r7, #22]
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	d002      	beq.n	8006af4 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8006aee:	2302      	movs	r3, #2
 8006af0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006af2:	e070      	b.n	8006bd6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d005      	beq.n	8006b06 <HAL_SPI_TransmitReceive_IT+0x6a>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d002      	beq.n	8006b06 <HAL_SPI_TransmitReceive_IT+0x6a>
 8006b00:	887b      	ldrh	r3, [r7, #2]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d102      	bne.n	8006b0c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b0a:	e064      	b.n	8006bd6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b04      	cmp	r3, #4
 8006b16:	d003      	beq.n	8006b20 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2205      	movs	r2, #5
 8006b1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	887a      	ldrh	r2, [r7, #2]
 8006b30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	887a      	ldrh	r2, [r7, #2]
 8006b36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	887a      	ldrh	r2, [r7, #2]
 8006b42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	887a      	ldrh	r2, [r7, #2]
 8006b4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b56:	d906      	bls.n	8006b66 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	4a24      	ldr	r2, [pc, #144]	; (8006bec <HAL_SPI_TransmitReceive_IT+0x150>)
 8006b5c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	4a23      	ldr	r2, [pc, #140]	; (8006bf0 <HAL_SPI_TransmitReceive_IT+0x154>)
 8006b62:	651a      	str	r2, [r3, #80]	; 0x50
 8006b64:	e005      	b.n	8006b72 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	4a22      	ldr	r2, [pc, #136]	; (8006bf4 <HAL_SPI_TransmitReceive_IT+0x158>)
 8006b6a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4a22      	ldr	r2, [pc, #136]	; (8006bf8 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8006b70:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b7a:	d802      	bhi.n	8006b82 <HAL_SPI_TransmitReceive_IT+0xe6>
 8006b7c:	887b      	ldrh	r3, [r7, #2]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d908      	bls.n	8006b94 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b90:	605a      	str	r2, [r3, #4]
 8006b92:	e007      	b.n	8006ba4 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ba2:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8006bb2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bbe:	2b40      	cmp	r3, #64	; 0x40
 8006bc0:	d008      	beq.n	8006bd4 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	e000      	b.n	8006bd6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8006bd4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	371c      	adds	r7, #28
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	08006f9f 	.word	0x08006f9f
 8006bf0:	08007005 	.word	0x08007005
 8006bf4:	08006e4f 	.word	0x08006e4f
 8006bf8:	08006f0d 	.word	0x08006f0d

08006bfc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b088      	sub	sp, #32
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	099b      	lsrs	r3, r3, #6
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10f      	bne.n	8006c40 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00a      	beq.n	8006c40 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	099b      	lsrs	r3, r3, #6
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d004      	beq.n	8006c40 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	4798      	blx	r3
    return;
 8006c3e:	e0d7      	b.n	8006df0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	085b      	lsrs	r3, r3, #1
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00a      	beq.n	8006c62 <HAL_SPI_IRQHandler+0x66>
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	09db      	lsrs	r3, r3, #7
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d004      	beq.n	8006c62 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	4798      	blx	r3
    return;
 8006c60:	e0c6      	b.n	8006df0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	095b      	lsrs	r3, r3, #5
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10c      	bne.n	8006c88 <HAL_SPI_IRQHandler+0x8c>
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	099b      	lsrs	r3, r3, #6
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d106      	bne.n	8006c88 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	0a1b      	lsrs	r3, r3, #8
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 80b4 	beq.w	8006df0 <HAL_SPI_IRQHandler+0x1f4>
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	095b      	lsrs	r3, r3, #5
 8006c8c:	f003 0301 	and.w	r3, r3, #1
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 80ad 	beq.w	8006df0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	099b      	lsrs	r3, r3, #6
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d023      	beq.n	8006cea <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b03      	cmp	r3, #3
 8006cac:	d011      	beq.n	8006cd2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cb2:	f043 0204 	orr.w	r2, r3, #4
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cba:	2300      	movs	r3, #0
 8006cbc:	617b      	str	r3, [r7, #20]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	617b      	str	r3, [r7, #20]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	617b      	str	r3, [r7, #20]
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	e00b      	b.n	8006cea <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	613b      	str	r3, [r7, #16]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	613b      	str	r3, [r7, #16]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	613b      	str	r3, [r7, #16]
 8006ce6:	693b      	ldr	r3, [r7, #16]
        return;
 8006ce8:	e082      	b.n	8006df0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	095b      	lsrs	r3, r3, #5
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d014      	beq.n	8006d20 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cfa:	f043 0201 	orr.w	r2, r3, #1
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006d02:	2300      	movs	r3, #0
 8006d04:	60fb      	str	r3, [r7, #12]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	60fb      	str	r3, [r7, #12]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	0a1b      	lsrs	r3, r3, #8
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00c      	beq.n	8006d46 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d30:	f043 0208 	orr.w	r2, r3, #8
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006d38:	2300      	movs	r3, #0
 8006d3a:	60bb      	str	r3, [r7, #8]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	60bb      	str	r3, [r7, #8]
 8006d44:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d04f      	beq.n	8006dee <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	685a      	ldr	r2, [r3, #4]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d5c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	f003 0302 	and.w	r3, r3, #2
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d104      	bne.n	8006d7a <HAL_SPI_IRQHandler+0x17e>
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d034      	beq.n	8006de4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	685a      	ldr	r2, [r3, #4]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f022 0203 	bic.w	r2, r2, #3
 8006d88:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d011      	beq.n	8006db6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d96:	4a18      	ldr	r2, [pc, #96]	; (8006df8 <HAL_SPI_IRQHandler+0x1fc>)
 8006d98:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fb ffda 	bl	8002d58 <HAL_DMA_Abort_IT>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d005      	beq.n	8006db6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d016      	beq.n	8006dec <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc2:	4a0d      	ldr	r2, [pc, #52]	; (8006df8 <HAL_SPI_IRQHandler+0x1fc>)
 8006dc4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fb ffc4 	bl	8002d58 <HAL_DMA_Abort_IT>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00a      	beq.n	8006dec <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006de2:	e003      	b.n	8006dec <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f813 	bl	8006e10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006dea:	e000      	b.n	8006dee <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006dec:	bf00      	nop
    return;
 8006dee:	bf00      	nop
  }
}
 8006df0:	3720      	adds	r7, #32
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	08006e25 	.word	0x08006e25

08006dfc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e30:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f7ff ffe5 	bl	8006e10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e46:	bf00      	nop
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b082      	sub	sp, #8
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d923      	bls.n	8006eaa <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68da      	ldr	r2, [r3, #12]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6c:	b292      	uxth	r2, r2
 8006e6e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e74:	1c9a      	adds	r2, r3, #2
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	3b02      	subs	r3, #2
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d11f      	bne.n	8006ed8 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ea6:	605a      	str	r2, [r3, #4]
 8006ea8:	e016      	b.n	8006ed8 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f103 020c 	add.w	r2, r3, #12
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb6:	7812      	ldrb	r2, [r2, #0]
 8006eb8:	b2d2      	uxtb	r2, r2
 8006eba:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10f      	bne.n	8006f04 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006ef2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d102      	bne.n	8006f04 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fafc 	bl	80074fc <SPI_CloseRxTx_ISR>
    }
  }
}
 8006f04:	bf00      	nop
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d912      	bls.n	8006f44 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f22:	881a      	ldrh	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2e:	1c9a      	adds	r2, r3, #2
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	3b02      	subs	r3, #2
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f42:	e012      	b.n	8006f6a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	330c      	adds	r3, #12
 8006f4e:	7812      	ldrb	r2, [r2, #0]
 8006f50:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f56:	1c5a      	adds	r2, r3, #1
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	3b01      	subs	r3, #1
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d110      	bne.n	8006f96 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	685a      	ldr	r2, [r3, #4]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f82:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d102      	bne.n	8006f96 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fab3 	bl	80074fc <SPI_CloseRxTx_ISR>
    }
  }
}
 8006f96:	bf00      	nop
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b082      	sub	sp, #8
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68da      	ldr	r2, [r3, #12]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb0:	b292      	uxth	r2, r2
 8006fb2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb8:	1c9a      	adds	r2, r3, #2
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10f      	bne.n	8006ffc <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fea:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d102      	bne.n	8006ffc <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fa80 	bl	80074fc <SPI_CloseRxTx_ISR>
    }
  }
}
 8006ffc:	bf00      	nop
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007010:	881a      	ldrh	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701c:	1c9a      	adds	r2, r3, #2
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007026:	b29b      	uxth	r3, r3
 8007028:	3b01      	subs	r3, #1
 800702a:	b29a      	uxth	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007034:	b29b      	uxth	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d110      	bne.n	800705c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007048:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007050:	b29b      	uxth	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d102      	bne.n	800705c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fa50 	bl	80074fc <SPI_CloseRxTx_ISR>
    }
  }
}
 800705c:	bf00      	nop
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f103 020c 	add.w	r2, r3, #12
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007078:	7812      	ldrb	r2, [r2, #0]
 800707a:	b2d2      	uxtb	r2, r2
 800707c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007082:	1c5a      	adds	r2, r3, #1
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800708e:	b29b      	uxth	r3, r3
 8007090:	3b01      	subs	r3, #1
 8007092:	b29a      	uxth	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d102      	bne.n	80070ac <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fa6a 	bl	8007580 <SPI_CloseRx_ISR>
  }
}
 80070ac:	bf00      	nop
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68da      	ldr	r2, [r3, #12]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c6:	b292      	uxth	r2, r2
 80070c8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ce:	1c9a      	adds	r2, r3, #2
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070da:	b29b      	uxth	r3, r3
 80070dc:	3b01      	subs	r3, #1
 80070de:	b29a      	uxth	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d102      	bne.n	80070f8 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fa44 	bl	8007580 <SPI_CloseRx_ISR>
  }
}
 80070f8:	bf00      	nop
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	330c      	adds	r3, #12
 8007112:	7812      	ldrb	r2, [r2, #0]
 8007114:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711a:	1c5a      	adds	r2, r3, #1
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007124:	b29b      	uxth	r3, r3
 8007126:	3b01      	subs	r3, #1
 8007128:	b29a      	uxth	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007132:	b29b      	uxth	r3, r3
 8007134:	2b00      	cmp	r3, #0
 8007136:	d102      	bne.n	800713e <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fa51 	bl	80075e0 <SPI_CloseTx_ISR>
  }
}
 800713e:	bf00      	nop
 8007140:	3708      	adds	r7, #8
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b082      	sub	sp, #8
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007152:	881a      	ldrh	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715e:	1c9a      	adds	r2, r3, #2
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007168:	b29b      	uxth	r3, r3
 800716a:	3b01      	subs	r3, #1
 800716c:	b29a      	uxth	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007176:	b29b      	uxth	r3, r3
 8007178:	2b00      	cmp	r3, #0
 800717a:	d102      	bne.n	8007182 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fa2f 	bl	80075e0 <SPI_CloseTx_ISR>
  }
}
 8007182:	bf00      	nop
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
	...

0800718c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b088      	sub	sp, #32
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	603b      	str	r3, [r7, #0]
 8007198:	4613      	mov	r3, r2
 800719a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800719c:	f7fb fb4e 	bl	800283c <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a4:	1a9b      	subs	r3, r3, r2
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	4413      	add	r3, r2
 80071aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071ac:	f7fb fb46 	bl	800283c <HAL_GetTick>
 80071b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071b2:	4b39      	ldr	r3, [pc, #228]	; (8007298 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	015b      	lsls	r3, r3, #5
 80071b8:	0d1b      	lsrs	r3, r3, #20
 80071ba:	69fa      	ldr	r2, [r7, #28]
 80071bc:	fb02 f303 	mul.w	r3, r2, r3
 80071c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071c2:	e054      	b.n	800726e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ca:	d050      	beq.n	800726e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071cc:	f7fb fb36 	bl	800283c <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	69fa      	ldr	r2, [r7, #28]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d902      	bls.n	80071e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d13d      	bne.n	800725e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	685a      	ldr	r2, [r3, #4]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071fa:	d111      	bne.n	8007220 <SPI_WaitFlagStateUntilTimeout+0x94>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007204:	d004      	beq.n	8007210 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800720e:	d107      	bne.n	8007220 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800721e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007228:	d10f      	bne.n	800724a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007248:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e017      	b.n	800728e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d101      	bne.n	8007268 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	3b01      	subs	r3, #1
 800726c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	689a      	ldr	r2, [r3, #8]
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	4013      	ands	r3, r2
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	429a      	cmp	r2, r3
 800727c:	bf0c      	ite	eq
 800727e:	2301      	moveq	r3, #1
 8007280:	2300      	movne	r3, #0
 8007282:	b2db      	uxtb	r3, r3
 8007284:	461a      	mov	r2, r3
 8007286:	79fb      	ldrb	r3, [r7, #7]
 8007288:	429a      	cmp	r2, r3
 800728a:	d19b      	bne.n	80071c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3720      	adds	r7, #32
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	20000010 	.word	0x20000010

0800729c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b088      	sub	sp, #32
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
 80072a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80072aa:	f7fb fac7 	bl	800283c <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b2:	1a9b      	subs	r3, r3, r2
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	4413      	add	r3, r2
 80072b8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80072ba:	f7fb fabf 	bl	800283c <HAL_GetTick>
 80072be:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80072c0:	4b3e      	ldr	r3, [pc, #248]	; (80073bc <SPI_WaitFifoStateUntilTimeout+0x120>)
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	4613      	mov	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	00da      	lsls	r2, r3, #3
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	0d1b      	lsrs	r3, r3, #20
 80072d0:	69fa      	ldr	r2, [r7, #28]
 80072d2:	fb02 f303 	mul.w	r3, r2, r3
 80072d6:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80072d8:	e062      	b.n	80073a0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80072e0:	d109      	bne.n	80072f6 <SPI_WaitFifoStateUntilTimeout+0x5a>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d106      	bne.n	80072f6 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	330c      	adds	r3, #12
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80072f4:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fc:	d050      	beq.n	80073a0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80072fe:	f7fb fa9d 	bl	800283c <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	69fa      	ldr	r2, [r7, #28]
 800730a:	429a      	cmp	r2, r3
 800730c:	d902      	bls.n	8007314 <SPI_WaitFifoStateUntilTimeout+0x78>
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d13d      	bne.n	8007390 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007322:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800732c:	d111      	bne.n	8007352 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007336:	d004      	beq.n	8007342 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007340:	d107      	bne.n	8007352 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007350:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800735a:	d10f      	bne.n	800737c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800736a:	601a      	str	r2, [r3, #0]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800737a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	e010      	b.n	80073b2 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8007396:	2300      	movs	r3, #0
 8007398:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	3b01      	subs	r3, #1
 800739e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689a      	ldr	r2, [r3, #8]
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	4013      	ands	r3, r2
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d194      	bne.n	80072da <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3720      	adds	r7, #32
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	20000010 	.word	0x20000010

080073c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af02      	add	r7, sp, #8
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073d4:	d111      	bne.n	80073fa <SPI_EndRxTransaction+0x3a>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073de:	d004      	beq.n	80073ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073e8:	d107      	bne.n	80073fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073f8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	2200      	movs	r2, #0
 8007402:	2180      	movs	r1, #128	; 0x80
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f7ff fec1 	bl	800718c <SPI_WaitFlagStateUntilTimeout>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d007      	beq.n	8007420 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007414:	f043 0220 	orr.w	r2, r3, #32
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e023      	b.n	8007468 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007428:	d11d      	bne.n	8007466 <SPI_EndRxTransaction+0xa6>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007432:	d004      	beq.n	800743e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800743c:	d113      	bne.n	8007466 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	2200      	movs	r2, #0
 8007446:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f7ff ff26 	bl	800729c <SPI_WaitFifoStateUntilTimeout>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d007      	beq.n	8007466 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800745a:	f043 0220 	orr.w	r2, r3, #32
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e000      	b.n	8007468 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af02      	add	r7, sp, #8
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2200      	movs	r2, #0
 8007484:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f7ff ff07 	bl	800729c <SPI_WaitFifoStateUntilTimeout>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d007      	beq.n	80074a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007498:	f043 0220 	orr.w	r2, r3, #32
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e027      	b.n	80074f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2200      	movs	r2, #0
 80074ac:	2180      	movs	r1, #128	; 0x80
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f7ff fe6c 	bl	800718c <SPI_WaitFlagStateUntilTimeout>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d007      	beq.n	80074ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074be:	f043 0220 	orr.w	r2, r3, #32
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e014      	b.n	80074f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f7ff fee0 	bl	800729c <SPI_WaitFifoStateUntilTimeout>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d007      	beq.n	80074f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074e6:	f043 0220 	orr.w	r2, r3, #32
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e000      	b.n	80074f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007504:	f7fb f99a 	bl	800283c <HAL_GetTick>
 8007508:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	685a      	ldr	r2, [r3, #4]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f022 0220 	bic.w	r2, r2, #32
 8007518:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	2164      	movs	r1, #100	; 0x64
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f7ff ffa6 	bl	8007470 <SPI_EndRxTxTransaction>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d005      	beq.n	8007536 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800752e:	f043 0220 	orr.w	r2, r3, #32
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800753a:	2b00      	cmp	r3, #0
 800753c:	d115      	bne.n	800756a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b04      	cmp	r3, #4
 8007548:	d107      	bne.n	800755a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f003 fd02 	bl	800af5c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007558:	e00e      	b.n	8007578 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7ff fc4a 	bl	8006dfc <HAL_SPI_TxRxCpltCallback>
}
 8007568:	e006      	b.n	8007578 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7ff fc4c 	bl	8006e10 <HAL_SPI_ErrorCallback>
}
 8007578:	bf00      	nop
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	685a      	ldr	r2, [r3, #4]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007596:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007598:	f7fb f950 	bl	800283c <HAL_GetTick>
 800759c:	4603      	mov	r3, r0
 800759e:	461a      	mov	r2, r3
 80075a0:	2164      	movs	r1, #100	; 0x64
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7ff ff0c 	bl	80073c0 <SPI_EndRxTransaction>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d005      	beq.n	80075ba <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075b2:	f043 0220 	orr.w	r2, r3, #32
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d103      	bne.n	80075d2 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f003 fcc6 	bl	800af5c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80075d0:	e002      	b.n	80075d8 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7ff fc1c 	bl	8006e10 <HAL_SPI_ErrorCallback>
}
 80075d8:	bf00      	nop
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075e8:	f7fb f928 	bl	800283c <HAL_GetTick>
 80075ec:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	685a      	ldr	r2, [r3, #4]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80075fc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	2164      	movs	r1, #100	; 0x64
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7ff ff34 	bl	8007470 <SPI_EndRxTxTransaction>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d005      	beq.n	800761a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007612:	f043 0220 	orr.w	r2, r3, #32
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10a      	bne.n	8007638 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007622:	2300      	movs	r3, #0
 8007624:	60bb      	str	r3, [r7, #8]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	60bb      	str	r3, [r7, #8]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	60bb      	str	r3, [r7, #8]
 8007636:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007644:	2b00      	cmp	r3, #0
 8007646:	d003      	beq.n	8007650 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f7ff fbe1 	bl	8006e10 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800764e:	e002      	b.n	8007656 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f003 fc97 	bl	800af84 <HAL_SPI_TxCpltCallback>
}
 8007656:	bf00      	nop
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b082      	sub	sp, #8
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d101      	bne.n	8007670 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e049      	b.n	8007704 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	d106      	bne.n	800768a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7fa fd75 	bl	8002174 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2202      	movs	r2, #2
 800768e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	3304      	adds	r3, #4
 800769a:	4619      	mov	r1, r3
 800769c:	4610      	mov	r0, r2
 800769e:	f000 f9ed 	bl	8007a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b01      	cmp	r3, #1
 800771e:	d001      	beq.n	8007724 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e04f      	b.n	80077c4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2202      	movs	r2, #2
 8007728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68da      	ldr	r2, [r3, #12]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f042 0201 	orr.w	r2, r2, #1
 800773a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a23      	ldr	r2, [pc, #140]	; (80077d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d01d      	beq.n	8007782 <HAL_TIM_Base_Start_IT+0x76>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800774e:	d018      	beq.n	8007782 <HAL_TIM_Base_Start_IT+0x76>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a1f      	ldr	r2, [pc, #124]	; (80077d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d013      	beq.n	8007782 <HAL_TIM_Base_Start_IT+0x76>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a1e      	ldr	r2, [pc, #120]	; (80077d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d00e      	beq.n	8007782 <HAL_TIM_Base_Start_IT+0x76>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a1c      	ldr	r2, [pc, #112]	; (80077dc <HAL_TIM_Base_Start_IT+0xd0>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d009      	beq.n	8007782 <HAL_TIM_Base_Start_IT+0x76>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a1b      	ldr	r2, [pc, #108]	; (80077e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d004      	beq.n	8007782 <HAL_TIM_Base_Start_IT+0x76>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a19      	ldr	r2, [pc, #100]	; (80077e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d115      	bne.n	80077ae <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	689a      	ldr	r2, [r3, #8]
 8007788:	4b17      	ldr	r3, [pc, #92]	; (80077e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800778a:	4013      	ands	r3, r2
 800778c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2b06      	cmp	r3, #6
 8007792:	d015      	beq.n	80077c0 <HAL_TIM_Base_Start_IT+0xb4>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800779a:	d011      	beq.n	80077c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f042 0201 	orr.w	r2, r2, #1
 80077aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ac:	e008      	b.n	80077c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f042 0201 	orr.w	r2, r2, #1
 80077bc:	601a      	str	r2, [r3, #0]
 80077be:	e000      	b.n	80077c2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	40012c00 	.word	0x40012c00
 80077d4:	40000400 	.word	0x40000400
 80077d8:	40000800 	.word	0x40000800
 80077dc:	40000c00 	.word	0x40000c00
 80077e0:	40013400 	.word	0x40013400
 80077e4:	40014000 	.word	0x40014000
 80077e8:	00010007 	.word	0x00010007

080077ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	f003 0302 	and.w	r3, r3, #2
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d122      	bne.n	8007848 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	f003 0302 	and.w	r3, r3, #2
 800780c:	2b02      	cmp	r3, #2
 800780e:	d11b      	bne.n	8007848 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f06f 0202 	mvn.w	r2, #2
 8007818:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	f003 0303 	and.w	r3, r3, #3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f905 	bl	8007a3e <HAL_TIM_IC_CaptureCallback>
 8007834:	e005      	b.n	8007842 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f8f7 	bl	8007a2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 f908 	bl	8007a52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	f003 0304 	and.w	r3, r3, #4
 8007852:	2b04      	cmp	r3, #4
 8007854:	d122      	bne.n	800789c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	f003 0304 	and.w	r3, r3, #4
 8007860:	2b04      	cmp	r3, #4
 8007862:	d11b      	bne.n	800789c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f06f 0204 	mvn.w	r2, #4
 800786c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2202      	movs	r2, #2
 8007872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800787e:	2b00      	cmp	r3, #0
 8007880:	d003      	beq.n	800788a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f8db 	bl	8007a3e <HAL_TIM_IC_CaptureCallback>
 8007888:	e005      	b.n	8007896 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f8cd 	bl	8007a2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f8de 	bl	8007a52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	f003 0308 	and.w	r3, r3, #8
 80078a6:	2b08      	cmp	r3, #8
 80078a8:	d122      	bne.n	80078f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	f003 0308 	and.w	r3, r3, #8
 80078b4:	2b08      	cmp	r3, #8
 80078b6:	d11b      	bne.n	80078f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f06f 0208 	mvn.w	r2, #8
 80078c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2204      	movs	r2, #4
 80078c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	f003 0303 	and.w	r3, r3, #3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d003      	beq.n	80078de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 f8b1 	bl	8007a3e <HAL_TIM_IC_CaptureCallback>
 80078dc:	e005      	b.n	80078ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f8a3 	bl	8007a2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f8b4 	bl	8007a52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	f003 0310 	and.w	r3, r3, #16
 80078fa:	2b10      	cmp	r3, #16
 80078fc:	d122      	bne.n	8007944 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	f003 0310 	and.w	r3, r3, #16
 8007908:	2b10      	cmp	r3, #16
 800790a:	d11b      	bne.n	8007944 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f06f 0210 	mvn.w	r2, #16
 8007914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2208      	movs	r2, #8
 800791a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007926:	2b00      	cmp	r3, #0
 8007928:	d003      	beq.n	8007932 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f887 	bl	8007a3e <HAL_TIM_IC_CaptureCallback>
 8007930:	e005      	b.n	800793e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f879 	bl	8007a2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 f88a 	bl	8007a52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	2b01      	cmp	r3, #1
 8007950:	d10e      	bne.n	8007970 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	f003 0301 	and.w	r3, r3, #1
 800795c:	2b01      	cmp	r3, #1
 800795e:	d107      	bne.n	8007970 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f06f 0201 	mvn.w	r2, #1
 8007968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f7fa f804 	bl	8001978 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800797a:	2b80      	cmp	r3, #128	; 0x80
 800797c:	d10e      	bne.n	800799c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007988:	2b80      	cmp	r3, #128	; 0x80
 800798a:	d107      	bne.n	800799c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f99c 	bl	8007cd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079aa:	d10e      	bne.n	80079ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b6:	2b80      	cmp	r3, #128	; 0x80
 80079b8:	d107      	bne.n	80079ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80079c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f98f 	bl	8007ce8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d4:	2b40      	cmp	r3, #64	; 0x40
 80079d6:	d10e      	bne.n	80079f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e2:	2b40      	cmp	r3, #64	; 0x40
 80079e4:	d107      	bne.n	80079f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f838 	bl	8007a66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	f003 0320 	and.w	r3, r3, #32
 8007a00:	2b20      	cmp	r3, #32
 8007a02:	d10e      	bne.n	8007a22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	f003 0320 	and.w	r3, r3, #32
 8007a0e:	2b20      	cmp	r3, #32
 8007a10:	d107      	bne.n	8007a22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f06f 0220 	mvn.w	r2, #32
 8007a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f94f 	bl	8007cc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a22:	bf00      	nop
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b083      	sub	sp, #12
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a32:	bf00      	nop
 8007a34:	370c      	adds	r7, #12
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr

08007a3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a3e:	b480      	push	{r7}
 8007a40:	b083      	sub	sp, #12
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a46:	bf00      	nop
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a52:	b480      	push	{r7}
 8007a54:	b083      	sub	sp, #12
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a5a:	bf00      	nop
 8007a5c:	370c      	adds	r7, #12
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a66:	b480      	push	{r7}
 8007a68:	b083      	sub	sp, #12
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a6e:	bf00      	nop
 8007a70:	370c      	adds	r7, #12
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
	...

08007a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a40      	ldr	r2, [pc, #256]	; (8007b90 <TIM_Base_SetConfig+0x114>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d013      	beq.n	8007abc <TIM_Base_SetConfig+0x40>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a9a:	d00f      	beq.n	8007abc <TIM_Base_SetConfig+0x40>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4a3d      	ldr	r2, [pc, #244]	; (8007b94 <TIM_Base_SetConfig+0x118>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d00b      	beq.n	8007abc <TIM_Base_SetConfig+0x40>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a3c      	ldr	r2, [pc, #240]	; (8007b98 <TIM_Base_SetConfig+0x11c>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d007      	beq.n	8007abc <TIM_Base_SetConfig+0x40>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a3b      	ldr	r2, [pc, #236]	; (8007b9c <TIM_Base_SetConfig+0x120>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d003      	beq.n	8007abc <TIM_Base_SetConfig+0x40>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a3a      	ldr	r2, [pc, #232]	; (8007ba0 <TIM_Base_SetConfig+0x124>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d108      	bne.n	8007ace <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a2f      	ldr	r2, [pc, #188]	; (8007b90 <TIM_Base_SetConfig+0x114>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d01f      	beq.n	8007b16 <TIM_Base_SetConfig+0x9a>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007adc:	d01b      	beq.n	8007b16 <TIM_Base_SetConfig+0x9a>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a2c      	ldr	r2, [pc, #176]	; (8007b94 <TIM_Base_SetConfig+0x118>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d017      	beq.n	8007b16 <TIM_Base_SetConfig+0x9a>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a2b      	ldr	r2, [pc, #172]	; (8007b98 <TIM_Base_SetConfig+0x11c>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d013      	beq.n	8007b16 <TIM_Base_SetConfig+0x9a>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a2a      	ldr	r2, [pc, #168]	; (8007b9c <TIM_Base_SetConfig+0x120>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d00f      	beq.n	8007b16 <TIM_Base_SetConfig+0x9a>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a29      	ldr	r2, [pc, #164]	; (8007ba0 <TIM_Base_SetConfig+0x124>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d00b      	beq.n	8007b16 <TIM_Base_SetConfig+0x9a>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a28      	ldr	r2, [pc, #160]	; (8007ba4 <TIM_Base_SetConfig+0x128>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d007      	beq.n	8007b16 <TIM_Base_SetConfig+0x9a>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a27      	ldr	r2, [pc, #156]	; (8007ba8 <TIM_Base_SetConfig+0x12c>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d003      	beq.n	8007b16 <TIM_Base_SetConfig+0x9a>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a26      	ldr	r2, [pc, #152]	; (8007bac <TIM_Base_SetConfig+0x130>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d108      	bne.n	8007b28 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	689a      	ldr	r2, [r3, #8]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a10      	ldr	r2, [pc, #64]	; (8007b90 <TIM_Base_SetConfig+0x114>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d00f      	beq.n	8007b74 <TIM_Base_SetConfig+0xf8>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a12      	ldr	r2, [pc, #72]	; (8007ba0 <TIM_Base_SetConfig+0x124>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d00b      	beq.n	8007b74 <TIM_Base_SetConfig+0xf8>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a11      	ldr	r2, [pc, #68]	; (8007ba4 <TIM_Base_SetConfig+0x128>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d007      	beq.n	8007b74 <TIM_Base_SetConfig+0xf8>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a10      	ldr	r2, [pc, #64]	; (8007ba8 <TIM_Base_SetConfig+0x12c>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d003      	beq.n	8007b74 <TIM_Base_SetConfig+0xf8>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a0f      	ldr	r2, [pc, #60]	; (8007bac <TIM_Base_SetConfig+0x130>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d103      	bne.n	8007b7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	691a      	ldr	r2, [r3, #16]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	615a      	str	r2, [r3, #20]
}
 8007b82:	bf00      	nop
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	40012c00 	.word	0x40012c00
 8007b94:	40000400 	.word	0x40000400
 8007b98:	40000800 	.word	0x40000800
 8007b9c:	40000c00 	.word	0x40000c00
 8007ba0:	40013400 	.word	0x40013400
 8007ba4:	40014000 	.word	0x40014000
 8007ba8:	40014400 	.word	0x40014400
 8007bac:	40014800 	.word	0x40014800

08007bb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d101      	bne.n	8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	e068      	b.n	8007c9a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a2e      	ldr	r2, [pc, #184]	; (8007ca8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d004      	beq.n	8007bfc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a2d      	ldr	r2, [pc, #180]	; (8007cac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d108      	bne.n	8007c0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007c02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a1e      	ldr	r2, [pc, #120]	; (8007ca8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d01d      	beq.n	8007c6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c3a:	d018      	beq.n	8007c6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a1b      	ldr	r2, [pc, #108]	; (8007cb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d013      	beq.n	8007c6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a1a      	ldr	r2, [pc, #104]	; (8007cb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d00e      	beq.n	8007c6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a18      	ldr	r2, [pc, #96]	; (8007cb8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d009      	beq.n	8007c6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a13      	ldr	r2, [pc, #76]	; (8007cac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d004      	beq.n	8007c6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a14      	ldr	r2, [pc, #80]	; (8007cbc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d10c      	bne.n	8007c88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	40012c00 	.word	0x40012c00
 8007cac:	40013400 	.word	0x40013400
 8007cb0:	40000400 	.word	0x40000400
 8007cb4:	40000800 	.word	0x40000800
 8007cb8:	40000c00 	.word	0x40000c00
 8007cbc:	40014000 	.word	0x40014000

08007cc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cc8:	bf00      	nop
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cdc:	bf00      	nop
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e040      	b.n	8007d90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d106      	bne.n	8007d24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7fa fa4e 	bl	80021c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2224      	movs	r2, #36	; 0x24
 8007d28:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f022 0201 	bic.w	r2, r2, #1
 8007d38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fb26 	bl	800838c <UART_SetConfig>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d101      	bne.n	8007d4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e022      	b.n	8007d90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d002      	beq.n	8007d58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fdd4 	bl	8008900 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	685a      	ldr	r2, [r3, #4]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	689a      	ldr	r2, [r3, #8]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f042 0201 	orr.w	r2, r2, #1
 8007d86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fe5b 	bl	8008a44 <UART_CheckIdleState>
 8007d8e:	4603      	mov	r3, r0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b08a      	sub	sp, #40	; 0x28
 8007d9c:	af02      	add	r7, sp, #8
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	603b      	str	r3, [r7, #0]
 8007da4:	4613      	mov	r3, r2
 8007da6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dac:	2b20      	cmp	r3, #32
 8007dae:	f040 8082 	bne.w	8007eb6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d002      	beq.n	8007dbe <HAL_UART_Transmit+0x26>
 8007db8:	88fb      	ldrh	r3, [r7, #6]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d101      	bne.n	8007dc2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e07a      	b.n	8007eb8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d101      	bne.n	8007dd0 <HAL_UART_Transmit+0x38>
 8007dcc:	2302      	movs	r3, #2
 8007dce:	e073      	b.n	8007eb8 <HAL_UART_Transmit+0x120>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2221      	movs	r2, #33	; 0x21
 8007de4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007de6:	f7fa fd29 	bl	800283c <HAL_GetTick>
 8007dea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	88fa      	ldrh	r2, [r7, #6]
 8007df0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	88fa      	ldrh	r2, [r7, #6]
 8007df8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e04:	d108      	bne.n	8007e18 <HAL_UART_Transmit+0x80>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d104      	bne.n	8007e18 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	61bb      	str	r3, [r7, #24]
 8007e16:	e003      	b.n	8007e20 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007e28:	e02d      	b.n	8007e86 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	2200      	movs	r2, #0
 8007e32:	2180      	movs	r1, #128	; 0x80
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f000 fe4e 	bl	8008ad6 <UART_WaitOnFlagUntilTimeout>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d001      	beq.n	8007e44 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e039      	b.n	8007eb8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10b      	bne.n	8007e62 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	881a      	ldrh	r2, [r3, #0]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e56:	b292      	uxth	r2, r2
 8007e58:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	3302      	adds	r3, #2
 8007e5e:	61bb      	str	r3, [r7, #24]
 8007e60:	e008      	b.n	8007e74 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	781a      	ldrb	r2, [r3, #0]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	b292      	uxth	r2, r2
 8007e6c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	3301      	adds	r3, #1
 8007e72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1cb      	bne.n	8007e2a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	2140      	movs	r1, #64	; 0x40
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f000 fe1a 	bl	8008ad6 <UART_WaitOnFlagUntilTimeout>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d001      	beq.n	8007eac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e005      	b.n	8007eb8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2220      	movs	r2, #32
 8007eb0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	e000      	b.n	8007eb8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007eb6:	2302      	movs	r3, #2
  }
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3720      	adds	r7, #32
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ed2:	2b20      	cmp	r3, #32
 8007ed4:	d131      	bne.n	8007f3a <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d002      	beq.n	8007ee2 <HAL_UART_Receive_IT+0x22>
 8007edc:	88fb      	ldrh	r3, [r7, #6]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d101      	bne.n	8007ee6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e02a      	b.n	8007f3c <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d101      	bne.n	8007ef4 <HAL_UART_Receive_IT+0x34>
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	e023      	b.n	8007f3c <HAL_UART_Receive_IT+0x7c>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a0f      	ldr	r2, [pc, #60]	; (8007f44 <HAL_UART_Receive_IT+0x84>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d00e      	beq.n	8007f2a <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d007      	beq.n	8007f2a <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007f28:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007f2a:	88fb      	ldrh	r3, [r7, #6]
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	68b9      	ldr	r1, [r7, #8]
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f000 fe4d 	bl	8008bd0 <UART_Start_Receive_IT>
 8007f36:	4603      	mov	r3, r0
 8007f38:	e000      	b.n	8007f3c <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8007f3a:	2302      	movs	r3, #2
  }
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	40008000 	.word	0x40008000

08007f48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b088      	sub	sp, #32
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	69db      	ldr	r3, [r3, #28]
 8007f56:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f68:	69fa      	ldr	r2, [r7, #28]
 8007f6a:	f640 030f 	movw	r3, #2063	; 0x80f
 8007f6e:	4013      	ands	r3, r2
 8007f70:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d113      	bne.n	8007fa0 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	f003 0320 	and.w	r3, r3, #32
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00e      	beq.n	8007fa0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	f003 0320 	and.w	r3, r3, #32
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d009      	beq.n	8007fa0 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f000 81cf 	beq.w	8008334 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	4798      	blx	r3
      }
      return;
 8007f9e:	e1c9      	b.n	8008334 <HAL_UART_IRQHandler+0x3ec>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f000 80e8 	beq.w	8008178 <HAL_UART_IRQHandler+0x230>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	f003 0301 	and.w	r3, r3, #1
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d105      	bne.n	8007fbe <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	4b6e      	ldr	r3, [pc, #440]	; (8008170 <HAL_UART_IRQHandler+0x228>)
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 80dd 	beq.w	8008178 <HAL_UART_IRQHandler+0x230>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	f003 0301 	and.w	r3, r3, #1
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d010      	beq.n	8007fea <HAL_UART_IRQHandler+0xa2>
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00b      	beq.n	8007fea <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fe0:	f043 0201 	orr.w	r2, r3, #1
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	f003 0302 	and.w	r3, r3, #2
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d010      	beq.n	8008016 <HAL_UART_IRQHandler+0xce>
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00b      	beq.n	8008016 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2202      	movs	r2, #2
 8008004:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800800c:	f043 0204 	orr.w	r2, r3, #4
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	f003 0304 	and.w	r3, r3, #4
 800801c:	2b00      	cmp	r3, #0
 800801e:	d010      	beq.n	8008042 <HAL_UART_IRQHandler+0xfa>
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00b      	beq.n	8008042 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2204      	movs	r2, #4
 8008030:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008038:	f043 0202 	orr.w	r2, r3, #2
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	f003 0308 	and.w	r3, r3, #8
 8008048:	2b00      	cmp	r3, #0
 800804a:	d015      	beq.n	8008078 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	f003 0320 	and.w	r3, r3, #32
 8008052:	2b00      	cmp	r3, #0
 8008054:	d104      	bne.n	8008060 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00b      	beq.n	8008078 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2208      	movs	r2, #8
 8008066:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800806e:	f043 0208 	orr.w	r2, r3, #8
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800807e:	2b00      	cmp	r3, #0
 8008080:	d011      	beq.n	80080a6 <HAL_UART_IRQHandler+0x15e>
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00c      	beq.n	80080a6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008094:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800809c:	f043 0220 	orr.w	r2, r3, #32
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f000 8143 	beq.w	8008338 <HAL_UART_IRQHandler+0x3f0>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	f003 0320 	and.w	r3, r3, #32
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00c      	beq.n	80080d6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	f003 0320 	and.w	r3, r3, #32
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d007      	beq.n	80080d6 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080dc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e8:	2b40      	cmp	r3, #64	; 0x40
 80080ea:	d004      	beq.n	80080f6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d031      	beq.n	800815a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fdf2 	bl	8008ce0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008106:	2b40      	cmp	r3, #64	; 0x40
 8008108:	d123      	bne.n	8008152 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	689a      	ldr	r2, [r3, #8]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008118:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800811e:	2b00      	cmp	r3, #0
 8008120:	d013      	beq.n	800814a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008126:	4a13      	ldr	r2, [pc, #76]	; (8008174 <HAL_UART_IRQHandler+0x22c>)
 8008128:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800812e:	4618      	mov	r0, r3
 8008130:	f7fa fe12 	bl	8002d58 <HAL_DMA_Abort_IT>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d017      	beq.n	800816a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800813e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008144:	4610      	mov	r0, r2
 8008146:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008148:	e00f      	b.n	800816a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f908 	bl	8008360 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008150:	e00b      	b.n	800816a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f904 	bl	8008360 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008158:	e007      	b.n	800816a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f900 	bl	8008360 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008168:	e0e6      	b.n	8008338 <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800816a:	bf00      	nop
    return;
 800816c:	e0e4      	b.n	8008338 <HAL_UART_IRQHandler+0x3f0>
 800816e:	bf00      	nop
 8008170:	04000120 	.word	0x04000120
 8008174:	08008d3f 	.word	0x08008d3f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800817c:	2b01      	cmp	r3, #1
 800817e:	f040 80a5 	bne.w	80082cc <HAL_UART_IRQHandler+0x384>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	f003 0310 	and.w	r3, r3, #16
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 809f 	beq.w	80082cc <HAL_UART_IRQHandler+0x384>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	f003 0310 	and.w	r3, r3, #16
 8008194:	2b00      	cmp	r3, #0
 8008196:	f000 8099 	beq.w	80082cc <HAL_UART_IRQHandler+0x384>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2210      	movs	r2, #16
 80081a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ac:	2b40      	cmp	r3, #64	; 0x40
 80081ae:	d154      	bne.n	800825a <HAL_UART_IRQHandler+0x312>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80081ba:	893b      	ldrh	r3, [r7, #8]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 80bd 	beq.w	800833c <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80081c8:	893a      	ldrh	r2, [r7, #8]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	f080 80b6 	bcs.w	800833c <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	893a      	ldrh	r2, [r7, #8]
 80081d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0320 	and.w	r3, r3, #32
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d12a      	bne.n	800823e <HAL_UART_IRQHandler+0x2f6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081f6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	689a      	ldr	r2, [r3, #8]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f022 0201 	bic.w	r2, r2, #1
 8008206:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	689a      	ldr	r2, [r3, #8]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008216:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2220      	movs	r2, #32
 800821c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f022 0210 	bic.w	r2, r2, #16
 8008232:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008238:	4618      	mov	r0, r3
 800823a:	f7fa fd4f 	bl	8002cdc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800824a:	b29b      	uxth	r3, r3
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	b29b      	uxth	r3, r3
 8008250:	4619      	mov	r1, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f88e 	bl	8008374 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008258:	e070      	b.n	800833c <HAL_UART_IRQHandler+0x3f4>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008266:	b29b      	uxth	r3, r3
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008272:	b29b      	uxth	r3, r3
 8008274:	2b00      	cmp	r3, #0
 8008276:	d063      	beq.n	8008340 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 8008278:	897b      	ldrh	r3, [r7, #10]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d060      	beq.n	8008340 <HAL_UART_IRQHandler+0x3f8>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800828c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	689a      	ldr	r2, [r3, #8]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 0201 	bic.w	r2, r2, #1
 800829c:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2220      	movs	r2, #32
 80082a2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f022 0210 	bic.w	r2, r2, #16
 80082be:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082c0:	897b      	ldrh	r3, [r7, #10]
 80082c2:	4619      	mov	r1, r3
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f855 	bl	8008374 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80082ca:	e039      	b.n	8008340 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00d      	beq.n	80082f2 <HAL_UART_IRQHandler+0x3aa>
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d008      	beq.n	80082f2 <HAL_UART_IRQHandler+0x3aa>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80082e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fe2e 	bl	8008f4c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80082f0:	e029      	b.n	8008346 <HAL_UART_IRQHandler+0x3fe>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00d      	beq.n	8008318 <HAL_UART_IRQHandler+0x3d0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008302:	2b00      	cmp	r3, #0
 8008304:	d008      	beq.n	8008318 <HAL_UART_IRQHandler+0x3d0>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800830a:	2b00      	cmp	r3, #0
 800830c:	d01a      	beq.n	8008344 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	4798      	blx	r3
    }
    return;
 8008316:	e015      	b.n	8008344 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800831e:	2b00      	cmp	r3, #0
 8008320:	d011      	beq.n	8008346 <HAL_UART_IRQHandler+0x3fe>
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00c      	beq.n	8008346 <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fd1c 	bl	8008d6a <UART_EndTransmit_IT>
    return;
 8008332:	e008      	b.n	8008346 <HAL_UART_IRQHandler+0x3fe>
      return;
 8008334:	bf00      	nop
 8008336:	e006      	b.n	8008346 <HAL_UART_IRQHandler+0x3fe>
    return;
 8008338:	bf00      	nop
 800833a:	e004      	b.n	8008346 <HAL_UART_IRQHandler+0x3fe>
      return;
 800833c:	bf00      	nop
 800833e:	e002      	b.n	8008346 <HAL_UART_IRQHandler+0x3fe>
      return;
 8008340:	bf00      	nop
 8008342:	e000      	b.n	8008346 <HAL_UART_IRQHandler+0x3fe>
    return;
 8008344:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008346:	3720      	adds	r7, #32
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	460b      	mov	r3, r1
 800837e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800838c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008390:	b08a      	sub	sp, #40	; 0x28
 8008392:	af00      	add	r7, sp, #0
 8008394:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008396:	2300      	movs	r3, #0
 8008398:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	689a      	ldr	r2, [r3, #8]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	431a      	orrs	r2, r3
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	431a      	orrs	r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	4ba4      	ldr	r3, [pc, #656]	; (800864c <UART_SetConfig+0x2c0>)
 80083bc:	4013      	ands	r3, r2
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	6812      	ldr	r2, [r2, #0]
 80083c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083c4:	430b      	orrs	r3, r1
 80083c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	68da      	ldr	r2, [r3, #12]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	430a      	orrs	r2, r1
 80083dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	699b      	ldr	r3, [r3, #24]
 80083e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a99      	ldr	r2, [pc, #612]	; (8008650 <UART_SetConfig+0x2c4>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d004      	beq.n	80083f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6a1b      	ldr	r3, [r3, #32]
 80083f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f4:	4313      	orrs	r3, r2
 80083f6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008408:	430a      	orrs	r2, r1
 800840a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a90      	ldr	r2, [pc, #576]	; (8008654 <UART_SetConfig+0x2c8>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d126      	bne.n	8008464 <UART_SetConfig+0xd8>
 8008416:	4b90      	ldr	r3, [pc, #576]	; (8008658 <UART_SetConfig+0x2cc>)
 8008418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800841c:	f003 0303 	and.w	r3, r3, #3
 8008420:	2b03      	cmp	r3, #3
 8008422:	d81b      	bhi.n	800845c <UART_SetConfig+0xd0>
 8008424:	a201      	add	r2, pc, #4	; (adr r2, 800842c <UART_SetConfig+0xa0>)
 8008426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842a:	bf00      	nop
 800842c:	0800843d 	.word	0x0800843d
 8008430:	0800844d 	.word	0x0800844d
 8008434:	08008445 	.word	0x08008445
 8008438:	08008455 	.word	0x08008455
 800843c:	2301      	movs	r3, #1
 800843e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008442:	e116      	b.n	8008672 <UART_SetConfig+0x2e6>
 8008444:	2302      	movs	r3, #2
 8008446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800844a:	e112      	b.n	8008672 <UART_SetConfig+0x2e6>
 800844c:	2304      	movs	r3, #4
 800844e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008452:	e10e      	b.n	8008672 <UART_SetConfig+0x2e6>
 8008454:	2308      	movs	r3, #8
 8008456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800845a:	e10a      	b.n	8008672 <UART_SetConfig+0x2e6>
 800845c:	2310      	movs	r3, #16
 800845e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008462:	e106      	b.n	8008672 <UART_SetConfig+0x2e6>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a7c      	ldr	r2, [pc, #496]	; (800865c <UART_SetConfig+0x2d0>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d138      	bne.n	80084e0 <UART_SetConfig+0x154>
 800846e:	4b7a      	ldr	r3, [pc, #488]	; (8008658 <UART_SetConfig+0x2cc>)
 8008470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008474:	f003 030c 	and.w	r3, r3, #12
 8008478:	2b0c      	cmp	r3, #12
 800847a:	d82d      	bhi.n	80084d8 <UART_SetConfig+0x14c>
 800847c:	a201      	add	r2, pc, #4	; (adr r2, 8008484 <UART_SetConfig+0xf8>)
 800847e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008482:	bf00      	nop
 8008484:	080084b9 	.word	0x080084b9
 8008488:	080084d9 	.word	0x080084d9
 800848c:	080084d9 	.word	0x080084d9
 8008490:	080084d9 	.word	0x080084d9
 8008494:	080084c9 	.word	0x080084c9
 8008498:	080084d9 	.word	0x080084d9
 800849c:	080084d9 	.word	0x080084d9
 80084a0:	080084d9 	.word	0x080084d9
 80084a4:	080084c1 	.word	0x080084c1
 80084a8:	080084d9 	.word	0x080084d9
 80084ac:	080084d9 	.word	0x080084d9
 80084b0:	080084d9 	.word	0x080084d9
 80084b4:	080084d1 	.word	0x080084d1
 80084b8:	2300      	movs	r3, #0
 80084ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084be:	e0d8      	b.n	8008672 <UART_SetConfig+0x2e6>
 80084c0:	2302      	movs	r3, #2
 80084c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084c6:	e0d4      	b.n	8008672 <UART_SetConfig+0x2e6>
 80084c8:	2304      	movs	r3, #4
 80084ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084ce:	e0d0      	b.n	8008672 <UART_SetConfig+0x2e6>
 80084d0:	2308      	movs	r3, #8
 80084d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084d6:	e0cc      	b.n	8008672 <UART_SetConfig+0x2e6>
 80084d8:	2310      	movs	r3, #16
 80084da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084de:	e0c8      	b.n	8008672 <UART_SetConfig+0x2e6>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a5e      	ldr	r2, [pc, #376]	; (8008660 <UART_SetConfig+0x2d4>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d125      	bne.n	8008536 <UART_SetConfig+0x1aa>
 80084ea:	4b5b      	ldr	r3, [pc, #364]	; (8008658 <UART_SetConfig+0x2cc>)
 80084ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80084f4:	2b30      	cmp	r3, #48	; 0x30
 80084f6:	d016      	beq.n	8008526 <UART_SetConfig+0x19a>
 80084f8:	2b30      	cmp	r3, #48	; 0x30
 80084fa:	d818      	bhi.n	800852e <UART_SetConfig+0x1a2>
 80084fc:	2b20      	cmp	r3, #32
 80084fe:	d00a      	beq.n	8008516 <UART_SetConfig+0x18a>
 8008500:	2b20      	cmp	r3, #32
 8008502:	d814      	bhi.n	800852e <UART_SetConfig+0x1a2>
 8008504:	2b00      	cmp	r3, #0
 8008506:	d002      	beq.n	800850e <UART_SetConfig+0x182>
 8008508:	2b10      	cmp	r3, #16
 800850a:	d008      	beq.n	800851e <UART_SetConfig+0x192>
 800850c:	e00f      	b.n	800852e <UART_SetConfig+0x1a2>
 800850e:	2300      	movs	r3, #0
 8008510:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008514:	e0ad      	b.n	8008672 <UART_SetConfig+0x2e6>
 8008516:	2302      	movs	r3, #2
 8008518:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800851c:	e0a9      	b.n	8008672 <UART_SetConfig+0x2e6>
 800851e:	2304      	movs	r3, #4
 8008520:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008524:	e0a5      	b.n	8008672 <UART_SetConfig+0x2e6>
 8008526:	2308      	movs	r3, #8
 8008528:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800852c:	e0a1      	b.n	8008672 <UART_SetConfig+0x2e6>
 800852e:	2310      	movs	r3, #16
 8008530:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008534:	e09d      	b.n	8008672 <UART_SetConfig+0x2e6>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a4a      	ldr	r2, [pc, #296]	; (8008664 <UART_SetConfig+0x2d8>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d125      	bne.n	800858c <UART_SetConfig+0x200>
 8008540:	4b45      	ldr	r3, [pc, #276]	; (8008658 <UART_SetConfig+0x2cc>)
 8008542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008546:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800854a:	2bc0      	cmp	r3, #192	; 0xc0
 800854c:	d016      	beq.n	800857c <UART_SetConfig+0x1f0>
 800854e:	2bc0      	cmp	r3, #192	; 0xc0
 8008550:	d818      	bhi.n	8008584 <UART_SetConfig+0x1f8>
 8008552:	2b80      	cmp	r3, #128	; 0x80
 8008554:	d00a      	beq.n	800856c <UART_SetConfig+0x1e0>
 8008556:	2b80      	cmp	r3, #128	; 0x80
 8008558:	d814      	bhi.n	8008584 <UART_SetConfig+0x1f8>
 800855a:	2b00      	cmp	r3, #0
 800855c:	d002      	beq.n	8008564 <UART_SetConfig+0x1d8>
 800855e:	2b40      	cmp	r3, #64	; 0x40
 8008560:	d008      	beq.n	8008574 <UART_SetConfig+0x1e8>
 8008562:	e00f      	b.n	8008584 <UART_SetConfig+0x1f8>
 8008564:	2300      	movs	r3, #0
 8008566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800856a:	e082      	b.n	8008672 <UART_SetConfig+0x2e6>
 800856c:	2302      	movs	r3, #2
 800856e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008572:	e07e      	b.n	8008672 <UART_SetConfig+0x2e6>
 8008574:	2304      	movs	r3, #4
 8008576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800857a:	e07a      	b.n	8008672 <UART_SetConfig+0x2e6>
 800857c:	2308      	movs	r3, #8
 800857e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008582:	e076      	b.n	8008672 <UART_SetConfig+0x2e6>
 8008584:	2310      	movs	r3, #16
 8008586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800858a:	e072      	b.n	8008672 <UART_SetConfig+0x2e6>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a35      	ldr	r2, [pc, #212]	; (8008668 <UART_SetConfig+0x2dc>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d12a      	bne.n	80085ec <UART_SetConfig+0x260>
 8008596:	4b30      	ldr	r3, [pc, #192]	; (8008658 <UART_SetConfig+0x2cc>)
 8008598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800859c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085a4:	d01a      	beq.n	80085dc <UART_SetConfig+0x250>
 80085a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085aa:	d81b      	bhi.n	80085e4 <UART_SetConfig+0x258>
 80085ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085b0:	d00c      	beq.n	80085cc <UART_SetConfig+0x240>
 80085b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085b6:	d815      	bhi.n	80085e4 <UART_SetConfig+0x258>
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d003      	beq.n	80085c4 <UART_SetConfig+0x238>
 80085bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c0:	d008      	beq.n	80085d4 <UART_SetConfig+0x248>
 80085c2:	e00f      	b.n	80085e4 <UART_SetConfig+0x258>
 80085c4:	2300      	movs	r3, #0
 80085c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085ca:	e052      	b.n	8008672 <UART_SetConfig+0x2e6>
 80085cc:	2302      	movs	r3, #2
 80085ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085d2:	e04e      	b.n	8008672 <UART_SetConfig+0x2e6>
 80085d4:	2304      	movs	r3, #4
 80085d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085da:	e04a      	b.n	8008672 <UART_SetConfig+0x2e6>
 80085dc:	2308      	movs	r3, #8
 80085de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085e2:	e046      	b.n	8008672 <UART_SetConfig+0x2e6>
 80085e4:	2310      	movs	r3, #16
 80085e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085ea:	e042      	b.n	8008672 <UART_SetConfig+0x2e6>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a17      	ldr	r2, [pc, #92]	; (8008650 <UART_SetConfig+0x2c4>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d13a      	bne.n	800866c <UART_SetConfig+0x2e0>
 80085f6:	4b18      	ldr	r3, [pc, #96]	; (8008658 <UART_SetConfig+0x2cc>)
 80085f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008600:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008604:	d01a      	beq.n	800863c <UART_SetConfig+0x2b0>
 8008606:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800860a:	d81b      	bhi.n	8008644 <UART_SetConfig+0x2b8>
 800860c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008610:	d00c      	beq.n	800862c <UART_SetConfig+0x2a0>
 8008612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008616:	d815      	bhi.n	8008644 <UART_SetConfig+0x2b8>
 8008618:	2b00      	cmp	r3, #0
 800861a:	d003      	beq.n	8008624 <UART_SetConfig+0x298>
 800861c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008620:	d008      	beq.n	8008634 <UART_SetConfig+0x2a8>
 8008622:	e00f      	b.n	8008644 <UART_SetConfig+0x2b8>
 8008624:	2300      	movs	r3, #0
 8008626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800862a:	e022      	b.n	8008672 <UART_SetConfig+0x2e6>
 800862c:	2302      	movs	r3, #2
 800862e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008632:	e01e      	b.n	8008672 <UART_SetConfig+0x2e6>
 8008634:	2304      	movs	r3, #4
 8008636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800863a:	e01a      	b.n	8008672 <UART_SetConfig+0x2e6>
 800863c:	2308      	movs	r3, #8
 800863e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008642:	e016      	b.n	8008672 <UART_SetConfig+0x2e6>
 8008644:	2310      	movs	r3, #16
 8008646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800864a:	e012      	b.n	8008672 <UART_SetConfig+0x2e6>
 800864c:	efff69f3 	.word	0xefff69f3
 8008650:	40008000 	.word	0x40008000
 8008654:	40013800 	.word	0x40013800
 8008658:	40021000 	.word	0x40021000
 800865c:	40004400 	.word	0x40004400
 8008660:	40004800 	.word	0x40004800
 8008664:	40004c00 	.word	0x40004c00
 8008668:	40005000 	.word	0x40005000
 800866c:	2310      	movs	r3, #16
 800866e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4aa0      	ldr	r2, [pc, #640]	; (80088f8 <UART_SetConfig+0x56c>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d17a      	bne.n	8008772 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800867c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008680:	2b08      	cmp	r3, #8
 8008682:	d824      	bhi.n	80086ce <UART_SetConfig+0x342>
 8008684:	a201      	add	r2, pc, #4	; (adr r2, 800868c <UART_SetConfig+0x300>)
 8008686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868a:	bf00      	nop
 800868c:	080086b1 	.word	0x080086b1
 8008690:	080086cf 	.word	0x080086cf
 8008694:	080086b9 	.word	0x080086b9
 8008698:	080086cf 	.word	0x080086cf
 800869c:	080086bf 	.word	0x080086bf
 80086a0:	080086cf 	.word	0x080086cf
 80086a4:	080086cf 	.word	0x080086cf
 80086a8:	080086cf 	.word	0x080086cf
 80086ac:	080086c7 	.word	0x080086c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086b0:	f7fc fc04 	bl	8004ebc <HAL_RCC_GetPCLK1Freq>
 80086b4:	61f8      	str	r0, [r7, #28]
        break;
 80086b6:	e010      	b.n	80086da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086b8:	4b90      	ldr	r3, [pc, #576]	; (80088fc <UART_SetConfig+0x570>)
 80086ba:	61fb      	str	r3, [r7, #28]
        break;
 80086bc:	e00d      	b.n	80086da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086be:	f7fc fb65 	bl	8004d8c <HAL_RCC_GetSysClockFreq>
 80086c2:	61f8      	str	r0, [r7, #28]
        break;
 80086c4:	e009      	b.n	80086da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086ca:	61fb      	str	r3, [r7, #28]
        break;
 80086cc:	e005      	b.n	80086da <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80086ce:	2300      	movs	r3, #0
 80086d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80086d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f000 80fd 	beq.w	80088dc <UART_SetConfig+0x550>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	4613      	mov	r3, r2
 80086e8:	005b      	lsls	r3, r3, #1
 80086ea:	4413      	add	r3, r2
 80086ec:	69fa      	ldr	r2, [r7, #28]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d305      	bcc.n	80086fe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80086f8:	69fa      	ldr	r2, [r7, #28]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d903      	bls.n	8008706 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008704:	e0ea      	b.n	80088dc <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	2200      	movs	r2, #0
 800870a:	461c      	mov	r4, r3
 800870c:	4615      	mov	r5, r2
 800870e:	f04f 0200 	mov.w	r2, #0
 8008712:	f04f 0300 	mov.w	r3, #0
 8008716:	022b      	lsls	r3, r5, #8
 8008718:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800871c:	0222      	lsls	r2, r4, #8
 800871e:	68f9      	ldr	r1, [r7, #12]
 8008720:	6849      	ldr	r1, [r1, #4]
 8008722:	0849      	lsrs	r1, r1, #1
 8008724:	2000      	movs	r0, #0
 8008726:	4688      	mov	r8, r1
 8008728:	4681      	mov	r9, r0
 800872a:	eb12 0a08 	adds.w	sl, r2, r8
 800872e:	eb43 0b09 	adc.w	fp, r3, r9
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	603b      	str	r3, [r7, #0]
 800873a:	607a      	str	r2, [r7, #4]
 800873c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008740:	4650      	mov	r0, sl
 8008742:	4659      	mov	r1, fp
 8008744:	f7f7 fd9c 	bl	8000280 <__aeabi_uldivmod>
 8008748:	4602      	mov	r2, r0
 800874a:	460b      	mov	r3, r1
 800874c:	4613      	mov	r3, r2
 800874e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008756:	d308      	bcc.n	800876a <UART_SetConfig+0x3de>
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800875e:	d204      	bcs.n	800876a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	69ba      	ldr	r2, [r7, #24]
 8008766:	60da      	str	r2, [r3, #12]
 8008768:	e0b8      	b.n	80088dc <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008770:	e0b4      	b.n	80088dc <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	69db      	ldr	r3, [r3, #28]
 8008776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800877a:	d15f      	bne.n	800883c <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 800877c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008780:	2b08      	cmp	r3, #8
 8008782:	d828      	bhi.n	80087d6 <UART_SetConfig+0x44a>
 8008784:	a201      	add	r2, pc, #4	; (adr r2, 800878c <UART_SetConfig+0x400>)
 8008786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878a:	bf00      	nop
 800878c:	080087b1 	.word	0x080087b1
 8008790:	080087b9 	.word	0x080087b9
 8008794:	080087c1 	.word	0x080087c1
 8008798:	080087d7 	.word	0x080087d7
 800879c:	080087c7 	.word	0x080087c7
 80087a0:	080087d7 	.word	0x080087d7
 80087a4:	080087d7 	.word	0x080087d7
 80087a8:	080087d7 	.word	0x080087d7
 80087ac:	080087cf 	.word	0x080087cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087b0:	f7fc fb84 	bl	8004ebc <HAL_RCC_GetPCLK1Freq>
 80087b4:	61f8      	str	r0, [r7, #28]
        break;
 80087b6:	e014      	b.n	80087e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087b8:	f7fc fb96 	bl	8004ee8 <HAL_RCC_GetPCLK2Freq>
 80087bc:	61f8      	str	r0, [r7, #28]
        break;
 80087be:	e010      	b.n	80087e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087c0:	4b4e      	ldr	r3, [pc, #312]	; (80088fc <UART_SetConfig+0x570>)
 80087c2:	61fb      	str	r3, [r7, #28]
        break;
 80087c4:	e00d      	b.n	80087e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087c6:	f7fc fae1 	bl	8004d8c <HAL_RCC_GetSysClockFreq>
 80087ca:	61f8      	str	r0, [r7, #28]
        break;
 80087cc:	e009      	b.n	80087e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087d2:	61fb      	str	r3, [r7, #28]
        break;
 80087d4:	e005      	b.n	80087e2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80087d6:	2300      	movs	r3, #0
 80087d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80087e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d079      	beq.n	80088dc <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	005a      	lsls	r2, r3, #1
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	085b      	lsrs	r3, r3, #1
 80087f2:	441a      	add	r2, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	2b0f      	cmp	r3, #15
 8008804:	d916      	bls.n	8008834 <UART_SetConfig+0x4a8>
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800880c:	d212      	bcs.n	8008834 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	b29b      	uxth	r3, r3
 8008812:	f023 030f 	bic.w	r3, r3, #15
 8008816:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	085b      	lsrs	r3, r3, #1
 800881c:	b29b      	uxth	r3, r3
 800881e:	f003 0307 	and.w	r3, r3, #7
 8008822:	b29a      	uxth	r2, r3
 8008824:	8afb      	ldrh	r3, [r7, #22]
 8008826:	4313      	orrs	r3, r2
 8008828:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	8afa      	ldrh	r2, [r7, #22]
 8008830:	60da      	str	r2, [r3, #12]
 8008832:	e053      	b.n	80088dc <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800883a:	e04f      	b.n	80088dc <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 800883c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008840:	2b08      	cmp	r3, #8
 8008842:	d828      	bhi.n	8008896 <UART_SetConfig+0x50a>
 8008844:	a201      	add	r2, pc, #4	; (adr r2, 800884c <UART_SetConfig+0x4c0>)
 8008846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800884a:	bf00      	nop
 800884c:	08008871 	.word	0x08008871
 8008850:	08008879 	.word	0x08008879
 8008854:	08008881 	.word	0x08008881
 8008858:	08008897 	.word	0x08008897
 800885c:	08008887 	.word	0x08008887
 8008860:	08008897 	.word	0x08008897
 8008864:	08008897 	.word	0x08008897
 8008868:	08008897 	.word	0x08008897
 800886c:	0800888f 	.word	0x0800888f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008870:	f7fc fb24 	bl	8004ebc <HAL_RCC_GetPCLK1Freq>
 8008874:	61f8      	str	r0, [r7, #28]
        break;
 8008876:	e014      	b.n	80088a2 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008878:	f7fc fb36 	bl	8004ee8 <HAL_RCC_GetPCLK2Freq>
 800887c:	61f8      	str	r0, [r7, #28]
        break;
 800887e:	e010      	b.n	80088a2 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008880:	4b1e      	ldr	r3, [pc, #120]	; (80088fc <UART_SetConfig+0x570>)
 8008882:	61fb      	str	r3, [r7, #28]
        break;
 8008884:	e00d      	b.n	80088a2 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008886:	f7fc fa81 	bl	8004d8c <HAL_RCC_GetSysClockFreq>
 800888a:	61f8      	str	r0, [r7, #28]
        break;
 800888c:	e009      	b.n	80088a2 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800888e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008892:	61fb      	str	r3, [r7, #28]
        break;
 8008894:	e005      	b.n	80088a2 <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 8008896:	2300      	movs	r3, #0
 8008898:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80088a0:	bf00      	nop
    }

    if (pclk != 0U)
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d019      	beq.n	80088dc <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	085a      	lsrs	r2, r3, #1
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	441a      	add	r2, r3
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	2b0f      	cmp	r3, #15
 80088c2:	d908      	bls.n	80088d6 <UART_SetConfig+0x54a>
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088ca:	d204      	bcs.n	80088d6 <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	69ba      	ldr	r2, [r7, #24]
 80088d2:	60da      	str	r2, [r3, #12]
 80088d4:	e002      	b.n	80088dc <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80088e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3728      	adds	r7, #40	; 0x28
 80088f0:	46bd      	mov	sp, r7
 80088f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088f6:	bf00      	nop
 80088f8:	40008000 	.word	0x40008000
 80088fc:	00f42400 	.word	0x00f42400

08008900 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890c:	f003 0301 	and.w	r3, r3, #1
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00a      	beq.n	800892a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	430a      	orrs	r2, r1
 8008928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892e:	f003 0302 	and.w	r3, r3, #2
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00a      	beq.n	800894c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	430a      	orrs	r2, r1
 800894a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008950:	f003 0304 	and.w	r3, r3, #4
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00a      	beq.n	800896e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	430a      	orrs	r2, r1
 800896c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008972:	f003 0308 	and.w	r3, r3, #8
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00a      	beq.n	8008990 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	430a      	orrs	r2, r1
 800898e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008994:	f003 0310 	and.w	r3, r3, #16
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00a      	beq.n	80089b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	430a      	orrs	r2, r1
 80089b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b6:	f003 0320 	and.w	r3, r3, #32
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00a      	beq.n	80089d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	430a      	orrs	r2, r1
 80089d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d01a      	beq.n	8008a16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	430a      	orrs	r2, r1
 80089f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089fe:	d10a      	bne.n	8008a16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	430a      	orrs	r2, r1
 8008a14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00a      	beq.n	8008a38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	430a      	orrs	r2, r1
 8008a36:	605a      	str	r2, [r3, #4]
  }
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af02      	add	r7, sp, #8
 8008a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a54:	f7f9 fef2 	bl	800283c <HAL_GetTick>
 8008a58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 0308 	and.w	r3, r3, #8
 8008a64:	2b08      	cmp	r3, #8
 8008a66:	d10e      	bne.n	8008a86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f82d 	bl	8008ad6 <UART_WaitOnFlagUntilTimeout>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d001      	beq.n	8008a86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e023      	b.n	8008ace <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 0304 	and.w	r3, r3, #4
 8008a90:	2b04      	cmp	r3, #4
 8008a92:	d10e      	bne.n	8008ab2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a98:	9300      	str	r3, [sp, #0]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f817 	bl	8008ad6 <UART_WaitOnFlagUntilTimeout>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d001      	beq.n	8008ab2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e00d      	b.n	8008ace <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2220      	movs	r2, #32
 8008ab6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2220      	movs	r2, #32
 8008abc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b084      	sub	sp, #16
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	60f8      	str	r0, [r7, #12]
 8008ade:	60b9      	str	r1, [r7, #8]
 8008ae0:	603b      	str	r3, [r7, #0]
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ae6:	e05e      	b.n	8008ba6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aee:	d05a      	beq.n	8008ba6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008af0:	f7f9 fea4 	bl	800283c <HAL_GetTick>
 8008af4:	4602      	mov	r2, r0
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	69ba      	ldr	r2, [r7, #24]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d302      	bcc.n	8008b06 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d11b      	bne.n	8008b3e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b14:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	689a      	ldr	r2, [r3, #8]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f022 0201 	bic.w	r2, r2, #1
 8008b24:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2220      	movs	r2, #32
 8008b2a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2220      	movs	r2, #32
 8008b30:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	e043      	b.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 0304 	and.w	r3, r3, #4
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d02c      	beq.n	8008ba6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	69db      	ldr	r3, [r3, #28]
 8008b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b5a:	d124      	bne.n	8008ba6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b64:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b74:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	689a      	ldr	r2, [r3, #8]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f022 0201 	bic.w	r2, r2, #1
 8008b84:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2220      	movs	r2, #32
 8008b8a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2220      	movs	r2, #32
 8008b90:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2220      	movs	r2, #32
 8008b96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	e00f      	b.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	69da      	ldr	r2, [r3, #28]
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	4013      	ands	r3, r2
 8008bb0:	68ba      	ldr	r2, [r7, #8]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	bf0c      	ite	eq
 8008bb6:	2301      	moveq	r3, #1
 8008bb8:	2300      	movne	r3, #0
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	79fb      	ldrb	r3, [r7, #7]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d091      	beq.n	8008ae8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
	...

08008bd0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	4613      	mov	r3, r2
 8008bdc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	68ba      	ldr	r2, [r7, #8]
 8008be2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	88fa      	ldrh	r2, [r7, #6]
 8008be8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	88fa      	ldrh	r2, [r7, #6]
 8008bf0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c02:	d10e      	bne.n	8008c22 <UART_Start_Receive_IT+0x52>
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d105      	bne.n	8008c18 <UART_Start_Receive_IT+0x48>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008c12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c16:	e02d      	b.n	8008c74 <UART_Start_Receive_IT+0xa4>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	22ff      	movs	r2, #255	; 0xff
 8008c1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c20:	e028      	b.n	8008c74 <UART_Start_Receive_IT+0xa4>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d10d      	bne.n	8008c46 <UART_Start_Receive_IT+0x76>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d104      	bne.n	8008c3c <UART_Start_Receive_IT+0x6c>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	22ff      	movs	r2, #255	; 0xff
 8008c36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c3a:	e01b      	b.n	8008c74 <UART_Start_Receive_IT+0xa4>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	227f      	movs	r2, #127	; 0x7f
 8008c40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c44:	e016      	b.n	8008c74 <UART_Start_Receive_IT+0xa4>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c4e:	d10d      	bne.n	8008c6c <UART_Start_Receive_IT+0x9c>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	691b      	ldr	r3, [r3, #16]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d104      	bne.n	8008c62 <UART_Start_Receive_IT+0x92>
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	227f      	movs	r2, #127	; 0x7f
 8008c5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c60:	e008      	b.n	8008c74 <UART_Start_Receive_IT+0xa4>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	223f      	movs	r2, #63	; 0x3f
 8008c66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c6a:	e003      	b.n	8008c74 <UART_Start_Receive_IT+0xa4>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2222      	movs	r2, #34	; 0x22
 8008c80:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	689a      	ldr	r2, [r3, #8]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f042 0201 	orr.w	r2, r2, #1
 8008c90:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c9a:	d107      	bne.n	8008cac <UART_Start_Receive_IT+0xdc>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	691b      	ldr	r3, [r3, #16]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d103      	bne.n	8008cac <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	4a0c      	ldr	r2, [pc, #48]	; (8008cd8 <UART_Start_Receive_IT+0x108>)
 8008ca8:	665a      	str	r2, [r3, #100]	; 0x64
 8008caa:	e002      	b.n	8008cb2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	4a0b      	ldr	r2, [pc, #44]	; (8008cdc <UART_Start_Receive_IT+0x10c>)
 8008cb0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008cc8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3714      	adds	r7, #20
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr
 8008cd8:	08008e75 	.word	0x08008e75
 8008cdc:	08008d9d 	.word	0x08008d9d

08008ce0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008cf6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	689a      	ldr	r2, [r3, #8]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f022 0201 	bic.w	r2, r2, #1
 8008d06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d107      	bne.n	8008d20 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f022 0210 	bic.w	r2, r2, #16
 8008d1e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2220      	movs	r2, #32
 8008d24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008d32:	bf00      	nop
 8008d34:	370c      	adds	r7, #12
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b084      	sub	sp, #16
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f7ff faff 	bl	8008360 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d62:	bf00      	nop
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b082      	sub	sp, #8
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d80:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2220      	movs	r2, #32
 8008d86:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7ff fadc 	bl	800834c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d94:	bf00      	nop
 8008d96:	3708      	adds	r7, #8
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008daa:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008db0:	2b22      	cmp	r3, #34	; 0x22
 8008db2:	d151      	bne.n	8008e58 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008dba:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008dbc:	89bb      	ldrh	r3, [r7, #12]
 8008dbe:	b2d9      	uxtb	r1, r3
 8008dc0:	89fb      	ldrh	r3, [r7, #14]
 8008dc2:	b2da      	uxtb	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dc8:	400a      	ands	r2, r1
 8008dca:	b2d2      	uxtb	r2, r2
 8008dcc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dd2:	1c5a      	adds	r2, r3, #1
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	3b01      	subs	r3, #1
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d13a      	bne.n	8008e6c <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008e04:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	689a      	ldr	r2, [r3, #8]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f022 0201 	bic.w	r2, r2, #1
 8008e14:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2220      	movs	r2, #32
 8008e1a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d10f      	bne.n	8008e4a <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f022 0210 	bic.w	r2, r2, #16
 8008e38:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f7ff fa96 	bl	8008374 <HAL_UARTEx_RxEventCallback>
 8008e48:	e002      	b.n	8008e50 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f7f8 f906 	bl	800105c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e56:	e009      	b.n	8008e6c <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	8b1b      	ldrh	r3, [r3, #24]
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f042 0208 	orr.w	r2, r2, #8
 8008e68:	b292      	uxth	r2, r2
 8008e6a:	831a      	strh	r2, [r3, #24]
}
 8008e6c:	bf00      	nop
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e82:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e88:	2b22      	cmp	r3, #34	; 0x22
 8008e8a:	d151      	bne.n	8008f30 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008e92:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e98:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008e9a:	89ba      	ldrh	r2, [r7, #12]
 8008e9c:	89fb      	ldrh	r3, [r7, #14]
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eaa:	1c9a      	adds	r2, r3, #2
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d13a      	bne.n	8008f44 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008edc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	689a      	ldr	r2, [r3, #8]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f022 0201 	bic.w	r2, r2, #1
 8008eec:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2220      	movs	r2, #32
 8008ef2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d10f      	bne.n	8008f22 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f022 0210 	bic.w	r2, r2, #16
 8008f10:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008f18:	4619      	mov	r1, r3
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7ff fa2a 	bl	8008374 <HAL_UARTEx_RxEventCallback>
 8008f20:	e002      	b.n	8008f28 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f7f8 f89a 	bl	800105c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f2e:	e009      	b.n	8008f44 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	8b1b      	ldrh	r3, [r3, #24]
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f042 0208 	orr.w	r2, r2, #8
 8008f40:	b292      	uxth	r2, r2
 8008f42:	831a      	strh	r2, [r3, #24]
}
 8008f44:	bf00      	nop
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008f54:	bf00      	nop
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f60:	b084      	sub	sp, #16
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b084      	sub	sp, #16
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	f107 001c 	add.w	r0, r7, #28
 8008f6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 fa24 	bl	80093cc <USB_CoreReset>
 8008f84:	4603      	mov	r3, r0
 8008f86:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d106      	bne.n	8008f9c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	639a      	str	r2, [r3, #56]	; 0x38
 8008f9a:	e005      	b.n	8008fa8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fb4:	b004      	add	sp, #16
 8008fb6:	4770      	bx	lr

08008fb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	f023 0201 	bic.w	r2, r3, #1
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	370c      	adds	r7, #12
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b082      	sub	sp, #8
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ff2:	78fb      	ldrb	r3, [r7, #3]
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d106      	bne.n	8009006 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	60da      	str	r2, [r3, #12]
 8009004:	e00b      	b.n	800901e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009006:	78fb      	ldrb	r3, [r7, #3]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d106      	bne.n	800901a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	60da      	str	r2, [r3, #12]
 8009018:	e001      	b.n	800901e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e003      	b.n	8009026 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800901e:	2032      	movs	r0, #50	; 0x32
 8009020:	f7f9 fc18 	bl	8002854 <HAL_Delay>

  return HAL_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
	...

08009030 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009030:	b084      	sub	sp, #16
 8009032:	b580      	push	{r7, lr}
 8009034:	b086      	sub	sp, #24
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
 800903a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800903e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009042:	2300      	movs	r3, #0
 8009044:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800904a:	2300      	movs	r3, #0
 800904c:	613b      	str	r3, [r7, #16]
 800904e:	e009      	b.n	8009064 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	3340      	adds	r3, #64	; 0x40
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	4413      	add	r3, r2
 800905a:	2200      	movs	r2, #0
 800905c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	3301      	adds	r3, #1
 8009062:	613b      	str	r3, [r7, #16]
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	2b0e      	cmp	r3, #14
 8009068:	d9f2      	bls.n	8009050 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800906a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800906c:	2b00      	cmp	r3, #0
 800906e:	d11c      	bne.n	80090aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800907e:	f043 0302 	orr.w	r3, r3, #2
 8009082:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009088:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	601a      	str	r2, [r3, #0]
 80090a8:	e005      	b.n	80090b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090bc:	461a      	mov	r2, r3
 80090be:	2300      	movs	r3, #0
 80090c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090c8:	4619      	mov	r1, r3
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090d0:	461a      	mov	r2, r3
 80090d2:	680b      	ldr	r3, [r1, #0]
 80090d4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80090d6:	2103      	movs	r1, #3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f93d 	bl	8009358 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80090de:	2110      	movs	r1, #16
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 f8f1 	bl	80092c8 <USB_FlushTxFifo>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d001      	beq.n	80090f0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f90f 	bl	8009314 <USB_FlushRxFifo>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d001      	beq.n	8009100 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009106:	461a      	mov	r2, r3
 8009108:	2300      	movs	r3, #0
 800910a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009112:	461a      	mov	r2, r3
 8009114:	2300      	movs	r3, #0
 8009116:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800911e:	461a      	mov	r2, r3
 8009120:	2300      	movs	r3, #0
 8009122:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009124:	2300      	movs	r3, #0
 8009126:	613b      	str	r3, [r7, #16]
 8009128:	e043      	b.n	80091b2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	015a      	lsls	r2, r3, #5
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	4413      	add	r3, r2
 8009132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800913c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009140:	d118      	bne.n	8009174 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d10a      	bne.n	800915e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	015a      	lsls	r2, r3, #5
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	4413      	add	r3, r2
 8009150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009154:	461a      	mov	r2, r3
 8009156:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800915a:	6013      	str	r3, [r2, #0]
 800915c:	e013      	b.n	8009186 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	015a      	lsls	r2, r3, #5
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	4413      	add	r3, r2
 8009166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800916a:	461a      	mov	r2, r3
 800916c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009170:	6013      	str	r3, [r2, #0]
 8009172:	e008      	b.n	8009186 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	015a      	lsls	r2, r3, #5
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	4413      	add	r3, r2
 800917c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009180:	461a      	mov	r2, r3
 8009182:	2300      	movs	r3, #0
 8009184:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	015a      	lsls	r2, r3, #5
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	4413      	add	r3, r2
 800918e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009192:	461a      	mov	r2, r3
 8009194:	2300      	movs	r3, #0
 8009196:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	015a      	lsls	r2, r3, #5
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	4413      	add	r3, r2
 80091a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a4:	461a      	mov	r2, r3
 80091a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80091aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	3301      	adds	r3, #1
 80091b0:	613b      	str	r3, [r7, #16]
 80091b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b4:	693a      	ldr	r2, [r7, #16]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d3b7      	bcc.n	800912a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091ba:	2300      	movs	r3, #0
 80091bc:	613b      	str	r3, [r7, #16]
 80091be:	e043      	b.n	8009248 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	015a      	lsls	r2, r3, #5
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	4413      	add	r3, r2
 80091c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091d6:	d118      	bne.n	800920a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10a      	bne.n	80091f4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	015a      	lsls	r2, r3, #5
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	4413      	add	r3, r2
 80091e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ea:	461a      	mov	r2, r3
 80091ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80091f0:	6013      	str	r3, [r2, #0]
 80091f2:	e013      	b.n	800921c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	015a      	lsls	r2, r3, #5
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	4413      	add	r3, r2
 80091fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009200:	461a      	mov	r2, r3
 8009202:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009206:	6013      	str	r3, [r2, #0]
 8009208:	e008      	b.n	800921c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	015a      	lsls	r2, r3, #5
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	4413      	add	r3, r2
 8009212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009216:	461a      	mov	r2, r3
 8009218:	2300      	movs	r3, #0
 800921a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	015a      	lsls	r2, r3, #5
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	4413      	add	r3, r2
 8009224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009228:	461a      	mov	r2, r3
 800922a:	2300      	movs	r3, #0
 800922c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	015a      	lsls	r2, r3, #5
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	4413      	add	r3, r2
 8009236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800923a:	461a      	mov	r2, r3
 800923c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009240:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	3301      	adds	r3, #1
 8009246:	613b      	str	r3, [r7, #16]
 8009248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924a:	693a      	ldr	r2, [r7, #16]
 800924c:	429a      	cmp	r2, r3
 800924e:	d3b7      	bcc.n	80091c0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800925e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009262:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009270:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	699b      	ldr	r3, [r3, #24]
 8009276:	f043 0210 	orr.w	r2, r3, #16
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	699a      	ldr	r2, [r3, #24]
 8009282:	4b10      	ldr	r3, [pc, #64]	; (80092c4 <USB_DevInit+0x294>)
 8009284:	4313      	orrs	r3, r2
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800928a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800928c:	2b00      	cmp	r3, #0
 800928e:	d005      	beq.n	800929c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	f043 0208 	orr.w	r2, r3, #8
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800929c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d107      	bne.n	80092b2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	699b      	ldr	r3, [r3, #24]
 80092a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092aa:	f043 0304 	orr.w	r3, r3, #4
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80092b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3718      	adds	r7, #24
 80092b8:	46bd      	mov	sp, r7
 80092ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80092be:	b004      	add	sp, #16
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	803c3800 	.word	0x803c3800

080092c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80092d2:	2300      	movs	r3, #0
 80092d4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	019b      	lsls	r3, r3, #6
 80092da:	f043 0220 	orr.w	r2, r3, #32
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	3301      	adds	r3, #1
 80092e6:	60fb      	str	r3, [r7, #12]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	4a09      	ldr	r2, [pc, #36]	; (8009310 <USB_FlushTxFifo+0x48>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d901      	bls.n	80092f4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80092f0:	2303      	movs	r3, #3
 80092f2:	e006      	b.n	8009302 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	f003 0320 	and.w	r3, r3, #32
 80092fc:	2b20      	cmp	r3, #32
 80092fe:	d0f0      	beq.n	80092e2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3714      	adds	r7, #20
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	00030d40 	.word	0x00030d40

08009314 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800931c:	2300      	movs	r3, #0
 800931e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2210      	movs	r2, #16
 8009324:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	3301      	adds	r3, #1
 800932a:	60fb      	str	r3, [r7, #12]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	4a09      	ldr	r2, [pc, #36]	; (8009354 <USB_FlushRxFifo+0x40>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d901      	bls.n	8009338 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009334:	2303      	movs	r3, #3
 8009336:	e006      	b.n	8009346 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	f003 0310 	and.w	r3, r3, #16
 8009340:	2b10      	cmp	r3, #16
 8009342:	d0f0      	beq.n	8009326 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3714      	adds	r7, #20
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	00030d40 	.word	0x00030d40

08009358 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009358:	b480      	push	{r7}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	460b      	mov	r3, r1
 8009362:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	78fb      	ldrb	r3, [r7, #3]
 8009372:	68f9      	ldr	r1, [r7, #12]
 8009374:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009378:	4313      	orrs	r3, r2
 800937a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3714      	adds	r7, #20
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr

0800938a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800938a:	b480      	push	{r7}
 800938c:	b085      	sub	sp, #20
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68fa      	ldr	r2, [r7, #12]
 80093a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80093a4:	f023 0303 	bic.w	r3, r3, #3
 80093a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	68fa      	ldr	r2, [r7, #12]
 80093b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093b8:	f043 0302 	orr.w	r3, r3, #2
 80093bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3714      	adds	r7, #20
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80093d4:	2300      	movs	r3, #0
 80093d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	3301      	adds	r3, #1
 80093dc:	60fb      	str	r3, [r7, #12]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	4a13      	ldr	r2, [pc, #76]	; (8009430 <USB_CoreReset+0x64>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d901      	bls.n	80093ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80093e6:	2303      	movs	r3, #3
 80093e8:	e01b      	b.n	8009422 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	daf2      	bge.n	80093d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80093f2:	2300      	movs	r3, #0
 80093f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	f043 0201 	orr.w	r2, r3, #1
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	3301      	adds	r3, #1
 8009406:	60fb      	str	r3, [r7, #12]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	4a09      	ldr	r2, [pc, #36]	; (8009430 <USB_CoreReset+0x64>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d901      	bls.n	8009414 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009410:	2303      	movs	r3, #3
 8009412:	e006      	b.n	8009422 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	f003 0301 	and.w	r3, r3, #1
 800941c:	2b01      	cmp	r3, #1
 800941e:	d0f0      	beq.n	8009402 <USB_CoreReset+0x36>

  return HAL_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3714      	adds	r7, #20
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop
 8009430:	00030d40 	.word	0x00030d40

08009434 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b08a      	sub	sp, #40	; 0x28
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800943c:	4b27      	ldr	r3, [pc, #156]	; (80094dc <I2Cx_MspInit+0xa8>)
 800943e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009440:	4a26      	ldr	r2, [pc, #152]	; (80094dc <I2Cx_MspInit+0xa8>)
 8009442:	f043 0302 	orr.w	r3, r3, #2
 8009446:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009448:	4b24      	ldr	r3, [pc, #144]	; (80094dc <I2Cx_MspInit+0xa8>)
 800944a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800944c:	f003 0302 	and.w	r3, r3, #2
 8009450:	613b      	str	r3, [r7, #16]
 8009452:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8009454:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009458:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800945a:	2312      	movs	r3, #18
 800945c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800945e:	2301      	movs	r3, #1
 8009460:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009462:	2303      	movs	r3, #3
 8009464:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8009466:	2304      	movs	r3, #4
 8009468:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800946a:	f107 0314 	add.w	r3, r7, #20
 800946e:	4619      	mov	r1, r3
 8009470:	481b      	ldr	r0, [pc, #108]	; (80094e0 <I2Cx_MspInit+0xac>)
 8009472:	f7f9 fcb3 	bl	8002ddc <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8009476:	f107 0314 	add.w	r3, r7, #20
 800947a:	4619      	mov	r1, r3
 800947c:	4818      	ldr	r0, [pc, #96]	; (80094e0 <I2Cx_MspInit+0xac>)
 800947e:	f7f9 fcad 	bl	8002ddc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8009482:	4b16      	ldr	r3, [pc, #88]	; (80094dc <I2Cx_MspInit+0xa8>)
 8009484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009486:	4a15      	ldr	r2, [pc, #84]	; (80094dc <I2Cx_MspInit+0xa8>)
 8009488:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800948c:	6593      	str	r3, [r2, #88]	; 0x58
 800948e:	4b13      	ldr	r3, [pc, #76]	; (80094dc <I2Cx_MspInit+0xa8>)
 8009490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009496:	60fb      	str	r3, [r7, #12]
 8009498:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800949a:	4b10      	ldr	r3, [pc, #64]	; (80094dc <I2Cx_MspInit+0xa8>)
 800949c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800949e:	4a0f      	ldr	r2, [pc, #60]	; (80094dc <I2Cx_MspInit+0xa8>)
 80094a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80094a4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80094a6:	4b0d      	ldr	r3, [pc, #52]	; (80094dc <I2Cx_MspInit+0xa8>)
 80094a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094aa:	4a0c      	ldr	r2, [pc, #48]	; (80094dc <I2Cx_MspInit+0xa8>)
 80094ac:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80094b0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80094b2:	2200      	movs	r2, #0
 80094b4:	210f      	movs	r1, #15
 80094b6:	2021      	movs	r0, #33	; 0x21
 80094b8:	f7f9 facc 	bl	8002a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80094bc:	2021      	movs	r0, #33	; 0x21
 80094be:	f7f9 fae5 	bl	8002a8c <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80094c2:	2200      	movs	r2, #0
 80094c4:	210f      	movs	r1, #15
 80094c6:	2022      	movs	r0, #34	; 0x22
 80094c8:	f7f9 fac4 	bl	8002a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80094cc:	2022      	movs	r0, #34	; 0x22
 80094ce:	f7f9 fadd 	bl	8002a8c <HAL_NVIC_EnableIRQ>
}
 80094d2:	bf00      	nop
 80094d4:	3728      	adds	r7, #40	; 0x28
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	40021000 	.word	0x40021000
 80094e0:	48000400 	.word	0x48000400

080094e4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a12      	ldr	r2, [pc, #72]	; (8009538 <I2Cx_Init+0x54>)
 80094f0:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a11      	ldr	r2, [pc, #68]	; (800953c <I2Cx_Init+0x58>)
 80094f6:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2201      	movs	r2, #1
 8009502:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7ff ff89 	bl	8009434 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f7f9 ff40 	bl	80033a8 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8009528:	2100      	movs	r1, #0
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f7fa fc44 	bl	8003db8 <HAL_I2CEx_ConfigAnalogFilter>
}
 8009530:	bf00      	nop
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	40005800 	.word	0x40005800
 800953c:	00702681 	.word	0x00702681

08009540 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b08a      	sub	sp, #40	; 0x28
 8009544:	af04      	add	r7, sp, #16
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	4608      	mov	r0, r1
 800954a:	4611      	mov	r1, r2
 800954c:	461a      	mov	r2, r3
 800954e:	4603      	mov	r3, r0
 8009550:	72fb      	strb	r3, [r7, #11]
 8009552:	460b      	mov	r3, r1
 8009554:	813b      	strh	r3, [r7, #8]
 8009556:	4613      	mov	r3, r2
 8009558:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800955e:	7afb      	ldrb	r3, [r7, #11]
 8009560:	b299      	uxth	r1, r3
 8009562:	88f8      	ldrh	r0, [r7, #6]
 8009564:	893a      	ldrh	r2, [r7, #8]
 8009566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800956a:	9302      	str	r3, [sp, #8]
 800956c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800956e:	9301      	str	r3, [sp, #4]
 8009570:	6a3b      	ldr	r3, [r7, #32]
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	4603      	mov	r3, r0
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f7fa f8e8 	bl	800374c <HAL_I2C_Mem_Read>
 800957c:	4603      	mov	r3, r0
 800957e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8009580:	7dfb      	ldrb	r3, [r7, #23]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d004      	beq.n	8009590 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8009586:	7afb      	ldrb	r3, [r7, #11]
 8009588:	4619      	mov	r1, r3
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f000 f832 	bl	80095f4 <I2Cx_Error>
  }
  return status;
 8009590:	7dfb      	ldrb	r3, [r7, #23]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3718      	adds	r7, #24
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b08a      	sub	sp, #40	; 0x28
 800959e:	af04      	add	r7, sp, #16
 80095a0:	60f8      	str	r0, [r7, #12]
 80095a2:	4608      	mov	r0, r1
 80095a4:	4611      	mov	r1, r2
 80095a6:	461a      	mov	r2, r3
 80095a8:	4603      	mov	r3, r0
 80095aa:	72fb      	strb	r3, [r7, #11]
 80095ac:	460b      	mov	r3, r1
 80095ae:	813b      	strh	r3, [r7, #8]
 80095b0:	4613      	mov	r3, r2
 80095b2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80095b4:	2300      	movs	r3, #0
 80095b6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80095b8:	7afb      	ldrb	r3, [r7, #11]
 80095ba:	b299      	uxth	r1, r3
 80095bc:	88f8      	ldrh	r0, [r7, #6]
 80095be:	893a      	ldrh	r2, [r7, #8]
 80095c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80095c4:	9302      	str	r3, [sp, #8]
 80095c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095c8:	9301      	str	r3, [sp, #4]
 80095ca:	6a3b      	ldr	r3, [r7, #32]
 80095cc:	9300      	str	r3, [sp, #0]
 80095ce:	4603      	mov	r3, r0
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f7f9 ffa7 	bl	8003524 <HAL_I2C_Mem_Write>
 80095d6:	4603      	mov	r3, r0
 80095d8:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80095da:	7dfb      	ldrb	r3, [r7, #23]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d004      	beq.n	80095ea <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80095e0:	7afb      	ldrb	r3, [r7, #11]
 80095e2:	4619      	mov	r1, r3
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f000 f805 	bl	80095f4 <I2Cx_Error>
  }
  return status;
 80095ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3718      	adds	r7, #24
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	460b      	mov	r3, r1
 80095fe:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f7f9 ff60 	bl	80034c6 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f7ff ff6c 	bl	80094e4 <I2Cx_Init>
}
 800960c:	bf00      	nop
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8009618:	4802      	ldr	r0, [pc, #8]	; (8009624 <SENSOR_IO_Init+0x10>)
 800961a:	f7ff ff63 	bl	80094e4 <I2Cx_Init>
}
 800961e:	bf00      	nop
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	20000c40 	.word	0x20000c40

08009628 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af02      	add	r7, sp, #8
 800962e:	4603      	mov	r3, r0
 8009630:	71fb      	strb	r3, [r7, #7]
 8009632:	460b      	mov	r3, r1
 8009634:	71bb      	strb	r3, [r7, #6]
 8009636:	4613      	mov	r3, r2
 8009638:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800963a:	79bb      	ldrb	r3, [r7, #6]
 800963c:	b29a      	uxth	r2, r3
 800963e:	79f9      	ldrb	r1, [r7, #7]
 8009640:	2301      	movs	r3, #1
 8009642:	9301      	str	r3, [sp, #4]
 8009644:	1d7b      	adds	r3, r7, #5
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	2301      	movs	r3, #1
 800964a:	4803      	ldr	r0, [pc, #12]	; (8009658 <SENSOR_IO_Write+0x30>)
 800964c:	f7ff ffa5 	bl	800959a <I2Cx_WriteMultiple>
}
 8009650:	bf00      	nop
 8009652:	3708      	adds	r7, #8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	20000c40 	.word	0x20000c40

0800965c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b086      	sub	sp, #24
 8009660:	af02      	add	r7, sp, #8
 8009662:	4603      	mov	r3, r0
 8009664:	460a      	mov	r2, r1
 8009666:	71fb      	strb	r3, [r7, #7]
 8009668:	4613      	mov	r3, r2
 800966a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800966c:	2300      	movs	r3, #0
 800966e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8009670:	79bb      	ldrb	r3, [r7, #6]
 8009672:	b29a      	uxth	r2, r3
 8009674:	79f9      	ldrb	r1, [r7, #7]
 8009676:	2301      	movs	r3, #1
 8009678:	9301      	str	r3, [sp, #4]
 800967a:	f107 030f 	add.w	r3, r7, #15
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	2301      	movs	r3, #1
 8009682:	4804      	ldr	r0, [pc, #16]	; (8009694 <SENSOR_IO_Read+0x38>)
 8009684:	f7ff ff5c 	bl	8009540 <I2Cx_ReadMultiple>

  return read_value;
 8009688:	7bfb      	ldrb	r3, [r7, #15]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	20000c40 	.word	0x20000c40

08009698 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af02      	add	r7, sp, #8
 800969e:	603a      	str	r2, [r7, #0]
 80096a0:	461a      	mov	r2, r3
 80096a2:	4603      	mov	r3, r0
 80096a4:	71fb      	strb	r3, [r7, #7]
 80096a6:	460b      	mov	r3, r1
 80096a8:	71bb      	strb	r3, [r7, #6]
 80096aa:	4613      	mov	r3, r2
 80096ac:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80096ae:	79bb      	ldrb	r3, [r7, #6]
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	79f9      	ldrb	r1, [r7, #7]
 80096b4:	88bb      	ldrh	r3, [r7, #4]
 80096b6:	9301      	str	r3, [sp, #4]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	9300      	str	r3, [sp, #0]
 80096bc:	2301      	movs	r3, #1
 80096be:	4804      	ldr	r0, [pc, #16]	; (80096d0 <SENSOR_IO_ReadMultiple+0x38>)
 80096c0:	f7ff ff3e 	bl	8009540 <I2Cx_ReadMultiple>
 80096c4:	4603      	mov	r3, r0
 80096c6:	b29b      	uxth	r3, r3
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	20000c40 	.word	0x20000c40

080096d4 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80096da:	2300      	movs	r3, #0
 80096dc:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80096de:	2300      	movs	r3, #0
 80096e0:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80096e2:	4b19      	ldr	r3, [pc, #100]	; (8009748 <BSP_ACCELERO_Init+0x74>)
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	4798      	blx	r3
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b6a      	cmp	r3, #106	; 0x6a
 80096ec:	d002      	beq.n	80096f4 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	73fb      	strb	r3, [r7, #15]
 80096f2:	e024      	b.n	800973e <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80096f4:	4b15      	ldr	r3, [pc, #84]	; (800974c <BSP_ACCELERO_Init+0x78>)
 80096f6:	4a14      	ldr	r2, [pc, #80]	; (8009748 <BSP_ACCELERO_Init+0x74>)
 80096f8:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80096fa:	2330      	movs	r3, #48	; 0x30
 80096fc:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80096fe:	2300      	movs	r3, #0
 8009700:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8009702:	2300      	movs	r3, #0
 8009704:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8009706:	2340      	movs	r3, #64	; 0x40
 8009708:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800970a:	2300      	movs	r3, #0
 800970c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800970e:	2300      	movs	r3, #0
 8009710:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8009712:	797a      	ldrb	r2, [r7, #5]
 8009714:	7abb      	ldrb	r3, [r7, #10]
 8009716:	4313      	orrs	r3, r2
 8009718:	b2db      	uxtb	r3, r3
 800971a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800971c:	7a3b      	ldrb	r3, [r7, #8]
 800971e:	f043 0304 	orr.w	r3, r3, #4
 8009722:	b2db      	uxtb	r3, r3
 8009724:	021b      	lsls	r3, r3, #8
 8009726:	b21a      	sxth	r2, r3
 8009728:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800972c:	4313      	orrs	r3, r2
 800972e:	b21b      	sxth	r3, r3
 8009730:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8009732:	4b06      	ldr	r3, [pc, #24]	; (800974c <BSP_ACCELERO_Init+0x78>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	89ba      	ldrh	r2, [r7, #12]
 800973a:	4610      	mov	r0, r2
 800973c:	4798      	blx	r3
  }  

  return ret;
 800973e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	2000001c 	.word	0x2000001c
 800974c:	20000c8c 	.word	0x20000c8c

08009750 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8009758:	4b08      	ldr	r3, [pc, #32]	; (800977c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d009      	beq.n	8009774 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8009760:	4b06      	ldr	r3, [pc, #24]	; (800977c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009766:	2b00      	cmp	r3, #0
 8009768:	d004      	beq.n	8009774 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800976a:	4b04      	ldr	r3, [pc, #16]	; (800977c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	4798      	blx	r3
    }
  }
}
 8009774:	bf00      	nop
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}
 800977c:	20000c8c 	.word	0x20000c8c

08009780 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800978a:	2300      	movs	r3, #0
 800978c:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800978e:	2110      	movs	r1, #16
 8009790:	20d4      	movs	r0, #212	; 0xd4
 8009792:	f7ff ff63 	bl	800965c <SENSOR_IO_Read>
 8009796:	4603      	mov	r3, r0
 8009798:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800979a:	88fb      	ldrh	r3, [r7, #6]
 800979c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800979e:	7bbb      	ldrb	r3, [r7, #14]
 80097a0:	f003 0303 	and.w	r3, r3, #3
 80097a4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80097a6:	7bba      	ldrb	r2, [r7, #14]
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80097ae:	7bbb      	ldrb	r3, [r7, #14]
 80097b0:	461a      	mov	r2, r3
 80097b2:	2110      	movs	r1, #16
 80097b4:	20d4      	movs	r0, #212	; 0xd4
 80097b6:	f7ff ff37 	bl	8009628 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80097ba:	2112      	movs	r1, #18
 80097bc:	20d4      	movs	r0, #212	; 0xd4
 80097be:	f7ff ff4d 	bl	800965c <SENSOR_IO_Read>
 80097c2:	4603      	mov	r3, r0
 80097c4:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80097c6:	88fb      	ldrh	r3, [r7, #6]
 80097c8:	0a1b      	lsrs	r3, r3, #8
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80097ce:	7bbb      	ldrb	r3, [r7, #14]
 80097d0:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80097d4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80097d6:	7bba      	ldrb	r2, [r7, #14]
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
 80097da:	4313      	orrs	r3, r2
 80097dc:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80097de:	7bbb      	ldrb	r3, [r7, #14]
 80097e0:	461a      	mov	r2, r3
 80097e2:	2112      	movs	r1, #18
 80097e4:	20d4      	movs	r0, #212	; 0xd4
 80097e6:	f7ff ff1f 	bl	8009628 <SENSOR_IO_Write>
}
 80097ea:	bf00      	nop
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b082      	sub	sp, #8
 80097f6:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80097f8:	2300      	movs	r3, #0
 80097fa:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80097fc:	2110      	movs	r1, #16
 80097fe:	20d4      	movs	r0, #212	; 0xd4
 8009800:	f7ff ff2c 	bl	800965c <SENSOR_IO_Read>
 8009804:	4603      	mov	r3, r0
 8009806:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8009808:	79fb      	ldrb	r3, [r7, #7]
 800980a:	f003 030f 	and.w	r3, r3, #15
 800980e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8009810:	79fb      	ldrb	r3, [r7, #7]
 8009812:	461a      	mov	r2, r3
 8009814:	2110      	movs	r1, #16
 8009816:	20d4      	movs	r0, #212	; 0xd4
 8009818:	f7ff ff06 	bl	8009628 <SENSOR_IO_Write>
}
 800981c:	bf00      	nop
 800981e:	3708      	adds	r7, #8
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8009824:	b580      	push	{r7, lr}
 8009826:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8009828:	f7ff fef4 	bl	8009614 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800982c:	210f      	movs	r1, #15
 800982e:	20d4      	movs	r0, #212	; 0xd4
 8009830:	f7ff ff14 	bl	800965c <SENSOR_IO_Read>
 8009834:	4603      	mov	r3, r0
}
 8009836:	4618      	mov	r0, r3
 8009838:	bd80      	pop	{r7, pc}

0800983a <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800983a:	b580      	push	{r7, lr}
 800983c:	b084      	sub	sp, #16
 800983e:	af00      	add	r7, sp, #0
 8009840:	4603      	mov	r3, r0
 8009842:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8009844:	2300      	movs	r3, #0
 8009846:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8009848:	2115      	movs	r1, #21
 800984a:	20d4      	movs	r0, #212	; 0xd4
 800984c:	f7ff ff06 	bl	800965c <SENSOR_IO_Read>
 8009850:	4603      	mov	r3, r0
 8009852:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8009854:	7bfb      	ldrb	r3, [r7, #15]
 8009856:	f023 0310 	bic.w	r3, r3, #16
 800985a:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800985c:	88fb      	ldrh	r3, [r7, #6]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d003      	beq.n	800986a <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8009862:	7bfb      	ldrb	r3, [r7, #15]
 8009864:	f043 0310 	orr.w	r3, r3, #16
 8009868:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800986a:	7bfb      	ldrb	r3, [r7, #15]
 800986c:	461a      	mov	r2, r3
 800986e:	2115      	movs	r1, #21
 8009870:	20d4      	movs	r0, #212	; 0xd4
 8009872:	f7ff fed9 	bl	8009628 <SENSOR_IO_Write>
}
 8009876:	bf00      	nop
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
	...

08009880 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b088      	sub	sp, #32
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8009888:	2300      	movs	r3, #0
 800988a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800988c:	2300      	movs	r3, #0
 800988e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8009890:	f04f 0300 	mov.w	r3, #0
 8009894:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8009896:	2110      	movs	r1, #16
 8009898:	20d4      	movs	r0, #212	; 0xd4
 800989a:	f7ff fedf 	bl	800965c <SENSOR_IO_Read>
 800989e:	4603      	mov	r3, r0
 80098a0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80098a2:	f107 0208 	add.w	r2, r7, #8
 80098a6:	2306      	movs	r3, #6
 80098a8:	2128      	movs	r1, #40	; 0x28
 80098aa:	20d4      	movs	r0, #212	; 0xd4
 80098ac:	f7ff fef4 	bl	8009698 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80098b0:	2300      	movs	r3, #0
 80098b2:	77fb      	strb	r3, [r7, #31]
 80098b4:	e01c      	b.n	80098f0 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80098b6:	7ffb      	ldrb	r3, [r7, #31]
 80098b8:	005b      	lsls	r3, r3, #1
 80098ba:	3301      	adds	r3, #1
 80098bc:	3320      	adds	r3, #32
 80098be:	443b      	add	r3, r7
 80098c0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	021b      	lsls	r3, r3, #8
 80098c8:	b29a      	uxth	r2, r3
 80098ca:	7ffb      	ldrb	r3, [r7, #31]
 80098cc:	005b      	lsls	r3, r3, #1
 80098ce:	3320      	adds	r3, #32
 80098d0:	443b      	add	r3, r7
 80098d2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	4413      	add	r3, r2
 80098da:	b29a      	uxth	r2, r3
 80098dc:	7ffb      	ldrb	r3, [r7, #31]
 80098de:	b212      	sxth	r2, r2
 80098e0:	005b      	lsls	r3, r3, #1
 80098e2:	3320      	adds	r3, #32
 80098e4:	443b      	add	r3, r7
 80098e6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80098ea:	7ffb      	ldrb	r3, [r7, #31]
 80098ec:	3301      	adds	r3, #1
 80098ee:	77fb      	strb	r3, [r7, #31]
 80098f0:	7ffb      	ldrb	r3, [r7, #31]
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d9df      	bls.n	80098b6 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80098f6:	7dfb      	ldrb	r3, [r7, #23]
 80098f8:	f003 030c 	and.w	r3, r3, #12
 80098fc:	2b0c      	cmp	r3, #12
 80098fe:	d829      	bhi.n	8009954 <LSM6DSL_AccReadXYZ+0xd4>
 8009900:	a201      	add	r2, pc, #4	; (adr r2, 8009908 <LSM6DSL_AccReadXYZ+0x88>)
 8009902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009906:	bf00      	nop
 8009908:	0800993d 	.word	0x0800993d
 800990c:	08009955 	.word	0x08009955
 8009910:	08009955 	.word	0x08009955
 8009914:	08009955 	.word	0x08009955
 8009918:	0800994f 	.word	0x0800994f
 800991c:	08009955 	.word	0x08009955
 8009920:	08009955 	.word	0x08009955
 8009924:	08009955 	.word	0x08009955
 8009928:	08009943 	.word	0x08009943
 800992c:	08009955 	.word	0x08009955
 8009930:	08009955 	.word	0x08009955
 8009934:	08009955 	.word	0x08009955
 8009938:	08009949 	.word	0x08009949
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800993c:	4b18      	ldr	r3, [pc, #96]	; (80099a0 <LSM6DSL_AccReadXYZ+0x120>)
 800993e:	61bb      	str	r3, [r7, #24]
    break;
 8009940:	e008      	b.n	8009954 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8009942:	4b18      	ldr	r3, [pc, #96]	; (80099a4 <LSM6DSL_AccReadXYZ+0x124>)
 8009944:	61bb      	str	r3, [r7, #24]
    break;
 8009946:	e005      	b.n	8009954 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8009948:	4b17      	ldr	r3, [pc, #92]	; (80099a8 <LSM6DSL_AccReadXYZ+0x128>)
 800994a:	61bb      	str	r3, [r7, #24]
    break;
 800994c:	e002      	b.n	8009954 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800994e:	4b17      	ldr	r3, [pc, #92]	; (80099ac <LSM6DSL_AccReadXYZ+0x12c>)
 8009950:	61bb      	str	r3, [r7, #24]
    break;    
 8009952:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8009954:	2300      	movs	r3, #0
 8009956:	77fb      	strb	r3, [r7, #31]
 8009958:	e01a      	b.n	8009990 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800995a:	7ffb      	ldrb	r3, [r7, #31]
 800995c:	005b      	lsls	r3, r3, #1
 800995e:	3320      	adds	r3, #32
 8009960:	443b      	add	r3, r7
 8009962:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8009966:	ee07 3a90 	vmov	s15, r3
 800996a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800996e:	edd7 7a06 	vldr	s15, [r7, #24]
 8009972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009976:	7ffb      	ldrb	r3, [r7, #31]
 8009978:	005b      	lsls	r3, r3, #1
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	4413      	add	r3, r2
 800997e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009982:	ee17 2a90 	vmov	r2, s15
 8009986:	b212      	sxth	r2, r2
 8009988:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800998a:	7ffb      	ldrb	r3, [r7, #31]
 800998c:	3301      	adds	r3, #1
 800998e:	77fb      	strb	r3, [r7, #31]
 8009990:	7ffb      	ldrb	r3, [r7, #31]
 8009992:	2b02      	cmp	r3, #2
 8009994:	d9e1      	bls.n	800995a <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8009996:	bf00      	nop
 8009998:	bf00      	nop
 800999a:	3720      	adds	r7, #32
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	3d79db23 	.word	0x3d79db23
 80099a4:	3df9db23 	.word	0x3df9db23
 80099a8:	3e79db23 	.word	0x3e79db23
 80099ac:	3ef9db23 	.word	0x3ef9db23

080099b0 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	4603      	mov	r3, r0
 80099b8:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 80099ba:	79fb      	ldrb	r3, [r7, #7]
 80099bc:	2b2f      	cmp	r3, #47	; 0x2f
 80099be:	d906      	bls.n	80099ce <Hex2Num+0x1e>
 80099c0:	79fb      	ldrb	r3, [r7, #7]
 80099c2:	2b39      	cmp	r3, #57	; 0x39
 80099c4:	d803      	bhi.n	80099ce <Hex2Num+0x1e>
        return a - '0';
 80099c6:	79fb      	ldrb	r3, [r7, #7]
 80099c8:	3b30      	subs	r3, #48	; 0x30
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	e014      	b.n	80099f8 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 80099ce:	79fb      	ldrb	r3, [r7, #7]
 80099d0:	2b60      	cmp	r3, #96	; 0x60
 80099d2:	d906      	bls.n	80099e2 <Hex2Num+0x32>
 80099d4:	79fb      	ldrb	r3, [r7, #7]
 80099d6:	2b66      	cmp	r3, #102	; 0x66
 80099d8:	d803      	bhi.n	80099e2 <Hex2Num+0x32>
        return (a - 'a') + 10;
 80099da:	79fb      	ldrb	r3, [r7, #7]
 80099dc:	3b57      	subs	r3, #87	; 0x57
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	e00a      	b.n	80099f8 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 80099e2:	79fb      	ldrb	r3, [r7, #7]
 80099e4:	2b40      	cmp	r3, #64	; 0x40
 80099e6:	d906      	bls.n	80099f6 <Hex2Num+0x46>
 80099e8:	79fb      	ldrb	r3, [r7, #7]
 80099ea:	2b46      	cmp	r3, #70	; 0x46
 80099ec:	d803      	bhi.n	80099f6 <Hex2Num+0x46>
        return (a - 'A') + 10;
 80099ee:	79fb      	ldrb	r3, [r7, #7]
 80099f0:	3b37      	subs	r3, #55	; 0x37
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	e000      	b.n	80099f8 <Hex2Num+0x48>
    }

    return 0;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 8009a12:	2300      	movs	r3, #0
 8009a14:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8009a16:	e012      	b.n	8009a3e <ParseHexNumber+0x3a>
        sum <<= 4;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	011b      	lsls	r3, r3, #4
 8009a1c:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7ff ffc4 	bl	80099b0 <Hex2Num>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	4413      	add	r3, r2
 8009a30:	60fb      	str	r3, [r7, #12]
        ptr++;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	3301      	adds	r3, #1
 8009a36:	607b      	str	r3, [r7, #4]
        i++;
 8009a38:	7afb      	ldrb	r3, [r7, #11]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	2b2f      	cmp	r3, #47	; 0x2f
 8009a44:	d903      	bls.n	8009a4e <ParseHexNumber+0x4a>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	2b39      	cmp	r3, #57	; 0x39
 8009a4c:	d9e4      	bls.n	8009a18 <ParseHexNumber+0x14>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	2b60      	cmp	r3, #96	; 0x60
 8009a54:	d903      	bls.n	8009a5e <ParseHexNumber+0x5a>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	2b66      	cmp	r3, #102	; 0x66
 8009a5c:	d9dc      	bls.n	8009a18 <ParseHexNumber+0x14>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	2b40      	cmp	r3, #64	; 0x40
 8009a64:	d903      	bls.n	8009a6e <ParseHexNumber+0x6a>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	2b46      	cmp	r3, #70	; 0x46
 8009a6c:	d9d4      	bls.n	8009a18 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d002      	beq.n	8009a7a <ParseHexNumber+0x76>
        *cnt = i;
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	7afa      	ldrb	r2, [r7, #11]
 8009a78:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8009a7a:	68fb      	ldr	r3, [r7, #12]
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3710      	adds	r7, #16
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	73fb      	strb	r3, [r7, #15]
 8009a92:	2300      	movs	r3, #0
 8009a94:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8009a96:	2300      	movs	r3, #0
 8009a98:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	2b2d      	cmp	r3, #45	; 0x2d
 8009aa0:	d119      	bne.n	8009ad6 <ParseNumber+0x52>
        minus = 1;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	607b      	str	r3, [r7, #4]
        i++;
 8009aac:	7bbb      	ldrb	r3, [r7, #14]
 8009aae:	3301      	adds	r3, #1
 8009ab0:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8009ab2:	e010      	b.n	8009ad6 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8009ab4:	68ba      	ldr	r2, [r7, #8]
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	4413      	add	r3, r2
 8009abc:	005b      	lsls	r3, r3, #1
 8009abe:	461a      	mov	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	3b30      	subs	r3, #48	; 0x30
 8009ac6:	4413      	add	r3, r2
 8009ac8:	60bb      	str	r3, [r7, #8]
        ptr++;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	3301      	adds	r3, #1
 8009ace:	607b      	str	r3, [r7, #4]
        i++;
 8009ad0:	7bbb      	ldrb	r3, [r7, #14]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	2b2f      	cmp	r3, #47	; 0x2f
 8009adc:	d903      	bls.n	8009ae6 <ParseNumber+0x62>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	2b39      	cmp	r3, #57	; 0x39
 8009ae4:	d9e6      	bls.n	8009ab4 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d002      	beq.n	8009af2 <ParseNumber+0x6e>
        *cnt = i;
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	7bba      	ldrb	r2, [r7, #14]
 8009af0:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8009af2:	7bfb      	ldrb	r3, [r7, #15]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d002      	beq.n	8009afe <ParseNumber+0x7a>
        return 0 - sum;
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	425b      	negs	r3, r3
 8009afc:	e000      	b.n	8009b00 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8009afe:	68bb      	ldr	r3, [r7, #8]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3714      	adds	r7, #20
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8009b16:	2300      	movs	r3, #0
 8009b18:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8009b1a:	e019      	b.n	8009b50 <ParseMAC+0x44>
    hexcnt = 1;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	2b3a      	cmp	r3, #58	; 0x3a
 8009b26:	d00e      	beq.n	8009b46 <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8009b28:	f107 030e 	add.w	r3, r7, #14
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f7ff ff68 	bl	8009a04 <ParseHexNumber>
 8009b34:	4601      	mov	r1, r0
 8009b36:	7bfb      	ldrb	r3, [r7, #15]
 8009b38:	1c5a      	adds	r2, r3, #1
 8009b3a:	73fa      	strb	r2, [r7, #15]
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	4413      	add	r3, r2
 8009b42:	b2ca      	uxtb	r2, r1
 8009b44:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8009b46:	7bbb      	ldrb	r3, [r7, #14]
 8009b48:	461a      	mov	r2, r3
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d1e1      	bne.n	8009b1c <ParseMAC+0x10>
  }
}
 8009b58:	bf00      	nop
 8009b5a:	bf00      	nop
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b084      	sub	sp, #16
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
 8009b6a:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8009b70:	e019      	b.n	8009ba6 <ParseIP+0x44>
    hexcnt = 1;
 8009b72:	2301      	movs	r3, #1
 8009b74:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	2b2e      	cmp	r3, #46	; 0x2e
 8009b7c:	d00e      	beq.n	8009b9c <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8009b7e:	f107 030e 	add.w	r3, r7, #14
 8009b82:	4619      	mov	r1, r3
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f7ff ff7d 	bl	8009a84 <ParseNumber>
 8009b8a:	4601      	mov	r1, r0
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
 8009b8e:	1c5a      	adds	r2, r3, #1
 8009b90:	73fa      	strb	r2, [r7, #15]
 8009b92:	461a      	mov	r2, r3
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	4413      	add	r3, r2
 8009b98:	b2ca      	uxtb	r2, r1
 8009b9a:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8009b9c:	7bbb      	ldrb	r3, [r7, #14]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4413      	add	r3, r2
 8009ba4:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d1e1      	bne.n	8009b72 <ParseIP+0x10>
  }
}
 8009bae:	bf00      	nop
 8009bb0:	bf00      	nop
 8009bb2:	3710      	adds	r7, #16
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	3302      	adds	r3, #2
 8009bca:	4934      	ldr	r1, [pc, #208]	; (8009c9c <AT_ParseInfo+0xe4>)
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f009 fa03 	bl	8012fd8 <strtok>
 8009bd2:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8009bd4:	e05a      	b.n	8009c8c <AT_ParseInfo+0xd4>
    switch (num++) {
 8009bd6:	7afb      	ldrb	r3, [r7, #11]
 8009bd8:	1c5a      	adds	r2, r3, #1
 8009bda:	72fa      	strb	r2, [r7, #11]
 8009bdc:	2b06      	cmp	r3, #6
 8009bde:	d84f      	bhi.n	8009c80 <AT_ParseInfo+0xc8>
 8009be0:	a201      	add	r2, pc, #4	; (adr r2, 8009be8 <AT_ParseInfo+0x30>)
 8009be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be6:	bf00      	nop
 8009be8:	08009c05 	.word	0x08009c05
 8009bec:	08009c13 	.word	0x08009c13
 8009bf0:	08009c23 	.word	0x08009c23
 8009bf4:	08009c33 	.word	0x08009c33
 8009bf8:	08009c43 	.word	0x08009c43
 8009bfc:	08009c53 	.word	0x08009c53
 8009c00:	08009c67 	.word	0x08009c67
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2220      	movs	r2, #32
 8009c08:	68f9      	ldr	r1, [r7, #12]
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f009 f9bb 	bl	8012f86 <strncpy>
      break;
 8009c10:	e037      	b.n	8009c82 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	3320      	adds	r3, #32
 8009c16:	2218      	movs	r2, #24
 8009c18:	68f9      	ldr	r1, [r7, #12]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f009 f9b3 	bl	8012f86 <strncpy>
      break;
 8009c20:	e02f      	b.n	8009c82 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	3338      	adds	r3, #56	; 0x38
 8009c26:	2210      	movs	r2, #16
 8009c28:	68f9      	ldr	r1, [r7, #12]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f009 f9ab 	bl	8012f86 <strncpy>
      break;
 8009c30:	e027      	b.n	8009c82 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	3348      	adds	r3, #72	; 0x48
 8009c36:	2210      	movs	r2, #16
 8009c38:	68f9      	ldr	r1, [r7, #12]
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f009 f9a3 	bl	8012f86 <strncpy>
      break;
 8009c40:	e01f      	b.n	8009c82 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	3358      	adds	r3, #88	; 0x58
 8009c46:	2210      	movs	r2, #16
 8009c48:	68f9      	ldr	r1, [r7, #12]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f009 f99b 	bl	8012f86 <strncpy>
      break;
 8009c50:	e017      	b.n	8009c82 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8009c52:	2100      	movs	r1, #0
 8009c54:	68f8      	ldr	r0, [r7, #12]
 8009c56:	f7ff ff15 	bl	8009a84 <ParseNumber>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8009c64:	e00d      	b.n	8009c82 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 8009c66:	490e      	ldr	r1, [pc, #56]	; (8009ca0 <AT_ParseInfo+0xe8>)
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f009 f9b5 	bl	8012fd8 <strtok>
 8009c6e:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	3368      	adds	r3, #104	; 0x68
 8009c74:	2220      	movs	r2, #32
 8009c76:	68f9      	ldr	r1, [r7, #12]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f009 f984 	bl	8012f86 <strncpy>
      break;
 8009c7e:	e000      	b.n	8009c82 <AT_ParseInfo+0xca>

    default: break;
 8009c80:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8009c82:	4906      	ldr	r1, [pc, #24]	; (8009c9c <AT_ParseInfo+0xe4>)
 8009c84:	2000      	movs	r0, #0
 8009c86:	f009 f9a7 	bl	8012fd8 <strtok>
 8009c8a:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1a1      	bne.n	8009bd6 <AT_ParseInfo+0x1e>
  }
}
 8009c92:	bf00      	nop
 8009c94:	bf00      	nop
 8009c96:	3710      	adds	r7, #16
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	0801423c 	.word	0x0801423c
 8009ca0:	08014240 	.word	0x08014240

08009ca4 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	3302      	adds	r3, #2
 8009cb6:	4952      	ldr	r1, [pc, #328]	; (8009e00 <AT_ParseConnSettings+0x15c>)
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f009 f98d 	bl	8012fd8 <strtok>
 8009cbe:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8009cc0:	e095      	b.n	8009dee <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8009cc2:	7bfb      	ldrb	r3, [r7, #15]
 8009cc4:	1c5a      	adds	r2, r3, #1
 8009cc6:	73fa      	strb	r2, [r7, #15]
 8009cc8:	2b0b      	cmp	r3, #11
 8009cca:	d87f      	bhi.n	8009dcc <AT_ParseConnSettings+0x128>
 8009ccc:	a201      	add	r2, pc, #4	; (adr r2, 8009cd4 <AT_ParseConnSettings+0x30>)
 8009cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd2:	bf00      	nop
 8009cd4:	08009d05 	.word	0x08009d05
 8009cd8:	08009d13 	.word	0x08009d13
 8009cdc:	08009d23 	.word	0x08009d23
 8009ce0:	08009d37 	.word	0x08009d37
 8009ce4:	08009d4b 	.word	0x08009d4b
 8009ce8:	08009d5f 	.word	0x08009d5f
 8009cec:	08009d6d 	.word	0x08009d6d
 8009cf0:	08009d7b 	.word	0x08009d7b
 8009cf4:	08009d89 	.word	0x08009d89
 8009cf8:	08009d97 	.word	0x08009d97
 8009cfc:	08009da5 	.word	0x08009da5
 8009d00:	08009db9 	.word	0x08009db9
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	2221      	movs	r2, #33	; 0x21
 8009d08:	68b9      	ldr	r1, [r7, #8]
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f009 f93b 	bl	8012f86 <strncpy>
      break;
 8009d10:	e05d      	b.n	8009dce <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	3321      	adds	r3, #33	; 0x21
 8009d16:	2221      	movs	r2, #33	; 0x21
 8009d18:	68b9      	ldr	r1, [r7, #8]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f009 f933 	bl	8012f86 <strncpy>
      break;
 8009d20:	e055      	b.n	8009dce <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8009d22:	2100      	movs	r1, #0
 8009d24:	68b8      	ldr	r0, [r7, #8]
 8009d26:	f7ff fead 	bl	8009a84 <ParseNumber>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	b2da      	uxtb	r2, r3
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8009d34:	e04b      	b.n	8009dce <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8009d36:	2100      	movs	r1, #0
 8009d38:	68b8      	ldr	r0, [r7, #8]
 8009d3a:	f7ff fea3 	bl	8009a84 <ParseNumber>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	b2da      	uxtb	r2, r3
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8009d48:	e041      	b.n	8009dce <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	68b8      	ldr	r0, [r7, #8]
 8009d4e:	f7ff fe99 	bl	8009a84 <ParseNumber>
 8009d52:	4603      	mov	r3, r0
 8009d54:	b2da      	uxtb	r2, r3
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8009d5c:	e037      	b.n	8009dce <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	3348      	adds	r3, #72	; 0x48
 8009d62:	4619      	mov	r1, r3
 8009d64:	68b8      	ldr	r0, [r7, #8]
 8009d66:	f7ff fefc 	bl	8009b62 <ParseIP>
      break;
 8009d6a:	e030      	b.n	8009dce <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	334c      	adds	r3, #76	; 0x4c
 8009d70:	4619      	mov	r1, r3
 8009d72:	68b8      	ldr	r0, [r7, #8]
 8009d74:	f7ff fef5 	bl	8009b62 <ParseIP>
      break;
 8009d78:	e029      	b.n	8009dce <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	3350      	adds	r3, #80	; 0x50
 8009d7e:	4619      	mov	r1, r3
 8009d80:	68b8      	ldr	r0, [r7, #8]
 8009d82:	f7ff feee 	bl	8009b62 <ParseIP>
      break;
 8009d86:	e022      	b.n	8009dce <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	3354      	adds	r3, #84	; 0x54
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	68b8      	ldr	r0, [r7, #8]
 8009d90:	f7ff fee7 	bl	8009b62 <ParseIP>
      break;
 8009d94:	e01b      	b.n	8009dce <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	3358      	adds	r3, #88	; 0x58
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	68b8      	ldr	r0, [r7, #8]
 8009d9e:	f7ff fee0 	bl	8009b62 <ParseIP>
      break;
 8009da2:	e014      	b.n	8009dce <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8009da4:	2100      	movs	r1, #0
 8009da6:	68b8      	ldr	r0, [r7, #8]
 8009da8:	f7ff fe6c 	bl	8009a84 <ParseNumber>
 8009dac:	4603      	mov	r3, r0
 8009dae:	b2da      	uxtb	r2, r3
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8009db6:	e00a      	b.n	8009dce <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8009db8:	2100      	movs	r1, #0
 8009dba:	68b8      	ldr	r0, [r7, #8]
 8009dbc:	f7ff fe62 	bl	8009a84 <ParseNumber>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	b2da      	uxtb	r2, r3
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8009dca:	e000      	b.n	8009dce <AT_ParseConnSettings+0x12a>

    default:
      break;
 8009dcc:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8009dce:	490c      	ldr	r1, [pc, #48]	; (8009e00 <AT_ParseConnSettings+0x15c>)
 8009dd0:	2000      	movs	r0, #0
 8009dd2:	f009 f901 	bl	8012fd8 <strtok>
 8009dd6:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d007      	beq.n	8009dee <AT_ParseConnSettings+0x14a>
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	3b01      	subs	r3, #1
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	2b2c      	cmp	r3, #44	; 0x2c
 8009de6:	d102      	bne.n	8009dee <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8009de8:	7bfb      	ldrb	r3, [r7, #15]
 8009dea:	3301      	adds	r3, #1
 8009dec:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f47f af66 	bne.w	8009cc2 <AT_ParseConnSettings+0x1e>
    }
  }
}
 8009df6:	bf00      	nop
 8009df8:	bf00      	nop
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	0801423c 	.word	0x0801423c

08009e04 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	3302      	adds	r3, #2
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	2b31      	cmp	r3, #49	; 0x31
 8009e16:	bf0c      	ite	eq
 8009e18:	2301      	moveq	r3, #1
 8009e1a:	2300      	movne	r3, #0
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	461a      	mov	r2, r3
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	701a      	strb	r2, [r3, #0]
}
 8009e24:	bf00      	nop
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8009e30:	b590      	push	{r4, r7, lr}
 8009e32:	b087      	sub	sp, #28
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8009e40:	2300      	movs	r3, #0
 8009e42:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8009e4a:	68b8      	ldr	r0, [r7, #8]
 8009e4c:	f7f6 f9c0 	bl	80001d0 <strlen>
 8009e50:	4603      	mov	r3, r0
 8009e52:	b299      	uxth	r1, r3
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	68b8      	ldr	r0, [r7, #8]
 8009e5e:	47a0      	blx	r4
 8009e60:	4603      	mov	r3, r0
 8009e62:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	dd3e      	ble.n	8009ee8 <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8009e70:	68fa      	ldr	r2, [r7, #12]
 8009e72:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8009e76:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	4798      	blx	r3
 8009e7e:	4603      	mov	r3, r0
 8009e80:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8009e82:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	dd27      	ble.n	8009eda <AT_ExecuteCommand+0xaa>
 8009e8a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009e8e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009e92:	dc22      	bgt.n	8009eda <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8009e94:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009e98:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009e9c:	d105      	bne.n	8009eaa <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8009e9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8009eaa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8009eb6:	490f      	ldr	r1, [pc, #60]	; (8009ef4 <AT_ExecuteCommand+0xc4>)
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f009 f877 	bl	8012fac <strstr>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d001      	beq.n	8009ec8 <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	e010      	b.n	8009eea <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8009ec8:	490b      	ldr	r1, [pc, #44]	; (8009ef8 <AT_ExecuteCommand+0xc8>)
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f009 f86e 	bl	8012fac <strstr>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d001      	beq.n	8009eda <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8009ed6:	2305      	movs	r3, #5
 8009ed8:	e007      	b.n	8009eea <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8009eda:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009ede:	f113 0f04 	cmn.w	r3, #4
 8009ee2:	d101      	bne.n	8009ee8 <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8009ee4:	2306      	movs	r3, #6
 8009ee6:	e000      	b.n	8009eea <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8009ee8:	2304      	movs	r3, #4
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	371c      	adds	r7, #28
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd90      	pop	{r4, r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	08014250 	.word	0x08014250
 8009ef8:	0801425c 	.word	0x0801425c

08009efc <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b086      	sub	sp, #24
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
 8009f08:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8009f12:	2300      	movs	r3, #0
 8009f14:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 8009f16:	68b8      	ldr	r0, [r7, #8]
 8009f18:	f7f6 f95a 	bl	80001d0 <strlen>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8009f20:	8a7b      	ldrh	r3, [r7, #18]
 8009f22:	f003 0301 	and.w	r3, r3, #1
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d001      	beq.n	8009f2e <AT_RequestSendData+0x32>
 8009f2a:	2302      	movs	r3, #2
 8009f2c:	e053      	b.n	8009fd6 <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8009f3a:	8a79      	ldrh	r1, [r7, #18]
 8009f3c:	68b8      	ldr	r0, [r7, #8]
 8009f3e:	4798      	blx	r3
 8009f40:	4603      	mov	r3, r0
 8009f42:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8009f44:	8a3a      	ldrh	r2, [r7, #16]
 8009f46:	8a7b      	ldrh	r3, [r7, #18]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d143      	bne.n	8009fd4 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8009f52:	68fa      	ldr	r2, [r7, #12]
 8009f54:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8009f58:	8879      	ldrh	r1, [r7, #2]
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	4798      	blx	r3
 8009f5e:	4603      	mov	r3, r0
 8009f60:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8009f62:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009f66:	887b      	ldrh	r3, [r7, #2]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d131      	bne.n	8009fd0 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8009f78:	2100      	movs	r1, #0
 8009f7a:	6a38      	ldr	r0, [r7, #32]
 8009f7c:	4798      	blx	r3
 8009f7e:	4603      	mov	r3, r0
 8009f80:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8009f82:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	dd19      	ble.n	8009fbe <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 8009f8a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009f8e:	6a3a      	ldr	r2, [r7, #32]
 8009f90:	4413      	add	r3, r2
 8009f92:	2200      	movs	r2, #0
 8009f94:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8009f96:	4912      	ldr	r1, [pc, #72]	; (8009fe0 <AT_RequestSendData+0xe4>)
 8009f98:	6a38      	ldr	r0, [r7, #32]
 8009f9a:	f009 f807 	bl	8012fac <strstr>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d001      	beq.n	8009fa8 <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	e016      	b.n	8009fd6 <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8009fa8:	490e      	ldr	r1, [pc, #56]	; (8009fe4 <AT_RequestSendData+0xe8>)
 8009faa:	6a38      	ldr	r0, [r7, #32]
 8009fac:	f008 fffe 	bl	8012fac <strstr>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d001      	beq.n	8009fba <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8009fb6:	2305      	movs	r3, #5
 8009fb8:	e00d      	b.n	8009fd6 <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8009fba:	2302      	movs	r3, #2
 8009fbc:	e00b      	b.n	8009fd6 <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8009fbe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009fc2:	f113 0f04 	cmn.w	r3, #4
 8009fc6:	d101      	bne.n	8009fcc <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8009fc8:	2306      	movs	r3, #6
 8009fca:	e004      	b.n	8009fd6 <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 8009fcc:	2302      	movs	r3, #2
 8009fce:	e002      	b.n	8009fd6 <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8009fd0:	2302      	movs	r3, #2
 8009fd2:	e000      	b.n	8009fd6 <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8009fd4:	2304      	movs	r3, #4
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3718      	adds	r7, #24
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	08014250 	.word	0x08014250
 8009fe4:	0801425c 	.word	0x0801425c

08009fe8 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8009fe8:	b590      	push	{r4, r7, lr}
 8009fea:	b087      	sub	sp, #28
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	607a      	str	r2, [r7, #4]
 8009ff4:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009ffc:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800a004:	68b8      	ldr	r0, [r7, #8]
 800a006:	f7f6 f8e3 	bl	80001d0 <strlen>
 800a00a:	4603      	mov	r3, r0
 800a00c:	b299      	uxth	r1, r3
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800a014:	461a      	mov	r2, r3
 800a016:	68b8      	ldr	r0, [r7, #8]
 800a018:	47a0      	blx	r4
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	dd6f      	ble.n	800a100 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800a02c:	2100      	movs	r1, #0
 800a02e:	6938      	ldr	r0, [r7, #16]
 800a030:	4798      	blx	r3
 800a032:	4603      	mov	r3, r0
 800a034:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	2b0d      	cmp	r3, #13
 800a03c:	d104      	bne.n	800a048 <AT_RequestReceiveData+0x60>
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	3301      	adds	r3, #1
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	2b0a      	cmp	r3, #10
 800a046:	d001      	beq.n	800a04c <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 800a048:	2304      	movs	r3, #4
 800a04a:	e05a      	b.n	800a102 <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	3b02      	subs	r3, #2
 800a050:	617b      	str	r3, [r7, #20]
    p+=2;
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	3302      	adds	r3, #2
 800a056:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	2b07      	cmp	r3, #7
 800a05c:	d94a      	bls.n	800a0f4 <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 800a05e:	e002      	b.n	800a066 <AT_RequestReceiveData+0x7e>
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	3b01      	subs	r3, #1
 800a064:	617b      	str	r3, [r7, #20]
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d006      	beq.n	800a07a <AT_RequestReceiveData+0x92>
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	3b01      	subs	r3, #1
 800a070:	693a      	ldr	r2, [r7, #16]
 800a072:	4413      	add	r3, r2
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	2b15      	cmp	r3, #21
 800a078:	d0f2      	beq.n	800a060 <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	693a      	ldr	r2, [r7, #16]
 800a07e:	4413      	add	r3, r2
 800a080:	2200      	movs	r2, #0
 800a082:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	3b08      	subs	r3, #8
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	4413      	add	r3, r2
 800a08c:	491f      	ldr	r1, [pc, #124]	; (800a10c <AT_RequestReceiveData+0x124>)
 800a08e:	4618      	mov	r0, r3
 800a090:	f008 ff8c 	bl	8012fac <strstr>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d016      	beq.n	800a0c8 <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	3b08      	subs	r3, #8
 800a0a0:	b29a      	uxth	r2, r3
 800a0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a4:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 800a0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a8:	881b      	ldrh	r3, [r3, #0]
 800a0aa:	887a      	ldrh	r2, [r7, #2]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d202      	bcs.n	800a0b6 <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 800a0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b2:	887a      	ldrh	r2, [r7, #2]
 800a0b4:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 800a0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b8:	881b      	ldrh	r3, [r3, #0]
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	6939      	ldr	r1, [r7, #16]
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f008 fa0f 	bl	80124e2 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	e01c      	b.n	800a102 <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	3b04      	subs	r3, #4
 800a0cc:	693a      	ldr	r2, [r7, #16]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	2204      	movs	r2, #4
 800a0d2:	490f      	ldr	r1, [pc, #60]	; (800a110 <AT_RequestReceiveData+0x128>)
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f008 f9f4 	bl	80124c2 <memcmp>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d104      	bne.n	800a0ea <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 800a0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800a0e6:	2305      	movs	r3, #5
 800a0e8:	e00b      	b.n	800a102 <AT_RequestReceiveData+0x11a>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 800a0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800a0f0:	2305      	movs	r3, #5
 800a0f2:	e006      	b.n	800a102 <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	f113 0f04 	cmn.w	r3, #4
 800a0fa:	d101      	bne.n	800a100 <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 800a0fc:	2306      	movs	r3, #6
 800a0fe:	e000      	b.n	800a102 <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 800a100:	2304      	movs	r3, #4
}
 800a102:	4618      	mov	r0, r3
 800a104:	371c      	adds	r7, #28
 800a106:	46bd      	mov	sp, r7
 800a108:	bd90      	pop	{r4, r7, pc}
 800a10a:	bf00      	nop
 800a10c:	08014250 	.word	0x08014250
 800a110:	08014264 	.word	0x08014264

0800a114 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800a11c:	2302      	movs	r3, #2
 800a11e:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f247 5230 	movw	r2, #30000	; 0x7530
 800a126:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a130:	2000      	movs	r0, #0
 800a132:	4798      	blx	r3
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d113      	bne.n	800a162 <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a140:	461a      	mov	r2, r3
 800a142:	490a      	ldr	r1, [pc, #40]	; (800a16c <ES_WIFI_Init+0x58>)
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f7ff fe73 	bl	8009e30 <AT_ExecuteCommand>
 800a14a:	4603      	mov	r3, r0
 800a14c:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 800a14e:	7bfb      	ldrb	r3, [r7, #15]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d106      	bne.n	800a162 <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a15a:	4619      	mov	r1, r3
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f7ff fd2b 	bl	8009bb8 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 800a162:	7bfb      	ldrb	r3, [r7, #15]
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	0801426c 	.word	0x0801426c

0800a170 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]
 800a17c:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00b      	beq.n	800a19c <ES_WIFI_RegisterBusIO+0x2c>
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d008      	beq.n	800a19c <ES_WIFI_RegisterBusIO+0x2c>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d005      	beq.n	800a19c <ES_WIFI_RegisterBusIO+0x2c>
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d002      	beq.n	800a19c <ES_WIFI_RegisterBusIO+0x2c>
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d101      	bne.n	800a1a0 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 800a19c:	2302      	movs	r3, #2
 800a19e:	e014      	b.n	800a1ca <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	68ba      	ldr	r2, [r7, #8]
 800a1a4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	69ba      	ldr	r2, [r7, #24]
 800a1b4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	69fa      	ldr	r2, [r7, #28]
 800a1bc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	683a      	ldr	r2, [r7, #0]
 800a1c4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3714      	adds	r7, #20
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
	...

0800a1d8 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	607a      	str	r2, [r7, #4]
 800a1e4:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a1ec:	68ba      	ldr	r2, [r7, #8]
 800a1ee:	4932      	ldr	r1, [pc, #200]	; (800a2b8 <ES_WIFI_Connect+0xe0>)
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f008 fe65 	bl	8012ec0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a202:	461a      	mov	r2, r3
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f7ff fe13 	bl	8009e30 <AT_ExecuteCommand>
 800a20a:	4603      	mov	r3, r0
 800a20c:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800a20e:	7dfb      	ldrb	r3, [r7, #23]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d14b      	bne.n	800a2ac <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	4927      	ldr	r1, [pc, #156]	; (800a2bc <ES_WIFI_Connect+0xe4>)
 800a21e:	4618      	mov	r0, r3
 800a220:	f008 fe4e 	bl	8012ec0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a230:	461a      	mov	r2, r3
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	f7ff fdfc 	bl	8009e30 <AT_ExecuteCommand>
 800a238:	4603      	mov	r3, r0
 800a23a:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 800a23c:	7dfb      	ldrb	r3, [r7, #23]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d134      	bne.n	800a2ac <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	78fa      	ldrb	r2, [r7, #3]
 800a246:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a250:	78fa      	ldrb	r2, [r7, #3]
 800a252:	491b      	ldr	r1, [pc, #108]	; (800a2c0 <ES_WIFI_Connect+0xe8>)
 800a254:	4618      	mov	r0, r3
 800a256:	f008 fe33 	bl	8012ec0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a266:	461a      	mov	r2, r3
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f7ff fde1 	bl	8009e30 <AT_ExecuteCommand>
 800a26e:	4603      	mov	r3, r0
 800a270:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800a272:	7dfb      	ldrb	r3, [r7, #23]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d119      	bne.n	800a2ac <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a27e:	4911      	ldr	r1, [pc, #68]	; (800a2c4 <ES_WIFI_Connect+0xec>)
 800a280:	4618      	mov	r0, r3
 800a282:	f008 fe1d 	bl	8012ec0 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a292:	461a      	mov	r2, r3
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	f7ff fdcb 	bl	8009e30 <AT_ExecuteCommand>
 800a29a:	4603      	mov	r3, r0
 800a29c:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 800a29e:	7dfb      	ldrb	r3, [r7, #23]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d103      	bne.n	800a2ac <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 800a2ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3718      	adds	r7, #24
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	08014284 	.word	0x08014284
 800a2bc:	0801428c 	.word	0x0801428c
 800a2c0:	08014294 	.word	0x08014294
 800a2c4:	0801429c 	.word	0x0801429c

0800a2c8 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a2d6:	4911      	ldr	r1, [pc, #68]	; (800a31c <ES_WIFI_IsConnected+0x54>)
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f008 fdf1 	bl	8012ec0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f7ff fd9f 	bl	8009e30 <AT_ExecuteCommand>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800a2f6:	7bfb      	ldrb	r3, [r7, #15]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d108      	bne.n	800a30e <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	33d2      	adds	r3, #210	; 0xd2
 800a306:	4619      	mov	r1, r3
 800a308:	4610      	mov	r0, r2
 800a30a:	f7ff fd7b 	bl	8009e04 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 800a314:	4618      	mov	r0, r3
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	080142a0 	.word	0x080142a0

0800a320 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a32e:	4910      	ldr	r1, [pc, #64]	; (800a370 <ES_WIFI_GetNetworkSettings+0x50>)
 800a330:	4618      	mov	r0, r3
 800a332:	f008 fdc5 	bl	8012ec0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a342:	461a      	mov	r2, r3
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f7ff fd73 	bl	8009e30 <AT_ExecuteCommand>
 800a34a:	4603      	mov	r3, r0
 800a34c:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800a34e:	7bfb      	ldrb	r3, [r7, #15]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d108      	bne.n	800a366 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	338d      	adds	r3, #141	; 0x8d
 800a35e:	4619      	mov	r1, r3
 800a360:	4610      	mov	r0, r2
 800a362:	f7ff fc9f 	bl	8009ca4 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 800a366:	7bfb      	ldrb	r3, [r7, #15]
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	080142a8 	.word	0x080142a8

0800a374 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a384:	4912      	ldr	r1, [pc, #72]	; (800a3d0 <ES_WIFI_GetMACAddress+0x5c>)
 800a386:	4618      	mov	r0, r3
 800a388:	f008 fd9a 	bl	8012ec0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a398:	461a      	mov	r2, r3
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f7ff fd48 	bl	8009e30 <AT_ExecuteCommand>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800a3a4:	7bfb      	ldrb	r3, [r7, #15]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d10c      	bne.n	800a3c4 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a3b0:	3302      	adds	r3, #2
 800a3b2:	4908      	ldr	r1, [pc, #32]	; (800a3d4 <ES_WIFI_GetMACAddress+0x60>)
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f008 fe0f 	bl	8012fd8 <strtok>
 800a3ba:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 800a3bc:	6839      	ldr	r1, [r7, #0]
 800a3be:	68b8      	ldr	r0, [r7, #8]
 800a3c0:	f7ff fba4 	bl	8009b0c <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 800a3c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	080142f8 	.word	0x080142f8
 800a3d4:	080142fc 	.word	0x080142fc

0800a3d8 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 800a3d8:	b590      	push	{r4, r7, lr}
 800a3da:	b087      	sub	sp, #28
 800a3dc:	af02      	add	r7, sp, #8
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d003      	beq.n	800a3f6 <ES_WIFI_StartClientConnection+0x1e>
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	2b03      	cmp	r3, #3
 800a3f4:	d105      	bne.n	800a402 <ES_WIFI_StartClientConnection+0x2a>
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	885b      	ldrh	r3, [r3, #2]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d101      	bne.n	800a402 <ES_WIFI_StartClientConnection+0x2a>
 800a3fe:	2302      	movs	r3, #2
 800a400:	e0c1      	b.n	800a586 <ES_WIFI_StartClientConnection+0x1ae>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	785b      	ldrb	r3, [r3, #1]
 800a40c:	461a      	mov	r2, r3
 800a40e:	4960      	ldr	r1, [pc, #384]	; (800a590 <ES_WIFI_StartClientConnection+0x1b8>)
 800a410:	f008 fd56 	bl	8012ec0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a420:	461a      	mov	r2, r3
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f7ff fd04 	bl	8009e30 <AT_ExecuteCommand>
 800a428:	4603      	mov	r3, r0
 800a42a:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 800a42c:	7bfb      	ldrb	r3, [r7, #15]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d114      	bne.n	800a45c <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	461a      	mov	r2, r3
 800a43e:	4955      	ldr	r1, [pc, #340]	; (800a594 <ES_WIFI_StartClientConnection+0x1bc>)
 800a440:	f008 fd3e 	bl	8012ec0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a450:	461a      	mov	r2, r3
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f7ff fcec 	bl	8009e30 <AT_ExecuteCommand>
 800a458:	4603      	mov	r3, r0
 800a45a:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800a45c:	7bfb      	ldrb	r3, [r7, #15]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d114      	bne.n	800a48c <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	889b      	ldrh	r3, [r3, #4]
 800a46c:	461a      	mov	r2, r3
 800a46e:	494a      	ldr	r1, [pc, #296]	; (800a598 <ES_WIFI_StartClientConnection+0x1c0>)
 800a470:	f008 fd26 	bl	8012ec0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a480:	461a      	mov	r2, r3
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f7ff fcd4 	bl	8009e30 <AT_ExecuteCommand>
 800a488:	4603      	mov	r3, r0
 800a48a:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 800a48c:	7bfb      	ldrb	r3, [r7, #15]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d11c      	bne.n	800a4cc <ES_WIFI_StartClientConnection+0xf4>
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d003      	beq.n	800a4a2 <ES_WIFI_StartClientConnection+0xca>
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	2b03      	cmp	r3, #3
 800a4a0:	d114      	bne.n	800a4cc <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	885b      	ldrh	r3, [r3, #2]
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	493b      	ldr	r1, [pc, #236]	; (800a59c <ES_WIFI_StartClientConnection+0x1c4>)
 800a4b0:	f008 fd06 	bl	8012ec0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f7ff fcb4 	bl	8009e30 <AT_ExecuteCommand>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 800a4cc:	7bfb      	ldrb	r3, [r7, #15]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d128      	bne.n	800a524 <ES_WIFI_StartClientConnection+0x14c>
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d003      	beq.n	800a4e2 <ES_WIFI_StartClientConnection+0x10a>
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	2b03      	cmp	r3, #3
 800a4e0:	d120      	bne.n	800a524 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	799b      	ldrb	r3, [r3, #6]
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	79db      	ldrb	r3, [r3, #7]
 800a4f2:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800a4f8:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800a4fe:	9301      	str	r3, [sp, #4]
 800a500:	9200      	str	r2, [sp, #0]
 800a502:	4623      	mov	r3, r4
 800a504:	460a      	mov	r2, r1
 800a506:	4926      	ldr	r1, [pc, #152]	; (800a5a0 <ES_WIFI_StartClientConnection+0x1c8>)
 800a508:	f008 fcda 	bl	8012ec0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a518:	461a      	mov	r2, r3
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f7ff fc88 	bl	8009e30 <AT_ExecuteCommand>
 800a520:	4603      	mov	r3, r0
 800a522:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 800a524:	7bfb      	ldrb	r3, [r7, #15]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d116      	bne.n	800a558 <ES_WIFI_StartClientConnection+0x180>
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	2b03      	cmp	r3, #3
 800a530:	d112      	bne.n	800a558 <ES_WIFI_StartClientConnection+0x180>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a538:	491a      	ldr	r1, [pc, #104]	; (800a5a4 <ES_WIFI_StartClientConnection+0x1cc>)
 800a53a:	4618      	mov	r0, r3
 800a53c:	f008 fcc0 	bl	8012ec0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a54c:	461a      	mov	r2, r3
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f7ff fc6e 	bl	8009e30 <AT_ExecuteCommand>
 800a554:	4603      	mov	r3, r0
 800a556:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800a558:	7bfb      	ldrb	r3, [r7, #15]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d112      	bne.n	800a584 <ES_WIFI_StartClientConnection+0x1ac>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a564:	4910      	ldr	r1, [pc, #64]	; (800a5a8 <ES_WIFI_StartClientConnection+0x1d0>)
 800a566:	4618      	mov	r0, r3
 800a568:	f008 fcaa 	bl	8012ec0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a578:	461a      	mov	r2, r3
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f7ff fc58 	bl	8009e30 <AT_ExecuteCommand>
 800a580:	4603      	mov	r3, r0
 800a582:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 800a584:	7bfb      	ldrb	r3, [r7, #15]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3714      	adds	r7, #20
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd90      	pop	{r4, r7, pc}
 800a58e:	bf00      	nop
 800a590:	08014360 	.word	0x08014360
 800a594:	08014368 	.word	0x08014368
 800a598:	08014370 	.word	0x08014370
 800a59c:	08014378 	.word	0x08014378
 800a5a0:	08014380 	.word	0x08014380
 800a5a4:	08014390 	.word	0x08014390
 800a5a8:	08014398 	.word	0x08014398

0800a5ac <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b088      	sub	sp, #32
 800a5b0:	af02      	add	r7, sp, #8
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	607a      	str	r2, [r7, #4]
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	72fb      	strb	r3, [r7, #11]
 800a5bc:	4613      	mov	r3, r2
 800a5be:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d102      	bne.n	800a5d0 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	617b      	str	r3, [r7, #20]
 800a5ce:	e001      	b.n	800a5d4 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800a5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d2:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 800a5d4:	893b      	ldrh	r3, [r7, #8]
 800a5d6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800a5da:	d302      	bcc.n	800a5e2 <ES_WIFI_SendData+0x36>
 800a5dc:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800a5e0:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 800a5e2:	6a3b      	ldr	r3, [r7, #32]
 800a5e4:	893a      	ldrh	r2, [r7, #8]
 800a5e6:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a5ee:	7afa      	ldrb	r2, [r7, #11]
 800a5f0:	4942      	ldr	r1, [pc, #264]	; (800a6fc <ES_WIFI_SendData+0x150>)
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f008 fc64 	bl	8012ec0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a604:	461a      	mov	r2, r3
 800a606:	68f8      	ldr	r0, [r7, #12]
 800a608:	f7ff fc12 	bl	8009e30 <AT_ExecuteCommand>
 800a60c:	4603      	mov	r3, r0
 800a60e:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 800a610:	7cfb      	ldrb	r3, [r7, #19]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d15e      	bne.n	800a6d4 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a61c:	697a      	ldr	r2, [r7, #20]
 800a61e:	4938      	ldr	r1, [pc, #224]	; (800a700 <ES_WIFI_SendData+0x154>)
 800a620:	4618      	mov	r0, r3
 800a622:	f008 fc4d 	bl	8012ec0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a632:	461a      	mov	r2, r3
 800a634:	68f8      	ldr	r0, [r7, #12]
 800a636:	f7ff fbfb 	bl	8009e30 <AT_ExecuteCommand>
 800a63a:	4603      	mov	r3, r0
 800a63c:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800a63e:	7cfb      	ldrb	r3, [r7, #19]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d13d      	bne.n	800a6c0 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a64a:	893a      	ldrh	r2, [r7, #8]
 800a64c:	492d      	ldr	r1, [pc, #180]	; (800a704 <ES_WIFI_SendData+0x158>)
 800a64e:	4618      	mov	r0, r3
 800a650:	f008 fc36 	bl	8012ec0 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a660:	893a      	ldrh	r2, [r7, #8]
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	4613      	mov	r3, r2
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	68f8      	ldr	r0, [r7, #12]
 800a66a:	f7ff fc47 	bl	8009efc <AT_RequestSendData>
 800a66e:	4603      	mov	r3, r0
 800a670:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 800a672:	7cfb      	ldrb	r3, [r7, #19]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d119      	bne.n	800a6ac <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a67e:	4922      	ldr	r1, [pc, #136]	; (800a708 <ES_WIFI_SendData+0x15c>)
 800a680:	4618      	mov	r0, r3
 800a682:	f008 fc93 	bl	8012fac <strstr>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d02c      	beq.n	800a6e6 <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 800a68c:	f640 0267 	movw	r2, #2151	; 0x867
 800a690:	491e      	ldr	r1, [pc, #120]	; (800a70c <ES_WIFI_SendData+0x160>)
 800a692:	481f      	ldr	r0, [pc, #124]	; (800a710 <ES_WIFI_SendData+0x164>)
 800a694:	f008 fad8 	bl	8012c48 <iprintf>
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a69e:	4619      	mov	r1, r3
 800a6a0:	481c      	ldr	r0, [pc, #112]	; (800a714 <ES_WIFI_SendData+0x168>)
 800a6a2:	f008 fad1 	bl	8012c48 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 800a6a6:	2302      	movs	r3, #2
 800a6a8:	74fb      	strb	r3, [r7, #19]
 800a6aa:	e01c      	b.n	800a6e6 <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 800a6ac:	f640 026d 	movw	r2, #2157	; 0x86d
 800a6b0:	4916      	ldr	r1, [pc, #88]	; (800a70c <ES_WIFI_SendData+0x160>)
 800a6b2:	4817      	ldr	r0, [pc, #92]	; (800a710 <ES_WIFI_SendData+0x164>)
 800a6b4:	f008 fac8 	bl	8012c48 <iprintf>
 800a6b8:	4817      	ldr	r0, [pc, #92]	; (800a718 <ES_WIFI_SendData+0x16c>)
 800a6ba:	f008 fb4b 	bl	8012d54 <puts>
 800a6be:	e012      	b.n	800a6e6 <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 800a6c0:	f640 0272 	movw	r2, #2162	; 0x872
 800a6c4:	4911      	ldr	r1, [pc, #68]	; (800a70c <ES_WIFI_SendData+0x160>)
 800a6c6:	4812      	ldr	r0, [pc, #72]	; (800a710 <ES_WIFI_SendData+0x164>)
 800a6c8:	f008 fabe 	bl	8012c48 <iprintf>
 800a6cc:	4813      	ldr	r0, [pc, #76]	; (800a71c <ES_WIFI_SendData+0x170>)
 800a6ce:	f008 fb41 	bl	8012d54 <puts>
 800a6d2:	e008      	b.n	800a6e6 <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 800a6d4:	f640 0277 	movw	r2, #2167	; 0x877
 800a6d8:	490c      	ldr	r1, [pc, #48]	; (800a70c <ES_WIFI_SendData+0x160>)
 800a6da:	480d      	ldr	r0, [pc, #52]	; (800a710 <ES_WIFI_SendData+0x164>)
 800a6dc:	f008 fab4 	bl	8012c48 <iprintf>
 800a6e0:	480f      	ldr	r0, [pc, #60]	; (800a720 <ES_WIFI_SendData+0x174>)
 800a6e2:	f008 fb37 	bl	8012d54 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 800a6e6:	7cfb      	ldrb	r3, [r7, #19]
 800a6e8:	2b02      	cmp	r3, #2
 800a6ea:	d102      	bne.n	800a6f2 <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 800a6ec:	6a3b      	ldr	r3, [r7, #32]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 800a6f2:	7cfb      	ldrb	r3, [r7, #19]
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3718      	adds	r7, #24
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	08014360 	.word	0x08014360
 800a700:	08014524 	.word	0x08014524
 800a704:	0801452c 	.word	0x0801452c
 800a708:	08014538 	.word	0x08014538
 800a70c:	080143f0 	.word	0x080143f0
 800a710:	08014418 	.word	0x08014418
 800a714:	08014540 	.word	0x08014540
 800a718:	0801455c 	.word	0x0801455c
 800a71c:	08014578 	.word	0x08014578
 800a720:	0801458c 	.word	0x0801458c

0800a724 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b088      	sub	sp, #32
 800a728:	af02      	add	r7, sp, #8
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	607a      	str	r2, [r7, #4]
 800a72e:	461a      	mov	r2, r3
 800a730:	460b      	mov	r3, r1
 800a732:	72fb      	strb	r3, [r7, #11]
 800a734:	4613      	mov	r3, r2
 800a736:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800a738:	2302      	movs	r3, #2
 800a73a:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800a73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d102      	bne.n	800a748 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 800a742:	2301      	movs	r3, #1
 800a744:	617b      	str	r3, [r7, #20]
 800a746:	e001      	b.n	800a74c <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800a748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74a:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 800a74c:	893b      	ldrh	r3, [r7, #8]
 800a74e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800a752:	f200 808b 	bhi.w	800a86c <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a75c:	7afa      	ldrb	r2, [r7, #11]
 800a75e:	4946      	ldr	r1, [pc, #280]	; (800a878 <ES_WIFI_ReceiveData+0x154>)
 800a760:	4618      	mov	r0, r3
 800a762:	f008 fbad 	bl	8012ec0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a772:	461a      	mov	r2, r3
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f7ff fb5b 	bl	8009e30 <AT_ExecuteCommand>
 800a77a:	4603      	mov	r3, r0
 800a77c:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800a77e:	7cfb      	ldrb	r3, [r7, #19]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d165      	bne.n	800a850 <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a78a:	893a      	ldrh	r2, [r7, #8]
 800a78c:	493b      	ldr	r1, [pc, #236]	; (800a87c <ES_WIFI_ReceiveData+0x158>)
 800a78e:	4618      	mov	r0, r3
 800a790:	f008 fb96 	bl	8012ec0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	f7ff fb44 	bl	8009e30 <AT_ExecuteCommand>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 800a7ac:	7cfb      	ldrb	r3, [r7, #19]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d141      	bne.n	800a836 <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a7b8:	697a      	ldr	r2, [r7, #20]
 800a7ba:	4931      	ldr	r1, [pc, #196]	; (800a880 <ES_WIFI_ReceiveData+0x15c>)
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f008 fb7f 	bl	8012ec0 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f7ff fb2d 	bl	8009e30 <AT_ExecuteCommand>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 800a7da:	7cfb      	ldrb	r3, [r7, #19]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d120      	bne.n	800a822 <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a7e6:	4927      	ldr	r1, [pc, #156]	; (800a884 <ES_WIFI_ReceiveData+0x160>)
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f008 fb69 	bl	8012ec0 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a7f4:	893a      	ldrh	r2, [r7, #8]
 800a7f6:	6a3b      	ldr	r3, [r7, #32]
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	4613      	mov	r3, r2
 800a7fc:	687a      	ldr	r2, [r7, #4]
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f7ff fbf2 	bl	8009fe8 <AT_RequestReceiveData>
 800a804:	4603      	mov	r3, r0
 800a806:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 800a808:	7cfb      	ldrb	r3, [r7, #19]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d02e      	beq.n	800a86c <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 800a80e:	f640 1208 	movw	r2, #2312	; 0x908
 800a812:	491d      	ldr	r1, [pc, #116]	; (800a888 <ES_WIFI_ReceiveData+0x164>)
 800a814:	481d      	ldr	r0, [pc, #116]	; (800a88c <ES_WIFI_ReceiveData+0x168>)
 800a816:	f008 fa17 	bl	8012c48 <iprintf>
 800a81a:	481d      	ldr	r0, [pc, #116]	; (800a890 <ES_WIFI_ReceiveData+0x16c>)
 800a81c:	f008 fa9a 	bl	8012d54 <puts>
 800a820:	e024      	b.n	800a86c <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 800a822:	f640 120d 	movw	r2, #2317	; 0x90d
 800a826:	4918      	ldr	r1, [pc, #96]	; (800a888 <ES_WIFI_ReceiveData+0x164>)
 800a828:	4818      	ldr	r0, [pc, #96]	; (800a88c <ES_WIFI_ReceiveData+0x168>)
 800a82a:	f008 fa0d 	bl	8012c48 <iprintf>
 800a82e:	4819      	ldr	r0, [pc, #100]	; (800a894 <ES_WIFI_ReceiveData+0x170>)
 800a830:	f008 fa90 	bl	8012d54 <puts>
 800a834:	e01a      	b.n	800a86c <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
 800a836:	f640 1212 	movw	r2, #2322	; 0x912
 800a83a:	4913      	ldr	r1, [pc, #76]	; (800a888 <ES_WIFI_ReceiveData+0x164>)
 800a83c:	4813      	ldr	r0, [pc, #76]	; (800a88c <ES_WIFI_ReceiveData+0x168>)
 800a83e:	f008 fa03 	bl	8012c48 <iprintf>
 800a842:	4815      	ldr	r0, [pc, #84]	; (800a898 <ES_WIFI_ReceiveData+0x174>)
 800a844:	f008 fa86 	bl	8012d54 <puts>
        *Receivedlen = 0;
 800a848:	6a3b      	ldr	r3, [r7, #32]
 800a84a:	2200      	movs	r2, #0
 800a84c:	801a      	strh	r2, [r3, #0]
 800a84e:	e00d      	b.n	800a86c <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
 800a850:	f640 1218 	movw	r2, #2328	; 0x918
 800a854:	490c      	ldr	r1, [pc, #48]	; (800a888 <ES_WIFI_ReceiveData+0x164>)
 800a856:	480d      	ldr	r0, [pc, #52]	; (800a88c <ES_WIFI_ReceiveData+0x168>)
 800a858:	f008 f9f6 	bl	8012c48 <iprintf>
 800a85c:	480f      	ldr	r0, [pc, #60]	; (800a89c <ES_WIFI_ReceiveData+0x178>)
 800a85e:	f008 fa79 	bl	8012d54 <puts>
      issue15++;
 800a862:	4b0f      	ldr	r3, [pc, #60]	; (800a8a0 <ES_WIFI_ReceiveData+0x17c>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	3301      	adds	r3, #1
 800a868:	4a0d      	ldr	r2, [pc, #52]	; (800a8a0 <ES_WIFI_ReceiveData+0x17c>)
 800a86a:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 800a86c:	7cfb      	ldrb	r3, [r7, #19]
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3718      	adds	r7, #24
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	08014360 	.word	0x08014360
 800a87c:	080145b0 	.word	0x080145b0
 800a880:	080145b8 	.word	0x080145b8
 800a884:	080145c0 	.word	0x080145c0
 800a888:	080143f0 	.word	0x080143f0
 800a88c:	08014418 	.word	0x08014418
 800a890:	080145c4 	.word	0x080145c4
 800a894:	080145e4 	.word	0x080145e4
 800a898:	080145fc 	.word	0x080145fc
 800a89c:	0801461c 	.word	0x0801461c
 800a8a0:	20000c90 	.word	0x20000c90

0800a8a4 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b08c      	sub	sp, #48	; 0x30
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 800a8ac:	4b56      	ldr	r3, [pc, #344]	; (800aa08 <SPI_WIFI_MspInit+0x164>)
 800a8ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8b0:	4a55      	ldr	r2, [pc, #340]	; (800aa08 <SPI_WIFI_MspInit+0x164>)
 800a8b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8b6:	6593      	str	r3, [r2, #88]	; 0x58
 800a8b8:	4b53      	ldr	r3, [pc, #332]	; (800aa08 <SPI_WIFI_MspInit+0x164>)
 800a8ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8c0:	61bb      	str	r3, [r7, #24]
 800a8c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a8c4:	4b50      	ldr	r3, [pc, #320]	; (800aa08 <SPI_WIFI_MspInit+0x164>)
 800a8c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8c8:	4a4f      	ldr	r2, [pc, #316]	; (800aa08 <SPI_WIFI_MspInit+0x164>)
 800a8ca:	f043 0302 	orr.w	r3, r3, #2
 800a8ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a8d0:	4b4d      	ldr	r3, [pc, #308]	; (800aa08 <SPI_WIFI_MspInit+0x164>)
 800a8d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8d4:	f003 0302 	and.w	r3, r3, #2
 800a8d8:	617b      	str	r3, [r7, #20]
 800a8da:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a8dc:	4b4a      	ldr	r3, [pc, #296]	; (800aa08 <SPI_WIFI_MspInit+0x164>)
 800a8de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8e0:	4a49      	ldr	r2, [pc, #292]	; (800aa08 <SPI_WIFI_MspInit+0x164>)
 800a8e2:	f043 0304 	orr.w	r3, r3, #4
 800a8e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a8e8:	4b47      	ldr	r3, [pc, #284]	; (800aa08 <SPI_WIFI_MspInit+0x164>)
 800a8ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8ec:	f003 0304 	and.w	r3, r3, #4
 800a8f0:	613b      	str	r3, [r7, #16]
 800a8f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a8f4:	4b44      	ldr	r3, [pc, #272]	; (800aa08 <SPI_WIFI_MspInit+0x164>)
 800a8f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8f8:	4a43      	ldr	r2, [pc, #268]	; (800aa08 <SPI_WIFI_MspInit+0x164>)
 800a8fa:	f043 0310 	orr.w	r3, r3, #16
 800a8fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a900:	4b41      	ldr	r3, [pc, #260]	; (800aa08 <SPI_WIFI_MspInit+0x164>)
 800a902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a904:	f003 0310 	and.w	r3, r3, #16
 800a908:	60fb      	str	r3, [r7, #12]
 800a90a:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800a90c:	2200      	movs	r2, #0
 800a90e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a912:	483e      	ldr	r0, [pc, #248]	; (800aa0c <SPI_WIFI_MspInit+0x168>)
 800a914:	f7f8 fd18 	bl	8003348 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 800a918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a91c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800a91e:	2301      	movs	r3, #1
 800a920:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a922:	2300      	movs	r3, #0
 800a924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800a926:	2300      	movs	r3, #0
 800a928:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800a92a:	f107 031c 	add.w	r3, r7, #28
 800a92e:	4619      	mov	r1, r3
 800a930:	4836      	ldr	r0, [pc, #216]	; (800aa0c <SPI_WIFI_MspInit+0x168>)
 800a932:	f7f8 fa53 	bl	8002ddc <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800a936:	2302      	movs	r3, #2
 800a938:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800a93a:	4b35      	ldr	r3, [pc, #212]	; (800aa10 <SPI_WIFI_MspInit+0x16c>)
 800a93c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a93e:	2300      	movs	r3, #0
 800a940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800a942:	2300      	movs	r3, #0
 800a944:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800a946:	f107 031c 	add.w	r3, r7, #28
 800a94a:	4619      	mov	r1, r3
 800a94c:	4831      	ldr	r0, [pc, #196]	; (800aa14 <SPI_WIFI_MspInit+0x170>)
 800a94e:	f7f8 fa45 	bl	8002ddc <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 800a952:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a956:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800a958:	2301      	movs	r3, #1
 800a95a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a95c:	2300      	movs	r3, #0
 800a95e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800a960:	2300      	movs	r3, #0
 800a962:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 800a964:	2300      	movs	r3, #0
 800a966:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800a968:	f107 031c 	add.w	r3, r7, #28
 800a96c:	4619      	mov	r1, r3
 800a96e:	4829      	ldr	r0, [pc, #164]	; (800aa14 <SPI_WIFI_MspInit+0x170>)
 800a970:	f7f8 fa34 	bl	8002ddc <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 800a974:	2201      	movs	r2, #1
 800a976:	2101      	movs	r1, #1
 800a978:	4826      	ldr	r0, [pc, #152]	; (800aa14 <SPI_WIFI_MspInit+0x170>)
 800a97a:	f7f8 fce5 	bl	8003348 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 800a97e:	2301      	movs	r3, #1
 800a980:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800a982:	2301      	movs	r3, #1
 800a984:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a986:	2300      	movs	r3, #0
 800a988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800a98a:	2301      	movs	r3, #1
 800a98c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 800a98e:	f107 031c 	add.w	r3, r7, #28
 800a992:	4619      	mov	r1, r3
 800a994:	481f      	ldr	r0, [pc, #124]	; (800aa14 <SPI_WIFI_MspInit+0x170>)
 800a996:	f7f8 fa21 	bl	8002ddc <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 800a99a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a99e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800a9a0:	2302      	movs	r3, #2
 800a9a2:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800a9ac:	2306      	movs	r3, #6
 800a9ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800a9b0:	f107 031c 	add.w	r3, r7, #28
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	4818      	ldr	r0, [pc, #96]	; (800aa18 <SPI_WIFI_MspInit+0x174>)
 800a9b8:	f7f8 fa10 	bl	8002ddc <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 800a9bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9c0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800a9c2:	2302      	movs	r3, #2
 800a9c4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800a9ce:	2306      	movs	r3, #6
 800a9d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800a9d2:	f107 031c 	add.w	r3, r7, #28
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	480f      	ldr	r0, [pc, #60]	; (800aa18 <SPI_WIFI_MspInit+0x174>)
 800a9da:	f7f8 f9ff 	bl	8002ddc <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 800a9de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a9e2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800a9e4:	2302      	movs	r3, #2
 800a9e6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800a9f0:	2306      	movs	r3, #6
 800a9f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800a9f4:	f107 031c 	add.w	r3, r7, #28
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	4807      	ldr	r0, [pc, #28]	; (800aa18 <SPI_WIFI_MspInit+0x174>)
 800a9fc:	f7f8 f9ee 	bl	8002ddc <HAL_GPIO_Init>
}
 800aa00:	bf00      	nop
 800aa02:	3730      	adds	r7, #48	; 0x30
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	40021000 	.word	0x40021000
 800aa0c:	48000400 	.word	0x48000400
 800aa10:	10110000 	.word	0x10110000
 800aa14:	48001000 	.word	0x48001000
 800aa18:	48000800 	.word	0x48000800

0800aa1c <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	4603      	mov	r3, r0
 800aa24:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 800aa26:	2300      	movs	r3, #0
 800aa28:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 800aa2a:	88fb      	ldrh	r3, [r7, #6]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d145      	bne.n	800aabc <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 800aa30:	4b27      	ldr	r3, [pc, #156]	; (800aad0 <SPI_WIFI_Init+0xb4>)
 800aa32:	4a28      	ldr	r2, [pc, #160]	; (800aad4 <SPI_WIFI_Init+0xb8>)
 800aa34:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 800aa36:	4826      	ldr	r0, [pc, #152]	; (800aad0 <SPI_WIFI_Init+0xb4>)
 800aa38:	f7ff ff34 	bl	800a8a4 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 800aa3c:	4b24      	ldr	r3, [pc, #144]	; (800aad0 <SPI_WIFI_Init+0xb4>)
 800aa3e:	f44f 7282 	mov.w	r2, #260	; 0x104
 800aa42:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 800aa44:	4b22      	ldr	r3, [pc, #136]	; (800aad0 <SPI_WIFI_Init+0xb4>)
 800aa46:	2200      	movs	r2, #0
 800aa48:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800aa4a:	4b21      	ldr	r3, [pc, #132]	; (800aad0 <SPI_WIFI_Init+0xb4>)
 800aa4c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800aa50:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800aa52:	4b1f      	ldr	r3, [pc, #124]	; (800aad0 <SPI_WIFI_Init+0xb4>)
 800aa54:	2200      	movs	r2, #0
 800aa56:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 800aa58:	4b1d      	ldr	r3, [pc, #116]	; (800aad0 <SPI_WIFI_Init+0xb4>)
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 800aa5e:	4b1c      	ldr	r3, [pc, #112]	; (800aad0 <SPI_WIFI_Init+0xb4>)
 800aa60:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa64:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 800aa66:	4b1a      	ldr	r3, [pc, #104]	; (800aad0 <SPI_WIFI_Init+0xb4>)
 800aa68:	2210      	movs	r2, #16
 800aa6a:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800aa6c:	4b18      	ldr	r3, [pc, #96]	; (800aad0 <SPI_WIFI_Init+0xb4>)
 800aa6e:	2200      	movs	r2, #0
 800aa70:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 800aa72:	4b17      	ldr	r3, [pc, #92]	; (800aad0 <SPI_WIFI_Init+0xb4>)
 800aa74:	2200      	movs	r2, #0
 800aa76:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 800aa78:	4b15      	ldr	r3, [pc, #84]	; (800aad0 <SPI_WIFI_Init+0xb4>)
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 800aa7e:	4b14      	ldr	r3, [pc, #80]	; (800aad0 <SPI_WIFI_Init+0xb4>)
 800aa80:	2200      	movs	r2, #0
 800aa82:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 800aa84:	4812      	ldr	r0, [pc, #72]	; (800aad0 <SPI_WIFI_Init+0xb4>)
 800aa86:	f7fb fabd 	bl	8006004 <HAL_SPI_Init>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d002      	beq.n	800aa96 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 800aa90:	f04f 33ff 	mov.w	r3, #4294967295
 800aa94:	e018      	b.n	800aac8 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 800aa96:	2200      	movs	r2, #0
 800aa98:	2100      	movs	r1, #0
 800aa9a:	2007      	movs	r0, #7
 800aa9c:	f7f7 ffda 	bl	8002a54 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 800aaa0:	2007      	movs	r0, #7
 800aaa2:	f7f7 fff3 	bl	8002a8c <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	2100      	movs	r1, #0
 800aaaa:	2033      	movs	r0, #51	; 0x33
 800aaac:	f7f7 ffd2 	bl	8002a54 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 800aab0:	2033      	movs	r0, #51	; 0x33
 800aab2:	f7f7 ffeb 	bl	8002a8c <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 800aab6:	200a      	movs	r0, #10
 800aab8:	f000 f9fe 	bl	800aeb8 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 800aabc:	f000 f80c 	bl	800aad8 <SPI_WIFI_ResetModule>
 800aac0:	4603      	mov	r3, r0
 800aac2:	73fb      	strb	r3, [r7, #15]

  return rc;
 800aac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3710      	adds	r7, #16
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	20000c94 	.word	0x20000c94
 800aad4:	40003c00 	.word	0x40003c00

0800aad8 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800aade:	f7f7 fead 	bl	800283c <HAL_GetTick>
 800aae2:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 800aae4:	2300      	movs	r3, #0
 800aae6:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 800aae8:	2200      	movs	r2, #0
 800aaea:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aaee:	4830      	ldr	r0, [pc, #192]	; (800abb0 <SPI_WIFI_ResetModule+0xd8>)
 800aaf0:	f7f8 fc2a 	bl	8003348 <HAL_GPIO_WritePin>
 800aaf4:	200a      	movs	r0, #10
 800aaf6:	f7f7 fead 	bl	8002854 <HAL_Delay>
 800aafa:	2201      	movs	r2, #1
 800aafc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ab00:	482b      	ldr	r0, [pc, #172]	; (800abb0 <SPI_WIFI_ResetModule+0xd8>)
 800ab02:	f7f8 fc21 	bl	8003348 <HAL_GPIO_WritePin>
 800ab06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ab0a:	f7f7 fea3 	bl	8002854 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 800ab0e:	2200      	movs	r2, #0
 800ab10:	2101      	movs	r1, #1
 800ab12:	4827      	ldr	r0, [pc, #156]	; (800abb0 <SPI_WIFI_ResetModule+0xd8>)
 800ab14:	f7f8 fc18 	bl	8003348 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800ab18:	200f      	movs	r0, #15
 800ab1a:	f000 f9cd 	bl	800aeb8 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 800ab1e:	e020      	b.n	800ab62 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 800ab20:	7bfb      	ldrb	r3, [r7, #15]
 800ab22:	463a      	mov	r2, r7
 800ab24:	18d1      	adds	r1, r2, r3
 800ab26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	4821      	ldr	r0, [pc, #132]	; (800abb4 <SPI_WIFI_ResetModule+0xdc>)
 800ab2e:	f7fb fb34 	bl	800619a <HAL_SPI_Receive>
 800ab32:	4603      	mov	r3, r0
 800ab34:	71fb      	strb	r3, [r7, #7]
    count += 2;
 800ab36:	7bfb      	ldrb	r3, [r7, #15]
 800ab38:	3302      	adds	r3, #2
 800ab3a:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 800ab3c:	f7f7 fe7e 	bl	800283c <HAL_GetTick>
 800ab40:	4602      	mov	r2, r0
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	1ad3      	subs	r3, r2, r3
 800ab46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab4a:	d202      	bcs.n	800ab52 <SPI_WIFI_ResetModule+0x7a>
 800ab4c:	79fb      	ldrb	r3, [r7, #7]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d007      	beq.n	800ab62 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 800ab52:	2201      	movs	r2, #1
 800ab54:	2101      	movs	r1, #1
 800ab56:	4816      	ldr	r0, [pc, #88]	; (800abb0 <SPI_WIFI_ResetModule+0xd8>)
 800ab58:	f7f8 fbf6 	bl	8003348 <HAL_GPIO_WritePin>
      return -1;
 800ab5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab60:	e021      	b.n	800aba6 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 800ab62:	2102      	movs	r1, #2
 800ab64:	4812      	ldr	r0, [pc, #72]	; (800abb0 <SPI_WIFI_ResetModule+0xd8>)
 800ab66:	f7f8 fbd7 	bl	8003318 <HAL_GPIO_ReadPin>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d0d7      	beq.n	800ab20 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 800ab70:	2201      	movs	r2, #1
 800ab72:	2101      	movs	r1, #1
 800ab74:	480e      	ldr	r0, [pc, #56]	; (800abb0 <SPI_WIFI_ResetModule+0xd8>)
 800ab76:	f7f8 fbe7 	bl	8003348 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800ab7a:	783b      	ldrb	r3, [r7, #0]
 800ab7c:	2b15      	cmp	r3, #21
 800ab7e:	d10e      	bne.n	800ab9e <SPI_WIFI_ResetModule+0xc6>
 800ab80:	787b      	ldrb	r3, [r7, #1]
 800ab82:	2b15      	cmp	r3, #21
 800ab84:	d10b      	bne.n	800ab9e <SPI_WIFI_ResetModule+0xc6>
 800ab86:	78bb      	ldrb	r3, [r7, #2]
 800ab88:	2b0d      	cmp	r3, #13
 800ab8a:	d108      	bne.n	800ab9e <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800ab8c:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800ab8e:	2b0a      	cmp	r3, #10
 800ab90:	d105      	bne.n	800ab9e <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800ab92:	793b      	ldrb	r3, [r7, #4]
 800ab94:	2b3e      	cmp	r3, #62	; 0x3e
 800ab96:	d102      	bne.n	800ab9e <SPI_WIFI_ResetModule+0xc6>
 800ab98:	797b      	ldrb	r3, [r7, #5]
 800ab9a:	2b20      	cmp	r3, #32
 800ab9c:	d002      	beq.n	800aba4 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 800ab9e:	f04f 33ff 	mov.w	r3, #4294967295
 800aba2:	e000      	b.n	800aba6 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3710      	adds	r7, #16
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop
 800abb0:	48001000 	.word	0x48001000
 800abb4:	20000c94 	.word	0x20000c94

0800abb8 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 800abbc:	4802      	ldr	r0, [pc, #8]	; (800abc8 <SPI_WIFI_DeInit+0x10>)
 800abbe:	f7fb fac4 	bl	800614a <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 800abc2:	2300      	movs	r3, #0
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	20000c94 	.word	0x20000c94

0800abcc <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 800abd4:	f7f7 fe32 	bl	800283c <HAL_GetTick>
 800abd8:	4603      	mov	r3, r0
 800abda:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 800abdc:	e00a      	b.n	800abf4 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800abde:	f7f7 fe2d 	bl	800283c <HAL_GetTick>
 800abe2:	4602      	mov	r2, r0
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	1ad2      	subs	r2, r2, r3
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	429a      	cmp	r2, r3
 800abec:	d902      	bls.n	800abf4 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800abee:	f04f 33ff 	mov.w	r3, #4294967295
 800abf2:	e007      	b.n	800ac04 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 800abf4:	2102      	movs	r1, #2
 800abf6:	4805      	ldr	r0, [pc, #20]	; (800ac0c <wait_cmddata_rdy_high+0x40>)
 800abf8:	f7f8 fb8e 	bl	8003318 <HAL_GPIO_ReadPin>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d1ed      	bne.n	800abde <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800ac02:	2300      	movs	r3, #0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	48001000 	.word	0x48001000

0800ac10 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800ac18:	f7f7 fe10 	bl	800283c <HAL_GetTick>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 800ac20:	e00a      	b.n	800ac38 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800ac22:	f7f7 fe0b 	bl	800283c <HAL_GetTick>
 800ac26:	4602      	mov	r2, r0
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	1ad2      	subs	r2, r2, r3
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d902      	bls.n	800ac38 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800ac32:	f04f 33ff 	mov.w	r3, #4294967295
 800ac36:	e004      	b.n	800ac42 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 800ac38:	4b04      	ldr	r3, [pc, #16]	; (800ac4c <wait_cmddata_rdy_rising_event+0x3c>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d0f0      	beq.n	800ac22 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 800ac40:	2300      	movs	r3, #0
#endif
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3710      	adds	r7, #16
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	20000d00 	.word	0x20000d00

0800ac50 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800ac58:	f7f7 fdf0 	bl	800283c <HAL_GetTick>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 800ac60:	e00a      	b.n	800ac78 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800ac62:	f7f7 fdeb 	bl	800283c <HAL_GetTick>
 800ac66:	4602      	mov	r2, r0
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	1ad2      	subs	r2, r2, r3
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d902      	bls.n	800ac78 <wait_spi_rx_event+0x28>
    {
      return -1;
 800ac72:	f04f 33ff 	mov.w	r3, #4294967295
 800ac76:	e004      	b.n	800ac82 <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 800ac78:	4b04      	ldr	r3, [pc, #16]	; (800ac8c <wait_spi_rx_event+0x3c>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d0f0      	beq.n	800ac62 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 800ac80:	2300      	movs	r3, #0
#endif
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	20000cf8 	.word	0x20000cf8

0800ac90 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800ac98:	f7f7 fdd0 	bl	800283c <HAL_GetTick>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 800aca0:	e00a      	b.n	800acb8 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800aca2:	f7f7 fdcb 	bl	800283c <HAL_GetTick>
 800aca6:	4602      	mov	r2, r0
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	1ad2      	subs	r2, r2, r3
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d902      	bls.n	800acb8 <wait_spi_tx_event+0x28>
    {
      return -1;
 800acb2:	f04f 33ff 	mov.w	r3, #4294967295
 800acb6:	e004      	b.n	800acc2 <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 800acb8:	4b04      	ldr	r3, [pc, #16]	; (800accc <wait_spi_tx_event+0x3c>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d0f0      	beq.n	800aca2 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 800acc0:	2300      	movs	r3, #0
#endif
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3710      	adds	r7, #16
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	20000cfc 	.word	0x20000cfc

0800acd0 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b086      	sub	sp, #24
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	460b      	mov	r3, r1
 800acda:	607a      	str	r2, [r7, #4]
 800acdc:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800acde:	2300      	movs	r3, #0
 800ace0:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 800ace2:	2201      	movs	r2, #1
 800ace4:	2101      	movs	r1, #1
 800ace6:	4834      	ldr	r0, [pc, #208]	; (800adb8 <SPI_WIFI_ReceiveData+0xe8>)
 800ace8:	f7f8 fb2e 	bl	8003348 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 800acec:	2003      	movs	r0, #3
 800acee:	f000 f8e3 	bl	800aeb8 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7ff ff8b 	bl	800ac10 <wait_cmddata_rdy_rising_event>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	da02      	bge.n	800ad06 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 800ad00:	f06f 0302 	mvn.w	r3, #2
 800ad04:	e054      	b.n	800adb0 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800ad06:	2200      	movs	r2, #0
 800ad08:	2101      	movs	r1, #1
 800ad0a:	482b      	ldr	r0, [pc, #172]	; (800adb8 <SPI_WIFI_ReceiveData+0xe8>)
 800ad0c:	f7f8 fb1c 	bl	8003348 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800ad10:	200f      	movs	r0, #15
 800ad12:	f000 f8d1 	bl	800aeb8 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 800ad16:	e03d      	b.n	800ad94 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 800ad18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ad1c:	897b      	ldrh	r3, [r7, #10]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	db02      	blt.n	800ad28 <SPI_WIFI_ReceiveData+0x58>
 800ad22:	897b      	ldrh	r3, [r7, #10]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d13c      	bne.n	800ada2 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 800ad28:	4b24      	ldr	r3, [pc, #144]	; (800adbc <SPI_WIFI_ReceiveData+0xec>)
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800ad2e:	f107 0314 	add.w	r3, r7, #20
 800ad32:	2201      	movs	r2, #1
 800ad34:	4619      	mov	r1, r3
 800ad36:	4822      	ldr	r0, [pc, #136]	; (800adc0 <SPI_WIFI_ReceiveData+0xf0>)
 800ad38:	f7fb fe00 	bl	800693c <HAL_SPI_Receive_IT>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d007      	beq.n	800ad52 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800ad42:	2201      	movs	r2, #1
 800ad44:	2101      	movs	r1, #1
 800ad46:	481c      	ldr	r0, [pc, #112]	; (800adb8 <SPI_WIFI_ReceiveData+0xe8>)
 800ad48:	f7f8 fafe 	bl	8003348 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 800ad4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad50:	e02e      	b.n	800adb0 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7ff ff7b 	bl	800ac50 <wait_spi_rx_event>

      pData[0] = tmp[0];
 800ad5a:	7d3a      	ldrb	r2, [r7, #20]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	3301      	adds	r3, #1
 800ad64:	7d7a      	ldrb	r2, [r7, #21]
 800ad66:	701a      	strb	r2, [r3, #0]
      length += 2;
 800ad68:	8afb      	ldrh	r3, [r7, #22]
 800ad6a:	3302      	adds	r3, #2
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	3302      	adds	r3, #2
 800ad74:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 800ad76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ad7a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ad7e:	db09      	blt.n	800ad94 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 800ad80:	2201      	movs	r2, #1
 800ad82:	2101      	movs	r1, #1
 800ad84:	480c      	ldr	r0, [pc, #48]	; (800adb8 <SPI_WIFI_ReceiveData+0xe8>)
 800ad86:	f7f8 fadf 	bl	8003348 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 800ad8a:	f7ff fea5 	bl	800aad8 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800ad8e:	f06f 0303 	mvn.w	r3, #3
 800ad92:	e00d      	b.n	800adb0 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 800ad94:	2102      	movs	r1, #2
 800ad96:	4808      	ldr	r0, [pc, #32]	; (800adb8 <SPI_WIFI_ReceiveData+0xe8>)
 800ad98:	f7f8 fabe 	bl	8003318 <HAL_GPIO_ReadPin>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d0ba      	beq.n	800ad18 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 800ada2:	2201      	movs	r2, #1
 800ada4:	2101      	movs	r1, #1
 800ada6:	4804      	ldr	r0, [pc, #16]	; (800adb8 <SPI_WIFI_ReceiveData+0xe8>)
 800ada8:	f7f8 face 	bl	8003348 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 800adac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3718      	adds	r7, #24
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	48001000 	.word	0x48001000
 800adbc:	20000cf8 	.word	0x20000cf8
 800adc0:	20000c94 	.word	0x20000c94

0800adc4 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b086      	sub	sp, #24
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	460b      	mov	r3, r1
 800adce:	607a      	str	r2, [r7, #4]
 800add0:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	4618      	mov	r0, r3
 800add6:	f7ff fef9 	bl	800abcc <wait_cmddata_rdy_high>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	da02      	bge.n	800ade6 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 800ade0:	f04f 33ff 	mov.w	r3, #4294967295
 800ade4:	e04f      	b.n	800ae86 <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 800ade6:	4b2a      	ldr	r3, [pc, #168]	; (800ae90 <SPI_WIFI_SendData+0xcc>)
 800ade8:	2201      	movs	r2, #1
 800adea:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800adec:	2200      	movs	r2, #0
 800adee:	2101      	movs	r1, #1
 800adf0:	4828      	ldr	r0, [pc, #160]	; (800ae94 <SPI_WIFI_SendData+0xd0>)
 800adf2:	f7f8 faa9 	bl	8003348 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800adf6:	200f      	movs	r0, #15
 800adf8:	f000 f85e 	bl	800aeb8 <SPI_WIFI_DelayUs>
  if (len > 1)
 800adfc:	897b      	ldrh	r3, [r7, #10]
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d919      	bls.n	800ae36 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 800ae02:	4b25      	ldr	r3, [pc, #148]	; (800ae98 <SPI_WIFI_SendData+0xd4>)
 800ae04:	2201      	movs	r2, #1
 800ae06:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 800ae08:	897b      	ldrh	r3, [r7, #10]
 800ae0a:	085b      	lsrs	r3, r3, #1
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	461a      	mov	r2, r3
 800ae10:	68f9      	ldr	r1, [r7, #12]
 800ae12:	4822      	ldr	r0, [pc, #136]	; (800ae9c <SPI_WIFI_SendData+0xd8>)
 800ae14:	f7fb fd04 	bl	8006820 <HAL_SPI_Transmit_IT>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d007      	beq.n	800ae2e <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800ae1e:	2201      	movs	r2, #1
 800ae20:	2101      	movs	r1, #1
 800ae22:	481c      	ldr	r0, [pc, #112]	; (800ae94 <SPI_WIFI_SendData+0xd0>)
 800ae24:	f7f8 fa90 	bl	8003348 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800ae28:	f04f 33ff 	mov.w	r3, #4294967295
 800ae2c:	e02b      	b.n	800ae86 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7ff ff2d 	bl	800ac90 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 800ae36:	897b      	ldrh	r3, [r7, #10]
 800ae38:	f003 0301 	and.w	r3, r3, #1
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d020      	beq.n	800ae82 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 800ae40:	897b      	ldrh	r3, [r7, #10]
 800ae42:	3b01      	subs	r3, #1
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	4413      	add	r3, r2
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 800ae4c:	230a      	movs	r3, #10
 800ae4e:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 800ae50:	4b11      	ldr	r3, [pc, #68]	; (800ae98 <SPI_WIFI_SendData+0xd4>)
 800ae52:	2201      	movs	r2, #1
 800ae54:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800ae56:	f107 0314 	add.w	r3, r7, #20
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	480f      	ldr	r0, [pc, #60]	; (800ae9c <SPI_WIFI_SendData+0xd8>)
 800ae60:	f7fb fcde 	bl	8006820 <HAL_SPI_Transmit_IT>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d007      	beq.n	800ae7a <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	2101      	movs	r1, #1
 800ae6e:	4809      	ldr	r0, [pc, #36]	; (800ae94 <SPI_WIFI_SendData+0xd0>)
 800ae70:	f7f8 fa6a 	bl	8003348 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800ae74:	f04f 33ff 	mov.w	r3, #4294967295
 800ae78:	e005      	b.n	800ae86 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7ff ff07 	bl	800ac90 <wait_spi_tx_event>
    
  }
  return len;
 800ae82:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3718      	adds	r7, #24
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	20000d00 	.word	0x20000d00
 800ae94:	48001000 	.word	0x48001000
 800ae98:	20000cfc 	.word	0x20000cfc
 800ae9c:	20000c94 	.word	0x20000c94

0800aea0 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f7f7 fcd3 	bl	8002854 <HAL_Delay>
}
 800aeae:	bf00      	nop
 800aeb0:	3708      	adds	r7, #8
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
	...

0800aeb8 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b086      	sub	sp, #24
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 800aec0:	2300      	movs	r3, #0
 800aec2:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 800aec4:	2300      	movs	r3, #0
 800aec6:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 800aec8:	4b20      	ldr	r3, [pc, #128]	; (800af4c <SPI_WIFI_DelayUs+0x94>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d122      	bne.n	800af16 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 800aed0:	4b1f      	ldr	r3, [pc, #124]	; (800af50 <SPI_WIFI_DelayUs+0x98>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4a1f      	ldr	r2, [pc, #124]	; (800af54 <SPI_WIFI_DelayUs+0x9c>)
 800aed6:	fba2 2303 	umull	r2, r3, r2, r3
 800aeda:	099b      	lsrs	r3, r3, #6
 800aedc:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 800aede:	2300      	movs	r3, #0
 800aee0:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 800aee6:	f7f7 fca9 	bl	800283c <HAL_GetTick>
 800aeea:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 800aeec:	e002      	b.n	800aef4 <SPI_WIFI_DelayUs+0x3c>
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	3b01      	subs	r3, #1
 800aef2:	60bb      	str	r3, [r7, #8]
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d1f9      	bne.n	800aeee <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 800aefa:	f7f7 fc9f 	bl	800283c <HAL_GetTick>
 800aefe:	4602      	mov	r2, r0
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	1ad3      	subs	r3, r2, r3
 800af04:	4a11      	ldr	r2, [pc, #68]	; (800af4c <SPI_WIFI_DelayUs+0x94>)
 800af06:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 800af08:	4b10      	ldr	r3, [pc, #64]	; (800af4c <SPI_WIFI_DelayUs+0x94>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d102      	bne.n	800af16 <SPI_WIFI_DelayUs+0x5e>
 800af10:	4b0e      	ldr	r3, [pc, #56]	; (800af4c <SPI_WIFI_DelayUs+0x94>)
 800af12:	2201      	movs	r2, #1
 800af14:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 800af16:	4b0e      	ldr	r3, [pc, #56]	; (800af50 <SPI_WIFI_DelayUs+0x98>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a0f      	ldr	r2, [pc, #60]	; (800af58 <SPI_WIFI_DelayUs+0xa0>)
 800af1c:	fba2 2303 	umull	r2, r3, r2, r3
 800af20:	0c9a      	lsrs	r2, r3, #18
 800af22:	4b0a      	ldr	r3, [pc, #40]	; (800af4c <SPI_WIFI_DelayUs+0x94>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	fbb2 f3f3 	udiv	r3, r2, r3
 800af2a:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	697a      	ldr	r2, [r7, #20]
 800af30:	fb02 f303 	mul.w	r3, r2, r3
 800af34:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 800af36:	e002      	b.n	800af3e <SPI_WIFI_DelayUs+0x86>
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	3b01      	subs	r3, #1
 800af3c:	60bb      	str	r3, [r7, #8]
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d1f9      	bne.n	800af38 <SPI_WIFI_DelayUs+0x80>
  return;
 800af44:	bf00      	nop
}
 800af46:	3718      	adds	r7, #24
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	20000d04 	.word	0x20000d04
 800af50:	20000010 	.word	0x20000010
 800af54:	10624dd3 	.word	0x10624dd3
 800af58:	431bde83 	.word	0x431bde83

0800af5c <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 800af64:	4b06      	ldr	r3, [pc, #24]	; (800af80 <HAL_SPI_RxCpltCallback+0x24>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d002      	beq.n	800af72 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 800af6c:	4b04      	ldr	r3, [pc, #16]	; (800af80 <HAL_SPI_RxCpltCallback+0x24>)
 800af6e:	2200      	movs	r2, #0
 800af70:	601a      	str	r2, [r3, #0]
  }
}
 800af72:	bf00      	nop
 800af74:	370c      	adds	r7, #12
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr
 800af7e:	bf00      	nop
 800af80:	20000cf8 	.word	0x20000cf8

0800af84 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 800af8c:	4b06      	ldr	r3, [pc, #24]	; (800afa8 <HAL_SPI_TxCpltCallback+0x24>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d002      	beq.n	800af9a <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 800af94:	4b04      	ldr	r3, [pc, #16]	; (800afa8 <HAL_SPI_TxCpltCallback+0x24>)
 800af96:	2200      	movs	r2, #0
 800af98:	601a      	str	r2, [r3, #0]
  }
}
 800af9a:	bf00      	nop
 800af9c:	370c      	adds	r7, #12
 800af9e:	46bd      	mov	sp, r7
 800afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa4:	4770      	bx	lr
 800afa6:	bf00      	nop
 800afa8:	20000cfc 	.word	0x20000cfc

0800afac <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 800afac:	b480      	push	{r7}
 800afae:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 800afb0:	4b05      	ldr	r3, [pc, #20]	; (800afc8 <SPI_WIFI_ISR+0x1c>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d102      	bne.n	800afbe <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 800afb8:	4b03      	ldr	r3, [pc, #12]	; (800afc8 <SPI_WIFI_ISR+0x1c>)
 800afba:	2200      	movs	r2, #0
 800afbc:	601a      	str	r2, [r3, #0]
   }
}
 800afbe:	bf00      	nop
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr
 800afc8:	20000d00 	.word	0x20000d00

0800afcc <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800afd2:	2301      	movs	r3, #1
 800afd4:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800afd6:	4b0d      	ldr	r3, [pc, #52]	; (800b00c <WIFI_Init+0x40>)
 800afd8:	9301      	str	r3, [sp, #4]
 800afda:	4b0d      	ldr	r3, [pc, #52]	; (800b010 <WIFI_Init+0x44>)
 800afdc:	9300      	str	r3, [sp, #0]
 800afde:	4b0d      	ldr	r3, [pc, #52]	; (800b014 <WIFI_Init+0x48>)
 800afe0:	4a0d      	ldr	r2, [pc, #52]	; (800b018 <WIFI_Init+0x4c>)
 800afe2:	490e      	ldr	r1, [pc, #56]	; (800b01c <WIFI_Init+0x50>)
 800afe4:	480e      	ldr	r0, [pc, #56]	; (800b020 <WIFI_Init+0x54>)
 800afe6:	f7ff f8c3 	bl	800a170 <ES_WIFI_RegisterBusIO>
 800afea:	4603      	mov	r3, r0
 800afec:	2b00      	cmp	r3, #0
 800afee:	d107      	bne.n	800b000 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800aff0:	480b      	ldr	r0, [pc, #44]	; (800b020 <WIFI_Init+0x54>)
 800aff2:	f7ff f88f 	bl	800a114 <ES_WIFI_Init>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d101      	bne.n	800b000 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 800affc:	2300      	movs	r3, #0
 800affe:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 800b000:	79fb      	ldrb	r3, [r7, #7]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3708      	adds	r7, #8
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	0800acd1 	.word	0x0800acd1
 800b010:	0800adc5 	.word	0x0800adc5
 800b014:	0800aea1 	.word	0x0800aea1
 800b018:	0800abb9 	.word	0x0800abb9
 800b01c:	0800aa1d 	.word	0x0800aa1d
 800b020:	20000d08 	.word	0x20000d08

0800b024 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b086      	sub	sp, #24
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	4613      	mov	r3, r2
 800b030:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800b036:	79fb      	ldrb	r3, [r7, #7]
 800b038:	68ba      	ldr	r2, [r7, #8]
 800b03a:	68f9      	ldr	r1, [r7, #12]
 800b03c:	4809      	ldr	r0, [pc, #36]	; (800b064 <WIFI_Connect+0x40>)
 800b03e:	f7ff f8cb 	bl	800a1d8 <ES_WIFI_Connect>
 800b042:	4603      	mov	r3, r0
 800b044:	2b00      	cmp	r3, #0
 800b046:	d107      	bne.n	800b058 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800b048:	4806      	ldr	r0, [pc, #24]	; (800b064 <WIFI_Connect+0x40>)
 800b04a:	f7ff f969 	bl	800a320 <ES_WIFI_GetNetworkSettings>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d101      	bne.n	800b058 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 800b054:	2300      	movs	r3, #0
 800b056:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 800b058:	7dfb      	ldrb	r3, [r7, #23]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3718      	adds	r7, #24
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	20000d08 	.word	0x20000d08

0800b068 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 800b074:	6879      	ldr	r1, [r7, #4]
 800b076:	4806      	ldr	r0, [pc, #24]	; (800b090 <WIFI_GetMAC_Address+0x28>)
 800b078:	f7ff f97c 	bl	800a374 <ES_WIFI_GetMACAddress>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d101      	bne.n	800b086 <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800b082:	2300      	movs	r3, #0
 800b084:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800b086:	7bfb      	ldrb	r3, [r7, #15]
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3710      	adds	r7, #16
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	20000d08 	.word	0x20000d08

0800b094 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b09c:	2301      	movs	r3, #1
 800b09e:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 800b0a0:	4809      	ldr	r0, [pc, #36]	; (800b0c8 <WIFI_GetIP_Address+0x34>)
 800b0a2:	f7ff f911 	bl	800a2c8 <ES_WIFI_IsConnected>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d107      	bne.n	800b0bc <WIFI_GetIP_Address+0x28>
 800b0ac:	4b06      	ldr	r3, [pc, #24]	; (800b0c8 <WIFI_GetIP_Address+0x34>)
 800b0ae:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 800b0b2:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800b0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3710      	adds	r7, #16
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	20000d08 	.word	0x20000d08

0800b0cc <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b08a      	sub	sp, #40	; 0x28
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	607a      	str	r2, [r7, #4]
 800b0d6:	603b      	str	r3, [r7, #0]
 800b0d8:	460b      	mov	r3, r1
 800b0da:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 800b0e8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b0ea:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 800b0ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b0ee:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800b0f0:	7afb      	ldrb	r3, [r7, #11]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	bf14      	ite	ne
 800b0f6:	2301      	movne	r3, #1
 800b0f8:	2300      	moveq	r3, #0
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	785b      	ldrb	r3, [r3, #1]
 800b108:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	789b      	ldrb	r3, [r3, #2]
 800b10e:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	78db      	ldrb	r3, [r3, #3]
 800b114:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800b116:	f107 0310 	add.w	r3, r7, #16
 800b11a:	4619      	mov	r1, r3
 800b11c:	4807      	ldr	r0, [pc, #28]	; (800b13c <WIFI_OpenClientConnection+0x70>)
 800b11e:	f7ff f95b 	bl	800a3d8 <ES_WIFI_StartClientConnection>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d102      	bne.n	800b12e <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 800b128:	2300      	movs	r3, #0
 800b12a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800b12e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b132:	4618      	mov	r0, r3
 800b134:	3728      	adds	r7, #40	; 0x28
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop
 800b13c:	20000d08 	.word	0x20000d08

0800b140 <sendMessageVector>:
/*-----------------------------------------------------------*/

static int32_t sendMessageVector( MQTTContext_t * pContext,
                                  TransportOutVector_t * pIoVec,
                                  size_t ioVecCount )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b08a      	sub	sp, #40	; 0x28
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	607a      	str	r2, [r7, #4]
    int32_t sendResult;
    uint32_t timeoutMs;
    TransportOutVector_t * pIoVectIterator;
    size_t vectorsToBeSent = ioVecCount;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	61fb      	str	r3, [r7, #28]
    size_t bytesToSend = 0U;
 800b150:	2300      	movs	r3, #0
 800b152:	61bb      	str	r3, [r7, #24]
    int32_t bytesSentOrError = 0;
 800b154:	2300      	movs	r3, #0
 800b156:	617b      	str	r3, [r7, #20]

    assert( pContext != NULL );
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d106      	bne.n	800b16c <sendMessageVector+0x2c>
 800b15e:	4b64      	ldr	r3, [pc, #400]	; (800b2f0 <sendMessageVector+0x1b0>)
 800b160:	4a64      	ldr	r2, [pc, #400]	; (800b2f4 <sendMessageVector+0x1b4>)
 800b162:	f240 21f2 	movw	r1, #754	; 0x2f2
 800b166:	4864      	ldr	r0, [pc, #400]	; (800b2f8 <sendMessageVector+0x1b8>)
 800b168:	f007 f858 	bl	801221c <__assert_func>
    assert( pIoVec != NULL );
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d106      	bne.n	800b180 <sendMessageVector+0x40>
 800b172:	4b62      	ldr	r3, [pc, #392]	; (800b2fc <sendMessageVector+0x1bc>)
 800b174:	4a5f      	ldr	r2, [pc, #380]	; (800b2f4 <sendMessageVector+0x1b4>)
 800b176:	f240 21f3 	movw	r1, #755	; 0x2f3
 800b17a:	485f      	ldr	r0, [pc, #380]	; (800b2f8 <sendMessageVector+0x1b8>)
 800b17c:	f007 f84e 	bl	801221c <__assert_func>
    assert( pContext->getTime != NULL );
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b184:	2b00      	cmp	r3, #0
 800b186:	d106      	bne.n	800b196 <sendMessageVector+0x56>
 800b188:	4b5d      	ldr	r3, [pc, #372]	; (800b300 <sendMessageVector+0x1c0>)
 800b18a:	4a5a      	ldr	r2, [pc, #360]	; (800b2f4 <sendMessageVector+0x1b4>)
 800b18c:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 800b190:	4859      	ldr	r0, [pc, #356]	; (800b2f8 <sendMessageVector+0x1b8>)
 800b192:	f007 f843 	bl	801221c <__assert_func>
    /* Send must always be defined */
    assert( pContext->transportInterface.send != NULL );
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	695b      	ldr	r3, [r3, #20]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d106      	bne.n	800b1ac <sendMessageVector+0x6c>
 800b19e:	4b59      	ldr	r3, [pc, #356]	; (800b304 <sendMessageVector+0x1c4>)
 800b1a0:	4a54      	ldr	r2, [pc, #336]	; (800b2f4 <sendMessageVector+0x1b4>)
 800b1a2:	f240 21f6 	movw	r1, #758	; 0x2f6
 800b1a6:	4854      	ldr	r0, [pc, #336]	; (800b2f8 <sendMessageVector+0x1b8>)
 800b1a8:	f007 f838 	bl	801221c <__assert_func>

    /* Count the total number of bytes to be sent as outlined in the vector. */
    for( pIoVectIterator = pIoVec; pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ); pIoVectIterator++ )
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	623b      	str	r3, [r7, #32]
 800b1b0:	e007      	b.n	800b1c2 <sendMessageVector+0x82>
    {
        bytesToSend += pIoVectIterator->iov_len;
 800b1b2:	6a3b      	ldr	r3, [r7, #32]
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	69ba      	ldr	r2, [r7, #24]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	61bb      	str	r3, [r7, #24]
    for( pIoVectIterator = pIoVec; pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ); pIoVectIterator++ )
 800b1bc:	6a3b      	ldr	r3, [r7, #32]
 800b1be:	3308      	adds	r3, #8
 800b1c0:	623b      	str	r3, [r7, #32]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b1c8:	3b01      	subs	r3, #1
 800b1ca:	00db      	lsls	r3, r3, #3
 800b1cc:	68ba      	ldr	r2, [r7, #8]
 800b1ce:	4413      	add	r3, r2
 800b1d0:	6a3a      	ldr	r2, [r7, #32]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d9ed      	bls.n	800b1b2 <sendMessageVector+0x72>
    }

    /* Reset the iterator to point to the first entry in the array. */
    pIoVectIterator = pIoVec;
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	623b      	str	r3, [r7, #32]

    /* Set the timeout. */
    timeoutMs = pContext->getTime() + MQTT_SEND_TIMEOUT_MS;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1de:	4798      	blx	r3
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800b1e6:	3320      	adds	r3, #32
 800b1e8:	613b      	str	r3, [r7, #16]

    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b1ea:	e073      	b.n	800b2d4 <sendMessageVector+0x194>
    {
        if( pContext->transportInterface.writev != NULL )
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	699b      	ldr	r3, [r3, #24]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d008      	beq.n	800b206 <sendMessageVector+0xc6>
        {
            sendResult = pContext->transportInterface.writev( pContext->transportInterface.pNetworkContext,
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	699b      	ldr	r3, [r3, #24]
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	69d0      	ldr	r0, [r2, #28]
 800b1fc:	69fa      	ldr	r2, [r7, #28]
 800b1fe:	6a39      	ldr	r1, [r7, #32]
 800b200:	4798      	blx	r3
 800b202:	6278      	str	r0, [r7, #36]	; 0x24
 800b204:	e009      	b.n	800b21a <sendMessageVector+0xda>
                                                              pIoVectIterator,
                                                              vectorsToBeSent );
        }
        else
        {
            sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	695b      	ldr	r3, [r3, #20]
 800b20a:	68fa      	ldr	r2, [r7, #12]
 800b20c:	69d0      	ldr	r0, [r2, #28]
 800b20e:	6a3a      	ldr	r2, [r7, #32]
 800b210:	6811      	ldr	r1, [r2, #0]
 800b212:	6a3a      	ldr	r2, [r7, #32]
 800b214:	6852      	ldr	r2, [r2, #4]
 800b216:	4798      	blx	r3
 800b218:	6278      	str	r0, [r7, #36]	; 0x24
                                                            pIoVectIterator->iov_base,
                                                            pIoVectIterator->iov_len );
        }

        if( sendResult > 0 )
 800b21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	dd17      	ble.n	800b250 <sendMessageVector+0x110>
        {
            /* It is a bug in the application's transport send implementation if
             * more bytes than expected are sent. */
            assert( sendResult <= ( ( int32_t ) bytesToSend - bytesSentOrError ) );
 800b220:	69ba      	ldr	r2, [r7, #24]
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	1ad3      	subs	r3, r2, r3
 800b226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b228:	429a      	cmp	r2, r3
 800b22a:	dd06      	ble.n	800b23a <sendMessageVector+0xfa>
 800b22c:	4b36      	ldr	r3, [pc, #216]	; (800b308 <sendMessageVector+0x1c8>)
 800b22e:	4a31      	ldr	r2, [pc, #196]	; (800b2f4 <sendMessageVector+0x1b4>)
 800b230:	f240 3117 	movw	r1, #791	; 0x317
 800b234:	4830      	ldr	r0, [pc, #192]	; (800b2f8 <sendMessageVector+0x1b8>)
 800b236:	f006 fff1 	bl	801221c <__assert_func>

            bytesSentOrError += sendResult;
 800b23a:	697a      	ldr	r2, [r7, #20]
 800b23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23e:	4413      	add	r3, r2
 800b240:	617b      	str	r3, [r7, #20]

            /* Set last transmission time. */
            pContext->lastPacketTxTime = pContext->getTime();
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b246:	4798      	blx	r3
 800b248:	4602      	mov	r2, r0
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	635a      	str	r2, [r3, #52]	; 0x34
 800b24e:	e004      	b.n	800b25a <sendMessageVector+0x11a>

            LogDebug( ( "sendMessageVector: Bytes Sent=%ld, Bytes Remaining=%lu",
                        ( long int ) sendResult,
                        ( unsigned long ) ( bytesToSend - ( size_t ) bytesSentOrError ) ) );
        }
        else if( sendResult < 0 )
 800b250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b252:	2b00      	cmp	r3, #0
 800b254:	da01      	bge.n	800b25a <sendMessageVector+0x11a>
        {
            bytesSentOrError = sendResult;
 800b256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b258:	617b      	str	r3, [r7, #20]
        {
            /* MISRA Empty body */
        }

        /* Check for timeout. */
        if( pContext->getTime() >= timeoutMs )
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b25e:	4798      	blx	r3
 800b260:	4602      	mov	r2, r0
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	4293      	cmp	r3, r2
 800b266:	d93d      	bls.n	800b2e4 <sendMessageVector+0x1a4>
            LogError( ( "sendMessageVector: Unable to send packet: Timed out." ) );
            break;
        }

        /* Update the send pointer to the correct vector and offset. */
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800b268:	e00b      	b.n	800b282 <sendMessageVector+0x142>
               ( sendResult >= ( int32_t ) pIoVectIterator->iov_len ) )
        {
            sendResult -= ( int32_t ) pIoVectIterator->iov_len;
 800b26a:	6a3b      	ldr	r3, [r7, #32]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	461a      	mov	r2, r3
 800b270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b272:	1a9b      	subs	r3, r3, r2
 800b274:	627b      	str	r3, [r7, #36]	; 0x24
            pIoVectIterator++;
 800b276:	6a3b      	ldr	r3, [r7, #32]
 800b278:	3308      	adds	r3, #8
 800b27a:	623b      	str	r3, [r7, #32]
            /* Update the number of vector which are yet to be sent. */
            vectorsToBeSent--;
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	3b01      	subs	r3, #1
 800b280:	61fb      	str	r3, [r7, #28]
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b288:	3b01      	subs	r3, #1
 800b28a:	00db      	lsls	r3, r3, #3
 800b28c:	68ba      	ldr	r2, [r7, #8]
 800b28e:	4413      	add	r3, r2
 800b290:	6a3a      	ldr	r2, [r7, #32]
 800b292:	429a      	cmp	r2, r3
 800b294:	d805      	bhi.n	800b2a2 <sendMessageVector+0x162>
               ( sendResult >= ( int32_t ) pIoVectIterator->iov_len ) )
 800b296:	6a3b      	ldr	r3, [r7, #32]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	461a      	mov	r2, r3
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800b29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	dae3      	bge.n	800b26a <sendMessageVector+0x12a>
        }

        /* Some of the bytes from this vector were sent as well, update the length
         * and the pointer to data in this vector. */
        if( ( sendResult > 0 ) &&
 800b2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	dd15      	ble.n	800b2d4 <sendMessageVector+0x194>
            ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) )
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b2ae:	3b01      	subs	r3, #1
 800b2b0:	00db      	lsls	r3, r3, #3
 800b2b2:	68ba      	ldr	r2, [r7, #8]
 800b2b4:	4413      	add	r3, r2
        if( ( sendResult > 0 ) &&
 800b2b6:	6a3a      	ldr	r2, [r7, #32]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d80b      	bhi.n	800b2d4 <sendMessageVector+0x194>
        {
            pIoVectIterator->iov_base = ( const void * ) &( ( ( const uint8_t * ) pIoVectIterator->iov_base )[ sendResult ] );
 800b2bc:	6a3b      	ldr	r3, [r7, #32]
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c2:	441a      	add	r2, r3
 800b2c4:	6a3b      	ldr	r3, [r7, #32]
 800b2c6:	601a      	str	r2, [r3, #0]
            pIoVectIterator->iov_len -= ( size_t ) sendResult;
 800b2c8:	6a3b      	ldr	r3, [r7, #32]
 800b2ca:	685a      	ldr	r2, [r3, #4]
 800b2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ce:	1ad2      	subs	r2, r2, r3
 800b2d0:	6a3b      	ldr	r3, [r7, #32]
 800b2d2:	605a      	str	r2, [r3, #4]
    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b2d4:	69bb      	ldr	r3, [r7, #24]
 800b2d6:	697a      	ldr	r2, [r7, #20]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	da04      	bge.n	800b2e6 <sendMessageVector+0x1a6>
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	da84      	bge.n	800b1ec <sendMessageVector+0xac>
 800b2e2:	e000      	b.n	800b2e6 <sendMessageVector+0x1a6>
            break;
 800b2e4:	bf00      	nop
        }
    }

    return bytesSentOrError;
 800b2e6:	697b      	ldr	r3, [r7, #20]
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3728      	adds	r7, #40	; 0x28
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	080147c4 	.word	0x080147c4
 800b2f4:	08015364 	.word	0x08015364
 800b2f8:	080146e8 	.word	0x080146e8
 800b2fc:	080147d8 	.word	0x080147d8
 800b300:	080147e8 	.word	0x080147e8
 800b304:	08014804 	.word	0x08014804
 800b308:	08014830 	.word	0x08014830

0800b30c <sendBuffer>:

static int32_t sendBuffer( MQTTContext_t * pContext,
                           const uint8_t * pBufferToSend,
                           size_t bytesToSend )
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b088      	sub	sp, #32
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	60b9      	str	r1, [r7, #8]
 800b316:	607a      	str	r2, [r7, #4]
    int32_t sendResult;
    uint32_t timeoutMs;
    int32_t bytesSentOrError = 0;
 800b318:	2300      	movs	r3, #0
 800b31a:	61fb      	str	r3, [r7, #28]
    const uint8_t * pIndex = pBufferToSend;
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	61bb      	str	r3, [r7, #24]

    assert( pContext != NULL );
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d106      	bne.n	800b334 <sendBuffer+0x28>
 800b326:	4b39      	ldr	r3, [pc, #228]	; (800b40c <sendBuffer+0x100>)
 800b328:	4a39      	ldr	r2, [pc, #228]	; (800b410 <sendBuffer+0x104>)
 800b32a:	f240 3153 	movw	r1, #851	; 0x353
 800b32e:	4839      	ldr	r0, [pc, #228]	; (800b414 <sendBuffer+0x108>)
 800b330:	f006 ff74 	bl	801221c <__assert_func>
    assert( pContext->getTime != NULL );
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d106      	bne.n	800b34a <sendBuffer+0x3e>
 800b33c:	4b36      	ldr	r3, [pc, #216]	; (800b418 <sendBuffer+0x10c>)
 800b33e:	4a34      	ldr	r2, [pc, #208]	; (800b410 <sendBuffer+0x104>)
 800b340:	f44f 7155 	mov.w	r1, #852	; 0x354
 800b344:	4833      	ldr	r0, [pc, #204]	; (800b414 <sendBuffer+0x108>)
 800b346:	f006 ff69 	bl	801221c <__assert_func>
    assert( pContext->transportInterface.send != NULL );
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	695b      	ldr	r3, [r3, #20]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d106      	bne.n	800b360 <sendBuffer+0x54>
 800b352:	4b32      	ldr	r3, [pc, #200]	; (800b41c <sendBuffer+0x110>)
 800b354:	4a2e      	ldr	r2, [pc, #184]	; (800b410 <sendBuffer+0x104>)
 800b356:	f240 3155 	movw	r1, #853	; 0x355
 800b35a:	482e      	ldr	r0, [pc, #184]	; (800b414 <sendBuffer+0x108>)
 800b35c:	f006 ff5e 	bl	801221c <__assert_func>
    assert( pIndex != NULL );
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d106      	bne.n	800b374 <sendBuffer+0x68>
 800b366:	4b2e      	ldr	r3, [pc, #184]	; (800b420 <sendBuffer+0x114>)
 800b368:	4a29      	ldr	r2, [pc, #164]	; (800b410 <sendBuffer+0x104>)
 800b36a:	f240 3156 	movw	r1, #854	; 0x356
 800b36e:	4829      	ldr	r0, [pc, #164]	; (800b414 <sendBuffer+0x108>)
 800b370:	f006 ff54 	bl	801221c <__assert_func>

    /* Set the timeout. */
    timeoutMs = pContext->getTime() + MQTT_SEND_TIMEOUT_MS;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b378:	4798      	blx	r3
 800b37a:	4603      	mov	r3, r0
 800b37c:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800b380:	3320      	adds	r3, #32
 800b382:	617b      	str	r3, [r7, #20]

    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b384:	e034      	b.n	800b3f0 <sendBuffer+0xe4>
    {
        sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	695b      	ldr	r3, [r3, #20]
 800b38a:	68fa      	ldr	r2, [r7, #12]
 800b38c:	69d0      	ldr	r0, [r2, #28]
                                                        pIndex,
                                                        bytesToSend - ( size_t ) bytesSentOrError );
 800b38e:	69fa      	ldr	r2, [r7, #28]
        sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800b390:	6879      	ldr	r1, [r7, #4]
 800b392:	1a8a      	subs	r2, r1, r2
 800b394:	69b9      	ldr	r1, [r7, #24]
 800b396:	4798      	blx	r3
 800b398:	6138      	str	r0, [r7, #16]

        if( sendResult > 0 )
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	dd1b      	ble.n	800b3d8 <sendBuffer+0xcc>
        {
            /* It is a bug in the application's transport send implementation if
             * more bytes than expected are sent. */
            assert( sendResult <= ( ( int32_t ) bytesToSend - bytesSentOrError ) );
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	1ad3      	subs	r3, r2, r3
 800b3a6:	693a      	ldr	r2, [r7, #16]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	dd06      	ble.n	800b3ba <sendBuffer+0xae>
 800b3ac:	4b1d      	ldr	r3, [pc, #116]	; (800b424 <sendBuffer+0x118>)
 800b3ae:	4a18      	ldr	r2, [pc, #96]	; (800b410 <sendBuffer+0x104>)
 800b3b0:	f240 3165 	movw	r1, #869	; 0x365
 800b3b4:	4817      	ldr	r0, [pc, #92]	; (800b414 <sendBuffer+0x108>)
 800b3b6:	f006 ff31 	bl	801221c <__assert_func>

            bytesSentOrError += sendResult;
 800b3ba:	69fa      	ldr	r2, [r7, #28]
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	4413      	add	r3, r2
 800b3c0:	61fb      	str	r3, [r7, #28]
            pIndex = &pIndex[ sendResult ];
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	69ba      	ldr	r2, [r7, #24]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	61bb      	str	r3, [r7, #24]

            /* Set last transmission time. */
            pContext->lastPacketTxTime = pContext->getTime();
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ce:	4798      	blx	r3
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	635a      	str	r2, [r3, #52]	; 0x34
 800b3d6:	e004      	b.n	800b3e2 <sendBuffer+0xd6>

            LogDebug( ( "sendBuffer: Bytes Sent=%ld, Bytes Remaining=%lu",
                        ( long int ) sendResult,
                        ( unsigned long ) ( bytesToSend - ( size_t ) bytesSentOrError ) ) );
        }
        else if( sendResult < 0 )
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	da01      	bge.n	800b3e2 <sendBuffer+0xd6>
        {
            bytesSentOrError = sendResult;
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	61fb      	str	r3, [r7, #28]
        {
            /* MISRA Empty body */
        }

        /* Check for timeout. */
        if( pContext->getTime() >= timeoutMs )
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e6:	4798      	blx	r3
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d907      	bls.n	800b400 <sendBuffer+0xf4>
    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	69fa      	ldr	r2, [r7, #28]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	da04      	bge.n	800b402 <sendBuffer+0xf6>
 800b3f8:	69fb      	ldr	r3, [r7, #28]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	dac3      	bge.n	800b386 <sendBuffer+0x7a>
 800b3fe:	e000      	b.n	800b402 <sendBuffer+0xf6>
        {
            LogError( ( "sendBuffer: Unable to send packet: Timed out." ) );
            break;
 800b400:	bf00      	nop
        }
    }

    return bytesSentOrError;
 800b402:	69fb      	ldr	r3, [r7, #28]
}
 800b404:	4618      	mov	r0, r3
 800b406:	3720      	adds	r7, #32
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}
 800b40c:	080147c4 	.word	0x080147c4
 800b410:	08015378 	.word	0x08015378
 800b414:	080146e8 	.word	0x080146e8
 800b418:	080147e8 	.word	0x080147e8
 800b41c:	08014804 	.word	0x08014804
 800b420:	08014870 	.word	0x08014870
 800b424:	08014830 	.word	0x08014830

0800b428 <calculateElapsedTime>:

/*-----------------------------------------------------------*/

static uint32_t calculateElapsedTime( uint32_t later,
                                      uint32_t start )
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
    return later - start;
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	1ad3      	subs	r3, r2, r3
}
 800b438:	4618      	mov	r0, r3
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <getAckFromPacketType>:

/*-----------------------------------------------------------*/

static MQTTPubAckType_t getAckFromPacketType( uint8_t packetType )
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	4603      	mov	r3, r0
 800b44c:	71fb      	strb	r3, [r7, #7]
    MQTTPubAckType_t ackType = MQTTPuback;
 800b44e:	2300      	movs	r3, #0
 800b450:	73fb      	strb	r3, [r7, #15]

    switch( packetType )
 800b452:	79fb      	ldrb	r3, [r7, #7]
 800b454:	2b62      	cmp	r3, #98	; 0x62
 800b456:	d00c      	beq.n	800b472 <getAckFromPacketType+0x2e>
 800b458:	2b62      	cmp	r3, #98	; 0x62
 800b45a:	dc0d      	bgt.n	800b478 <getAckFromPacketType+0x34>
 800b45c:	2b40      	cmp	r3, #64	; 0x40
 800b45e:	d002      	beq.n	800b466 <getAckFromPacketType+0x22>
 800b460:	2b50      	cmp	r3, #80	; 0x50
 800b462:	d003      	beq.n	800b46c <getAckFromPacketType+0x28>
 800b464:	e008      	b.n	800b478 <getAckFromPacketType+0x34>
    {
        case MQTT_PACKET_TYPE_PUBACK:
            ackType = MQTTPuback;
 800b466:	2300      	movs	r3, #0
 800b468:	73fb      	strb	r3, [r7, #15]
            break;
 800b46a:	e012      	b.n	800b492 <getAckFromPacketType+0x4e>

        case MQTT_PACKET_TYPE_PUBREC:
            ackType = MQTTPubrec;
 800b46c:	2301      	movs	r3, #1
 800b46e:	73fb      	strb	r3, [r7, #15]
            break;
 800b470:	e00f      	b.n	800b492 <getAckFromPacketType+0x4e>

        case MQTT_PACKET_TYPE_PUBREL:
            ackType = MQTTPubrel;
 800b472:	2302      	movs	r3, #2
 800b474:	73fb      	strb	r3, [r7, #15]
            break;
 800b476:	e00c      	b.n	800b492 <getAckFromPacketType+0x4e>
        case MQTT_PACKET_TYPE_PUBCOMP:
        default:

            /* This function is only called after checking the type is one of
             * the above four values, so packet type must be PUBCOMP here. */
            assert( packetType == MQTT_PACKET_TYPE_PUBCOMP );
 800b478:	79fb      	ldrb	r3, [r7, #7]
 800b47a:	2b70      	cmp	r3, #112	; 0x70
 800b47c:	d006      	beq.n	800b48c <getAckFromPacketType+0x48>
 800b47e:	4b07      	ldr	r3, [pc, #28]	; (800b49c <getAckFromPacketType+0x58>)
 800b480:	4a07      	ldr	r2, [pc, #28]	; (800b4a0 <getAckFromPacketType+0x5c>)
 800b482:	f240 31a7 	movw	r1, #935	; 0x3a7
 800b486:	4807      	ldr	r0, [pc, #28]	; (800b4a4 <getAckFromPacketType+0x60>)
 800b488:	f006 fec8 	bl	801221c <__assert_func>
            ackType = MQTTPubcomp;
 800b48c:	2303      	movs	r3, #3
 800b48e:	73fb      	strb	r3, [r7, #15]
            break;
 800b490:	bf00      	nop
    }

    return ackType;
 800b492:	7bfb      	ldrb	r3, [r7, #15]
}
 800b494:	4618      	mov	r0, r3
 800b496:	3710      	adds	r7, #16
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	08014880 	.word	0x08014880
 800b4a0:	08015384 	.word	0x08015384
 800b4a4:	080146e8 	.word	0x080146e8

0800b4a8 <recvExact>:

/*-----------------------------------------------------------*/

static int32_t recvExact( const MQTTContext_t * pContext,
                          size_t bytesToRecv )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b08c      	sub	sp, #48	; 0x30
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
    uint8_t * pIndex = NULL;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t bytesRemaining = bytesToRecv;
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t totalBytesRecvd = 0, bytesRecvd;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t lastDataRecvTimeMs = 0U, timeSinceLastRecvMs = 0U;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	623b      	str	r3, [r7, #32]
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	61bb      	str	r3, [r7, #24]
    TransportRecv_t recvFunc = NULL;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	617b      	str	r3, [r7, #20]
    MQTTGetCurrentTimeFunc_t getTimeStampMs = NULL;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	613b      	str	r3, [r7, #16]
    bool receiveError = false;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	77fb      	strb	r3, [r7, #31]

    assert( pContext != NULL );
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d106      	bne.n	800b4e6 <recvExact+0x3e>
 800b4d8:	4b44      	ldr	r3, [pc, #272]	; (800b5ec <recvExact+0x144>)
 800b4da:	4a45      	ldr	r2, [pc, #276]	; (800b5f0 <recvExact+0x148>)
 800b4dc:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 800b4e0:	4844      	ldr	r0, [pc, #272]	; (800b5f4 <recvExact+0x14c>)
 800b4e2:	f006 fe9b 	bl	801221c <__assert_func>
    assert( bytesToRecv <= pContext->networkBuffer.size );
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ea:	683a      	ldr	r2, [r7, #0]
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d906      	bls.n	800b4fe <recvExact+0x56>
 800b4f0:	4b41      	ldr	r3, [pc, #260]	; (800b5f8 <recvExact+0x150>)
 800b4f2:	4a3f      	ldr	r2, [pc, #252]	; (800b5f0 <recvExact+0x148>)
 800b4f4:	f240 31bd 	movw	r1, #957	; 0x3bd
 800b4f8:	483e      	ldr	r0, [pc, #248]	; (800b5f4 <recvExact+0x14c>)
 800b4fa:	f006 fe8f 	bl	801221c <__assert_func>
    assert( pContext->getTime != NULL );
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b502:	2b00      	cmp	r3, #0
 800b504:	d106      	bne.n	800b514 <recvExact+0x6c>
 800b506:	4b3d      	ldr	r3, [pc, #244]	; (800b5fc <recvExact+0x154>)
 800b508:	4a39      	ldr	r2, [pc, #228]	; (800b5f0 <recvExact+0x148>)
 800b50a:	f240 31be 	movw	r1, #958	; 0x3be
 800b50e:	4839      	ldr	r0, [pc, #228]	; (800b5f4 <recvExact+0x14c>)
 800b510:	f006 fe84 	bl	801221c <__assert_func>
    assert( pContext->transportInterface.recv != NULL );
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	691b      	ldr	r3, [r3, #16]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d106      	bne.n	800b52a <recvExact+0x82>
 800b51c:	4b38      	ldr	r3, [pc, #224]	; (800b600 <recvExact+0x158>)
 800b51e:	4a34      	ldr	r2, [pc, #208]	; (800b5f0 <recvExact+0x148>)
 800b520:	f240 31bf 	movw	r1, #959	; 0x3bf
 800b524:	4833      	ldr	r0, [pc, #204]	; (800b5f4 <recvExact+0x14c>)
 800b526:	f006 fe79 	bl	801221c <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a1b      	ldr	r3, [r3, #32]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d106      	bne.n	800b540 <recvExact+0x98>
 800b532:	4b34      	ldr	r3, [pc, #208]	; (800b604 <recvExact+0x15c>)
 800b534:	4a2e      	ldr	r2, [pc, #184]	; (800b5f0 <recvExact+0x148>)
 800b536:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800b53a:	482e      	ldr	r0, [pc, #184]	; (800b5f4 <recvExact+0x14c>)
 800b53c:	f006 fe6e 	bl	801221c <__assert_func>

    pIndex = pContext->networkBuffer.pBuffer;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6a1b      	ldr	r3, [r3, #32]
 800b544:	62fb      	str	r3, [r7, #44]	; 0x2c
    recvFunc = pContext->transportInterface.recv;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	691b      	ldr	r3, [r3, #16]
 800b54a:	617b      	str	r3, [r7, #20]
    getTimeStampMs = pContext->getTime;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b550:	613b      	str	r3, [r7, #16]

    /* Part of the MQTT packet has been read before calling this function. */
    lastDataRecvTimeMs = getTimeStampMs();
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	4798      	blx	r3
 800b556:	6238      	str	r0, [r7, #32]

    while( ( bytesRemaining > 0U ) && ( receiveError == false ) )
 800b558:	e039      	b.n	800b5ce <recvExact+0x126>
    {
        bytesRecvd = recvFunc( pContext->transportInterface.pNetworkContext,
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	69d8      	ldr	r0, [r3, #28]
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b562:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b564:	4798      	blx	r3
 800b566:	60f8      	str	r0, [r7, #12]
                               pIndex,
                               bytesRemaining );

        if( bytesRecvd < 0 )
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	da04      	bge.n	800b578 <recvExact+0xd0>
        {
            LogError( ( "Network error while receiving packet: ReturnCode=%ld.",
                        ( long int ) bytesRecvd ) );
            totalBytesRecvd = bytesRecvd;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	627b      	str	r3, [r7, #36]	; 0x24
            receiveError = true;
 800b572:	2301      	movs	r3, #1
 800b574:	77fb      	strb	r3, [r7, #31]
 800b576:	e02a      	b.n	800b5ce <recvExact+0x126>
        }
        else if( bytesRecvd > 0 )
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	dd1a      	ble.n	800b5b4 <recvExact+0x10c>
        {
            /* Reset the starting time as we have received some data from the network. */
            lastDataRecvTimeMs = getTimeStampMs();
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	4798      	blx	r3
 800b582:	6238      	str	r0, [r7, #32]
            /* It is a bug in the application's transport receive implementation
             * if more bytes than expected are received. To avoid a possible
             * overflow in converting bytesRemaining from unsigned to signed,
             * this assert must exist after the check for bytesRecvd being
             * negative. */
            assert( ( size_t ) bytesRecvd <= bytesRemaining );
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b588:	429a      	cmp	r2, r3
 800b58a:	d206      	bcs.n	800b59a <recvExact+0xf2>
 800b58c:	4b1e      	ldr	r3, [pc, #120]	; (800b608 <recvExact+0x160>)
 800b58e:	4a18      	ldr	r2, [pc, #96]	; (800b5f0 <recvExact+0x148>)
 800b590:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 800b594:	4817      	ldr	r0, [pc, #92]	; (800b5f4 <recvExact+0x14c>)
 800b596:	f006 fe41 	bl	801221c <__assert_func>

            bytesRemaining -= ( size_t ) bytesRecvd;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b59e:	1ad3      	subs	r3, r2, r3
 800b5a0:	62bb      	str	r3, [r7, #40]	; 0x28
            totalBytesRecvd += ( int32_t ) bytesRecvd;
 800b5a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	4413      	add	r3, r2
 800b5a8:	627b      	str	r3, [r7, #36]	; 0x24
            /* Increment the index. */
            pIndex = &pIndex[ bytesRecvd ];
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5ae:	4413      	add	r3, r2
 800b5b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5b2:	e00c      	b.n	800b5ce <recvExact+0x126>
                        ( long int ) totalBytesRecvd ) );
        }
        else
        {
            /* No bytes were read from the network. */
            timeSinceLastRecvMs = calculateElapsedTime( getTimeStampMs(), lastDataRecvTimeMs );
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	4798      	blx	r3
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	6a39      	ldr	r1, [r7, #32]
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7ff ff33 	bl	800b428 <calculateElapsedTime>
 800b5c2:	61b8      	str	r0, [r7, #24]

            /* Check for timeout if we have been waiting to receive any byte on the network. */
            if( timeSinceLastRecvMs >= MQTT_RECV_POLLING_TIMEOUT_MS )
 800b5c4:	69bb      	ldr	r3, [r7, #24]
 800b5c6:	2b09      	cmp	r3, #9
 800b5c8:	d901      	bls.n	800b5ce <recvExact+0x126>
            {
                LogError( ( "Unable to receive packet: Timed out in transport recv." ) );
                receiveError = true;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	77fb      	strb	r3, [r7, #31]
    while( ( bytesRemaining > 0U ) && ( receiveError == false ) )
 800b5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d005      	beq.n	800b5e0 <recvExact+0x138>
 800b5d4:	7ffb      	ldrb	r3, [r7, #31]
 800b5d6:	f083 0301 	eor.w	r3, r3, #1
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d1bc      	bne.n	800b55a <recvExact+0xb2>
            }
        }
    }

    return totalBytesRecvd;
 800b5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3730      	adds	r7, #48	; 0x30
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	080147c4 	.word	0x080147c4
 800b5f0:	0801539c 	.word	0x0801539c
 800b5f4:	080146e8 	.word	0x080146e8
 800b5f8:	080148a8 	.word	0x080148a8
 800b5fc:	080147e8 	.word	0x080147e8
 800b600:	080148d4 	.word	0x080148d4
 800b604:	08014900 	.word	0x08014900
 800b608:	08014928 	.word	0x08014928

0800b60c <discardPacket>:
/*-----------------------------------------------------------*/

static MQTTStatus_t discardPacket( const MQTTContext_t * pContext,
                                   size_t remainingLength,
                                   uint32_t timeoutMs )
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b08c      	sub	sp, #48	; 0x30
 800b610:	af00      	add	r7, sp, #0
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTRecvFailed;
 800b618:	2304      	movs	r3, #4
 800b61a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int32_t bytesReceived = 0;
 800b61e:	2300      	movs	r3, #0
 800b620:	61fb      	str	r3, [r7, #28]
    size_t bytesToReceive = 0U;
 800b622:	2300      	movs	r3, #0
 800b624:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t totalBytesReceived = 0U;
 800b626:	2300      	movs	r3, #0
 800b628:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t entryTimeMs = 0U;
 800b62a:	2300      	movs	r3, #0
 800b62c:	61bb      	str	r3, [r7, #24]
    uint32_t elapsedTimeMs = 0U;
 800b62e:	2300      	movs	r3, #0
 800b630:	617b      	str	r3, [r7, #20]
    MQTTGetCurrentTimeFunc_t getTimeStampMs = NULL;
 800b632:	2300      	movs	r3, #0
 800b634:	613b      	str	r3, [r7, #16]
    bool receiveError = false;
 800b636:	2300      	movs	r3, #0
 800b638:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    assert( pContext != NULL );
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d106      	bne.n	800b650 <discardPacket+0x44>
 800b642:	4b2f      	ldr	r3, [pc, #188]	; (800b700 <discardPacket+0xf4>)
 800b644:	4a2f      	ldr	r2, [pc, #188]	; (800b704 <discardPacket+0xf8>)
 800b646:	f240 410b 	movw	r1, #1035	; 0x40b
 800b64a:	482f      	ldr	r0, [pc, #188]	; (800b708 <discardPacket+0xfc>)
 800b64c:	f006 fde6 	bl	801221c <__assert_func>
    assert( pContext->getTime != NULL );
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b654:	2b00      	cmp	r3, #0
 800b656:	d106      	bne.n	800b666 <discardPacket+0x5a>
 800b658:	4b2c      	ldr	r3, [pc, #176]	; (800b70c <discardPacket+0x100>)
 800b65a:	4a2a      	ldr	r2, [pc, #168]	; (800b704 <discardPacket+0xf8>)
 800b65c:	f240 410c 	movw	r1, #1036	; 0x40c
 800b660:	4829      	ldr	r0, [pc, #164]	; (800b708 <discardPacket+0xfc>)
 800b662:	f006 fddb 	bl	801221c <__assert_func>

    bytesToReceive = pContext->networkBuffer.size;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66a:	62bb      	str	r3, [r7, #40]	; 0x28
    getTimeStampMs = pContext->getTime;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b670:	613b      	str	r3, [r7, #16]

    entryTimeMs = getTimeStampMs();
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	4798      	blx	r3
 800b676:	61b8      	str	r0, [r7, #24]

    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800b678:	e029      	b.n	800b6ce <discardPacket+0xc2>
    {
        if( ( remainingLength - totalBytesReceived ) < bytesToReceive )
 800b67a:	68ba      	ldr	r2, [r7, #8]
 800b67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67e:	1ad3      	subs	r3, r2, r3
 800b680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b682:	429a      	cmp	r2, r3
 800b684:	d903      	bls.n	800b68e <discardPacket+0x82>
        {
            bytesToReceive = remainingLength - totalBytesReceived;
 800b686:	68ba      	ldr	r2, [r7, #8]
 800b688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68a:	1ad3      	subs	r3, r2, r3
 800b68c:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        bytesReceived = recvExact( pContext, bytesToReceive );
 800b68e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b690:	68f8      	ldr	r0, [r7, #12]
 800b692:	f7ff ff09 	bl	800b4a8 <recvExact>
 800b696:	61f8      	str	r0, [r7, #28]

        if( bytesReceived != ( int32_t ) bytesToReceive )
 800b698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69a:	69fa      	ldr	r2, [r7, #28]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d003      	beq.n	800b6a8 <discardPacket+0x9c>
        {
            LogError( ( "Receive error while discarding packet."
                        "ReceivedBytes=%ld, ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            receiveError = true;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6a6:	e012      	b.n	800b6ce <discardPacket+0xc2>
        }
        else
        {
            totalBytesReceived += ( uint32_t ) bytesReceived;
 800b6a8:	69fb      	ldr	r3, [r7, #28]
 800b6aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6ac:	4413      	add	r3, r2
 800b6ae:	627b      	str	r3, [r7, #36]	; 0x24

            elapsedTimeMs = calculateElapsedTime( getTimeStampMs(), entryTimeMs );
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	4798      	blx	r3
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	69b9      	ldr	r1, [r7, #24]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7ff feb5 	bl	800b428 <calculateElapsedTime>
 800b6be:	6178      	str	r0, [r7, #20]

            /* Check for timeout. */
            if( elapsedTimeMs >= timeoutMs )
 800b6c0:	697a      	ldr	r2, [r7, #20]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d302      	bcc.n	800b6ce <discardPacket+0xc2>
            {
                LogError( ( "Time expired while discarding packet." ) );
                receiveError = true;
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800b6ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d206      	bcs.n	800b6e4 <discardPacket+0xd8>
 800b6d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6da:	f083 0301 	eor.w	r3, r3, #1
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d1ca      	bne.n	800b67a <discardPacket+0x6e>
            }
        }
    }

    if( totalBytesReceived == remainingLength )
 800b6e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d102      	bne.n	800b6f2 <discardPacket+0xe6>
    {
        LogError( ( "Dumped packet. DumpedBytes=%lu.",
                    ( unsigned long ) totalBytesReceived ) );
        /* Packet dumped, so no data is available. */
        status = MQTTNoDataAvailable;
 800b6ec:	2307      	movs	r3, #7
 800b6ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 800b6f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3730      	adds	r7, #48	; 0x30
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	080147c4 	.word	0x080147c4
 800b704:	080153a8 	.word	0x080153a8
 800b708:	080146e8 	.word	0x080146e8
 800b70c:	080147e8 	.word	0x080147e8

0800b710 <discardStoredPacket>:

/*-----------------------------------------------------------*/

static MQTTStatus_t discardStoredPacket( MQTTContext_t * pContext,
                                         const MQTTPacketInfo_t * pPacketInfo )
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b08a      	sub	sp, #40	; 0x28
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTRecvFailed;
 800b71a:	2304      	movs	r3, #4
 800b71c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int32_t bytesReceived = 0;
 800b720:	2300      	movs	r3, #0
 800b722:	617b      	str	r3, [r7, #20]
    size_t bytesToReceive = 0U;
 800b724:	2300      	movs	r3, #0
 800b726:	623b      	str	r3, [r7, #32]
    uint32_t totalBytesReceived = 0U;
 800b728:	2300      	movs	r3, #0
 800b72a:	61fb      	str	r3, [r7, #28]
    bool receiveError = false;
 800b72c:	2300      	movs	r3, #0
 800b72e:	76fb      	strb	r3, [r7, #27]
    size_t mqttPacketSize = 0;
 800b730:	2300      	movs	r3, #0
 800b732:	613b      	str	r3, [r7, #16]
    size_t remainingLength;

    assert( pContext != NULL );
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d106      	bne.n	800b748 <discardStoredPacket+0x38>
 800b73a:	4b34      	ldr	r3, [pc, #208]	; (800b80c <discardStoredPacket+0xfc>)
 800b73c:	4a34      	ldr	r2, [pc, #208]	; (800b810 <discardStoredPacket+0x100>)
 800b73e:	f240 414b 	movw	r1, #1099	; 0x44b
 800b742:	4834      	ldr	r0, [pc, #208]	; (800b814 <discardStoredPacket+0x104>)
 800b744:	f006 fd6a 	bl	801221c <__assert_func>
    assert( pPacketInfo != NULL );
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d106      	bne.n	800b75c <discardStoredPacket+0x4c>
 800b74e:	4b32      	ldr	r3, [pc, #200]	; (800b818 <discardStoredPacket+0x108>)
 800b750:	4a2f      	ldr	r2, [pc, #188]	; (800b810 <discardStoredPacket+0x100>)
 800b752:	f240 414c 	movw	r1, #1100	; 0x44c
 800b756:	482f      	ldr	r0, [pc, #188]	; (800b814 <discardStoredPacket+0x104>)
 800b758:	f006 fd60 	bl	801221c <__assert_func>

    mqttPacketSize = pPacketInfo->remainingLength + pPacketInfo->headerLength;
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	689a      	ldr	r2, [r3, #8]
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	68db      	ldr	r3, [r3, #12]
 800b764:	4413      	add	r3, r2
 800b766:	613b      	str	r3, [r7, #16]

    /* Assert that the packet being discarded is bigger than the
     * receive buffer. */
    assert( mqttPacketSize > pContext->networkBuffer.size );
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b76c:	693a      	ldr	r2, [r7, #16]
 800b76e:	429a      	cmp	r2, r3
 800b770:	d806      	bhi.n	800b780 <discardStoredPacket+0x70>
 800b772:	4b2a      	ldr	r3, [pc, #168]	; (800b81c <discardStoredPacket+0x10c>)
 800b774:	4a26      	ldr	r2, [pc, #152]	; (800b810 <discardStoredPacket+0x100>)
 800b776:	f240 4152 	movw	r1, #1106	; 0x452
 800b77a:	4826      	ldr	r0, [pc, #152]	; (800b814 <discardStoredPacket+0x104>)
 800b77c:	f006 fd4e 	bl	801221c <__assert_func>

    /* Discard these many bytes at a time. */
    bytesToReceive = pContext->networkBuffer.size;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b784:	623b      	str	r3, [r7, #32]

    /* Number of bytes depicted by 'index' have already been received. */
    remainingLength = mqttPacketSize - pContext->index;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b78a:	693a      	ldr	r2, [r7, #16]
 800b78c:	1ad3      	subs	r3, r2, r3
 800b78e:	60fb      	str	r3, [r7, #12]

    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800b790:	e019      	b.n	800b7c6 <discardStoredPacket+0xb6>
    {
        if( ( remainingLength - totalBytesReceived ) < bytesToReceive )
 800b792:	68fa      	ldr	r2, [r7, #12]
 800b794:	69fb      	ldr	r3, [r7, #28]
 800b796:	1ad3      	subs	r3, r2, r3
 800b798:	6a3a      	ldr	r2, [r7, #32]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d903      	bls.n	800b7a6 <discardStoredPacket+0x96>
        {
            bytesToReceive = remainingLength - totalBytesReceived;
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	69fb      	ldr	r3, [r7, #28]
 800b7a2:	1ad3      	subs	r3, r2, r3
 800b7a4:	623b      	str	r3, [r7, #32]
        }

        bytesReceived = recvExact( pContext, bytesToReceive );
 800b7a6:	6a39      	ldr	r1, [r7, #32]
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f7ff fe7d 	bl	800b4a8 <recvExact>
 800b7ae:	6178      	str	r0, [r7, #20]

        if( bytesReceived != ( int32_t ) bytesToReceive )
 800b7b0:	6a3b      	ldr	r3, [r7, #32]
 800b7b2:	697a      	ldr	r2, [r7, #20]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d002      	beq.n	800b7be <discardStoredPacket+0xae>
        {
            LogError( ( "Receive error while discarding packet."
                        "ReceivedBytes=%ld, ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            receiveError = true;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	76fb      	strb	r3, [r7, #27]
 800b7bc:	e003      	b.n	800b7c6 <discardStoredPacket+0xb6>
        }
        else
        {
            totalBytesReceived += ( uint32_t ) bytesReceived;
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	69fa      	ldr	r2, [r7, #28]
 800b7c2:	4413      	add	r3, r2
 800b7c4:	61fb      	str	r3, [r7, #28]
    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800b7c6:	69fa      	ldr	r2, [r7, #28]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d205      	bcs.n	800b7da <discardStoredPacket+0xca>
 800b7ce:	7efb      	ldrb	r3, [r7, #27]
 800b7d0:	f083 0301 	eor.w	r3, r3, #1
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d1db      	bne.n	800b792 <discardStoredPacket+0x82>
        }
    }

    if( totalBytesReceived == remainingLength )
 800b7da:	69fa      	ldr	r2, [r7, #28]
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d102      	bne.n	800b7e8 <discardStoredPacket+0xd8>
    {
        LogError( ( "Dumped packet. DumpedBytes=%lu.",
                    ( unsigned long ) totalBytesReceived ) );
        /* Packet dumped, so no data is available. */
        status = MQTTNoDataAvailable;
 800b7e2:	2307      	movs	r3, #7
 800b7e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Clear the buffer */
    ( void ) memset( pContext->networkBuffer.pBuffer,
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6a18      	ldr	r0, [r3, #32]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	f006 fe9d 	bl	8012532 <memset>
                     0,
                     pContext->networkBuffer.size );

    /* Reset the index. */
    pContext->index = 0;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	641a      	str	r2, [r3, #64]	; 0x40

    return status;
 800b7fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b802:	4618      	mov	r0, r3
 800b804:	3728      	adds	r7, #40	; 0x28
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	080147c4 	.word	0x080147c4
 800b810:	080153b8 	.word	0x080153b8
 800b814:	080146e8 	.word	0x080146e8
 800b818:	08014950 	.word	0x08014950
 800b81c:	08014964 	.word	0x08014964

0800b820 <receivePacket>:
/*-----------------------------------------------------------*/

static MQTTStatus_t receivePacket( const MQTTContext_t * pContext,
                                   MQTTPacketInfo_t incomingPacket,
                                   uint32_t remainingTimeMs )
{
 800b820:	b084      	sub	sp, #16
 800b822:	b580      	push	{r7, lr}
 800b824:	b086      	sub	sp, #24
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
 800b82a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b82e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    MQTTStatus_t status = MQTTSuccess;
 800b832:	2300      	movs	r3, #0
 800b834:	75fb      	strb	r3, [r7, #23]
    int32_t bytesReceived = 0;
 800b836:	2300      	movs	r3, #0
 800b838:	613b      	str	r3, [r7, #16]
    size_t bytesToReceive = 0U;
 800b83a:	2300      	movs	r3, #0
 800b83c:	60fb      	str	r3, [r7, #12]

    assert( pContext != NULL );
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d106      	bne.n	800b852 <receivePacket+0x32>
 800b844:	4b1a      	ldr	r3, [pc, #104]	; (800b8b0 <receivePacket+0x90>)
 800b846:	4a1b      	ldr	r2, [pc, #108]	; (800b8b4 <receivePacket+0x94>)
 800b848:	f240 418e 	movw	r1, #1166	; 0x48e
 800b84c:	481a      	ldr	r0, [pc, #104]	; (800b8b8 <receivePacket+0x98>)
 800b84e:	f006 fce5 	bl	801221c <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6a1b      	ldr	r3, [r3, #32]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d106      	bne.n	800b868 <receivePacket+0x48>
 800b85a:	4b18      	ldr	r3, [pc, #96]	; (800b8bc <receivePacket+0x9c>)
 800b85c:	4a15      	ldr	r2, [pc, #84]	; (800b8b4 <receivePacket+0x94>)
 800b85e:	f240 418f 	movw	r1, #1167	; 0x48f
 800b862:	4815      	ldr	r0, [pc, #84]	; (800b8b8 <receivePacket+0x98>)
 800b864:	f006 fcda 	bl	801221c <__assert_func>

    if( incomingPacket.remainingLength > pContext->networkBuffer.size )
 800b868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86e:	429a      	cmp	r2, r3
 800b870:	d908      	bls.n	800b884 <receivePacket+0x64>
        LogError( ( "Incoming packet will be dumped: "
                    "Packet length exceeds network buffer size."
                    "PacketSize=%lu, NetworkBufferSize=%lu.",
                    ( unsigned long ) incomingPacket.remainingLength,
                    ( unsigned long ) pContext->networkBuffer.size ) );
        status = discardPacket( pContext,
 800b872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b874:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b876:	4619      	mov	r1, r3
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f7ff fec7 	bl	800b60c <discardPacket>
 800b87e:	4603      	mov	r3, r0
 800b880:	75fb      	strb	r3, [r7, #23]
 800b882:	e00c      	b.n	800b89e <receivePacket+0x7e>
                                incomingPacket.remainingLength,
                                remainingTimeMs );
    }
    else
    {
        bytesToReceive = incomingPacket.remainingLength;
 800b884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b886:	60fb      	str	r3, [r7, #12]
        bytesReceived = recvExact( pContext, bytesToReceive );
 800b888:	68f9      	ldr	r1, [r7, #12]
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f7ff fe0c 	bl	800b4a8 <recvExact>
 800b890:	6138      	str	r0, [r7, #16]

        if( bytesReceived == ( int32_t ) bytesToReceive )
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	693a      	ldr	r2, [r7, #16]
 800b896:	429a      	cmp	r2, r3
 800b898:	d001      	beq.n	800b89e <receivePacket+0x7e>
        {
            LogError( ( "Packet reception failed. ReceivedBytes=%ld, "
                        "ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            status = MQTTRecvFailed;
 800b89a:	2304      	movs	r3, #4
 800b89c:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800b89e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3718      	adds	r7, #24
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b8aa:	b004      	add	sp, #16
 800b8ac:	4770      	bx	lr
 800b8ae:	bf00      	nop
 800b8b0:	080147c4 	.word	0x080147c4
 800b8b4:	080153cc 	.word	0x080153cc
 800b8b8:	080146e8 	.word	0x080146e8
 800b8bc:	08014900 	.word	0x08014900

0800b8c0 <getAckTypeToSend>:

/*-----------------------------------------------------------*/

static uint8_t getAckTypeToSend( MQTTPublishState_t state )
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	71fb      	strb	r3, [r7, #7]
    uint8_t packetTypeByte = 0U;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	73fb      	strb	r3, [r7, #15]

    switch( state )
 800b8ce:	79fb      	ldrb	r3, [r7, #7]
 800b8d0:	3b02      	subs	r3, #2
 800b8d2:	2b03      	cmp	r3, #3
 800b8d4:	d816      	bhi.n	800b904 <getAckTypeToSend+0x44>
 800b8d6:	a201      	add	r2, pc, #4	; (adr r2, 800b8dc <getAckTypeToSend+0x1c>)
 800b8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8dc:	0800b8ed 	.word	0x0800b8ed
 800b8e0:	0800b8f3 	.word	0x0800b8f3
 800b8e4:	0800b8f9 	.word	0x0800b8f9
 800b8e8:	0800b8ff 	.word	0x0800b8ff
    {
        case MQTTPubAckSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBACK;
 800b8ec:	2340      	movs	r3, #64	; 0x40
 800b8ee:	73fb      	strb	r3, [r7, #15]
            break;
 800b8f0:	e009      	b.n	800b906 <getAckTypeToSend+0x46>

        case MQTTPubRecSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBREC;
 800b8f2:	2350      	movs	r3, #80	; 0x50
 800b8f4:	73fb      	strb	r3, [r7, #15]
            break;
 800b8f6:	e006      	b.n	800b906 <getAckTypeToSend+0x46>

        case MQTTPubRelSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBREL;
 800b8f8:	2362      	movs	r3, #98	; 0x62
 800b8fa:	73fb      	strb	r3, [r7, #15]
            break;
 800b8fc:	e003      	b.n	800b906 <getAckTypeToSend+0x46>

        case MQTTPubCompSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBCOMP;
 800b8fe:	2370      	movs	r3, #112	; 0x70
 800b900:	73fb      	strb	r3, [r7, #15]
            break;
 800b902:	e000      	b.n	800b906 <getAckTypeToSend+0x46>
        case MQTTPublishDone:
        case MQTTPublishSend:
        case MQTTStateNull:
        default:
            /* Take no action for states that do not require sending an ack. */
            break;
 800b904:	bf00      	nop
    }

    return packetTypeByte;
 800b906:	7bfb      	ldrb	r3, [r7, #15]
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3714      	adds	r7, #20
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <sendPublishAcks>:
/*-----------------------------------------------------------*/

static MQTTStatus_t sendPublishAcks( MQTTContext_t * pContext,
                                     uint16_t packetId,
                                     MQTTPublishState_t publishState )
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b08a      	sub	sp, #40	; 0x28
 800b918:	af02      	add	r7, sp, #8
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	460b      	mov	r3, r1
 800b91e:	807b      	strh	r3, [r7, #2]
 800b920:	4613      	mov	r3, r2
 800b922:	707b      	strb	r3, [r7, #1]
    MQTTStatus_t status = MQTTSuccess;
 800b924:	2300      	movs	r3, #0
 800b926:	77fb      	strb	r3, [r7, #31]
    MQTTPublishState_t newState = MQTTStateNull;
 800b928:	2300      	movs	r3, #0
 800b92a:	757b      	strb	r3, [r7, #21]
    int32_t sendResult = 0;
 800b92c:	2300      	movs	r3, #0
 800b92e:	61bb      	str	r3, [r7, #24]
    uint8_t packetTypeByte = 0U;
 800b930:	2300      	movs	r3, #0
 800b932:	75fb      	strb	r3, [r7, #23]
    MQTTPubAckType_t packetType;
    MQTTFixedBuffer_t localBuffer;
    uint8_t pubAckPacket[ MQTT_PUBLISH_ACK_PACKET_SIZE ];

    localBuffer.pBuffer = pubAckPacket;
 800b934:	f107 0308 	add.w	r3, r7, #8
 800b938:	60fb      	str	r3, [r7, #12]
    localBuffer.size = MQTT_PUBLISH_ACK_PACKET_SIZE;
 800b93a:	2304      	movs	r3, #4
 800b93c:	613b      	str	r3, [r7, #16]

    assert( pContext != NULL );
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d106      	bne.n	800b952 <sendPublishAcks+0x3e>
 800b944:	4b21      	ldr	r3, [pc, #132]	; (800b9cc <sendPublishAcks+0xb8>)
 800b946:	4a22      	ldr	r2, [pc, #136]	; (800b9d0 <sendPublishAcks+0xbc>)
 800b948:	f240 41ec 	movw	r1, #1260	; 0x4ec
 800b94c:	4821      	ldr	r0, [pc, #132]	; (800b9d4 <sendPublishAcks+0xc0>)
 800b94e:	f006 fc65 	bl	801221c <__assert_func>

    packetTypeByte = getAckTypeToSend( publishState );
 800b952:	787b      	ldrb	r3, [r7, #1]
 800b954:	4618      	mov	r0, r3
 800b956:	f7ff ffb3 	bl	800b8c0 <getAckTypeToSend>
 800b95a:	4603      	mov	r3, r0
 800b95c:	75fb      	strb	r3, [r7, #23]

    if( packetTypeByte != 0U )
 800b95e:	7dfb      	ldrb	r3, [r7, #23]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d02d      	beq.n	800b9c0 <sendPublishAcks+0xac>
    {
        packetType = getAckFromPacketType( packetTypeByte );
 800b964:	7dfb      	ldrb	r3, [r7, #23]
 800b966:	4618      	mov	r0, r3
 800b968:	f7ff fd6c 	bl	800b444 <getAckFromPacketType>
 800b96c:	4603      	mov	r3, r0
 800b96e:	75bb      	strb	r3, [r7, #22]

        status = MQTT_SerializeAck( &localBuffer,
 800b970:	887a      	ldrh	r2, [r7, #2]
 800b972:	7df9      	ldrb	r1, [r7, #23]
 800b974:	f107 030c 	add.w	r3, r7, #12
 800b978:	4618      	mov	r0, r3
 800b97a:	f002 f8f1 	bl	800db60 <MQTT_SerializeAck>
 800b97e:	4603      	mov	r3, r0
 800b980:	77fb      	strb	r3, [r7, #31]
                                    packetTypeByte,
                                    packetId );

        if( status == MQTTSuccess )
 800b982:	7ffb      	ldrb	r3, [r7, #31]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d106      	bne.n	800b996 <sendPublishAcks+0x82>
            MQTT_PRE_SEND_HOOK( pContext );

            /* Here, we are not using the vector approach for efficiency. There is just one buffer
             * to be sent which can be achieved with a normal send call. */
            sendResult = sendBuffer( pContext,
                                     localBuffer.pBuffer,
 800b988:	68fb      	ldr	r3, [r7, #12]
            sendResult = sendBuffer( pContext,
 800b98a:	2204      	movs	r2, #4
 800b98c:	4619      	mov	r1, r3
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f7ff fcbc 	bl	800b30c <sendBuffer>
 800b994:	61b8      	str	r0, [r7, #24]
                                     MQTT_PUBLISH_ACK_PACKET_SIZE );

            MQTT_POST_SEND_HOOK( pContext );
        }

        if( sendResult == ( int32_t ) MQTT_PUBLISH_ACK_PACKET_SIZE )
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	2b04      	cmp	r3, #4
 800b99a:	d10f      	bne.n	800b9bc <sendPublishAcks+0xa8>
        {
            pContext->controlPacketSent = true;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            MQTT_PRE_STATE_UPDATE_HOOK( pContext );

            status = MQTT_UpdateStateAck( pContext,
 800b9a4:	7dba      	ldrb	r2, [r7, #22]
 800b9a6:	8879      	ldrh	r1, [r7, #2]
 800b9a8:	f107 0315 	add.w	r3, r7, #21
 800b9ac:	9300      	str	r3, [sp, #0]
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f002 ffa1 	bl	800e8f8 <MQTT_UpdateStateAck>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	77fb      	strb	r3, [r7, #31]
 800b9ba:	e001      	b.n	800b9c0 <sendPublishAcks+0xac>
        {
            LogError( ( "Failed to send ACK packet: PacketType=%02x, SentBytes=%ld, "
                        "PacketSize=%lu.",
                        ( unsigned int ) packetTypeByte, ( long int ) sendResult,
                        MQTT_PUBLISH_ACK_PACKET_SIZE ) );
            status = MQTTSendFailed;
 800b9bc:	2303      	movs	r3, #3
 800b9be:	77fb      	strb	r3, [r7, #31]
        }
    }

    return status;
 800b9c0:	7ffb      	ldrb	r3, [r7, #31]
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3720      	adds	r7, #32
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop
 800b9cc:	080147c4 	.word	0x080147c4
 800b9d0:	080153dc 	.word	0x080153dc
 800b9d4:	080146e8 	.word	0x080146e8

0800b9d8 <handleKeepAlive>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleKeepAlive( MQTTContext_t * pContext )
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b086      	sub	sp, #24
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	75fb      	strb	r3, [r7, #23]
    uint32_t now = 0U;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	60fb      	str	r3, [r7, #12]
    uint32_t packetTxTimeoutMs = 0U;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	613b      	str	r3, [r7, #16]

    assert( pContext != NULL );
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d106      	bne.n	800ba00 <handleKeepAlive+0x28>
 800b9f2:	4b33      	ldr	r3, [pc, #204]	; (800bac0 <handleKeepAlive+0xe8>)
 800b9f4:	4a33      	ldr	r2, [pc, #204]	; (800bac4 <handleKeepAlive+0xec>)
 800b9f6:	f240 512e 	movw	r1, #1326	; 0x52e
 800b9fa:	4833      	ldr	r0, [pc, #204]	; (800bac8 <handleKeepAlive+0xf0>)
 800b9fc:	f006 fc0e 	bl	801221c <__assert_func>
    assert( pContext->getTime != NULL );
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d106      	bne.n	800ba16 <handleKeepAlive+0x3e>
 800ba08:	4b30      	ldr	r3, [pc, #192]	; (800bacc <handleKeepAlive+0xf4>)
 800ba0a:	4a2e      	ldr	r2, [pc, #184]	; (800bac4 <handleKeepAlive+0xec>)
 800ba0c:	f240 512f 	movw	r1, #1327	; 0x52f
 800ba10:	482d      	ldr	r0, [pc, #180]	; (800bac8 <handleKeepAlive+0xf0>)
 800ba12:	f006 fc03 	bl	801221c <__assert_func>

    now = pContext->getTime();
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba1a:	4798      	blx	r3
 800ba1c:	60f8      	str	r0, [r7, #12]

    packetTxTimeoutMs = 1000U * ( uint32_t ) pContext->keepAliveIntervalSec;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ba24:	461a      	mov	r2, r3
 800ba26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ba2a:	fb02 f303 	mul.w	r3, r2, r3
 800ba2e:	613b      	str	r3, [r7, #16]

    if( PACKET_TX_TIMEOUT_MS < packetTxTimeoutMs )
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	f247 5230 	movw	r2, #30000	; 0x7530
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d902      	bls.n	800ba40 <handleKeepAlive+0x68>
    {
        packetTxTimeoutMs = PACKET_TX_TIMEOUT_MS;
 800ba3a:	f247 5330 	movw	r3, #30000	; 0x7530
 800ba3e:	613b      	str	r3, [r7, #16]
    }

    /* If keep alive interval is 0, it is disabled. */
    if( pContext->waitingForPingResp == true )
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d00d      	beq.n	800ba66 <handleKeepAlive+0x8e>
    {
        /* Has time expired? */
        if( calculateElapsedTime( now, pContext->pingReqSendTimeMs ) >
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba4e:	4619      	mov	r1, r3
 800ba50:	68f8      	ldr	r0, [r7, #12]
 800ba52:	f7ff fce9 	bl	800b428 <calculateElapsedTime>
 800ba56:	4603      	mov	r3, r0
 800ba58:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d929      	bls.n	800bab4 <handleKeepAlive+0xdc>
            MQTT_PINGRESP_TIMEOUT_MS )
        {
            status = MQTTKeepAliveTimeout;
 800ba60:	230a      	movs	r3, #10
 800ba62:	75fb      	strb	r3, [r7, #23]
 800ba64:	e026      	b.n	800bab4 <handleKeepAlive+0xdc>
        }
    }
    else
    {
        if( ( packetTxTimeoutMs != 0U ) && ( calculateElapsedTime( now, pContext->lastPacketTxTime ) >= packetTxTimeoutMs ) )
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d00f      	beq.n	800ba8c <handleKeepAlive+0xb4>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba70:	4619      	mov	r1, r3
 800ba72:	68f8      	ldr	r0, [r7, #12]
 800ba74:	f7ff fcd8 	bl	800b428 <calculateElapsedTime>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d805      	bhi.n	800ba8c <handleKeepAlive+0xb4>
        {
            status = MQTT_Ping( pContext );
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f001 f8c7 	bl	800cc14 <MQTT_Ping>
 800ba86:	4603      	mov	r3, r0
 800ba88:	75fb      	strb	r3, [r7, #23]
 800ba8a:	e013      	b.n	800bab4 <handleKeepAlive+0xdc>
        }
        else
        {
            const uint32_t timeElapsed = calculateElapsedTime( now, pContext->lastPacketRxTime );
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba90:	4619      	mov	r1, r3
 800ba92:	68f8      	ldr	r0, [r7, #12]
 800ba94:	f7ff fcc8 	bl	800b428 <calculateElapsedTime>
 800ba98:	60b8      	str	r0, [r7, #8]

            if( ( timeElapsed != 0U ) && ( timeElapsed >= PACKET_RX_TIMEOUT_MS ) )
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d009      	beq.n	800bab4 <handleKeepAlive+0xdc>
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	f247 522f 	movw	r2, #29999	; 0x752f
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d904      	bls.n	800bab4 <handleKeepAlive+0xdc>
            {
                status = MQTT_Ping( pContext );
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f001 f8b2 	bl	800cc14 <MQTT_Ping>
 800bab0:	4603      	mov	r3, r0
 800bab2:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return status;
 800bab4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3718      	adds	r7, #24
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	080147c4 	.word	0x080147c4
 800bac4:	080153ec 	.word	0x080153ec
 800bac8:	080146e8 	.word	0x080146e8
 800bacc:	080147e8 	.word	0x080147e8

0800bad0 <handleIncomingPublish>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleIncomingPublish( MQTTContext_t * pContext,
                                           MQTTPacketInfo_t * pIncomingPacket )
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b08e      	sub	sp, #56	; 0x38
 800bad4:	af02      	add	r7, sp, #8
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTBadParameter;
 800bada:	2301      	movs	r3, #1
 800badc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    MQTTPublishState_t publishRecordState = MQTTStateNull;
 800bae0:	2300      	movs	r3, #0
 800bae2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t packetIdentifier = 0U;
 800bae6:	2300      	movs	r3, #0
 800bae8:	857b      	strh	r3, [r7, #42]	; 0x2a
    MQTTPublishInfo_t publishInfo;
    MQTTDeserializedInfo_t deserializedInfo;
    bool duplicatePublish = false;
 800baea:	2300      	movs	r3, #0
 800baec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    assert( pContext != NULL );
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d106      	bne.n	800bb04 <handleIncomingPublish+0x34>
 800baf6:	4b43      	ldr	r3, [pc, #268]	; (800bc04 <handleIncomingPublish+0x134>)
 800baf8:	4a43      	ldr	r2, [pc, #268]	; (800bc08 <handleIncomingPublish+0x138>)
 800bafa:	f240 5164 	movw	r1, #1380	; 0x564
 800bafe:	4843      	ldr	r0, [pc, #268]	; (800bc0c <handleIncomingPublish+0x13c>)
 800bb00:	f006 fb8c 	bl	801221c <__assert_func>
    assert( pIncomingPacket != NULL );
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d106      	bne.n	800bb18 <handleIncomingPublish+0x48>
 800bb0a:	4b41      	ldr	r3, [pc, #260]	; (800bc10 <handleIncomingPublish+0x140>)
 800bb0c:	4a3e      	ldr	r2, [pc, #248]	; (800bc08 <handleIncomingPublish+0x138>)
 800bb0e:	f240 5165 	movw	r1, #1381	; 0x565
 800bb12:	483e      	ldr	r0, [pc, #248]	; (800bc0c <handleIncomingPublish+0x13c>)
 800bb14:	f006 fb82 	bl	801221c <__assert_func>
    assert( pContext->appCallback != NULL );
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d106      	bne.n	800bb2e <handleIncomingPublish+0x5e>
 800bb20:	4b3c      	ldr	r3, [pc, #240]	; (800bc14 <handleIncomingPublish+0x144>)
 800bb22:	4a39      	ldr	r2, [pc, #228]	; (800bc08 <handleIncomingPublish+0x138>)
 800bb24:	f240 5166 	movw	r1, #1382	; 0x566
 800bb28:	4838      	ldr	r0, [pc, #224]	; (800bc0c <handleIncomingPublish+0x13c>)
 800bb2a:	f006 fb77 	bl	801221c <__assert_func>

    status = MQTT_DeserializePublish( pIncomingPacket, &packetIdentifier, &publishInfo );
 800bb2e:	f107 0214 	add.w	r2, r7, #20
 800bb32:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800bb36:	4619      	mov	r1, r3
 800bb38:	6838      	ldr	r0, [r7, #0]
 800bb3a:	f002 f8a8 	bl	800dc8e <MQTT_DeserializePublish>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    LogInfo( ( "De-serialized incoming PUBLISH packet: DeserializerResult=%s.",
               MQTT_Status_strerror( status ) ) );

    if( ( status == MQTTSuccess ) &&
 800bb44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d109      	bne.n	800bb60 <handleIncomingPublish+0x90>
        ( pContext->incomingPublishRecords == NULL ) &&
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	685b      	ldr	r3, [r3, #4]
    if( ( status == MQTTSuccess ) &&
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d105      	bne.n	800bb60 <handleIncomingPublish+0x90>
        ( publishInfo.qos > MQTTQoS0 ) )
 800bb54:	7d3b      	ldrb	r3, [r7, #20]
        ( pContext->incomingPublishRecords == NULL ) &&
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d002      	beq.n	800bb60 <handleIncomingPublish+0x90>
    {
        LogError( ( "Incoming publish has QoS > MQTTQoS0 but incoming "
                    "publish records have not been initialized. Dropping the "
                    "incoming publish. Please call MQTT_InitStatefulQoS to enable "
                    "use of QoS1 and QoS2 publishes." ) );
        status = MQTTRecvFailed;
 800bb5a:	2304      	movs	r3, #4
 800bb5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800bb60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d122      	bne.n	800bbae <handleIncomingPublish+0xde>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        status = MQTT_UpdateStatePublish( pContext,
 800bb68:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800bb6a:	7d3a      	ldrb	r2, [r7, #20]
 800bb6c:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800bb70:	9300      	str	r3, [sp, #0]
 800bb72:	4613      	mov	r3, r2
 800bb74:	2201      	movs	r2, #1
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f002 fe4b 	bl	800e812 <MQTT_UpdateStatePublish>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                          publishInfo.qos,
                                          &publishRecordState );

        MQTT_POST_STATE_UPDATE_HOOK( pContext );

        if( status == MQTTSuccess )
 800bb82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d011      	beq.n	800bbae <handleIncomingPublish+0xde>
         *       sending out a duplicate publish with dup flag set, when a
         *       session is reestablished. It can result in a collision in
         *       state engine. This will be handled by ignoring the
         *       #MQTTStateCollision status from the state engine. The publish
         *       data is not passed to the application. */
        else if( status == MQTTStateCollision )
 800bb8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb8e:	2b09      	cmp	r3, #9
 800bb90:	d10d      	bne.n	800bbae <handleIncomingPublish+0xde>
        {
            status = MQTTSuccess;
 800bb92:	2300      	movs	r3, #0
 800bb94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            duplicatePublish = true;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

            /* Calculate the state for the ack packet that needs to be sent out
             * for the duplicate incoming publish. */
            publishRecordState = MQTT_CalculateStatePublish( MQTT_RECEIVE,
 800bb9e:	7d3b      	ldrb	r3, [r7, #20]
 800bba0:	4619      	mov	r1, r3
 800bba2:	2001      	movs	r0, #1
 800bba4:	f002 fe06 	bl	800e7b4 <MQTT_CalculateStatePublish>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                        ( unsigned short ) packetIdentifier,
                        MQTT_Status_strerror( status ) ) );
        }
    }

    if( status == MQTTSuccess )
 800bbae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d11f      	bne.n	800bbf6 <handleIncomingPublish+0x126>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800bbb6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bbb8:	813b      	strh	r3, [r7, #8]
        deserializedInfo.pPublishInfo = &publishInfo;
 800bbba:	f107 0314 	add.w	r3, r7, #20
 800bbbe:	60fb      	str	r3, [r7, #12]
        deserializedInfo.deserializationResult = status;
 800bbc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbc4:	743b      	strb	r3, [r7, #16]

        /* Invoke application callback to hand the buffer over to application
         * before sending acks.
         * Application callback will be invoked for all publishes, except for
         * duplicate incoming publishes. */
        if( duplicatePublish == false )
 800bbc6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bbca:	f083 0301 	eor.w	r3, r3, #1
 800bbce:	b2db      	uxtb	r3, r3
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d006      	beq.n	800bbe2 <handleIncomingPublish+0x112>
        {
            pContext->appCallback( pContext,
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbd8:	f107 0208 	add.w	r2, r7, #8
 800bbdc:	6839      	ldr	r1, [r7, #0]
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	4798      	blx	r3
                                   pIncomingPacket,
                                   &deserializedInfo );
        }

        /* Send PUBACK or PUBREC if necessary. */
        status = sendPublishAcks( pContext,
 800bbe2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bbe4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800bbe8:	4619      	mov	r1, r3
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f7ff fe92 	bl	800b914 <sendPublishAcks>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                  packetIdentifier,
                                  publishRecordState );
    }

    return status;
 800bbf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3730      	adds	r7, #48	; 0x30
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	080147c4 	.word	0x080147c4
 800bc08:	080153fc 	.word	0x080153fc
 800bc0c:	080146e8 	.word	0x080146e8
 800bc10:	08014994 	.word	0x08014994
 800bc14:	080149ac 	.word	0x080149ac

0800bc18 <handlePublishAcks>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handlePublishAcks( MQTTContext_t * pContext,
                                       MQTTPacketInfo_t * pIncomingPacket )
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b08a      	sub	sp, #40	; 0x28
 800bc1c:	af02      	add	r7, sp, #8
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTBadResponse;
 800bc22:	2305      	movs	r3, #5
 800bc24:	77fb      	strb	r3, [r7, #31]
    MQTTPublishState_t publishRecordState = MQTTStateNull;
 800bc26:	2300      	movs	r3, #0
 800bc28:	75bb      	strb	r3, [r7, #22]
    uint16_t packetIdentifier;
    MQTTPubAckType_t ackType;
    MQTTEventCallback_t appCallback;
    MQTTDeserializedInfo_t deserializedInfo;

    assert( pContext != NULL );
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d106      	bne.n	800bc3e <handlePublishAcks+0x26>
 800bc30:	4b2c      	ldr	r3, [pc, #176]	; (800bce4 <handlePublishAcks+0xcc>)
 800bc32:	4a2d      	ldr	r2, [pc, #180]	; (800bce8 <handlePublishAcks+0xd0>)
 800bc34:	f240 51e5 	movw	r1, #1509	; 0x5e5
 800bc38:	482c      	ldr	r0, [pc, #176]	; (800bcec <handlePublishAcks+0xd4>)
 800bc3a:	f006 faef 	bl	801221c <__assert_func>
    assert( pIncomingPacket != NULL );
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d106      	bne.n	800bc52 <handlePublishAcks+0x3a>
 800bc44:	4b2a      	ldr	r3, [pc, #168]	; (800bcf0 <handlePublishAcks+0xd8>)
 800bc46:	4a28      	ldr	r2, [pc, #160]	; (800bce8 <handlePublishAcks+0xd0>)
 800bc48:	f240 51e6 	movw	r1, #1510	; 0x5e6
 800bc4c:	4827      	ldr	r0, [pc, #156]	; (800bcec <handlePublishAcks+0xd4>)
 800bc4e:	f006 fae5 	bl	801221c <__assert_func>
    assert( pContext->appCallback != NULL );
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d106      	bne.n	800bc68 <handlePublishAcks+0x50>
 800bc5a:	4b26      	ldr	r3, [pc, #152]	; (800bcf4 <handlePublishAcks+0xdc>)
 800bc5c:	4a22      	ldr	r2, [pc, #136]	; (800bce8 <handlePublishAcks+0xd0>)
 800bc5e:	f240 51e7 	movw	r1, #1511	; 0x5e7
 800bc62:	4822      	ldr	r0, [pc, #136]	; (800bcec <handlePublishAcks+0xd4>)
 800bc64:	f006 fada 	bl	801221c <__assert_func>

    appCallback = pContext->appCallback;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc6c:	61bb      	str	r3, [r7, #24]

    ackType = getAckFromPacketType( pIncomingPacket->type );
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7ff fbe6 	bl	800b444 <getAckFromPacketType>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	75fb      	strb	r3, [r7, #23]
    status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800bc7c:	f107 0314 	add.w	r3, r7, #20
 800bc80:	2200      	movs	r2, #0
 800bc82:	4619      	mov	r1, r3
 800bc84:	6838      	ldr	r0, [r7, #0]
 800bc86:	f002 f832 	bl	800dcee <MQTT_DeserializeAck>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	77fb      	strb	r3, [r7, #31]
    LogInfo( ( "Ack packet deserialized with result: %s.",
               MQTT_Status_strerror( status ) ) );

    if( status == MQTTSuccess )
 800bc8e:	7ffb      	ldrb	r3, [r7, #31]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d10a      	bne.n	800bcaa <handlePublishAcks+0x92>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        status = MQTT_UpdateStateAck( pContext,
 800bc94:	8ab9      	ldrh	r1, [r7, #20]
 800bc96:	7dfa      	ldrb	r2, [r7, #23]
 800bc98:	f107 0316 	add.w	r3, r7, #22
 800bc9c:	9300      	str	r3, [sp, #0]
 800bc9e:	2301      	movs	r3, #1
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f002 fe29 	bl	800e8f8 <MQTT_UpdateStateAck>
 800bca6:	4603      	mov	r3, r0
 800bca8:	77fb      	strb	r3, [r7, #31]
                        ( unsigned short ) packetIdentifier,
                        MQTT_Status_strerror( status ) ) );
        }
    }

    if( status == MQTTSuccess )
 800bcaa:	7ffb      	ldrb	r3, [r7, #31]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d113      	bne.n	800bcd8 <handlePublishAcks+0xc0>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800bcb0:	8abb      	ldrh	r3, [r7, #20]
 800bcb2:	813b      	strh	r3, [r7, #8]
        deserializedInfo.deserializationResult = status;
 800bcb4:	7ffb      	ldrb	r3, [r7, #31]
 800bcb6:	743b      	strb	r3, [r7, #16]
        deserializedInfo.pPublishInfo = NULL;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	60fb      	str	r3, [r7, #12]

        /* Invoke application callback to hand the buffer over to application
         * before sending acks. */
        appCallback( pContext, pIncomingPacket, &deserializedInfo );
 800bcbc:	f107 0208 	add.w	r2, r7, #8
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	6839      	ldr	r1, [r7, #0]
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	4798      	blx	r3

        /* Send PUBREL or PUBCOMP if necessary. */
        status = sendPublishAcks( pContext,
 800bcc8:	8abb      	ldrh	r3, [r7, #20]
 800bcca:	7dba      	ldrb	r2, [r7, #22]
 800bccc:	4619      	mov	r1, r3
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f7ff fe20 	bl	800b914 <sendPublishAcks>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	77fb      	strb	r3, [r7, #31]
                                  packetIdentifier,
                                  publishRecordState );
    }

    return status;
 800bcd8:	7ffb      	ldrb	r3, [r7, #31]
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3720      	adds	r7, #32
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	080147c4 	.word	0x080147c4
 800bce8:	08015414 	.word	0x08015414
 800bcec:	080146e8 	.word	0x080146e8
 800bcf0:	08014994 	.word	0x08014994
 800bcf4:	080149ac 	.word	0x080149ac

0800bcf8 <handleIncomingAck>:
/*-----------------------------------------------------------*/

static MQTTStatus_t handleIncomingAck( MQTTContext_t * pContext,
                                       MQTTPacketInfo_t * pIncomingPacket,
                                       bool manageKeepAlive )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b08a      	sub	sp, #40	; 0x28
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	4613      	mov	r3, r2
 800bd04:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTBadResponse;
 800bd06:	2305      	movs	r3, #5
 800bd08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint16_t packetIdentifier = MQTT_PACKET_ID_INVALID;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	83fb      	strh	r3, [r7, #30]
    /* We should always invoke the app callback unless we receive a PINGRESP
     * and are managing keep alive, or if we receive an unknown packet. We
     * initialize this to false since the callback must be invoked before
     * sending any PUBREL or PUBCOMP. However, for other cases, we invoke it
     * at the end to reduce the complexity of this function. */
    bool invokeAppCallback = false;
 800bd10:	2300      	movs	r3, #0
 800bd12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    MQTTEventCallback_t appCallback = NULL;
 800bd16:	2300      	movs	r3, #0
 800bd18:	623b      	str	r3, [r7, #32]

    assert( pContext != NULL );
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d106      	bne.n	800bd2e <handleIncomingAck+0x36>
 800bd20:	4b54      	ldr	r3, [pc, #336]	; (800be74 <handleIncomingAck+0x17c>)
 800bd22:	4a55      	ldr	r2, [pc, #340]	; (800be78 <handleIncomingAck+0x180>)
 800bd24:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800bd28:	4854      	ldr	r0, [pc, #336]	; (800be7c <handleIncomingAck+0x184>)
 800bd2a:	f006 fa77 	bl	801221c <__assert_func>
    assert( pIncomingPacket != NULL );
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d106      	bne.n	800bd42 <handleIncomingAck+0x4a>
 800bd34:	4b52      	ldr	r3, [pc, #328]	; (800be80 <handleIncomingAck+0x188>)
 800bd36:	4a50      	ldr	r2, [pc, #320]	; (800be78 <handleIncomingAck+0x180>)
 800bd38:	f240 6131 	movw	r1, #1585	; 0x631
 800bd3c:	484f      	ldr	r0, [pc, #316]	; (800be7c <handleIncomingAck+0x184>)
 800bd3e:	f006 fa6d 	bl	801221c <__assert_func>
    assert( pContext->appCallback != NULL );
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d106      	bne.n	800bd58 <handleIncomingAck+0x60>
 800bd4a:	4b4e      	ldr	r3, [pc, #312]	; (800be84 <handleIncomingAck+0x18c>)
 800bd4c:	4a4a      	ldr	r2, [pc, #296]	; (800be78 <handleIncomingAck+0x180>)
 800bd4e:	f240 6132 	movw	r1, #1586	; 0x632
 800bd52:	484a      	ldr	r0, [pc, #296]	; (800be7c <handleIncomingAck+0x184>)
 800bd54:	f006 fa62 	bl	801221c <__assert_func>

    appCallback = pContext->appCallback;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd5c:	623b      	str	r3, [r7, #32]

    LogDebug( ( "Received packet of type %02x.",
                ( unsigned int ) pIncomingPacket->type ) );

    switch( pIncomingPacket->type )
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	2bd0      	cmp	r3, #208	; 0xd0
 800bd64:	d01d      	beq.n	800bda2 <handleIncomingAck+0xaa>
 800bd66:	2bd0      	cmp	r3, #208	; 0xd0
 800bd68:	dc64      	bgt.n	800be34 <handleIncomingAck+0x13c>
 800bd6a:	2bb0      	cmp	r3, #176	; 0xb0
 800bd6c:	d044      	beq.n	800bdf8 <handleIncomingAck+0x100>
 800bd6e:	2bb0      	cmp	r3, #176	; 0xb0
 800bd70:	dc60      	bgt.n	800be34 <handleIncomingAck+0x13c>
 800bd72:	2b90      	cmp	r3, #144	; 0x90
 800bd74:	d040      	beq.n	800bdf8 <handleIncomingAck+0x100>
 800bd76:	2b90      	cmp	r3, #144	; 0x90
 800bd78:	dc5c      	bgt.n	800be34 <handleIncomingAck+0x13c>
 800bd7a:	2b70      	cmp	r3, #112	; 0x70
 800bd7c:	d009      	beq.n	800bd92 <handleIncomingAck+0x9a>
 800bd7e:	2b70      	cmp	r3, #112	; 0x70
 800bd80:	dc58      	bgt.n	800be34 <handleIncomingAck+0x13c>
 800bd82:	2b62      	cmp	r3, #98	; 0x62
 800bd84:	d005      	beq.n	800bd92 <handleIncomingAck+0x9a>
 800bd86:	2b62      	cmp	r3, #98	; 0x62
 800bd88:	dc54      	bgt.n	800be34 <handleIncomingAck+0x13c>
 800bd8a:	2b40      	cmp	r3, #64	; 0x40
 800bd8c:	d001      	beq.n	800bd92 <handleIncomingAck+0x9a>
 800bd8e:	2b50      	cmp	r3, #80	; 0x50
 800bd90:	d150      	bne.n	800be34 <handleIncomingAck+0x13c>
        case MQTT_PACKET_TYPE_PUBREC:
        case MQTT_PACKET_TYPE_PUBREL:
        case MQTT_PACKET_TYPE_PUBCOMP:

            /* Handle all the publish acks. The app callback is invoked here. */
            status = handlePublishAcks( pContext, pIncomingPacket );
 800bd92:	68b9      	ldr	r1, [r7, #8]
 800bd94:	68f8      	ldr	r0, [r7, #12]
 800bd96:	f7ff ff3f 	bl	800bc18 <handlePublishAcks>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            break;
 800bda0:	e04d      	b.n	800be3e <handleIncomingAck+0x146>

        case MQTT_PACKET_TYPE_PINGRESP:
            status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800bda2:	f107 031e 	add.w	r3, r7, #30
 800bda6:	2200      	movs	r2, #0
 800bda8:	4619      	mov	r1, r3
 800bdaa:	68b8      	ldr	r0, [r7, #8]
 800bdac:	f001 ff9f 	bl	800dcee <MQTT_DeserializeAck>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            invokeAppCallback = ( status == MQTTSuccess ) && !manageKeepAlive;
 800bdb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d107      	bne.n	800bdce <handleIncomingAck+0xd6>
 800bdbe:	79fb      	ldrb	r3, [r7, #7]
 800bdc0:	f083 0301 	eor.w	r3, r3, #1
 800bdc4:	b2db      	uxtb	r3, r3
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d001      	beq.n	800bdce <handleIncomingAck+0xd6>
 800bdca:	2301      	movs	r3, #1
 800bdcc:	e000      	b.n	800bdd0 <handleIncomingAck+0xd8>
 800bdce:	2300      	movs	r3, #0
 800bdd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bdd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bdd8:	f003 0301 	and.w	r3, r3, #1
 800bddc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

            if( ( status == MQTTSuccess ) && ( manageKeepAlive == true ) )
 800bde0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d129      	bne.n	800be3c <handleIncomingAck+0x144>
 800bde8:	79fb      	ldrb	r3, [r7, #7]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d026      	beq.n	800be3c <handleIncomingAck+0x144>
            {
                pContext->waitingForPingResp = false;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            }

            break;
 800bdf6:	e021      	b.n	800be3c <handleIncomingAck+0x144>

        case MQTT_PACKET_TYPE_SUBACK:
        case MQTT_PACKET_TYPE_UNSUBACK:
            /* Deserialize and give these to the app provided callback. */
            status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800bdf8:	f107 031e 	add.w	r3, r7, #30
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	4619      	mov	r1, r3
 800be00:	68b8      	ldr	r0, [r7, #8]
 800be02:	f001 ff74 	bl	800dcee <MQTT_DeserializeAck>
 800be06:	4603      	mov	r3, r0
 800be08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            invokeAppCallback = ( status == MQTTSuccess ) || ( status == MQTTServerRefused );
 800be0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be10:	2b00      	cmp	r3, #0
 800be12:	d003      	beq.n	800be1c <handleIncomingAck+0x124>
 800be14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be18:	2b06      	cmp	r3, #6
 800be1a:	d101      	bne.n	800be20 <handleIncomingAck+0x128>
 800be1c:	2301      	movs	r3, #1
 800be1e:	e000      	b.n	800be22 <handleIncomingAck+0x12a>
 800be20:	2300      	movs	r3, #0
 800be22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800be26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800be2a:	f003 0301 	and.w	r3, r3, #1
 800be2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            break;
 800be32:	e004      	b.n	800be3e <handleIncomingAck+0x146>

        default:
            /* Bad response from the server. */
            LogError( ( "Unexpected packet type from server: PacketType=%02x.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800be34:	2305      	movs	r3, #5
 800be36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800be3a:	e000      	b.n	800be3e <handleIncomingAck+0x146>
            break;
 800be3c:	bf00      	nop
    }

    if( invokeAppCallback == true )
 800be3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800be42:	2b00      	cmp	r3, #0
 800be44:	d00f      	beq.n	800be66 <handleIncomingAck+0x16e>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800be46:	8bfb      	ldrh	r3, [r7, #30]
 800be48:	823b      	strh	r3, [r7, #16]
        deserializedInfo.deserializationResult = status;
 800be4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be4e:	763b      	strb	r3, [r7, #24]
        deserializedInfo.pPublishInfo = NULL;
 800be50:	2300      	movs	r3, #0
 800be52:	617b      	str	r3, [r7, #20]
        appCallback( pContext, pIncomingPacket, &deserializedInfo );
 800be54:	f107 0210 	add.w	r2, r7, #16
 800be58:	6a3b      	ldr	r3, [r7, #32]
 800be5a:	68b9      	ldr	r1, [r7, #8]
 800be5c:	68f8      	ldr	r0, [r7, #12]
 800be5e:	4798      	blx	r3
        /* In case a SUBACK indicated refusal, reset the status to continue the loop. */
        status = MQTTSuccess;
 800be60:	2300      	movs	r3, #0
 800be62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return status;
 800be66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3728      	adds	r7, #40	; 0x28
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	080147c4 	.word	0x080147c4
 800be78:	08015428 	.word	0x08015428
 800be7c:	080146e8 	.word	0x080146e8
 800be80:	08014994 	.word	0x08014994
 800be84:	080149ac 	.word	0x080149ac

0800be88 <receiveSingleIteration>:
/*-----------------------------------------------------------*/

static MQTTStatus_t receiveSingleIteration( MQTTContext_t * pContext,
                                            bool manageKeepAlive )
{
 800be88:	b590      	push	{r4, r7, lr}
 800be8a:	b08b      	sub	sp, #44	; 0x2c
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	460b      	mov	r3, r1
 800be92:	70fb      	strb	r3, [r7, #3]
    MQTTStatus_t status = MQTTSuccess;
 800be94:	2300      	movs	r3, #0
 800be96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MQTTPacketInfo_t incomingPacket = { 0 };
 800be9a:	f107 0308 	add.w	r3, r7, #8
 800be9e:	2200      	movs	r2, #0
 800bea0:	601a      	str	r2, [r3, #0]
 800bea2:	605a      	str	r2, [r3, #4]
 800bea4:	609a      	str	r2, [r3, #8]
 800bea6:	60da      	str	r2, [r3, #12]
    int32_t recvBytes;
    size_t totalMQTTPacketLength = 0;
 800bea8:	2300      	movs	r3, #0
 800beaa:	623b      	str	r3, [r7, #32]

    assert( pContext != NULL );
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d106      	bne.n	800bec0 <receiveSingleIteration+0x38>
 800beb2:	4b67      	ldr	r3, [pc, #412]	; (800c050 <receiveSingleIteration+0x1c8>)
 800beb4:	4a67      	ldr	r2, [pc, #412]	; (800c054 <receiveSingleIteration+0x1cc>)
 800beb6:	f240 6176 	movw	r1, #1654	; 0x676
 800beba:	4867      	ldr	r0, [pc, #412]	; (800c058 <receiveSingleIteration+0x1d0>)
 800bebc:	f006 f9ae 	bl	801221c <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6a1b      	ldr	r3, [r3, #32]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d106      	bne.n	800bed6 <receiveSingleIteration+0x4e>
 800bec8:	4b64      	ldr	r3, [pc, #400]	; (800c05c <receiveSingleIteration+0x1d4>)
 800beca:	4a62      	ldr	r2, [pc, #392]	; (800c054 <receiveSingleIteration+0x1cc>)
 800becc:	f240 6177 	movw	r1, #1655	; 0x677
 800bed0:	4861      	ldr	r0, [pc, #388]	; (800c058 <receiveSingleIteration+0x1d0>)
 800bed2:	f006 f9a3 	bl	801221c <__assert_func>

    /* Read as many bytes as possible into the network buffer. */
    recvBytes = pContext->transportInterface.recv( pContext->transportInterface.pNetworkContext,
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	691b      	ldr	r3, [r3, #16]
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	69d0      	ldr	r0, [r2, #28]
                                                   &( pContext->networkBuffer.pBuffer[ pContext->index ] ),
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	6a11      	ldr	r1, [r2, #32]
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800bee6:	188c      	adds	r4, r1, r2
                                                   pContext->networkBuffer.size - pContext->index );
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	6c12      	ldr	r2, [r2, #64]	; 0x40
    recvBytes = pContext->transportInterface.recv( pContext->transportInterface.pNetworkContext,
 800bef0:	1a8a      	subs	r2, r1, r2
 800bef2:	4621      	mov	r1, r4
 800bef4:	4798      	blx	r3
 800bef6:	61f8      	str	r0, [r7, #28]

    if( recvBytes < 0 )
 800bef8:	69fb      	ldr	r3, [r7, #28]
 800befa:	2b00      	cmp	r3, #0
 800befc:	da03      	bge.n	800bf06 <receiveSingleIteration+0x7e>
    {
        /* The receive function has failed. Bubble up the error up to the user. */
        status = MQTTRecvFailed;
 800befe:	2304      	movs	r3, #4
 800bf00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf04:	e020      	b.n	800bf48 <receiveSingleIteration+0xc0>
    }
    else if( ( recvBytes == 0 ) && ( pContext->index == 0U ) )
 800bf06:	69fb      	ldr	r3, [r7, #28]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d107      	bne.n	800bf1c <receiveSingleIteration+0x94>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d103      	bne.n	800bf1c <receiveSingleIteration+0x94>
    {
        /* No more bytes available since the last read and neither is anything in
         * the buffer. */
        status = MQTTNoDataAvailable;
 800bf14:	2307      	movs	r3, #7
 800bf16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf1a:	e015      	b.n	800bf48 <receiveSingleIteration+0xc0>
    /* Either something was received, or there is still data to be processed in the
     * buffer, or both. */
    else
    {
        /* Update the number of bytes in the MQTT fixed buffer. */
        pContext->index += ( size_t ) recvBytes;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bf20:	69fb      	ldr	r3, [r7, #28]
 800bf22:	441a      	add	r2, r3
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	641a      	str	r2, [r3, #64]	; 0x40

        status = MQTT_ProcessIncomingPacketTypeAndLength( pContext->networkBuffer.pBuffer,
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6a18      	ldr	r0, [r3, #32]
                                                          &pContext->index,
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	3340      	adds	r3, #64	; 0x40
        status = MQTT_ProcessIncomingPacketTypeAndLength( pContext->networkBuffer.pBuffer,
 800bf30:	f107 0208 	add.w	r2, r7, #8
 800bf34:	4619      	mov	r1, r3
 800bf36:	f001 ff93 	bl	800de60 <MQTT_ProcessIncomingPacketTypeAndLength>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                          &incomingPacket );

        totalMQTTPacketLength = incomingPacket.remainingLength + incomingPacket.headerLength;
 800bf40:	693a      	ldr	r2, [r7, #16]
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	4413      	add	r3, r2
 800bf46:	623b      	str	r3, [r7, #32]
    }

    /* No data was received, check for keep alive timeout. */
    if( recvBytes == 0 )
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d112      	bne.n	800bf74 <receiveSingleIteration+0xec>
    {
        if( manageKeepAlive == true )
 800bf4e:	78fb      	ldrb	r3, [r7, #3]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d00f      	beq.n	800bf74 <receiveSingleIteration+0xec>
        {
            /* Keep the copy of the status to be reset later. */
            MQTTStatus_t statusCopy = status;
 800bf54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf58:	76fb      	strb	r3, [r7, #27]

            /* Assign status so an error can be bubbled up to application,
             * but reset it on success. */
            status = handleKeepAlive( pContext );
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f7ff fd3c 	bl	800b9d8 <handleKeepAlive>
 800bf60:	4603      	mov	r3, r0
 800bf62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if( status == MQTTSuccess )
 800bf66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d102      	bne.n	800bf74 <receiveSingleIteration+0xec>
            {
                /* Reset the status. */
                status = statusCopy;
 800bf6e:	7efb      	ldrb	r3, [r7, #27]
 800bf70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
        }
    }

    /* Check whether there is data available before processing the packet further. */
    if( ( status == MQTTNeedMoreBytes ) || ( status == MQTTNoDataAvailable ) )
 800bf74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf78:	2b0b      	cmp	r3, #11
 800bf7a:	d01e      	beq.n	800bfba <receiveSingleIteration+0x132>
 800bf7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf80:	2b07      	cmp	r3, #7
 800bf82:	d01a      	beq.n	800bfba <receiveSingleIteration+0x132>
    {
        /* Do nothing as there is nothing to be processed right now. The proper
         * error code will be bubbled up to the user. */
    }
    /* Any other error code. */
    else if( status != MQTTSuccess )
 800bf84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d116      	bne.n	800bfba <receiveSingleIteration+0x132>
    {
        LogError( ( "Call to receiveSingleIteration failed. Status=%s",
                    MQTT_Status_strerror( status ) ) );
    }
    /* If the MQTT Packet size is bigger than the buffer itself. */
    else if( totalMQTTPacketLength > pContext->networkBuffer.size )
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf90:	6a3a      	ldr	r2, [r7, #32]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d909      	bls.n	800bfaa <receiveSingleIteration+0x122>
    {
        /* Discard the packet from the receive buffer and drain the pending
         * data from the socket buffer. */
        status = discardStoredPacket( pContext,
 800bf96:	f107 0308 	add.w	r3, r7, #8
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f7ff fbb7 	bl	800b710 <discardStoredPacket>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bfa8:	e007      	b.n	800bfba <receiveSingleIteration+0x132>
                                      &incomingPacket );
    }
    /* If the total packet is of more length than the bytes we have available. */
    else if( totalMQTTPacketLength > pContext->index )
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfae:	6a3a      	ldr	r2, [r7, #32]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d902      	bls.n	800bfba <receiveSingleIteration+0x132>
    {
        status = MQTTNeedMoreBytes;
 800bfb4:	230b      	movs	r3, #11
 800bfb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        /* MISRA else. */
    }

    /* Handle received packet. If incomplete data was read then this will not execute. */
    if( status == MQTTSuccess )
 800bfba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d138      	bne.n	800c034 <receiveSingleIteration+0x1ac>
    {
        incomingPacket.pRemainingData = &pContext->networkBuffer.pBuffer[ incomingPacket.headerLength ];
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6a1a      	ldr	r2, [r3, #32]
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	4413      	add	r3, r2
 800bfca:	60fb      	str	r3, [r7, #12]

        /* PUBLISH packets allow flags in the lower four bits. For other
         * packet types, they are reserved. */
        if( ( incomingPacket.type & 0xF0U ) == MQTT_PACKET_TYPE_PUBLISH )
 800bfcc:	7a3b      	ldrb	r3, [r7, #8]
 800bfce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bfd2:	2b30      	cmp	r3, #48	; 0x30
 800bfd4:	d109      	bne.n	800bfea <receiveSingleIteration+0x162>
        {
            status = handleIncomingPublish( pContext, &incomingPacket );
 800bfd6:	f107 0308 	add.w	r3, r7, #8
 800bfda:	4619      	mov	r1, r3
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f7ff fd77 	bl	800bad0 <handleIncomingPublish>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bfe8:	e009      	b.n	800bffe <receiveSingleIteration+0x176>
        }
        else
        {
            status = handleIncomingAck( pContext, &incomingPacket, manageKeepAlive );
 800bfea:	78fa      	ldrb	r2, [r7, #3]
 800bfec:	f107 0308 	add.w	r3, r7, #8
 800bff0:	4619      	mov	r1, r3
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f7ff fe80 	bl	800bcf8 <handleIncomingAck>
 800bff8:	4603      	mov	r3, r0
 800bffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        /* Update the index to reflect the remaining bytes in the buffer.  */
        pContext->index -= totalMQTTPacketLength;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c002:	6a3b      	ldr	r3, [r7, #32]
 800c004:	1ad2      	subs	r2, r2, r3
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	641a      	str	r2, [r3, #64]	; 0x40

        /* Move the remaining bytes to the front of the buffer. */
        ( void ) memmove( pContext->networkBuffer.pBuffer,
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6a18      	ldr	r0, [r3, #32]
                          &( pContext->networkBuffer.pBuffer[ totalMQTTPacketLength ] ),
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6a1a      	ldr	r2, [r3, #32]
 800c012:	6a3b      	ldr	r3, [r7, #32]
 800c014:	18d1      	adds	r1, r2, r3
        ( void ) memmove( pContext->networkBuffer.pBuffer,
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c01a:	461a      	mov	r2, r3
 800c01c:	f006 fa6f 	bl	80124fe <memmove>
                          pContext->index );

        if( status == MQTTSuccess )
 800c020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c024:	2b00      	cmp	r3, #0
 800c026:	d105      	bne.n	800c034 <receiveSingleIteration+0x1ac>
        {
            pContext->lastPacketRxTime = pContext->getTime();
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c02c:	4798      	blx	r3
 800c02e:	4602      	mov	r2, r0
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	639a      	str	r2, [r3, #56]	; 0x38
        }
    }

    if( status == MQTTNoDataAvailable )
 800c034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c038:	2b07      	cmp	r3, #7
 800c03a:	d102      	bne.n	800c042 <receiveSingleIteration+0x1ba>
    {
        /* No data available is not an error. Reset to MQTTSuccess so the
         * return code will indicate success. */
        status = MQTTSuccess;
 800c03c:	2300      	movs	r3, #0
 800c03e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return status;
 800c042:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c046:	4618      	mov	r0, r3
 800c048:	372c      	adds	r7, #44	; 0x2c
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd90      	pop	{r4, r7, pc}
 800c04e:	bf00      	nop
 800c050:	080147c4 	.word	0x080147c4
 800c054:	0801543c 	.word	0x0801543c
 800c058:	080146e8 	.word	0x080146e8
 800c05c:	08014900 	.word	0x08014900

0800c060 <validateSubscribeUnsubscribeParams>:

static MQTTStatus_t validateSubscribeUnsubscribeParams( const MQTTContext_t * pContext,
                                                        const MQTTSubscribeInfo_t * pSubscriptionList,
                                                        size_t subscriptionCount,
                                                        uint16_t packetId )
{
 800c060:	b480      	push	{r7}
 800c062:	b087      	sub	sp, #28
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	607a      	str	r2, [r7, #4]
 800c06c:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTSuccess;
 800c06e:	2300      	movs	r3, #0
 800c070:	75fb      	strb	r3, [r7, #23]
    size_t iterator;

    /* Validate all the parameters. */
    if( ( pContext == NULL ) || ( pSubscriptionList == NULL ) )
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d002      	beq.n	800c07e <validateSubscribeUnsubscribeParams+0x1e>
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d102      	bne.n	800c084 <validateSubscribeUnsubscribeParams+0x24>
    {
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pSubscriptionList=%p.",
                    ( void * ) pContext,
                    ( void * ) pSubscriptionList ) );
        status = MQTTBadParameter;
 800c07e:	2301      	movs	r3, #1
 800c080:	75fb      	strb	r3, [r7, #23]
 800c082:	e020      	b.n	800c0c6 <validateSubscribeUnsubscribeParams+0x66>
    }
    else if( subscriptionCount == 0UL )
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d102      	bne.n	800c090 <validateSubscribeUnsubscribeParams+0x30>
    {
        LogError( ( "Subscription count is 0." ) );
        status = MQTTBadParameter;
 800c08a:	2301      	movs	r3, #1
 800c08c:	75fb      	strb	r3, [r7, #23]
 800c08e:	e01a      	b.n	800c0c6 <validateSubscribeUnsubscribeParams+0x66>
    }
    else if( packetId == 0U )
 800c090:	887b      	ldrh	r3, [r7, #2]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d102      	bne.n	800c09c <validateSubscribeUnsubscribeParams+0x3c>
    {
        LogError( ( "Packet Id for subscription packet is 0." ) );
        status = MQTTBadParameter;
 800c096:	2301      	movs	r3, #1
 800c098:	75fb      	strb	r3, [r7, #23]
 800c09a:	e014      	b.n	800c0c6 <validateSubscribeUnsubscribeParams+0x66>
    }
    else
    {
        if( pContext->incomingPublishRecords == NULL )
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d110      	bne.n	800c0c6 <validateSubscribeUnsubscribeParams+0x66>
        {
            for( iterator = 0; iterator < subscriptionCount; iterator++ )
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	613b      	str	r3, [r7, #16]
 800c0a8:	e009      	b.n	800c0be <validateSubscribeUnsubscribeParams+0x5e>
            {
                if( pSubscriptionList->qos > MQTTQoS0 )
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d002      	beq.n	800c0b8 <validateSubscribeUnsubscribeParams+0x58>
                {
                    LogError( ( "The incoming publish record list is not "
                                "initialised for QoS1/QoS2 records. Please call "
                                " MQTT_InitStatefulQoS to enable use of QoS1 and "
                                " QoS2 packets." ) );
                    status = MQTTBadParameter;
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	75fb      	strb	r3, [r7, #23]
                    break;
 800c0b6:	e006      	b.n	800c0c6 <validateSubscribeUnsubscribeParams+0x66>
            for( iterator = 0; iterator < subscriptionCount; iterator++ )
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	3301      	adds	r3, #1
 800c0bc:	613b      	str	r3, [r7, #16]
 800c0be:	693a      	ldr	r2, [r7, #16]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d3f1      	bcc.n	800c0aa <validateSubscribeUnsubscribeParams+0x4a>
                }
            }
        }
    }

    return status;
 800c0c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	371c      	adds	r7, #28
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr

0800c0d4 <addEncodedStringToVector>:
static size_t addEncodedStringToVector( uint8_t serailizedLength[ 2 ],
                                        const char * const string,
                                        uint16_t length,
                                        TransportOutVector_t * iterator,
                                        size_t * updatedLength )
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b088      	sub	sp, #32
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	60b9      	str	r1, [r7, #8]
 800c0de:	603b      	str	r3, [r7, #0]
 800c0e0:	4613      	mov	r3, r2
 800c0e2:	80fb      	strh	r3, [r7, #6]
    size_t packetLength = 0U;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	61fb      	str	r3, [r7, #28]
    const size_t seralizedLengthFieldSize = 2U;
 800c0e8:	2302      	movs	r3, #2
 800c0ea:	617b      	str	r3, [r7, #20]
    TransportOutVector_t * pLocalIterator = iterator;
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	613b      	str	r3, [r7, #16]
    /* This function always adds 2 vectors. */
    size_t vectorsAdded = 0U;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	61bb      	str	r3, [r7, #24]

    /* When length is non-zero, the string must be non-NULL. */
    assert( ( length != 0U ) == ( string != NULL ) );
 800c0f4:	88fb      	ldrh	r3, [r7, #6]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	bf0c      	ite	eq
 800c0fa:	2301      	moveq	r3, #1
 800c0fc:	2300      	movne	r3, #0
 800c0fe:	b2da      	uxtb	r2, r3
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	2b00      	cmp	r3, #0
 800c104:	bf14      	ite	ne
 800c106:	2301      	movne	r3, #1
 800c108:	2300      	moveq	r3, #0
 800c10a:	b2db      	uxtb	r3, r3
 800c10c:	4053      	eors	r3, r2
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	2b00      	cmp	r3, #0
 800c112:	d106      	bne.n	800c122 <addEncodedStringToVector+0x4e>
 800c114:	4b1e      	ldr	r3, [pc, #120]	; (800c190 <addEncodedStringToVector+0xbc>)
 800c116:	4a1f      	ldr	r2, [pc, #124]	; (800c194 <addEncodedStringToVector+0xc0>)
 800c118:	f240 7139 	movw	r1, #1849	; 0x739
 800c11c:	481e      	ldr	r0, [pc, #120]	; (800c198 <addEncodedStringToVector+0xc4>)
 800c11e:	f006 f87d 	bl	801221c <__assert_func>

    serailizedLength[ 0 ] = ( ( uint8_t ) ( ( length ) >> 8 ) );
 800c122:	88fb      	ldrh	r3, [r7, #6]
 800c124:	0a1b      	lsrs	r3, r3, #8
 800c126:	b29b      	uxth	r3, r3
 800c128:	b2da      	uxtb	r2, r3
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	701a      	strb	r2, [r3, #0]
    serailizedLength[ 1 ] = ( ( uint8_t ) ( ( length ) & 0x00ffU ) );
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	3301      	adds	r3, #1
 800c132:	88fa      	ldrh	r2, [r7, #6]
 800c134:	b2d2      	uxtb	r2, r2
 800c136:	701a      	strb	r2, [r3, #0]

    /* Add the serialized length of the string first. */
    pLocalIterator[ 0 ].iov_base = serailizedLength;
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	68fa      	ldr	r2, [r7, #12]
 800c13c:	601a      	str	r2, [r3, #0]
    pLocalIterator[ 0 ].iov_len = seralizedLengthFieldSize;
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	697a      	ldr	r2, [r7, #20]
 800c142:	605a      	str	r2, [r3, #4]
    vectorsAdded++;
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	3301      	adds	r3, #1
 800c148:	61bb      	str	r3, [r7, #24]
    packetLength = seralizedLengthFieldSize;
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	61fb      	str	r3, [r7, #28]

    /* Sometimes the string can be NULL that is, of 0 length. In that case,
     * only the length field should be encoded in the vector. */
    if( ( string != NULL ) && ( length != 0U ) )
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d011      	beq.n	800c178 <addEncodedStringToVector+0xa4>
 800c154:	88fb      	ldrh	r3, [r7, #6]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d00e      	beq.n	800c178 <addEncodedStringToVector+0xa4>
    {
        /* Then add the pointer to the string itself. */
        pLocalIterator[ 1 ].iov_base = string;
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	3308      	adds	r3, #8
 800c15e:	68ba      	ldr	r2, [r7, #8]
 800c160:	601a      	str	r2, [r3, #0]
        pLocalIterator[ 1 ].iov_len = length;
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	3308      	adds	r3, #8
 800c166:	88fa      	ldrh	r2, [r7, #6]
 800c168:	605a      	str	r2, [r3, #4]
        vectorsAdded++;
 800c16a:	69bb      	ldr	r3, [r7, #24]
 800c16c:	3301      	adds	r3, #1
 800c16e:	61bb      	str	r3, [r7, #24]
        packetLength += length;
 800c170:	88fb      	ldrh	r3, [r7, #6]
 800c172:	69fa      	ldr	r2, [r7, #28]
 800c174:	4413      	add	r3, r2
 800c176:	61fb      	str	r3, [r7, #28]
    }

    ( *updatedLength ) = ( *updatedLength ) + packetLength;
 800c178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	69fb      	ldr	r3, [r7, #28]
 800c17e:	441a      	add	r2, r3
 800c180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c182:	601a      	str	r2, [r3, #0]

    return vectorsAdded;
 800c184:	69bb      	ldr	r3, [r7, #24]
}
 800c186:	4618      	mov	r0, r3
 800c188:	3720      	adds	r7, #32
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	080149cc 	.word	0x080149cc
 800c194:	08015454 	.word	0x08015454
 800c198:	080146e8 	.word	0x080146e8

0800c19c <sendSubscribeWithoutCopy>:
static MQTTStatus_t sendSubscribeWithoutCopy( MQTTContext_t * pContext,
                                              const MQTTSubscribeInfo_t * pSubscriptionList,
                                              size_t subscriptionCount,
                                              uint16_t packetId,
                                              size_t remainingLength )
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b09c      	sub	sp, #112	; 0x70
 800c1a0:	af02      	add	r7, sp, #8
 800c1a2:	60f8      	str	r0, [r7, #12]
 800c1a4:	60b9      	str	r1, [r7, #8]
 800c1a6:	607a      	str	r2, [r7, #4]
 800c1a8:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTSuccess;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    uint8_t subscribeheader[ 7 ];
    uint8_t * pIndex;
    TransportOutVector_t pIoVector[ MQTT_SUB_UNSUB_MAX_VECTORS ];
    TransportOutVector_t * pIterator;
    uint8_t serializedTopicFieldLength[ MQTT_SUB_UNSUB_MAX_VECTORS ][ 2 ];
    size_t totalPacketLength = 0U;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	617b      	str	r3, [r7, #20]
    size_t ioVectorLength = 0U;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    size_t subscriptionsSent = 0U;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	65bb      	str	r3, [r7, #88]	; 0x58
    /* For subscribe, only three vector slots are required per topic string. */
    const size_t subscriptionStringVectorSlots = 3U;
 800c1bc:	2303      	movs	r3, #3
 800c1be:	653b      	str	r3, [r7, #80]	; 0x50
    size_t vectorsAdded;
    size_t topicFieldLengthIndex;

    /* The vector array should be at least three element long as the topic
     * string needs these many vector elements to be stored. */
    assert( MQTT_SUB_UNSUB_MAX_VECTORS >= subscriptionStringVectorSlots );
 800c1c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1c2:	2b04      	cmp	r3, #4
 800c1c4:	d906      	bls.n	800c1d4 <sendSubscribeWithoutCopy+0x38>
 800c1c6:	4b4f      	ldr	r3, [pc, #316]	; (800c304 <sendSubscribeWithoutCopy+0x168>)
 800c1c8:	4a4f      	ldr	r2, [pc, #316]	; (800c308 <sendSubscribeWithoutCopy+0x16c>)
 800c1ca:	f240 716c 	movw	r1, #1900	; 0x76c
 800c1ce:	484f      	ldr	r0, [pc, #316]	; (800c30c <sendSubscribeWithoutCopy+0x170>)
 800c1d0:	f006 f824 	bl	801221c <__assert_func>

    pIndex = subscribeheader;
 800c1d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c1d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    pIterator = pIoVector;
 800c1da:	f107 0320 	add.w	r3, r7, #32
 800c1de:	663b      	str	r3, [r7, #96]	; 0x60

    pIndex = MQTT_SerializeSubscribeHeader( remainingLength,
 800c1e0:	887b      	ldrh	r3, [r7, #2]
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c1e6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800c1e8:	f001 fc62 	bl	800dab0 <MQTT_SerializeSubscribeHeader>
 800c1ec:	64f8      	str	r0, [r7, #76]	; 0x4c
                                            pIndex,
                                            packetId );

    /* The header is to be sent first. */
    pIterator->iov_base = subscribeheader;
 800c1ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1f0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c1f4:	601a      	str	r2, [r3, #0]
    /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-182 */
    /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-108 */
    /* coverity[misra_c_2012_rule_18_2_violation] */
    /* coverity[misra_c_2012_rule_10_8_violation] */
    pIterator->iov_len = ( size_t ) ( pIndex - subscribeheader );
 800c1f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c1fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c1fc:	1ad3      	subs	r3, r2, r3
 800c1fe:	461a      	mov	r2, r3
 800c200:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c202:	605a      	str	r2, [r3, #4]
    totalPacketLength += pIterator->iov_len;
 800c204:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c206:	685a      	ldr	r2, [r3, #4]
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	4413      	add	r3, r2
 800c20c:	617b      	str	r3, [r7, #20]
    pIterator++;
 800c20e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c210:	3308      	adds	r3, #8
 800c212:	663b      	str	r3, [r7, #96]	; 0x60
    ioVectorLength++;
 800c214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c216:	3301      	adds	r3, #1
 800c218:	65fb      	str	r3, [r7, #92]	; 0x5c

    while( ( status == MQTTSuccess ) && ( subscriptionsSent < subscriptionCount ) )
 800c21a:	e065      	b.n	800c2e8 <sendSubscribeWithoutCopy+0x14c>
    {
        /* Reset the index for next iteration. */
        topicFieldLengthIndex = 0;
 800c21c:	2300      	movs	r3, #0
 800c21e:	657b      	str	r3, [r7, #84]	; 0x54

        /* Check whether the subscription topic (with QoS) will fit in the
         * given vector. */
        while( ( ioVectorLength <= ( MQTT_SUB_UNSUB_MAX_VECTORS - subscriptionStringVectorSlots ) ) &&
 800c220:	e043      	b.n	800c2aa <sendSubscribeWithoutCopy+0x10e>
               ( subscriptionsSent < subscriptionCount ) )
        {
            /* The topic filter gets sent next. */
            vectorsAdded = addEncodedStringToVector( serializedTopicFieldLength[ topicFieldLengthIndex ],
 800c222:	f107 0218 	add.w	r2, r7, #24
 800c226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c228:	005b      	lsls	r3, r3, #1
 800c22a:	18d0      	adds	r0, r2, r3
                                                     pSubscriptionList[ subscriptionsSent ].pTopicFilter,
 800c22c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c22e:	4613      	mov	r3, r2
 800c230:	005b      	lsls	r3, r3, #1
 800c232:	4413      	add	r3, r2
 800c234:	009b      	lsls	r3, r3, #2
 800c236:	461a      	mov	r2, r3
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	4413      	add	r3, r2
            vectorsAdded = addEncodedStringToVector( serializedTopicFieldLength[ topicFieldLengthIndex ],
 800c23c:	6859      	ldr	r1, [r3, #4]
                                                     pSubscriptionList[ subscriptionsSent ].topicFilterLength,
 800c23e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c240:	4613      	mov	r3, r2
 800c242:	005b      	lsls	r3, r3, #1
 800c244:	4413      	add	r3, r2
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	461a      	mov	r2, r3
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	4413      	add	r3, r2
            vectorsAdded = addEncodedStringToVector( serializedTopicFieldLength[ topicFieldLengthIndex ],
 800c24e:	891a      	ldrh	r2, [r3, #8]
 800c250:	f107 0314 	add.w	r3, r7, #20
 800c254:	9300      	str	r3, [sp, #0]
 800c256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c258:	f7ff ff3c 	bl	800c0d4 <addEncodedStringToVector>
 800c25c:	64b8      	str	r0, [r7, #72]	; 0x48
                                                     pIterator,
                                                     &totalPacketLength );

            /* Update the pointer after the above operation. */
            pIterator = &pIterator[ vectorsAdded ];
 800c25e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c260:	00db      	lsls	r3, r3, #3
 800c262:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c264:	4413      	add	r3, r2
 800c266:	663b      	str	r3, [r7, #96]	; 0x60

            /* Lastly, the QoS gets sent. */
            pIterator->iov_base = &( pSubscriptionList[ subscriptionsSent ].qos );
 800c268:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c26a:	4613      	mov	r3, r2
 800c26c:	005b      	lsls	r3, r3, #1
 800c26e:	4413      	add	r3, r2
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	461a      	mov	r2, r3
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	4413      	add	r3, r2
 800c278:	461a      	mov	r2, r3
 800c27a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c27c:	601a      	str	r2, [r3, #0]
            pIterator->iov_len = 1U;
 800c27e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c280:	2201      	movs	r2, #1
 800c282:	605a      	str	r2, [r3, #4]
            totalPacketLength += pIterator->iov_len;
 800c284:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c286:	685a      	ldr	r2, [r3, #4]
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	4413      	add	r3, r2
 800c28c:	617b      	str	r3, [r7, #20]

            /* Increment the pointer. */
            pIterator++;
 800c28e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c290:	3308      	adds	r3, #8
 800c292:	663b      	str	r3, [r7, #96]	; 0x60

            /* Two slots get used by the topic string length and topic string.
             * One slot gets used by the quality of service. */
            ioVectorLength += vectorsAdded + 1U;
 800c294:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c298:	4413      	add	r3, r2
 800c29a:	3301      	adds	r3, #1
 800c29c:	65fb      	str	r3, [r7, #92]	; 0x5c

            subscriptionsSent++;
 800c29e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	65bb      	str	r3, [r7, #88]	; 0x58

            /* The index needs to be updated for next iteration. */
            topicFieldLengthIndex++;
 800c2a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	657b      	str	r3, [r7, #84]	; 0x54
        while( ( ioVectorLength <= ( MQTT_SUB_UNSUB_MAX_VECTORS - subscriptionStringVectorSlots ) ) &&
 800c2aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2ac:	f1c3 0304 	rsb	r3, r3, #4
 800c2b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d803      	bhi.n	800c2be <sendSubscribeWithoutCopy+0x122>
 800c2b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d3b1      	bcc.n	800c222 <sendSubscribeWithoutCopy+0x86>
        }

        if( sendMessageVector( pContext,
 800c2be:	f107 0320 	add.w	r3, r7, #32
 800c2c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	68f8      	ldr	r0, [r7, #12]
 800c2c8:	f7fe ff3a 	bl	800b140 <sendMessageVector>
 800c2cc:	4603      	mov	r3, r0
                               pIoVector,
                               ioVectorLength ) != ( int32_t ) totalPacketLength )
 800c2ce:	697a      	ldr	r2, [r7, #20]
        if( sendMessageVector( pContext,
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d002      	beq.n	800c2da <sendSubscribeWithoutCopy+0x13e>
        {
            status = MQTTSendFailed;
 800c2d4:	2303      	movs	r3, #3
 800c2d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }

        /* Update the iterator for the next potential loop iteration. */
        pIterator = pIoVector;
 800c2da:	f107 0320 	add.w	r3, r7, #32
 800c2de:	663b      	str	r3, [r7, #96]	; 0x60
        /* Reset the vector length for the next potential loop iteration. */
        ioVectorLength = 0U;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	65fb      	str	r3, [r7, #92]	; 0x5c
        /* Reset the packet length for the next potential loop iteration. */
        totalPacketLength = 0U;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	617b      	str	r3, [r7, #20]
    while( ( status == MQTTSuccess ) && ( subscriptionsSent < subscriptionCount ) )
 800c2e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d103      	bne.n	800c2f8 <sendSubscribeWithoutCopy+0x15c>
 800c2f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d391      	bcc.n	800c21c <sendSubscribeWithoutCopy+0x80>
    }

    return status;
 800c2f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3768      	adds	r7, #104	; 0x68
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	080149f4 	.word	0x080149f4
 800c308:	08015470 	.word	0x08015470
 800c30c:	080146e8 	.word	0x080146e8

0800c310 <sendPublishWithoutCopy>:
static MQTTStatus_t sendPublishWithoutCopy( MQTTContext_t * pContext,
                                            const MQTTPublishInfo_t * pPublishInfo,
                                            const uint8_t * pMqttHeader,
                                            size_t headerSize,
                                            uint16_t packetId )
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b092      	sub	sp, #72	; 0x48
 800c314:	af00      	add	r7, sp, #0
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	60b9      	str	r1, [r7, #8]
 800c31a:	607a      	str	r2, [r7, #4]
 800c31c:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800c31e:	2300      	movs	r3, #0
 800c320:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t serializedPacketID[ 2 ];
    TransportOutVector_t pIoVector[ 4 ];
    size_t ioVectorLength;
    size_t totalMessageLength;
    const size_t packetIDLength = 2U;
 800c324:	2302      	movs	r3, #2
 800c326:	63bb      	str	r3, [r7, #56]	; 0x38

    /* The header is sent first. */
    pIoVector[ 0U ].iov_base = pMqttHeader;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	617b      	str	r3, [r7, #20]
    pIoVector[ 0U ].iov_len = headerSize;
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	61bb      	str	r3, [r7, #24]
    totalMessageLength = headerSize;
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Then the topic name has to be sent. */
    pIoVector[ 1U ].iov_base = pPublishInfo->pTopicName;
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	61fb      	str	r3, [r7, #28]
    pIoVector[ 1U ].iov_len = pPublishInfo->topicNameLength;
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	891b      	ldrh	r3, [r3, #8]
 800c33e:	623b      	str	r3, [r7, #32]
    totalMessageLength += pPublishInfo->topicNameLength;
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	891b      	ldrh	r3, [r3, #8]
 800c344:	461a      	mov	r2, r3
 800c346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c348:	4413      	add	r3, r2
 800c34a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* The next field's index should be 2 as the first two fields
     * have been filled in. */
    ioVectorLength = 2U;
 800c34c:	2302      	movs	r3, #2
 800c34e:	643b      	str	r3, [r7, #64]	; 0x40

    if( pPublishInfo->qos > MQTTQoS0 )
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d021      	beq.n	800c39c <sendPublishWithoutCopy+0x8c>
    {
        /* Encode the packet ID. */
        serializedPacketID[ 0 ] = ( ( uint8_t ) ( ( packetId ) >> 8 ) );
 800c358:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800c35c:	0a1b      	lsrs	r3, r3, #8
 800c35e:	b29b      	uxth	r3, r3
 800c360:	b2db      	uxtb	r3, r3
 800c362:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        serializedPacketID[ 1 ] = ( ( uint8_t ) ( ( packetId ) & 0x00ffU ) );
 800c366:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

        pIoVector[ ioVectorLength ].iov_base = serializedPacketID;
 800c370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c372:	00db      	lsls	r3, r3, #3
 800c374:	3348      	adds	r3, #72	; 0x48
 800c376:	443b      	add	r3, r7
 800c378:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800c37c:	f843 2c34 	str.w	r2, [r3, #-52]
        pIoVector[ ioVectorLength ].iov_len = packetIDLength;
 800c380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c382:	00db      	lsls	r3, r3, #3
 800c384:	3348      	adds	r3, #72	; 0x48
 800c386:	443b      	add	r3, r7
 800c388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c38a:	f843 2c30 	str.w	r2, [r3, #-48]

        ioVectorLength++;
 800c38e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c390:	3301      	adds	r3, #1
 800c392:	643b      	str	r3, [r7, #64]	; 0x40
        totalMessageLength += packetIDLength;
 800c394:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c398:	4413      	add	r3, r2
 800c39a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Publish packets are allowed to contain no payload. */
    if( pPublishInfo->payloadLength > 0U )
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	691b      	ldr	r3, [r3, #16]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d017      	beq.n	800c3d4 <sendPublishWithoutCopy+0xc4>
    {
        pIoVector[ ioVectorLength ].iov_base = pPublishInfo->pPayload;
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	68da      	ldr	r2, [r3, #12]
 800c3a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3aa:	00db      	lsls	r3, r3, #3
 800c3ac:	3348      	adds	r3, #72	; 0x48
 800c3ae:	443b      	add	r3, r7
 800c3b0:	f843 2c34 	str.w	r2, [r3, #-52]
        pIoVector[ ioVectorLength ].iov_len = pPublishInfo->payloadLength;
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	691a      	ldr	r2, [r3, #16]
 800c3b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3ba:	00db      	lsls	r3, r3, #3
 800c3bc:	3348      	adds	r3, #72	; 0x48
 800c3be:	443b      	add	r3, r7
 800c3c0:	f843 2c30 	str.w	r2, [r3, #-48]

        ioVectorLength++;
 800c3c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	643b      	str	r3, [r7, #64]	; 0x40
        totalMessageLength += pPublishInfo->payloadLength;
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	691b      	ldr	r3, [r3, #16]
 800c3ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c3d0:	4413      	add	r3, r2
 800c3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if( sendMessageVector( pContext, pIoVector, ioVectorLength ) != ( int32_t ) totalMessageLength )
 800c3d4:	f107 0314 	add.w	r3, r7, #20
 800c3d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3da:	4619      	mov	r1, r3
 800c3dc:	68f8      	ldr	r0, [r7, #12]
 800c3de:	f7fe feaf 	bl	800b140 <sendMessageVector>
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d002      	beq.n	800c3f0 <sendPublishWithoutCopy+0xe0>
    {
        status = MQTTSendFailed;
 800c3ea:	2303      	movs	r3, #3
 800c3ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return status;
 800c3f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3748      	adds	r7, #72	; 0x48
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <sendConnectWithoutCopy>:

static MQTTStatus_t sendConnectWithoutCopy( MQTTContext_t * pContext,
                                            const MQTTConnectInfo_t * pConnectInfo,
                                            const MQTTPublishInfo_t * pWillInfo,
                                            size_t remainingLength )
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b0ac      	sub	sp, #176	; 0xb0
 800c400:	af02      	add	r7, sp, #8
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	60b9      	str	r1, [r7, #8]
 800c406:	607a      	str	r2, [r7, #4]
 800c408:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800c40a:	2300      	movs	r3, #0
 800c40c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    TransportOutVector_t * iterator;
    size_t ioVectorLength = 0U;
 800c410:	2300      	movs	r3, #0
 800c412:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    size_t totalMessageLength = 0U;
 800c416:	2300      	movs	r3, #0
 800c418:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    int32_t bytesSentOrError;

    /* Connect packet header can be of maximum 15 bytes. */
    uint8_t connectPacketHeader[ 15 ];
    uint8_t * pIndex = connectPacketHeader;
 800c41c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800c420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint8_t serializedPayloadLength[ 2 ];
    uint8_t serializedUsernameLength[ 2 ];
    uint8_t serializedPasswordLength[ 2 ];
    size_t vectorsAdded;

    iterator = pIoVector;
 800c424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c428:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /* Validate arguments. */
    if( ( pWillInfo != NULL ) && ( pWillInfo->pTopicName == NULL ) )
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d007      	beq.n	800c442 <sendConnectWithoutCopy+0x46>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d103      	bne.n	800c442 <sendConnectWithoutCopy+0x46>
    {
        LogError( ( "pWillInfo->pTopicName cannot be NULL if Will is present." ) );
        status = MQTTBadParameter;
 800c43a:	2301      	movs	r3, #1
 800c43c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800c440:	e0ec      	b.n	800c61c <sendConnectWithoutCopy+0x220>
    }
    else
    {
        pIndex = MQTT_SerializeConnectFixedHeader( pIndex,
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	687a      	ldr	r2, [r7, #4]
 800c446:	68b9      	ldr	r1, [r7, #8]
 800c448:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800c44c:	f001 fa22 	bl	800d894 <MQTT_SerializeConnectFixedHeader>
 800c450:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                                                   pConnectInfo,
                                                   pWillInfo,
                                                   remainingLength );

        assert( ( pIndex - connectPacketHeader ) <= 15 );
 800c454:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800c458:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c45c:	1ad3      	subs	r3, r2, r3
 800c45e:	2b0f      	cmp	r3, #15
 800c460:	dd06      	ble.n	800c470 <sendConnectWithoutCopy+0x74>
 800c462:	4b71      	ldr	r3, [pc, #452]	; (800c628 <sendConnectWithoutCopy+0x22c>)
 800c464:	4a71      	ldr	r2, [pc, #452]	; (800c62c <sendConnectWithoutCopy+0x230>)
 800c466:	f640 0172 	movw	r1, #2162	; 0x872
 800c46a:	4871      	ldr	r0, [pc, #452]	; (800c630 <sendConnectWithoutCopy+0x234>)
 800c46c:	f005 fed6 	bl	801221c <__assert_func>

        /* The header gets sent first. */
        iterator->iov_base = connectPacketHeader;
 800c470:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c474:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800c478:	601a      	str	r2, [r3, #0]
        /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-182 */
        /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-108 */
        /* coverity[misra_c_2012_rule_18_2_violation] */
        /* coverity[misra_c_2012_rule_10_8_violation] */
        iterator->iov_len = ( size_t ) ( pIndex - connectPacketHeader );
 800c47a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800c47e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c482:	1ad3      	subs	r3, r2, r3
 800c484:	461a      	mov	r2, r3
 800c486:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c48a:	605a      	str	r2, [r3, #4]
        totalMessageLength += iterator->iov_len;
 800c48c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c490:	685a      	ldr	r2, [r3, #4]
 800c492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c496:	4413      	add	r3, r2
 800c498:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        iterator++;
 800c49c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c4a0:	3308      	adds	r3, #8
 800c4a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        ioVectorLength++;
 800c4a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        /* Serialize the client ID. */
        vectorsAdded = addEncodedStringToVector( serializedClientIDLength,
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	6859      	ldr	r1, [r3, #4]
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	891a      	ldrh	r2, [r3, #8]
 800c4b8:	f107 0020 	add.w	r0, r7, #32
 800c4bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c4c0:	9300      	str	r3, [sp, #0]
 800c4c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c4c6:	f7ff fe05 	bl	800c0d4 <addEncodedStringToVector>
 800c4ca:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                 pConnectInfo->clientIdentifierLength,
                                                 iterator,
                                                 &totalMessageLength );

        /* Update the iterator to point to the next empty slot. */
        iterator = &iterator[ vectorsAdded ];
 800c4ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c4d2:	00db      	lsls	r3, r3, #3
 800c4d4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c4d8:	4413      	add	r3, r2
 800c4da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        ioVectorLength += vectorsAdded;
 800c4de:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c4e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c4e6:	4413      	add	r3, r2
 800c4e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        if( pWillInfo != NULL )
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d03c      	beq.n	800c56c <sendConnectWithoutCopy+0x170>
        {
            /* Serialize the topic. */
            vectorsAdded = addEncodedStringToVector( serializedTopicLength,
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6859      	ldr	r1, [r3, #4]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	891a      	ldrh	r2, [r3, #8]
 800c4fa:	f107 001c 	add.w	r0, r7, #28
 800c4fe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c502:	9300      	str	r3, [sp, #0]
 800c504:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c508:	f7ff fde4 	bl	800c0d4 <addEncodedStringToVector>
 800c50c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     pWillInfo->topicNameLength,
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800c510:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c514:	00db      	lsls	r3, r3, #3
 800c516:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c51a:	4413      	add	r3, r2
 800c51c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800c520:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c524:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c528:	4413      	add	r3, r2
 800c52a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


            /* Serialize the payload. Payload of last will and testament can be NULL. */
            vectorsAdded = addEncodedStringToVector( serializedPayloadLength,
                                                     pWillInfo->pPayload,
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	68d9      	ldr	r1, [r3, #12]
                                                     ( uint16_t ) pWillInfo->payloadLength,
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	691b      	ldr	r3, [r3, #16]
            vectorsAdded = addEncodedStringToVector( serializedPayloadLength,
 800c536:	b29a      	uxth	r2, r3
 800c538:	f107 0018 	add.w	r0, r7, #24
 800c53c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c540:	9300      	str	r3, [sp, #0]
 800c542:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c546:	f7ff fdc5 	bl	800c0d4 <addEncodedStringToVector>
 800c54a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800c54e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c552:	00db      	lsls	r3, r3, #3
 800c554:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c558:	4413      	add	r3, r2
 800c55a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800c55e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c562:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c566:	4413      	add	r3, r2
 800c568:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        /* Encode the user name if provided. */
        if( pConnectInfo->pUserName != NULL )
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	68db      	ldr	r3, [r3, #12]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d01d      	beq.n	800c5b0 <sendConnectWithoutCopy+0x1b4>
        {
            /* Serialize the user name string. */
            vectorsAdded = addEncodedStringToVector( serializedUsernameLength,
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	68d9      	ldr	r1, [r3, #12]
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	8a1a      	ldrh	r2, [r3, #16]
 800c57c:	f107 0014 	add.w	r0, r7, #20
 800c580:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c584:	9300      	str	r3, [sp, #0]
 800c586:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c58a:	f7ff fda3 	bl	800c0d4 <addEncodedStringToVector>
 800c58e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     pConnectInfo->userNameLength,
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800c592:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c596:	00db      	lsls	r3, r3, #3
 800c598:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c59c:	4413      	add	r3, r2
 800c59e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800c5a2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c5a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c5aa:	4413      	add	r3, r2
 800c5ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        /* Encode the password if provided. */
        if( pConnectInfo->pPassword != NULL )
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	695b      	ldr	r3, [r3, #20]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d01d      	beq.n	800c5f4 <sendConnectWithoutCopy+0x1f8>
        {
            /* Serialize the user name string. */
            vectorsAdded = addEncodedStringToVector( serializedPasswordLength,
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	6959      	ldr	r1, [r3, #20]
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	8b1a      	ldrh	r2, [r3, #24]
 800c5c0:	f107 0010 	add.w	r0, r7, #16
 800c5c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c5c8:	9300      	str	r3, [sp, #0]
 800c5ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c5ce:	f7ff fd81 	bl	800c0d4 <addEncodedStringToVector>
 800c5d2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     pConnectInfo->pPassword,
                                                     pConnectInfo->passwordLength,
                                                     iterator,
                                                     &totalMessageLength );
            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800c5d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c5da:	00db      	lsls	r3, r3, #3
 800c5dc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c5e0:	4413      	add	r3, r2
 800c5e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800c5e6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c5ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c5ee:	4413      	add	r3, r2
 800c5f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        bytesSentOrError = sendMessageVector( pContext, pIoVector, ioVectorLength );
 800c5f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5f8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	68f8      	ldr	r0, [r7, #12]
 800c600:	f7fe fd9e 	bl	800b140 <sendMessageVector>
 800c604:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

        if( bytesSentOrError != ( int32_t ) totalMessageLength )
 800c608:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c60c:	461a      	mov	r2, r3
 800c60e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c612:	4293      	cmp	r3, r2
 800c614:	d002      	beq.n	800c61c <sendConnectWithoutCopy+0x220>
        {
            status = MQTTSendFailed;
 800c616:	2303      	movs	r3, #3
 800c618:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        }
    }

    return status;
 800c61c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 800c620:	4618      	mov	r0, r3
 800c622:	37a8      	adds	r7, #168	; 0xa8
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}
 800c628:	08014a6c 	.word	0x08014a6c
 800c62c:	0801548c 	.word	0x0801548c
 800c630:	080146e8 	.word	0x080146e8

0800c634 <receiveConnack>:
static MQTTStatus_t receiveConnack( const MQTTContext_t * pContext,
                                    uint32_t timeoutMs,
                                    bool cleanSession,
                                    MQTTPacketInfo_t * pIncomingPacket,
                                    bool * pSessionPresent )
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b08c      	sub	sp, #48	; 0x30
 800c638:	af02      	add	r7, sp, #8
 800c63a:	60f8      	str	r0, [r7, #12]
 800c63c:	60b9      	str	r1, [r7, #8]
 800c63e:	603b      	str	r3, [r7, #0]
 800c640:	4613      	mov	r3, r2
 800c642:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTSuccess;
 800c644:	2300      	movs	r3, #0
 800c646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MQTTGetCurrentTimeFunc_t getTimeStamp = NULL;
 800c64a:	2300      	movs	r3, #0
 800c64c:	61bb      	str	r3, [r7, #24]
    uint32_t entryTimeMs = 0U, remainingTimeMs = 0U, timeTakenMs = 0U;
 800c64e:	2300      	movs	r3, #0
 800c650:	617b      	str	r3, [r7, #20]
 800c652:	2300      	movs	r3, #0
 800c654:	623b      	str	r3, [r7, #32]
 800c656:	2300      	movs	r3, #0
 800c658:	613b      	str	r3, [r7, #16]
    bool breakFromLoop = false;
 800c65a:	2300      	movs	r3, #0
 800c65c:	77fb      	strb	r3, [r7, #31]
    uint16_t loopCount = 0U;
 800c65e:	2300      	movs	r3, #0
 800c660:	83bb      	strh	r3, [r7, #28]

    assert( pContext != NULL );
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d106      	bne.n	800c676 <receiveConnack+0x42>
 800c668:	4b4e      	ldr	r3, [pc, #312]	; (800c7a4 <receiveConnack+0x170>)
 800c66a:	4a4f      	ldr	r2, [pc, #316]	; (800c7a8 <receiveConnack+0x174>)
 800c66c:	f640 01da 	movw	r1, #2266	; 0x8da
 800c670:	484e      	ldr	r0, [pc, #312]	; (800c7ac <receiveConnack+0x178>)
 800c672:	f005 fdd3 	bl	801221c <__assert_func>
    assert( pIncomingPacket != NULL );
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d106      	bne.n	800c68a <receiveConnack+0x56>
 800c67c:	4b4c      	ldr	r3, [pc, #304]	; (800c7b0 <receiveConnack+0x17c>)
 800c67e:	4a4a      	ldr	r2, [pc, #296]	; (800c7a8 <receiveConnack+0x174>)
 800c680:	f640 01db 	movw	r1, #2267	; 0x8db
 800c684:	4849      	ldr	r0, [pc, #292]	; (800c7ac <receiveConnack+0x178>)
 800c686:	f005 fdc9 	bl	801221c <__assert_func>
    assert( pContext->getTime != NULL );
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d106      	bne.n	800c6a0 <receiveConnack+0x6c>
 800c692:	4b48      	ldr	r3, [pc, #288]	; (800c7b4 <receiveConnack+0x180>)
 800c694:	4a44      	ldr	r2, [pc, #272]	; (800c7a8 <receiveConnack+0x174>)
 800c696:	f640 01dc 	movw	r1, #2268	; 0x8dc
 800c69a:	4844      	ldr	r0, [pc, #272]	; (800c7ac <receiveConnack+0x178>)
 800c69c:	f005 fdbe 	bl	801221c <__assert_func>

    getTimeStamp = pContext->getTime;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6a4:	61bb      	str	r3, [r7, #24]

    /* Get the entry time for the function. */
    entryTimeMs = getTimeStamp();
 800c6a6:	69bb      	ldr	r3, [r7, #24]
 800c6a8:	4798      	blx	r3
 800c6aa:	6178      	str	r0, [r7, #20]
    {
        /* Transport read for incoming CONNACK packet type and length.
         * MQTT_GetIncomingPacketTypeAndLength is a blocking call and it is
         * returned after a transport receive timeout, an error, or a successful
         * receive of packet type and length. */
        status = MQTT_GetIncomingPacketTypeAndLength( pContext->transportInterface.recv,
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	6918      	ldr	r0, [r3, #16]
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	69db      	ldr	r3, [r3, #28]
 800c6b4:	683a      	ldr	r2, [r7, #0]
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	f001 fb8c 	bl	800ddd4 <MQTT_GetIncomingPacketTypeAndLength>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
         * 2. If timeoutMs is 0:
         *    Loop times out based on the maximum number of retries config
         *    MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT. This config will control
         *    maximum the number of retry attempts to read the CONNACK packet.
         *    A value of 0 for the config will try once to read CONNACK. */
        if( timeoutMs > 0U )
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d00e      	beq.n	800c6e6 <receiveConnack+0xb2>
        {
            breakFromLoop = calculateElapsedTime( getTimeStamp(), entryTimeMs ) >= timeoutMs;
 800c6c8:	69bb      	ldr	r3, [r7, #24]
 800c6ca:	4798      	blx	r3
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	6979      	ldr	r1, [r7, #20]
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f7fe fea9 	bl	800b428 <calculateElapsedTime>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	bf94      	ite	ls
 800c6de:	2301      	movls	r3, #1
 800c6e0:	2300      	movhi	r3, #0
 800c6e2:	77fb      	strb	r3, [r7, #31]
 800c6e4:	e008      	b.n	800c6f8 <receiveConnack+0xc4>
        }
        else
        {
            breakFromLoop = loopCount >= MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT;
 800c6e6:	8bbb      	ldrh	r3, [r7, #28]
 800c6e8:	2b04      	cmp	r3, #4
 800c6ea:	bf8c      	ite	hi
 800c6ec:	2301      	movhi	r3, #1
 800c6ee:	2300      	movls	r3, #0
 800c6f0:	77fb      	strb	r3, [r7, #31]
            loopCount++;
 800c6f2:	8bbb      	ldrh	r3, [r7, #28]
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	83bb      	strh	r3, [r7, #28]
        }

        /* Loop until there is data to read or if we have exceeded the timeout/retries. */
    } while( ( status == MQTTNoDataAvailable ) && ( breakFromLoop == false ) );
 800c6f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6fc:	2b07      	cmp	r3, #7
 800c6fe:	d105      	bne.n	800c70c <receiveConnack+0xd8>
 800c700:	7ffb      	ldrb	r3, [r7, #31]
 800c702:	f083 0301 	eor.w	r3, r3, #1
 800c706:	b2db      	uxtb	r3, r3
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d1cf      	bne.n	800c6ac <receiveConnack+0x78>

    if( status == MQTTSuccess )
 800c70c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c710:	2b00      	cmp	r3, #0
 800c712:	d123      	bne.n	800c75c <receiveConnack+0x128>
    {
        /* Time taken in this function so far. */
        timeTakenMs = calculateElapsedTime( getTimeStamp(), entryTimeMs );
 800c714:	69bb      	ldr	r3, [r7, #24]
 800c716:	4798      	blx	r3
 800c718:	4603      	mov	r3, r0
 800c71a:	6979      	ldr	r1, [r7, #20]
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7fe fe83 	bl	800b428 <calculateElapsedTime>
 800c722:	6138      	str	r0, [r7, #16]

        if( timeTakenMs < timeoutMs )
 800c724:	693a      	ldr	r2, [r7, #16]
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	429a      	cmp	r2, r3
 800c72a:	d203      	bcs.n	800c734 <receiveConnack+0x100>
        {
            /* Calculate remaining time for receiving the remainder of
             * the packet. */
            remainingTimeMs = timeoutMs - timeTakenMs;
 800c72c:	68ba      	ldr	r2, [r7, #8]
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	1ad3      	subs	r3, r2, r3
 800c732:	623b      	str	r3, [r7, #32]
         * Invoking receivePacket with remainingTime as 0 would attempt to
         * recv from network once. If using retries, the remainder of the
         * CONNACK packet is tried to be read only once. Reading once would be
         * good as the packet type and remaining length was already read. Hence,
         * the probability of the remaining 2 bytes available to read is very high. */
        if( pIncomingPacket->type == MQTT_PACKET_TYPE_CONNACK )
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	2b20      	cmp	r3, #32
 800c73a:	d10c      	bne.n	800c756 <receiveConnack+0x122>
        {
            status = receivePacket( pContext,
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	6a3a      	ldr	r2, [r7, #32]
 800c740:	9201      	str	r2, [sp, #4]
 800c742:	68da      	ldr	r2, [r3, #12]
 800c744:	9200      	str	r2, [sp, #0]
 800c746:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c748:	68f8      	ldr	r0, [r7, #12]
 800c74a:	f7ff f869 	bl	800b820 <receivePacket>
 800c74e:	4603      	mov	r3, r0
 800c750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c754:	e002      	b.n	800c75c <receiveConnack+0x128>
        {
            LogError( ( "Incorrect packet type %X received while expecting"
                        " CONNACK(%X).",
                        ( unsigned int ) pIncomingPacket->type,
                        MQTT_PACKET_TYPE_CONNACK ) );
            status = MQTTBadResponse;
 800c756:	2305      	movs	r3, #5
 800c758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    if( status == MQTTSuccess )
 800c75c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c760:	2b00      	cmp	r3, #0
 800c762:	d10b      	bne.n	800c77c <receiveConnack+0x148>
    {
        /* Update the packet info pointer to the buffer read. */
        pIncomingPacket->pRemainingData = pContext->networkBuffer.pBuffer;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	6a1a      	ldr	r2, [r3, #32]
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	605a      	str	r2, [r3, #4]

        /* Deserialize CONNACK. */
        status = MQTT_DeserializeAck( pIncomingPacket, NULL, pSessionPresent );
 800c76c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c76e:	2100      	movs	r1, #0
 800c770:	6838      	ldr	r0, [r7, #0]
 800c772:	f001 fabc 	bl	800dcee <MQTT_DeserializeAck>
 800c776:	4603      	mov	r3, r0
 800c778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If a clean session is requested, a session present should not be set by
     * broker. */
    if( status == MQTTSuccess )
 800c77c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c780:	2b00      	cmp	r3, #0
 800c782:	d109      	bne.n	800c798 <receiveConnack+0x164>
    {
        if( ( cleanSession == true ) && ( *pSessionPresent == true ) )
 800c784:	79fb      	ldrb	r3, [r7, #7]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d006      	beq.n	800c798 <receiveConnack+0x164>
 800c78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d002      	beq.n	800c798 <receiveConnack+0x164>
        {
            LogError( ( "Unexpected session present flag in CONNACK response from broker."
                        " CONNECT request with clean session was made with broker." ) );
            status = MQTTBadResponse;
 800c792:	2305      	movs	r3, #5
 800c794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        LogError( ( "CONNACK recv failed with status = %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800c798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3728      	adds	r7, #40	; 0x28
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	080147c4 	.word	0x080147c4
 800c7a8:	080154a4 	.word	0x080154a4
 800c7ac:	080146e8 	.word	0x080146e8
 800c7b0:	08014994 	.word	0x08014994
 800c7b4:	080147e8 	.word	0x080147e8

0800c7b8 <handleSessionResumption>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleSessionResumption( MQTTContext_t * pContext,
                                             bool sessionPresent )
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b086      	sub	sp, #24
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	70fb      	strb	r3, [r7, #3]
    MQTTStatus_t status = MQTTSuccess;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	75fb      	strb	r3, [r7, #23]
    MQTTStateCursor_t cursor = MQTT_STATE_CURSOR_INITIALIZER;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	613b      	str	r3, [r7, #16]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	82bb      	strh	r3, [r7, #20]
    MQTTPublishState_t state = MQTTStateNull;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	73fb      	strb	r3, [r7, #15]

    assert( pContext != NULL );
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d106      	bne.n	800c7e8 <handleSessionResumption+0x30>
 800c7da:	4b2c      	ldr	r3, [pc, #176]	; (800c88c <handleSessionResumption+0xd4>)
 800c7dc:	4a2c      	ldr	r2, [pc, #176]	; (800c890 <handleSessionResumption+0xd8>)
 800c7de:	f640 1152 	movw	r1, #2386	; 0x952
 800c7e2:	482c      	ldr	r0, [pc, #176]	; (800c894 <handleSessionResumption+0xdc>)
 800c7e4:	f005 fd1a 	bl	801221c <__assert_func>

    /* Reset the index and clear the buffer when a new session is established. */
    pContext->index = 0;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) memset( pContext->networkBuffer.pBuffer, 0, pContext->networkBuffer.size );
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6a18      	ldr	r0, [r3, #32]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	2100      	movs	r1, #0
 800c7fa:	f005 fe9a 	bl	8012532 <memset>

    if( sessionPresent == true )
 800c7fe:	78fb      	ldrb	r3, [r7, #3]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d023      	beq.n	800c84c <handleSessionResumption+0x94>
    {
        /* Get the next packet ID for which a PUBREL need to be resent. */
        packetId = MQTT_PubrelToResend( pContext, &cursor, &state );
 800c804:	f107 020f 	add.w	r2, r7, #15
 800c808:	f107 0310 	add.w	r3, r7, #16
 800c80c:	4619      	mov	r1, r3
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f002 f8ed 	bl	800e9ee <MQTT_PubrelToResend>
 800c814:	4603      	mov	r3, r0
 800c816:	82bb      	strh	r3, [r7, #20]

        /* Resend all the PUBREL acks after session is reestablished. */
        while( ( packetId != MQTT_PACKET_ID_INVALID ) &&
 800c818:	e011      	b.n	800c83e <handleSessionResumption+0x86>
               ( status == MQTTSuccess ) )
        {
            status = sendPublishAcks( pContext, packetId, state );
 800c81a:	7bfa      	ldrb	r2, [r7, #15]
 800c81c:	8abb      	ldrh	r3, [r7, #20]
 800c81e:	4619      	mov	r1, r3
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f7ff f877 	bl	800b914 <sendPublishAcks>
 800c826:	4603      	mov	r3, r0
 800c828:	75fb      	strb	r3, [r7, #23]

            packetId = MQTT_PubrelToResend( pContext, &cursor, &state );
 800c82a:	f107 020f 	add.w	r2, r7, #15
 800c82e:	f107 0310 	add.w	r3, r7, #16
 800c832:	4619      	mov	r1, r3
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f002 f8da 	bl	800e9ee <MQTT_PubrelToResend>
 800c83a:	4603      	mov	r3, r0
 800c83c:	82bb      	strh	r3, [r7, #20]
        while( ( packetId != MQTT_PACKET_ID_INVALID ) &&
 800c83e:	8abb      	ldrh	r3, [r7, #20]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d01d      	beq.n	800c880 <handleSessionResumption+0xc8>
 800c844:	7dfb      	ldrb	r3, [r7, #23]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d0e7      	beq.n	800c81a <handleSessionResumption+0x62>
 800c84a:	e019      	b.n	800c880 <handleSessionResumption+0xc8>
        }
    }
    else
    {
        /* Clear any existing records if a new session is established. */
        if( pContext->outgoingPublishRecordMaxCount > 0U )
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	689b      	ldr	r3, [r3, #8]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d008      	beq.n	800c866 <handleSessionResumption+0xae>
        {
            ( void ) memset( pContext->outgoingPublishRecords,
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6818      	ldr	r0, [r3, #0]
                             0x00,
                             pContext->outgoingPublishRecordMaxCount * sizeof( *pContext->outgoingPublishRecords ) );
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	689b      	ldr	r3, [r3, #8]
            ( void ) memset( pContext->outgoingPublishRecords,
 800c85c:	009b      	lsls	r3, r3, #2
 800c85e:	461a      	mov	r2, r3
 800c860:	2100      	movs	r1, #0
 800c862:	f005 fe66 	bl	8012532 <memset>
        }

        if( pContext->incomingPublishRecordMaxCount > 0U )
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	68db      	ldr	r3, [r3, #12]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d008      	beq.n	800c880 <handleSessionResumption+0xc8>
        {
            ( void ) memset( pContext->incomingPublishRecords,
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6858      	ldr	r0, [r3, #4]
                             0x00,
                             pContext->incomingPublishRecordMaxCount * sizeof( *pContext->incomingPublishRecords ) );
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	68db      	ldr	r3, [r3, #12]
            ( void ) memset( pContext->incomingPublishRecords,
 800c876:	009b      	lsls	r3, r3, #2
 800c878:	461a      	mov	r2, r3
 800c87a:	2100      	movs	r1, #0
 800c87c:	f005 fe59 	bl	8012532 <memset>
        }
    }

    return status;
 800c880:	7dfb      	ldrb	r3, [r7, #23]
}
 800c882:	4618      	mov	r0, r3
 800c884:	3718      	adds	r7, #24
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
 800c88a:	bf00      	nop
 800c88c:	080147c4 	.word	0x080147c4
 800c890:	080154b4 	.word	0x080154b4
 800c894:	080146e8 	.word	0x080146e8

0800c898 <validatePublishParams>:

static MQTTStatus_t validatePublishParams( const MQTTContext_t * pContext,
                                           const MQTTPublishInfo_t * pPublishInfo,
                                           uint16_t packetId )
{
 800c898:	b480      	push	{r7}
 800c89a:	b087      	sub	sp, #28
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	60f8      	str	r0, [r7, #12]
 800c8a0:	60b9      	str	r1, [r7, #8]
 800c8a2:	4613      	mov	r3, r2
 800c8a4:	80fb      	strh	r3, [r7, #6]
    MQTTStatus_t status = MQTTSuccess;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	75fb      	strb	r3, [r7, #23]

    /* Validate arguments. */
    if( ( pContext == NULL ) || ( pPublishInfo == NULL ) )
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d002      	beq.n	800c8b6 <validatePublishParams+0x1e>
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d102      	bne.n	800c8bc <validatePublishParams+0x24>
    {
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pPublishInfo=%p.",
                    ( void * ) pContext,
                    ( void * ) pPublishInfo ) );
        status = MQTTBadParameter;
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	75fb      	strb	r3, [r7, #23]
 800c8ba:	e01e      	b.n	800c8fa <validatePublishParams+0x62>
    }
    else if( ( pPublishInfo->qos != MQTTQoS0 ) && ( packetId == 0U ) )
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d005      	beq.n	800c8d0 <validatePublishParams+0x38>
 800c8c4:	88fb      	ldrh	r3, [r7, #6]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d102      	bne.n	800c8d0 <validatePublishParams+0x38>
    {
        LogError( ( "Packet Id is 0 for PUBLISH with QoS=%u.",
                    ( unsigned int ) pPublishInfo->qos ) );
        status = MQTTBadParameter;
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	75fb      	strb	r3, [r7, #23]
 800c8ce:	e014      	b.n	800c8fa <validatePublishParams+0x62>
    }
    else if( ( pPublishInfo->payloadLength > 0U ) && ( pPublishInfo->pPayload == NULL ) )
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	691b      	ldr	r3, [r3, #16]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d006      	beq.n	800c8e6 <validatePublishParams+0x4e>
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	68db      	ldr	r3, [r3, #12]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d102      	bne.n	800c8e6 <validatePublishParams+0x4e>
    {
        LogError( ( "A nonzero payload length requires a non-NULL payload: "
                    "payloadLength=%lu, pPayload=%p.",
                    ( unsigned long ) pPublishInfo->payloadLength,
                    pPublishInfo->pPayload ) );
        status = MQTTBadParameter;
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	75fb      	strb	r3, [r7, #23]
 800c8e4:	e009      	b.n	800c8fa <validatePublishParams+0x62>
    }
    else if( ( pContext->outgoingPublishRecords == NULL ) && ( pPublishInfo->qos > MQTTQoS0 ) )
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d105      	bne.n	800c8fa <validatePublishParams+0x62>
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d001      	beq.n	800c8fa <validatePublishParams+0x62>
    {
        LogError( ( "Trying to publish a QoS > MQTTQoS0 packet when outgoing publishes "
                    "for QoS1/QoS2 have not been enabled. Please, call MQTT_InitStatefulQoS "
                    "to initialize and enable the use of QoS1/QoS2 publishes." ) );
        status = MQTTBadParameter;
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* MISRA else */
    }

    return status;
 800c8fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	371c      	adds	r7, #28
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr

0800c908 <MQTT_Init>:
MQTTStatus_t MQTT_Init( MQTTContext_t * pContext,
                        const TransportInterface_t * pTransportInterface,
                        MQTTGetCurrentTimeFunc_t getTimeFunction,
                        MQTTEventCallback_t userCallback,
                        const MQTTFixedBuffer_t * pNetworkBuffer )
{
 800c908:	b590      	push	{r4, r7, lr}
 800c90a:	b087      	sub	sp, #28
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	60f8      	str	r0, [r7, #12]
 800c910:	60b9      	str	r1, [r7, #8]
 800c912:	607a      	str	r2, [r7, #4]
 800c914:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800c916:	2300      	movs	r3, #0
 800c918:	75fb      	strb	r3, [r7, #23]

    /* Validate arguments. */
    if( ( pContext == NULL ) || ( pTransportInterface == NULL ) ||
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d005      	beq.n	800c92c <MQTT_Init+0x24>
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d002      	beq.n	800c92c <MQTT_Init+0x24>
 800c926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d102      	bne.n	800c932 <MQTT_Init+0x2a>
                    "pTransportInterface=%p, "
                    "pNetworkBuffer=%p",
                    ( void * ) pContext,
                    ( void * ) pTransportInterface,
                    ( void * ) pNetworkBuffer ) );
        status = MQTTBadParameter;
 800c92c:	2301      	movs	r3, #1
 800c92e:	75fb      	strb	r3, [r7, #23]
 800c930:	e03a      	b.n	800c9a8 <MQTT_Init+0xa0>
    }
    else if( getTimeFunction == NULL )
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d102      	bne.n	800c93e <MQTT_Init+0x36>
    {
        LogError( ( "Invalid parameter: getTimeFunction is NULL" ) );
        status = MQTTBadParameter;
 800c938:	2301      	movs	r3, #1
 800c93a:	75fb      	strb	r3, [r7, #23]
 800c93c:	e034      	b.n	800c9a8 <MQTT_Init+0xa0>
    }
    else if( userCallback == NULL )
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d102      	bne.n	800c94a <MQTT_Init+0x42>
    {
        LogError( ( "Invalid parameter: userCallback is NULL" ) );
        status = MQTTBadParameter;
 800c944:	2301      	movs	r3, #1
 800c946:	75fb      	strb	r3, [r7, #23]
 800c948:	e02e      	b.n	800c9a8 <MQTT_Init+0xa0>
    }
    else if( pTransportInterface->recv == NULL )
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d102      	bne.n	800c958 <MQTT_Init+0x50>
    {
        LogError( ( "Invalid parameter: pTransportInterface->recv is NULL" ) );
        status = MQTTBadParameter;
 800c952:	2301      	movs	r3, #1
 800c954:	75fb      	strb	r3, [r7, #23]
 800c956:	e027      	b.n	800c9a8 <MQTT_Init+0xa0>
    }
    else if( pTransportInterface->send == NULL )
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	685b      	ldr	r3, [r3, #4]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d102      	bne.n	800c966 <MQTT_Init+0x5e>
    {
        LogError( ( "Invalid parameter: pTransportInterface->send is NULL" ) );
        status = MQTTBadParameter;
 800c960:	2301      	movs	r3, #1
 800c962:	75fb      	strb	r3, [r7, #23]
 800c964:	e020      	b.n	800c9a8 <MQTT_Init+0xa0>
    }
    else
    {
        ( void ) memset( pContext, 0x00, sizeof( MQTTContext_t ) );
 800c966:	2250      	movs	r2, #80	; 0x50
 800c968:	2100      	movs	r1, #0
 800c96a:	68f8      	ldr	r0, [r7, #12]
 800c96c:	f005 fde1 	bl	8012532 <memset>

        pContext->connectStatus = MQTTNotConnected;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	2200      	movs	r2, #0
 800c974:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        pContext->transportInterface = *pTransportInterface;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	68ba      	ldr	r2, [r7, #8]
 800c97c:	f103 0410 	add.w	r4, r3, #16
 800c980:	4613      	mov	r3, r2
 800c982:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c984:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        pContext->getTime = getTimeFunction;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	62da      	str	r2, [r3, #44]	; 0x2c
        pContext->appCallback = userCallback;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	683a      	ldr	r2, [r7, #0]
 800c992:	631a      	str	r2, [r3, #48]	; 0x30
        pContext->networkBuffer = *pNetworkBuffer;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c998:	3320      	adds	r3, #32
 800c99a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c99e:	e883 0003 	stmia.w	r3, {r0, r1}

        /* Zero is not a valid packet ID per MQTT spec. Start from 1. */
        pContext->nextPacketId = 1;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    return status;
 800c9a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	371c      	adds	r7, #28
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd90      	pop	{r4, r7, pc}

0800c9b2 <MQTT_Connect>:
MQTTStatus_t MQTT_Connect( MQTTContext_t * pContext,
                           const MQTTConnectInfo_t * pConnectInfo,
                           const MQTTPublishInfo_t * pWillInfo,
                           uint32_t timeoutMs,
                           bool * pSessionPresent )
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b08e      	sub	sp, #56	; 0x38
 800c9b6:	af02      	add	r7, sp, #8
 800c9b8:	60f8      	str	r0, [r7, #12]
 800c9ba:	60b9      	str	r1, [r7, #8]
 800c9bc:	607a      	str	r2, [r7, #4]
 800c9be:	603b      	str	r3, [r7, #0]
    size_t remainingLength = 0UL, packetSize = 0UL;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	627b      	str	r3, [r7, #36]	; 0x24
    MQTTStatus_t status = MQTTSuccess;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    MQTTPacketInfo_t incomingPacket = { 0 };
 800c9ce:	f107 0314 	add.w	r3, r7, #20
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	601a      	str	r2, [r3, #0]
 800c9d6:	605a      	str	r2, [r3, #4]
 800c9d8:	609a      	str	r2, [r3, #8]
 800c9da:	60da      	str	r2, [r3, #12]

    incomingPacket.type = ( uint8_t ) 0;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	753b      	strb	r3, [r7, #20]

    if( ( pContext == NULL ) || ( pConnectInfo == NULL ) || ( pSessionPresent == NULL ) )
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d005      	beq.n	800c9f2 <MQTT_Connect+0x40>
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d002      	beq.n	800c9f2 <MQTT_Connect+0x40>
 800c9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d102      	bne.n	800c9f8 <MQTT_Connect+0x46>
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pConnectInfo=%p, pSessionPresent=%p.",
                    ( void * ) pContext,
                    ( void * ) pConnectInfo,
                    ( void * ) pSessionPresent ) );
        status = MQTTBadParameter;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800c9f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d10a      	bne.n	800ca16 <MQTT_Connect+0x64>
    {
        /* Get MQTT connect packet size and remaining length. */
        status = MQTT_GetConnectPacketSize( pConnectInfo,
 800ca00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca04:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ca08:	6879      	ldr	r1, [r7, #4]
 800ca0a:	68b8      	ldr	r0, [r7, #8]
 800ca0c:	f000 ffba 	bl	800d984 <MQTT_GetConnectPacketSize>
 800ca10:	4603      	mov	r3, r0
 800ca12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        LogDebug( ( "CONNECT packet size is %lu and remaining length is %lu.",
                    ( unsigned long ) packetSize,
                    ( unsigned long ) remainingLength ) );
    }

    if( status == MQTTSuccess )
 800ca16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d108      	bne.n	800ca30 <MQTT_Connect+0x7e>
    {
        MQTT_PRE_SEND_HOOK( pContext );

        status = sendConnectWithoutCopy( pContext,
 800ca1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca20:	687a      	ldr	r2, [r7, #4]
 800ca22:	68b9      	ldr	r1, [r7, #8]
 800ca24:	68f8      	ldr	r0, [r7, #12]
 800ca26:	f7ff fce9 	bl	800c3fc <sendConnectWithoutCopy>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        MQTT_POST_SEND_HOOK( pContext );
    }

    /* Read CONNACK from transport layer. */
    if( status == MQTTSuccess )
 800ca30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d10d      	bne.n	800ca54 <MQTT_Connect+0xa2>
    {
        status = receiveConnack( pContext,
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	781a      	ldrb	r2, [r3, #0]
 800ca3c:	f107 0114 	add.w	r1, r7, #20
 800ca40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca42:	9300      	str	r3, [sp, #0]
 800ca44:	460b      	mov	r3, r1
 800ca46:	6839      	ldr	r1, [r7, #0]
 800ca48:	68f8      	ldr	r0, [r7, #12]
 800ca4a:	f7ff fdf3 	bl	800c634 <receiveConnack>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 pConnectInfo->cleanSession,
                                 &incomingPacket,
                                 pSessionPresent );
    }

    if( status == MQTTSuccess )
 800ca54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d108      	bne.n	800ca6e <MQTT_Connect+0xbc>
    {
        /* Resend PUBRELs when reestablishing a session, or clear records for new sessions. */
        status = handleSessionResumption( pContext, *pSessionPresent );
 800ca5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	4619      	mov	r1, r3
 800ca62:	68f8      	ldr	r0, [r7, #12]
 800ca64:	f7ff fea8 	bl	800c7b8 <handleSessionResumption>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800ca6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d10f      	bne.n	800ca96 <MQTT_Connect+0xe4>
    {
        LogInfo( ( "MQTT connection established with the broker." ) );
        pContext->connectStatus = MQTTConnected;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	2201      	movs	r2, #1
 800ca7a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        /* Initialize keep-alive fields after a successful connection. */
        pContext->keepAliveIntervalSec = pConnectInfo->keepAliveSeconds;
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	885a      	ldrh	r2, [r3, #2]
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        pContext->waitingForPingResp = false;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pContext->pingReqSendTimeMs = 0U;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	2200      	movs	r2, #0
 800ca94:	649a      	str	r2, [r3, #72]	; 0x48
    {
        LogError( ( "MQTT connection failed with status = %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800ca96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3730      	adds	r7, #48	; 0x30
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <MQTT_Subscribe>:

MQTTStatus_t MQTT_Subscribe( MQTTContext_t * pContext,
                             const MQTTSubscribeInfo_t * pSubscriptionList,
                             size_t subscriptionCount,
                             uint16_t packetId )
{
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b08a      	sub	sp, #40	; 0x28
 800caa6:	af02      	add	r7, sp, #8
 800caa8:	60f8      	str	r0, [r7, #12]
 800caaa:	60b9      	str	r1, [r7, #8]
 800caac:	607a      	str	r2, [r7, #4]
 800caae:	807b      	strh	r3, [r7, #2]
    size_t remainingLength = 0UL, packetSize = 0UL;
 800cab0:	2300      	movs	r3, #0
 800cab2:	61bb      	str	r3, [r7, #24]
 800cab4:	2300      	movs	r3, #0
 800cab6:	617b      	str	r3, [r7, #20]

    /* Validate arguments. */
    MQTTStatus_t status = validateSubscribeUnsubscribeParams( pContext,
 800cab8:	887b      	ldrh	r3, [r7, #2]
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	68b9      	ldr	r1, [r7, #8]
 800cabe:	68f8      	ldr	r0, [r7, #12]
 800cac0:	f7ff face 	bl	800c060 <validateSubscribeUnsubscribeParams>
 800cac4:	4603      	mov	r3, r0
 800cac6:	77fb      	strb	r3, [r7, #31]
                                                              pSubscriptionList,
                                                              subscriptionCount,
                                                              packetId );

    if( status == MQTTSuccess )
 800cac8:	7ffb      	ldrb	r3, [r7, #31]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d109      	bne.n	800cae2 <MQTT_Subscribe+0x40>
    {
        /* Get the remaining length and packet size.*/
        status = MQTT_GetSubscribePacketSize( pSubscriptionList,
 800cace:	f107 0314 	add.w	r3, r7, #20
 800cad2:	f107 0218 	add.w	r2, r7, #24
 800cad6:	6879      	ldr	r1, [r7, #4]
 800cad8:	68b8      	ldr	r0, [r7, #8]
 800cada:	f000 ffbf 	bl	800da5c <MQTT_GetSubscribePacketSize>
 800cade:	4603      	mov	r3, r0
 800cae0:	77fb      	strb	r3, [r7, #31]
        LogDebug( ( "SUBSCRIBE packet size is %lu and remaining length is %lu.",
                    ( unsigned long ) packetSize,
                    ( unsigned long ) remainingLength ) );
    }

    if( status == MQTTSuccess )
 800cae2:	7ffb      	ldrb	r3, [r7, #31]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d10a      	bne.n	800cafe <MQTT_Subscribe+0x5c>
    {
        MQTT_PRE_SEND_HOOK( pContext );

        /* Send MQTT SUBSCRIBE packet. */
        status = sendSubscribeWithoutCopy( pContext,
 800cae8:	69bb      	ldr	r3, [r7, #24]
 800caea:	887a      	ldrh	r2, [r7, #2]
 800caec:	9300      	str	r3, [sp, #0]
 800caee:	4613      	mov	r3, r2
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	68b9      	ldr	r1, [r7, #8]
 800caf4:	68f8      	ldr	r0, [r7, #12]
 800caf6:	f7ff fb51 	bl	800c19c <sendSubscribeWithoutCopy>
 800cafa:	4603      	mov	r3, r0
 800cafc:	77fb      	strb	r3, [r7, #31]
                                           remainingLength );

        MQTT_POST_SEND_HOOK( pContext );
    }

    return status;
 800cafe:	7ffb      	ldrb	r3, [r7, #31]
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3720      	adds	r7, #32
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <MQTT_Publish>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_Publish( MQTTContext_t * pContext,
                           const MQTTPublishInfo_t * pPublishInfo,
                           uint16_t packetId )
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b08c      	sub	sp, #48	; 0x30
 800cb0c:	af02      	add	r7, sp, #8
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	4613      	mov	r3, r2
 800cb14:	80fb      	strh	r3, [r7, #6]
    size_t headerSize = 0UL;
 800cb16:	2300      	movs	r3, #0
 800cb18:	623b      	str	r3, [r7, #32]
    size_t remainingLength = 0UL;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	61fb      	str	r3, [r7, #28]
    size_t packetSize = 0UL;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	61bb      	str	r3, [r7, #24]
    MQTTPublishState_t publishStatus = MQTTStateNull;
 800cb22:	2300      	movs	r3, #0
 800cb24:	75fb      	strb	r3, [r7, #23]
    bool stateUpdateHookExecuted = false;
 800cb26:	2300      	movs	r3, #0
 800cb28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* 1 header byte + 4 bytes (maximum) required for encoding the length +
     * 2 bytes for topic string. */
    uint8_t mqttHeader[ 7 ];

    /* Validate arguments. */
    MQTTStatus_t status = validatePublishParams( pContext, pPublishInfo, packetId );
 800cb2c:	88fb      	ldrh	r3, [r7, #6]
 800cb2e:	461a      	mov	r2, r3
 800cb30:	68b9      	ldr	r1, [r7, #8]
 800cb32:	68f8      	ldr	r0, [r7, #12]
 800cb34:	f7ff feb0 	bl	800c898 <validatePublishParams>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == MQTTSuccess )
 800cb3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d10a      	bne.n	800cb5c <MQTT_Publish+0x54>
    {
        /* Get the remaining length and packet size.*/
        status = MQTT_GetPublishPacketSize( pPublishInfo,
 800cb46:	f107 0218 	add.w	r2, r7, #24
 800cb4a:	f107 031c 	add.w	r3, r7, #28
 800cb4e:	4619      	mov	r1, r3
 800cb50:	68b8      	ldr	r0, [r7, #8]
 800cb52:	f000 ffd4 	bl	800dafe <MQTT_GetPublishPacketSize>
 800cb56:	4603      	mov	r3, r0
 800cb58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                            &remainingLength,
                                            &packetSize );
    }

    if( status == MQTTSuccess )
 800cb5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d10a      	bne.n	800cb7a <MQTT_Publish+0x72>
    {
        status = MQTT_SerializePublishHeaderWithoutTopic( pPublishInfo,
 800cb64:	69f9      	ldr	r1, [r7, #28]
 800cb66:	f107 0320 	add.w	r3, r7, #32
 800cb6a:	f107 0210 	add.w	r2, r7, #16
 800cb6e:	68b8      	ldr	r0, [r7, #8]
 800cb70:	f000 f9ec 	bl	800cf4c <MQTT_SerializePublishHeaderWithoutTopic>
 800cb74:	4603      	mov	r3, r0
 800cb76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                          remainingLength,
                                                          mqttHeader,
                                                          &headerSize );
    }

    if( ( status == MQTTSuccess ) && ( pPublishInfo->qos > MQTTQoS0 ) )
 800cb7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d11b      	bne.n	800cbba <MQTT_Publish+0xb2>
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d017      	beq.n	800cbba <MQTT_Publish+0xb2>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        /* Set the flag so that the corresponding hook can be called later. */
        stateUpdateHookExecuted = true;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        status = MQTT_ReserveState( pContext,
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	781a      	ldrb	r2, [r3, #0]
 800cb94:	88fb      	ldrh	r3, [r7, #6]
 800cb96:	4619      	mov	r1, r3
 800cb98:	68f8      	ldr	r0, [r7, #12]
 800cb9a:	f001 fde1 	bl	800e760 <MQTT_ReserveState>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                    pPublishInfo->qos );

        /* State already exists for a duplicate packet.
         * If a state doesn't exist, it will be handled as a new publish in
         * state engine. */
        if( ( status == MQTTStateCollision ) && ( pPublishInfo->dup == true ) )
 800cba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cba8:	2b09      	cmp	r3, #9
 800cbaa:	d106      	bne.n	800cbba <MQTT_Publish+0xb2>
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	789b      	ldrb	r3, [r3, #2]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d002      	beq.n	800cbba <MQTT_Publish+0xb2>
        {
            status = MQTTSuccess;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    if( status == MQTTSuccess )
 800cbba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d10c      	bne.n	800cbdc <MQTT_Publish+0xd4>
    {
        /* Take the mutex as multiple send calls are required for sending this
         * packet. */
        MQTT_PRE_SEND_HOOK( pContext );

        status = sendPublishWithoutCopy( pContext,
 800cbc2:	6a39      	ldr	r1, [r7, #32]
 800cbc4:	f107 0210 	add.w	r2, r7, #16
 800cbc8:	88fb      	ldrh	r3, [r7, #6]
 800cbca:	9300      	str	r3, [sp, #0]
 800cbcc:	460b      	mov	r3, r1
 800cbce:	68b9      	ldr	r1, [r7, #8]
 800cbd0:	68f8      	ldr	r0, [r7, #12]
 800cbd2:	f7ff fb9d 	bl	800c310 <sendPublishWithoutCopy>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Give the mutex away for the next taker. */
        MQTT_POST_SEND_HOOK( pContext );
    }

    if( ( status == MQTTSuccess ) &&
 800cbdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d111      	bne.n	800cc08 <MQTT_Publish+0x100>
        ( pPublishInfo->qos > MQTTQoS0 ) )
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	781b      	ldrb	r3, [r3, #0]
    if( ( status == MQTTSuccess ) &&
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d00d      	beq.n	800cc08 <MQTT_Publish+0x100>
    {
        /* Update state machine after PUBLISH is sent.
         * Only to be done for QoS1 or QoS2. */
        status = MQTT_UpdateStatePublish( pContext,
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	781a      	ldrb	r2, [r3, #0]
 800cbf0:	88f9      	ldrh	r1, [r7, #6]
 800cbf2:	f107 0317 	add.w	r3, r7, #23
 800cbf6:	9300      	str	r3, [sp, #0]
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	68f8      	ldr	r0, [r7, #12]
 800cbfe:	f001 fe08 	bl	800e812 <MQTT_UpdateStatePublish>
 800cc02:	4603      	mov	r3, r0
 800cc04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        LogError( ( "MQTT PUBLISH failed with status %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800cc08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3728      	adds	r7, #40	; 0x28
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <MQTT_Ping>:

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_Ping( MQTTContext_t * pContext )
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b088      	sub	sp, #32
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
    int32_t sendResult = 0;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	61bb      	str	r3, [r7, #24]
    MQTTStatus_t status = MQTTSuccess;
 800cc20:	2300      	movs	r3, #0
 800cc22:	77fb      	strb	r3, [r7, #31]
    size_t packetSize = 0U;
 800cc24:	2300      	movs	r3, #0
 800cc26:	617b      	str	r3, [r7, #20]
    /* MQTT ping packets are of fixed length. */
    uint8_t pingreqPacket[ 2U ];
    MQTTFixedBuffer_t localBuffer;

    localBuffer.pBuffer = pingreqPacket;
 800cc28:	f107 0310 	add.w	r3, r7, #16
 800cc2c:	60bb      	str	r3, [r7, #8]
    localBuffer.size = 2U;
 800cc2e:	2302      	movs	r3, #2
 800cc30:	60fb      	str	r3, [r7, #12]

    if( pContext == NULL )
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d101      	bne.n	800cc3c <MQTT_Ping+0x28>
    {
        LogError( ( "pContext is NULL." ) );
        status = MQTTBadParameter;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800cc3c:	7ffb      	ldrb	r3, [r7, #31]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d106      	bne.n	800cc50 <MQTT_Ping+0x3c>
    {
        /* Get MQTT PINGREQ packet size. */
        status = MQTT_GetPingreqPacketSize( &packetSize );
 800cc42:	f107 0314 	add.w	r3, r7, #20
 800cc46:	4618      	mov	r0, r3
 800cc48:	f000 ffdd 	bl	800dc06 <MQTT_GetPingreqPacketSize>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	77fb      	strb	r3, [r7, #31]
        {
            LogError( ( "Failed to get the PINGREQ packet size." ) );
        }
    }

    if( status == MQTTSuccess )
 800cc50:	7ffb      	ldrb	r3, [r7, #31]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d106      	bne.n	800cc64 <MQTT_Ping+0x50>
    {
        /* Serialize MQTT PINGREQ. */
        status = MQTT_SerializePingreq( &localBuffer );
 800cc56:	f107 0308 	add.w	r3, r7, #8
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f000 ffe9 	bl	800dc32 <MQTT_SerializePingreq>
 800cc60:	4603      	mov	r3, r0
 800cc62:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800cc64:	7ffb      	ldrb	r3, [r7, #31]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d116      	bne.n	800cc98 <MQTT_Ping+0x84>
        /* Send the serialized PINGREQ packet to transport layer.
         * Here, we do not use the vectored IO approach for efficiency as the
         * Ping packet does not have numerous fields which need to be copied
         * from the user provided buffers. Thus it can be sent directly. */
        sendResult = sendBuffer( pContext,
                                 localBuffer.pBuffer,
 800cc6a:	68bb      	ldr	r3, [r7, #8]
        sendResult = sendBuffer( pContext,
 800cc6c:	2202      	movs	r2, #2
 800cc6e:	4619      	mov	r1, r3
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f7fe fb4b 	bl	800b30c <sendBuffer>
 800cc76:	61b8      	str	r0, [r7, #24]

        /* Give the mutex away. */
        MQTT_POST_SEND_HOOK( pContext );

        /* It is an error to not send the entire PINGREQ packet. */
        if( sendResult < ( int32_t ) packetSize )
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	69bb      	ldr	r3, [r7, #24]
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	da02      	bge.n	800cc88 <MQTT_Ping+0x74>
        {
            LogError( ( "Transport send failed for PINGREQ packet." ) );
            status = MQTTSendFailed;
 800cc82:	2303      	movs	r3, #3
 800cc84:	77fb      	strb	r3, [r7, #31]
 800cc86:	e007      	b.n	800cc98 <MQTT_Ping+0x84>
        }
        else
        {
            pContext->pingReqSendTimeMs = pContext->lastPacketTxTime;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	649a      	str	r2, [r3, #72]	; 0x48
            pContext->waitingForPingResp = true;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2201      	movs	r2, #1
 800cc94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            LogDebug( ( "Sent %ld bytes of PINGREQ packet.",
                        ( long int ) sendResult ) );
        }
    }

    return status;
 800cc98:	7ffb      	ldrb	r3, [r7, #31]
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3720      	adds	r7, #32
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}

0800cca2 <MQTT_ProcessLoop>:
}

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ProcessLoop( MQTTContext_t * pContext )
{
 800cca2:	b580      	push	{r7, lr}
 800cca4:	b084      	sub	sp, #16
 800cca6:	af00      	add	r7, sp, #0
 800cca8:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTBadParameter;
 800ccaa:	2301      	movs	r3, #1
 800ccac:	73fb      	strb	r3, [r7, #15]

    if( pContext == NULL )
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d011      	beq.n	800ccd8 <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: MQTT Context cannot be NULL." ) );
    }
    else if( pContext->getTime == NULL )
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d00d      	beq.n	800ccd8 <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: MQTT Context must have valid getTime." ) );
    }
    else if( pContext->networkBuffer.pBuffer == NULL )
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6a1b      	ldr	r3, [r3, #32]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d009      	beq.n	800ccd8 <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: The MQTT context's networkBuffer must not be NULL." ) );
    }
    else
    {
        pContext->controlPacketSent = false;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        status = receiveSingleIteration( pContext, true );
 800cccc:	2101      	movs	r1, #1
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f7ff f8da 	bl	800be88 <receiveSingleIteration>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800ccd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3710      	adds	r7, #16
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}

0800cce2 <MQTT_GetPacketId>:
}

/*-----------------------------------------------------------*/

uint16_t MQTT_GetPacketId( MQTTContext_t * pContext )
{
 800cce2:	b480      	push	{r7}
 800cce4:	b085      	sub	sp, #20
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
    uint16_t packetId = 0U;
 800ccea:	2300      	movs	r3, #0
 800ccec:	81fb      	strh	r3, [r7, #14]

    if( pContext != NULL )
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d012      	beq.n	800cd1a <MQTT_GetPacketId+0x38>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        packetId = pContext->nextPacketId;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccf8:	81fb      	strh	r3, [r7, #14]

        /* A packet ID of zero is not a valid packet ID. When the max ID
         * is reached the next one should start at 1. */
        if( pContext->nextPacketId == ( uint16_t ) UINT16_MAX )
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d103      	bne.n	800cd0e <MQTT_GetPacketId+0x2c>
        {
            pContext->nextPacketId = 1;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2201      	movs	r2, #1
 800cd0a:	851a      	strh	r2, [r3, #40]	; 0x28
 800cd0c:	e005      	b.n	800cd1a <MQTT_GetPacketId+0x38>
        }
        else
        {
            pContext->nextPacketId++;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd12:	3301      	adds	r3, #1
 800cd14:	b29a      	uxth	r2, r3
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	851a      	strh	r2, [r3, #40]	; 0x28
        }

        MQTT_POST_STATE_UPDATE_HOOK( pContext );
    }

    return packetId;
 800cd1a:	89fb      	ldrh	r3, [r7, #14]
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3714      	adds	r7, #20
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr

0800cd28 <remainingLengthEncodedSize>:
static MQTTStatus_t deserializePingresp( const MQTTPacketInfo_t * pPingresp );

/*-----------------------------------------------------------*/

static size_t remainingLengthEncodedSize( size_t length )
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b085      	sub	sp, #20
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]

    /* Determine how many bytes are needed to encode length.
     * The values below are taken from the MQTT 3.1.1 spec. */

    /* 1 byte is needed to encode lengths between 0 and 127. */
    if( length < 128U )
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2b7f      	cmp	r3, #127	; 0x7f
 800cd34:	d802      	bhi.n	800cd3c <remainingLengthEncodedSize+0x14>
    {
        encodedSize = 1U;
 800cd36:	2301      	movs	r3, #1
 800cd38:	60fb      	str	r3, [r7, #12]
 800cd3a:	e00f      	b.n	800cd5c <remainingLengthEncodedSize+0x34>
    }
    /* 2 bytes are needed to encode lengths between 128 and 16,383. */
    else if( length < 16384U )
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd42:	d202      	bcs.n	800cd4a <remainingLengthEncodedSize+0x22>
    {
        encodedSize = 2U;
 800cd44:	2302      	movs	r3, #2
 800cd46:	60fb      	str	r3, [r7, #12]
 800cd48:	e008      	b.n	800cd5c <remainingLengthEncodedSize+0x34>
    }
    /* 3 bytes are needed to encode lengths between 16,384 and 2,097,151. */
    else if( length < 2097152U )
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd50:	d202      	bcs.n	800cd58 <remainingLengthEncodedSize+0x30>
    {
        encodedSize = 3U;
 800cd52:	2303      	movs	r3, #3
 800cd54:	60fb      	str	r3, [r7, #12]
 800cd56:	e001      	b.n	800cd5c <remainingLengthEncodedSize+0x34>
    }
    /* 4 bytes are needed to encode lengths between 2,097,152 and 268,435,455. */
    else
    {
        encodedSize = 4U;
 800cd58:	2304      	movs	r3, #4
 800cd5a:	60fb      	str	r3, [r7, #12]

    LogDebug( ( "Encoded size for length %lu is %lu bytes.",
                ( unsigned long ) length,
                ( unsigned long ) encodedSize ) );

    return encodedSize;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3714      	adds	r7, #20
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr
	...

0800cd6c <encodeRemainingLength>:

/*-----------------------------------------------------------*/

static uint8_t * encodeRemainingLength( uint8_t * pDestination,
                                        size_t length )
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b086      	sub	sp, #24
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	6039      	str	r1, [r7, #0]
    uint8_t lengthByte;
    uint8_t * pLengthEnd = NULL;
 800cd76:	2300      	movs	r3, #0
 800cd78:	613b      	str	r3, [r7, #16]
    size_t remainingLength = length;
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	60fb      	str	r3, [r7, #12]

    assert( pDestination != NULL );
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d106      	bne.n	800cd92 <encodeRemainingLength+0x26>
 800cd84:	4b12      	ldr	r3, [pc, #72]	; (800cdd0 <encodeRemainingLength+0x64>)
 800cd86:	4a13      	ldr	r2, [pc, #76]	; (800cdd4 <encodeRemainingLength+0x68>)
 800cd88:	f240 11f1 	movw	r1, #497	; 0x1f1
 800cd8c:	4812      	ldr	r0, [pc, #72]	; (800cdd8 <encodeRemainingLength+0x6c>)
 800cd8e:	f005 fa45 	bl	801221c <__assert_func>

    pLengthEnd = pDestination;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	613b      	str	r3, [r7, #16]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        lengthByte = ( uint8_t ) ( remainingLength % 128U );
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd9e:	75fb      	strb	r3, [r7, #23]
        remainingLength = remainingLength / 128U;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	09db      	lsrs	r3, r3, #7
 800cda4:	60fb      	str	r3, [r7, #12]

        /* Set the high bit of this byte, indicating that there's more data. */
        if( remainingLength > 0U )
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d003      	beq.n	800cdb4 <encodeRemainingLength+0x48>
        {
            UINT8_SET_BIT( lengthByte, 7 );
 800cdac:	7dfb      	ldrb	r3, [r7, #23]
 800cdae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cdb2:	75fb      	strb	r3, [r7, #23]
        }

        /* Output a single encoded byte. */
        *pLengthEnd = lengthByte;
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	7dfa      	ldrb	r2, [r7, #23]
 800cdb8:	701a      	strb	r2, [r3, #0]
        pLengthEnd++;
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	613b      	str	r3, [r7, #16]
    } while( remainingLength > 0U );
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d1e7      	bne.n	800cd96 <encodeRemainingLength+0x2a>

    return pLengthEnd;
 800cdc6:	693b      	ldr	r3, [r7, #16]
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3718      	adds	r7, #24
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}
 800cdd0:	08014c6c 	.word	0x08014c6c
 800cdd4:	080154cc 	.word	0x080154cc
 800cdd8:	08014c84 	.word	0x08014c84

0800cddc <encodeString>:
/*-----------------------------------------------------------*/

static uint8_t * encodeString( uint8_t * pDestination,
                               const char * pSource,
                               uint16_t sourceLength )
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b086      	sub	sp, #24
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	60f8      	str	r0, [r7, #12]
 800cde4:	60b9      	str	r1, [r7, #8]
 800cde6:	4613      	mov	r3, r2
 800cde8:	80fb      	strh	r3, [r7, #6]
    uint8_t * pBuffer = NULL;
 800cdea:	2300      	movs	r3, #0
 800cdec:	617b      	str	r3, [r7, #20]

    /* Typecast const char * typed source buffer to const uint8_t *.
     * This is to use same type buffers in memcpy. */
    const uint8_t * pSourceBuffer = ( const uint8_t * ) pSource;
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	613b      	str	r3, [r7, #16]

    assert( pDestination != NULL );
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d106      	bne.n	800ce06 <encodeString+0x2a>
 800cdf8:	4b15      	ldr	r3, [pc, #84]	; (800ce50 <encodeString+0x74>)
 800cdfa:	4a16      	ldr	r2, [pc, #88]	; (800ce54 <encodeString+0x78>)
 800cdfc:	f240 2115 	movw	r1, #533	; 0x215
 800ce00:	4815      	ldr	r0, [pc, #84]	; (800ce58 <encodeString+0x7c>)
 800ce02:	f005 fa0b 	bl	801221c <__assert_func>

    pBuffer = pDestination;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	617b      	str	r3, [r7, #20]

    /* The first byte of a UTF-8 string is the high byte of the string length. */
    *pBuffer = UINT16_HIGH_BYTE( sourceLength );
 800ce0a:	88fb      	ldrh	r3, [r7, #6]
 800ce0c:	0a1b      	lsrs	r3, r3, #8
 800ce0e:	b29b      	uxth	r3, r3
 800ce10:	b2da      	uxtb	r2, r3
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	3301      	adds	r3, #1
 800ce1a:	617b      	str	r3, [r7, #20]

    /* The second byte of a UTF-8 string is the low byte of the string length. */
    *pBuffer = UINT16_LOW_BYTE( sourceLength );
 800ce1c:	88fb      	ldrh	r3, [r7, #6]
 800ce1e:	b2da      	uxtb	r2, r3
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	3301      	adds	r3, #1
 800ce28:	617b      	str	r3, [r7, #20]

    /* Copy the string into pBuffer. */
    if( pSourceBuffer != NULL )
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d005      	beq.n	800ce3c <encodeString+0x60>
    {
        ( void ) memcpy( pBuffer, pSourceBuffer, sourceLength );
 800ce30:	88fb      	ldrh	r3, [r7, #6]
 800ce32:	461a      	mov	r2, r3
 800ce34:	6939      	ldr	r1, [r7, #16]
 800ce36:	6978      	ldr	r0, [r7, #20]
 800ce38:	f005 fb53 	bl	80124e2 <memcpy>
    }

    /* Return the pointer to the end of the encoded string. */
    pBuffer = &pBuffer[ sourceLength ];
 800ce3c:	88fb      	ldrh	r3, [r7, #6]
 800ce3e:	697a      	ldr	r2, [r7, #20]
 800ce40:	4413      	add	r3, r2
 800ce42:	617b      	str	r3, [r7, #20]

    return pBuffer;
 800ce44:	697b      	ldr	r3, [r7, #20]
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3718      	adds	r7, #24
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
 800ce4e:	bf00      	nop
 800ce50:	08014c6c 	.word	0x08014c6c
 800ce54:	080154e4 	.word	0x080154e4
 800ce58:	08014c84 	.word	0x08014c84

0800ce5c <calculatePublishPacketSize>:
/*-----------------------------------------------------------*/

static bool calculatePublishPacketSize( const MQTTPublishInfo_t * pPublishInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b088      	sub	sp, #32
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	60f8      	str	r0, [r7, #12]
 800ce64:	60b9      	str	r1, [r7, #8]
 800ce66:	607a      	str	r2, [r7, #4]
    bool status = true;
 800ce68:	2301      	movs	r3, #1
 800ce6a:	77fb      	strb	r3, [r7, #31]
    size_t packetSize = 0, payloadLimit = 0;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	61bb      	str	r3, [r7, #24]
 800ce70:	2300      	movs	r3, #0
 800ce72:	617b      	str	r3, [r7, #20]

    assert( pPublishInfo != NULL );
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d106      	bne.n	800ce88 <calculatePublishPacketSize+0x2c>
 800ce7a:	4b2e      	ldr	r3, [pc, #184]	; (800cf34 <calculatePublishPacketSize+0xd8>)
 800ce7c:	4a2e      	ldr	r2, [pc, #184]	; (800cf38 <calculatePublishPacketSize+0xdc>)
 800ce7e:	f240 2136 	movw	r1, #566	; 0x236
 800ce82:	482e      	ldr	r0, [pc, #184]	; (800cf3c <calculatePublishPacketSize+0xe0>)
 800ce84:	f005 f9ca 	bl	801221c <__assert_func>
    assert( pRemainingLength != NULL );
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d106      	bne.n	800ce9c <calculatePublishPacketSize+0x40>
 800ce8e:	4b2c      	ldr	r3, [pc, #176]	; (800cf40 <calculatePublishPacketSize+0xe4>)
 800ce90:	4a29      	ldr	r2, [pc, #164]	; (800cf38 <calculatePublishPacketSize+0xdc>)
 800ce92:	f240 2137 	movw	r1, #567	; 0x237
 800ce96:	4829      	ldr	r0, [pc, #164]	; (800cf3c <calculatePublishPacketSize+0xe0>)
 800ce98:	f005 f9c0 	bl	801221c <__assert_func>
    assert( pPacketSize != NULL );
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d106      	bne.n	800ceb0 <calculatePublishPacketSize+0x54>
 800cea2:	4b28      	ldr	r3, [pc, #160]	; (800cf44 <calculatePublishPacketSize+0xe8>)
 800cea4:	4a24      	ldr	r2, [pc, #144]	; (800cf38 <calculatePublishPacketSize+0xdc>)
 800cea6:	f44f 710e 	mov.w	r1, #568	; 0x238
 800ceaa:	4824      	ldr	r0, [pc, #144]	; (800cf3c <calculatePublishPacketSize+0xe0>)
 800ceac:	f005 f9b6 	bl	801221c <__assert_func>

    /* The variable header of a PUBLISH packet always contains the topic name.
     * The first 2 bytes of UTF-8 string contains length of the string.
     */
    packetSize += pPublishInfo->topicNameLength + sizeof( uint16_t );
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	891b      	ldrh	r3, [r3, #8]
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	69bb      	ldr	r3, [r7, #24]
 800ceb8:	4413      	add	r3, r2
 800ceba:	3302      	adds	r3, #2
 800cebc:	61bb      	str	r3, [r7, #24]

    /* The variable header of a QoS 1 or 2 PUBLISH packet contains a 2-byte
     * packet identifier. */
    if( pPublishInfo->qos > MQTTQoS0 )
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	781b      	ldrb	r3, [r3, #0]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d002      	beq.n	800cecc <calculatePublishPacketSize+0x70>
    {
        packetSize += sizeof( uint16_t );
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	3302      	adds	r3, #2
 800ceca:	61bb      	str	r3, [r7, #24]
    }

    /* Calculate the maximum allowed size of the payload for the given parameters.
     * This calculation excludes the "Remaining length" encoding, whose size is not
     * yet known. */
    payloadLimit = MQTT_MAX_REMAINING_LENGTH - packetSize - 1U;
 800cecc:	69ba      	ldr	r2, [r7, #24]
 800cece:	4b1e      	ldr	r3, [pc, #120]	; (800cf48 <calculatePublishPacketSize+0xec>)
 800ced0:	1a9b      	subs	r3, r3, r2
 800ced2:	617b      	str	r3, [r7, #20]

    /* Ensure that the given payload fits within the calculated limit. */
    if( pPublishInfo->payloadLength > payloadLimit )
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	691b      	ldr	r3, [r3, #16]
 800ced8:	697a      	ldr	r2, [r7, #20]
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d202      	bcs.n	800cee4 <calculatePublishPacketSize+0x88>
                    "%lu so as not to exceed the maximum "
                    "remaining length of MQTT 3.1.1 packet( %lu ).",
                    ( unsigned long ) pPublishInfo->payloadLength,
                    ( unsigned long ) payloadLimit,
                    MQTT_MAX_REMAINING_LENGTH ) );
        status = false;
 800cede:	2300      	movs	r3, #0
 800cee0:	77fb      	strb	r3, [r7, #31]
 800cee2:	e021      	b.n	800cf28 <calculatePublishPacketSize+0xcc>
    }
    else
    {
        /* Add the length of the PUBLISH payload. At this point, the "Remaining length"
         * has been calculated. */
        packetSize += pPublishInfo->payloadLength;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	691b      	ldr	r3, [r3, #16]
 800cee8:	69ba      	ldr	r2, [r7, #24]
 800ceea:	4413      	add	r3, r2
 800ceec:	61bb      	str	r3, [r7, #24]

        /* Now that the "Remaining length" is known, recalculate the payload limit
         * based on the size of its encoding. */
        payloadLimit -= remainingLengthEncodedSize( packetSize );
 800ceee:	69b8      	ldr	r0, [r7, #24]
 800cef0:	f7ff ff1a 	bl	800cd28 <remainingLengthEncodedSize>
 800cef4:	4602      	mov	r2, r0
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	1a9b      	subs	r3, r3, r2
 800cefa:	617b      	str	r3, [r7, #20]

        /* Check that the given payload fits within the size allowed by MQTT spec. */
        if( pPublishInfo->payloadLength > payloadLimit )
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	691b      	ldr	r3, [r3, #16]
 800cf00:	697a      	ldr	r2, [r7, #20]
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d202      	bcs.n	800cf0c <calculatePublishPacketSize+0xb0>
                        "%lu so as not to exceed the maximum "
                        "remaining length of MQTT 3.1.1 packet( %lu ).",
                        ( unsigned long ) pPublishInfo->payloadLength,
                        ( unsigned long ) payloadLimit,
                        MQTT_MAX_REMAINING_LENGTH ) );
            status = false;
 800cf06:	2300      	movs	r3, #0
 800cf08:	77fb      	strb	r3, [r7, #31]
 800cf0a:	e00d      	b.n	800cf28 <calculatePublishPacketSize+0xcc>
        }
        else
        {
            /* Set the "Remaining length" output parameter and calculate the full
             * size of the PUBLISH packet. */
            *pRemainingLength = packetSize;
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	69ba      	ldr	r2, [r7, #24]
 800cf10:	601a      	str	r2, [r3, #0]

            packetSize += 1U + remainingLengthEncodedSize( packetSize );
 800cf12:	69b8      	ldr	r0, [r7, #24]
 800cf14:	f7ff ff08 	bl	800cd28 <remainingLengthEncodedSize>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	69ba      	ldr	r2, [r7, #24]
 800cf1e:	4413      	add	r3, r2
 800cf20:	61bb      	str	r3, [r7, #24]
            *pPacketSize = packetSize;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	69ba      	ldr	r2, [r7, #24]
 800cf26:	601a      	str	r2, [r3, #0]
    }

    LogDebug( ( "PUBLISH packet remaining length=%lu and packet size=%lu.",
                ( unsigned long ) *pRemainingLength,
                ( unsigned long ) *pPacketSize ) );
    return status;
 800cf28:	7ffb      	ldrb	r3, [r7, #31]
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3720      	adds	r7, #32
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
 800cf32:	bf00      	nop
 800cf34:	08014cb8 	.word	0x08014cb8
 800cf38:	080154f4 	.word	0x080154f4
 800cf3c:	08014c84 	.word	0x08014c84
 800cf40:	08014cd0 	.word	0x08014cd0
 800cf44:	08014cec 	.word	0x08014cec
 800cf48:	0ffffffe 	.word	0x0ffffffe

0800cf4c <MQTT_SerializePublishHeaderWithoutTopic>:

MQTTStatus_t MQTT_SerializePublishHeaderWithoutTopic( const MQTTPublishInfo_t * pPublishInfo,
                                                      size_t remainingLength,
                                                      uint8_t * pBuffer,
                                                      size_t * headerSize )
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b088      	sub	sp, #32
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	60f8      	str	r0, [r7, #12]
 800cf54:	60b9      	str	r1, [r7, #8]
 800cf56:	607a      	str	r2, [r7, #4]
 800cf58:	603b      	str	r3, [r7, #0]
    size_t headerLength;
    uint8_t * pIndex;
    MQTTStatus_t status = MQTTSuccess;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	77bb      	strb	r3, [r7, #30]

    /* The first byte of a PUBLISH packet contains the packet type and flags. */
    uint8_t publishFlags = MQTT_PACKET_TYPE_PUBLISH;
 800cf5e:	2330      	movs	r3, #48	; 0x30
 800cf60:	77fb      	strb	r3, [r7, #31]

    /* Get the start address of the buffer. */
    pIndex = pBuffer;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	61bb      	str	r3, [r7, #24]

    /* Length of serialized packet = First byte
     *                               + Length of encoded remaining length
     *                               + Encoded topic length. */
    headerLength = 1U + remainingLengthEncodedSize( remainingLength ) + 2U;
 800cf66:	68b8      	ldr	r0, [r7, #8]
 800cf68:	f7ff fede 	bl	800cd28 <remainingLengthEncodedSize>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	3303      	adds	r3, #3
 800cf70:	617b      	str	r3, [r7, #20]

    if( pPublishInfo->qos == MQTTQoS1 )
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d104      	bne.n	800cf84 <MQTT_SerializePublishHeaderWithoutTopic+0x38>
    {
        LogDebug( ( "Adding QoS as QoS1 in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 );
 800cf7a:	7ffb      	ldrb	r3, [r7, #31]
 800cf7c:	f043 0302 	orr.w	r3, r3, #2
 800cf80:	77fb      	strb	r3, [r7, #31]
 800cf82:	e007      	b.n	800cf94 <MQTT_SerializePublishHeaderWithoutTopic+0x48>
    }
    else if( pPublishInfo->qos == MQTTQoS2 )
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	2b02      	cmp	r3, #2
 800cf8a:	d103      	bne.n	800cf94 <MQTT_SerializePublishHeaderWithoutTopic+0x48>
    {
        LogDebug( ( "Adding QoS as QoS2 in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS2 );
 800cf8c:	7ffb      	ldrb	r3, [r7, #31]
 800cf8e:	f043 0304 	orr.w	r3, r3, #4
 800cf92:	77fb      	strb	r3, [r7, #31]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    if( pPublishInfo->retain == true )
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	785b      	ldrb	r3, [r3, #1]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d003      	beq.n	800cfa4 <MQTT_SerializePublishHeaderWithoutTopic+0x58>
    {
        LogDebug( ( "Adding retain bit in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_RETAIN );
 800cf9c:	7ffb      	ldrb	r3, [r7, #31]
 800cf9e:	f043 0301 	orr.w	r3, r3, #1
 800cfa2:	77fb      	strb	r3, [r7, #31]
    }

    if( pPublishInfo->dup == true )
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	789b      	ldrb	r3, [r3, #2]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d003      	beq.n	800cfb4 <MQTT_SerializePublishHeaderWithoutTopic+0x68>
    {
        LogDebug( ( "Adding dup bit in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_DUP );
 800cfac:	7ffb      	ldrb	r3, [r7, #31]
 800cfae:	f043 0308 	orr.w	r3, r3, #8
 800cfb2:	77fb      	strb	r3, [r7, #31]
    }

    *pIndex = publishFlags;
 800cfb4:	69bb      	ldr	r3, [r7, #24]
 800cfb6:	7ffa      	ldrb	r2, [r7, #31]
 800cfb8:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800cfba:	69bb      	ldr	r3, [r7, #24]
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	61bb      	str	r3, [r7, #24]

    /* The "Remaining length" is encoded from the second byte. */
    pIndex = encodeRemainingLength( pIndex, remainingLength );
 800cfc0:	68b9      	ldr	r1, [r7, #8]
 800cfc2:	69b8      	ldr	r0, [r7, #24]
 800cfc4:	f7ff fed2 	bl	800cd6c <encodeRemainingLength>
 800cfc8:	61b8      	str	r0, [r7, #24]

    /* The first byte of a UTF-8 string is the high byte of the string length. */
    *pIndex = UINT16_HIGH_BYTE( pPublishInfo->topicNameLength );
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	891b      	ldrh	r3, [r3, #8]
 800cfce:	0a1b      	lsrs	r3, r3, #8
 800cfd0:	b29b      	uxth	r3, r3
 800cfd2:	b2da      	uxtb	r2, r3
 800cfd4:	69bb      	ldr	r3, [r7, #24]
 800cfd6:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800cfd8:	69bb      	ldr	r3, [r7, #24]
 800cfda:	3301      	adds	r3, #1
 800cfdc:	61bb      	str	r3, [r7, #24]

    /* The second byte of a UTF-8 string is the low byte of the string length. */
    *pIndex = UINT16_LOW_BYTE( pPublishInfo->topicNameLength );
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	891b      	ldrh	r3, [r3, #8]
 800cfe2:	b2da      	uxtb	r2, r3
 800cfe4:	69bb      	ldr	r3, [r7, #24]
 800cfe6:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800cfe8:	69bb      	ldr	r3, [r7, #24]
 800cfea:	3301      	adds	r3, #1
 800cfec:	61bb      	str	r3, [r7, #24]

    *headerSize = headerLength;
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	697a      	ldr	r2, [r7, #20]
 800cff2:	601a      	str	r2, [r3, #0]

    return status;
 800cff4:	7fbb      	ldrb	r3, [r7, #30]
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3720      	adds	r7, #32
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}

0800cffe <getRemainingLength>:
    assert( ( ( size_t ) ( pIndex - pFixedBuffer->pBuffer ) ) <= pFixedBuffer->size );
}

static size_t getRemainingLength( TransportRecv_t recvFunc,
                                  NetworkContext_t * pNetworkContext )
{
 800cffe:	b580      	push	{r7, lr}
 800d000:	b088      	sub	sp, #32
 800d002:	af00      	add	r7, sp, #0
 800d004:	6078      	str	r0, [r7, #4]
 800d006:	6039      	str	r1, [r7, #0]
    size_t remainingLength = 0, multiplier = 1, bytesDecoded = 0, expectedSize = 0;
 800d008:	2300      	movs	r3, #0
 800d00a:	61fb      	str	r3, [r7, #28]
 800d00c:	2301      	movs	r3, #1
 800d00e:	61bb      	str	r3, [r7, #24]
 800d010:	2300      	movs	r3, #0
 800d012:	617b      	str	r3, [r7, #20]
 800d014:	2300      	movs	r3, #0
 800d016:	613b      	str	r3, [r7, #16]
    uint8_t encodedByte = 0;
 800d018:	2300      	movs	r3, #0
 800d01a:	72fb      	strb	r3, [r7, #11]
    int32_t bytesReceived = 0;
 800d01c:	2300      	movs	r3, #0
 800d01e:	60fb      	str	r3, [r7, #12]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        if( multiplier > 2097152U ) /* 128 ^ 3 */
 800d020:	69bb      	ldr	r3, [r7, #24]
 800d022:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d026:	d903      	bls.n	800d030 <getRemainingLength+0x32>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800d028:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d02c:	61fb      	str	r3, [r7, #28]
 800d02e:	e01c      	b.n	800d06a <getRemainingLength+0x6c>
        }
        else
        {
            bytesReceived = recvFunc( pNetworkContext, &encodedByte, 1U );
 800d030:	f107 010b 	add.w	r1, r7, #11
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2201      	movs	r2, #1
 800d038:	6838      	ldr	r0, [r7, #0]
 800d03a:	4798      	blx	r3
 800d03c:	60f8      	str	r0, [r7, #12]

            if( bytesReceived == 1 )
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2b01      	cmp	r3, #1
 800d042:	d10f      	bne.n	800d064 <getRemainingLength+0x66>
            {
                remainingLength += ( ( size_t ) encodedByte & 0x7FU ) * multiplier;
 800d044:	7afb      	ldrb	r3, [r7, #11]
 800d046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d04a:	69ba      	ldr	r2, [r7, #24]
 800d04c:	fb02 f303 	mul.w	r3, r2, r3
 800d050:	69fa      	ldr	r2, [r7, #28]
 800d052:	4413      	add	r3, r2
 800d054:	61fb      	str	r3, [r7, #28]
                multiplier *= 128U;
 800d056:	69bb      	ldr	r3, [r7, #24]
 800d058:	01db      	lsls	r3, r3, #7
 800d05a:	61bb      	str	r3, [r7, #24]
                bytesDecoded++;
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	3301      	adds	r3, #1
 800d060:	617b      	str	r3, [r7, #20]
 800d062:	e002      	b.n	800d06a <getRemainingLength+0x6c>
            }
            else
            {
                remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800d064:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d068:	61fb      	str	r3, [r7, #28]
            }
        }

        if( remainingLength == MQTT_REMAINING_LENGTH_INVALID )
 800d06a:	69fb      	ldr	r3, [r7, #28]
 800d06c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d070:	d004      	beq.n	800d07c <getRemainingLength+0x7e>
        {
            break;
        }
    } while( ( encodedByte & 0x80U ) != 0U );
 800d072:	7afb      	ldrb	r3, [r7, #11]
 800d074:	b25b      	sxtb	r3, r3
 800d076:	2b00      	cmp	r3, #0
 800d078:	dbd2      	blt.n	800d020 <getRemainingLength+0x22>
 800d07a:	e000      	b.n	800d07e <getRemainingLength+0x80>
            break;
 800d07c:	bf00      	nop

    /* Check that the decoded remaining length conforms to the MQTT specification. */
    if( remainingLength != MQTT_REMAINING_LENGTH_INVALID )
 800d07e:	69fb      	ldr	r3, [r7, #28]
 800d080:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d084:	d00a      	beq.n	800d09c <getRemainingLength+0x9e>
    {
        expectedSize = remainingLengthEncodedSize( remainingLength );
 800d086:	69f8      	ldr	r0, [r7, #28]
 800d088:	f7ff fe4e 	bl	800cd28 <remainingLengthEncodedSize>
 800d08c:	6138      	str	r0, [r7, #16]

        if( bytesDecoded != expectedSize )
 800d08e:	697a      	ldr	r2, [r7, #20]
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	429a      	cmp	r2, r3
 800d094:	d002      	beq.n	800d09c <getRemainingLength+0x9e>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800d096:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d09a:	61fb      	str	r3, [r7, #28]
        }
    }

    return remainingLength;
 800d09c:	69fb      	ldr	r3, [r7, #28]
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3720      	adds	r7, #32
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}

0800d0a6 <processRemainingLength>:
/*-----------------------------------------------------------*/

static MQTTStatus_t processRemainingLength( const uint8_t * pBuffer,
                                            const size_t * pIndex,
                                            MQTTPacketInfo_t * pIncomingPacket )
{
 800d0a6:	b580      	push	{r7, lr}
 800d0a8:	b08a      	sub	sp, #40	; 0x28
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	60f8      	str	r0, [r7, #12]
 800d0ae:	60b9      	str	r1, [r7, #8]
 800d0b0:	607a      	str	r2, [r7, #4]
    size_t remainingLength = 0;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	627b      	str	r3, [r7, #36]	; 0x24
    size_t multiplier = 1;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	623b      	str	r3, [r7, #32]
    size_t bytesDecoded = 0;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	61fb      	str	r3, [r7, #28]
    size_t expectedSize = 0;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	617b      	str	r3, [r7, #20]
    uint8_t encodedByte = 0;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	76fb      	strb	r3, [r7, #27]
    MQTTStatus_t status = MQTTSuccess;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	76bb      	strb	r3, [r7, #26]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        if( multiplier > 2097152U ) /* 128 ^ 3 */
 800d0ca:	6a3b      	ldr	r3, [r7, #32]
 800d0cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d0d0:	d905      	bls.n	800d0de <processRemainingLength+0x38>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800d0d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d0d6:	627b      	str	r3, [r7, #36]	; 0x24

            LogError( ( "Invalid remaining length in the packet.\n" ) );

            status = MQTTBadResponse;
 800d0d8:	2305      	movs	r3, #5
 800d0da:	76bb      	strb	r3, [r7, #26]
 800d0dc:	e01d      	b.n	800d11a <processRemainingLength+0x74>
        }
        else
        {
            if( *pIndex > ( bytesDecoded + 1U ) )
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	69fb      	ldr	r3, [r7, #28]
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d915      	bls.n	800d116 <processRemainingLength+0x70>
            {
                /* Get the next byte. It is at the next position after the bytes
                 * decoded till now since the header of one byte was read before. */
                encodedByte = pBuffer[ bytesDecoded + 1U ];
 800d0ea:	69fb      	ldr	r3, [r7, #28]
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	68fa      	ldr	r2, [r7, #12]
 800d0f0:	4413      	add	r3, r2
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	76fb      	strb	r3, [r7, #27]

                remainingLength += ( ( size_t ) encodedByte & 0x7FU ) * multiplier;
 800d0f6:	7efb      	ldrb	r3, [r7, #27]
 800d0f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0fc:	6a3a      	ldr	r2, [r7, #32]
 800d0fe:	fb02 f303 	mul.w	r3, r2, r3
 800d102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d104:	4413      	add	r3, r2
 800d106:	627b      	str	r3, [r7, #36]	; 0x24
                multiplier *= 128U;
 800d108:	6a3b      	ldr	r3, [r7, #32]
 800d10a:	01db      	lsls	r3, r3, #7
 800d10c:	623b      	str	r3, [r7, #32]
                bytesDecoded++;
 800d10e:	69fb      	ldr	r3, [r7, #28]
 800d110:	3301      	adds	r3, #1
 800d112:	61fb      	str	r3, [r7, #28]
 800d114:	e001      	b.n	800d11a <processRemainingLength+0x74>
            }
            else
            {
                status = MQTTNeedMoreBytes;
 800d116:	230b      	movs	r3, #11
 800d118:	76bb      	strb	r3, [r7, #26]
            }
        }

        /* If the response is incorrect, or no more data is available, then
         * break out of the loop. */
        if( ( remainingLength == MQTT_REMAINING_LENGTH_INVALID ) ||
 800d11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d120:	d006      	beq.n	800d130 <processRemainingLength+0x8a>
 800d122:	7ebb      	ldrb	r3, [r7, #26]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d103      	bne.n	800d130 <processRemainingLength+0x8a>
            ( status != MQTTSuccess ) )
        {
            break;
        }
    } while( ( encodedByte & 0x80U ) != 0U );
 800d128:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	dbcc      	blt.n	800d0ca <processRemainingLength+0x24>

    if( status == MQTTSuccess )
 800d130:	7ebb      	ldrb	r3, [r7, #26]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d111      	bne.n	800d15a <processRemainingLength+0xb4>
    {
        /* Check that the decoded remaining length conforms to the MQTT specification. */
        expectedSize = remainingLengthEncodedSize( remainingLength );
 800d136:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d138:	f7ff fdf6 	bl	800cd28 <remainingLengthEncodedSize>
 800d13c:	6178      	str	r0, [r7, #20]

        if( bytesDecoded != expectedSize )
 800d13e:	69fa      	ldr	r2, [r7, #28]
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	429a      	cmp	r2, r3
 800d144:	d002      	beq.n	800d14c <processRemainingLength+0xa6>
        {
            LogError( ( "Expected and actual length of decoded bytes do not match.\n" ) );
            status = MQTTBadResponse;
 800d146:	2305      	movs	r3, #5
 800d148:	76bb      	strb	r3, [r7, #26]
 800d14a:	e006      	b.n	800d15a <processRemainingLength+0xb4>
        }
        else
        {
            pIncomingPacket->remainingLength = remainingLength;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d150:	609a      	str	r2, [r3, #8]
            pIncomingPacket->headerLength = bytesDecoded + 1U;
 800d152:	69fb      	ldr	r3, [r7, #28]
 800d154:	1c5a      	adds	r2, r3, #1
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	60da      	str	r2, [r3, #12]
        }
    }

    return status;
 800d15a:	7ebb      	ldrb	r3, [r7, #26]
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3728      	adds	r7, #40	; 0x28
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <incomingPacketValid>:

/*-----------------------------------------------------------*/

static bool incomingPacketValid( uint8_t packetType )
{
 800d164:	b480      	push	{r7}
 800d166:	b085      	sub	sp, #20
 800d168:	af00      	add	r7, sp, #0
 800d16a:	4603      	mov	r3, r0
 800d16c:	71fb      	strb	r3, [r7, #7]
    bool status = false;
 800d16e:	2300      	movs	r3, #0
 800d170:	73fb      	strb	r3, [r7, #15]

    /* Check packet type. Mask out lower bits to ignore flags. */
    switch( packetType & 0xF0U )
 800d172:	79fb      	ldrb	r3, [r7, #7]
 800d174:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d178:	2bd0      	cmp	r3, #208	; 0xd0
 800d17a:	d01d      	beq.n	800d1b8 <incomingPacketValid+0x54>
 800d17c:	2bd0      	cmp	r3, #208	; 0xd0
 800d17e:	d826      	bhi.n	800d1ce <incomingPacketValid+0x6a>
 800d180:	2bb0      	cmp	r3, #176	; 0xb0
 800d182:	d019      	beq.n	800d1b8 <incomingPacketValid+0x54>
 800d184:	2bb0      	cmp	r3, #176	; 0xb0
 800d186:	d822      	bhi.n	800d1ce <incomingPacketValid+0x6a>
 800d188:	2b90      	cmp	r3, #144	; 0x90
 800d18a:	d015      	beq.n	800d1b8 <incomingPacketValid+0x54>
 800d18c:	2b90      	cmp	r3, #144	; 0x90
 800d18e:	d81e      	bhi.n	800d1ce <incomingPacketValid+0x6a>
 800d190:	2b70      	cmp	r3, #112	; 0x70
 800d192:	d011      	beq.n	800d1b8 <incomingPacketValid+0x54>
 800d194:	2b70      	cmp	r3, #112	; 0x70
 800d196:	d81a      	bhi.n	800d1ce <incomingPacketValid+0x6a>
 800d198:	2b60      	cmp	r3, #96	; 0x60
 800d19a:	d010      	beq.n	800d1be <incomingPacketValid+0x5a>
 800d19c:	2b60      	cmp	r3, #96	; 0x60
 800d19e:	d816      	bhi.n	800d1ce <incomingPacketValid+0x6a>
 800d1a0:	2b50      	cmp	r3, #80	; 0x50
 800d1a2:	d009      	beq.n	800d1b8 <incomingPacketValid+0x54>
 800d1a4:	2b50      	cmp	r3, #80	; 0x50
 800d1a6:	d812      	bhi.n	800d1ce <incomingPacketValid+0x6a>
 800d1a8:	2b40      	cmp	r3, #64	; 0x40
 800d1aa:	d005      	beq.n	800d1b8 <incomingPacketValid+0x54>
 800d1ac:	2b40      	cmp	r3, #64	; 0x40
 800d1ae:	d80e      	bhi.n	800d1ce <incomingPacketValid+0x6a>
 800d1b0:	2b20      	cmp	r3, #32
 800d1b2:	d001      	beq.n	800d1b8 <incomingPacketValid+0x54>
 800d1b4:	2b30      	cmp	r3, #48	; 0x30
 800d1b6:	d10a      	bne.n	800d1ce <incomingPacketValid+0x6a>
        case MQTT_PACKET_TYPE_PUBREC:
        case MQTT_PACKET_TYPE_PUBCOMP:
        case MQTT_PACKET_TYPE_SUBACK:
        case MQTT_PACKET_TYPE_UNSUBACK:
        case MQTT_PACKET_TYPE_PINGRESP:
            status = true;
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	73fb      	strb	r3, [r7, #15]
            break;
 800d1bc:	e00a      	b.n	800d1d4 <incomingPacketValid+0x70>

        case ( MQTT_PACKET_TYPE_PUBREL & 0xF0U ):

            /* The second bit of a PUBREL must be set. */
            if( ( packetType & 0x02U ) > 0U )
 800d1be:	79fb      	ldrb	r3, [r7, #7]
 800d1c0:	f003 0302 	and.w	r3, r3, #2
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d004      	beq.n	800d1d2 <incomingPacketValid+0x6e>
            {
                status = true;
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	73fb      	strb	r3, [r7, #15]
            }

            break;
 800d1cc:	e001      	b.n	800d1d2 <incomingPacketValid+0x6e>

        /* Any other packet type is invalid. */
        default:
            LogWarn( ( "Incoming packet invalid: Packet type=%u.",
                       ( unsigned int ) packetType ) );
            break;
 800d1ce:	bf00      	nop
 800d1d0:	e000      	b.n	800d1d4 <incomingPacketValid+0x70>
            break;
 800d1d2:	bf00      	nop
    }

    return status;
 800d1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3714      	adds	r7, #20
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e0:	4770      	bx	lr

0800d1e2 <checkPublishRemainingLength>:
/*-----------------------------------------------------------*/

static MQTTStatus_t checkPublishRemainingLength( size_t remainingLength,
                                                 MQTTQoS_t qos,
                                                 size_t qos0Minimum )
{
 800d1e2:	b480      	push	{r7}
 800d1e4:	b087      	sub	sp, #28
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	60f8      	str	r0, [r7, #12]
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	607a      	str	r2, [r7, #4]
 800d1ee:	72fb      	strb	r3, [r7, #11]
    MQTTStatus_t status = MQTTSuccess;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	75fb      	strb	r3, [r7, #23]

    /* Sanity checks for "Remaining length". */
    if( qos == MQTTQoS0 )
 800d1f4:	7afb      	ldrb	r3, [r7, #11]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d106      	bne.n	800d208 <checkPublishRemainingLength+0x26>
    {
        /* Check that the "Remaining length" is greater than the minimum. */
        if( remainingLength < qos0Minimum )
 800d1fa:	68fa      	ldr	r2, [r7, #12]
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d209      	bcs.n	800d216 <checkPublishRemainingLength+0x34>
        {
            LogError( ( "QoS 0 PUBLISH cannot have a remaining length less than %lu.",
                        ( unsigned long ) qos0Minimum ) );

            status = MQTTBadResponse;
 800d202:	2305      	movs	r3, #5
 800d204:	75fb      	strb	r3, [r7, #23]
 800d206:	e006      	b.n	800d216 <checkPublishRemainingLength+0x34>
    else
    {
        /* Check that the "Remaining length" is greater than the minimum. For
         * QoS 1 or 2, this will be two bytes greater than for QoS 0 due to the
         * packet identifier. */
        if( remainingLength < ( qos0Minimum + 2U ) )
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	3302      	adds	r3, #2
 800d20c:	68fa      	ldr	r2, [r7, #12]
 800d20e:	429a      	cmp	r2, r3
 800d210:	d201      	bcs.n	800d216 <checkPublishRemainingLength+0x34>
        {
            LogError( ( "QoS 1 or 2 PUBLISH cannot have a remaining length less than %lu.",
                        ( unsigned long ) ( qos0Minimum + 2U ) ) );

            status = MQTTBadResponse;
 800d212:	2305      	movs	r3, #5
 800d214:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800d216:	7dfb      	ldrb	r3, [r7, #23]
}
 800d218:	4618      	mov	r0, r3
 800d21a:	371c      	adds	r7, #28
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr

0800d224 <processPublishFlags>:

/*-----------------------------------------------------------*/

static MQTTStatus_t processPublishFlags( uint8_t publishFlags,
                                         MQTTPublishInfo_t * pPublishInfo )
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b084      	sub	sp, #16
 800d228:	af00      	add	r7, sp, #0
 800d22a:	4603      	mov	r3, r0
 800d22c:	6039      	str	r1, [r7, #0]
 800d22e:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTSuccess;
 800d230:	2300      	movs	r3, #0
 800d232:	73fb      	strb	r3, [r7, #15]

    assert( pPublishInfo != NULL );
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d106      	bne.n	800d248 <processPublishFlags+0x24>
 800d23a:	4b20      	ldr	r3, [pc, #128]	; (800d2bc <processPublishFlags+0x98>)
 800d23c:	4a20      	ldr	r2, [pc, #128]	; (800d2c0 <processPublishFlags+0x9c>)
 800d23e:	f240 31ef 	movw	r1, #1007	; 0x3ef
 800d242:	4820      	ldr	r0, [pc, #128]	; (800d2c4 <processPublishFlags+0xa0>)
 800d244:	f004 ffea 	bl	801221c <__assert_func>

    /* Check for QoS 2. */
    if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS2 ) )
 800d248:	79fb      	ldrb	r3, [r7, #7]
 800d24a:	f003 0304 	and.w	r3, r3, #4
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d00b      	beq.n	800d26a <processPublishFlags+0x46>
    {
        /* PUBLISH packet is invalid if both QoS 1 and QoS 2 bits are set. */
        if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 ) )
 800d252:	79fb      	ldrb	r3, [r7, #7]
 800d254:	f003 0302 	and.w	r3, r3, #2
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d002      	beq.n	800d262 <processPublishFlags+0x3e>
        {
            LogError( ( "Bad QoS: 3." ) );

            status = MQTTBadResponse;
 800d25c:	2305      	movs	r3, #5
 800d25e:	73fb      	strb	r3, [r7, #15]
 800d260:	e00f      	b.n	800d282 <processPublishFlags+0x5e>
        }
        else
        {
            pPublishInfo->qos = MQTTQoS2;
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	2202      	movs	r2, #2
 800d266:	701a      	strb	r2, [r3, #0]
 800d268:	e00b      	b.n	800d282 <processPublishFlags+0x5e>
        }
    }
    /* Check for QoS 1. */
    else if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 ) )
 800d26a:	79fb      	ldrb	r3, [r7, #7]
 800d26c:	f003 0302 	and.w	r3, r3, #2
 800d270:	2b00      	cmp	r3, #0
 800d272:	d003      	beq.n	800d27c <processPublishFlags+0x58>
    {
        pPublishInfo->qos = MQTTQoS1;
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	2201      	movs	r2, #1
 800d278:	701a      	strb	r2, [r3, #0]
 800d27a:	e002      	b.n	800d282 <processPublishFlags+0x5e>
    }
    /* If the PUBLISH isn't QoS 1 or 2, then it's QoS 0. */
    else
    {
        pPublishInfo->qos = MQTTQoS0;
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	2200      	movs	r2, #0
 800d280:	701a      	strb	r2, [r3, #0]
    }

    if( status == MQTTSuccess )
 800d282:	7bfb      	ldrb	r3, [r7, #15]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d113      	bne.n	800d2b0 <processPublishFlags+0x8c>
    {
        LogDebug( ( "QoS is %d.", ( int ) pPublishInfo->qos ) );

        /* Parse the Retain bit. */
        pPublishInfo->retain = UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_RETAIN );
 800d288:	79fb      	ldrb	r3, [r7, #7]
 800d28a:	f003 0301 	and.w	r3, r3, #1
 800d28e:	2b00      	cmp	r3, #0
 800d290:	bf14      	ite	ne
 800d292:	2301      	movne	r3, #1
 800d294:	2300      	moveq	r3, #0
 800d296:	b2da      	uxtb	r2, r3
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	705a      	strb	r2, [r3, #1]

        LogDebug( ( "Retain bit is %d.", ( int ) pPublishInfo->retain ) );

        /* Parse the DUP bit. */
        pPublishInfo->dup = UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_DUP );
 800d29c:	79fb      	ldrb	r3, [r7, #7]
 800d29e:	f003 0308 	and.w	r3, r3, #8
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	bf14      	ite	ne
 800d2a6:	2301      	movne	r3, #1
 800d2a8:	2300      	moveq	r3, #0
 800d2aa:	b2da      	uxtb	r2, r3
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	709a      	strb	r2, [r3, #2]

        LogDebug( ( "DUP bit is %d.", ( int ) pPublishInfo->dup ) );
    }

    return status;
 800d2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3710      	adds	r7, #16
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
 800d2ba:	bf00      	nop
 800d2bc:	08014cb8 	.word	0x08014cb8
 800d2c0:	08015510 	.word	0x08015510
 800d2c4:	08014c84 	.word	0x08014c84

0800d2c8 <logConnackResponse>:

/*-----------------------------------------------------------*/

static void logConnackResponse( uint8_t responseCode )
{
 800d2c8:	b5b0      	push	{r4, r5, r7, lr}
 800d2ca:	b088      	sub	sp, #32
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	71fb      	strb	r3, [r7, #7]
    const char * const pConnackResponses[ 6 ] =
 800d2d2:	4b0c      	ldr	r3, [pc, #48]	; (800d304 <logConnackResponse+0x3c>)
 800d2d4:	f107 0408 	add.w	r4, r7, #8
 800d2d8:	461d      	mov	r5, r3
 800d2da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d2de:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d2e2:	e884 0003 	stmia.w	r4, {r0, r1}

    /* Avoid unused parameter warning when assert and logs are disabled. */
    ( void ) responseCode;
    ( void ) pConnackResponses;

    assert( responseCode <= 5U );
 800d2e6:	79fb      	ldrb	r3, [r7, #7]
 800d2e8:	2b05      	cmp	r3, #5
 800d2ea:	d906      	bls.n	800d2fa <logConnackResponse+0x32>
 800d2ec:	4b06      	ldr	r3, [pc, #24]	; (800d308 <logConnackResponse+0x40>)
 800d2ee:	4a07      	ldr	r2, [pc, #28]	; (800d30c <logConnackResponse+0x44>)
 800d2f0:	f240 412f 	movw	r1, #1071	; 0x42f
 800d2f4:	4806      	ldr	r0, [pc, #24]	; (800d310 <logConnackResponse+0x48>)
 800d2f6:	f004 ff91 	bl	801221c <__assert_func>
    else
    {
        /* Log an error based on the CONNACK response code. */
        LogError( ( "%s", pConnackResponses[ responseCode ] ) );
    }
}
 800d2fa:	bf00      	nop
 800d2fc:	3720      	adds	r7, #32
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bdb0      	pop	{r4, r5, r7, pc}
 800d302:	bf00      	nop
 800d304:	08014e18 	.word	0x08014e18
 800d308:	08014e04 	.word	0x08014e04
 800d30c:	08015524 	.word	0x08015524
 800d310:	08014c84 	.word	0x08014c84

0800d314 <deserializeConnack>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeConnack( const MQTTPacketInfo_t * pConnack,
                                        bool * pSessionPresent )
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b084      	sub	sp, #16
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d31e:	2300      	movs	r3, #0
 800d320:	73fb      	strb	r3, [r7, #15]
    const uint8_t * pRemainingData = NULL;
 800d322:	2300      	movs	r3, #0
 800d324:	60bb      	str	r3, [r7, #8]

    assert( pConnack != NULL );
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d106      	bne.n	800d33a <deserializeConnack+0x26>
 800d32c:	4b2a      	ldr	r3, [pc, #168]	; (800d3d8 <deserializeConnack+0xc4>)
 800d32e:	4a2b      	ldr	r2, [pc, #172]	; (800d3dc <deserializeConnack+0xc8>)
 800d330:	f240 4145 	movw	r1, #1093	; 0x445
 800d334:	482a      	ldr	r0, [pc, #168]	; (800d3e0 <deserializeConnack+0xcc>)
 800d336:	f004 ff71 	bl	801221c <__assert_func>
    assert( pSessionPresent != NULL );
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d106      	bne.n	800d34e <deserializeConnack+0x3a>
 800d340:	4b28      	ldr	r3, [pc, #160]	; (800d3e4 <deserializeConnack+0xd0>)
 800d342:	4a26      	ldr	r2, [pc, #152]	; (800d3dc <deserializeConnack+0xc8>)
 800d344:	f240 4146 	movw	r1, #1094	; 0x446
 800d348:	4825      	ldr	r0, [pc, #148]	; (800d3e0 <deserializeConnack+0xcc>)
 800d34a:	f004 ff67 	bl	801221c <__assert_func>
    pRemainingData = pConnack->pRemainingData;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	685b      	ldr	r3, [r3, #4]
 800d352:	60bb      	str	r3, [r7, #8]

    /* According to MQTT 3.1.1, the second byte of CONNACK must specify a
     * "Remaining length" of 2. */
    if( pConnack->remainingLength != MQTT_PACKET_CONNACK_REMAINING_LENGTH )
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	689b      	ldr	r3, [r3, #8]
 800d358:	2b02      	cmp	r3, #2
 800d35a:	d002      	beq.n	800d362 <deserializeConnack+0x4e>
    {
        LogError( ( "CONNACK does not have remaining length of %u.",
                    ( unsigned int ) MQTT_PACKET_CONNACK_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800d35c:	2305      	movs	r3, #5
 800d35e:	73fb      	strb	r3, [r7, #15]
 800d360:	e01d      	b.n	800d39e <deserializeConnack+0x8a>
    }

    /* Check the reserved bits in CONNACK. The high 7 bits of the third byte
     * in CONNACK must be 0. */
    else if( ( pRemainingData[ 0 ] | 0x01U ) != 0x01U )
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	f043 0301 	orr.w	r3, r3, #1
 800d36a:	b2db      	uxtb	r3, r3
 800d36c:	2b01      	cmp	r3, #1
 800d36e:	d002      	beq.n	800d376 <deserializeConnack+0x62>
    {
        LogError( ( "Reserved bits in CONNACK incorrect." ) );

        status = MQTTBadResponse;
 800d370:	2305      	movs	r3, #5
 800d372:	73fb      	strb	r3, [r7, #15]
 800d374:	e013      	b.n	800d39e <deserializeConnack+0x8a>
    }
    else
    {
        /* Determine if the "Session Present" bit is set. This is the lowest bit of
         * the third byte in CONNACK. */
        if( ( pRemainingData[ 0 ] & MQTT_PACKET_CONNACK_SESSION_PRESENT_MASK )
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	f003 0301 	and.w	r3, r3, #1
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d00a      	beq.n	800d398 <deserializeConnack+0x84>
            == MQTT_PACKET_CONNACK_SESSION_PRESENT_MASK )
        {
            LogDebug( ( "CONNACK session present bit set." ) );
            *pSessionPresent = true;
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	2201      	movs	r2, #1
 800d386:	701a      	strb	r2, [r3, #0]

            /* MQTT 3.1.1 specifies that the fourth byte in CONNACK must be 0 if the
             * "Session Present" bit is set. */
            if( pRemainingData[ 1 ] != 0U )
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	3301      	adds	r3, #1
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d005      	beq.n	800d39e <deserializeConnack+0x8a>
            {
                LogError( ( "Session Present bit is set, but connect return code in CONNACK is %u (nonzero).",
                            ( unsigned int ) pRemainingData[ 1 ] ) );
                status = MQTTBadResponse;
 800d392:	2305      	movs	r3, #5
 800d394:	73fb      	strb	r3, [r7, #15]
 800d396:	e002      	b.n	800d39e <deserializeConnack+0x8a>
            }
        }
        else
        {
            LogDebug( ( "CONNACK session present bit not set." ) );
            *pSessionPresent = false;
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	2200      	movs	r2, #0
 800d39c:	701a      	strb	r2, [r3, #0]
        }
    }

    if( status == MQTTSuccess )
 800d39e:	7bfb      	ldrb	r3, [r7, #15]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d114      	bne.n	800d3ce <deserializeConnack+0xba>
    {
        /* In MQTT 3.1.1, only values 0 through 5 are valid CONNACK response codes. */
        if( pRemainingData[ 1 ] > 5U )
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	2b05      	cmp	r3, #5
 800d3ac:	d902      	bls.n	800d3b4 <deserializeConnack+0xa0>
        {
            LogError( ( "CONNACK response %u is invalid.",
                        ( unsigned int ) pRemainingData[ 1 ] ) );

            status = MQTTBadResponse;
 800d3ae:	2305      	movs	r3, #5
 800d3b0:	73fb      	strb	r3, [r7, #15]
 800d3b2:	e00c      	b.n	800d3ce <deserializeConnack+0xba>
        }
        else
        {
            /* Print the appropriate message for the CONNACK response code if logs are
             * enabled. */
            logConnackResponse( pRemainingData[ 1 ] );
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	781b      	ldrb	r3, [r3, #0]
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f7ff ff84 	bl	800d2c8 <logConnackResponse>

            /* A nonzero CONNACK response code means the connection was refused. */
            if( pRemainingData[ 1 ] > 0U )
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d001      	beq.n	800d3ce <deserializeConnack+0xba>
            {
                status = MQTTServerRefused;
 800d3ca:	2306      	movs	r3, #6
 800d3cc:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return status;
 800d3ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3710      	adds	r7, #16
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}
 800d3d8:	08014e30 	.word	0x08014e30
 800d3dc:	08015538 	.word	0x08015538
 800d3e0:	08014c84 	.word	0x08014c84
 800d3e4:	08014e44 	.word	0x08014e44

0800d3e8 <calculateSubscriptionPacketSize>:
static MQTTStatus_t calculateSubscriptionPacketSize( const MQTTSubscribeInfo_t * pSubscriptionList,
                                                     size_t subscriptionCount,
                                                     size_t * pRemainingLength,
                                                     size_t * pPacketSize,
                                                     MQTTSubscriptionType_t subscriptionType )
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b088      	sub	sp, #32
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	60b9      	str	r1, [r7, #8]
 800d3f2:	607a      	str	r2, [r7, #4]
 800d3f4:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	77fb      	strb	r3, [r7, #31]
    size_t i = 0, packetSize = 0;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	61bb      	str	r3, [r7, #24]
 800d3fe:	2300      	movs	r3, #0
 800d400:	617b      	str	r3, [r7, #20]

    assert( pSubscriptionList != NULL );
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d106      	bne.n	800d416 <calculateSubscriptionPacketSize+0x2e>
 800d408:	4b3d      	ldr	r3, [pc, #244]	; (800d500 <calculateSubscriptionPacketSize+0x118>)
 800d40a:	4a3e      	ldr	r2, [pc, #248]	; (800d504 <calculateSubscriptionPacketSize+0x11c>)
 800d40c:	f240 419b 	movw	r1, #1179	; 0x49b
 800d410:	483d      	ldr	r0, [pc, #244]	; (800d508 <calculateSubscriptionPacketSize+0x120>)
 800d412:	f004 ff03 	bl	801221c <__assert_func>
    assert( subscriptionCount != 0U );
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d106      	bne.n	800d42a <calculateSubscriptionPacketSize+0x42>
 800d41c:	4b3b      	ldr	r3, [pc, #236]	; (800d50c <calculateSubscriptionPacketSize+0x124>)
 800d41e:	4a39      	ldr	r2, [pc, #228]	; (800d504 <calculateSubscriptionPacketSize+0x11c>)
 800d420:	f240 419c 	movw	r1, #1180	; 0x49c
 800d424:	4838      	ldr	r0, [pc, #224]	; (800d508 <calculateSubscriptionPacketSize+0x120>)
 800d426:	f004 fef9 	bl	801221c <__assert_func>
    assert( pRemainingLength != NULL );
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d106      	bne.n	800d43e <calculateSubscriptionPacketSize+0x56>
 800d430:	4b37      	ldr	r3, [pc, #220]	; (800d510 <calculateSubscriptionPacketSize+0x128>)
 800d432:	4a34      	ldr	r2, [pc, #208]	; (800d504 <calculateSubscriptionPacketSize+0x11c>)
 800d434:	f240 419d 	movw	r1, #1181	; 0x49d
 800d438:	4833      	ldr	r0, [pc, #204]	; (800d508 <calculateSubscriptionPacketSize+0x120>)
 800d43a:	f004 feef 	bl	801221c <__assert_func>
    assert( pPacketSize != NULL );
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d106      	bne.n	800d452 <calculateSubscriptionPacketSize+0x6a>
 800d444:	4b33      	ldr	r3, [pc, #204]	; (800d514 <calculateSubscriptionPacketSize+0x12c>)
 800d446:	4a2f      	ldr	r2, [pc, #188]	; (800d504 <calculateSubscriptionPacketSize+0x11c>)
 800d448:	f240 419e 	movw	r1, #1182	; 0x49e
 800d44c:	482e      	ldr	r0, [pc, #184]	; (800d508 <calculateSubscriptionPacketSize+0x120>)
 800d44e:	f004 fee5 	bl	801221c <__assert_func>

    /* The variable header of a subscription packet consists of a 2-byte packet
     * identifier. */
    packetSize += sizeof( uint16_t );
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	3302      	adds	r3, #2
 800d456:	617b      	str	r3, [r7, #20]

    /* Sum the lengths of all subscription topic filters; add 1 byte for each
     * subscription's QoS if type is MQTT_SUBSCRIBE. */
    for( i = 0; i < subscriptionCount; i++ )
 800d458:	2300      	movs	r3, #0
 800d45a:	61bb      	str	r3, [r7, #24]
 800d45c:	e02f      	b.n	800d4be <calculateSubscriptionPacketSize+0xd6>
    {
        /* Add the length of the topic filter. MQTT strings are prepended
         * with 2 byte string length field. Hence 2 bytes are added to size. */
        packetSize += pSubscriptionList[ i ].topicFilterLength + sizeof( uint16_t );
 800d45e:	69ba      	ldr	r2, [r7, #24]
 800d460:	4613      	mov	r3, r2
 800d462:	005b      	lsls	r3, r3, #1
 800d464:	4413      	add	r3, r2
 800d466:	009b      	lsls	r3, r3, #2
 800d468:	461a      	mov	r2, r3
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	4413      	add	r3, r2
 800d46e:	891b      	ldrh	r3, [r3, #8]
 800d470:	461a      	mov	r2, r3
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	4413      	add	r3, r2
 800d476:	3302      	adds	r3, #2
 800d478:	617b      	str	r3, [r7, #20]

        /* Only SUBSCRIBE packets include the QoS. */
        if( subscriptionType == MQTT_SUBSCRIBE )
 800d47a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d102      	bne.n	800d488 <calculateSubscriptionPacketSize+0xa0>
        {
            packetSize += 1U;
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	3301      	adds	r3, #1
 800d486:	617b      	str	r3, [r7, #20]
        }

        /* Validate each topic filter. */
        if( ( pSubscriptionList[ i ].topicFilterLength == 0U ) ||
 800d488:	69ba      	ldr	r2, [r7, #24]
 800d48a:	4613      	mov	r3, r2
 800d48c:	005b      	lsls	r3, r3, #1
 800d48e:	4413      	add	r3, r2
 800d490:	009b      	lsls	r3, r3, #2
 800d492:	461a      	mov	r2, r3
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	4413      	add	r3, r2
 800d498:	891b      	ldrh	r3, [r3, #8]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d00a      	beq.n	800d4b4 <calculateSubscriptionPacketSize+0xcc>
            ( pSubscriptionList[ i ].pTopicFilter == NULL ) )
 800d49e:	69ba      	ldr	r2, [r7, #24]
 800d4a0:	4613      	mov	r3, r2
 800d4a2:	005b      	lsls	r3, r3, #1
 800d4a4:	4413      	add	r3, r2
 800d4a6:	009b      	lsls	r3, r3, #2
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	685b      	ldr	r3, [r3, #4]
        if( ( pSubscriptionList[ i ].topicFilterLength == 0U ) ||
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d101      	bne.n	800d4b8 <calculateSubscriptionPacketSize+0xd0>
        {
            status = MQTTBadParameter;
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	77fb      	strb	r3, [r7, #31]
    for( i = 0; i < subscriptionCount; i++ )
 800d4b8:	69bb      	ldr	r3, [r7, #24]
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	61bb      	str	r3, [r7, #24]
 800d4be:	69ba      	ldr	r2, [r7, #24]
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d3cb      	bcc.n	800d45e <calculateSubscriptionPacketSize+0x76>
    }

    /* At this point, the "Remaining length" has been calculated. Return error
     * if the "Remaining length" exceeds what is allowed by MQTT 3.1.1. Otherwise,
     * set the output parameter.*/
    if( packetSize > MQTT_MAX_REMAINING_LENGTH )
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d4cc:	d301      	bcc.n	800d4d2 <calculateSubscriptionPacketSize+0xea>
    {
        LogError( ( "Subscription packet length of %lu exceeds"
                    "the MQTT 3.1.1 maximum packet length of %lu.",
                    ( unsigned long ) packetSize,
                    MQTT_MAX_REMAINING_LENGTH ) );
        status = MQTTBadParameter;
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800d4d2:	7ffb      	ldrb	r3, [r7, #31]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d10d      	bne.n	800d4f4 <calculateSubscriptionPacketSize+0x10c>
    {
        *pRemainingLength = packetSize;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	697a      	ldr	r2, [r7, #20]
 800d4dc:	601a      	str	r2, [r3, #0]

        /* Calculate the full size of the subscription packet by adding
         * number of bytes required to encode the "Remaining length" field
         * plus 1 byte for the "Packet type" field. */
        packetSize += 1U + remainingLengthEncodedSize( packetSize );
 800d4de:	6978      	ldr	r0, [r7, #20]
 800d4e0:	f7ff fc22 	bl	800cd28 <remainingLengthEncodedSize>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	697a      	ldr	r2, [r7, #20]
 800d4ea:	4413      	add	r3, r2
 800d4ec:	617b      	str	r3, [r7, #20]

        /*Set the pPacketSize output parameter. */
        *pPacketSize = packetSize;
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	697a      	ldr	r2, [r7, #20]
 800d4f2:	601a      	str	r2, [r3, #0]

    LogDebug( ( "Subscription packet remaining length=%lu and packet size=%lu.",
                ( unsigned long ) *pRemainingLength,
                ( unsigned long ) *pPacketSize ) );

    return status;
 800d4f4:	7ffb      	ldrb	r3, [r7, #31]
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3720      	adds	r7, #32
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	bf00      	nop
 800d500:	08014e5c 	.word	0x08014e5c
 800d504:	0801554c 	.word	0x0801554c
 800d508:	08014c84 	.word	0x08014c84
 800d50c:	08014e78 	.word	0x08014e78
 800d510:	08014cd0 	.word	0x08014cd0
 800d514:	08014cec 	.word	0x08014cec

0800d518 <readSubackStatus>:

/*-----------------------------------------------------------*/

static MQTTStatus_t readSubackStatus( size_t statusCount,
                                      const uint8_t * pStatusStart )
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b086      	sub	sp, #24
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d522:	2300      	movs	r3, #0
 800d524:	75fb      	strb	r3, [r7, #23]
    uint8_t subscriptionStatus = 0;
 800d526:	2300      	movs	r3, #0
 800d528:	73fb      	strb	r3, [r7, #15]
    size_t i = 0;
 800d52a:	2300      	movs	r3, #0
 800d52c:	613b      	str	r3, [r7, #16]

    assert( pStatusStart != NULL );
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d106      	bne.n	800d542 <readSubackStatus+0x2a>
 800d534:	4b17      	ldr	r3, [pc, #92]	; (800d594 <readSubackStatus+0x7c>)
 800d536:	4a18      	ldr	r2, [pc, #96]	; (800d598 <readSubackStatus+0x80>)
 800d538:	f240 41e7 	movw	r1, #1255	; 0x4e7
 800d53c:	4817      	ldr	r0, [pc, #92]	; (800d59c <readSubackStatus+0x84>)
 800d53e:	f004 fe6d 	bl	801221c <__assert_func>

    /* Iterate through each status byte in the SUBACK packet. */
    for( i = 0; i < statusCount; i++ )
 800d542:	2300      	movs	r3, #0
 800d544:	613b      	str	r3, [r7, #16]
 800d546:	e019      	b.n	800d57c <readSubackStatus+0x64>
    {
        /* Read a single status byte in SUBACK. */
        subscriptionStatus = pStatusStart[ i ];
 800d548:	683a      	ldr	r2, [r7, #0]
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	4413      	add	r3, r2
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	73fb      	strb	r3, [r7, #15]

        /* MQTT 3.1.1 defines the following values as status codes. */
        switch( subscriptionStatus )
 800d552:	7bfb      	ldrb	r3, [r7, #15]
 800d554:	2b02      	cmp	r3, #2
 800d556:	dc02      	bgt.n	800d55e <readSubackStatus+0x46>
 800d558:	2b00      	cmp	r3, #0
 800d55a:	da08      	bge.n	800d56e <readSubackStatus+0x56>
 800d55c:	e004      	b.n	800d568 <readSubackStatus+0x50>
 800d55e:	2b80      	cmp	r3, #128	; 0x80
 800d560:	d102      	bne.n	800d568 <readSubackStatus+0x50>
            case 0x80:

                LogWarn( ( "Topic filter %lu refused.", ( unsigned long ) i ) );

                /* Application should remove subscription from the list */
                status = MQTTServerRefused;
 800d562:	2306      	movs	r3, #6
 800d564:	75fb      	strb	r3, [r7, #23]

                break;
 800d566:	e003      	b.n	800d570 <readSubackStatus+0x58>

            default:
                LogError( ( "Bad SUBSCRIBE status %u.",
                            ( unsigned int ) subscriptionStatus ) );

                status = MQTTBadResponse;
 800d568:	2305      	movs	r3, #5
 800d56a:	75fb      	strb	r3, [r7, #23]

                break;
 800d56c:	e000      	b.n	800d570 <readSubackStatus+0x58>
                break;
 800d56e:	bf00      	nop
        }

        /* Stop parsing the subscription statuses if a bad response was received. */
        if( status == MQTTBadResponse )
 800d570:	7dfb      	ldrb	r3, [r7, #23]
 800d572:	2b05      	cmp	r3, #5
 800d574:	d007      	beq.n	800d586 <readSubackStatus+0x6e>
    for( i = 0; i < statusCount; i++ )
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	3301      	adds	r3, #1
 800d57a:	613b      	str	r3, [r7, #16]
 800d57c:	693a      	ldr	r2, [r7, #16]
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	429a      	cmp	r2, r3
 800d582:	d3e1      	bcc.n	800d548 <readSubackStatus+0x30>
 800d584:	e000      	b.n	800d588 <readSubackStatus+0x70>
        {
            break;
 800d586:	bf00      	nop
        }
    }

    return status;
 800d588:	7dfb      	ldrb	r3, [r7, #23]
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3718      	adds	r7, #24
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	08014e90 	.word	0x08014e90
 800d598:	0801556c 	.word	0x0801556c
 800d59c:	08014c84 	.word	0x08014c84

0800d5a0 <deserializeSuback>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeSuback( const MQTTPacketInfo_t * pSuback,
                                       uint16_t * pPacketIdentifier )
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b086      	sub	sp, #24
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	75fb      	strb	r3, [r7, #23]
    size_t remainingLength;
    const uint8_t * pVariableHeader = NULL;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	613b      	str	r3, [r7, #16]

    assert( pSuback != NULL );
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d106      	bne.n	800d5c6 <deserializeSuback+0x26>
 800d5b8:	4b1f      	ldr	r3, [pc, #124]	; (800d638 <deserializeSuback+0x98>)
 800d5ba:	4a20      	ldr	r2, [pc, #128]	; (800d63c <deserializeSuback+0x9c>)
 800d5bc:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800d5c0:	481f      	ldr	r0, [pc, #124]	; (800d640 <deserializeSuback+0xa0>)
 800d5c2:	f004 fe2b 	bl	801221c <__assert_func>
    assert( pPacketIdentifier != NULL );
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d106      	bne.n	800d5da <deserializeSuback+0x3a>
 800d5cc:	4b1d      	ldr	r3, [pc, #116]	; (800d644 <deserializeSuback+0xa4>)
 800d5ce:	4a1b      	ldr	r2, [pc, #108]	; (800d63c <deserializeSuback+0x9c>)
 800d5d0:	f240 5121 	movw	r1, #1313	; 0x521
 800d5d4:	481a      	ldr	r0, [pc, #104]	; (800d640 <deserializeSuback+0xa0>)
 800d5d6:	f004 fe21 	bl	801221c <__assert_func>

    remainingLength = pSuback->remainingLength;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	689b      	ldr	r3, [r3, #8]
 800d5de:	60fb      	str	r3, [r7, #12]
    pVariableHeader = pSuback->pRemainingData;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	685b      	ldr	r3, [r3, #4]
 800d5e4:	613b      	str	r3, [r7, #16]

    /* A SUBACK must have a remaining length of at least 3 to accommodate the
     * packet identifier and at least 1 return code. */
    if( remainingLength < 3U )
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2b02      	cmp	r3, #2
 800d5ea:	d802      	bhi.n	800d5f2 <deserializeSuback+0x52>
    {
        LogError( ( "SUBACK cannot have a remaining length less than 3." ) );
        status = MQTTBadResponse;
 800d5ec:	2305      	movs	r3, #5
 800d5ee:	75fb      	strb	r3, [r7, #23]
 800d5f0:	e01d      	b.n	800d62e <deserializeSuback+0x8e>
    }
    else
    {
        /* Extract the packet identifier (first 2 bytes of variable header) from SUBACK. */
        *pPacketIdentifier = UINT16_DECODE( pVariableHeader );
 800d5f2:	693b      	ldr	r3, [r7, #16]
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	021b      	lsls	r3, r3, #8
 800d5f8:	b21a      	sxth	r2, r3
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	781b      	ldrb	r3, [r3, #0]
 800d600:	b21b      	sxth	r3, r3
 800d602:	4313      	orrs	r3, r2
 800d604:	b21b      	sxth	r3, r3
 800d606:	b29a      	uxth	r2, r3
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	801a      	strh	r2, [r3, #0]

        LogDebug( ( "Packet identifier %hu.",
                    ( unsigned short ) *pPacketIdentifier ) );

        if( *pPacketIdentifier == 0U )
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	881b      	ldrh	r3, [r3, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d102      	bne.n	800d61a <deserializeSuback+0x7a>
        {
            status = MQTTBadResponse;
 800d614:	2305      	movs	r3, #5
 800d616:	75fb      	strb	r3, [r7, #23]
 800d618:	e009      	b.n	800d62e <deserializeSuback+0x8e>
        }
        else
        {
            status = readSubackStatus( remainingLength - sizeof( uint16_t ),
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	1e9a      	subs	r2, r3, #2
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	3302      	adds	r3, #2
 800d622:	4619      	mov	r1, r3
 800d624:	4610      	mov	r0, r2
 800d626:	f7ff ff77 	bl	800d518 <readSubackStatus>
 800d62a:	4603      	mov	r3, r0
 800d62c:	75fb      	strb	r3, [r7, #23]
                                       &pVariableHeader[ sizeof( uint16_t ) ] );
        }
    }

    return status;
 800d62e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d630:	4618      	mov	r0, r3
 800d632:	3718      	adds	r7, #24
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}
 800d638:	08014ea8 	.word	0x08014ea8
 800d63c:	08015580 	.word	0x08015580
 800d640:	08014c84 	.word	0x08014c84
 800d644:	08014eb8 	.word	0x08014eb8

0800d648 <deserializePublish>:
/*-----------------------------------------------------------*/

static MQTTStatus_t deserializePublish( const MQTTPacketInfo_t * pIncomingPacket,
                                        uint16_t * pPacketId,
                                        MQTTPublishInfo_t * pPublishInfo )
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b088      	sub	sp, #32
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800d654:	2300      	movs	r3, #0
 800d656:	77fb      	strb	r3, [r7, #31]
    const uint8_t * pVariableHeader, * pPacketIdentifierHigh = NULL;
 800d658:	2300      	movs	r3, #0
 800d65a:	61bb      	str	r3, [r7, #24]

    assert( pIncomingPacket != NULL );
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d106      	bne.n	800d670 <deserializePublish+0x28>
 800d662:	4b53      	ldr	r3, [pc, #332]	; (800d7b0 <deserializePublish+0x168>)
 800d664:	4a53      	ldr	r2, [pc, #332]	; (800d7b4 <deserializePublish+0x16c>)
 800d666:	f240 5185 	movw	r1, #1413	; 0x585
 800d66a:	4853      	ldr	r0, [pc, #332]	; (800d7b8 <deserializePublish+0x170>)
 800d66c:	f004 fdd6 	bl	801221c <__assert_func>
    assert( pPacketId != NULL );
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d106      	bne.n	800d684 <deserializePublish+0x3c>
 800d676:	4b51      	ldr	r3, [pc, #324]	; (800d7bc <deserializePublish+0x174>)
 800d678:	4a4e      	ldr	r2, [pc, #312]	; (800d7b4 <deserializePublish+0x16c>)
 800d67a:	f240 5186 	movw	r1, #1414	; 0x586
 800d67e:	484e      	ldr	r0, [pc, #312]	; (800d7b8 <deserializePublish+0x170>)
 800d680:	f004 fdcc 	bl	801221c <__assert_func>
    assert( pPublishInfo != NULL );
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d106      	bne.n	800d698 <deserializePublish+0x50>
 800d68a:	4b4d      	ldr	r3, [pc, #308]	; (800d7c0 <deserializePublish+0x178>)
 800d68c:	4a49      	ldr	r2, [pc, #292]	; (800d7b4 <deserializePublish+0x16c>)
 800d68e:	f240 5187 	movw	r1, #1415	; 0x587
 800d692:	4849      	ldr	r0, [pc, #292]	; (800d7b8 <deserializePublish+0x170>)
 800d694:	f004 fdc2 	bl	801221c <__assert_func>
    assert( pIncomingPacket->pRemainingData != NULL );
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d106      	bne.n	800d6ae <deserializePublish+0x66>
 800d6a0:	4b48      	ldr	r3, [pc, #288]	; (800d7c4 <deserializePublish+0x17c>)
 800d6a2:	4a44      	ldr	r2, [pc, #272]	; (800d7b4 <deserializePublish+0x16c>)
 800d6a4:	f44f 61b1 	mov.w	r1, #1416	; 0x588
 800d6a8:	4843      	ldr	r0, [pc, #268]	; (800d7b8 <deserializePublish+0x170>)
 800d6aa:	f004 fdb7 	bl	801221c <__assert_func>

    pVariableHeader = pIncomingPacket->pRemainingData;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	685b      	ldr	r3, [r3, #4]
 800d6b2:	617b      	str	r3, [r7, #20]
    /* The flags are the lower 4 bits of the first byte in PUBLISH. */
    status = processPublishFlags( ( pIncomingPacket->type & 0x0FU ), pPublishInfo );
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	f003 030f 	and.w	r3, r3, #15
 800d6bc:	b2db      	uxtb	r3, r3
 800d6be:	6879      	ldr	r1, [r7, #4]
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7ff fdaf 	bl	800d224 <processPublishFlags>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	77fb      	strb	r3, [r7, #31]

    if( status == MQTTSuccess )
 800d6ca:	7ffb      	ldrb	r3, [r7, #31]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d109      	bne.n	800d6e4 <deserializePublish+0x9c>
        /* Sanity checks for "Remaining length". A QoS 0 PUBLISH  must have a remaining
         * length of at least 3 to accommodate topic name length (2 bytes) and topic
         * name (at least 1 byte). A QoS 1 or 2 PUBLISH must have a remaining length of
         * at least 5 for the packet identifier in addition to the topic name length and
         * topic name. */
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	6898      	ldr	r0, [r3, #8]
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	2203      	movs	r2, #3
 800d6da:	4619      	mov	r1, r3
 800d6dc:	f7ff fd81 	bl	800d1e2 <checkPublishRemainingLength>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	77fb      	strb	r3, [r7, #31]
                                              pPublishInfo->qos,
                                              MQTT_MIN_PUBLISH_REMAINING_LENGTH_QOS0 );
    }

    if( status == MQTTSuccess )
 800d6e4:	7ffb      	ldrb	r3, [r7, #31]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d118      	bne.n	800d71c <deserializePublish+0xd4>
    {
        /* Extract the topic name starting from the first byte of the variable header.
         * The topic name string starts at byte 3 in the variable header. */
        pPublishInfo->topicNameLength = UINT16_DECODE( pVariableHeader );
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	021b      	lsls	r3, r3, #8
 800d6f0:	b21a      	sxth	r2, r3
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	b21b      	sxth	r3, r3
 800d6fa:	4313      	orrs	r3, r2
 800d6fc:	b21b      	sxth	r3, r3
 800d6fe:	b29a      	uxth	r2, r3
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	811a      	strh	r2, [r3, #8]

        /* Sanity checks for topic name length and "Remaining length". The remaining
         * length must be at least as large as the variable length header. */
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	6898      	ldr	r0, [r3, #8]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	7819      	ldrb	r1, [r3, #0]
                                              pPublishInfo->qos,
                                              pPublishInfo->topicNameLength + sizeof( uint16_t ) );
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	891b      	ldrh	r3, [r3, #8]
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800d710:	3302      	adds	r3, #2
 800d712:	461a      	mov	r2, r3
 800d714:	f7ff fd65 	bl	800d1e2 <checkPublishRemainingLength>
 800d718:	4603      	mov	r3, r0
 800d71a:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800d71c:	7ffb      	ldrb	r3, [r7, #31]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d123      	bne.n	800d76a <deserializePublish+0x122>
    {
        /* Parse the topic. */
        pPublishInfo->pTopicName = ( const char * ) ( &pVariableHeader[ sizeof( uint16_t ) ] );
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	1c9a      	adds	r2, r3, #2
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	605a      	str	r2, [r3, #4]
        LogDebug( ( "Topic name length: %hu.", ( unsigned short ) pPublishInfo->topicNameLength ) );

        /* Extract the packet identifier for QoS 1 or 2 PUBLISH packets. Packet
         * identifier starts immediately after the topic name. */
        pPacketIdentifierHigh = ( const uint8_t * ) ( &pPublishInfo->pTopicName[ pPublishInfo->topicNameLength ] );
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	687a      	ldr	r2, [r7, #4]
 800d730:	8912      	ldrh	r2, [r2, #8]
 800d732:	4413      	add	r3, r2
 800d734:	61bb      	str	r3, [r7, #24]

        if( pPublishInfo->qos > MQTTQoS0 )
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	781b      	ldrb	r3, [r3, #0]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d015      	beq.n	800d76a <deserializePublish+0x122>
        {
            *pPacketId = UINT16_DECODE( pPacketIdentifierHigh );
 800d73e:	69bb      	ldr	r3, [r7, #24]
 800d740:	781b      	ldrb	r3, [r3, #0]
 800d742:	021b      	lsls	r3, r3, #8
 800d744:	b21a      	sxth	r2, r3
 800d746:	69bb      	ldr	r3, [r7, #24]
 800d748:	3301      	adds	r3, #1
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	b21b      	sxth	r3, r3
 800d74e:	4313      	orrs	r3, r2
 800d750:	b21b      	sxth	r3, r3
 800d752:	b29a      	uxth	r2, r3
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	801a      	strh	r2, [r3, #0]

            LogDebug( ( "Packet identifier %hu.",
                        ( unsigned short ) *pPacketId ) );

            /* Advance pointer two bytes to start of payload as in the QoS 0 case. */
            pPacketIdentifierHigh = &pPacketIdentifierHigh[ sizeof( uint16_t ) ];
 800d758:	69bb      	ldr	r3, [r7, #24]
 800d75a:	3302      	adds	r3, #2
 800d75c:	61bb      	str	r3, [r7, #24]

            /* Packet identifier cannot be 0. */
            if( *pPacketId == 0U )
 800d75e:	68bb      	ldr	r3, [r7, #8]
 800d760:	881b      	ldrh	r3, [r3, #0]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d101      	bne.n	800d76a <deserializePublish+0x122>
            {
                LogError( ( "Packet identifier cannot be 0." ) );
                status = MQTTBadResponse;
 800d766:	2305      	movs	r3, #5
 800d768:	77fb      	strb	r3, [r7, #31]
            }
        }
    }

    if( status == MQTTSuccess )
 800d76a:	7ffb      	ldrb	r3, [r7, #31]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d119      	bne.n	800d7a4 <deserializePublish+0x15c>
    {
        /* Calculate the length of the payload. QoS 1 or 2 PUBLISH packets contain
         * a packet identifier, but QoS 0 PUBLISH packets do not. */
        pPublishInfo->payloadLength = pIncomingPacket->remainingLength - pPublishInfo->topicNameLength - sizeof( uint16_t );
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	689b      	ldr	r3, [r3, #8]
 800d774:	687a      	ldr	r2, [r7, #4]
 800d776:	8912      	ldrh	r2, [r2, #8]
 800d778:	1a9b      	subs	r3, r3, r2
 800d77a:	1e9a      	subs	r2, r3, #2
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	611a      	str	r2, [r3, #16]

        if( pPublishInfo->qos != MQTTQoS0 )
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	781b      	ldrb	r3, [r3, #0]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d004      	beq.n	800d792 <deserializePublish+0x14a>
        {
            /* Two more bytes for the packet identifier. */
            pPublishInfo->payloadLength -= sizeof( uint16_t );
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	691b      	ldr	r3, [r3, #16]
 800d78c:	1e9a      	subs	r2, r3, #2
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	611a      	str	r2, [r3, #16]
        }

        /* Set payload if it exists. */
        pPublishInfo->pPayload = ( pPublishInfo->payloadLength != 0U ) ? pPacketIdentifierHigh : NULL;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	691b      	ldr	r3, [r3, #16]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d001      	beq.n	800d79e <deserializePublish+0x156>
 800d79a:	69bb      	ldr	r3, [r7, #24]
 800d79c:	e000      	b.n	800d7a0 <deserializePublish+0x158>
 800d79e:	2300      	movs	r3, #0
 800d7a0:	687a      	ldr	r2, [r7, #4]
 800d7a2:	60d3      	str	r3, [r2, #12]

        LogDebug( ( "Payload length %lu.",
                    ( unsigned long ) pPublishInfo->payloadLength ) );
    }

    return status;
 800d7a4:	7ffb      	ldrb	r3, [r7, #31]
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3720      	adds	r7, #32
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
 800d7ae:	bf00      	nop
 800d7b0:	08014ed4 	.word	0x08014ed4
 800d7b4:	08015594 	.word	0x08015594
 800d7b8:	08014c84 	.word	0x08014c84
 800d7bc:	08014eec 	.word	0x08014eec
 800d7c0:	08014cb8 	.word	0x08014cb8
 800d7c4:	08014f00 	.word	0x08014f00

0800d7c8 <deserializeSimpleAck>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeSimpleAck( const MQTTPacketInfo_t * pAck,
                                          uint16_t * pPacketIdentifier )
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b084      	sub	sp, #16
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	73fb      	strb	r3, [r7, #15]

    assert( pAck != NULL );
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d106      	bne.n	800d7ea <deserializeSimpleAck+0x22>
 800d7dc:	4b18      	ldr	r3, [pc, #96]	; (800d840 <deserializeSimpleAck+0x78>)
 800d7de:	4a19      	ldr	r2, [pc, #100]	; (800d844 <deserializeSimpleAck+0x7c>)
 800d7e0:	f240 51e1 	movw	r1, #1505	; 0x5e1
 800d7e4:	4818      	ldr	r0, [pc, #96]	; (800d848 <deserializeSimpleAck+0x80>)
 800d7e6:	f004 fd19 	bl	801221c <__assert_func>
    assert( pPacketIdentifier != NULL );
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d106      	bne.n	800d7fe <deserializeSimpleAck+0x36>
 800d7f0:	4b16      	ldr	r3, [pc, #88]	; (800d84c <deserializeSimpleAck+0x84>)
 800d7f2:	4a14      	ldr	r2, [pc, #80]	; (800d844 <deserializeSimpleAck+0x7c>)
 800d7f4:	f240 51e2 	movw	r1, #1506	; 0x5e2
 800d7f8:	4813      	ldr	r0, [pc, #76]	; (800d848 <deserializeSimpleAck+0x80>)
 800d7fa:	f004 fd0f 	bl	801221c <__assert_func>

    /* Check that the "Remaining length" of the received ACK is 2. */
    if( pAck->remainingLength != MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH )
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	689b      	ldr	r3, [r3, #8]
 800d802:	2b02      	cmp	r3, #2
 800d804:	d002      	beq.n	800d80c <deserializeSimpleAck+0x44>
    {
        LogError( ( "ACK does not have remaining length of %u.",
                    ( unsigned int ) MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800d806:	2305      	movs	r3, #5
 800d808:	73fb      	strb	r3, [r7, #15]
 800d80a:	e014      	b.n	800d836 <deserializeSimpleAck+0x6e>
    }
    else
    {
        /* Extract the packet identifier (third and fourth bytes) from ACK. */
        *pPacketIdentifier = UINT16_DECODE( pAck->pRemainingData );
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	021b      	lsls	r3, r3, #8
 800d814:	b21a      	sxth	r2, r3
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	685b      	ldr	r3, [r3, #4]
 800d81a:	3301      	adds	r3, #1
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	b21b      	sxth	r3, r3
 800d820:	4313      	orrs	r3, r2
 800d822:	b21b      	sxth	r3, r3
 800d824:	b29a      	uxth	r2, r3
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	801a      	strh	r2, [r3, #0]

        LogDebug( ( "Packet identifier %hu.",
                    ( unsigned short ) *pPacketIdentifier ) );

        /* Packet identifier cannot be 0. */
        if( *pPacketIdentifier == 0U )
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	881b      	ldrh	r3, [r3, #0]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d101      	bne.n	800d836 <deserializeSimpleAck+0x6e>
        {
            LogError( ( "Packet identifier cannot be 0." ) );
            status = MQTTBadResponse;
 800d832:	2305      	movs	r3, #5
 800d834:	73fb      	strb	r3, [r7, #15]
        }
    }

    return status;
 800d836:	7bfb      	ldrb	r3, [r7, #15]
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3710      	adds	r7, #16
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}
 800d840:	08014f28 	.word	0x08014f28
 800d844:	080155a8 	.word	0x080155a8
 800d848:	08014c84 	.word	0x08014c84
 800d84c:	08014eb8 	.word	0x08014eb8

0800d850 <deserializePingresp>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializePingresp( const MQTTPacketInfo_t * pPingresp )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800d858:	2300      	movs	r3, #0
 800d85a:	73fb      	strb	r3, [r7, #15]

    assert( pPingresp != NULL );
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d106      	bne.n	800d870 <deserializePingresp+0x20>
 800d862:	4b09      	ldr	r3, [pc, #36]	; (800d888 <deserializePingresp+0x38>)
 800d864:	4a09      	ldr	r2, [pc, #36]	; (800d88c <deserializePingresp+0x3c>)
 800d866:	f240 6105 	movw	r1, #1541	; 0x605
 800d86a:	4809      	ldr	r0, [pc, #36]	; (800d890 <deserializePingresp+0x40>)
 800d86c:	f004 fcd6 	bl	801221c <__assert_func>

    /* Check the "Remaining length" (second byte) of the received PINGRESP is 0. */
    if( pPingresp->remainingLength != MQTT_PACKET_PINGRESP_REMAINING_LENGTH )
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	689b      	ldr	r3, [r3, #8]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d001      	beq.n	800d87c <deserializePingresp+0x2c>
    {
        LogError( ( "PINGRESP does not have remaining length of %u.",
                    MQTT_PACKET_PINGRESP_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800d878:	2305      	movs	r3, #5
 800d87a:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800d87c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d87e:	4618      	mov	r0, r3
 800d880:	3710      	adds	r7, #16
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	08014f38 	.word	0x08014f38
 800d88c:	080155c0 	.word	0x080155c0
 800d890:	08014c84 	.word	0x08014c84

0800d894 <MQTT_SerializeConnectFixedHeader>:

uint8_t * MQTT_SerializeConnectFixedHeader( uint8_t * pIndex,
                                            const MQTTConnectInfo_t * pConnectInfo,
                                            const MQTTPublishInfo_t * pWillInfo,
                                            size_t remainingLength )
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b086      	sub	sp, #24
 800d898:	af00      	add	r7, sp, #0
 800d89a:	60f8      	str	r0, [r7, #12]
 800d89c:	60b9      	str	r1, [r7, #8]
 800d89e:	607a      	str	r2, [r7, #4]
 800d8a0:	603b      	str	r3, [r7, #0]
    uint8_t * pIndexLocal = pIndex;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	613b      	str	r3, [r7, #16]
    uint8_t connectFlags = 0U;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	75fb      	strb	r3, [r7, #23]

    /* The first byte in the CONNECT packet is the control packet type. */
    *pIndexLocal = MQTT_PACKET_TYPE_CONNECT;
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	2210      	movs	r2, #16
 800d8ae:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	613b      	str	r3, [r7, #16]

    /* The remaining length of the CONNECT packet is encoded starting from the
     * second byte. The remaining length does not include the length of the fixed
     * header or the encoding of the remaining length. */
    pIndexLocal = encodeRemainingLength( pIndexLocal, remainingLength );
 800d8b6:	6839      	ldr	r1, [r7, #0]
 800d8b8:	6938      	ldr	r0, [r7, #16]
 800d8ba:	f7ff fa57 	bl	800cd6c <encodeRemainingLength>
 800d8be:	6138      	str	r0, [r7, #16]

    /* The string "MQTT" is placed at the beginning of the CONNECT packet's variable
     * header. This string is 4 bytes long. */
    pIndexLocal = encodeString( pIndexLocal, "MQTT", 4 );
 800d8c0:	2204      	movs	r2, #4
 800d8c2:	492f      	ldr	r1, [pc, #188]	; (800d980 <MQTT_SerializeConnectFixedHeader+0xec>)
 800d8c4:	6938      	ldr	r0, [r7, #16]
 800d8c6:	f7ff fa89 	bl	800cddc <encodeString>
 800d8ca:	6138      	str	r0, [r7, #16]

    /* The MQTT protocol version is the second field of the variable header. */
    *pIndexLocal = MQTT_VERSION_3_1_1;
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	2204      	movs	r2, #4
 800d8d0:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	3301      	adds	r3, #1
 800d8d6:	613b      	str	r3, [r7, #16]

    /* Set the clean session flag if needed. */
    if( pConnectInfo->cleanSession == true )
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	781b      	ldrb	r3, [r3, #0]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d003      	beq.n	800d8e8 <MQTT_SerializeConnectFixedHeader+0x54>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_CLEAN );
 800d8e0:	7dfb      	ldrb	r3, [r7, #23]
 800d8e2:	f043 0302 	orr.w	r3, r3, #2
 800d8e6:	75fb      	strb	r3, [r7, #23]
    }

    /* Set the flags for username and password if provided. */
    if( pConnectInfo->pUserName != NULL )
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	68db      	ldr	r3, [r3, #12]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d003      	beq.n	800d8f8 <MQTT_SerializeConnectFixedHeader+0x64>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_USERNAME );
 800d8f0:	7dfb      	ldrb	r3, [r7, #23]
 800d8f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d8f6:	75fb      	strb	r3, [r7, #23]
    }

    if( pConnectInfo->pPassword != NULL )
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	695b      	ldr	r3, [r3, #20]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d003      	beq.n	800d908 <MQTT_SerializeConnectFixedHeader+0x74>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_PASSWORD );
 800d900:	7dfb      	ldrb	r3, [r7, #23]
 800d902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d906:	75fb      	strb	r3, [r7, #23]
    }

    /* Set will flag if a Last Will and Testament is provided. */
    if( pWillInfo != NULL )
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d01c      	beq.n	800d948 <MQTT_SerializeConnectFixedHeader+0xb4>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL );
 800d90e:	7dfb      	ldrb	r3, [r7, #23]
 800d910:	f043 0304 	orr.w	r3, r3, #4
 800d914:	75fb      	strb	r3, [r7, #23]

        /* Flags only need to be changed for Will QoS 1 or 2. */
        if( pWillInfo->qos == MQTTQoS1 )
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	2b01      	cmp	r3, #1
 800d91c:	d104      	bne.n	800d928 <MQTT_SerializeConnectFixedHeader+0x94>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_QOS1 );
 800d91e:	7dfb      	ldrb	r3, [r7, #23]
 800d920:	f043 0308 	orr.w	r3, r3, #8
 800d924:	75fb      	strb	r3, [r7, #23]
 800d926:	e007      	b.n	800d938 <MQTT_SerializeConnectFixedHeader+0xa4>
        }
        else if( pWillInfo->qos == MQTTQoS2 )
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	781b      	ldrb	r3, [r3, #0]
 800d92c:	2b02      	cmp	r3, #2
 800d92e:	d103      	bne.n	800d938 <MQTT_SerializeConnectFixedHeader+0xa4>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_QOS2 );
 800d930:	7dfb      	ldrb	r3, [r7, #23]
 800d932:	f043 0310 	orr.w	r3, r3, #16
 800d936:	75fb      	strb	r3, [r7, #23]
        else
        {
            /* Empty else MISRA 15.7 */
        }

        if( pWillInfo->retain == true )
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	785b      	ldrb	r3, [r3, #1]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d003      	beq.n	800d948 <MQTT_SerializeConnectFixedHeader+0xb4>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_RETAIN );
 800d940:	7dfb      	ldrb	r3, [r7, #23]
 800d942:	f043 0320 	orr.w	r3, r3, #32
 800d946:	75fb      	strb	r3, [r7, #23]
        }
    }

    *pIndexLocal = connectFlags;
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	7dfa      	ldrb	r2, [r7, #23]
 800d94c:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800d94e:	693b      	ldr	r3, [r7, #16]
 800d950:	3301      	adds	r3, #1
 800d952:	613b      	str	r3, [r7, #16]

    /* Write the 2 bytes of the keep alive interval into the CONNECT packet. */
    pIndexLocal[ 0 ] = UINT16_HIGH_BYTE( pConnectInfo->keepAliveSeconds );
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	885b      	ldrh	r3, [r3, #2]
 800d958:	0a1b      	lsrs	r3, r3, #8
 800d95a:	b29b      	uxth	r3, r3
 800d95c:	b2da      	uxtb	r2, r3
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	701a      	strb	r2, [r3, #0]
    pIndexLocal[ 1 ] = UINT16_LOW_BYTE( pConnectInfo->keepAliveSeconds );
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	885a      	ldrh	r2, [r3, #2]
 800d966:	693b      	ldr	r3, [r7, #16]
 800d968:	3301      	adds	r3, #1
 800d96a:	b2d2      	uxtb	r2, r2
 800d96c:	701a      	strb	r2, [r3, #0]
    pIndexLocal = &pIndexLocal[ 2 ];
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	3302      	adds	r3, #2
 800d972:	613b      	str	r3, [r7, #16]

    return pIndexLocal;
 800d974:	693b      	ldr	r3, [r7, #16]
}
 800d976:	4618      	mov	r0, r3
 800d978:	3718      	adds	r7, #24
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	08014f4c 	.word	0x08014f4c

0800d984 <MQTT_GetConnectPacketSize>:

MQTTStatus_t MQTT_GetConnectPacketSize( const MQTTConnectInfo_t * pConnectInfo,
                                        const MQTTPublishInfo_t * pWillInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b088      	sub	sp, #32
 800d988:	af00      	add	r7, sp, #0
 800d98a:	60f8      	str	r0, [r7, #12]
 800d98c:	60b9      	str	r1, [r7, #8]
 800d98e:	607a      	str	r2, [r7, #4]
 800d990:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d992:	2300      	movs	r3, #0
 800d994:	77fb      	strb	r3, [r7, #31]
    size_t remainingLength;

    /* The CONNECT packet will always include a 10-byte variable header. */
    size_t connectPacketSize = MQTT_PACKET_CONNECT_HEADER_SIZE;
 800d996:	230a      	movs	r3, #10
 800d998:	61bb      	str	r3, [r7, #24]

    /* Validate arguments. */
    if( ( pConnectInfo == NULL ) || ( pRemainingLength == NULL ) ||
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d005      	beq.n	800d9ac <MQTT_GetConnectPacketSize+0x28>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d002      	beq.n	800d9ac <MQTT_GetConnectPacketSize+0x28>
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d102      	bne.n	800d9b2 <MQTT_GetConnectPacketSize+0x2e>
        LogError( ( "Argument cannot be NULL: pConnectInfo=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pConnectInfo,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	77fb      	strb	r3, [r7, #31]
 800d9b0:	e04f      	b.n	800da52 <MQTT_GetConnectPacketSize+0xce>
    }
    else if( ( pConnectInfo->clientIdentifierLength == 0U ) || ( pConnectInfo->pClientIdentifier == NULL ) )
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	891b      	ldrh	r3, [r3, #8]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d003      	beq.n	800d9c2 <MQTT_GetConnectPacketSize+0x3e>
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	685b      	ldr	r3, [r3, #4]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d102      	bne.n	800d9c8 <MQTT_GetConnectPacketSize+0x44>
    {
        LogError( ( "Mqtt_GetConnectPacketSize() client identifier must be set." ) );
        status = MQTTBadParameter;
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	77fb      	strb	r3, [r7, #31]
 800d9c6:	e044      	b.n	800da52 <MQTT_GetConnectPacketSize+0xce>
    }
    else if( ( pWillInfo != NULL ) && ( pWillInfo->payloadLength > ( size_t ) UINT16_MAX ) )
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d007      	beq.n	800d9de <MQTT_GetConnectPacketSize+0x5a>
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	691b      	ldr	r3, [r3, #16]
 800d9d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9d6:	d302      	bcc.n	800d9de <MQTT_GetConnectPacketSize+0x5a>
         * packet will never be larger than 327699 bytes. */
        LogError( ( "The Will Message length must not exceed %d. "
                    "pWillInfo->payloadLength=%lu.",
                    UINT16_MAX,
                    ( unsigned long ) pWillInfo->payloadLength ) );
        status = MQTTBadParameter;
 800d9d8:	2301      	movs	r3, #1
 800d9da:	77fb      	strb	r3, [r7, #31]
 800d9dc:	e039      	b.n	800da52 <MQTT_GetConnectPacketSize+0xce>
    }
    else
    {
        /* Add the length of the client identifier. */
        connectPacketSize += pConnectInfo->clientIdentifierLength + sizeof( uint16_t );
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	891b      	ldrh	r3, [r3, #8]
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	69bb      	ldr	r3, [r7, #24]
 800d9e6:	4413      	add	r3, r2
 800d9e8:	3302      	adds	r3, #2
 800d9ea:	61bb      	str	r3, [r7, #24]

        /* Add the lengths of the will message and topic name if provided. */
        if( pWillInfo != NULL )
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d009      	beq.n	800da06 <MQTT_GetConnectPacketSize+0x82>
        {
            connectPacketSize += pWillInfo->topicNameLength + sizeof( uint16_t ) +
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	891b      	ldrh	r3, [r3, #8]
 800d9f6:	461a      	mov	r2, r3
                                 pWillInfo->payloadLength + sizeof( uint16_t );
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	691b      	ldr	r3, [r3, #16]
            connectPacketSize += pWillInfo->topicNameLength + sizeof( uint16_t ) +
 800d9fc:	441a      	add	r2, r3
 800d9fe:	69bb      	ldr	r3, [r7, #24]
 800da00:	4413      	add	r3, r2
 800da02:	3304      	adds	r3, #4
 800da04:	61bb      	str	r3, [r7, #24]
        }

        /* Add the lengths of the user name and password if provided. */
        if( pConnectInfo->pUserName != NULL )
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	68db      	ldr	r3, [r3, #12]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d006      	beq.n	800da1c <MQTT_GetConnectPacketSize+0x98>
        {
            connectPacketSize += pConnectInfo->userNameLength + sizeof( uint16_t );
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	8a1b      	ldrh	r3, [r3, #16]
 800da12:	461a      	mov	r2, r3
 800da14:	69bb      	ldr	r3, [r7, #24]
 800da16:	4413      	add	r3, r2
 800da18:	3302      	adds	r3, #2
 800da1a:	61bb      	str	r3, [r7, #24]
        }

        if( pConnectInfo->pPassword != NULL )
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	695b      	ldr	r3, [r3, #20]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d006      	beq.n	800da32 <MQTT_GetConnectPacketSize+0xae>
        {
            connectPacketSize += pConnectInfo->passwordLength + sizeof( uint16_t );
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	8b1b      	ldrh	r3, [r3, #24]
 800da28:	461a      	mov	r2, r3
 800da2a:	69bb      	ldr	r3, [r7, #24]
 800da2c:	4413      	add	r3, r2
 800da2e:	3302      	adds	r3, #2
 800da30:	61bb      	str	r3, [r7, #24]
        }

        /* At this point, the "Remaining Length" field of the MQTT CONNECT packet has
         * been calculated. */
        remainingLength = connectPacketSize;
 800da32:	69bb      	ldr	r3, [r7, #24]
 800da34:	617b      	str	r3, [r7, #20]

        /* Calculate the full size of the MQTT CONNECT packet by adding the size of
         * the "Remaining Length" field plus 1 byte for the "Packet Type" field. */
        connectPacketSize += 1U + remainingLengthEncodedSize( connectPacketSize );
 800da36:	69b8      	ldr	r0, [r7, #24]
 800da38:	f7ff f976 	bl	800cd28 <remainingLengthEncodedSize>
 800da3c:	4603      	mov	r3, r0
 800da3e:	3301      	adds	r3, #1
 800da40:	69ba      	ldr	r2, [r7, #24]
 800da42:	4413      	add	r3, r2
 800da44:	61bb      	str	r3, [r7, #24]
         * (maximum username length) 65535 + (encoded length) 2 +
         * (maximum password length) 65535 + (encoded length) 2 +
         * (packet type field length) 1 +
         * (CONNECT packet encoded length) 3 = 327699 */

        *pRemainingLength = remainingLength;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	697a      	ldr	r2, [r7, #20]
 800da4a:	601a      	str	r2, [r3, #0]
        *pPacketSize = connectPacketSize;
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	69ba      	ldr	r2, [r7, #24]
 800da50:	601a      	str	r2, [r3, #0]
        LogDebug( ( "CONNECT packet remaining length=%lu and packet size=%lu.",
                    ( unsigned long ) *pRemainingLength,
                    ( unsigned long ) *pPacketSize ) );
    }

    return status;
 800da52:	7ffb      	ldrb	r3, [r7, #31]
}
 800da54:	4618      	mov	r0, r3
 800da56:	3720      	adds	r7, #32
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <MQTT_GetSubscribePacketSize>:

MQTTStatus_t MQTT_GetSubscribePacketSize( const MQTTSubscribeInfo_t * pSubscriptionList,
                                          size_t subscriptionCount,
                                          size_t * pRemainingLength,
                                          size_t * pPacketSize )
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b088      	sub	sp, #32
 800da60:	af02      	add	r7, sp, #8
 800da62:	60f8      	str	r0, [r7, #12]
 800da64:	60b9      	str	r1, [r7, #8]
 800da66:	607a      	str	r2, [r7, #4]
 800da68:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800da6a:	2300      	movs	r3, #0
 800da6c:	75fb      	strb	r3, [r7, #23]

    /* Validate parameters. */
    if( ( pSubscriptionList == NULL ) || ( pRemainingLength == NULL ) ||
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d005      	beq.n	800da80 <MQTT_GetSubscribePacketSize+0x24>
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d002      	beq.n	800da80 <MQTT_GetSubscribePacketSize+0x24>
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d102      	bne.n	800da86 <MQTT_GetSubscribePacketSize+0x2a>
        LogError( ( "Argument cannot be NULL: pSubscriptionList=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pSubscriptionList,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800da80:	2301      	movs	r3, #1
 800da82:	75fb      	strb	r3, [r7, #23]
 800da84:	e00f      	b.n	800daa6 <MQTT_GetSubscribePacketSize+0x4a>
    }
    else if( subscriptionCount == 0U )
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d102      	bne.n	800da92 <MQTT_GetSubscribePacketSize+0x36>
    {
        LogError( ( "subscriptionCount is 0." ) );
        status = MQTTBadParameter;
 800da8c:	2301      	movs	r3, #1
 800da8e:	75fb      	strb	r3, [r7, #23]
 800da90:	e009      	b.n	800daa6 <MQTT_GetSubscribePacketSize+0x4a>
    }
    else
    {
        /* Calculate the MQTT SUBSCRIBE packet size. */
        status = calculateSubscriptionPacketSize( pSubscriptionList,
 800da92:	2300      	movs	r3, #0
 800da94:	9300      	str	r3, [sp, #0]
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	68b9      	ldr	r1, [r7, #8]
 800da9c:	68f8      	ldr	r0, [r7, #12]
 800da9e:	f7ff fca3 	bl	800d3e8 <calculateSubscriptionPacketSize>
 800daa2:	4603      	mov	r3, r0
 800daa4:	75fb      	strb	r3, [r7, #23]
                                                  pRemainingLength,
                                                  pPacketSize,
                                                  MQTT_SUBSCRIBE );
    }

    return status;
 800daa6:	7dfb      	ldrb	r3, [r7, #23]
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	3718      	adds	r7, #24
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <MQTT_SerializeSubscribeHeader>:
/*-----------------------------------------------------------*/

uint8_t * MQTT_SerializeSubscribeHeader( size_t remainingLength,
                                         uint8_t * pIndex,
                                         uint16_t packetId )
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b086      	sub	sp, #24
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	60f8      	str	r0, [r7, #12]
 800dab8:	60b9      	str	r1, [r7, #8]
 800daba:	4613      	mov	r3, r2
 800dabc:	80fb      	strh	r3, [r7, #6]
    uint8_t * pIterator = pIndex;
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	617b      	str	r3, [r7, #20]

    /* The first byte in SUBSCRIBE is the packet type. */
    *pIterator = MQTT_PACKET_TYPE_SUBSCRIBE;
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	2282      	movs	r2, #130	; 0x82
 800dac6:	701a      	strb	r2, [r3, #0]
    pIterator++;
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	3301      	adds	r3, #1
 800dacc:	617b      	str	r3, [r7, #20]

    /* Encode the "Remaining length" starting from the second byte. */
    pIterator = encodeRemainingLength( pIterator, remainingLength );
 800dace:	68f9      	ldr	r1, [r7, #12]
 800dad0:	6978      	ldr	r0, [r7, #20]
 800dad2:	f7ff f94b 	bl	800cd6c <encodeRemainingLength>
 800dad6:	6178      	str	r0, [r7, #20]

    /* Place the packet identifier into the SUBSCRIBE packet. */
    pIterator[ 0 ] = UINT16_HIGH_BYTE( packetId );
 800dad8:	88fb      	ldrh	r3, [r7, #6]
 800dada:	0a1b      	lsrs	r3, r3, #8
 800dadc:	b29b      	uxth	r3, r3
 800dade:	b2da      	uxtb	r2, r3
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	701a      	strb	r2, [r3, #0]
    pIterator[ 1 ] = UINT16_LOW_BYTE( packetId );
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	3301      	adds	r3, #1
 800dae8:	88fa      	ldrh	r2, [r7, #6]
 800daea:	b2d2      	uxtb	r2, r2
 800daec:	701a      	strb	r2, [r3, #0]
    /* Advance the pointer. */
    pIterator = &pIterator[ 2 ];
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	3302      	adds	r3, #2
 800daf2:	617b      	str	r3, [r7, #20]

    return pIterator;
 800daf4:	697b      	ldr	r3, [r7, #20]
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	3718      	adds	r7, #24
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}

0800dafe <MQTT_GetPublishPacketSize>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetPublishPacketSize( const MQTTPublishInfo_t * pPublishInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800dafe:	b580      	push	{r7, lr}
 800db00:	b086      	sub	sp, #24
 800db02:	af00      	add	r7, sp, #0
 800db04:	60f8      	str	r0, [r7, #12]
 800db06:	60b9      	str	r1, [r7, #8]
 800db08:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800db0a:	2300      	movs	r3, #0
 800db0c:	75fb      	strb	r3, [r7, #23]

    if( ( pPublishInfo == NULL ) || ( pRemainingLength == NULL ) || ( pPacketSize == NULL ) )
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d005      	beq.n	800db20 <MQTT_GetPublishPacketSize+0x22>
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d002      	beq.n	800db20 <MQTT_GetPublishPacketSize+0x22>
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d102      	bne.n	800db26 <MQTT_GetPublishPacketSize+0x28>
        LogError( ( "Argument cannot be NULL: pPublishInfo=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pPublishInfo,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800db20:	2301      	movs	r3, #1
 800db22:	75fb      	strb	r3, [r7, #23]
 800db24:	e017      	b.n	800db56 <MQTT_GetPublishPacketSize+0x58>
    }
    else if( ( pPublishInfo->pTopicName == NULL ) || ( pPublishInfo->topicNameLength == 0U ) )
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	685b      	ldr	r3, [r3, #4]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d003      	beq.n	800db36 <MQTT_GetPublishPacketSize+0x38>
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	891b      	ldrh	r3, [r3, #8]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d102      	bne.n	800db3c <MQTT_GetPublishPacketSize+0x3e>
    {
        LogError( ( "Invalid topic name for PUBLISH: pTopicName=%p, "
                    "topicNameLength=%hu.",
                    ( void * ) pPublishInfo->pTopicName,
                    ( unsigned short ) pPublishInfo->topicNameLength ) );
        status = MQTTBadParameter;
 800db36:	2301      	movs	r3, #1
 800db38:	75fb      	strb	r3, [r7, #23]
 800db3a:	e00c      	b.n	800db56 <MQTT_GetPublishPacketSize+0x58>
    }
    else
    {
        /* Calculate the "Remaining length" field and total packet size. If it exceeds
         * what is allowed in the MQTT standard, return an error. */
        if( calculatePublishPacketSize( pPublishInfo, pRemainingLength, pPacketSize ) == false )
 800db3c:	687a      	ldr	r2, [r7, #4]
 800db3e:	68b9      	ldr	r1, [r7, #8]
 800db40:	68f8      	ldr	r0, [r7, #12]
 800db42:	f7ff f98b 	bl	800ce5c <calculatePublishPacketSize>
 800db46:	4603      	mov	r3, r0
 800db48:	f083 0301 	eor.w	r3, r3, #1
 800db4c:	b2db      	uxtb	r3, r3
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d001      	beq.n	800db56 <MQTT_GetPublishPacketSize+0x58>
        {
            LogError( ( "PUBLISH packet remaining length exceeds %lu, which is the "
                        "maximum size allowed by MQTT 3.1.1.",
                        MQTT_MAX_REMAINING_LENGTH ) );
            status = MQTTBadParameter;
 800db52:	2301      	movs	r3, #1
 800db54:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800db56:	7dfb      	ldrb	r3, [r7, #23]
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3718      	adds	r7, #24
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <MQTT_SerializeAck>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_SerializeAck( const MQTTFixedBuffer_t * pFixedBuffer,
                                uint8_t packetType,
                                uint16_t packetId )
{
 800db60:	b480      	push	{r7}
 800db62:	b085      	sub	sp, #20
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	460b      	mov	r3, r1
 800db6a:	70fb      	strb	r3, [r7, #3]
 800db6c:	4613      	mov	r3, r2
 800db6e:	803b      	strh	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800db70:	2300      	movs	r3, #0
 800db72:	73fb      	strb	r3, [r7, #15]

    if( pFixedBuffer == NULL )
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d102      	bne.n	800db80 <MQTT_SerializeAck+0x20>
    {
        LogError( ( "Provided buffer is NULL." ) );
        status = MQTTBadParameter;
 800db7a:	2301      	movs	r3, #1
 800db7c:	73fb      	strb	r3, [r7, #15]
 800db7e:	e03b      	b.n	800dbf8 <MQTT_SerializeAck+0x98>
    }
    else if( pFixedBuffer->pBuffer == NULL )
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d102      	bne.n	800db8e <MQTT_SerializeAck+0x2e>
    {
        LogError( ( "pFixedBuffer->pBuffer cannot be NULL." ) );
        status = MQTTBadParameter;
 800db88:	2301      	movs	r3, #1
 800db8a:	73fb      	strb	r3, [r7, #15]
 800db8c:	e034      	b.n	800dbf8 <MQTT_SerializeAck+0x98>
    }
    /* The buffer must be able to fit 4 bytes for the packet. */
    else if( pFixedBuffer->size < MQTT_PUBLISH_ACK_PACKET_SIZE )
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	2b03      	cmp	r3, #3
 800db94:	d802      	bhi.n	800db9c <MQTT_SerializeAck+0x3c>
    {
        LogError( ( "Insufficient memory for packet." ) );
        status = MQTTNoMemory;
 800db96:	2302      	movs	r3, #2
 800db98:	73fb      	strb	r3, [r7, #15]
 800db9a:	e02d      	b.n	800dbf8 <MQTT_SerializeAck+0x98>
    }
    else if( packetId == 0U )
 800db9c:	883b      	ldrh	r3, [r7, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d102      	bne.n	800dba8 <MQTT_SerializeAck+0x48>
    {
        LogError( ( "Packet ID cannot be 0." ) );
        status = MQTTBadParameter;
 800dba2:	2301      	movs	r3, #1
 800dba4:	73fb      	strb	r3, [r7, #15]
 800dba6:	e027      	b.n	800dbf8 <MQTT_SerializeAck+0x98>
    }
    else
    {
        switch( packetType )
 800dba8:	78fb      	ldrb	r3, [r7, #3]
 800dbaa:	2b70      	cmp	r3, #112	; 0x70
 800dbac:	d009      	beq.n	800dbc2 <MQTT_SerializeAck+0x62>
 800dbae:	2b70      	cmp	r3, #112	; 0x70
 800dbb0:	dc1f      	bgt.n	800dbf2 <MQTT_SerializeAck+0x92>
 800dbb2:	2b62      	cmp	r3, #98	; 0x62
 800dbb4:	d005      	beq.n	800dbc2 <MQTT_SerializeAck+0x62>
 800dbb6:	2b62      	cmp	r3, #98	; 0x62
 800dbb8:	dc1b      	bgt.n	800dbf2 <MQTT_SerializeAck+0x92>
 800dbba:	2b40      	cmp	r3, #64	; 0x40
 800dbbc:	d001      	beq.n	800dbc2 <MQTT_SerializeAck+0x62>
 800dbbe:	2b50      	cmp	r3, #80	; 0x50
 800dbc0:	d117      	bne.n	800dbf2 <MQTT_SerializeAck+0x92>
            /* Only publish acks are serialized by the client. */
            case MQTT_PACKET_TYPE_PUBACK:
            case MQTT_PACKET_TYPE_PUBREC:
            case MQTT_PACKET_TYPE_PUBREL:
            case MQTT_PACKET_TYPE_PUBCOMP:
                pFixedBuffer->pBuffer[ 0 ] = packetType;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	78fa      	ldrb	r2, [r7, #3]
 800dbc8:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 1 ] = MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	3301      	adds	r3, #1
 800dbd0:	2202      	movs	r2, #2
 800dbd2:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 2 ] = UINT16_HIGH_BYTE( packetId );
 800dbd4:	883b      	ldrh	r3, [r7, #0]
 800dbd6:	0a1b      	lsrs	r3, r3, #8
 800dbd8:	b29a      	uxth	r2, r3
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	3302      	adds	r3, #2
 800dbe0:	b2d2      	uxtb	r2, r2
 800dbe2:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 3 ] = UINT16_LOW_BYTE( packetId );
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	3303      	adds	r3, #3
 800dbea:	883a      	ldrh	r2, [r7, #0]
 800dbec:	b2d2      	uxtb	r2, r2
 800dbee:	701a      	strb	r2, [r3, #0]
                break;
 800dbf0:	e002      	b.n	800dbf8 <MQTT_SerializeAck+0x98>

            default:
                LogError( ( "Packet type is not a publish ACK: Packet type=%02x",
                            ( unsigned int ) packetType ) );
                status = MQTTBadParameter;
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	73fb      	strb	r3, [r7, #15]
                break;
 800dbf6:	bf00      	nop
        }
    }

    return status;
 800dbf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3714      	adds	r7, #20
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc04:	4770      	bx	lr

0800dc06 <MQTT_GetPingreqPacketSize>:
}

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetPingreqPacketSize( size_t * pPacketSize )
{
 800dc06:	b480      	push	{r7}
 800dc08:	b085      	sub	sp, #20
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	73fb      	strb	r3, [r7, #15]

    if( pPacketSize == NULL )
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d102      	bne.n	800dc1e <MQTT_GetPingreqPacketSize+0x18>
    {
        LogError( ( "pPacketSize is NULL." ) );
        status = MQTTBadParameter;
 800dc18:	2301      	movs	r3, #1
 800dc1a:	73fb      	strb	r3, [r7, #15]
 800dc1c:	e002      	b.n	800dc24 <MQTT_GetPingreqPacketSize+0x1e>
    }
    else
    {
        /* MQTT PINGREQ packets always have the same size. */
        *pPacketSize = MQTT_PACKET_PINGREQ_SIZE;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2202      	movs	r2, #2
 800dc22:	601a      	str	r2, [r3, #0]
    }

    return status;
 800dc24:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3714      	adds	r7, #20
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc30:	4770      	bx	lr

0800dc32 <MQTT_SerializePingreq>:

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_SerializePingreq( const MQTTFixedBuffer_t * pFixedBuffer )
{
 800dc32:	b480      	push	{r7}
 800dc34:	b085      	sub	sp, #20
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	73fb      	strb	r3, [r7, #15]

    if( pFixedBuffer == NULL )
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d102      	bne.n	800dc4a <MQTT_SerializePingreq+0x18>
    {
        LogError( ( "pFixedBuffer is NULL." ) );
        status = MQTTBadParameter;
 800dc44:	2301      	movs	r3, #1
 800dc46:	73fb      	strb	r3, [r7, #15]
 800dc48:	e005      	b.n	800dc56 <MQTT_SerializePingreq+0x24>
    }
    else if( pFixedBuffer->pBuffer == NULL )
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d101      	bne.n	800dc56 <MQTT_SerializePingreq+0x24>
    {
        LogError( ( "pFixedBuffer->pBuffer cannot be NULL." ) );
        status = MQTTBadParameter;
 800dc52:	2301      	movs	r3, #1
 800dc54:	73fb      	strb	r3, [r7, #15]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    if( status == MQTTSuccess )
 800dc56:	7bfb      	ldrb	r3, [r7, #15]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d105      	bne.n	800dc68 <MQTT_SerializePingreq+0x36>
    {
        if( pFixedBuffer->size < MQTT_PACKET_PINGREQ_SIZE )
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	685b      	ldr	r3, [r3, #4]
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d801      	bhi.n	800dc68 <MQTT_SerializePingreq+0x36>
        {
            LogError( ( "Buffer size of %lu is not sufficient to hold "
                        "serialized PINGREQ packet of size of %lu.",
                        ( unsigned long ) pFixedBuffer->size,
                        MQTT_PACKET_PINGREQ_SIZE ) );
            status = MQTTNoMemory;
 800dc64:	2302      	movs	r3, #2
 800dc66:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( status == MQTTSuccess )
 800dc68:	7bfb      	ldrb	r3, [r7, #15]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d108      	bne.n	800dc80 <MQTT_SerializePingreq+0x4e>
    {
        /* Ping request packets are always the same. */
        pFixedBuffer->pBuffer[ 0 ] = MQTT_PACKET_TYPE_PINGREQ;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	22c0      	movs	r2, #192	; 0xc0
 800dc74:	701a      	strb	r2, [r3, #0]
        pFixedBuffer->pBuffer[ 1 ] = 0x00;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	3301      	adds	r3, #1
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	701a      	strb	r2, [r3, #0]
    }

    return status;
 800dc80:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3714      	adds	r7, #20
 800dc86:	46bd      	mov	sp, r7
 800dc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8c:	4770      	bx	lr

0800dc8e <MQTT_DeserializePublish>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_DeserializePublish( const MQTTPacketInfo_t * pIncomingPacket,
                                      uint16_t * pPacketId,
                                      MQTTPublishInfo_t * pPublishInfo )
{
 800dc8e:	b580      	push	{r7, lr}
 800dc90:	b086      	sub	sp, #24
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	60f8      	str	r0, [r7, #12]
 800dc96:	60b9      	str	r1, [r7, #8]
 800dc98:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	75fb      	strb	r3, [r7, #23]

    if( ( pIncomingPacket == NULL ) || ( pPacketId == NULL ) || ( pPublishInfo == NULL ) )
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d005      	beq.n	800dcb0 <MQTT_DeserializePublish+0x22>
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d002      	beq.n	800dcb0 <MQTT_DeserializePublish+0x22>
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d102      	bne.n	800dcb6 <MQTT_DeserializePublish+0x28>
        LogError( ( "Argument cannot be NULL: pIncomingPacket=%p, "
                    "pPacketId=%p, pPublishInfo=%p",
                    ( void * ) pIncomingPacket,
                    ( void * ) pPacketId,
                    ( void * ) pPublishInfo ) );
        status = MQTTBadParameter;
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	75fb      	strb	r3, [r7, #23]
 800dcb4:	e016      	b.n	800dce4 <MQTT_DeserializePublish+0x56>
    }
    else if( ( pIncomingPacket->type & 0xF0U ) != MQTT_PACKET_TYPE_PUBLISH )
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	781b      	ldrb	r3, [r3, #0]
 800dcba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dcbe:	2b30      	cmp	r3, #48	; 0x30
 800dcc0:	d002      	beq.n	800dcc8 <MQTT_DeserializePublish+0x3a>
    {
        LogError( ( "Packet is not publish. Packet type: %02x.",
                    ( unsigned int ) pIncomingPacket->type ) );
        status = MQTTBadParameter;
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	75fb      	strb	r3, [r7, #23]
 800dcc6:	e00d      	b.n	800dce4 <MQTT_DeserializePublish+0x56>
    }
    else if( pIncomingPacket->pRemainingData == NULL )
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	685b      	ldr	r3, [r3, #4]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d102      	bne.n	800dcd6 <MQTT_DeserializePublish+0x48>
    {
        LogError( ( "Argument cannot be NULL: "
                    "pIncomingPacket->pRemainingData is NULL." ) );
        status = MQTTBadParameter;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	75fb      	strb	r3, [r7, #23]
 800dcd4:	e006      	b.n	800dce4 <MQTT_DeserializePublish+0x56>
    }
    else
    {
        status = deserializePublish( pIncomingPacket, pPacketId, pPublishInfo );
 800dcd6:	687a      	ldr	r2, [r7, #4]
 800dcd8:	68b9      	ldr	r1, [r7, #8]
 800dcda:	68f8      	ldr	r0, [r7, #12]
 800dcdc:	f7ff fcb4 	bl	800d648 <deserializePublish>
 800dce0:	4603      	mov	r3, r0
 800dce2:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 800dce4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3718      	adds	r7, #24
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}

0800dcee <MQTT_DeserializeAck>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_DeserializeAck( const MQTTPacketInfo_t * pIncomingPacket,
                                  uint16_t * pPacketId,
                                  bool * pSessionPresent )
{
 800dcee:	b580      	push	{r7, lr}
 800dcf0:	b086      	sub	sp, #24
 800dcf2:	af00      	add	r7, sp, #0
 800dcf4:	60f8      	str	r0, [r7, #12]
 800dcf6:	60b9      	str	r1, [r7, #8]
 800dcf8:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	75fb      	strb	r3, [r7, #23]

    if( pIncomingPacket == NULL )
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d102      	bne.n	800dd0a <MQTT_DeserializeAck+0x1c>
    {
        LogError( ( "pIncomingPacket cannot be NULL." ) );
        status = MQTTBadParameter;
 800dd04:	2301      	movs	r3, #1
 800dd06:	75fb      	strb	r3, [r7, #23]
 800dd08:	e05f      	b.n	800ddca <MQTT_DeserializeAck+0xdc>
    }

    /* Pointer for packet identifier cannot be NULL for packets other than
     * CONNACK and PINGRESP. */
    else if( ( pPacketId == NULL ) &&
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d10a      	bne.n	800dd26 <MQTT_DeserializeAck+0x38>
             ( ( pIncomingPacket->type != MQTT_PACKET_TYPE_CONNACK ) &&
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	781b      	ldrb	r3, [r3, #0]
    else if( ( pPacketId == NULL ) &&
 800dd14:	2b20      	cmp	r3, #32
 800dd16:	d006      	beq.n	800dd26 <MQTT_DeserializeAck+0x38>
               ( pIncomingPacket->type != MQTT_PACKET_TYPE_PINGRESP ) ) )
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	781b      	ldrb	r3, [r3, #0]
             ( ( pIncomingPacket->type != MQTT_PACKET_TYPE_CONNACK ) &&
 800dd1c:	2bd0      	cmp	r3, #208	; 0xd0
 800dd1e:	d002      	beq.n	800dd26 <MQTT_DeserializeAck+0x38>
    {
        LogError( ( "pPacketId cannot be NULL for packet type %02x.",
                    ( unsigned int ) pIncomingPacket->type ) );
        status = MQTTBadParameter;
 800dd20:	2301      	movs	r3, #1
 800dd22:	75fb      	strb	r3, [r7, #23]
 800dd24:	e051      	b.n	800ddca <MQTT_DeserializeAck+0xdc>
    }
    /* Pointer for session present cannot be NULL for CONNACK. */
    else if( ( pSessionPresent == NULL ) &&
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d106      	bne.n	800dd3a <MQTT_DeserializeAck+0x4c>
             ( pIncomingPacket->type == MQTT_PACKET_TYPE_CONNACK ) )
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	781b      	ldrb	r3, [r3, #0]
    else if( ( pSessionPresent == NULL ) &&
 800dd30:	2b20      	cmp	r3, #32
 800dd32:	d102      	bne.n	800dd3a <MQTT_DeserializeAck+0x4c>
    {
        LogError( ( "pSessionPresent cannot be NULL for CONNACK packet." ) );
        status = MQTTBadParameter;
 800dd34:	2301      	movs	r3, #1
 800dd36:	75fb      	strb	r3, [r7, #23]
 800dd38:	e047      	b.n	800ddca <MQTT_DeserializeAck+0xdc>
    }

    /* Pointer for remaining data cannot be NULL for packets other
     * than PINGRESP. */
    else if( ( pIncomingPacket->pRemainingData == NULL ) &&
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	685b      	ldr	r3, [r3, #4]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d106      	bne.n	800dd50 <MQTT_DeserializeAck+0x62>
             ( pIncomingPacket->type != MQTT_PACKET_TYPE_PINGRESP ) )
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	781b      	ldrb	r3, [r3, #0]
    else if( ( pIncomingPacket->pRemainingData == NULL ) &&
 800dd46:	2bd0      	cmp	r3, #208	; 0xd0
 800dd48:	d002      	beq.n	800dd50 <MQTT_DeserializeAck+0x62>
    {
        LogError( ( "Remaining data of incoming packet is NULL." ) );
        status = MQTTBadParameter;
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	75fb      	strb	r3, [r7, #23]
 800dd4e:	e03c      	b.n	800ddca <MQTT_DeserializeAck+0xdc>
    }
    else
    {
        /* Make sure response packet is a valid ack. */
        switch( pIncomingPacket->type )
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	2bd0      	cmp	r3, #208	; 0xd0
 800dd56:	d028      	beq.n	800ddaa <MQTT_DeserializeAck+0xbc>
 800dd58:	2bd0      	cmp	r3, #208	; 0xd0
 800dd5a:	dc33      	bgt.n	800ddc4 <MQTT_DeserializeAck+0xd6>
 800dd5c:	2bb0      	cmp	r3, #176	; 0xb0
 800dd5e:	d02a      	beq.n	800ddb6 <MQTT_DeserializeAck+0xc8>
 800dd60:	2bb0      	cmp	r3, #176	; 0xb0
 800dd62:	dc2f      	bgt.n	800ddc4 <MQTT_DeserializeAck+0xd6>
 800dd64:	2b90      	cmp	r3, #144	; 0x90
 800dd66:	d019      	beq.n	800dd9c <MQTT_DeserializeAck+0xae>
 800dd68:	2b90      	cmp	r3, #144	; 0x90
 800dd6a:	dc2b      	bgt.n	800ddc4 <MQTT_DeserializeAck+0xd6>
 800dd6c:	2b70      	cmp	r3, #112	; 0x70
 800dd6e:	d022      	beq.n	800ddb6 <MQTT_DeserializeAck+0xc8>
 800dd70:	2b70      	cmp	r3, #112	; 0x70
 800dd72:	dc27      	bgt.n	800ddc4 <MQTT_DeserializeAck+0xd6>
 800dd74:	2b62      	cmp	r3, #98	; 0x62
 800dd76:	d01e      	beq.n	800ddb6 <MQTT_DeserializeAck+0xc8>
 800dd78:	2b62      	cmp	r3, #98	; 0x62
 800dd7a:	dc23      	bgt.n	800ddc4 <MQTT_DeserializeAck+0xd6>
 800dd7c:	2b50      	cmp	r3, #80	; 0x50
 800dd7e:	d01a      	beq.n	800ddb6 <MQTT_DeserializeAck+0xc8>
 800dd80:	2b50      	cmp	r3, #80	; 0x50
 800dd82:	dc1f      	bgt.n	800ddc4 <MQTT_DeserializeAck+0xd6>
 800dd84:	2b20      	cmp	r3, #32
 800dd86:	d002      	beq.n	800dd8e <MQTT_DeserializeAck+0xa0>
 800dd88:	2b40      	cmp	r3, #64	; 0x40
 800dd8a:	d014      	beq.n	800ddb6 <MQTT_DeserializeAck+0xc8>
 800dd8c:	e01a      	b.n	800ddc4 <MQTT_DeserializeAck+0xd6>
        {
            case MQTT_PACKET_TYPE_CONNACK:
                status = deserializeConnack( pIncomingPacket, pSessionPresent );
 800dd8e:	6879      	ldr	r1, [r7, #4]
 800dd90:	68f8      	ldr	r0, [r7, #12]
 800dd92:	f7ff fabf 	bl	800d314 <deserializeConnack>
 800dd96:	4603      	mov	r3, r0
 800dd98:	75fb      	strb	r3, [r7, #23]
                break;
 800dd9a:	e016      	b.n	800ddca <MQTT_DeserializeAck+0xdc>

            case MQTT_PACKET_TYPE_SUBACK:
                status = deserializeSuback( pIncomingPacket, pPacketId );
 800dd9c:	68b9      	ldr	r1, [r7, #8]
 800dd9e:	68f8      	ldr	r0, [r7, #12]
 800dda0:	f7ff fbfe 	bl	800d5a0 <deserializeSuback>
 800dda4:	4603      	mov	r3, r0
 800dda6:	75fb      	strb	r3, [r7, #23]
                break;
 800dda8:	e00f      	b.n	800ddca <MQTT_DeserializeAck+0xdc>

            case MQTT_PACKET_TYPE_PINGRESP:
                status = deserializePingresp( pIncomingPacket );
 800ddaa:	68f8      	ldr	r0, [r7, #12]
 800ddac:	f7ff fd50 	bl	800d850 <deserializePingresp>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	75fb      	strb	r3, [r7, #23]
                break;
 800ddb4:	e009      	b.n	800ddca <MQTT_DeserializeAck+0xdc>
            case MQTT_PACKET_TYPE_UNSUBACK:
            case MQTT_PACKET_TYPE_PUBACK:
            case MQTT_PACKET_TYPE_PUBREC:
            case MQTT_PACKET_TYPE_PUBREL:
            case MQTT_PACKET_TYPE_PUBCOMP:
                status = deserializeSimpleAck( pIncomingPacket, pPacketId );
 800ddb6:	68b9      	ldr	r1, [r7, #8]
 800ddb8:	68f8      	ldr	r0, [r7, #12]
 800ddba:	f7ff fd05 	bl	800d7c8 <deserializeSimpleAck>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	75fb      	strb	r3, [r7, #23]
                break;
 800ddc2:	e002      	b.n	800ddca <MQTT_DeserializeAck+0xdc>

            /* Any other packet type is invalid. */
            default:
                LogError( ( "IotMqtt_DeserializeResponse() called with unknown packet type:(%02x).",
                            ( unsigned int ) pIncomingPacket->type ) );
                status = MQTTBadResponse;
 800ddc4:	2305      	movs	r3, #5
 800ddc6:	75fb      	strb	r3, [r7, #23]
                break;
 800ddc8:	bf00      	nop
        }
    }

    return status;
 800ddca:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3718      	adds	r7, #24
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}

0800ddd4 <MQTT_GetIncomingPacketTypeAndLength>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetIncomingPacketTypeAndLength( TransportRecv_t readFunc,
                                                  NetworkContext_t * pNetworkContext,
                                                  MQTTPacketInfo_t * pIncomingPacket )
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b086      	sub	sp, #24
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	60f8      	str	r0, [r7, #12]
 800dddc:	60b9      	str	r1, [r7, #8]
 800ddde:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800dde0:	2300      	movs	r3, #0
 800dde2:	75fb      	strb	r3, [r7, #23]
    int32_t bytesReceived = 0;
 800dde4:	2300      	movs	r3, #0
 800dde6:	613b      	str	r3, [r7, #16]

    if( pIncomingPacket == NULL )
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d102      	bne.n	800ddf4 <MQTT_GetIncomingPacketTypeAndLength+0x20>
    {
        LogError( ( "Invalid parameter: pIncomingPacket is NULL." ) );
        status = MQTTBadParameter;
 800ddee:	2301      	movs	r3, #1
 800ddf0:	75fb      	strb	r3, [r7, #23]
 800ddf2:	e005      	b.n	800de00 <MQTT_GetIncomingPacketTypeAndLength+0x2c>
    }
    else
    {
        /* Read a single byte. */
        bytesReceived = readFunc( pNetworkContext,
                                  &( pIncomingPacket->type ),
 800ddf4:	6879      	ldr	r1, [r7, #4]
        bytesReceived = readFunc( pNetworkContext,
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	2201      	movs	r2, #1
 800ddfa:	68b8      	ldr	r0, [r7, #8]
 800ddfc:	4798      	blx	r3
 800ddfe:	6138      	str	r0, [r7, #16]
                                  1U );
    }

    if( bytesReceived == 1 )
 800de00:	693b      	ldr	r3, [r7, #16]
 800de02:	2b01      	cmp	r3, #1
 800de04:	d119      	bne.n	800de3a <MQTT_GetIncomingPacketTypeAndLength+0x66>
    {
        /* Check validity. */
        if( incomingPacketValid( pIncomingPacket->type ) == true )
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	781b      	ldrb	r3, [r3, #0]
 800de0a:	4618      	mov	r0, r3
 800de0c:	f7ff f9aa 	bl	800d164 <incomingPacketValid>
 800de10:	4603      	mov	r3, r0
 800de12:	2b00      	cmp	r3, #0
 800de14:	d00e      	beq.n	800de34 <MQTT_GetIncomingPacketTypeAndLength+0x60>
        {
            pIncomingPacket->remainingLength = getRemainingLength( readFunc,
 800de16:	68b9      	ldr	r1, [r7, #8]
 800de18:	68f8      	ldr	r0, [r7, #12]
 800de1a:	f7ff f8f0 	bl	800cffe <getRemainingLength>
 800de1e:	4602      	mov	r2, r0
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	609a      	str	r2, [r3, #8]
                                                                   pNetworkContext );

            if( pIncomingPacket->remainingLength == MQTT_REMAINING_LENGTH_INVALID )
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	689b      	ldr	r3, [r3, #8]
 800de28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800de2c:	d113      	bne.n	800de56 <MQTT_GetIncomingPacketTypeAndLength+0x82>
            {
                LogError( ( "Incoming packet remaining length invalid." ) );
                status = MQTTBadResponse;
 800de2e:	2305      	movs	r3, #5
 800de30:	75fb      	strb	r3, [r7, #23]
 800de32:	e010      	b.n	800de56 <MQTT_GetIncomingPacketTypeAndLength+0x82>
        }
        else
        {
            LogError( ( "Incoming packet invalid: Packet type=%u.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800de34:	2305      	movs	r3, #5
 800de36:	75fb      	strb	r3, [r7, #23]
 800de38:	e00d      	b.n	800de56 <MQTT_GetIncomingPacketTypeAndLength+0x82>
        }
    }
    else if( ( status != MQTTBadParameter ) && ( bytesReceived == 0 ) )
 800de3a:	7dfb      	ldrb	r3, [r7, #23]
 800de3c:	2b01      	cmp	r3, #1
 800de3e:	d005      	beq.n	800de4c <MQTT_GetIncomingPacketTypeAndLength+0x78>
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d102      	bne.n	800de4c <MQTT_GetIncomingPacketTypeAndLength+0x78>
    {
        status = MQTTNoDataAvailable;
 800de46:	2307      	movs	r3, #7
 800de48:	75fb      	strb	r3, [r7, #23]
 800de4a:	e004      	b.n	800de56 <MQTT_GetIncomingPacketTypeAndLength+0x82>
    }

    /* If the input packet was valid, then any other number of bytes received is
     * a failure. */
    else if( status != MQTTBadParameter )
 800de4c:	7dfb      	ldrb	r3, [r7, #23]
 800de4e:	2b01      	cmp	r3, #1
 800de50:	d001      	beq.n	800de56 <MQTT_GetIncomingPacketTypeAndLength+0x82>
    {
        LogError( ( "A single byte was not read from the transport: "
                    "transportStatus=%ld.",
                    ( long int ) bytesReceived ) );
        status = MQTTRecvFailed;
 800de52:	2304      	movs	r3, #4
 800de54:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    return status;
 800de56:	7dfb      	ldrb	r3, [r7, #23]
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3718      	adds	r7, #24
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <MQTT_ProcessIncomingPacketTypeAndLength>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ProcessIncomingPacketTypeAndLength( const uint8_t * pBuffer,
                                                      const size_t * pIndex,
                                                      MQTTPacketInfo_t * pIncomingPacket )
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b086      	sub	sp, #24
 800de64:	af00      	add	r7, sp, #0
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800de6c:	2300      	movs	r3, #0
 800de6e:	75fb      	strb	r3, [r7, #23]

    if( pIncomingPacket == NULL )
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d102      	bne.n	800de7c <MQTT_ProcessIncomingPacketTypeAndLength+0x1c>
    {
        LogError( ( "Invalid parameter: pIncomingPacket is NULL." ) );
        status = MQTTBadParameter;
 800de76:	2301      	movs	r3, #1
 800de78:	75fb      	strb	r3, [r7, #23]
 800de7a:	e016      	b.n	800deaa <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else if( pIndex == NULL )
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d102      	bne.n	800de88 <MQTT_ProcessIncomingPacketTypeAndLength+0x28>
    {
        LogError( ( "Invalid parameter: pIndex is NULL." ) );
        status = MQTTBadParameter;
 800de82:	2301      	movs	r3, #1
 800de84:	75fb      	strb	r3, [r7, #23]
 800de86:	e010      	b.n	800deaa <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else if( pBuffer == NULL )
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d102      	bne.n	800de94 <MQTT_ProcessIncomingPacketTypeAndLength+0x34>
    {
        LogError( ( "Invalid parameter: pBuffer is NULL." ) );
        status = MQTTBadParameter;
 800de8e:	2301      	movs	r3, #1
 800de90:	75fb      	strb	r3, [r7, #23]
 800de92:	e00a      	b.n	800deaa <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    /* There should be at least one byte in the buffer */
    else if( *pIndex < 1U )
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d102      	bne.n	800dea2 <MQTT_ProcessIncomingPacketTypeAndLength+0x42>
    {
        /* No data is available. There are 0 bytes received from the network
         * receive function. */
        status = MQTTNoDataAvailable;
 800de9c:	2307      	movs	r3, #7
 800de9e:	75fb      	strb	r3, [r7, #23]
 800dea0:	e003      	b.n	800deaa <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else
    {
        /* At least one byte is present which should be deciphered. */
        pIncomingPacket->type = pBuffer[ 0 ];
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	781a      	ldrb	r2, [r3, #0]
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	701a      	strb	r2, [r3, #0]
    }

    if( status == MQTTSuccess )
 800deaa:	7dfb      	ldrb	r3, [r7, #23]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d111      	bne.n	800ded4 <MQTT_ProcessIncomingPacketTypeAndLength+0x74>
    {
        /* Check validity. */
        if( incomingPacketValid( pIncomingPacket->type ) == true )
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	781b      	ldrb	r3, [r3, #0]
 800deb4:	4618      	mov	r0, r3
 800deb6:	f7ff f955 	bl	800d164 <incomingPacketValid>
 800deba:	4603      	mov	r3, r0
 800debc:	2b00      	cmp	r3, #0
 800debe:	d007      	beq.n	800ded0 <MQTT_ProcessIncomingPacketTypeAndLength+0x70>
        {
            status = processRemainingLength( pBuffer,
 800dec0:	687a      	ldr	r2, [r7, #4]
 800dec2:	68b9      	ldr	r1, [r7, #8]
 800dec4:	68f8      	ldr	r0, [r7, #12]
 800dec6:	f7ff f8ee 	bl	800d0a6 <processRemainingLength>
 800deca:	4603      	mov	r3, r0
 800decc:	75fb      	strb	r3, [r7, #23]
 800dece:	e001      	b.n	800ded4 <MQTT_ProcessIncomingPacketTypeAndLength+0x74>
        }
        else
        {
            LogError( ( "Incoming packet invalid: Packet type=%u.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800ded0:	2305      	movs	r3, #5
 800ded2:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800ded4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3718      	adds	r7, #24
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
	...

0800dee0 <validateTransitionPublish>:

static bool validateTransitionPublish( MQTTPublishState_t currentState,
                                       MQTTPublishState_t newState,
                                       MQTTStateOperation_t opType,
                                       MQTTQoS_t qos )
{
 800dee0:	b490      	push	{r4, r7}
 800dee2:	b084      	sub	sp, #16
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	4604      	mov	r4, r0
 800dee8:	4608      	mov	r0, r1
 800deea:	4611      	mov	r1, r2
 800deec:	461a      	mov	r2, r3
 800deee:	4623      	mov	r3, r4
 800def0:	71fb      	strb	r3, [r7, #7]
 800def2:	4603      	mov	r3, r0
 800def4:	71bb      	strb	r3, [r7, #6]
 800def6:	460b      	mov	r3, r1
 800def8:	717b      	strb	r3, [r7, #5]
 800defa:	4613      	mov	r3, r2
 800defc:	713b      	strb	r3, [r7, #4]
    bool isValid = false;
 800defe:	2300      	movs	r3, #0
 800df00:	73fb      	strb	r3, [r7, #15]

    switch( currentState )
 800df02:	79fb      	ldrb	r3, [r7, #7]
 800df04:	2b07      	cmp	r3, #7
 800df06:	d848      	bhi.n	800df9a <validateTransitionPublish+0xba>
 800df08:	a201      	add	r2, pc, #4	; (adr r2, 800df10 <validateTransitionPublish+0x30>)
 800df0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df0e:	bf00      	nop
 800df10:	0800df31 	.word	0x0800df31
 800df14:	0800df55 	.word	0x0800df55
 800df18:	0800df9b 	.word	0x0800df9b
 800df1c:	0800df9b 	.word	0x0800df9b
 800df20:	0800df9b 	.word	0x0800df9b
 800df24:	0800df9b 	.word	0x0800df9b
 800df28:	0800df7f 	.word	0x0800df7f
 800df2c:	0800df8d 	.word	0x0800df8d
    {
        case MQTTStateNull:

            /* Transitions from null occur when storing a new entry into the record. */
            if( opType == MQTT_RECEIVE )
 800df30:	797b      	ldrb	r3, [r7, #5]
 800df32:	2b01      	cmp	r3, #1
 800df34:	d133      	bne.n	800df9e <validateTransitionPublish+0xbe>
            {
                isValid = ( newState == MQTTPubAckSend ) || ( newState == MQTTPubRecSend );
 800df36:	79bb      	ldrb	r3, [r7, #6]
 800df38:	2b02      	cmp	r3, #2
 800df3a:	d002      	beq.n	800df42 <validateTransitionPublish+0x62>
 800df3c:	79bb      	ldrb	r3, [r7, #6]
 800df3e:	2b03      	cmp	r3, #3
 800df40:	d101      	bne.n	800df46 <validateTransitionPublish+0x66>
 800df42:	2301      	movs	r3, #1
 800df44:	e000      	b.n	800df48 <validateTransitionPublish+0x68>
 800df46:	2300      	movs	r3, #0
 800df48:	73fb      	strb	r3, [r7, #15]
 800df4a:	7bfb      	ldrb	r3, [r7, #15]
 800df4c:	f003 0301 	and.w	r3, r3, #1
 800df50:	73fb      	strb	r3, [r7, #15]
            }

            break;
 800df52:	e024      	b.n	800df9e <validateTransitionPublish+0xbe>

        case MQTTPublishSend:

            /* Outgoing publish. All such publishes start in this state due to
             * the reserve operation. */
            switch( qos )
 800df54:	793b      	ldrb	r3, [r7, #4]
 800df56:	2b01      	cmp	r3, #1
 800df58:	d002      	beq.n	800df60 <validateTransitionPublish+0x80>
 800df5a:	2b02      	cmp	r3, #2
 800df5c:	d007      	beq.n	800df6e <validateTransitionPublish+0x8e>
                    break;

                case MQTTQoS0:
                default:
                    /* QoS 0 is checked before calling this function. */
                    break;
 800df5e:	e00d      	b.n	800df7c <validateTransitionPublish+0x9c>
                    isValid = newState == MQTTPubAckPending;
 800df60:	79bb      	ldrb	r3, [r7, #6]
 800df62:	2b06      	cmp	r3, #6
 800df64:	bf0c      	ite	eq
 800df66:	2301      	moveq	r3, #1
 800df68:	2300      	movne	r3, #0
 800df6a:	73fb      	strb	r3, [r7, #15]
                    break;
 800df6c:	e006      	b.n	800df7c <validateTransitionPublish+0x9c>
                    isValid = newState == MQTTPubRecPending;
 800df6e:	79bb      	ldrb	r3, [r7, #6]
 800df70:	2b07      	cmp	r3, #7
 800df72:	bf0c      	ite	eq
 800df74:	2301      	moveq	r3, #1
 800df76:	2300      	movne	r3, #0
 800df78:	73fb      	strb	r3, [r7, #15]
                    break;
 800df7a:	bf00      	nop
            }

            break;
 800df7c:	e010      	b.n	800dfa0 <validateTransitionPublish+0xc0>
         * reestablished. */
        case MQTTPubAckPending:

            /* When a session is reestablished, outgoing QoS1 publishes in state
             * #MQTTPubAckPending can be resent. The state remains the same. */
            isValid = newState == MQTTPubAckPending;
 800df7e:	79bb      	ldrb	r3, [r7, #6]
 800df80:	2b06      	cmp	r3, #6
 800df82:	bf0c      	ite	eq
 800df84:	2301      	moveq	r3, #1
 800df86:	2300      	movne	r3, #0
 800df88:	73fb      	strb	r3, [r7, #15]

            break;
 800df8a:	e009      	b.n	800dfa0 <validateTransitionPublish+0xc0>

        case MQTTPubRecPending:

            /* When a session is reestablished, outgoing QoS2 publishes in state
             * #MQTTPubRecPending can be resent. The state remains the same. */
            isValid = newState == MQTTPubRecPending;
 800df8c:	79bb      	ldrb	r3, [r7, #6]
 800df8e:	2b07      	cmp	r3, #7
 800df90:	bf0c      	ite	eq
 800df92:	2301      	moveq	r3, #1
 800df94:	2300      	movne	r3, #0
 800df96:	73fb      	strb	r3, [r7, #15]

            break;
 800df98:	e002      	b.n	800dfa0 <validateTransitionPublish+0xc0>
        case MQTTPubRelPending:
        case MQTTPubRelSend:
        case MQTTPublishDone:
        default:
            /* For a PUBLISH, we should not start from any other state. */
            break;
 800df9a:	bf00      	nop
 800df9c:	e000      	b.n	800dfa0 <validateTransitionPublish+0xc0>
            break;
 800df9e:	bf00      	nop
    }

    return isValid;
 800dfa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3710      	adds	r7, #16
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bc90      	pop	{r4, r7}
 800dfaa:	4770      	bx	lr

0800dfac <validateTransitionAck>:

/*-----------------------------------------------------------*/

static bool validateTransitionAck( MQTTPublishState_t currentState,
                                   MQTTPublishState_t newState )
{
 800dfac:	b480      	push	{r7}
 800dfae:	b085      	sub	sp, #20
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	460a      	mov	r2, r1
 800dfb6:	71fb      	strb	r3, [r7, #7]
 800dfb8:	4613      	mov	r3, r2
 800dfba:	71bb      	strb	r3, [r7, #6]
    bool isValid = false;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	73fb      	strb	r3, [r7, #15]

    switch( currentState )
 800dfc0:	79fb      	ldrb	r3, [r7, #7]
 800dfc2:	3b02      	subs	r3, #2
 800dfc4:	2b07      	cmp	r3, #7
 800dfc6:	d85c      	bhi.n	800e082 <validateTransitionAck+0xd6>
 800dfc8:	a201      	add	r2, pc, #4	; (adr r2, 800dfd0 <validateTransitionAck+0x24>)
 800dfca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfce:	bf00      	nop
 800dfd0:	0800dff1 	.word	0x0800dff1
 800dfd4:	0800dfff 	.word	0x0800dfff
 800dfd8:	0800e057 	.word	0x0800e057
 800dfdc:	0800e02b 	.word	0x0800e02b
 800dfe0:	0800dff1 	.word	0x0800dff1
 800dfe4:	0800e049 	.word	0x0800e049
 800dfe8:	0800e00d 	.word	0x0800e00d
 800dfec:	0800e065 	.word	0x0800e065
    {
        case MQTTPubAckSend:
        /* Incoming publish, QoS 1. */
        case MQTTPubAckPending:
            /* Outgoing publish, QoS 1. */
            isValid = newState == MQTTPublishDone;
 800dff0:	79bb      	ldrb	r3, [r7, #6]
 800dff2:	2b0a      	cmp	r3, #10
 800dff4:	bf0c      	ite	eq
 800dff6:	2301      	moveq	r3, #1
 800dff8:	2300      	movne	r3, #0
 800dffa:	73fb      	strb	r3, [r7, #15]
            break;
 800dffc:	e042      	b.n	800e084 <validateTransitionAck+0xd8>

        case MQTTPubRecSend:
            /* Incoming publish, QoS 2. */
            isValid = newState == MQTTPubRelPending;
 800dffe:	79bb      	ldrb	r3, [r7, #6]
 800e000:	2b08      	cmp	r3, #8
 800e002:	bf0c      	ite	eq
 800e004:	2301      	moveq	r3, #1
 800e006:	2300      	movne	r3, #0
 800e008:	73fb      	strb	r3, [r7, #15]
            break;
 800e00a:	e03b      	b.n	800e084 <validateTransitionAck+0xd8>
             *    5. MQTT broker resent the un-acked publish.
             *    6. Publish is received when publish record state is in
             *       MQTTPubRelPending.
             *    7. Sending out a PUBREC will result in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPubCompSend ) ||
 800e00c:	79bb      	ldrb	r3, [r7, #6]
 800e00e:	2b05      	cmp	r3, #5
 800e010:	d002      	beq.n	800e018 <validateTransitionAck+0x6c>
 800e012:	79bb      	ldrb	r3, [r7, #6]
 800e014:	2b08      	cmp	r3, #8
 800e016:	d101      	bne.n	800e01c <validateTransitionAck+0x70>
 800e018:	2301      	movs	r3, #1
 800e01a:	e000      	b.n	800e01e <validateTransitionAck+0x72>
 800e01c:	2300      	movs	r3, #0
 800e01e:	73fb      	strb	r3, [r7, #15]
 800e020:	7bfb      	ldrb	r3, [r7, #15]
 800e022:	f003 0301 	and.w	r3, r3, #1
 800e026:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubRelPending );
            break;
 800e028:	e02c      	b.n	800e084 <validateTransitionAck+0xd8>
             *       for an incoming PUBREL.
             *    2. Reestablished an MQTT session.
             *    3. MQTT broker resent the un-acked PUBREL.
             *    4. Receiving the PUBREL again will result in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPublishDone ) ||
 800e02a:	79bb      	ldrb	r3, [r7, #6]
 800e02c:	2b0a      	cmp	r3, #10
 800e02e:	d002      	beq.n	800e036 <validateTransitionAck+0x8a>
 800e030:	79bb      	ldrb	r3, [r7, #6]
 800e032:	2b05      	cmp	r3, #5
 800e034:	d101      	bne.n	800e03a <validateTransitionAck+0x8e>
 800e036:	2301      	movs	r3, #1
 800e038:	e000      	b.n	800e03c <validateTransitionAck+0x90>
 800e03a:	2300      	movs	r3, #0
 800e03c:	73fb      	strb	r3, [r7, #15]
 800e03e:	7bfb      	ldrb	r3, [r7, #15]
 800e040:	f003 0301 	and.w	r3, r3, #1
 800e044:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubCompSend );
            break;
 800e046:	e01d      	b.n	800e084 <validateTransitionAck+0xd8>

        case MQTTPubRecPending:
            /* Outgoing publish, Qos 2. */
            isValid = newState == MQTTPubRelSend;
 800e048:	79bb      	ldrb	r3, [r7, #6]
 800e04a:	2b04      	cmp	r3, #4
 800e04c:	bf0c      	ite	eq
 800e04e:	2301      	moveq	r3, #1
 800e050:	2300      	movne	r3, #0
 800e052:	73fb      	strb	r3, [r7, #15]
            break;
 800e054:	e016      	b.n	800e084 <validateTransitionAck+0xd8>

        case MQTTPubRelSend:
            /* Outgoing publish, Qos 2. */
            isValid = newState == MQTTPubCompPending;
 800e056:	79bb      	ldrb	r3, [r7, #6]
 800e058:	2b09      	cmp	r3, #9
 800e05a:	bf0c      	ite	eq
 800e05c:	2301      	moveq	r3, #1
 800e05e:	2300      	movne	r3, #0
 800e060:	73fb      	strb	r3, [r7, #15]
            break;
 800e062:	e00f      	b.n	800e084 <validateTransitionAck+0xd8>
             *    1. A TCP connection failure happened before receiving a PUBCOMP
             *       for an outgoing PUBREL.
             *    2. An MQTT session is reestablished.
             *    3. Resending the un-acked PUBREL results in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPublishDone ) ||
 800e064:	79bb      	ldrb	r3, [r7, #6]
 800e066:	2b0a      	cmp	r3, #10
 800e068:	d002      	beq.n	800e070 <validateTransitionAck+0xc4>
 800e06a:	79bb      	ldrb	r3, [r7, #6]
 800e06c:	2b09      	cmp	r3, #9
 800e06e:	d101      	bne.n	800e074 <validateTransitionAck+0xc8>
 800e070:	2301      	movs	r3, #1
 800e072:	e000      	b.n	800e076 <validateTransitionAck+0xca>
 800e074:	2300      	movs	r3, #0
 800e076:	73fb      	strb	r3, [r7, #15]
 800e078:	7bfb      	ldrb	r3, [r7, #15]
 800e07a:	f003 0301 	and.w	r3, r3, #1
 800e07e:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubCompPending );
            break;
 800e080:	e000      	b.n	800e084 <validateTransitionAck+0xd8>
        /* If an ack was sent/received we shouldn't have been in this state. */
        case MQTTStateNull:
        /* If an ack was sent/received the record should exist. */
        default:
            /* Invalid. */
            break;
 800e082:	bf00      	nop
    }

    return isValid;
 800e084:	7bfb      	ldrb	r3, [r7, #15]
}
 800e086:	4618      	mov	r0, r3
 800e088:	3714      	adds	r7, #20
 800e08a:	46bd      	mov	sp, r7
 800e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e090:	4770      	bx	lr
 800e092:	bf00      	nop

0800e094 <isPublishOutgoing>:

/*-----------------------------------------------------------*/

static bool isPublishOutgoing( MQTTPubAckType_t packetType,
                               MQTTStateOperation_t opType )
{
 800e094:	b480      	push	{r7}
 800e096:	b085      	sub	sp, #20
 800e098:	af00      	add	r7, sp, #0
 800e09a:	4603      	mov	r3, r0
 800e09c:	460a      	mov	r2, r1
 800e09e:	71fb      	strb	r3, [r7, #7]
 800e0a0:	4613      	mov	r3, r2
 800e0a2:	71bb      	strb	r3, [r7, #6]
    bool isOutgoing = false;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	73fb      	strb	r3, [r7, #15]

    switch( packetType )
 800e0a8:	79fb      	ldrb	r3, [r7, #7]
 800e0aa:	2b03      	cmp	r3, #3
 800e0ac:	d009      	beq.n	800e0c2 <isPublishOutgoing+0x2e>
 800e0ae:	2b03      	cmp	r3, #3
 800e0b0:	dc15      	bgt.n	800e0de <isPublishOutgoing+0x4a>
 800e0b2:	2b01      	cmp	r3, #1
 800e0b4:	dc02      	bgt.n	800e0bc <isPublishOutgoing+0x28>
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	da03      	bge.n	800e0c2 <isPublishOutgoing+0x2e>
            isOutgoing = opType == MQTT_SEND;
            break;

        default:
            /* No other ack type. */
            break;
 800e0ba:	e010      	b.n	800e0de <isPublishOutgoing+0x4a>
    switch( packetType )
 800e0bc:	2b02      	cmp	r3, #2
 800e0be:	d007      	beq.n	800e0d0 <isPublishOutgoing+0x3c>
            break;
 800e0c0:	e00d      	b.n	800e0de <isPublishOutgoing+0x4a>
            isOutgoing = opType == MQTT_RECEIVE;
 800e0c2:	79bb      	ldrb	r3, [r7, #6]
 800e0c4:	2b01      	cmp	r3, #1
 800e0c6:	bf0c      	ite	eq
 800e0c8:	2301      	moveq	r3, #1
 800e0ca:	2300      	movne	r3, #0
 800e0cc:	73fb      	strb	r3, [r7, #15]
            break;
 800e0ce:	e007      	b.n	800e0e0 <isPublishOutgoing+0x4c>
            isOutgoing = opType == MQTT_SEND;
 800e0d0:	79bb      	ldrb	r3, [r7, #6]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	bf0c      	ite	eq
 800e0d6:	2301      	moveq	r3, #1
 800e0d8:	2300      	movne	r3, #0
 800e0da:	73fb      	strb	r3, [r7, #15]
            break;
 800e0dc:	e000      	b.n	800e0e0 <isPublishOutgoing+0x4c>
            break;
 800e0de:	bf00      	nop
    }

    return isOutgoing;
 800e0e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3714      	adds	r7, #20
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ec:	4770      	bx	lr
	...

0800e0f0 <findInRecord>:
static size_t findInRecord( const MQTTPubAckInfo_t * records,
                            size_t recordCount,
                            uint16_t packetId,
                            MQTTQoS_t * pQos,
                            MQTTPublishState_t * pCurrentState )
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b086      	sub	sp, #24
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	60b9      	str	r1, [r7, #8]
 800e0fa:	603b      	str	r3, [r7, #0]
 800e0fc:	4613      	mov	r3, r2
 800e0fe:	80fb      	strh	r3, [r7, #6]
    size_t index = 0;
 800e100:	2300      	movs	r3, #0
 800e102:	617b      	str	r3, [r7, #20]

    assert( packetId != MQTT_PACKET_ID_INVALID );
 800e104:	88fb      	ldrh	r3, [r7, #6]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d106      	bne.n	800e118 <findInRecord+0x28>
 800e10a:	4b1b      	ldr	r3, [pc, #108]	; (800e178 <findInRecord+0x88>)
 800e10c:	4a1b      	ldr	r2, [pc, #108]	; (800e17c <findInRecord+0x8c>)
 800e10e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800e112:	481b      	ldr	r0, [pc, #108]	; (800e180 <findInRecord+0x90>)
 800e114:	f004 f882 	bl	801221c <__assert_func>

    *pCurrentState = MQTTStateNull;
 800e118:	6a3b      	ldr	r3, [r7, #32]
 800e11a:	2200      	movs	r2, #0
 800e11c:	701a      	strb	r2, [r3, #0]

    for( index = 0; index < recordCount; index++ )
 800e11e:	2300      	movs	r3, #0
 800e120:	617b      	str	r3, [r7, #20]
 800e122:	e019      	b.n	800e158 <findInRecord+0x68>
    {
        if( records[ index ].packetId == packetId )
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	009b      	lsls	r3, r3, #2
 800e128:	68fa      	ldr	r2, [r7, #12]
 800e12a:	4413      	add	r3, r2
 800e12c:	881b      	ldrh	r3, [r3, #0]
 800e12e:	88fa      	ldrh	r2, [r7, #6]
 800e130:	429a      	cmp	r2, r3
 800e132:	d10e      	bne.n	800e152 <findInRecord+0x62>
        {
            *pQos = records[ index ].qos;
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	009b      	lsls	r3, r3, #2
 800e138:	68fa      	ldr	r2, [r7, #12]
 800e13a:	4413      	add	r3, r2
 800e13c:	789a      	ldrb	r2, [r3, #2]
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	701a      	strb	r2, [r3, #0]
            *pCurrentState = records[ index ].publishState;
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	009b      	lsls	r3, r3, #2
 800e146:	68fa      	ldr	r2, [r7, #12]
 800e148:	4413      	add	r3, r2
 800e14a:	78da      	ldrb	r2, [r3, #3]
 800e14c:	6a3b      	ldr	r3, [r7, #32]
 800e14e:	701a      	strb	r2, [r3, #0]
            break;
 800e150:	e006      	b.n	800e160 <findInRecord+0x70>
    for( index = 0; index < recordCount; index++ )
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	3301      	adds	r3, #1
 800e156:	617b      	str	r3, [r7, #20]
 800e158:	697a      	ldr	r2, [r7, #20]
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	429a      	cmp	r2, r3
 800e15e:	d3e1      	bcc.n	800e124 <findInRecord+0x34>
        }
    }

    if( index == recordCount )
 800e160:	697a      	ldr	r2, [r7, #20]
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	429a      	cmp	r2, r3
 800e166:	d102      	bne.n	800e16e <findInRecord+0x7e>
    {
        index = MQTT_INVALID_STATE_COUNT;
 800e168:	2300      	movs	r3, #0
 800e16a:	43db      	mvns	r3, r3
 800e16c:	617b      	str	r3, [r7, #20]
    }

    return index;
 800e16e:	697b      	ldr	r3, [r7, #20]
}
 800e170:	4618      	mov	r0, r3
 800e172:	3718      	adds	r7, #24
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}
 800e178:	08014f6c 	.word	0x08014f6c
 800e17c:	080155d4 	.word	0x080155d4
 800e180:	08014f90 	.word	0x08014f90

0800e184 <compactRecords>:

/*-----------------------------------------------------------*/

static void compactRecords( MQTTPubAckInfo_t * records,
                            size_t recordCount )
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b084      	sub	sp, #16
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	6039      	str	r1, [r7, #0]
    size_t index = 0;
 800e18e:	2300      	movs	r3, #0
 800e190:	60fb      	str	r3, [r7, #12]
    size_t emptyIndex = MQTT_INVALID_STATE_COUNT;
 800e192:	2300      	movs	r3, #0
 800e194:	43db      	mvns	r3, r3
 800e196:	60bb      	str	r3, [r7, #8]

    assert( records != NULL );
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d150      	bne.n	800e240 <compactRecords+0xbc>
 800e19e:	4b2d      	ldr	r3, [pc, #180]	; (800e254 <compactRecords+0xd0>)
 800e1a0:	4a2d      	ldr	r2, [pc, #180]	; (800e258 <compactRecords+0xd4>)
 800e1a2:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 800e1a6:	482d      	ldr	r0, [pc, #180]	; (800e25c <compactRecords+0xd8>)
 800e1a8:	f004 f838 	bl	801221c <__assert_func>

    /* Find the empty spots and fill those with non empty values. */
    for( ; index < recordCount; index++ )
    {
        /* Find the first empty spot. */
        if( records[ index ].packetId == MQTT_PACKET_ID_INVALID )
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	009b      	lsls	r3, r3, #2
 800e1b0:	687a      	ldr	r2, [r7, #4]
 800e1b2:	4413      	add	r3, r2
 800e1b4:	881b      	ldrh	r3, [r3, #0]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d107      	bne.n	800e1ca <compactRecords+0x46>
        {
            if( emptyIndex == MQTT_INVALID_STATE_COUNT )
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	43db      	mvns	r3, r3
 800e1be:	68ba      	ldr	r2, [r7, #8]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d13a      	bne.n	800e23a <compactRecords+0xb6>
            {
                emptyIndex = index;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	60bb      	str	r3, [r7, #8]
 800e1c8:	e037      	b.n	800e23a <compactRecords+0xb6>
            }
        }
        else
        {
            if( emptyIndex != MQTT_INVALID_STATE_COUNT )
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	43db      	mvns	r3, r3
 800e1ce:	68ba      	ldr	r2, [r7, #8]
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d032      	beq.n	800e23a <compactRecords+0xb6>
            {
                /* Copy over the contents at non empty index to empty index. */
                records[ emptyIndex ].packetId = records[ index ].packetId;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	009b      	lsls	r3, r3, #2
 800e1d8:	687a      	ldr	r2, [r7, #4]
 800e1da:	441a      	add	r2, r3
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	009b      	lsls	r3, r3, #2
 800e1e0:	6879      	ldr	r1, [r7, #4]
 800e1e2:	440b      	add	r3, r1
 800e1e4:	8812      	ldrh	r2, [r2, #0]
 800e1e6:	801a      	strh	r2, [r3, #0]
                records[ emptyIndex ].qos = records[ index ].qos;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	009b      	lsls	r3, r3, #2
 800e1ec:	687a      	ldr	r2, [r7, #4]
 800e1ee:	441a      	add	r2, r3
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	6879      	ldr	r1, [r7, #4]
 800e1f6:	440b      	add	r3, r1
 800e1f8:	7892      	ldrb	r2, [r2, #2]
 800e1fa:	709a      	strb	r2, [r3, #2]
                records[ emptyIndex ].publishState = records[ index ].publishState;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	009b      	lsls	r3, r3, #2
 800e200:	687a      	ldr	r2, [r7, #4]
 800e202:	441a      	add	r2, r3
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	009b      	lsls	r3, r3, #2
 800e208:	6879      	ldr	r1, [r7, #4]
 800e20a:	440b      	add	r3, r1
 800e20c:	78d2      	ldrb	r2, [r2, #3]
 800e20e:	70da      	strb	r2, [r3, #3]

                /* Mark the record at current non empty index as invalid. */
                records[ index ].packetId = MQTT_PACKET_ID_INVALID;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	009b      	lsls	r3, r3, #2
 800e214:	687a      	ldr	r2, [r7, #4]
 800e216:	4413      	add	r3, r2
 800e218:	2200      	movs	r2, #0
 800e21a:	801a      	strh	r2, [r3, #0]
                records[ index ].qos = MQTTQoS0;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	687a      	ldr	r2, [r7, #4]
 800e222:	4413      	add	r3, r2
 800e224:	2200      	movs	r2, #0
 800e226:	709a      	strb	r2, [r3, #2]
                records[ index ].publishState = MQTTStateNull;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	009b      	lsls	r3, r3, #2
 800e22c:	687a      	ldr	r2, [r7, #4]
 800e22e:	4413      	add	r3, r2
 800e230:	2200      	movs	r2, #0
 800e232:	70da      	strb	r2, [r3, #3]

                /* Advance the emptyIndex. */
                emptyIndex++;
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	3301      	adds	r3, #1
 800e238:	60bb      	str	r3, [r7, #8]
    for( ; index < recordCount; index++ )
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	3301      	adds	r3, #1
 800e23e:	60fb      	str	r3, [r7, #12]
 800e240:	68fa      	ldr	r2, [r7, #12]
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	429a      	cmp	r2, r3
 800e246:	d3b1      	bcc.n	800e1ac <compactRecords+0x28>
            }
        }
    }
}
 800e248:	bf00      	nop
 800e24a:	bf00      	nop
 800e24c:	3710      	adds	r7, #16
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}
 800e252:	bf00      	nop
 800e254:	08014fc0 	.word	0x08014fc0
 800e258:	080155e4 	.word	0x080155e4
 800e25c:	08014f90 	.word	0x08014f90

0800e260 <addRecord>:
static MQTTStatus_t addRecord( MQTTPubAckInfo_t * records,
                               size_t recordCount,
                               uint16_t packetId,
                               MQTTQoS_t qos,
                               MQTTPublishState_t publishState )
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b088      	sub	sp, #32
 800e264:	af00      	add	r7, sp, #0
 800e266:	60f8      	str	r0, [r7, #12]
 800e268:	60b9      	str	r1, [r7, #8]
 800e26a:	4611      	mov	r1, r2
 800e26c:	461a      	mov	r2, r3
 800e26e:	460b      	mov	r3, r1
 800e270:	80fb      	strh	r3, [r7, #6]
 800e272:	4613      	mov	r3, r2
 800e274:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTNoMemory;
 800e276:	2302      	movs	r3, #2
 800e278:	77fb      	strb	r3, [r7, #31]
    int32_t index = 0;
 800e27a:	2300      	movs	r3, #0
 800e27c:	61bb      	str	r3, [r7, #24]
    size_t availableIndex = recordCount;
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	617b      	str	r3, [r7, #20]
    bool validEntryFound = false;
 800e282:	2300      	movs	r3, #0
 800e284:	74fb      	strb	r3, [r7, #19]

    assert( packetId != MQTT_PACKET_ID_INVALID );
 800e286:	88fb      	ldrh	r3, [r7, #6]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d106      	bne.n	800e29a <addRecord+0x3a>
 800e28c:	4b32      	ldr	r3, [pc, #200]	; (800e358 <addRecord+0xf8>)
 800e28e:	4a33      	ldr	r2, [pc, #204]	; (800e35c <addRecord+0xfc>)
 800e290:	f240 2115 	movw	r1, #533	; 0x215
 800e294:	4832      	ldr	r0, [pc, #200]	; (800e360 <addRecord+0x100>)
 800e296:	f003 ffc1 	bl	801221c <__assert_func>
    assert( qos != MQTTQoS0 );
 800e29a:	797b      	ldrb	r3, [r7, #5]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d106      	bne.n	800e2ae <addRecord+0x4e>
 800e2a0:	4b30      	ldr	r3, [pc, #192]	; (800e364 <addRecord+0x104>)
 800e2a2:	4a2e      	ldr	r2, [pc, #184]	; (800e35c <addRecord+0xfc>)
 800e2a4:	f240 2116 	movw	r1, #534	; 0x216
 800e2a8:	482d      	ldr	r0, [pc, #180]	; (800e360 <addRecord+0x100>)
 800e2aa:	f003 ffb7 	bl	801221c <__assert_func>

    /* Check if we have to compact the records. This is known by checking if
     * the last spot in the array is filled. */
    if( records[ recordCount - 1U ].packetId != MQTT_PACKET_ID_INVALID )
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e2b4:	3b01      	subs	r3, #1
 800e2b6:	009b      	lsls	r3, r3, #2
 800e2b8:	68fa      	ldr	r2, [r7, #12]
 800e2ba:	4413      	add	r3, r2
 800e2bc:	881b      	ldrh	r3, [r3, #0]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d003      	beq.n	800e2ca <addRecord+0x6a>
    {
        compactRecords( records, recordCount );
 800e2c2:	68b9      	ldr	r1, [r7, #8]
 800e2c4:	68f8      	ldr	r0, [r7, #12]
 800e2c6:	f7ff ff5d 	bl	800e184 <compactRecords>

    /* Start from end so first available index will be populated.
     * Available index is always found after the last element in the records.
     * This is to make sure the relative order of the records in order to meet
     * the message ordering requirement of MQTT spec 3.1.1. */
    for( index = ( ( int32_t ) recordCount - 1 ); index >= 0; index-- )
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	3b01      	subs	r3, #1
 800e2ce:	61bb      	str	r3, [r7, #24]
 800e2d0:	e021      	b.n	800e316 <addRecord+0xb6>
    {
        /* Available index is only found after packet at the highest index. */
        if( records[ index ].packetId == MQTT_PACKET_ID_INVALID )
 800e2d2:	69bb      	ldr	r3, [r7, #24]
 800e2d4:	009b      	lsls	r3, r3, #2
 800e2d6:	68fa      	ldr	r2, [r7, #12]
 800e2d8:	4413      	add	r3, r2
 800e2da:	881b      	ldrh	r3, [r3, #0]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d108      	bne.n	800e2f2 <addRecord+0x92>
        {
            if( validEntryFound == false )
 800e2e0:	7cfb      	ldrb	r3, [r7, #19]
 800e2e2:	f083 0301 	eor.w	r3, r3, #1
 800e2e6:	b2db      	uxtb	r3, r3
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d011      	beq.n	800e310 <addRecord+0xb0>
            {
                availableIndex = ( size_t ) index;
 800e2ec:	69bb      	ldr	r3, [r7, #24]
 800e2ee:	617b      	str	r3, [r7, #20]
 800e2f0:	e00e      	b.n	800e310 <addRecord+0xb0>
            }
        }
        else
        {
            /* A non-empty spot found in the records. */
            validEntryFound = true;
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	74fb      	strb	r3, [r7, #19]

            if( records[ index ].packetId == packetId )
 800e2f6:	69bb      	ldr	r3, [r7, #24]
 800e2f8:	009b      	lsls	r3, r3, #2
 800e2fa:	68fa      	ldr	r2, [r7, #12]
 800e2fc:	4413      	add	r3, r2
 800e2fe:	881b      	ldrh	r3, [r3, #0]
 800e300:	88fa      	ldrh	r2, [r7, #6]
 800e302:	429a      	cmp	r2, r3
 800e304:	d104      	bne.n	800e310 <addRecord+0xb0>
                /* Collision. */
                LogError( ( "Collision when adding PacketID=%u at index=%d.",
                            ( unsigned int ) packetId,
                            ( int ) index ) );

                status = MQTTStateCollision;
 800e306:	2309      	movs	r3, #9
 800e308:	77fb      	strb	r3, [r7, #31]
                availableIndex = recordCount;
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	617b      	str	r3, [r7, #20]
                break;
 800e30e:	e005      	b.n	800e31c <addRecord+0xbc>
    for( index = ( ( int32_t ) recordCount - 1 ); index >= 0; index-- )
 800e310:	69bb      	ldr	r3, [r7, #24]
 800e312:	3b01      	subs	r3, #1
 800e314:	61bb      	str	r3, [r7, #24]
 800e316:	69bb      	ldr	r3, [r7, #24]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	dada      	bge.n	800e2d2 <addRecord+0x72>
            }
        }
    }

    if( availableIndex < recordCount )
 800e31c:	697a      	ldr	r2, [r7, #20]
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	429a      	cmp	r2, r3
 800e322:	d214      	bcs.n	800e34e <addRecord+0xee>
    {
        records[ availableIndex ].packetId = packetId;
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	009b      	lsls	r3, r3, #2
 800e328:	68fa      	ldr	r2, [r7, #12]
 800e32a:	4413      	add	r3, r2
 800e32c:	88fa      	ldrh	r2, [r7, #6]
 800e32e:	801a      	strh	r2, [r3, #0]
        records[ availableIndex ].qos = qos;
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	009b      	lsls	r3, r3, #2
 800e334:	68fa      	ldr	r2, [r7, #12]
 800e336:	4413      	add	r3, r2
 800e338:	797a      	ldrb	r2, [r7, #5]
 800e33a:	709a      	strb	r2, [r3, #2]
        records[ availableIndex ].publishState = publishState;
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	009b      	lsls	r3, r3, #2
 800e340:	68fa      	ldr	r2, [r7, #12]
 800e342:	4413      	add	r3, r2
 800e344:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e348:	70da      	strb	r2, [r3, #3]
        status = MQTTSuccess;
 800e34a:	2300      	movs	r3, #0
 800e34c:	77fb      	strb	r3, [r7, #31]
    }

    return status;
 800e34e:	7ffb      	ldrb	r3, [r7, #31]
}
 800e350:	4618      	mov	r0, r3
 800e352:	3720      	adds	r7, #32
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}
 800e358:	08014f6c 	.word	0x08014f6c
 800e35c:	080155f4 	.word	0x080155f4
 800e360:	08014f90 	.word	0x08014f90
 800e364:	08014fd0 	.word	0x08014fd0

0800e368 <updateRecord>:

static void updateRecord( MQTTPubAckInfo_t * records,
                          size_t recordIndex,
                          MQTTPublishState_t newState,
                          bool shouldDelete )
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b084      	sub	sp, #16
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	60f8      	str	r0, [r7, #12]
 800e370:	60b9      	str	r1, [r7, #8]
 800e372:	4611      	mov	r1, r2
 800e374:	461a      	mov	r2, r3
 800e376:	460b      	mov	r3, r1
 800e378:	71fb      	strb	r3, [r7, #7]
 800e37a:	4613      	mov	r3, r2
 800e37c:	71bb      	strb	r3, [r7, #6]
    assert( records != NULL );
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d106      	bne.n	800e392 <updateRecord+0x2a>
 800e384:	4b13      	ldr	r3, [pc, #76]	; (800e3d4 <updateRecord+0x6c>)
 800e386:	4a14      	ldr	r2, [pc, #80]	; (800e3d8 <updateRecord+0x70>)
 800e388:	f240 2152 	movw	r1, #594	; 0x252
 800e38c:	4813      	ldr	r0, [pc, #76]	; (800e3dc <updateRecord+0x74>)
 800e38e:	f003 ff45 	bl	801221c <__assert_func>

    if( shouldDelete == true )
 800e392:	79bb      	ldrb	r3, [r7, #6]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d012      	beq.n	800e3be <updateRecord+0x56>
    {
        /* Mark the record as invalid. */
        records[ recordIndex ].packetId = MQTT_PACKET_ID_INVALID;
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	009b      	lsls	r3, r3, #2
 800e39c:	68fa      	ldr	r2, [r7, #12]
 800e39e:	4413      	add	r3, r2
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	801a      	strh	r2, [r3, #0]
        records[ recordIndex ].qos = MQTTQoS0;
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	009b      	lsls	r3, r3, #2
 800e3a8:	68fa      	ldr	r2, [r7, #12]
 800e3aa:	4413      	add	r3, r2
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	709a      	strb	r2, [r3, #2]
        records[ recordIndex ].publishState = MQTTStateNull;
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	009b      	lsls	r3, r3, #2
 800e3b4:	68fa      	ldr	r2, [r7, #12]
 800e3b6:	4413      	add	r3, r2
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	70da      	strb	r2, [r3, #3]
    }
    else
    {
        records[ recordIndex ].publishState = newState;
    }
}
 800e3bc:	e005      	b.n	800e3ca <updateRecord+0x62>
        records[ recordIndex ].publishState = newState;
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	009b      	lsls	r3, r3, #2
 800e3c2:	68fa      	ldr	r2, [r7, #12]
 800e3c4:	4413      	add	r3, r2
 800e3c6:	79fa      	ldrb	r2, [r7, #7]
 800e3c8:	70da      	strb	r2, [r3, #3]
}
 800e3ca:	bf00      	nop
 800e3cc:	3710      	adds	r7, #16
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}
 800e3d2:	bf00      	nop
 800e3d4:	08014fc0 	.word	0x08014fc0
 800e3d8:	08015600 	.word	0x08015600
 800e3dc:	08014f90 	.word	0x08014f90

0800e3e0 <stateSelect>:
/*-----------------------------------------------------------*/

static uint16_t stateSelect( const MQTTContext_t * pMqttContext,
                             uint16_t searchStates,
                             MQTTStateCursor_t * pCursor )
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b088      	sub	sp, #32
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	60f8      	str	r0, [r7, #12]
 800e3e8:	460b      	mov	r3, r1
 800e3ea:	607a      	str	r2, [r7, #4]
 800e3ec:	817b      	strh	r3, [r7, #10]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	83fb      	strh	r3, [r7, #30]
    uint16_t outgoingStates = 0U;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	83bb      	strh	r3, [r7, #28]
    const MQTTPubAckInfo_t * records = NULL;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	61bb      	str	r3, [r7, #24]
    size_t maxCount;
    bool stateCheck = false;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	75fb      	strb	r3, [r7, #23]

    assert( pMqttContext != NULL );
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d106      	bne.n	800e412 <stateSelect+0x32>
 800e404:	4b43      	ldr	r3, [pc, #268]	; (800e514 <stateSelect+0x134>)
 800e406:	4a44      	ldr	r2, [pc, #272]	; (800e518 <stateSelect+0x138>)
 800e408:	f240 216d 	movw	r1, #621	; 0x26d
 800e40c:	4843      	ldr	r0, [pc, #268]	; (800e51c <stateSelect+0x13c>)
 800e40e:	f003 ff05 	bl	801221c <__assert_func>
    assert( searchStates != 0U );
 800e412:	897b      	ldrh	r3, [r7, #10]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d106      	bne.n	800e426 <stateSelect+0x46>
 800e418:	4b41      	ldr	r3, [pc, #260]	; (800e520 <stateSelect+0x140>)
 800e41a:	4a3f      	ldr	r2, [pc, #252]	; (800e518 <stateSelect+0x138>)
 800e41c:	f240 216e 	movw	r1, #622	; 0x26e
 800e420:	483e      	ldr	r0, [pc, #248]	; (800e51c <stateSelect+0x13c>)
 800e422:	f003 fefb 	bl	801221c <__assert_func>
    assert( pCursor != NULL );
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d106      	bne.n	800e43a <stateSelect+0x5a>
 800e42c:	4b3d      	ldr	r3, [pc, #244]	; (800e524 <stateSelect+0x144>)
 800e42e:	4a3a      	ldr	r2, [pc, #232]	; (800e518 <stateSelect+0x138>)
 800e430:	f240 216f 	movw	r1, #623	; 0x26f
 800e434:	4839      	ldr	r0, [pc, #228]	; (800e51c <stateSelect+0x13c>)
 800e436:	f003 fef1 	bl	801221c <__assert_func>

    /* Create a bit map with all the outgoing publish states. */
    UINT16_SET_BIT( outgoingStates, MQTTPublishSend );
 800e43a:	8bbb      	ldrh	r3, [r7, #28]
 800e43c:	f043 0302 	orr.w	r3, r3, #2
 800e440:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubAckPending );
 800e442:	8bbb      	ldrh	r3, [r7, #28]
 800e444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e448:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubRecPending );
 800e44a:	8bbb      	ldrh	r3, [r7, #28]
 800e44c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e450:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubRelSend );
 800e452:	8bbb      	ldrh	r3, [r7, #28]
 800e454:	f043 0310 	orr.w	r3, r3, #16
 800e458:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubCompPending );
 800e45a:	8bbb      	ldrh	r3, [r7, #28]
 800e45c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e460:	83bb      	strh	r3, [r7, #28]

    /* Only outgoing publish records need to be searched. */
    assert( ( outgoingStates & searchStates ) > 0U );
 800e462:	8bba      	ldrh	r2, [r7, #28]
 800e464:	897b      	ldrh	r3, [r7, #10]
 800e466:	4013      	ands	r3, r2
 800e468:	b29b      	uxth	r3, r3
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d106      	bne.n	800e47c <stateSelect+0x9c>
 800e46e:	4b2e      	ldr	r3, [pc, #184]	; (800e528 <stateSelect+0x148>)
 800e470:	4a29      	ldr	r2, [pc, #164]	; (800e518 <stateSelect+0x138>)
 800e472:	f240 2179 	movw	r1, #633	; 0x279
 800e476:	4829      	ldr	r0, [pc, #164]	; (800e51c <stateSelect+0x13c>)
 800e478:	f003 fed0 	bl	801221c <__assert_func>
    assert( ( ~outgoingStates & searchStates ) == 0U );
 800e47c:	8bbb      	ldrh	r3, [r7, #28]
 800e47e:	43da      	mvns	r2, r3
 800e480:	897b      	ldrh	r3, [r7, #10]
 800e482:	4013      	ands	r3, r2
 800e484:	2b00      	cmp	r3, #0
 800e486:	d006      	beq.n	800e496 <stateSelect+0xb6>
 800e488:	4b28      	ldr	r3, [pc, #160]	; (800e52c <stateSelect+0x14c>)
 800e48a:	4a23      	ldr	r2, [pc, #140]	; (800e518 <stateSelect+0x138>)
 800e48c:	f240 217a 	movw	r1, #634	; 0x27a
 800e490:	4822      	ldr	r0, [pc, #136]	; (800e51c <stateSelect+0x13c>)
 800e492:	f003 fec3 	bl	801221c <__assert_func>

    records = pMqttContext->outgoingPublishRecords;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	61bb      	str	r3, [r7, #24]
    maxCount = pMqttContext->outgoingPublishRecordMaxCount;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	689b      	ldr	r3, [r3, #8]
 800e4a0:	613b      	str	r3, [r7, #16]

    while( *pCursor < maxCount )
 800e4a2:	e02d      	b.n	800e500 <stateSelect+0x120>
    {
        /* Check if any of the search states are present. */
        stateCheck = UINT16_CHECK_BIT( searchStates, records[ *pCursor ].publishState );
 800e4a4:	897a      	ldrh	r2, [r7, #10]
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	009b      	lsls	r3, r3, #2
 800e4ac:	69b9      	ldr	r1, [r7, #24]
 800e4ae:	440b      	add	r3, r1
 800e4b0:	78db      	ldrb	r3, [r3, #3]
 800e4b2:	4619      	mov	r1, r3
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	408b      	lsls	r3, r1
 800e4b8:	401a      	ands	r2, r3
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	009b      	lsls	r3, r3, #2
 800e4c0:	69b9      	ldr	r1, [r7, #24]
 800e4c2:	440b      	add	r3, r1
 800e4c4:	78db      	ldrb	r3, [r3, #3]
 800e4c6:	4619      	mov	r1, r3
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	408b      	lsls	r3, r1
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	bf0c      	ite	eq
 800e4d0:	2301      	moveq	r3, #1
 800e4d2:	2300      	movne	r3, #0
 800e4d4:	75fb      	strb	r3, [r7, #23]

        if( stateCheck == true )
 800e4d6:	7dfb      	ldrb	r3, [r7, #23]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d00c      	beq.n	800e4f6 <stateSelect+0x116>
        {
            packetId = records[ *pCursor ].packetId;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	009b      	lsls	r3, r3, #2
 800e4e2:	69ba      	ldr	r2, [r7, #24]
 800e4e4:	4413      	add	r3, r2
 800e4e6:	881b      	ldrh	r3, [r3, #0]
 800e4e8:	83fb      	strh	r3, [r7, #30]
            ( *pCursor )++;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	1c5a      	adds	r2, r3, #1
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	601a      	str	r2, [r3, #0]
            break;
 800e4f4:	e009      	b.n	800e50a <stateSelect+0x12a>
        }

        ( *pCursor )++;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	1c5a      	adds	r2, r3, #1
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	601a      	str	r2, [r3, #0]
    while( *pCursor < maxCount )
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	693a      	ldr	r2, [r7, #16]
 800e506:	429a      	cmp	r2, r3
 800e508:	d8cc      	bhi.n	800e4a4 <stateSelect+0xc4>
    }

    return packetId;
 800e50a:	8bfb      	ldrh	r3, [r7, #30]
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3720      	adds	r7, #32
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	08014fe0 	.word	0x08014fe0
 800e518:	08015610 	.word	0x08015610
 800e51c:	08014f90 	.word	0x08014f90
 800e520:	08014ff8 	.word	0x08014ff8
 800e524:	0801500c 	.word	0x0801500c
 800e528:	0801501c 	.word	0x0801501c
 800e52c:	08015044 	.word	0x08015044

0800e530 <MQTT_CalculateStateAck>:
/*-----------------------------------------------------------*/

MQTTPublishState_t MQTT_CalculateStateAck( MQTTPubAckType_t packetType,
                                           MQTTStateOperation_t opType,
                                           MQTTQoS_t qos )
{
 800e530:	b480      	push	{r7}
 800e532:	b085      	sub	sp, #20
 800e534:	af00      	add	r7, sp, #0
 800e536:	4603      	mov	r3, r0
 800e538:	71fb      	strb	r3, [r7, #7]
 800e53a:	460b      	mov	r3, r1
 800e53c:	71bb      	strb	r3, [r7, #6]
 800e53e:	4613      	mov	r3, r2
 800e540:	717b      	strb	r3, [r7, #5]
    MQTTPublishState_t calculatedState = MQTTStateNull;
 800e542:	2300      	movs	r3, #0
 800e544:	73fb      	strb	r3, [r7, #15]
    /* There are more QoS2 cases than QoS1, so initialize to that. */
    bool qosValid = qos == MQTTQoS2;
 800e546:	797b      	ldrb	r3, [r7, #5]
 800e548:	2b02      	cmp	r3, #2
 800e54a:	bf0c      	ite	eq
 800e54c:	2301      	moveq	r3, #1
 800e54e:	2300      	movne	r3, #0
 800e550:	73bb      	strb	r3, [r7, #14]

    switch( packetType )
 800e552:	79fb      	ldrb	r3, [r7, #7]
 800e554:	2b03      	cmp	r3, #3
 800e556:	d827      	bhi.n	800e5a8 <MQTT_CalculateStateAck+0x78>
 800e558:	a201      	add	r2, pc, #4	; (adr r2, 800e560 <MQTT_CalculateStateAck+0x30>)
 800e55a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e55e:	bf00      	nop
 800e560:	0800e571 	.word	0x0800e571
 800e564:	0800e583 	.word	0x0800e583
 800e568:	0800e593 	.word	0x0800e593
 800e56c:	0800e5a3 	.word	0x0800e5a3
    {
        case MQTTPuback:
            qosValid = qos == MQTTQoS1;
 800e570:	797b      	ldrb	r3, [r7, #5]
 800e572:	2b01      	cmp	r3, #1
 800e574:	bf0c      	ite	eq
 800e576:	2301      	moveq	r3, #1
 800e578:	2300      	movne	r3, #0
 800e57a:	73bb      	strb	r3, [r7, #14]
            calculatedState = MQTTPublishDone;
 800e57c:	230a      	movs	r3, #10
 800e57e:	73fb      	strb	r3, [r7, #15]
            break;
 800e580:	e013      	b.n	800e5aa <MQTT_CalculateStateAck+0x7a>

        case MQTTPubrec:

            /* Incoming publish: send PUBREC, PUBREL pending.
             * Outgoing publish: receive PUBREC, send PUBREL. */
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRelPending : MQTTPubRelSend;
 800e582:	79bb      	ldrb	r3, [r7, #6]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d101      	bne.n	800e58c <MQTT_CalculateStateAck+0x5c>
 800e588:	2308      	movs	r3, #8
 800e58a:	e000      	b.n	800e58e <MQTT_CalculateStateAck+0x5e>
 800e58c:	2304      	movs	r3, #4
 800e58e:	73fb      	strb	r3, [r7, #15]
            break;
 800e590:	e00b      	b.n	800e5aa <MQTT_CalculateStateAck+0x7a>

        case MQTTPubrel:

            /* Incoming publish: receive PUBREL, send PUBCOMP.
             * Outgoing publish: send PUBREL, PUBCOMP pending. */
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubCompPending : MQTTPubCompSend;
 800e592:	79bb      	ldrb	r3, [r7, #6]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d101      	bne.n	800e59c <MQTT_CalculateStateAck+0x6c>
 800e598:	2309      	movs	r3, #9
 800e59a:	e000      	b.n	800e59e <MQTT_CalculateStateAck+0x6e>
 800e59c:	2305      	movs	r3, #5
 800e59e:	73fb      	strb	r3, [r7, #15]
            break;
 800e5a0:	e003      	b.n	800e5aa <MQTT_CalculateStateAck+0x7a>

        case MQTTPubcomp:
            calculatedState = MQTTPublishDone;
 800e5a2:	230a      	movs	r3, #10
 800e5a4:	73fb      	strb	r3, [r7, #15]
            break;
 800e5a6:	e000      	b.n	800e5aa <MQTT_CalculateStateAck+0x7a>

        default:
            /* No other ack type. */
            break;
 800e5a8:	bf00      	nop
    }

    /* Sanity check, make sure ack and QoS agree. */
    if( qosValid == false )
 800e5aa:	7bbb      	ldrb	r3, [r7, #14]
 800e5ac:	f083 0301 	eor.w	r3, r3, #1
 800e5b0:	b2db      	uxtb	r3, r3
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d001      	beq.n	800e5ba <MQTT_CalculateStateAck+0x8a>
    {
        calculatedState = MQTTStateNull;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	73fb      	strb	r3, [r7, #15]
    }

    return calculatedState;
 800e5ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3714      	adds	r7, #20
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c6:	4770      	bx	lr

0800e5c8 <updateStateAck>:
                                    size_t maxRecordCount,
                                    size_t recordIndex,
                                    uint16_t packetId,
                                    MQTTPublishState_t currentState,
                                    MQTTPublishState_t newState )
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b088      	sub	sp, #32
 800e5cc:	af02      	add	r7, sp, #8
 800e5ce:	60f8      	str	r0, [r7, #12]
 800e5d0:	60b9      	str	r1, [r7, #8]
 800e5d2:	607a      	str	r2, [r7, #4]
 800e5d4:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTIllegalState;
 800e5d6:	2308      	movs	r3, #8
 800e5d8:	75fb      	strb	r3, [r7, #23]
    bool shouldDeleteRecord = false;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	75bb      	strb	r3, [r7, #22]
    bool isTransitionValid = false;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	757b      	strb	r3, [r7, #21]

    assert( records != NULL );
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d106      	bne.n	800e5f6 <updateStateAck+0x2e>
 800e5e8:	4b22      	ldr	r3, [pc, #136]	; (800e674 <updateStateAck+0xac>)
 800e5ea:	4a23      	ldr	r2, [pc, #140]	; (800e678 <updateStateAck+0xb0>)
 800e5ec:	f240 21cf 	movw	r1, #719	; 0x2cf
 800e5f0:	4822      	ldr	r0, [pc, #136]	; (800e67c <updateStateAck+0xb4>)
 800e5f2:	f003 fe13 	bl	801221c <__assert_func>

    /* Record to be deleted if the state transition is completed or if a PUBREC
     * is received for an outgoing QoS2 publish. When a PUBREC is received,
     * record is deleted and added back to the end of the records to maintain
     * ordering for PUBRELs. */
    shouldDeleteRecord = ( newState == MQTTPublishDone ) || ( newState == MQTTPubRelSend );
 800e5f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e5fa:	2b0a      	cmp	r3, #10
 800e5fc:	d003      	beq.n	800e606 <updateStateAck+0x3e>
 800e5fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e602:	2b04      	cmp	r3, #4
 800e604:	d101      	bne.n	800e60a <updateStateAck+0x42>
 800e606:	2301      	movs	r3, #1
 800e608:	e000      	b.n	800e60c <updateStateAck+0x44>
 800e60a:	2300      	movs	r3, #0
 800e60c:	75bb      	strb	r3, [r7, #22]
 800e60e:	7dbb      	ldrb	r3, [r7, #22]
 800e610:	f003 0301 	and.w	r3, r3, #1
 800e614:	75bb      	strb	r3, [r7, #22]
    isTransitionValid = validateTransitionAck( currentState, newState );
 800e616:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800e61a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e61e:	4611      	mov	r1, r2
 800e620:	4618      	mov	r0, r3
 800e622:	f7ff fcc3 	bl	800dfac <validateTransitionAck>
 800e626:	4603      	mov	r3, r0
 800e628:	757b      	strb	r3, [r7, #21]

    if( isTransitionValid == true )
 800e62a:	7d7b      	ldrb	r3, [r7, #21]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d01c      	beq.n	800e66a <updateStateAck+0xa2>
    {
        status = MQTTSuccess;
 800e630:	2300      	movs	r3, #0
 800e632:	75fb      	strb	r3, [r7, #23]

        /* Update record for acks. When sending or receiving acks for packets that
         * are resent during a session reestablishment, the new state and
         * current state can be the same. No update of record required in that case. */
        if( currentState != newState )
 800e634:	f897 2020 	ldrb.w	r2, [r7, #32]
 800e638:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d014      	beq.n	800e66a <updateStateAck+0xa2>
        {
            updateRecord( records,
 800e640:	7dbb      	ldrb	r3, [r7, #22]
 800e642:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800e646:	6879      	ldr	r1, [r7, #4]
 800e648:	68f8      	ldr	r0, [r7, #12]
 800e64a:	f7ff fe8d 	bl	800e368 <updateRecord>

            /* For QoS2 messages, in order to preserve the message ordering, when
             * a PUBREC is received for an outgoing publish, the record should be
             * moved to the last. This move will help preserve the order in which
             * a PUBREL needs to be resent in case of a session reestablishment. */
            if( newState == MQTTPubRelSend )
 800e64e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e652:	2b04      	cmp	r3, #4
 800e654:	d109      	bne.n	800e66a <updateStateAck+0xa2>
            {
                status = addRecord( records,
 800e656:	887a      	ldrh	r2, [r7, #2]
 800e658:	2304      	movs	r3, #4
 800e65a:	9300      	str	r3, [sp, #0]
 800e65c:	2302      	movs	r3, #2
 800e65e:	68b9      	ldr	r1, [r7, #8]
 800e660:	68f8      	ldr	r0, [r7, #12]
 800e662:	f7ff fdfd 	bl	800e260 <addRecord>
 800e666:	4603      	mov	r3, r0
 800e668:	75fb      	strb	r3, [r7, #23]
        LogError( ( "Invalid transition from state %s to state %s.",
                    MQTT_State_strerror( currentState ),
                    MQTT_State_strerror( newState ) ) );
    }

    return status;
 800e66a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3718      	adds	r7, #24
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}
 800e674:	08014fc0 	.word	0x08014fc0
 800e678:	0801561c 	.word	0x0801561c
 800e67c:	08014f90 	.word	0x08014f90

0800e680 <updateStatePublish>:
                                        uint16_t packetId,
                                        MQTTStateOperation_t opType,
                                        MQTTQoS_t qos,
                                        MQTTPublishState_t currentState,
                                        MQTTPublishState_t newState )
{
 800e680:	b590      	push	{r4, r7, lr}
 800e682:	b089      	sub	sp, #36	; 0x24
 800e684:	af02      	add	r7, sp, #8
 800e686:	60f8      	str	r0, [r7, #12]
 800e688:	60b9      	str	r1, [r7, #8]
 800e68a:	4611      	mov	r1, r2
 800e68c:	461a      	mov	r2, r3
 800e68e:	460b      	mov	r3, r1
 800e690:	80fb      	strh	r3, [r7, #6]
 800e692:	4613      	mov	r3, r2
 800e694:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTSuccess;
 800e696:	2300      	movs	r3, #0
 800e698:	75fb      	strb	r3, [r7, #23]
    bool isTransitionValid = false;
 800e69a:	2300      	movs	r3, #0
 800e69c:	75bb      	strb	r3, [r7, #22]

    assert( pMqttContext != NULL );
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d106      	bne.n	800e6b2 <updateStatePublish+0x32>
 800e6a4:	4b29      	ldr	r3, [pc, #164]	; (800e74c <updateStatePublish+0xcc>)
 800e6a6:	4a2a      	ldr	r2, [pc, #168]	; (800e750 <updateStatePublish+0xd0>)
 800e6a8:	f44f 7143 	mov.w	r1, #780	; 0x30c
 800e6ac:	4829      	ldr	r0, [pc, #164]	; (800e754 <updateStatePublish+0xd4>)
 800e6ae:	f003 fdb5 	bl	801221c <__assert_func>
    assert( packetId != MQTT_PACKET_ID_INVALID );
 800e6b2:	88fb      	ldrh	r3, [r7, #6]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d106      	bne.n	800e6c6 <updateStatePublish+0x46>
 800e6b8:	4b27      	ldr	r3, [pc, #156]	; (800e758 <updateStatePublish+0xd8>)
 800e6ba:	4a25      	ldr	r2, [pc, #148]	; (800e750 <updateStatePublish+0xd0>)
 800e6bc:	f240 310d 	movw	r1, #781	; 0x30d
 800e6c0:	4824      	ldr	r0, [pc, #144]	; (800e754 <updateStatePublish+0xd4>)
 800e6c2:	f003 fdab 	bl	801221c <__assert_func>
    assert( qos != MQTTQoS0 );
 800e6c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d106      	bne.n	800e6dc <updateStatePublish+0x5c>
 800e6ce:	4b23      	ldr	r3, [pc, #140]	; (800e75c <updateStatePublish+0xdc>)
 800e6d0:	4a1f      	ldr	r2, [pc, #124]	; (800e750 <updateStatePublish+0xd0>)
 800e6d2:	f240 310e 	movw	r1, #782	; 0x30e
 800e6d6:	481f      	ldr	r0, [pc, #124]	; (800e754 <updateStatePublish+0xd4>)
 800e6d8:	f003 fda0 	bl	801221c <__assert_func>

    /* This will always succeed for an incoming publish. This is due to the fact
     * that the passed in currentState must be MQTTStateNull, since
     * #MQTT_UpdateStatePublish does not perform a lookup for receives. */
    isTransitionValid = validateTransitionPublish( currentState, newState, opType, qos );
 800e6dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e6e0:	797a      	ldrb	r2, [r7, #5]
 800e6e2:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800e6e6:	f897 002c 	ldrb.w	r0, [r7, #44]	; 0x2c
 800e6ea:	f7ff fbf9 	bl	800dee0 <validateTransitionPublish>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	75bb      	strb	r3, [r7, #22]

    if( isTransitionValid == true )
 800e6f2:	7dbb      	ldrb	r3, [r7, #22]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d021      	beq.n	800e73c <updateStatePublish+0xbc>
    {
        /* addRecord will check for collisions. */
        if( opType == MQTT_RECEIVE )
 800e6f8:	797b      	ldrb	r3, [r7, #5]
 800e6fa:	2b01      	cmp	r3, #1
 800e6fc:	d10f      	bne.n	800e71e <updateStatePublish+0x9e>
        {
            status = addRecord( pMqttContext->incomingPublishRecords,
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	6858      	ldr	r0, [r3, #4]
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	68d9      	ldr	r1, [r3, #12]
 800e706:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 800e70a:	88fa      	ldrh	r2, [r7, #6]
 800e70c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e710:	9300      	str	r3, [sp, #0]
 800e712:	4623      	mov	r3, r4
 800e714:	f7ff fda4 	bl	800e260 <addRecord>
 800e718:	4603      	mov	r3, r0
 800e71a:	75fb      	strb	r3, [r7, #23]
 800e71c:	e010      	b.n	800e740 <updateStatePublish+0xc0>
        /* Send operation. */
        else
        {
            /* Skip updating record when publish is resend and no state
             * update is required. */
            if( currentState != newState )
 800e71e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e722:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e726:	429a      	cmp	r2, r3
 800e728:	d00a      	beq.n	800e740 <updateStatePublish+0xc0>
            {
                updateRecord( pMqttContext->outgoingPublishRecords,
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	6818      	ldr	r0, [r3, #0]
 800e72e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800e732:	2300      	movs	r3, #0
 800e734:	68b9      	ldr	r1, [r7, #8]
 800e736:	f7ff fe17 	bl	800e368 <updateRecord>
 800e73a:	e001      	b.n	800e740 <updateStatePublish+0xc0>
            }
        }
    }
    else
    {
        status = MQTTIllegalState;
 800e73c:	2308      	movs	r3, #8
 800e73e:	75fb      	strb	r3, [r7, #23]
        LogError( ( "Invalid transition from state %s to state %s.",
                    MQTT_State_strerror( currentState ),
                    MQTT_State_strerror( newState ) ) );
    }

    return status;
 800e740:	7dfb      	ldrb	r3, [r7, #23]
}
 800e742:	4618      	mov	r0, r3
 800e744:	371c      	adds	r7, #28
 800e746:	46bd      	mov	sp, r7
 800e748:	bd90      	pop	{r4, r7, pc}
 800e74a:	bf00      	nop
 800e74c:	08014fe0 	.word	0x08014fe0
 800e750:	0801562c 	.word	0x0801562c
 800e754:	08014f90 	.word	0x08014f90
 800e758:	08014f6c 	.word	0x08014f6c
 800e75c:	08014fd0 	.word	0x08014fd0

0800e760 <MQTT_ReserveState>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ReserveState( const MQTTContext_t * pMqttContext,
                                uint16_t packetId,
                                MQTTQoS_t qos )
{
 800e760:	b590      	push	{r4, r7, lr}
 800e762:	b087      	sub	sp, #28
 800e764:	af02      	add	r7, sp, #8
 800e766:	6078      	str	r0, [r7, #4]
 800e768:	460b      	mov	r3, r1
 800e76a:	807b      	strh	r3, [r7, #2]
 800e76c:	4613      	mov	r3, r2
 800e76e:	707b      	strb	r3, [r7, #1]
    MQTTStatus_t status = MQTTSuccess;
 800e770:	2300      	movs	r3, #0
 800e772:	73fb      	strb	r3, [r7, #15]

    if( qos == MQTTQoS0 )
 800e774:	787b      	ldrb	r3, [r7, #1]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d102      	bne.n	800e780 <MQTT_ReserveState+0x20>
    {
        status = MQTTSuccess;
 800e77a:	2300      	movs	r3, #0
 800e77c:	73fb      	strb	r3, [r7, #15]
 800e77e:	e014      	b.n	800e7aa <MQTT_ReserveState+0x4a>
    }
    else if( ( packetId == MQTT_PACKET_ID_INVALID ) || ( pMqttContext == NULL ) )
 800e780:	887b      	ldrh	r3, [r7, #2]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d002      	beq.n	800e78c <MQTT_ReserveState+0x2c>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d102      	bne.n	800e792 <MQTT_ReserveState+0x32>
    {
        status = MQTTBadParameter;
 800e78c:	2301      	movs	r3, #1
 800e78e:	73fb      	strb	r3, [r7, #15]
 800e790:	e00b      	b.n	800e7aa <MQTT_ReserveState+0x4a>
    }
    else
    {
        /* Collisions are detected when adding the record. */
        status = addRecord( pMqttContext->outgoingPublishRecords,
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6818      	ldr	r0, [r3, #0]
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6899      	ldr	r1, [r3, #8]
 800e79a:	787b      	ldrb	r3, [r7, #1]
 800e79c:	887a      	ldrh	r2, [r7, #2]
 800e79e:	2401      	movs	r4, #1
 800e7a0:	9400      	str	r4, [sp, #0]
 800e7a2:	f7ff fd5d 	bl	800e260 <addRecord>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	73fb      	strb	r3, [r7, #15]
                            packetId,
                            qos,
                            MQTTPublishSend );
    }

    return status;
 800e7aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3714      	adds	r7, #20
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd90      	pop	{r4, r7, pc}

0800e7b4 <MQTT_CalculateStatePublish>:

/*-----------------------------------------------------------*/

MQTTPublishState_t MQTT_CalculateStatePublish( MQTTStateOperation_t opType,
                                               MQTTQoS_t qos )
{
 800e7b4:	b480      	push	{r7}
 800e7b6:	b085      	sub	sp, #20
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	460a      	mov	r2, r1
 800e7be:	71fb      	strb	r3, [r7, #7]
 800e7c0:	4613      	mov	r3, r2
 800e7c2:	71bb      	strb	r3, [r7, #6]
    MQTTPublishState_t calculatedState = MQTTStateNull;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	73fb      	strb	r3, [r7, #15]

    switch( qos )
 800e7c8:	79bb      	ldrb	r3, [r7, #6]
 800e7ca:	2b02      	cmp	r3, #2
 800e7cc:	d011      	beq.n	800e7f2 <MQTT_CalculateStatePublish+0x3e>
 800e7ce:	2b02      	cmp	r3, #2
 800e7d0:	dc17      	bgt.n	800e802 <MQTT_CalculateStatePublish+0x4e>
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d002      	beq.n	800e7dc <MQTT_CalculateStatePublish+0x28>
 800e7d6:	2b01      	cmp	r3, #1
 800e7d8:	d003      	beq.n	800e7e2 <MQTT_CalculateStatePublish+0x2e>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRecPending : MQTTPubRecSend;
            break;

        default:
            /* No other QoS values. */
            break;
 800e7da:	e012      	b.n	800e802 <MQTT_CalculateStatePublish+0x4e>
            calculatedState = MQTTPublishDone;
 800e7dc:	230a      	movs	r3, #10
 800e7de:	73fb      	strb	r3, [r7, #15]
            break;
 800e7e0:	e010      	b.n	800e804 <MQTT_CalculateStatePublish+0x50>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubAckPending : MQTTPubAckSend;
 800e7e2:	79fb      	ldrb	r3, [r7, #7]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d101      	bne.n	800e7ec <MQTT_CalculateStatePublish+0x38>
 800e7e8:	2306      	movs	r3, #6
 800e7ea:	e000      	b.n	800e7ee <MQTT_CalculateStatePublish+0x3a>
 800e7ec:	2302      	movs	r3, #2
 800e7ee:	73fb      	strb	r3, [r7, #15]
            break;
 800e7f0:	e008      	b.n	800e804 <MQTT_CalculateStatePublish+0x50>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRecPending : MQTTPubRecSend;
 800e7f2:	79fb      	ldrb	r3, [r7, #7]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d101      	bne.n	800e7fc <MQTT_CalculateStatePublish+0x48>
 800e7f8:	2307      	movs	r3, #7
 800e7fa:	e000      	b.n	800e7fe <MQTT_CalculateStatePublish+0x4a>
 800e7fc:	2303      	movs	r3, #3
 800e7fe:	73fb      	strb	r3, [r7, #15]
            break;
 800e800:	e000      	b.n	800e804 <MQTT_CalculateStatePublish+0x50>
            break;
 800e802:	bf00      	nop
    }

    return calculatedState;
 800e804:	7bfb      	ldrb	r3, [r7, #15]
}
 800e806:	4618      	mov	r0, r3
 800e808:	3714      	adds	r7, #20
 800e80a:	46bd      	mov	sp, r7
 800e80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e810:	4770      	bx	lr

0800e812 <MQTT_UpdateStatePublish>:
MQTTStatus_t MQTT_UpdateStatePublish( const MQTTContext_t * pMqttContext,
                                      uint16_t packetId,
                                      MQTTStateOperation_t opType,
                                      MQTTQoS_t qos,
                                      MQTTPublishState_t * pNewState )
{
 800e812:	b590      	push	{r4, r7, lr}
 800e814:	b08b      	sub	sp, #44	; 0x2c
 800e816:	af04      	add	r7, sp, #16
 800e818:	6078      	str	r0, [r7, #4]
 800e81a:	4608      	mov	r0, r1
 800e81c:	4611      	mov	r1, r2
 800e81e:	461a      	mov	r2, r3
 800e820:	4603      	mov	r3, r0
 800e822:	807b      	strh	r3, [r7, #2]
 800e824:	460b      	mov	r3, r1
 800e826:	707b      	strb	r3, [r7, #1]
 800e828:	4613      	mov	r3, r2
 800e82a:	703b      	strb	r3, [r7, #0]
    MQTTPublishState_t newState = MQTTStateNull;
 800e82c:	2300      	movs	r3, #0
 800e82e:	73fb      	strb	r3, [r7, #15]
    MQTTPublishState_t currentState = MQTTStateNull;
 800e830:	2300      	movs	r3, #0
 800e832:	73bb      	strb	r3, [r7, #14]
    MQTTStatus_t mqttStatus = MQTTSuccess;
 800e834:	2300      	movs	r3, #0
 800e836:	75fb      	strb	r3, [r7, #23]
    size_t recordIndex = MQTT_INVALID_STATE_COUNT;
 800e838:	2300      	movs	r3, #0
 800e83a:	43db      	mvns	r3, r3
 800e83c:	613b      	str	r3, [r7, #16]
    MQTTQoS_t foundQoS = MQTTQoS0;
 800e83e:	2300      	movs	r3, #0
 800e840:	737b      	strb	r3, [r7, #13]

    if( ( pMqttContext == NULL ) || ( pNewState == NULL ) )
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d002      	beq.n	800e84e <MQTT_UpdateStatePublish+0x3c>
 800e848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d102      	bne.n	800e854 <MQTT_UpdateStatePublish+0x42>
    {
        LogError( ( "Argument cannot be NULL: pMqttContext=%p, pNewState=%p",
                    ( void * ) pMqttContext,
                    ( void * ) pNewState ) );

        mqttStatus = MQTTBadParameter;
 800e84e:	2301      	movs	r3, #1
 800e850:	75fb      	strb	r3, [r7, #23]
 800e852:	e028      	b.n	800e8a6 <MQTT_UpdateStatePublish+0x94>
    }
    else if( qos == MQTTQoS0 )
 800e854:	783b      	ldrb	r3, [r7, #0]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d103      	bne.n	800e862 <MQTT_UpdateStatePublish+0x50>
    {
        /* QoS 0 publish. Do nothing. */
        *pNewState = MQTTPublishDone;
 800e85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85c:	220a      	movs	r2, #10
 800e85e:	701a      	strb	r2, [r3, #0]
 800e860:	e021      	b.n	800e8a6 <MQTT_UpdateStatePublish+0x94>
    }
    else if( packetId == MQTT_PACKET_ID_INVALID )
 800e862:	887b      	ldrh	r3, [r7, #2]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d102      	bne.n	800e86e <MQTT_UpdateStatePublish+0x5c>
    {
        /* Publishes > QoS 0 need a valid packet ID. */
        mqttStatus = MQTTBadParameter;
 800e868:	2301      	movs	r3, #1
 800e86a:	75fb      	strb	r3, [r7, #23]
 800e86c:	e01b      	b.n	800e8a6 <MQTT_UpdateStatePublish+0x94>
    }
    else if( opType == MQTT_SEND )
 800e86e:	787b      	ldrb	r3, [r7, #1]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d118      	bne.n	800e8a6 <MQTT_UpdateStatePublish+0x94>
    {
        /* Search record for entry so we can check QoS. */
        recordIndex = findInRecord( pMqttContext->outgoingPublishRecords,
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6818      	ldr	r0, [r3, #0]
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6899      	ldr	r1, [r3, #8]
 800e87c:	f107 040d 	add.w	r4, r7, #13
 800e880:	887a      	ldrh	r2, [r7, #2]
 800e882:	f107 030e 	add.w	r3, r7, #14
 800e886:	9300      	str	r3, [sp, #0]
 800e888:	4623      	mov	r3, r4
 800e88a:	f7ff fc31 	bl	800e0f0 <findInRecord>
 800e88e:	6138      	str	r0, [r7, #16]
                                    pMqttContext->outgoingPublishRecordMaxCount,
                                    packetId,
                                    &foundQoS,
                                    &currentState );

        if( ( recordIndex == MQTT_INVALID_STATE_COUNT ) || ( foundQoS != qos ) )
 800e890:	2300      	movs	r3, #0
 800e892:	43db      	mvns	r3, r3
 800e894:	693a      	ldr	r2, [r7, #16]
 800e896:	429a      	cmp	r2, r3
 800e898:	d003      	beq.n	800e8a2 <MQTT_UpdateStatePublish+0x90>
 800e89a:	7b7b      	ldrb	r3, [r7, #13]
 800e89c:	783a      	ldrb	r2, [r7, #0]
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d001      	beq.n	800e8a6 <MQTT_UpdateStatePublish+0x94>
        {
            /* Entry should match with supplied QoS. */
            mqttStatus = MQTTBadParameter;
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* QoS 1 or 2 receive. Nothing to be done. */
    }

    if( ( qos != MQTTQoS0 ) && ( mqttStatus == MQTTSuccess ) )
 800e8a6:	783b      	ldrb	r3, [r7, #0]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d020      	beq.n	800e8ee <MQTT_UpdateStatePublish+0xdc>
 800e8ac:	7dfb      	ldrb	r3, [r7, #23]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d11d      	bne.n	800e8ee <MQTT_UpdateStatePublish+0xdc>
    {
        newState = MQTT_CalculateStatePublish( opType, qos );
 800e8b2:	783a      	ldrb	r2, [r7, #0]
 800e8b4:	787b      	ldrb	r3, [r7, #1]
 800e8b6:	4611      	mov	r1, r2
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7ff ff7b 	bl	800e7b4 <MQTT_CalculateStatePublish>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	73fb      	strb	r3, [r7, #15]
        /* Validate state transition and update state records. */
        mqttStatus = updateStatePublish( pMqttContext,
 800e8c2:	7bbb      	ldrb	r3, [r7, #14]
 800e8c4:	7878      	ldrb	r0, [r7, #1]
 800e8c6:	8879      	ldrh	r1, [r7, #2]
 800e8c8:	7bfa      	ldrb	r2, [r7, #15]
 800e8ca:	9202      	str	r2, [sp, #8]
 800e8cc:	9301      	str	r3, [sp, #4]
 800e8ce:	783b      	ldrb	r3, [r7, #0]
 800e8d0:	9300      	str	r3, [sp, #0]
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	460a      	mov	r2, r1
 800e8d6:	6939      	ldr	r1, [r7, #16]
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f7ff fed1 	bl	800e680 <updateStatePublish>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	75fb      	strb	r3, [r7, #23]
                                         qos,
                                         currentState,
                                         newState );

        /* Update output parameter on success. */
        if( mqttStatus == MQTTSuccess )
 800e8e2:	7dfb      	ldrb	r3, [r7, #23]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d102      	bne.n	800e8ee <MQTT_UpdateStatePublish+0xdc>
        {
            *pNewState = newState;
 800e8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ea:	7bfa      	ldrb	r2, [r7, #15]
 800e8ec:	701a      	strb	r2, [r3, #0]
        }
    }

    return mqttStatus;
 800e8ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	371c      	adds	r7, #28
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd90      	pop	{r4, r7, pc}

0800e8f8 <MQTT_UpdateStateAck>:
MQTTStatus_t MQTT_UpdateStateAck( const MQTTContext_t * pMqttContext,
                                  uint16_t packetId,
                                  MQTTPubAckType_t packetType,
                                  MQTTStateOperation_t opType,
                                  MQTTPublishState_t * pNewState )
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b08a      	sub	sp, #40	; 0x28
 800e8fc:	af02      	add	r7, sp, #8
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	4608      	mov	r0, r1
 800e902:	4611      	mov	r1, r2
 800e904:	461a      	mov	r2, r3
 800e906:	4603      	mov	r3, r0
 800e908:	807b      	strh	r3, [r7, #2]
 800e90a:	460b      	mov	r3, r1
 800e90c:	707b      	strb	r3, [r7, #1]
 800e90e:	4613      	mov	r3, r2
 800e910:	703b      	strb	r3, [r7, #0]
    MQTTPublishState_t newState = MQTTStateNull;
 800e912:	2300      	movs	r3, #0
 800e914:	74bb      	strb	r3, [r7, #18]
    MQTTPublishState_t currentState = MQTTStateNull;
 800e916:	2300      	movs	r3, #0
 800e918:	743b      	strb	r3, [r7, #16]
    bool isOutgoingPublish = isPublishOutgoing( packetType, opType );
 800e91a:	783a      	ldrb	r2, [r7, #0]
 800e91c:	787b      	ldrb	r3, [r7, #1]
 800e91e:	4611      	mov	r1, r2
 800e920:	4618      	mov	r0, r3
 800e922:	f7ff fbb7 	bl	800e094 <isPublishOutgoing>
 800e926:	4603      	mov	r3, r0
 800e928:	747b      	strb	r3, [r7, #17]
    MQTTQoS_t qos = MQTTQoS0;
 800e92a:	2300      	movs	r3, #0
 800e92c:	73fb      	strb	r3, [r7, #15]
    size_t maxRecordCount = MQTT_INVALID_STATE_COUNT;
 800e92e:	2300      	movs	r3, #0
 800e930:	43db      	mvns	r3, r3
 800e932:	61fb      	str	r3, [r7, #28]
    size_t recordIndex = MQTT_INVALID_STATE_COUNT;
 800e934:	2300      	movs	r3, #0
 800e936:	43db      	mvns	r3, r3
 800e938:	61bb      	str	r3, [r7, #24]

    MQTTPubAckInfo_t * records = NULL;
 800e93a:	2300      	movs	r3, #0
 800e93c:	617b      	str	r3, [r7, #20]
    MQTTStatus_t status = MQTTBadResponse;
 800e93e:	2305      	movs	r3, #5
 800e940:	74fb      	strb	r3, [r7, #19]

    if( ( pMqttContext == NULL ) || ( pNewState == NULL ) )
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d002      	beq.n	800e94e <MQTT_UpdateStateAck+0x56>
 800e948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d102      	bne.n	800e954 <MQTT_UpdateStateAck+0x5c>
    {
        LogError( ( "Argument cannot be NULL: pMqttContext=%p, pNewState=%p.",
                    ( void * ) pMqttContext,
                    ( void * ) pNewState ) );
        status = MQTTBadParameter;
 800e94e:	2301      	movs	r3, #1
 800e950:	74fb      	strb	r3, [r7, #19]
 800e952:	e027      	b.n	800e9a4 <MQTT_UpdateStateAck+0xac>
    }
    else if( packetId == MQTT_PACKET_ID_INVALID )
 800e954:	887b      	ldrh	r3, [r7, #2]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d102      	bne.n	800e960 <MQTT_UpdateStateAck+0x68>
    {
        LogError( ( "Packet ID must be nonzero." ) );
        status = MQTTBadParameter;
 800e95a:	2301      	movs	r3, #1
 800e95c:	74fb      	strb	r3, [r7, #19]
 800e95e:	e021      	b.n	800e9a4 <MQTT_UpdateStateAck+0xac>
    }
    else if( packetType > MQTTPubcomp )
 800e960:	787b      	ldrb	r3, [r7, #1]
 800e962:	2b03      	cmp	r3, #3
 800e964:	d902      	bls.n	800e96c <MQTT_UpdateStateAck+0x74>
    {
        LogError( ( "Invalid packet type %u.", ( unsigned int ) packetType ) );
        status = MQTTBadParameter;
 800e966:	2301      	movs	r3, #1
 800e968:	74fb      	strb	r3, [r7, #19]
 800e96a:	e01b      	b.n	800e9a4 <MQTT_UpdateStateAck+0xac>
    }
    else
    {
        if( isOutgoingPublish == true )
 800e96c:	7c7b      	ldrb	r3, [r7, #17]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d006      	beq.n	800e980 <MQTT_UpdateStateAck+0x88>
        {
            records = pMqttContext->outgoingPublishRecords;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	617b      	str	r3, [r7, #20]
            maxRecordCount = pMqttContext->outgoingPublishRecordMaxCount;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	689b      	ldr	r3, [r3, #8]
 800e97c:	61fb      	str	r3, [r7, #28]
 800e97e:	e005      	b.n	800e98c <MQTT_UpdateStateAck+0x94>
        }
        else
        {
            records = pMqttContext->incomingPublishRecords;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	685b      	ldr	r3, [r3, #4]
 800e984:	617b      	str	r3, [r7, #20]
            maxRecordCount = pMqttContext->incomingPublishRecordMaxCount;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	68db      	ldr	r3, [r3, #12]
 800e98a:	61fb      	str	r3, [r7, #28]
        }

        recordIndex = findInRecord( records,
 800e98c:	f107 010f 	add.w	r1, r7, #15
 800e990:	887a      	ldrh	r2, [r7, #2]
 800e992:	f107 0310 	add.w	r3, r7, #16
 800e996:	9300      	str	r3, [sp, #0]
 800e998:	460b      	mov	r3, r1
 800e99a:	69f9      	ldr	r1, [r7, #28]
 800e99c:	6978      	ldr	r0, [r7, #20]
 800e99e:	f7ff fba7 	bl	800e0f0 <findInRecord>
 800e9a2:	61b8      	str	r0, [r7, #24]
                                    packetId,
                                    &qos,
                                    &currentState );
    }

    if( recordIndex != MQTT_INVALID_STATE_COUNT )
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	43db      	mvns	r3, r3
 800e9a8:	69ba      	ldr	r2, [r7, #24]
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	d01a      	beq.n	800e9e4 <MQTT_UpdateStateAck+0xec>
    {
        newState = MQTT_CalculateStateAck( packetType, opType, qos );
 800e9ae:	7bfa      	ldrb	r2, [r7, #15]
 800e9b0:	7839      	ldrb	r1, [r7, #0]
 800e9b2:	787b      	ldrb	r3, [r7, #1]
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f7ff fdbb 	bl	800e530 <MQTT_CalculateStateAck>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	74bb      	strb	r3, [r7, #18]

        /* Validate state transition and update state record. */
        status = updateStateAck( records,
 800e9be:	7c3b      	ldrb	r3, [r7, #16]
 800e9c0:	8879      	ldrh	r1, [r7, #2]
 800e9c2:	7cba      	ldrb	r2, [r7, #18]
 800e9c4:	9201      	str	r2, [sp, #4]
 800e9c6:	9300      	str	r3, [sp, #0]
 800e9c8:	460b      	mov	r3, r1
 800e9ca:	69ba      	ldr	r2, [r7, #24]
 800e9cc:	69f9      	ldr	r1, [r7, #28]
 800e9ce:	6978      	ldr	r0, [r7, #20]
 800e9d0:	f7ff fdfa 	bl	800e5c8 <updateStateAck>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	74fb      	strb	r3, [r7, #19]
                                 packetId,
                                 currentState,
                                 newState );

        /* Update the output parameter. */
        if( status == MQTTSuccess )
 800e9d8:	7cfb      	ldrb	r3, [r7, #19]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d102      	bne.n	800e9e4 <MQTT_UpdateStateAck+0xec>
        {
            *pNewState = newState;
 800e9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e0:	7cba      	ldrb	r2, [r7, #18]
 800e9e2:	701a      	strb	r2, [r3, #0]
    {
        LogError( ( "No matching record found for publish: PacketId=%u.",
                    ( unsigned int ) packetId ) );
    }

    return status;
 800e9e4:	7cfb      	ldrb	r3, [r7, #19]
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3720      	adds	r7, #32
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}

0800e9ee <MQTT_PubrelToResend>:
/*-----------------------------------------------------------*/

uint16_t MQTT_PubrelToResend( const MQTTContext_t * pMqttContext,
                              MQTTStateCursor_t * pCursor,
                              MQTTPublishState_t * pState )
{
 800e9ee:	b580      	push	{r7, lr}
 800e9f0:	b086      	sub	sp, #24
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	60f8      	str	r0, [r7, #12]
 800e9f6:	60b9      	str	r1, [r7, #8]
 800e9f8:	607a      	str	r2, [r7, #4]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	82fb      	strh	r3, [r7, #22]
    uint16_t searchStates = 0U;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	82bb      	strh	r3, [r7, #20]

    /* Validate arguments. */
    if( ( pMqttContext == NULL ) || ( pCursor == NULL ) || ( pState == NULL ) )
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d01b      	beq.n	800ea40 <MQTT_PubrelToResend+0x52>
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d018      	beq.n	800ea40 <MQTT_PubrelToResend+0x52>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d015      	beq.n	800ea40 <MQTT_PubrelToResend+0x52>
    }
    else
    {
        /* PUBREL for packets in state #MQTTPubCompPending and #MQTTPubRelSend
         * would need to be resent when a session is reestablished.*/
        UINT16_SET_BIT( searchStates, MQTTPubCompPending );
 800ea14:	8abb      	ldrh	r3, [r7, #20]
 800ea16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ea1a:	82bb      	strh	r3, [r7, #20]
        UINT16_SET_BIT( searchStates, MQTTPubRelSend );
 800ea1c:	8abb      	ldrh	r3, [r7, #20]
 800ea1e:	f043 0310 	orr.w	r3, r3, #16
 800ea22:	82bb      	strh	r3, [r7, #20]
        packetId = stateSelect( pMqttContext, searchStates, pCursor );
 800ea24:	8abb      	ldrh	r3, [r7, #20]
 800ea26:	68ba      	ldr	r2, [r7, #8]
 800ea28:	4619      	mov	r1, r3
 800ea2a:	68f8      	ldr	r0, [r7, #12]
 800ea2c:	f7ff fcd8 	bl	800e3e0 <stateSelect>
 800ea30:	4603      	mov	r3, r0
 800ea32:	82fb      	strh	r3, [r7, #22]

        /* The state needs to be in #MQTTPubRelSend for sending PUBREL. */
        if( packetId != MQTT_PACKET_ID_INVALID )
 800ea34:	8afb      	ldrh	r3, [r7, #22]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d002      	beq.n	800ea40 <MQTT_PubrelToResend+0x52>
        {
            *pState = MQTTPubRelSend;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2204      	movs	r2, #4
 800ea3e:	701a      	strb	r2, [r3, #0]
        }
    }

    return packetId;
 800ea40:	8afb      	ldrh	r3, [r7, #22]
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3718      	adds	r7, #24
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
	...

0800ea4c <transport_recv>:
#define min(a,b) ((a) < (b) ? (a) : (b))

int32_t transport_recv( NetworkContext_t * pNetworkContext,
                        void * pBuffer,
                        size_t bytesToRecv )
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	f5ad 6d87 	sub.w	sp, sp, #1080	; 0x438
 800ea52:	af02      	add	r7, sp, #8
 800ea54:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ea58:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ea5c:	6018      	str	r0, [r3, #0]
 800ea5e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ea62:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800ea66:	6019      	str	r1, [r3, #0]
 800ea68:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ea6c:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800ea70:	601a      	str	r2, [r3, #0]
    int32_t socketStatus = 1;
 800ea72:	2301      	movs	r3, #1
 800ea74:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
    uint16_t recvlen;
	uint8_t recvdata[1024];

    ES_WIFI_Conn_t conn;

	conn.Number = pNetworkContext->socket;
 800ea78:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ea7c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	781a      	ldrb	r2, [r3, #0]
 800ea84:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ea88:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800ea8c:	705a      	strb	r2, [r3, #1]
	conn.RemotePort = pNetworkContext->remote_port;
 800ea8e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ea92:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	88da      	ldrh	r2, [r3, #6]
 800ea9a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ea9e:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800eaa2:	805a      	strh	r2, [r3, #2]
	conn.LocalPort = 0;
 800eaa4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eaa8:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800eaac:	2200      	movs	r2, #0
 800eaae:	809a      	strh	r2, [r3, #4]
	conn.Type = ES_WIFI_TCP_CONNECTION;
 800eab0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eab4:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800eab8:	2200      	movs	r2, #0
 800eaba:	701a      	strb	r2, [r3, #0]
	conn.RemoteIP[0] = pNetworkContext->ipaddr[0];
 800eabc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eac0:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	789a      	ldrb	r2, [r3, #2]
 800eac8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eacc:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800ead0:	719a      	strb	r2, [r3, #6]
	conn.RemoteIP[1] = pNetworkContext->ipaddr[1];
 800ead2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ead6:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	78da      	ldrb	r2, [r3, #3]
 800eade:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eae2:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800eae6:	71da      	strb	r2, [r3, #7]
	conn.RemoteIP[2] = pNetworkContext->ipaddr[2];
 800eae8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eaec:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	791a      	ldrb	r2, [r3, #4]
 800eaf4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eaf8:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800eafc:	721a      	strb	r2, [r3, #8]
	conn.RemoteIP[3] = pNetworkContext->ipaddr[3];
 800eafe:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eb02:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	795a      	ldrb	r2, [r3, #5]
 800eb0a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eb0e:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800eb12:	725a      	strb	r2, [r3, #9]

    if(!pNetworkContext->socket_open) {
 800eb14:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eb18:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	785b      	ldrb	r3, [r3, #1]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d115      	bne.n	800eb50 <transport_recv+0x104>
    	ret=ES_WIFI_StartClientConnection(&EsWifiObj, &conn);
 800eb24:	f107 0314 	add.w	r3, r7, #20
 800eb28:	4619      	mov	r1, r3
 800eb2a:	482a      	ldr	r0, [pc, #168]	; (800ebd4 <transport_recv+0x188>)
 800eb2c:	f7fb fc54 	bl	800a3d8 <ES_WIFI_StartClientConnection>
 800eb30:	4603      	mov	r3, r0
 800eb32:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b

		if(ret!=ES_WIFI_STATUS_OK) {
 800eb36:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d001      	beq.n	800eb42 <transport_recv+0xf6>
			return 0;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	e042      	b.n	800ebc8 <transport_recv+0x17c>
		} else {
			pNetworkContext->socket_open=1;
 800eb42:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eb46:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	2201      	movs	r2, #1
 800eb4e:	705a      	strb	r2, [r3, #1]
		}
    }

	ret=ES_WIFI_ReceiveData(&EsWifiObj,pNetworkContext->socket, pBuffer, bytesToRecv, &recvlen, 1000);
 800eb50:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eb54:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	7819      	ldrb	r1, [r3, #0]
 800eb5c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eb60:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	b298      	uxth	r0, r3
 800eb68:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eb6c:	f5a3 6285 	sub.w	r2, r3, #1064	; 0x428
 800eb70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800eb74:	9301      	str	r3, [sp, #4]
 800eb76:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800eb7a:	9300      	str	r3, [sp, #0]
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	6812      	ldr	r2, [r2, #0]
 800eb80:	4814      	ldr	r0, [pc, #80]	; (800ebd4 <transport_recv+0x188>)
 800eb82:	f7fb fdcf 	bl	800a724 <ES_WIFI_ReceiveData>
 800eb86:	4603      	mov	r3, r0
 800eb88:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b
	if(ret!=WIFI_STATUS_OK) {
 800eb8c:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d00a      	beq.n	800ebaa <transport_recv+0x15e>
		socketStatus=0;
 800eb94:	2300      	movs	r3, #0
 800eb96:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
		pNetworkContext->socket_open=0;
 800eb9a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eb9e:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	2200      	movs	r2, #0
 800eba6:	705a      	strb	r2, [r3, #1]
 800eba8:	e00c      	b.n	800ebc4 <transport_recv+0x178>
	} else {
		//log_transport('R',pBuffer,recvlen);
		recvdata[recvlen]=0;
 800ebaa:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 800ebae:	461a      	mov	r2, r3
 800ebb0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ebb4:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800ebb8:	2100      	movs	r1, #0
 800ebba:	5499      	strb	r1, [r3, r2]
		socketStatus=recvlen;
 800ebbc:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 800ebc0:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
	}

    return socketStatus;
 800ebc4:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}
 800ebd2:	bf00      	nop
 800ebd4:	20000d08 	.word	0x20000d08

0800ebd8 <transport_send>:

int32_t transport_send( NetworkContext_t * pNetworkContext,
                        const void * pBuffer,
                        size_t bytesToSend )
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b08e      	sub	sp, #56	; 0x38
 800ebdc:	af02      	add	r7, sp, #8
 800ebde:	60f8      	str	r0, [r7, #12]
 800ebe0:	60b9      	str	r1, [r7, #8]
 800ebe2:	607a      	str	r2, [r7, #4]
    int32_t socketStatus=0;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    int16_t datasent;
    uint8_t ret;

    ES_WIFI_Conn_t conn;

	conn.Number = pNetworkContext->socket;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	781b      	ldrb	r3, [r3, #0]
 800ebec:	757b      	strb	r3, [r7, #21]
	conn.RemotePort = pNetworkContext->remote_port;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	88db      	ldrh	r3, [r3, #6]
 800ebf2:	82fb      	strh	r3, [r7, #22]
	conn.LocalPort = 0;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	833b      	strh	r3, [r7, #24]
	conn.Type = ES_WIFI_TCP_CONNECTION;
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	753b      	strb	r3, [r7, #20]
	conn.RemoteIP[0] = pNetworkContext->ipaddr[0];
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	789b      	ldrb	r3, [r3, #2]
 800ec00:	76bb      	strb	r3, [r7, #26]
	conn.RemoteIP[1] = pNetworkContext->ipaddr[1];
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	78db      	ldrb	r3, [r3, #3]
 800ec06:	76fb      	strb	r3, [r7, #27]
	conn.RemoteIP[2] = pNetworkContext->ipaddr[2];
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	791b      	ldrb	r3, [r3, #4]
 800ec0c:	773b      	strb	r3, [r7, #28]
	conn.RemoteIP[3] = pNetworkContext->ipaddr[3];
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	795b      	ldrb	r3, [r3, #5]
 800ec12:	777b      	strb	r3, [r7, #29]

    if(!pNetworkContext->socket_open) {
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	785b      	ldrb	r3, [r3, #1]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d111      	bne.n	800ec40 <transport_send+0x68>
    	ret=ES_WIFI_StartClientConnection(&EsWifiObj, &conn);
 800ec1c:	f107 0314 	add.w	r3, r7, #20
 800ec20:	4619      	mov	r1, r3
 800ec22:	481c      	ldr	r0, [pc, #112]	; (800ec94 <transport_send+0xbc>)
 800ec24:	f7fb fbd8 	bl	800a3d8 <ES_WIFI_StartClientConnection>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		if(ret!=ES_WIFI_STATUS_OK) {
 800ec2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d001      	beq.n	800ec3a <transport_send+0x62>
			return 0;
 800ec36:	2300      	movs	r3, #0
 800ec38:	e027      	b.n	800ec8a <transport_send+0xb2>
		} else {
			pNetworkContext->socket_open=1;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	705a      	strb	r2, [r3, #1]
		}
    }

	ret=ES_WIFI_SendData(&EsWifiObj,pNetworkContext->socket,pBuffer,bytesToSend,&datasent,1000);
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	7819      	ldrb	r1, [r3, #0]
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	b29a      	uxth	r2, r3
 800ec48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ec4c:	9301      	str	r3, [sp, #4]
 800ec4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ec52:	9300      	str	r3, [sp, #0]
 800ec54:	4613      	mov	r3, r2
 800ec56:	68ba      	ldr	r2, [r7, #8]
 800ec58:	480e      	ldr	r0, [pc, #56]	; (800ec94 <transport_send+0xbc>)
 800ec5a:	f7fb fca7 	bl	800a5ac <ES_WIFI_SendData>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	//log_transport('S',pBuffer,bytesToSend);
	if(ret!=ES_WIFI_STATUS_OK) {
 800ec64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d00a      	beq.n	800ec82 <transport_send+0xaa>
		pNetworkContext->socket_open=0;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	2200      	movs	r2, #0
 800ec70:	705a      	strb	r2, [r3, #1]
		printf("Error in sending data: %d\n",ret);
 800ec72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ec76:	4619      	mov	r1, r3
 800ec78:	4807      	ldr	r0, [pc, #28]	; (800ec98 <transport_send+0xc0>)
 800ec7a:	f003 ffe5 	bl	8012c48 <iprintf>
		return 0;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	e003      	b.n	800ec8a <transport_send+0xb2>
	} else {
		socketStatus=datasent;
 800ec82:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800ec86:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

    return socketStatus;
 800ec88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3730      	adds	r7, #48	; 0x30
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}
 800ec92:	bf00      	nop
 800ec94:	20000d08 	.word	0x20000d08
 800ec98:	08015144 	.word	0x08015144

0800ec9c <init_transport_from_socket>:

/* Populating the TransportInterface_t structure with the definitions above. */
void init_transport_from_socket( uint8_t tcpSocket, uint8_t socketOpen,
                                 NetworkContext_t * pNetworkContext,
                                 TransportInterface_t * pTransport )
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b085      	sub	sp, #20
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	60ba      	str	r2, [r7, #8]
 800eca4:	607b      	str	r3, [r7, #4]
 800eca6:	4603      	mov	r3, r0
 800eca8:	73fb      	strb	r3, [r7, #15]
 800ecaa:	460b      	mov	r3, r1
 800ecac:	73bb      	strb	r3, [r7, #14]
    pNetworkContext->socket = tcpSocket;
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	7bfa      	ldrb	r2, [r7, #15]
 800ecb2:	701a      	strb	r2, [r3, #0]
    pNetworkContext->socket_open=socketOpen;
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	7bba      	ldrb	r2, [r7, #14]
 800ecb8:	705a      	strb	r2, [r3, #1]
    pTransport->recv = transport_recv;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	4a08      	ldr	r2, [pc, #32]	; (800ece0 <init_transport_from_socket+0x44>)
 800ecbe:	601a      	str	r2, [r3, #0]
    pTransport->send = transport_send;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	4a08      	ldr	r2, [pc, #32]	; (800ece4 <init_transport_from_socket+0x48>)
 800ecc4:	605a      	str	r2, [r3, #4]
    // We don't implement transport vector function
    pTransport->writev=NULL;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	609a      	str	r2, [r3, #8]
    pTransport->pNetworkContext = pNetworkContext;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	68ba      	ldr	r2, [r7, #8]
 800ecd0:	60da      	str	r2, [r3, #12]
}
 800ecd2:	bf00      	nop
 800ecd4:	3714      	adds	r7, #20
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecdc:	4770      	bx	lr
 800ecde:	bf00      	nop
 800ece0:	0800ea4d 	.word	0x0800ea4d
 800ece4:	0800ebd9 	.word	0x0800ebd9

0800ece8 <__NVIC_SetPriority>:
{
 800ece8:	b480      	push	{r7}
 800ecea:	b083      	sub	sp, #12
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	4603      	mov	r3, r0
 800ecf0:	6039      	str	r1, [r7, #0]
 800ecf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ecf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	db0a      	blt.n	800ed12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	b2da      	uxtb	r2, r3
 800ed00:	490c      	ldr	r1, [pc, #48]	; (800ed34 <__NVIC_SetPriority+0x4c>)
 800ed02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed06:	0112      	lsls	r2, r2, #4
 800ed08:	b2d2      	uxtb	r2, r2
 800ed0a:	440b      	add	r3, r1
 800ed0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ed10:	e00a      	b.n	800ed28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	b2da      	uxtb	r2, r3
 800ed16:	4908      	ldr	r1, [pc, #32]	; (800ed38 <__NVIC_SetPriority+0x50>)
 800ed18:	79fb      	ldrb	r3, [r7, #7]
 800ed1a:	f003 030f 	and.w	r3, r3, #15
 800ed1e:	3b04      	subs	r3, #4
 800ed20:	0112      	lsls	r2, r2, #4
 800ed22:	b2d2      	uxtb	r2, r2
 800ed24:	440b      	add	r3, r1
 800ed26:	761a      	strb	r2, [r3, #24]
}
 800ed28:	bf00      	nop
 800ed2a:	370c      	adds	r7, #12
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed32:	4770      	bx	lr
 800ed34:	e000e100 	.word	0xe000e100
 800ed38:	e000ed00 	.word	0xe000ed00

0800ed3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ed40:	4b05      	ldr	r3, [pc, #20]	; (800ed58 <SysTick_Handler+0x1c>)
 800ed42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ed44:	f002 f804 	bl	8010d50 <xTaskGetSchedulerState>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	2b01      	cmp	r3, #1
 800ed4c:	d001      	beq.n	800ed52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ed4e:	f002 ffeb 	bl	8011d28 <xPortSysTickHandler>
  }
}
 800ed52:	bf00      	nop
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	bf00      	nop
 800ed58:	e000e010 	.word	0xe000e010

0800ed5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ed60:	2100      	movs	r1, #0
 800ed62:	f06f 0004 	mvn.w	r0, #4
 800ed66:	f7ff ffbf 	bl	800ece8 <__NVIC_SetPriority>
#endif
}
 800ed6a:	bf00      	nop
 800ed6c:	bd80      	pop	{r7, pc}
	...

0800ed70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ed70:	b480      	push	{r7}
 800ed72:	b083      	sub	sp, #12
 800ed74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed76:	f3ef 8305 	mrs	r3, IPSR
 800ed7a:	603b      	str	r3, [r7, #0]
  return(result);
 800ed7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d003      	beq.n	800ed8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ed82:	f06f 0305 	mvn.w	r3, #5
 800ed86:	607b      	str	r3, [r7, #4]
 800ed88:	e00c      	b.n	800eda4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ed8a:	4b0a      	ldr	r3, [pc, #40]	; (800edb4 <osKernelInitialize+0x44>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d105      	bne.n	800ed9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ed92:	4b08      	ldr	r3, [pc, #32]	; (800edb4 <osKernelInitialize+0x44>)
 800ed94:	2201      	movs	r2, #1
 800ed96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ed98:	2300      	movs	r3, #0
 800ed9a:	607b      	str	r3, [r7, #4]
 800ed9c:	e002      	b.n	800eda4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ed9e:	f04f 33ff 	mov.w	r3, #4294967295
 800eda2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800eda4:	687b      	ldr	r3, [r7, #4]
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	370c      	adds	r7, #12
 800edaa:	46bd      	mov	sp, r7
 800edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb0:	4770      	bx	lr
 800edb2:	bf00      	nop
 800edb4:	20001608 	.word	0x20001608

0800edb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800edb8:	b580      	push	{r7, lr}
 800edba:	b082      	sub	sp, #8
 800edbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800edbe:	f3ef 8305 	mrs	r3, IPSR
 800edc2:	603b      	str	r3, [r7, #0]
  return(result);
 800edc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d003      	beq.n	800edd2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800edca:	f06f 0305 	mvn.w	r3, #5
 800edce:	607b      	str	r3, [r7, #4]
 800edd0:	e010      	b.n	800edf4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800edd2:	4b0b      	ldr	r3, [pc, #44]	; (800ee00 <osKernelStart+0x48>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	2b01      	cmp	r3, #1
 800edd8:	d109      	bne.n	800edee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800edda:	f7ff ffbf 	bl	800ed5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800edde:	4b08      	ldr	r3, [pc, #32]	; (800ee00 <osKernelStart+0x48>)
 800ede0:	2202      	movs	r2, #2
 800ede2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ede4:	f001 fb3a 	bl	801045c <vTaskStartScheduler>
      stat = osOK;
 800ede8:	2300      	movs	r3, #0
 800edea:	607b      	str	r3, [r7, #4]
 800edec:	e002      	b.n	800edf4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800edee:	f04f 33ff 	mov.w	r3, #4294967295
 800edf2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800edf4:	687b      	ldr	r3, [r7, #4]
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3708      	adds	r7, #8
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	bf00      	nop
 800ee00:	20001608 	.word	0x20001608

0800ee04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b08e      	sub	sp, #56	; 0x38
 800ee08:	af04      	add	r7, sp, #16
 800ee0a:	60f8      	str	r0, [r7, #12]
 800ee0c:	60b9      	str	r1, [r7, #8]
 800ee0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ee10:	2300      	movs	r3, #0
 800ee12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee14:	f3ef 8305 	mrs	r3, IPSR
 800ee18:	617b      	str	r3, [r7, #20]
  return(result);
 800ee1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d17e      	bne.n	800ef1e <osThreadNew+0x11a>
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d07b      	beq.n	800ef1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ee26:	2380      	movs	r3, #128	; 0x80
 800ee28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ee2a:	2318      	movs	r3, #24
 800ee2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ee32:	f04f 33ff 	mov.w	r3, #4294967295
 800ee36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d045      	beq.n	800eeca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d002      	beq.n	800ee4c <osThreadNew+0x48>
        name = attr->name;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	699b      	ldr	r3, [r3, #24]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d002      	beq.n	800ee5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	699b      	ldr	r3, [r3, #24]
 800ee58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ee5a:	69fb      	ldr	r3, [r7, #28]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d008      	beq.n	800ee72 <osThreadNew+0x6e>
 800ee60:	69fb      	ldr	r3, [r7, #28]
 800ee62:	2b38      	cmp	r3, #56	; 0x38
 800ee64:	d805      	bhi.n	800ee72 <osThreadNew+0x6e>
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	685b      	ldr	r3, [r3, #4]
 800ee6a:	f003 0301 	and.w	r3, r3, #1
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d001      	beq.n	800ee76 <osThreadNew+0x72>
        return (NULL);
 800ee72:	2300      	movs	r3, #0
 800ee74:	e054      	b.n	800ef20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	695b      	ldr	r3, [r3, #20]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d003      	beq.n	800ee86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	695b      	ldr	r3, [r3, #20]
 800ee82:	089b      	lsrs	r3, r3, #2
 800ee84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	689b      	ldr	r3, [r3, #8]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d00e      	beq.n	800eeac <osThreadNew+0xa8>
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	68db      	ldr	r3, [r3, #12]
 800ee92:	2bbf      	cmp	r3, #191	; 0xbf
 800ee94:	d90a      	bls.n	800eeac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d006      	beq.n	800eeac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	695b      	ldr	r3, [r3, #20]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d002      	beq.n	800eeac <osThreadNew+0xa8>
        mem = 1;
 800eea6:	2301      	movs	r3, #1
 800eea8:	61bb      	str	r3, [r7, #24]
 800eeaa:	e010      	b.n	800eece <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	689b      	ldr	r3, [r3, #8]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d10c      	bne.n	800eece <osThreadNew+0xca>
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	68db      	ldr	r3, [r3, #12]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d108      	bne.n	800eece <osThreadNew+0xca>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	691b      	ldr	r3, [r3, #16]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d104      	bne.n	800eece <osThreadNew+0xca>
          mem = 0;
 800eec4:	2300      	movs	r3, #0
 800eec6:	61bb      	str	r3, [r7, #24]
 800eec8:	e001      	b.n	800eece <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800eeca:	2300      	movs	r3, #0
 800eecc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800eece:	69bb      	ldr	r3, [r7, #24]
 800eed0:	2b01      	cmp	r3, #1
 800eed2:	d110      	bne.n	800eef6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800eed8:	687a      	ldr	r2, [r7, #4]
 800eeda:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800eedc:	9202      	str	r2, [sp, #8]
 800eede:	9301      	str	r3, [sp, #4]
 800eee0:	69fb      	ldr	r3, [r7, #28]
 800eee2:	9300      	str	r3, [sp, #0]
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	6a3a      	ldr	r2, [r7, #32]
 800eee8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eeea:	68f8      	ldr	r0, [r7, #12]
 800eeec:	f001 f8c6 	bl	801007c <xTaskCreateStatic>
 800eef0:	4603      	mov	r3, r0
 800eef2:	613b      	str	r3, [r7, #16]
 800eef4:	e013      	b.n	800ef1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800eef6:	69bb      	ldr	r3, [r7, #24]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d110      	bne.n	800ef1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800eefc:	6a3b      	ldr	r3, [r7, #32]
 800eefe:	b29a      	uxth	r2, r3
 800ef00:	f107 0310 	add.w	r3, r7, #16
 800ef04:	9301      	str	r3, [sp, #4]
 800ef06:	69fb      	ldr	r3, [r7, #28]
 800ef08:	9300      	str	r3, [sp, #0]
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef0e:	68f8      	ldr	r0, [r7, #12]
 800ef10:	f001 f911 	bl	8010136 <xTaskCreate>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b01      	cmp	r3, #1
 800ef18:	d001      	beq.n	800ef1e <osThreadNew+0x11a>
            hTask = NULL;
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ef1e:	693b      	ldr	r3, [r7, #16]
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	3728      	adds	r7, #40	; 0x28
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}

0800ef28 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b088      	sub	sp, #32
 800ef2c:	af02      	add	r7, sp, #8
 800ef2e:	6078      	str	r0, [r7, #4]
 800ef30:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d002      	beq.n	800ef42 <osThreadFlagsSet+0x1a>
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	da03      	bge.n	800ef4a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800ef42:	f06f 0303 	mvn.w	r3, #3
 800ef46:	60fb      	str	r3, [r7, #12]
 800ef48:	e035      	b.n	800efb6 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800ef4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ef4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef50:	f3ef 8305 	mrs	r3, IPSR
 800ef54:	613b      	str	r3, [r7, #16]
  return(result);
 800ef56:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d01f      	beq.n	800ef9c <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800ef60:	f107 0308 	add.w	r3, r7, #8
 800ef64:	9300      	str	r3, [sp, #0]
 800ef66:	2300      	movs	r3, #0
 800ef68:	2201      	movs	r2, #1
 800ef6a:	6839      	ldr	r1, [r7, #0]
 800ef6c:	6978      	ldr	r0, [r7, #20]
 800ef6e:	f002 f899 	bl	80110a4 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800ef72:	f107 030c 	add.w	r3, r7, #12
 800ef76:	2200      	movs	r2, #0
 800ef78:	9200      	str	r2, [sp, #0]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	2100      	movs	r1, #0
 800ef7e:	6978      	ldr	r0, [r7, #20]
 800ef80:	f002 f890 	bl	80110a4 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800ef84:	68bb      	ldr	r3, [r7, #8]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d015      	beq.n	800efb6 <osThreadFlagsSet+0x8e>
 800ef8a:	4b0d      	ldr	r3, [pc, #52]	; (800efc0 <osThreadFlagsSet+0x98>)
 800ef8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef90:	601a      	str	r2, [r3, #0]
 800ef92:	f3bf 8f4f 	dsb	sy
 800ef96:	f3bf 8f6f 	isb	sy
 800ef9a:	e00c      	b.n	800efb6 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	2201      	movs	r2, #1
 800efa0:	6839      	ldr	r1, [r7, #0]
 800efa2:	6978      	ldr	r0, [r7, #20]
 800efa4:	f001 ffc0 	bl	8010f28 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800efa8:	f107 030c 	add.w	r3, r7, #12
 800efac:	2200      	movs	r2, #0
 800efae:	2100      	movs	r1, #0
 800efb0:	6978      	ldr	r0, [r7, #20]
 800efb2:	f001 ffb9 	bl	8010f28 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800efb6:	68fb      	ldr	r3, [r7, #12]
}
 800efb8:	4618      	mov	r0, r3
 800efba:	3718      	adds	r7, #24
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}
 800efc0:	e000ed04 	.word	0xe000ed04

0800efc4 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b08c      	sub	sp, #48	; 0x30
 800efc8:	af00      	add	r7, sp, #0
 800efca:	60f8      	str	r0, [r7, #12]
 800efcc:	60b9      	str	r1, [r7, #8]
 800efce:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800efd0:	f3ef 8305 	mrs	r3, IPSR
 800efd4:	617b      	str	r3, [r7, #20]
  return(result);
 800efd6:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d003      	beq.n	800efe4 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800efdc:	f06f 0305 	mvn.w	r3, #5
 800efe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800efe2:	e06b      	b.n	800f0bc <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	da03      	bge.n	800eff2 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800efea:	f06f 0303 	mvn.w	r3, #3
 800efee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eff0:	e064      	b.n	800f0bc <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	f003 0302 	and.w	r3, r3, #2
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d002      	beq.n	800f002 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800effc:	2300      	movs	r3, #0
 800effe:	62bb      	str	r3, [r7, #40]	; 0x28
 800f000:	e001      	b.n	800f006 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800f006:	2300      	movs	r3, #0
 800f008:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800f00e:	f001 fb43 	bl	8010698 <xTaskGetTickCount>
 800f012:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800f014:	f107 0210 	add.w	r2, r7, #16
 800f018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f01c:	2000      	movs	r0, #0
 800f01e:	f001 ff23 	bl	8010e68 <xTaskNotifyWait>
 800f022:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800f024:	69fb      	ldr	r3, [r7, #28]
 800f026:	2b01      	cmp	r3, #1
 800f028:	d137      	bne.n	800f09a <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800f02a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	4013      	ands	r3, r2
 800f030:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800f032:	693b      	ldr	r3, [r7, #16]
 800f034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f036:	4313      	orrs	r3, r2
 800f038:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	f003 0301 	and.w	r3, r3, #1
 800f040:	2b00      	cmp	r3, #0
 800f042:	d00c      	beq.n	800f05e <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800f044:	68fa      	ldr	r2, [r7, #12]
 800f046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f048:	4013      	ands	r3, r2
 800f04a:	68fa      	ldr	r2, [r7, #12]
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d032      	beq.n	800f0b6 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d10f      	bne.n	800f076 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800f056:	f06f 0302 	mvn.w	r3, #2
 800f05a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800f05c:	e02e      	b.n	800f0bc <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800f05e:	68fa      	ldr	r2, [r7, #12]
 800f060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f062:	4013      	ands	r3, r2
 800f064:	2b00      	cmp	r3, #0
 800f066:	d128      	bne.n	800f0ba <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d103      	bne.n	800f076 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800f06e:	f06f 0302 	mvn.w	r3, #2
 800f072:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800f074:	e022      	b.n	800f0bc <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800f076:	f001 fb0f 	bl	8010698 <xTaskGetTickCount>
 800f07a:	4602      	mov	r2, r0
 800f07c:	6a3b      	ldr	r3, [r7, #32]
 800f07e:	1ad3      	subs	r3, r2, r3
 800f080:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800f082:	69ba      	ldr	r2, [r7, #24]
 800f084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f086:	429a      	cmp	r2, r3
 800f088:	d902      	bls.n	800f090 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800f08a:	2300      	movs	r3, #0
 800f08c:	627b      	str	r3, [r7, #36]	; 0x24
 800f08e:	e00e      	b.n	800f0ae <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800f090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f092:	69bb      	ldr	r3, [r7, #24]
 800f094:	1ad3      	subs	r3, r2, r3
 800f096:	627b      	str	r3, [r7, #36]	; 0x24
 800f098:	e009      	b.n	800f0ae <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d103      	bne.n	800f0a8 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800f0a0:	f06f 0302 	mvn.w	r3, #2
 800f0a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f0a6:	e002      	b.n	800f0ae <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800f0a8:	f06f 0301 	mvn.w	r3, #1
 800f0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800f0ae:	69fb      	ldr	r3, [r7, #28]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d1af      	bne.n	800f014 <osThreadFlagsWait+0x50>
 800f0b4:	e002      	b.n	800f0bc <osThreadFlagsWait+0xf8>
            break;
 800f0b6:	bf00      	nop
 800f0b8:	e000      	b.n	800f0bc <osThreadFlagsWait+0xf8>
            break;
 800f0ba:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800f0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	3730      	adds	r7, #48	; 0x30
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}

0800f0c6 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f0c6:	b580      	push	{r7, lr}
 800f0c8:	b084      	sub	sp, #16
 800f0ca:	af00      	add	r7, sp, #0
 800f0cc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f0ce:	f3ef 8305 	mrs	r3, IPSR
 800f0d2:	60bb      	str	r3, [r7, #8]
  return(result);
 800f0d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d003      	beq.n	800f0e2 <osDelay+0x1c>
    stat = osErrorISR;
 800f0da:	f06f 0305 	mvn.w	r3, #5
 800f0de:	60fb      	str	r3, [r7, #12]
 800f0e0:	e007      	b.n	800f0f2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d002      	beq.n	800f0f2 <osDelay+0x2c>
      vTaskDelay(ticks);
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f001 f981 	bl	80103f4 <vTaskDelay>
    }
  }

  return (stat);
 800f0f2:	68fb      	ldr	r3, [r7, #12]
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3710      	adds	r7, #16
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}

0800f0fc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b08a      	sub	sp, #40	; 0x28
 800f100:	af02      	add	r7, sp, #8
 800f102:	60f8      	str	r0, [r7, #12]
 800f104:	60b9      	str	r1, [r7, #8]
 800f106:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f108:	2300      	movs	r3, #0
 800f10a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f10c:	f3ef 8305 	mrs	r3, IPSR
 800f110:	613b      	str	r3, [r7, #16]
  return(result);
 800f112:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f114:	2b00      	cmp	r3, #0
 800f116:	d15f      	bne.n	800f1d8 <osMessageQueueNew+0xdc>
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d05c      	beq.n	800f1d8 <osMessageQueueNew+0xdc>
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d059      	beq.n	800f1d8 <osMessageQueueNew+0xdc>
    mem = -1;
 800f124:	f04f 33ff 	mov.w	r3, #4294967295
 800f128:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d029      	beq.n	800f184 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	689b      	ldr	r3, [r3, #8]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d012      	beq.n	800f15e <osMessageQueueNew+0x62>
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	68db      	ldr	r3, [r3, #12]
 800f13c:	2b4f      	cmp	r3, #79	; 0x4f
 800f13e:	d90e      	bls.n	800f15e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f144:	2b00      	cmp	r3, #0
 800f146:	d00a      	beq.n	800f15e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	695a      	ldr	r2, [r3, #20]
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	68b9      	ldr	r1, [r7, #8]
 800f150:	fb01 f303 	mul.w	r3, r1, r3
 800f154:	429a      	cmp	r2, r3
 800f156:	d302      	bcc.n	800f15e <osMessageQueueNew+0x62>
        mem = 1;
 800f158:	2301      	movs	r3, #1
 800f15a:	61bb      	str	r3, [r7, #24]
 800f15c:	e014      	b.n	800f188 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	689b      	ldr	r3, [r3, #8]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d110      	bne.n	800f188 <osMessageQueueNew+0x8c>
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	68db      	ldr	r3, [r3, #12]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d10c      	bne.n	800f188 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f172:	2b00      	cmp	r3, #0
 800f174:	d108      	bne.n	800f188 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	695b      	ldr	r3, [r3, #20]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d104      	bne.n	800f188 <osMessageQueueNew+0x8c>
          mem = 0;
 800f17e:	2300      	movs	r3, #0
 800f180:	61bb      	str	r3, [r7, #24]
 800f182:	e001      	b.n	800f188 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800f184:	2300      	movs	r3, #0
 800f186:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f188:	69bb      	ldr	r3, [r7, #24]
 800f18a:	2b01      	cmp	r3, #1
 800f18c:	d10b      	bne.n	800f1a6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	691a      	ldr	r2, [r3, #16]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	689b      	ldr	r3, [r3, #8]
 800f196:	2100      	movs	r1, #0
 800f198:	9100      	str	r1, [sp, #0]
 800f19a:	68b9      	ldr	r1, [r7, #8]
 800f19c:	68f8      	ldr	r0, [r7, #12]
 800f19e:	f000 fa2f 	bl	800f600 <xQueueGenericCreateStatic>
 800f1a2:	61f8      	str	r0, [r7, #28]
 800f1a4:	e008      	b.n	800f1b8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800f1a6:	69bb      	ldr	r3, [r7, #24]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d105      	bne.n	800f1b8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	68b9      	ldr	r1, [r7, #8]
 800f1b0:	68f8      	ldr	r0, [r7, #12]
 800f1b2:	f000 fa9d 	bl	800f6f0 <xQueueGenericCreate>
 800f1b6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f1b8:	69fb      	ldr	r3, [r7, #28]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d00c      	beq.n	800f1d8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d003      	beq.n	800f1cc <osMessageQueueNew+0xd0>
        name = attr->name;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	617b      	str	r3, [r7, #20]
 800f1ca:	e001      	b.n	800f1d0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800f1d0:	6979      	ldr	r1, [r7, #20]
 800f1d2:	69f8      	ldr	r0, [r7, #28]
 800f1d4:	f000 fef4 	bl	800ffc0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f1d8:	69fb      	ldr	r3, [r7, #28]
}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3720      	adds	r7, #32
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
	...

0800f1e4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b088      	sub	sp, #32
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	60f8      	str	r0, [r7, #12]
 800f1ec:	60b9      	str	r1, [r7, #8]
 800f1ee:	603b      	str	r3, [r7, #0]
 800f1f0:	4613      	mov	r3, r2
 800f1f2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f1fc:	f3ef 8305 	mrs	r3, IPSR
 800f200:	617b      	str	r3, [r7, #20]
  return(result);
 800f202:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f204:	2b00      	cmp	r3, #0
 800f206:	d028      	beq.n	800f25a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f208:	69bb      	ldr	r3, [r7, #24]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d005      	beq.n	800f21a <osMessageQueuePut+0x36>
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d002      	beq.n	800f21a <osMessageQueuePut+0x36>
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d003      	beq.n	800f222 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800f21a:	f06f 0303 	mvn.w	r3, #3
 800f21e:	61fb      	str	r3, [r7, #28]
 800f220:	e038      	b.n	800f294 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800f222:	2300      	movs	r3, #0
 800f224:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f226:	f107 0210 	add.w	r2, r7, #16
 800f22a:	2300      	movs	r3, #0
 800f22c:	68b9      	ldr	r1, [r7, #8]
 800f22e:	69b8      	ldr	r0, [r7, #24]
 800f230:	f000 fbba 	bl	800f9a8 <xQueueGenericSendFromISR>
 800f234:	4603      	mov	r3, r0
 800f236:	2b01      	cmp	r3, #1
 800f238:	d003      	beq.n	800f242 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800f23a:	f06f 0302 	mvn.w	r3, #2
 800f23e:	61fb      	str	r3, [r7, #28]
 800f240:	e028      	b.n	800f294 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800f242:	693b      	ldr	r3, [r7, #16]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d025      	beq.n	800f294 <osMessageQueuePut+0xb0>
 800f248:	4b15      	ldr	r3, [pc, #84]	; (800f2a0 <osMessageQueuePut+0xbc>)
 800f24a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f24e:	601a      	str	r2, [r3, #0]
 800f250:	f3bf 8f4f 	dsb	sy
 800f254:	f3bf 8f6f 	isb	sy
 800f258:	e01c      	b.n	800f294 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f25a:	69bb      	ldr	r3, [r7, #24]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d002      	beq.n	800f266 <osMessageQueuePut+0x82>
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d103      	bne.n	800f26e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800f266:	f06f 0303 	mvn.w	r3, #3
 800f26a:	61fb      	str	r3, [r7, #28]
 800f26c:	e012      	b.n	800f294 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f26e:	2300      	movs	r3, #0
 800f270:	683a      	ldr	r2, [r7, #0]
 800f272:	68b9      	ldr	r1, [r7, #8]
 800f274:	69b8      	ldr	r0, [r7, #24]
 800f276:	f000 fa99 	bl	800f7ac <xQueueGenericSend>
 800f27a:	4603      	mov	r3, r0
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	d009      	beq.n	800f294 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d003      	beq.n	800f28e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800f286:	f06f 0301 	mvn.w	r3, #1
 800f28a:	61fb      	str	r3, [r7, #28]
 800f28c:	e002      	b.n	800f294 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800f28e:	f06f 0302 	mvn.w	r3, #2
 800f292:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f294:	69fb      	ldr	r3, [r7, #28]
}
 800f296:	4618      	mov	r0, r3
 800f298:	3720      	adds	r7, #32
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
 800f29e:	bf00      	nop
 800f2a0:	e000ed04 	.word	0xe000ed04

0800f2a4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b088      	sub	sp, #32
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	60f8      	str	r0, [r7, #12]
 800f2ac:	60b9      	str	r1, [r7, #8]
 800f2ae:	607a      	str	r2, [r7, #4]
 800f2b0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f2ba:	f3ef 8305 	mrs	r3, IPSR
 800f2be:	617b      	str	r3, [r7, #20]
  return(result);
 800f2c0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d028      	beq.n	800f318 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f2c6:	69bb      	ldr	r3, [r7, #24]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d005      	beq.n	800f2d8 <osMessageQueueGet+0x34>
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d002      	beq.n	800f2d8 <osMessageQueueGet+0x34>
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d003      	beq.n	800f2e0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800f2d8:	f06f 0303 	mvn.w	r3, #3
 800f2dc:	61fb      	str	r3, [r7, #28]
 800f2de:	e037      	b.n	800f350 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f2e4:	f107 0310 	add.w	r3, r7, #16
 800f2e8:	461a      	mov	r2, r3
 800f2ea:	68b9      	ldr	r1, [r7, #8]
 800f2ec:	69b8      	ldr	r0, [r7, #24]
 800f2ee:	f000 fcd7 	bl	800fca0 <xQueueReceiveFromISR>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	2b01      	cmp	r3, #1
 800f2f6:	d003      	beq.n	800f300 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800f2f8:	f06f 0302 	mvn.w	r3, #2
 800f2fc:	61fb      	str	r3, [r7, #28]
 800f2fe:	e027      	b.n	800f350 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800f300:	693b      	ldr	r3, [r7, #16]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d024      	beq.n	800f350 <osMessageQueueGet+0xac>
 800f306:	4b15      	ldr	r3, [pc, #84]	; (800f35c <osMessageQueueGet+0xb8>)
 800f308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f30c:	601a      	str	r2, [r3, #0]
 800f30e:	f3bf 8f4f 	dsb	sy
 800f312:	f3bf 8f6f 	isb	sy
 800f316:	e01b      	b.n	800f350 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f318:	69bb      	ldr	r3, [r7, #24]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d002      	beq.n	800f324 <osMessageQueueGet+0x80>
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d103      	bne.n	800f32c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800f324:	f06f 0303 	mvn.w	r3, #3
 800f328:	61fb      	str	r3, [r7, #28]
 800f32a:	e011      	b.n	800f350 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f32c:	683a      	ldr	r2, [r7, #0]
 800f32e:	68b9      	ldr	r1, [r7, #8]
 800f330:	69b8      	ldr	r0, [r7, #24]
 800f332:	f000 fbd5 	bl	800fae0 <xQueueReceive>
 800f336:	4603      	mov	r3, r0
 800f338:	2b01      	cmp	r3, #1
 800f33a:	d009      	beq.n	800f350 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d003      	beq.n	800f34a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800f342:	f06f 0301 	mvn.w	r3, #1
 800f346:	61fb      	str	r3, [r7, #28]
 800f348:	e002      	b.n	800f350 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800f34a:	f06f 0302 	mvn.w	r3, #2
 800f34e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f350:	69fb      	ldr	r3, [r7, #28]
}
 800f352:	4618      	mov	r0, r3
 800f354:	3720      	adds	r7, #32
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}
 800f35a:	bf00      	nop
 800f35c:	e000ed04 	.word	0xe000ed04

0800f360 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f360:	b480      	push	{r7}
 800f362:	b085      	sub	sp, #20
 800f364:	af00      	add	r7, sp, #0
 800f366:	60f8      	str	r0, [r7, #12]
 800f368:	60b9      	str	r1, [r7, #8]
 800f36a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	4a07      	ldr	r2, [pc, #28]	; (800f38c <vApplicationGetIdleTaskMemory+0x2c>)
 800f370:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	4a06      	ldr	r2, [pc, #24]	; (800f390 <vApplicationGetIdleTaskMemory+0x30>)
 800f376:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2280      	movs	r2, #128	; 0x80
 800f37c:	601a      	str	r2, [r3, #0]
}
 800f37e:	bf00      	nop
 800f380:	3714      	adds	r7, #20
 800f382:	46bd      	mov	sp, r7
 800f384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f388:	4770      	bx	lr
 800f38a:	bf00      	nop
 800f38c:	2000160c 	.word	0x2000160c
 800f390:	200016cc 	.word	0x200016cc

0800f394 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f394:	b480      	push	{r7}
 800f396:	b085      	sub	sp, #20
 800f398:	af00      	add	r7, sp, #0
 800f39a:	60f8      	str	r0, [r7, #12]
 800f39c:	60b9      	str	r1, [r7, #8]
 800f39e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	4a07      	ldr	r2, [pc, #28]	; (800f3c0 <vApplicationGetTimerTaskMemory+0x2c>)
 800f3a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	4a06      	ldr	r2, [pc, #24]	; (800f3c4 <vApplicationGetTimerTaskMemory+0x30>)
 800f3aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f3b2:	601a      	str	r2, [r3, #0]
}
 800f3b4:	bf00      	nop
 800f3b6:	3714      	adds	r7, #20
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3be:	4770      	bx	lr
 800f3c0:	200018cc 	.word	0x200018cc
 800f3c4:	2000198c 	.word	0x2000198c

0800f3c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f3c8:	b480      	push	{r7}
 800f3ca:	b083      	sub	sp, #12
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f103 0208 	add.w	r2, r3, #8
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f04f 32ff 	mov.w	r2, #4294967295
 800f3e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	f103 0208 	add.w	r2, r3, #8
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f103 0208 	add.w	r2, r3, #8
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f3fc:	bf00      	nop
 800f3fe:	370c      	adds	r7, #12
 800f400:	46bd      	mov	sp, r7
 800f402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f406:	4770      	bx	lr

0800f408 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f408:	b480      	push	{r7}
 800f40a:	b083      	sub	sp, #12
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2200      	movs	r2, #0
 800f414:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f416:	bf00      	nop
 800f418:	370c      	adds	r7, #12
 800f41a:	46bd      	mov	sp, r7
 800f41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f420:	4770      	bx	lr

0800f422 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f422:	b480      	push	{r7}
 800f424:	b085      	sub	sp, #20
 800f426:	af00      	add	r7, sp, #0
 800f428:	6078      	str	r0, [r7, #4]
 800f42a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	685b      	ldr	r3, [r3, #4]
 800f430:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	68fa      	ldr	r2, [r7, #12]
 800f436:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	689a      	ldr	r2, [r3, #8]
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	689b      	ldr	r3, [r3, #8]
 800f444:	683a      	ldr	r2, [r7, #0]
 800f446:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	683a      	ldr	r2, [r7, #0]
 800f44c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	687a      	ldr	r2, [r7, #4]
 800f452:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	1c5a      	adds	r2, r3, #1
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	601a      	str	r2, [r3, #0]
}
 800f45e:	bf00      	nop
 800f460:	3714      	adds	r7, #20
 800f462:	46bd      	mov	sp, r7
 800f464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f468:	4770      	bx	lr

0800f46a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f46a:	b480      	push	{r7}
 800f46c:	b085      	sub	sp, #20
 800f46e:	af00      	add	r7, sp, #0
 800f470:	6078      	str	r0, [r7, #4]
 800f472:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f480:	d103      	bne.n	800f48a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	691b      	ldr	r3, [r3, #16]
 800f486:	60fb      	str	r3, [r7, #12]
 800f488:	e00c      	b.n	800f4a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	3308      	adds	r3, #8
 800f48e:	60fb      	str	r3, [r7, #12]
 800f490:	e002      	b.n	800f498 <vListInsert+0x2e>
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	685b      	ldr	r3, [r3, #4]
 800f496:	60fb      	str	r3, [r7, #12]
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	68ba      	ldr	r2, [r7, #8]
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	d2f6      	bcs.n	800f492 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	685a      	ldr	r2, [r3, #4]
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	685b      	ldr	r3, [r3, #4]
 800f4b0:	683a      	ldr	r2, [r7, #0]
 800f4b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	68fa      	ldr	r2, [r7, #12]
 800f4b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	683a      	ldr	r2, [r7, #0]
 800f4be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	687a      	ldr	r2, [r7, #4]
 800f4c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	1c5a      	adds	r2, r3, #1
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	601a      	str	r2, [r3, #0]
}
 800f4d0:	bf00      	nop
 800f4d2:	3714      	adds	r7, #20
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4da:	4770      	bx	lr

0800f4dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f4dc:	b480      	push	{r7}
 800f4de:	b085      	sub	sp, #20
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	691b      	ldr	r3, [r3, #16]
 800f4e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	685b      	ldr	r3, [r3, #4]
 800f4ee:	687a      	ldr	r2, [r7, #4]
 800f4f0:	6892      	ldr	r2, [r2, #8]
 800f4f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	689b      	ldr	r3, [r3, #8]
 800f4f8:	687a      	ldr	r2, [r7, #4]
 800f4fa:	6852      	ldr	r2, [r2, #4]
 800f4fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	685b      	ldr	r3, [r3, #4]
 800f502:	687a      	ldr	r2, [r7, #4]
 800f504:	429a      	cmp	r2, r3
 800f506:	d103      	bne.n	800f510 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	689a      	ldr	r2, [r3, #8]
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2200      	movs	r2, #0
 800f514:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	1e5a      	subs	r2, r3, #1
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	681b      	ldr	r3, [r3, #0]
}
 800f524:	4618      	mov	r0, r3
 800f526:	3714      	adds	r7, #20
 800f528:	46bd      	mov	sp, r7
 800f52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52e:	4770      	bx	lr

0800f530 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b084      	sub	sp, #16
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d10a      	bne.n	800f55a <xQueueGenericReset+0x2a>
	__asm volatile
 800f544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f548:	f383 8811 	msr	BASEPRI, r3
 800f54c:	f3bf 8f6f 	isb	sy
 800f550:	f3bf 8f4f 	dsb	sy
 800f554:	60bb      	str	r3, [r7, #8]
}
 800f556:	bf00      	nop
 800f558:	e7fe      	b.n	800f558 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f55a:	f002 fb53 	bl	8011c04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681a      	ldr	r2, [r3, #0]
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f566:	68f9      	ldr	r1, [r7, #12]
 800f568:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f56a:	fb01 f303 	mul.w	r3, r1, r3
 800f56e:	441a      	add	r2, r3
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	2200      	movs	r2, #0
 800f578:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	681a      	ldr	r2, [r3, #0]
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	681a      	ldr	r2, [r3, #0]
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f58a:	3b01      	subs	r3, #1
 800f58c:	68f9      	ldr	r1, [r7, #12]
 800f58e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f590:	fb01 f303 	mul.w	r3, r1, r3
 800f594:	441a      	add	r2, r3
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	22ff      	movs	r2, #255	; 0xff
 800f59e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	22ff      	movs	r2, #255	; 0xff
 800f5a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d114      	bne.n	800f5da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	691b      	ldr	r3, [r3, #16]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d01a      	beq.n	800f5ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	3310      	adds	r3, #16
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f001 fa05 	bl	80109cc <xTaskRemoveFromEventList>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d012      	beq.n	800f5ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f5c8:	4b0c      	ldr	r3, [pc, #48]	; (800f5fc <xQueueGenericReset+0xcc>)
 800f5ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5ce:	601a      	str	r2, [r3, #0]
 800f5d0:	f3bf 8f4f 	dsb	sy
 800f5d4:	f3bf 8f6f 	isb	sy
 800f5d8:	e009      	b.n	800f5ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	3310      	adds	r3, #16
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f7ff fef2 	bl	800f3c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	3324      	adds	r3, #36	; 0x24
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f7ff feed 	bl	800f3c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f5ee:	f002 fb39 	bl	8011c64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f5f2:	2301      	movs	r3, #1
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3710      	adds	r7, #16
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}
 800f5fc:	e000ed04 	.word	0xe000ed04

0800f600 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f600:	b580      	push	{r7, lr}
 800f602:	b08e      	sub	sp, #56	; 0x38
 800f604:	af02      	add	r7, sp, #8
 800f606:	60f8      	str	r0, [r7, #12]
 800f608:	60b9      	str	r1, [r7, #8]
 800f60a:	607a      	str	r2, [r7, #4]
 800f60c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d10a      	bne.n	800f62a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f618:	f383 8811 	msr	BASEPRI, r3
 800f61c:	f3bf 8f6f 	isb	sy
 800f620:	f3bf 8f4f 	dsb	sy
 800f624:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f626:	bf00      	nop
 800f628:	e7fe      	b.n	800f628 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d10a      	bne.n	800f646 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f634:	f383 8811 	msr	BASEPRI, r3
 800f638:	f3bf 8f6f 	isb	sy
 800f63c:	f3bf 8f4f 	dsb	sy
 800f640:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f642:	bf00      	nop
 800f644:	e7fe      	b.n	800f644 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d002      	beq.n	800f652 <xQueueGenericCreateStatic+0x52>
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d001      	beq.n	800f656 <xQueueGenericCreateStatic+0x56>
 800f652:	2301      	movs	r3, #1
 800f654:	e000      	b.n	800f658 <xQueueGenericCreateStatic+0x58>
 800f656:	2300      	movs	r3, #0
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d10a      	bne.n	800f672 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f660:	f383 8811 	msr	BASEPRI, r3
 800f664:	f3bf 8f6f 	isb	sy
 800f668:	f3bf 8f4f 	dsb	sy
 800f66c:	623b      	str	r3, [r7, #32]
}
 800f66e:	bf00      	nop
 800f670:	e7fe      	b.n	800f670 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d102      	bne.n	800f67e <xQueueGenericCreateStatic+0x7e>
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d101      	bne.n	800f682 <xQueueGenericCreateStatic+0x82>
 800f67e:	2301      	movs	r3, #1
 800f680:	e000      	b.n	800f684 <xQueueGenericCreateStatic+0x84>
 800f682:	2300      	movs	r3, #0
 800f684:	2b00      	cmp	r3, #0
 800f686:	d10a      	bne.n	800f69e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f68c:	f383 8811 	msr	BASEPRI, r3
 800f690:	f3bf 8f6f 	isb	sy
 800f694:	f3bf 8f4f 	dsb	sy
 800f698:	61fb      	str	r3, [r7, #28]
}
 800f69a:	bf00      	nop
 800f69c:	e7fe      	b.n	800f69c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f69e:	2350      	movs	r3, #80	; 0x50
 800f6a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	2b50      	cmp	r3, #80	; 0x50
 800f6a6:	d00a      	beq.n	800f6be <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ac:	f383 8811 	msr	BASEPRI, r3
 800f6b0:	f3bf 8f6f 	isb	sy
 800f6b4:	f3bf 8f4f 	dsb	sy
 800f6b8:	61bb      	str	r3, [r7, #24]
}
 800f6ba:	bf00      	nop
 800f6bc:	e7fe      	b.n	800f6bc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f6be:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d00d      	beq.n	800f6e6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6cc:	2201      	movs	r2, #1
 800f6ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f6d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6d8:	9300      	str	r3, [sp, #0]
 800f6da:	4613      	mov	r3, r2
 800f6dc:	687a      	ldr	r2, [r7, #4]
 800f6de:	68b9      	ldr	r1, [r7, #8]
 800f6e0:	68f8      	ldr	r0, [r7, #12]
 800f6e2:	f000 f83f 	bl	800f764 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	3730      	adds	r7, #48	; 0x30
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}

0800f6f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b08a      	sub	sp, #40	; 0x28
 800f6f4:	af02      	add	r7, sp, #8
 800f6f6:	60f8      	str	r0, [r7, #12]
 800f6f8:	60b9      	str	r1, [r7, #8]
 800f6fa:	4613      	mov	r3, r2
 800f6fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d10a      	bne.n	800f71a <xQueueGenericCreate+0x2a>
	__asm volatile
 800f704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f708:	f383 8811 	msr	BASEPRI, r3
 800f70c:	f3bf 8f6f 	isb	sy
 800f710:	f3bf 8f4f 	dsb	sy
 800f714:	613b      	str	r3, [r7, #16]
}
 800f716:	bf00      	nop
 800f718:	e7fe      	b.n	800f718 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	68ba      	ldr	r2, [r7, #8]
 800f71e:	fb02 f303 	mul.w	r3, r2, r3
 800f722:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f724:	69fb      	ldr	r3, [r7, #28]
 800f726:	3350      	adds	r3, #80	; 0x50
 800f728:	4618      	mov	r0, r3
 800f72a:	f002 fb8d 	bl	8011e48 <pvPortMalloc>
 800f72e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f730:	69bb      	ldr	r3, [r7, #24]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d011      	beq.n	800f75a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f736:	69bb      	ldr	r3, [r7, #24]
 800f738:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	3350      	adds	r3, #80	; 0x50
 800f73e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f740:	69bb      	ldr	r3, [r7, #24]
 800f742:	2200      	movs	r2, #0
 800f744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f748:	79fa      	ldrb	r2, [r7, #7]
 800f74a:	69bb      	ldr	r3, [r7, #24]
 800f74c:	9300      	str	r3, [sp, #0]
 800f74e:	4613      	mov	r3, r2
 800f750:	697a      	ldr	r2, [r7, #20]
 800f752:	68b9      	ldr	r1, [r7, #8]
 800f754:	68f8      	ldr	r0, [r7, #12]
 800f756:	f000 f805 	bl	800f764 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f75a:	69bb      	ldr	r3, [r7, #24]
	}
 800f75c:	4618      	mov	r0, r3
 800f75e:	3720      	adds	r7, #32
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}

0800f764 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b084      	sub	sp, #16
 800f768:	af00      	add	r7, sp, #0
 800f76a:	60f8      	str	r0, [r7, #12]
 800f76c:	60b9      	str	r1, [r7, #8]
 800f76e:	607a      	str	r2, [r7, #4]
 800f770:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f772:	68bb      	ldr	r3, [r7, #8]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d103      	bne.n	800f780 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f778:	69bb      	ldr	r3, [r7, #24]
 800f77a:	69ba      	ldr	r2, [r7, #24]
 800f77c:	601a      	str	r2, [r3, #0]
 800f77e:	e002      	b.n	800f786 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f780:	69bb      	ldr	r3, [r7, #24]
 800f782:	687a      	ldr	r2, [r7, #4]
 800f784:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f786:	69bb      	ldr	r3, [r7, #24]
 800f788:	68fa      	ldr	r2, [r7, #12]
 800f78a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f78c:	69bb      	ldr	r3, [r7, #24]
 800f78e:	68ba      	ldr	r2, [r7, #8]
 800f790:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f792:	2101      	movs	r1, #1
 800f794:	69b8      	ldr	r0, [r7, #24]
 800f796:	f7ff fecb 	bl	800f530 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f79a:	69bb      	ldr	r3, [r7, #24]
 800f79c:	78fa      	ldrb	r2, [r7, #3]
 800f79e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f7a2:	bf00      	nop
 800f7a4:	3710      	adds	r7, #16
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	bd80      	pop	{r7, pc}
	...

0800f7ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b08e      	sub	sp, #56	; 0x38
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	60f8      	str	r0, [r7, #12]
 800f7b4:	60b9      	str	r1, [r7, #8]
 800f7b6:	607a      	str	r2, [r7, #4]
 800f7b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d10a      	bne.n	800f7de <xQueueGenericSend+0x32>
	__asm volatile
 800f7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7cc:	f383 8811 	msr	BASEPRI, r3
 800f7d0:	f3bf 8f6f 	isb	sy
 800f7d4:	f3bf 8f4f 	dsb	sy
 800f7d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f7da:	bf00      	nop
 800f7dc:	e7fe      	b.n	800f7dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d103      	bne.n	800f7ec <xQueueGenericSend+0x40>
 800f7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d101      	bne.n	800f7f0 <xQueueGenericSend+0x44>
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	e000      	b.n	800f7f2 <xQueueGenericSend+0x46>
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d10a      	bne.n	800f80c <xQueueGenericSend+0x60>
	__asm volatile
 800f7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7fa:	f383 8811 	msr	BASEPRI, r3
 800f7fe:	f3bf 8f6f 	isb	sy
 800f802:	f3bf 8f4f 	dsb	sy
 800f806:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f808:	bf00      	nop
 800f80a:	e7fe      	b.n	800f80a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	2b02      	cmp	r3, #2
 800f810:	d103      	bne.n	800f81a <xQueueGenericSend+0x6e>
 800f812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f816:	2b01      	cmp	r3, #1
 800f818:	d101      	bne.n	800f81e <xQueueGenericSend+0x72>
 800f81a:	2301      	movs	r3, #1
 800f81c:	e000      	b.n	800f820 <xQueueGenericSend+0x74>
 800f81e:	2300      	movs	r3, #0
 800f820:	2b00      	cmp	r3, #0
 800f822:	d10a      	bne.n	800f83a <xQueueGenericSend+0x8e>
	__asm volatile
 800f824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f828:	f383 8811 	msr	BASEPRI, r3
 800f82c:	f3bf 8f6f 	isb	sy
 800f830:	f3bf 8f4f 	dsb	sy
 800f834:	623b      	str	r3, [r7, #32]
}
 800f836:	bf00      	nop
 800f838:	e7fe      	b.n	800f838 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f83a:	f001 fa89 	bl	8010d50 <xTaskGetSchedulerState>
 800f83e:	4603      	mov	r3, r0
 800f840:	2b00      	cmp	r3, #0
 800f842:	d102      	bne.n	800f84a <xQueueGenericSend+0x9e>
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d101      	bne.n	800f84e <xQueueGenericSend+0xa2>
 800f84a:	2301      	movs	r3, #1
 800f84c:	e000      	b.n	800f850 <xQueueGenericSend+0xa4>
 800f84e:	2300      	movs	r3, #0
 800f850:	2b00      	cmp	r3, #0
 800f852:	d10a      	bne.n	800f86a <xQueueGenericSend+0xbe>
	__asm volatile
 800f854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f858:	f383 8811 	msr	BASEPRI, r3
 800f85c:	f3bf 8f6f 	isb	sy
 800f860:	f3bf 8f4f 	dsb	sy
 800f864:	61fb      	str	r3, [r7, #28]
}
 800f866:	bf00      	nop
 800f868:	e7fe      	b.n	800f868 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f86a:	f002 f9cb 	bl	8011c04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f876:	429a      	cmp	r2, r3
 800f878:	d302      	bcc.n	800f880 <xQueueGenericSend+0xd4>
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	2b02      	cmp	r3, #2
 800f87e:	d129      	bne.n	800f8d4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f880:	683a      	ldr	r2, [r7, #0]
 800f882:	68b9      	ldr	r1, [r7, #8]
 800f884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f886:	f000 fa8b 	bl	800fda0 <prvCopyDataToQueue>
 800f88a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f890:	2b00      	cmp	r3, #0
 800f892:	d010      	beq.n	800f8b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f896:	3324      	adds	r3, #36	; 0x24
 800f898:	4618      	mov	r0, r3
 800f89a:	f001 f897 	bl	80109cc <xTaskRemoveFromEventList>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d013      	beq.n	800f8cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f8a4:	4b3f      	ldr	r3, [pc, #252]	; (800f9a4 <xQueueGenericSend+0x1f8>)
 800f8a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8aa:	601a      	str	r2, [r3, #0]
 800f8ac:	f3bf 8f4f 	dsb	sy
 800f8b0:	f3bf 8f6f 	isb	sy
 800f8b4:	e00a      	b.n	800f8cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d007      	beq.n	800f8cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f8bc:	4b39      	ldr	r3, [pc, #228]	; (800f9a4 <xQueueGenericSend+0x1f8>)
 800f8be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8c2:	601a      	str	r2, [r3, #0]
 800f8c4:	f3bf 8f4f 	dsb	sy
 800f8c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f8cc:	f002 f9ca 	bl	8011c64 <vPortExitCritical>
				return pdPASS;
 800f8d0:	2301      	movs	r3, #1
 800f8d2:	e063      	b.n	800f99c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d103      	bne.n	800f8e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f8da:	f002 f9c3 	bl	8011c64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f8de:	2300      	movs	r3, #0
 800f8e0:	e05c      	b.n	800f99c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f8e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d106      	bne.n	800f8f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f8e8:	f107 0314 	add.w	r3, r7, #20
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f001 f8d1 	bl	8010a94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f8f6:	f002 f9b5 	bl	8011c64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f8fa:	f000 fe21 	bl	8010540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f8fe:	f002 f981 	bl	8011c04 <vPortEnterCritical>
 800f902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f904:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f908:	b25b      	sxtb	r3, r3
 800f90a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f90e:	d103      	bne.n	800f918 <xQueueGenericSend+0x16c>
 800f910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f912:	2200      	movs	r2, #0
 800f914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f91a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f91e:	b25b      	sxtb	r3, r3
 800f920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f924:	d103      	bne.n	800f92e <xQueueGenericSend+0x182>
 800f926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f928:	2200      	movs	r2, #0
 800f92a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f92e:	f002 f999 	bl	8011c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f932:	1d3a      	adds	r2, r7, #4
 800f934:	f107 0314 	add.w	r3, r7, #20
 800f938:	4611      	mov	r1, r2
 800f93a:	4618      	mov	r0, r3
 800f93c:	f001 f8c0 	bl	8010ac0 <xTaskCheckForTimeOut>
 800f940:	4603      	mov	r3, r0
 800f942:	2b00      	cmp	r3, #0
 800f944:	d124      	bne.n	800f990 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f946:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f948:	f000 fb22 	bl	800ff90 <prvIsQueueFull>
 800f94c:	4603      	mov	r3, r0
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d018      	beq.n	800f984 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f954:	3310      	adds	r3, #16
 800f956:	687a      	ldr	r2, [r7, #4]
 800f958:	4611      	mov	r1, r2
 800f95a:	4618      	mov	r0, r3
 800f95c:	f000 ffe6 	bl	801092c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f962:	f000 faad 	bl	800fec0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f966:	f000 fdf9 	bl	801055c <xTaskResumeAll>
 800f96a:	4603      	mov	r3, r0
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	f47f af7c 	bne.w	800f86a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f972:	4b0c      	ldr	r3, [pc, #48]	; (800f9a4 <xQueueGenericSend+0x1f8>)
 800f974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f978:	601a      	str	r2, [r3, #0]
 800f97a:	f3bf 8f4f 	dsb	sy
 800f97e:	f3bf 8f6f 	isb	sy
 800f982:	e772      	b.n	800f86a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f986:	f000 fa9b 	bl	800fec0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f98a:	f000 fde7 	bl	801055c <xTaskResumeAll>
 800f98e:	e76c      	b.n	800f86a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f992:	f000 fa95 	bl	800fec0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f996:	f000 fde1 	bl	801055c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f99a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f99c:	4618      	mov	r0, r3
 800f99e:	3738      	adds	r7, #56	; 0x38
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}
 800f9a4:	e000ed04 	.word	0xe000ed04

0800f9a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b090      	sub	sp, #64	; 0x40
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	60f8      	str	r0, [r7, #12]
 800f9b0:	60b9      	str	r1, [r7, #8]
 800f9b2:	607a      	str	r2, [r7, #4]
 800f9b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d10a      	bne.n	800f9d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9c4:	f383 8811 	msr	BASEPRI, r3
 800f9c8:	f3bf 8f6f 	isb	sy
 800f9cc:	f3bf 8f4f 	dsb	sy
 800f9d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f9d2:	bf00      	nop
 800f9d4:	e7fe      	b.n	800f9d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d103      	bne.n	800f9e4 <xQueueGenericSendFromISR+0x3c>
 800f9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d101      	bne.n	800f9e8 <xQueueGenericSendFromISR+0x40>
 800f9e4:	2301      	movs	r3, #1
 800f9e6:	e000      	b.n	800f9ea <xQueueGenericSendFromISR+0x42>
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d10a      	bne.n	800fa04 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9f2:	f383 8811 	msr	BASEPRI, r3
 800f9f6:	f3bf 8f6f 	isb	sy
 800f9fa:	f3bf 8f4f 	dsb	sy
 800f9fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fa00:	bf00      	nop
 800fa02:	e7fe      	b.n	800fa02 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	2b02      	cmp	r3, #2
 800fa08:	d103      	bne.n	800fa12 <xQueueGenericSendFromISR+0x6a>
 800fa0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa0e:	2b01      	cmp	r3, #1
 800fa10:	d101      	bne.n	800fa16 <xQueueGenericSendFromISR+0x6e>
 800fa12:	2301      	movs	r3, #1
 800fa14:	e000      	b.n	800fa18 <xQueueGenericSendFromISR+0x70>
 800fa16:	2300      	movs	r3, #0
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d10a      	bne.n	800fa32 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800fa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa20:	f383 8811 	msr	BASEPRI, r3
 800fa24:	f3bf 8f6f 	isb	sy
 800fa28:	f3bf 8f4f 	dsb	sy
 800fa2c:	623b      	str	r3, [r7, #32]
}
 800fa2e:	bf00      	nop
 800fa30:	e7fe      	b.n	800fa30 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fa32:	f002 f9c9 	bl	8011dc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fa36:	f3ef 8211 	mrs	r2, BASEPRI
 800fa3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa3e:	f383 8811 	msr	BASEPRI, r3
 800fa42:	f3bf 8f6f 	isb	sy
 800fa46:	f3bf 8f4f 	dsb	sy
 800fa4a:	61fa      	str	r2, [r7, #28]
 800fa4c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fa4e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fa50:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fa52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	d302      	bcc.n	800fa64 <xQueueGenericSendFromISR+0xbc>
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	2b02      	cmp	r3, #2
 800fa62:	d12f      	bne.n	800fac4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fa64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fa6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fa6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa72:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fa74:	683a      	ldr	r2, [r7, #0]
 800fa76:	68b9      	ldr	r1, [r7, #8]
 800fa78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fa7a:	f000 f991 	bl	800fda0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fa7e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800fa82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa86:	d112      	bne.n	800faae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fa88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d016      	beq.n	800fabe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fa90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa92:	3324      	adds	r3, #36	; 0x24
 800fa94:	4618      	mov	r0, r3
 800fa96:	f000 ff99 	bl	80109cc <xTaskRemoveFromEventList>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d00e      	beq.n	800fabe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d00b      	beq.n	800fabe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2201      	movs	r2, #1
 800faaa:	601a      	str	r2, [r3, #0]
 800faac:	e007      	b.n	800fabe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800faae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fab2:	3301      	adds	r3, #1
 800fab4:	b2db      	uxtb	r3, r3
 800fab6:	b25a      	sxtb	r2, r3
 800fab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fabe:	2301      	movs	r3, #1
 800fac0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800fac2:	e001      	b.n	800fac8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fac4:	2300      	movs	r3, #0
 800fac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fad2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fad6:	4618      	mov	r0, r3
 800fad8:	3740      	adds	r7, #64	; 0x40
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}
	...

0800fae0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b08c      	sub	sp, #48	; 0x30
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	60f8      	str	r0, [r7, #12]
 800fae8:	60b9      	str	r1, [r7, #8]
 800faea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800faec:	2300      	movs	r3, #0
 800faee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800faf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d10a      	bne.n	800fb10 <xQueueReceive+0x30>
	__asm volatile
 800fafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fafe:	f383 8811 	msr	BASEPRI, r3
 800fb02:	f3bf 8f6f 	isb	sy
 800fb06:	f3bf 8f4f 	dsb	sy
 800fb0a:	623b      	str	r3, [r7, #32]
}
 800fb0c:	bf00      	nop
 800fb0e:	e7fe      	b.n	800fb0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fb10:	68bb      	ldr	r3, [r7, #8]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d103      	bne.n	800fb1e <xQueueReceive+0x3e>
 800fb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d101      	bne.n	800fb22 <xQueueReceive+0x42>
 800fb1e:	2301      	movs	r3, #1
 800fb20:	e000      	b.n	800fb24 <xQueueReceive+0x44>
 800fb22:	2300      	movs	r3, #0
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d10a      	bne.n	800fb3e <xQueueReceive+0x5e>
	__asm volatile
 800fb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb2c:	f383 8811 	msr	BASEPRI, r3
 800fb30:	f3bf 8f6f 	isb	sy
 800fb34:	f3bf 8f4f 	dsb	sy
 800fb38:	61fb      	str	r3, [r7, #28]
}
 800fb3a:	bf00      	nop
 800fb3c:	e7fe      	b.n	800fb3c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fb3e:	f001 f907 	bl	8010d50 <xTaskGetSchedulerState>
 800fb42:	4603      	mov	r3, r0
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d102      	bne.n	800fb4e <xQueueReceive+0x6e>
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d101      	bne.n	800fb52 <xQueueReceive+0x72>
 800fb4e:	2301      	movs	r3, #1
 800fb50:	e000      	b.n	800fb54 <xQueueReceive+0x74>
 800fb52:	2300      	movs	r3, #0
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d10a      	bne.n	800fb6e <xQueueReceive+0x8e>
	__asm volatile
 800fb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb5c:	f383 8811 	msr	BASEPRI, r3
 800fb60:	f3bf 8f6f 	isb	sy
 800fb64:	f3bf 8f4f 	dsb	sy
 800fb68:	61bb      	str	r3, [r7, #24]
}
 800fb6a:	bf00      	nop
 800fb6c:	e7fe      	b.n	800fb6c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fb6e:	f002 f849 	bl	8011c04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fb72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb76:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d01f      	beq.n	800fbbe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fb7e:	68b9      	ldr	r1, [r7, #8]
 800fb80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb82:	f000 f977 	bl	800fe74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb88:	1e5a      	subs	r2, r3, #1
 800fb8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb8c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb90:	691b      	ldr	r3, [r3, #16]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d00f      	beq.n	800fbb6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb98:	3310      	adds	r3, #16
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f000 ff16 	bl	80109cc <xTaskRemoveFromEventList>
 800fba0:	4603      	mov	r3, r0
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d007      	beq.n	800fbb6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fba6:	4b3d      	ldr	r3, [pc, #244]	; (800fc9c <xQueueReceive+0x1bc>)
 800fba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbac:	601a      	str	r2, [r3, #0]
 800fbae:	f3bf 8f4f 	dsb	sy
 800fbb2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fbb6:	f002 f855 	bl	8011c64 <vPortExitCritical>
				return pdPASS;
 800fbba:	2301      	movs	r3, #1
 800fbbc:	e069      	b.n	800fc92 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d103      	bne.n	800fbcc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fbc4:	f002 f84e 	bl	8011c64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fbc8:	2300      	movs	r3, #0
 800fbca:	e062      	b.n	800fc92 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d106      	bne.n	800fbe0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fbd2:	f107 0310 	add.w	r3, r7, #16
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f000 ff5c 	bl	8010a94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fbdc:	2301      	movs	r3, #1
 800fbde:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fbe0:	f002 f840 	bl	8011c64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fbe4:	f000 fcac 	bl	8010540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fbe8:	f002 f80c 	bl	8011c04 <vPortEnterCritical>
 800fbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fbf2:	b25b      	sxtb	r3, r3
 800fbf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbf8:	d103      	bne.n	800fc02 <xQueueReceive+0x122>
 800fbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fc08:	b25b      	sxtb	r3, r3
 800fc0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc0e:	d103      	bne.n	800fc18 <xQueueReceive+0x138>
 800fc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc12:	2200      	movs	r2, #0
 800fc14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fc18:	f002 f824 	bl	8011c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fc1c:	1d3a      	adds	r2, r7, #4
 800fc1e:	f107 0310 	add.w	r3, r7, #16
 800fc22:	4611      	mov	r1, r2
 800fc24:	4618      	mov	r0, r3
 800fc26:	f000 ff4b 	bl	8010ac0 <xTaskCheckForTimeOut>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d123      	bne.n	800fc78 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fc30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc32:	f000 f997 	bl	800ff64 <prvIsQueueEmpty>
 800fc36:	4603      	mov	r3, r0
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d017      	beq.n	800fc6c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc3e:	3324      	adds	r3, #36	; 0x24
 800fc40:	687a      	ldr	r2, [r7, #4]
 800fc42:	4611      	mov	r1, r2
 800fc44:	4618      	mov	r0, r3
 800fc46:	f000 fe71 	bl	801092c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fc4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc4c:	f000 f938 	bl	800fec0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fc50:	f000 fc84 	bl	801055c <xTaskResumeAll>
 800fc54:	4603      	mov	r3, r0
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d189      	bne.n	800fb6e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800fc5a:	4b10      	ldr	r3, [pc, #64]	; (800fc9c <xQueueReceive+0x1bc>)
 800fc5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc60:	601a      	str	r2, [r3, #0]
 800fc62:	f3bf 8f4f 	dsb	sy
 800fc66:	f3bf 8f6f 	isb	sy
 800fc6a:	e780      	b.n	800fb6e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fc6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc6e:	f000 f927 	bl	800fec0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fc72:	f000 fc73 	bl	801055c <xTaskResumeAll>
 800fc76:	e77a      	b.n	800fb6e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fc78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc7a:	f000 f921 	bl	800fec0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fc7e:	f000 fc6d 	bl	801055c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fc82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc84:	f000 f96e 	bl	800ff64 <prvIsQueueEmpty>
 800fc88:	4603      	mov	r3, r0
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	f43f af6f 	beq.w	800fb6e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fc90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fc92:	4618      	mov	r0, r3
 800fc94:	3730      	adds	r7, #48	; 0x30
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd80      	pop	{r7, pc}
 800fc9a:	bf00      	nop
 800fc9c:	e000ed04 	.word	0xe000ed04

0800fca0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b08e      	sub	sp, #56	; 0x38
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	60f8      	str	r0, [r7, #12]
 800fca8:	60b9      	str	r1, [r7, #8]
 800fcaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fcb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d10a      	bne.n	800fccc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800fcb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcba:	f383 8811 	msr	BASEPRI, r3
 800fcbe:	f3bf 8f6f 	isb	sy
 800fcc2:	f3bf 8f4f 	dsb	sy
 800fcc6:	623b      	str	r3, [r7, #32]
}
 800fcc8:	bf00      	nop
 800fcca:	e7fe      	b.n	800fcca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fccc:	68bb      	ldr	r3, [r7, #8]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d103      	bne.n	800fcda <xQueueReceiveFromISR+0x3a>
 800fcd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d101      	bne.n	800fcde <xQueueReceiveFromISR+0x3e>
 800fcda:	2301      	movs	r3, #1
 800fcdc:	e000      	b.n	800fce0 <xQueueReceiveFromISR+0x40>
 800fcde:	2300      	movs	r3, #0
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d10a      	bne.n	800fcfa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800fce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce8:	f383 8811 	msr	BASEPRI, r3
 800fcec:	f3bf 8f6f 	isb	sy
 800fcf0:	f3bf 8f4f 	dsb	sy
 800fcf4:	61fb      	str	r3, [r7, #28]
}
 800fcf6:	bf00      	nop
 800fcf8:	e7fe      	b.n	800fcf8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fcfa:	f002 f865 	bl	8011dc8 <vPortValidateInterruptPriority>
	__asm volatile
 800fcfe:	f3ef 8211 	mrs	r2, BASEPRI
 800fd02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd06:	f383 8811 	msr	BASEPRI, r3
 800fd0a:	f3bf 8f6f 	isb	sy
 800fd0e:	f3bf 8f4f 	dsb	sy
 800fd12:	61ba      	str	r2, [r7, #24]
 800fd14:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fd16:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fd18:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd1e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d02f      	beq.n	800fd86 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fd2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fd30:	68b9      	ldr	r1, [r7, #8]
 800fd32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd34:	f000 f89e 	bl	800fe74 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd3a:	1e5a      	subs	r2, r3, #1
 800fd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd3e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fd40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fd44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd48:	d112      	bne.n	800fd70 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd4c:	691b      	ldr	r3, [r3, #16]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d016      	beq.n	800fd80 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd54:	3310      	adds	r3, #16
 800fd56:	4618      	mov	r0, r3
 800fd58:	f000 fe38 	bl	80109cc <xTaskRemoveFromEventList>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d00e      	beq.n	800fd80 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d00b      	beq.n	800fd80 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2201      	movs	r2, #1
 800fd6c:	601a      	str	r2, [r3, #0]
 800fd6e:	e007      	b.n	800fd80 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800fd70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd74:	3301      	adds	r3, #1
 800fd76:	b2db      	uxtb	r3, r3
 800fd78:	b25a      	sxtb	r2, r3
 800fd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800fd80:	2301      	movs	r3, #1
 800fd82:	637b      	str	r3, [r7, #52]	; 0x34
 800fd84:	e001      	b.n	800fd8a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800fd86:	2300      	movs	r3, #0
 800fd88:	637b      	str	r3, [r7, #52]	; 0x34
 800fd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd8c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	f383 8811 	msr	BASEPRI, r3
}
 800fd94:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fd96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3738      	adds	r7, #56	; 0x38
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}

0800fda0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b086      	sub	sp, #24
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	60f8      	str	r0, [r7, #12]
 800fda8:	60b9      	str	r1, [r7, #8]
 800fdaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fdac:	2300      	movs	r3, #0
 800fdae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d10d      	bne.n	800fdda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d14d      	bne.n	800fe62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	689b      	ldr	r3, [r3, #8]
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f000 ffde 	bl	8010d8c <xTaskPriorityDisinherit>
 800fdd0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	609a      	str	r2, [r3, #8]
 800fdd8:	e043      	b.n	800fe62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d119      	bne.n	800fe14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	6858      	ldr	r0, [r3, #4]
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fde8:	461a      	mov	r2, r3
 800fdea:	68b9      	ldr	r1, [r7, #8]
 800fdec:	f002 fb79 	bl	80124e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	685a      	ldr	r2, [r3, #4]
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdf8:	441a      	add	r2, r3
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	685a      	ldr	r2, [r3, #4]
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	689b      	ldr	r3, [r3, #8]
 800fe06:	429a      	cmp	r2, r3
 800fe08:	d32b      	bcc.n	800fe62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	681a      	ldr	r2, [r3, #0]
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	605a      	str	r2, [r3, #4]
 800fe12:	e026      	b.n	800fe62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	68d8      	ldr	r0, [r3, #12]
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe1c:	461a      	mov	r2, r3
 800fe1e:	68b9      	ldr	r1, [r7, #8]
 800fe20:	f002 fb5f 	bl	80124e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	68da      	ldr	r2, [r3, #12]
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe2c:	425b      	negs	r3, r3
 800fe2e:	441a      	add	r2, r3
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	68da      	ldr	r2, [r3, #12]
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d207      	bcs.n	800fe50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	689a      	ldr	r2, [r3, #8]
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe48:	425b      	negs	r3, r3
 800fe4a:	441a      	add	r2, r3
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	2b02      	cmp	r3, #2
 800fe54:	d105      	bne.n	800fe62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fe56:	693b      	ldr	r3, [r7, #16]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d002      	beq.n	800fe62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fe5c:	693b      	ldr	r3, [r7, #16]
 800fe5e:	3b01      	subs	r3, #1
 800fe60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fe62:	693b      	ldr	r3, [r7, #16]
 800fe64:	1c5a      	adds	r2, r3, #1
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800fe6a:	697b      	ldr	r3, [r7, #20]
}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	3718      	adds	r7, #24
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b082      	sub	sp, #8
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d018      	beq.n	800feb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	68da      	ldr	r2, [r3, #12]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe8e:	441a      	add	r2, r3
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	68da      	ldr	r2, [r3, #12]
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	689b      	ldr	r3, [r3, #8]
 800fe9c:	429a      	cmp	r2, r3
 800fe9e:	d303      	bcc.n	800fea8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681a      	ldr	r2, [r3, #0]
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	68d9      	ldr	r1, [r3, #12]
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800feb0:	461a      	mov	r2, r3
 800feb2:	6838      	ldr	r0, [r7, #0]
 800feb4:	f002 fb15 	bl	80124e2 <memcpy>
	}
}
 800feb8:	bf00      	nop
 800feba:	3708      	adds	r7, #8
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}

0800fec0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b084      	sub	sp, #16
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fec8:	f001 fe9c 	bl	8011c04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fed2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fed4:	e011      	b.n	800fefa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d012      	beq.n	800ff04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	3324      	adds	r3, #36	; 0x24
 800fee2:	4618      	mov	r0, r3
 800fee4:	f000 fd72 	bl	80109cc <xTaskRemoveFromEventList>
 800fee8:	4603      	mov	r3, r0
 800feea:	2b00      	cmp	r3, #0
 800feec:	d001      	beq.n	800fef2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800feee:	f000 fe49 	bl	8010b84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fef2:	7bfb      	ldrb	r3, [r7, #15]
 800fef4:	3b01      	subs	r3, #1
 800fef6:	b2db      	uxtb	r3, r3
 800fef8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fefa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	dce9      	bgt.n	800fed6 <prvUnlockQueue+0x16>
 800ff02:	e000      	b.n	800ff06 <prvUnlockQueue+0x46>
					break;
 800ff04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	22ff      	movs	r2, #255	; 0xff
 800ff0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ff0e:	f001 fea9 	bl	8011c64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ff12:	f001 fe77 	bl	8011c04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ff1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff1e:	e011      	b.n	800ff44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	691b      	ldr	r3, [r3, #16]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d012      	beq.n	800ff4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	3310      	adds	r3, #16
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f000 fd4d 	bl	80109cc <xTaskRemoveFromEventList>
 800ff32:	4603      	mov	r3, r0
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d001      	beq.n	800ff3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ff38:	f000 fe24 	bl	8010b84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ff3c:	7bbb      	ldrb	r3, [r7, #14]
 800ff3e:	3b01      	subs	r3, #1
 800ff40:	b2db      	uxtb	r3, r3
 800ff42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	dce9      	bgt.n	800ff20 <prvUnlockQueue+0x60>
 800ff4c:	e000      	b.n	800ff50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ff4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	22ff      	movs	r2, #255	; 0xff
 800ff54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ff58:	f001 fe84 	bl	8011c64 <vPortExitCritical>
}
 800ff5c:	bf00      	nop
 800ff5e:	3710      	adds	r7, #16
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}

0800ff64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b084      	sub	sp, #16
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ff6c:	f001 fe4a 	bl	8011c04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d102      	bne.n	800ff7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ff78:	2301      	movs	r3, #1
 800ff7a:	60fb      	str	r3, [r7, #12]
 800ff7c:	e001      	b.n	800ff82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ff82:	f001 fe6f 	bl	8011c64 <vPortExitCritical>

	return xReturn;
 800ff86:	68fb      	ldr	r3, [r7, #12]
}
 800ff88:	4618      	mov	r0, r3
 800ff8a:	3710      	adds	r7, #16
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	bd80      	pop	{r7, pc}

0800ff90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b084      	sub	sp, #16
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ff98:	f001 fe34 	bl	8011c04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	d102      	bne.n	800ffae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	60fb      	str	r3, [r7, #12]
 800ffac:	e001      	b.n	800ffb2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ffb2:	f001 fe57 	bl	8011c64 <vPortExitCritical>

	return xReturn;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3710      	adds	r7, #16
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}

0800ffc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ffc0:	b480      	push	{r7}
 800ffc2:	b085      	sub	sp, #20
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ffca:	2300      	movs	r3, #0
 800ffcc:	60fb      	str	r3, [r7, #12]
 800ffce:	e014      	b.n	800fffa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ffd0:	4a0f      	ldr	r2, [pc, #60]	; (8010010 <vQueueAddToRegistry+0x50>)
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d10b      	bne.n	800fff4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ffdc:	490c      	ldr	r1, [pc, #48]	; (8010010 <vQueueAddToRegistry+0x50>)
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	683a      	ldr	r2, [r7, #0]
 800ffe2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ffe6:	4a0a      	ldr	r2, [pc, #40]	; (8010010 <vQueueAddToRegistry+0x50>)
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	00db      	lsls	r3, r3, #3
 800ffec:	4413      	add	r3, r2
 800ffee:	687a      	ldr	r2, [r7, #4]
 800fff0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fff2:	e006      	b.n	8010002 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	3301      	adds	r3, #1
 800fff8:	60fb      	str	r3, [r7, #12]
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	2b07      	cmp	r3, #7
 800fffe:	d9e7      	bls.n	800ffd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010000:	bf00      	nop
 8010002:	bf00      	nop
 8010004:	3714      	adds	r7, #20
 8010006:	46bd      	mov	sp, r7
 8010008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000c:	4770      	bx	lr
 801000e:	bf00      	nop
 8010010:	20001d8c 	.word	0x20001d8c

08010014 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010014:	b580      	push	{r7, lr}
 8010016:	b086      	sub	sp, #24
 8010018:	af00      	add	r7, sp, #0
 801001a:	60f8      	str	r0, [r7, #12]
 801001c:	60b9      	str	r1, [r7, #8]
 801001e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010024:	f001 fdee 	bl	8011c04 <vPortEnterCritical>
 8010028:	697b      	ldr	r3, [r7, #20]
 801002a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801002e:	b25b      	sxtb	r3, r3
 8010030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010034:	d103      	bne.n	801003e <vQueueWaitForMessageRestricted+0x2a>
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	2200      	movs	r2, #0
 801003a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010044:	b25b      	sxtb	r3, r3
 8010046:	f1b3 3fff 	cmp.w	r3, #4294967295
 801004a:	d103      	bne.n	8010054 <vQueueWaitForMessageRestricted+0x40>
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	2200      	movs	r2, #0
 8010050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010054:	f001 fe06 	bl	8011c64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010058:	697b      	ldr	r3, [r7, #20]
 801005a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801005c:	2b00      	cmp	r3, #0
 801005e:	d106      	bne.n	801006e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010060:	697b      	ldr	r3, [r7, #20]
 8010062:	3324      	adds	r3, #36	; 0x24
 8010064:	687a      	ldr	r2, [r7, #4]
 8010066:	68b9      	ldr	r1, [r7, #8]
 8010068:	4618      	mov	r0, r3
 801006a:	f000 fc83 	bl	8010974 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801006e:	6978      	ldr	r0, [r7, #20]
 8010070:	f7ff ff26 	bl	800fec0 <prvUnlockQueue>
	}
 8010074:	bf00      	nop
 8010076:	3718      	adds	r7, #24
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}

0801007c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801007c:	b580      	push	{r7, lr}
 801007e:	b08e      	sub	sp, #56	; 0x38
 8010080:	af04      	add	r7, sp, #16
 8010082:	60f8      	str	r0, [r7, #12]
 8010084:	60b9      	str	r1, [r7, #8]
 8010086:	607a      	str	r2, [r7, #4]
 8010088:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801008a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801008c:	2b00      	cmp	r3, #0
 801008e:	d10a      	bne.n	80100a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8010090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010094:	f383 8811 	msr	BASEPRI, r3
 8010098:	f3bf 8f6f 	isb	sy
 801009c:	f3bf 8f4f 	dsb	sy
 80100a0:	623b      	str	r3, [r7, #32]
}
 80100a2:	bf00      	nop
 80100a4:	e7fe      	b.n	80100a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80100a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d10a      	bne.n	80100c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80100ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100b0:	f383 8811 	msr	BASEPRI, r3
 80100b4:	f3bf 8f6f 	isb	sy
 80100b8:	f3bf 8f4f 	dsb	sy
 80100bc:	61fb      	str	r3, [r7, #28]
}
 80100be:	bf00      	nop
 80100c0:	e7fe      	b.n	80100c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80100c2:	23c0      	movs	r3, #192	; 0xc0
 80100c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80100c6:	693b      	ldr	r3, [r7, #16]
 80100c8:	2bc0      	cmp	r3, #192	; 0xc0
 80100ca:	d00a      	beq.n	80100e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80100cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d0:	f383 8811 	msr	BASEPRI, r3
 80100d4:	f3bf 8f6f 	isb	sy
 80100d8:	f3bf 8f4f 	dsb	sy
 80100dc:	61bb      	str	r3, [r7, #24]
}
 80100de:	bf00      	nop
 80100e0:	e7fe      	b.n	80100e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80100e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80100e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d01e      	beq.n	8010128 <xTaskCreateStatic+0xac>
 80100ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d01b      	beq.n	8010128 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80100f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80100f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80100fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100fc:	2202      	movs	r2, #2
 80100fe:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010102:	2300      	movs	r3, #0
 8010104:	9303      	str	r3, [sp, #12]
 8010106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010108:	9302      	str	r3, [sp, #8]
 801010a:	f107 0314 	add.w	r3, r7, #20
 801010e:	9301      	str	r3, [sp, #4]
 8010110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010112:	9300      	str	r3, [sp, #0]
 8010114:	683b      	ldr	r3, [r7, #0]
 8010116:	687a      	ldr	r2, [r7, #4]
 8010118:	68b9      	ldr	r1, [r7, #8]
 801011a:	68f8      	ldr	r0, [r7, #12]
 801011c:	f000 f850 	bl	80101c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010120:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010122:	f000 f8f7 	bl	8010314 <prvAddNewTaskToReadyList>
 8010126:	e001      	b.n	801012c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010128:	2300      	movs	r3, #0
 801012a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801012c:	697b      	ldr	r3, [r7, #20]
	}
 801012e:	4618      	mov	r0, r3
 8010130:	3728      	adds	r7, #40	; 0x28
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}

08010136 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010136:	b580      	push	{r7, lr}
 8010138:	b08c      	sub	sp, #48	; 0x30
 801013a:	af04      	add	r7, sp, #16
 801013c:	60f8      	str	r0, [r7, #12]
 801013e:	60b9      	str	r1, [r7, #8]
 8010140:	603b      	str	r3, [r7, #0]
 8010142:	4613      	mov	r3, r2
 8010144:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010146:	88fb      	ldrh	r3, [r7, #6]
 8010148:	009b      	lsls	r3, r3, #2
 801014a:	4618      	mov	r0, r3
 801014c:	f001 fe7c 	bl	8011e48 <pvPortMalloc>
 8010150:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010152:	697b      	ldr	r3, [r7, #20]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d00e      	beq.n	8010176 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010158:	20c0      	movs	r0, #192	; 0xc0
 801015a:	f001 fe75 	bl	8011e48 <pvPortMalloc>
 801015e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010160:	69fb      	ldr	r3, [r7, #28]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d003      	beq.n	801016e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010166:	69fb      	ldr	r3, [r7, #28]
 8010168:	697a      	ldr	r2, [r7, #20]
 801016a:	631a      	str	r2, [r3, #48]	; 0x30
 801016c:	e005      	b.n	801017a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801016e:	6978      	ldr	r0, [r7, #20]
 8010170:	f001 ff36 	bl	8011fe0 <vPortFree>
 8010174:	e001      	b.n	801017a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010176:	2300      	movs	r3, #0
 8010178:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801017a:	69fb      	ldr	r3, [r7, #28]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d017      	beq.n	80101b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010180:	69fb      	ldr	r3, [r7, #28]
 8010182:	2200      	movs	r2, #0
 8010184:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010188:	88fa      	ldrh	r2, [r7, #6]
 801018a:	2300      	movs	r3, #0
 801018c:	9303      	str	r3, [sp, #12]
 801018e:	69fb      	ldr	r3, [r7, #28]
 8010190:	9302      	str	r3, [sp, #8]
 8010192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010194:	9301      	str	r3, [sp, #4]
 8010196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010198:	9300      	str	r3, [sp, #0]
 801019a:	683b      	ldr	r3, [r7, #0]
 801019c:	68b9      	ldr	r1, [r7, #8]
 801019e:	68f8      	ldr	r0, [r7, #12]
 80101a0:	f000 f80e 	bl	80101c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80101a4:	69f8      	ldr	r0, [r7, #28]
 80101a6:	f000 f8b5 	bl	8010314 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80101aa:	2301      	movs	r3, #1
 80101ac:	61bb      	str	r3, [r7, #24]
 80101ae:	e002      	b.n	80101b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80101b0:	f04f 33ff 	mov.w	r3, #4294967295
 80101b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80101b6:	69bb      	ldr	r3, [r7, #24]
	}
 80101b8:	4618      	mov	r0, r3
 80101ba:	3720      	adds	r7, #32
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}

080101c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b088      	sub	sp, #32
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	60f8      	str	r0, [r7, #12]
 80101c8:	60b9      	str	r1, [r7, #8]
 80101ca:	607a      	str	r2, [r7, #4]
 80101cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80101ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	009b      	lsls	r3, r3, #2
 80101d6:	461a      	mov	r2, r3
 80101d8:	21a5      	movs	r1, #165	; 0xa5
 80101da:	f002 f9aa 	bl	8012532 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80101de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80101e8:	3b01      	subs	r3, #1
 80101ea:	009b      	lsls	r3, r3, #2
 80101ec:	4413      	add	r3, r2
 80101ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80101f0:	69bb      	ldr	r3, [r7, #24]
 80101f2:	f023 0307 	bic.w	r3, r3, #7
 80101f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80101f8:	69bb      	ldr	r3, [r7, #24]
 80101fa:	f003 0307 	and.w	r3, r3, #7
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d00a      	beq.n	8010218 <prvInitialiseNewTask+0x58>
	__asm volatile
 8010202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010206:	f383 8811 	msr	BASEPRI, r3
 801020a:	f3bf 8f6f 	isb	sy
 801020e:	f3bf 8f4f 	dsb	sy
 8010212:	617b      	str	r3, [r7, #20]
}
 8010214:	bf00      	nop
 8010216:	e7fe      	b.n	8010216 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d01f      	beq.n	801025e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801021e:	2300      	movs	r3, #0
 8010220:	61fb      	str	r3, [r7, #28]
 8010222:	e012      	b.n	801024a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010224:	68ba      	ldr	r2, [r7, #8]
 8010226:	69fb      	ldr	r3, [r7, #28]
 8010228:	4413      	add	r3, r2
 801022a:	7819      	ldrb	r1, [r3, #0]
 801022c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801022e:	69fb      	ldr	r3, [r7, #28]
 8010230:	4413      	add	r3, r2
 8010232:	3334      	adds	r3, #52	; 0x34
 8010234:	460a      	mov	r2, r1
 8010236:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010238:	68ba      	ldr	r2, [r7, #8]
 801023a:	69fb      	ldr	r3, [r7, #28]
 801023c:	4413      	add	r3, r2
 801023e:	781b      	ldrb	r3, [r3, #0]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d006      	beq.n	8010252 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010244:	69fb      	ldr	r3, [r7, #28]
 8010246:	3301      	adds	r3, #1
 8010248:	61fb      	str	r3, [r7, #28]
 801024a:	69fb      	ldr	r3, [r7, #28]
 801024c:	2b0f      	cmp	r3, #15
 801024e:	d9e9      	bls.n	8010224 <prvInitialiseNewTask+0x64>
 8010250:	e000      	b.n	8010254 <prvInitialiseNewTask+0x94>
			{
				break;
 8010252:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010256:	2200      	movs	r2, #0
 8010258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801025c:	e003      	b.n	8010266 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801025e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010260:	2200      	movs	r2, #0
 8010262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010268:	2b37      	cmp	r3, #55	; 0x37
 801026a:	d901      	bls.n	8010270 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801026c:	2337      	movs	r3, #55	; 0x37
 801026e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010274:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801027a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801027c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801027e:	2200      	movs	r2, #0
 8010280:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010284:	3304      	adds	r3, #4
 8010286:	4618      	mov	r0, r3
 8010288:	f7ff f8be 	bl	800f408 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801028c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801028e:	3318      	adds	r3, #24
 8010290:	4618      	mov	r0, r3
 8010292:	f7ff f8b9 	bl	800f408 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801029a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801029c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801029e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80102a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80102a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80102ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ae:	2200      	movs	r2, #0
 80102b0:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80102b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b4:	2200      	movs	r2, #0
 80102b6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80102ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102bc:	2200      	movs	r2, #0
 80102be:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80102c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c4:	3358      	adds	r3, #88	; 0x58
 80102c6:	2260      	movs	r2, #96	; 0x60
 80102c8:	2100      	movs	r1, #0
 80102ca:	4618      	mov	r0, r3
 80102cc:	f002 f931 	bl	8012532 <memset>
 80102d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102d2:	4a0d      	ldr	r2, [pc, #52]	; (8010308 <prvInitialiseNewTask+0x148>)
 80102d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80102d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102d8:	4a0c      	ldr	r2, [pc, #48]	; (801030c <prvInitialiseNewTask+0x14c>)
 80102da:	661a      	str	r2, [r3, #96]	; 0x60
 80102dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102de:	4a0c      	ldr	r2, [pc, #48]	; (8010310 <prvInitialiseNewTask+0x150>)
 80102e0:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80102e2:	683a      	ldr	r2, [r7, #0]
 80102e4:	68f9      	ldr	r1, [r7, #12]
 80102e6:	69b8      	ldr	r0, [r7, #24]
 80102e8:	f001 fb62 	bl	80119b0 <pxPortInitialiseStack>
 80102ec:	4602      	mov	r2, r0
 80102ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80102f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d002      	beq.n	80102fe <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80102f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80102fe:	bf00      	nop
 8010300:	3720      	adds	r7, #32
 8010302:	46bd      	mov	sp, r7
 8010304:	bd80      	pop	{r7, pc}
 8010306:	bf00      	nop
 8010308:	0801569c 	.word	0x0801569c
 801030c:	080156bc 	.word	0x080156bc
 8010310:	0801567c 	.word	0x0801567c

08010314 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b082      	sub	sp, #8
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801031c:	f001 fc72 	bl	8011c04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010320:	4b2d      	ldr	r3, [pc, #180]	; (80103d8 <prvAddNewTaskToReadyList+0xc4>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	3301      	adds	r3, #1
 8010326:	4a2c      	ldr	r2, [pc, #176]	; (80103d8 <prvAddNewTaskToReadyList+0xc4>)
 8010328:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801032a:	4b2c      	ldr	r3, [pc, #176]	; (80103dc <prvAddNewTaskToReadyList+0xc8>)
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d109      	bne.n	8010346 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010332:	4a2a      	ldr	r2, [pc, #168]	; (80103dc <prvAddNewTaskToReadyList+0xc8>)
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010338:	4b27      	ldr	r3, [pc, #156]	; (80103d8 <prvAddNewTaskToReadyList+0xc4>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	2b01      	cmp	r3, #1
 801033e:	d110      	bne.n	8010362 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010340:	f000 fc44 	bl	8010bcc <prvInitialiseTaskLists>
 8010344:	e00d      	b.n	8010362 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010346:	4b26      	ldr	r3, [pc, #152]	; (80103e0 <prvAddNewTaskToReadyList+0xcc>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d109      	bne.n	8010362 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801034e:	4b23      	ldr	r3, [pc, #140]	; (80103dc <prvAddNewTaskToReadyList+0xc8>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010358:	429a      	cmp	r2, r3
 801035a:	d802      	bhi.n	8010362 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801035c:	4a1f      	ldr	r2, [pc, #124]	; (80103dc <prvAddNewTaskToReadyList+0xc8>)
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010362:	4b20      	ldr	r3, [pc, #128]	; (80103e4 <prvAddNewTaskToReadyList+0xd0>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	3301      	adds	r3, #1
 8010368:	4a1e      	ldr	r2, [pc, #120]	; (80103e4 <prvAddNewTaskToReadyList+0xd0>)
 801036a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801036c:	4b1d      	ldr	r3, [pc, #116]	; (80103e4 <prvAddNewTaskToReadyList+0xd0>)
 801036e:	681a      	ldr	r2, [r3, #0]
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010378:	4b1b      	ldr	r3, [pc, #108]	; (80103e8 <prvAddNewTaskToReadyList+0xd4>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	429a      	cmp	r2, r3
 801037e:	d903      	bls.n	8010388 <prvAddNewTaskToReadyList+0x74>
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010384:	4a18      	ldr	r2, [pc, #96]	; (80103e8 <prvAddNewTaskToReadyList+0xd4>)
 8010386:	6013      	str	r3, [r2, #0]
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801038c:	4613      	mov	r3, r2
 801038e:	009b      	lsls	r3, r3, #2
 8010390:	4413      	add	r3, r2
 8010392:	009b      	lsls	r3, r3, #2
 8010394:	4a15      	ldr	r2, [pc, #84]	; (80103ec <prvAddNewTaskToReadyList+0xd8>)
 8010396:	441a      	add	r2, r3
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	3304      	adds	r3, #4
 801039c:	4619      	mov	r1, r3
 801039e:	4610      	mov	r0, r2
 80103a0:	f7ff f83f 	bl	800f422 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80103a4:	f001 fc5e 	bl	8011c64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80103a8:	4b0d      	ldr	r3, [pc, #52]	; (80103e0 <prvAddNewTaskToReadyList+0xcc>)
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d00e      	beq.n	80103ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80103b0:	4b0a      	ldr	r3, [pc, #40]	; (80103dc <prvAddNewTaskToReadyList+0xc8>)
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103ba:	429a      	cmp	r2, r3
 80103bc:	d207      	bcs.n	80103ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80103be:	4b0c      	ldr	r3, [pc, #48]	; (80103f0 <prvAddNewTaskToReadyList+0xdc>)
 80103c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103c4:	601a      	str	r2, [r3, #0]
 80103c6:	f3bf 8f4f 	dsb	sy
 80103ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80103ce:	bf00      	nop
 80103d0:	3708      	adds	r7, #8
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
 80103d6:	bf00      	nop
 80103d8:	200022a0 	.word	0x200022a0
 80103dc:	20001dcc 	.word	0x20001dcc
 80103e0:	200022ac 	.word	0x200022ac
 80103e4:	200022bc 	.word	0x200022bc
 80103e8:	200022a8 	.word	0x200022a8
 80103ec:	20001dd0 	.word	0x20001dd0
 80103f0:	e000ed04 	.word	0xe000ed04

080103f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b084      	sub	sp, #16
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80103fc:	2300      	movs	r3, #0
 80103fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d017      	beq.n	8010436 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010406:	4b13      	ldr	r3, [pc, #76]	; (8010454 <vTaskDelay+0x60>)
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d00a      	beq.n	8010424 <vTaskDelay+0x30>
	__asm volatile
 801040e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010412:	f383 8811 	msr	BASEPRI, r3
 8010416:	f3bf 8f6f 	isb	sy
 801041a:	f3bf 8f4f 	dsb	sy
 801041e:	60bb      	str	r3, [r7, #8]
}
 8010420:	bf00      	nop
 8010422:	e7fe      	b.n	8010422 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010424:	f000 f88c 	bl	8010540 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010428:	2100      	movs	r1, #0
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f000 ff1e 	bl	801126c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010430:	f000 f894 	bl	801055c <xTaskResumeAll>
 8010434:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d107      	bne.n	801044c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801043c:	4b06      	ldr	r3, [pc, #24]	; (8010458 <vTaskDelay+0x64>)
 801043e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010442:	601a      	str	r2, [r3, #0]
 8010444:	f3bf 8f4f 	dsb	sy
 8010448:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801044c:	bf00      	nop
 801044e:	3710      	adds	r7, #16
 8010450:	46bd      	mov	sp, r7
 8010452:	bd80      	pop	{r7, pc}
 8010454:	200022c8 	.word	0x200022c8
 8010458:	e000ed04 	.word	0xe000ed04

0801045c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b08a      	sub	sp, #40	; 0x28
 8010460:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010462:	2300      	movs	r3, #0
 8010464:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010466:	2300      	movs	r3, #0
 8010468:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801046a:	463a      	mov	r2, r7
 801046c:	1d39      	adds	r1, r7, #4
 801046e:	f107 0308 	add.w	r3, r7, #8
 8010472:	4618      	mov	r0, r3
 8010474:	f7fe ff74 	bl	800f360 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010478:	6839      	ldr	r1, [r7, #0]
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	68ba      	ldr	r2, [r7, #8]
 801047e:	9202      	str	r2, [sp, #8]
 8010480:	9301      	str	r3, [sp, #4]
 8010482:	2300      	movs	r3, #0
 8010484:	9300      	str	r3, [sp, #0]
 8010486:	2300      	movs	r3, #0
 8010488:	460a      	mov	r2, r1
 801048a:	4925      	ldr	r1, [pc, #148]	; (8010520 <vTaskStartScheduler+0xc4>)
 801048c:	4825      	ldr	r0, [pc, #148]	; (8010524 <vTaskStartScheduler+0xc8>)
 801048e:	f7ff fdf5 	bl	801007c <xTaskCreateStatic>
 8010492:	4603      	mov	r3, r0
 8010494:	4a24      	ldr	r2, [pc, #144]	; (8010528 <vTaskStartScheduler+0xcc>)
 8010496:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010498:	4b23      	ldr	r3, [pc, #140]	; (8010528 <vTaskStartScheduler+0xcc>)
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d002      	beq.n	80104a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80104a0:	2301      	movs	r3, #1
 80104a2:	617b      	str	r3, [r7, #20]
 80104a4:	e001      	b.n	80104aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80104a6:	2300      	movs	r3, #0
 80104a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80104aa:	697b      	ldr	r3, [r7, #20]
 80104ac:	2b01      	cmp	r3, #1
 80104ae:	d102      	bne.n	80104b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80104b0:	f000 ff30 	bl	8011314 <xTimerCreateTimerTask>
 80104b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80104b6:	697b      	ldr	r3, [r7, #20]
 80104b8:	2b01      	cmp	r3, #1
 80104ba:	d11d      	bne.n	80104f8 <vTaskStartScheduler+0x9c>
	__asm volatile
 80104bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104c0:	f383 8811 	msr	BASEPRI, r3
 80104c4:	f3bf 8f6f 	isb	sy
 80104c8:	f3bf 8f4f 	dsb	sy
 80104cc:	613b      	str	r3, [r7, #16]
}
 80104ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80104d0:	4b16      	ldr	r3, [pc, #88]	; (801052c <vTaskStartScheduler+0xd0>)
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	3358      	adds	r3, #88	; 0x58
 80104d6:	4a16      	ldr	r2, [pc, #88]	; (8010530 <vTaskStartScheduler+0xd4>)
 80104d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80104da:	4b16      	ldr	r3, [pc, #88]	; (8010534 <vTaskStartScheduler+0xd8>)
 80104dc:	f04f 32ff 	mov.w	r2, #4294967295
 80104e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80104e2:	4b15      	ldr	r3, [pc, #84]	; (8010538 <vTaskStartScheduler+0xdc>)
 80104e4:	2201      	movs	r2, #1
 80104e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80104e8:	4b14      	ldr	r3, [pc, #80]	; (801053c <vTaskStartScheduler+0xe0>)
 80104ea:	2200      	movs	r2, #0
 80104ec:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80104ee:	f7f0 f871 	bl	80005d4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80104f2:	f001 fae5 	bl	8011ac0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80104f6:	e00e      	b.n	8010516 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80104f8:	697b      	ldr	r3, [r7, #20]
 80104fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104fe:	d10a      	bne.n	8010516 <vTaskStartScheduler+0xba>
	__asm volatile
 8010500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010504:	f383 8811 	msr	BASEPRI, r3
 8010508:	f3bf 8f6f 	isb	sy
 801050c:	f3bf 8f4f 	dsb	sy
 8010510:	60fb      	str	r3, [r7, #12]
}
 8010512:	bf00      	nop
 8010514:	e7fe      	b.n	8010514 <vTaskStartScheduler+0xb8>
}
 8010516:	bf00      	nop
 8010518:	3718      	adds	r7, #24
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}
 801051e:	bf00      	nop
 8010520:	08015174 	.word	0x08015174
 8010524:	08010b9d 	.word	0x08010b9d
 8010528:	200022c4 	.word	0x200022c4
 801052c:	20001dcc 	.word	0x20001dcc
 8010530:	20000054 	.word	0x20000054
 8010534:	200022c0 	.word	0x200022c0
 8010538:	200022ac 	.word	0x200022ac
 801053c:	200022a4 	.word	0x200022a4

08010540 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010540:	b480      	push	{r7}
 8010542:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010544:	4b04      	ldr	r3, [pc, #16]	; (8010558 <vTaskSuspendAll+0x18>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	3301      	adds	r3, #1
 801054a:	4a03      	ldr	r2, [pc, #12]	; (8010558 <vTaskSuspendAll+0x18>)
 801054c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801054e:	bf00      	nop
 8010550:	46bd      	mov	sp, r7
 8010552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010556:	4770      	bx	lr
 8010558:	200022c8 	.word	0x200022c8

0801055c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b084      	sub	sp, #16
 8010560:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010562:	2300      	movs	r3, #0
 8010564:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010566:	2300      	movs	r3, #0
 8010568:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801056a:	4b42      	ldr	r3, [pc, #264]	; (8010674 <xTaskResumeAll+0x118>)
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d10a      	bne.n	8010588 <xTaskResumeAll+0x2c>
	__asm volatile
 8010572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010576:	f383 8811 	msr	BASEPRI, r3
 801057a:	f3bf 8f6f 	isb	sy
 801057e:	f3bf 8f4f 	dsb	sy
 8010582:	603b      	str	r3, [r7, #0]
}
 8010584:	bf00      	nop
 8010586:	e7fe      	b.n	8010586 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010588:	f001 fb3c 	bl	8011c04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801058c:	4b39      	ldr	r3, [pc, #228]	; (8010674 <xTaskResumeAll+0x118>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	3b01      	subs	r3, #1
 8010592:	4a38      	ldr	r2, [pc, #224]	; (8010674 <xTaskResumeAll+0x118>)
 8010594:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010596:	4b37      	ldr	r3, [pc, #220]	; (8010674 <xTaskResumeAll+0x118>)
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d162      	bne.n	8010664 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801059e:	4b36      	ldr	r3, [pc, #216]	; (8010678 <xTaskResumeAll+0x11c>)
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d05e      	beq.n	8010664 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80105a6:	e02f      	b.n	8010608 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105a8:	4b34      	ldr	r3, [pc, #208]	; (801067c <xTaskResumeAll+0x120>)
 80105aa:	68db      	ldr	r3, [r3, #12]
 80105ac:	68db      	ldr	r3, [r3, #12]
 80105ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	3318      	adds	r3, #24
 80105b4:	4618      	mov	r0, r3
 80105b6:	f7fe ff91 	bl	800f4dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	3304      	adds	r3, #4
 80105be:	4618      	mov	r0, r3
 80105c0:	f7fe ff8c 	bl	800f4dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105c8:	4b2d      	ldr	r3, [pc, #180]	; (8010680 <xTaskResumeAll+0x124>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	429a      	cmp	r2, r3
 80105ce:	d903      	bls.n	80105d8 <xTaskResumeAll+0x7c>
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105d4:	4a2a      	ldr	r2, [pc, #168]	; (8010680 <xTaskResumeAll+0x124>)
 80105d6:	6013      	str	r3, [r2, #0]
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105dc:	4613      	mov	r3, r2
 80105de:	009b      	lsls	r3, r3, #2
 80105e0:	4413      	add	r3, r2
 80105e2:	009b      	lsls	r3, r3, #2
 80105e4:	4a27      	ldr	r2, [pc, #156]	; (8010684 <xTaskResumeAll+0x128>)
 80105e6:	441a      	add	r2, r3
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	3304      	adds	r3, #4
 80105ec:	4619      	mov	r1, r3
 80105ee:	4610      	mov	r0, r2
 80105f0:	f7fe ff17 	bl	800f422 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105f8:	4b23      	ldr	r3, [pc, #140]	; (8010688 <xTaskResumeAll+0x12c>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105fe:	429a      	cmp	r2, r3
 8010600:	d302      	bcc.n	8010608 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010602:	4b22      	ldr	r3, [pc, #136]	; (801068c <xTaskResumeAll+0x130>)
 8010604:	2201      	movs	r2, #1
 8010606:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010608:	4b1c      	ldr	r3, [pc, #112]	; (801067c <xTaskResumeAll+0x120>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d1cb      	bne.n	80105a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d001      	beq.n	801061a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010616:	f000 fb7b 	bl	8010d10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801061a:	4b1d      	ldr	r3, [pc, #116]	; (8010690 <xTaskResumeAll+0x134>)
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d010      	beq.n	8010648 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010626:	f000 f847 	bl	80106b8 <xTaskIncrementTick>
 801062a:	4603      	mov	r3, r0
 801062c:	2b00      	cmp	r3, #0
 801062e:	d002      	beq.n	8010636 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010630:	4b16      	ldr	r3, [pc, #88]	; (801068c <xTaskResumeAll+0x130>)
 8010632:	2201      	movs	r2, #1
 8010634:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	3b01      	subs	r3, #1
 801063a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d1f1      	bne.n	8010626 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8010642:	4b13      	ldr	r3, [pc, #76]	; (8010690 <xTaskResumeAll+0x134>)
 8010644:	2200      	movs	r2, #0
 8010646:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010648:	4b10      	ldr	r3, [pc, #64]	; (801068c <xTaskResumeAll+0x130>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d009      	beq.n	8010664 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010650:	2301      	movs	r3, #1
 8010652:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010654:	4b0f      	ldr	r3, [pc, #60]	; (8010694 <xTaskResumeAll+0x138>)
 8010656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801065a:	601a      	str	r2, [r3, #0]
 801065c:	f3bf 8f4f 	dsb	sy
 8010660:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010664:	f001 fafe 	bl	8011c64 <vPortExitCritical>

	return xAlreadyYielded;
 8010668:	68bb      	ldr	r3, [r7, #8]
}
 801066a:	4618      	mov	r0, r3
 801066c:	3710      	adds	r7, #16
 801066e:	46bd      	mov	sp, r7
 8010670:	bd80      	pop	{r7, pc}
 8010672:	bf00      	nop
 8010674:	200022c8 	.word	0x200022c8
 8010678:	200022a0 	.word	0x200022a0
 801067c:	20002260 	.word	0x20002260
 8010680:	200022a8 	.word	0x200022a8
 8010684:	20001dd0 	.word	0x20001dd0
 8010688:	20001dcc 	.word	0x20001dcc
 801068c:	200022b4 	.word	0x200022b4
 8010690:	200022b0 	.word	0x200022b0
 8010694:	e000ed04 	.word	0xe000ed04

08010698 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010698:	b480      	push	{r7}
 801069a:	b083      	sub	sp, #12
 801069c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801069e:	4b05      	ldr	r3, [pc, #20]	; (80106b4 <xTaskGetTickCount+0x1c>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80106a4:	687b      	ldr	r3, [r7, #4]
}
 80106a6:	4618      	mov	r0, r3
 80106a8:	370c      	adds	r7, #12
 80106aa:	46bd      	mov	sp, r7
 80106ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b0:	4770      	bx	lr
 80106b2:	bf00      	nop
 80106b4:	200022a4 	.word	0x200022a4

080106b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b086      	sub	sp, #24
 80106bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80106be:	2300      	movs	r3, #0
 80106c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80106c2:	4b4f      	ldr	r3, [pc, #316]	; (8010800 <xTaskIncrementTick+0x148>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	f040 808f 	bne.w	80107ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80106cc:	4b4d      	ldr	r3, [pc, #308]	; (8010804 <xTaskIncrementTick+0x14c>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	3301      	adds	r3, #1
 80106d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80106d4:	4a4b      	ldr	r2, [pc, #300]	; (8010804 <xTaskIncrementTick+0x14c>)
 80106d6:	693b      	ldr	r3, [r7, #16]
 80106d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d120      	bne.n	8010722 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80106e0:	4b49      	ldr	r3, [pc, #292]	; (8010808 <xTaskIncrementTick+0x150>)
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d00a      	beq.n	8010700 <xTaskIncrementTick+0x48>
	__asm volatile
 80106ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106ee:	f383 8811 	msr	BASEPRI, r3
 80106f2:	f3bf 8f6f 	isb	sy
 80106f6:	f3bf 8f4f 	dsb	sy
 80106fa:	603b      	str	r3, [r7, #0]
}
 80106fc:	bf00      	nop
 80106fe:	e7fe      	b.n	80106fe <xTaskIncrementTick+0x46>
 8010700:	4b41      	ldr	r3, [pc, #260]	; (8010808 <xTaskIncrementTick+0x150>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	60fb      	str	r3, [r7, #12]
 8010706:	4b41      	ldr	r3, [pc, #260]	; (801080c <xTaskIncrementTick+0x154>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	4a3f      	ldr	r2, [pc, #252]	; (8010808 <xTaskIncrementTick+0x150>)
 801070c:	6013      	str	r3, [r2, #0]
 801070e:	4a3f      	ldr	r2, [pc, #252]	; (801080c <xTaskIncrementTick+0x154>)
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	6013      	str	r3, [r2, #0]
 8010714:	4b3e      	ldr	r3, [pc, #248]	; (8010810 <xTaskIncrementTick+0x158>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	3301      	adds	r3, #1
 801071a:	4a3d      	ldr	r2, [pc, #244]	; (8010810 <xTaskIncrementTick+0x158>)
 801071c:	6013      	str	r3, [r2, #0]
 801071e:	f000 faf7 	bl	8010d10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010722:	4b3c      	ldr	r3, [pc, #240]	; (8010814 <xTaskIncrementTick+0x15c>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	693a      	ldr	r2, [r7, #16]
 8010728:	429a      	cmp	r2, r3
 801072a:	d349      	bcc.n	80107c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801072c:	4b36      	ldr	r3, [pc, #216]	; (8010808 <xTaskIncrementTick+0x150>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d104      	bne.n	8010740 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010736:	4b37      	ldr	r3, [pc, #220]	; (8010814 <xTaskIncrementTick+0x15c>)
 8010738:	f04f 32ff 	mov.w	r2, #4294967295
 801073c:	601a      	str	r2, [r3, #0]
					break;
 801073e:	e03f      	b.n	80107c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010740:	4b31      	ldr	r3, [pc, #196]	; (8010808 <xTaskIncrementTick+0x150>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	68db      	ldr	r3, [r3, #12]
 8010746:	68db      	ldr	r3, [r3, #12]
 8010748:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801074a:	68bb      	ldr	r3, [r7, #8]
 801074c:	685b      	ldr	r3, [r3, #4]
 801074e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010750:	693a      	ldr	r2, [r7, #16]
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	429a      	cmp	r2, r3
 8010756:	d203      	bcs.n	8010760 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010758:	4a2e      	ldr	r2, [pc, #184]	; (8010814 <xTaskIncrementTick+0x15c>)
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801075e:	e02f      	b.n	80107c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	3304      	adds	r3, #4
 8010764:	4618      	mov	r0, r3
 8010766:	f7fe feb9 	bl	800f4dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801076e:	2b00      	cmp	r3, #0
 8010770:	d004      	beq.n	801077c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010772:	68bb      	ldr	r3, [r7, #8]
 8010774:	3318      	adds	r3, #24
 8010776:	4618      	mov	r0, r3
 8010778:	f7fe feb0 	bl	800f4dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010780:	4b25      	ldr	r3, [pc, #148]	; (8010818 <xTaskIncrementTick+0x160>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	429a      	cmp	r2, r3
 8010786:	d903      	bls.n	8010790 <xTaskIncrementTick+0xd8>
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801078c:	4a22      	ldr	r2, [pc, #136]	; (8010818 <xTaskIncrementTick+0x160>)
 801078e:	6013      	str	r3, [r2, #0]
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010794:	4613      	mov	r3, r2
 8010796:	009b      	lsls	r3, r3, #2
 8010798:	4413      	add	r3, r2
 801079a:	009b      	lsls	r3, r3, #2
 801079c:	4a1f      	ldr	r2, [pc, #124]	; (801081c <xTaskIncrementTick+0x164>)
 801079e:	441a      	add	r2, r3
 80107a0:	68bb      	ldr	r3, [r7, #8]
 80107a2:	3304      	adds	r3, #4
 80107a4:	4619      	mov	r1, r3
 80107a6:	4610      	mov	r0, r2
 80107a8:	f7fe fe3b 	bl	800f422 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107b0:	4b1b      	ldr	r3, [pc, #108]	; (8010820 <xTaskIncrementTick+0x168>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107b6:	429a      	cmp	r2, r3
 80107b8:	d3b8      	bcc.n	801072c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80107ba:	2301      	movs	r3, #1
 80107bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80107be:	e7b5      	b.n	801072c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80107c0:	4b17      	ldr	r3, [pc, #92]	; (8010820 <xTaskIncrementTick+0x168>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107c6:	4915      	ldr	r1, [pc, #84]	; (801081c <xTaskIncrementTick+0x164>)
 80107c8:	4613      	mov	r3, r2
 80107ca:	009b      	lsls	r3, r3, #2
 80107cc:	4413      	add	r3, r2
 80107ce:	009b      	lsls	r3, r3, #2
 80107d0:	440b      	add	r3, r1
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	2b01      	cmp	r3, #1
 80107d6:	d901      	bls.n	80107dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80107d8:	2301      	movs	r3, #1
 80107da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80107dc:	4b11      	ldr	r3, [pc, #68]	; (8010824 <xTaskIncrementTick+0x16c>)
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d007      	beq.n	80107f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80107e4:	2301      	movs	r3, #1
 80107e6:	617b      	str	r3, [r7, #20]
 80107e8:	e004      	b.n	80107f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80107ea:	4b0f      	ldr	r3, [pc, #60]	; (8010828 <xTaskIncrementTick+0x170>)
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	3301      	adds	r3, #1
 80107f0:	4a0d      	ldr	r2, [pc, #52]	; (8010828 <xTaskIncrementTick+0x170>)
 80107f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80107f4:	697b      	ldr	r3, [r7, #20]
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3718      	adds	r7, #24
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}
 80107fe:	bf00      	nop
 8010800:	200022c8 	.word	0x200022c8
 8010804:	200022a4 	.word	0x200022a4
 8010808:	20002258 	.word	0x20002258
 801080c:	2000225c 	.word	0x2000225c
 8010810:	200022b8 	.word	0x200022b8
 8010814:	200022c0 	.word	0x200022c0
 8010818:	200022a8 	.word	0x200022a8
 801081c:	20001dd0 	.word	0x20001dd0
 8010820:	20001dcc 	.word	0x20001dcc
 8010824:	200022b4 	.word	0x200022b4
 8010828:	200022b0 	.word	0x200022b0

0801082c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b084      	sub	sp, #16
 8010830:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010832:	4b36      	ldr	r3, [pc, #216]	; (801090c <vTaskSwitchContext+0xe0>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d003      	beq.n	8010842 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801083a:	4b35      	ldr	r3, [pc, #212]	; (8010910 <vTaskSwitchContext+0xe4>)
 801083c:	2201      	movs	r2, #1
 801083e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010840:	e05f      	b.n	8010902 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8010842:	4b33      	ldr	r3, [pc, #204]	; (8010910 <vTaskSwitchContext+0xe4>)
 8010844:	2200      	movs	r2, #0
 8010846:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8010848:	f7ef fed2 	bl	80005f0 <getRunTimeCounterValue>
 801084c:	4603      	mov	r3, r0
 801084e:	4a31      	ldr	r2, [pc, #196]	; (8010914 <vTaskSwitchContext+0xe8>)
 8010850:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8010852:	4b30      	ldr	r3, [pc, #192]	; (8010914 <vTaskSwitchContext+0xe8>)
 8010854:	681a      	ldr	r2, [r3, #0]
 8010856:	4b30      	ldr	r3, [pc, #192]	; (8010918 <vTaskSwitchContext+0xec>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	429a      	cmp	r2, r3
 801085c:	d909      	bls.n	8010872 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 801085e:	4b2f      	ldr	r3, [pc, #188]	; (801091c <vTaskSwitchContext+0xf0>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010864:	4a2b      	ldr	r2, [pc, #172]	; (8010914 <vTaskSwitchContext+0xe8>)
 8010866:	6810      	ldr	r0, [r2, #0]
 8010868:	4a2b      	ldr	r2, [pc, #172]	; (8010918 <vTaskSwitchContext+0xec>)
 801086a:	6812      	ldr	r2, [r2, #0]
 801086c:	1a82      	subs	r2, r0, r2
 801086e:	440a      	add	r2, r1
 8010870:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8010872:	4b28      	ldr	r3, [pc, #160]	; (8010914 <vTaskSwitchContext+0xe8>)
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	4a28      	ldr	r2, [pc, #160]	; (8010918 <vTaskSwitchContext+0xec>)
 8010878:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801087a:	4b29      	ldr	r3, [pc, #164]	; (8010920 <vTaskSwitchContext+0xf4>)
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	60fb      	str	r3, [r7, #12]
 8010880:	e010      	b.n	80108a4 <vTaskSwitchContext+0x78>
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d10a      	bne.n	801089e <vTaskSwitchContext+0x72>
	__asm volatile
 8010888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801088c:	f383 8811 	msr	BASEPRI, r3
 8010890:	f3bf 8f6f 	isb	sy
 8010894:	f3bf 8f4f 	dsb	sy
 8010898:	607b      	str	r3, [r7, #4]
}
 801089a:	bf00      	nop
 801089c:	e7fe      	b.n	801089c <vTaskSwitchContext+0x70>
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	3b01      	subs	r3, #1
 80108a2:	60fb      	str	r3, [r7, #12]
 80108a4:	491f      	ldr	r1, [pc, #124]	; (8010924 <vTaskSwitchContext+0xf8>)
 80108a6:	68fa      	ldr	r2, [r7, #12]
 80108a8:	4613      	mov	r3, r2
 80108aa:	009b      	lsls	r3, r3, #2
 80108ac:	4413      	add	r3, r2
 80108ae:	009b      	lsls	r3, r3, #2
 80108b0:	440b      	add	r3, r1
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d0e4      	beq.n	8010882 <vTaskSwitchContext+0x56>
 80108b8:	68fa      	ldr	r2, [r7, #12]
 80108ba:	4613      	mov	r3, r2
 80108bc:	009b      	lsls	r3, r3, #2
 80108be:	4413      	add	r3, r2
 80108c0:	009b      	lsls	r3, r3, #2
 80108c2:	4a18      	ldr	r2, [pc, #96]	; (8010924 <vTaskSwitchContext+0xf8>)
 80108c4:	4413      	add	r3, r2
 80108c6:	60bb      	str	r3, [r7, #8]
 80108c8:	68bb      	ldr	r3, [r7, #8]
 80108ca:	685b      	ldr	r3, [r3, #4]
 80108cc:	685a      	ldr	r2, [r3, #4]
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	605a      	str	r2, [r3, #4]
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	685a      	ldr	r2, [r3, #4]
 80108d6:	68bb      	ldr	r3, [r7, #8]
 80108d8:	3308      	adds	r3, #8
 80108da:	429a      	cmp	r2, r3
 80108dc:	d104      	bne.n	80108e8 <vTaskSwitchContext+0xbc>
 80108de:	68bb      	ldr	r3, [r7, #8]
 80108e0:	685b      	ldr	r3, [r3, #4]
 80108e2:	685a      	ldr	r2, [r3, #4]
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	605a      	str	r2, [r3, #4]
 80108e8:	68bb      	ldr	r3, [r7, #8]
 80108ea:	685b      	ldr	r3, [r3, #4]
 80108ec:	68db      	ldr	r3, [r3, #12]
 80108ee:	4a0b      	ldr	r2, [pc, #44]	; (801091c <vTaskSwitchContext+0xf0>)
 80108f0:	6013      	str	r3, [r2, #0]
 80108f2:	4a0b      	ldr	r2, [pc, #44]	; (8010920 <vTaskSwitchContext+0xf4>)
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80108f8:	4b08      	ldr	r3, [pc, #32]	; (801091c <vTaskSwitchContext+0xf0>)
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	3358      	adds	r3, #88	; 0x58
 80108fe:	4a0a      	ldr	r2, [pc, #40]	; (8010928 <vTaskSwitchContext+0xfc>)
 8010900:	6013      	str	r3, [r2, #0]
}
 8010902:	bf00      	nop
 8010904:	3710      	adds	r7, #16
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}
 801090a:	bf00      	nop
 801090c:	200022c8 	.word	0x200022c8
 8010910:	200022b4 	.word	0x200022b4
 8010914:	200022d0 	.word	0x200022d0
 8010918:	200022cc 	.word	0x200022cc
 801091c:	20001dcc 	.word	0x20001dcc
 8010920:	200022a8 	.word	0x200022a8
 8010924:	20001dd0 	.word	0x20001dd0
 8010928:	20000054 	.word	0x20000054

0801092c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b084      	sub	sp, #16
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
 8010934:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d10a      	bne.n	8010952 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801093c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010940:	f383 8811 	msr	BASEPRI, r3
 8010944:	f3bf 8f6f 	isb	sy
 8010948:	f3bf 8f4f 	dsb	sy
 801094c:	60fb      	str	r3, [r7, #12]
}
 801094e:	bf00      	nop
 8010950:	e7fe      	b.n	8010950 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010952:	4b07      	ldr	r3, [pc, #28]	; (8010970 <vTaskPlaceOnEventList+0x44>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	3318      	adds	r3, #24
 8010958:	4619      	mov	r1, r3
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f7fe fd85 	bl	800f46a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010960:	2101      	movs	r1, #1
 8010962:	6838      	ldr	r0, [r7, #0]
 8010964:	f000 fc82 	bl	801126c <prvAddCurrentTaskToDelayedList>
}
 8010968:	bf00      	nop
 801096a:	3710      	adds	r7, #16
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}
 8010970:	20001dcc 	.word	0x20001dcc

08010974 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010974:	b580      	push	{r7, lr}
 8010976:	b086      	sub	sp, #24
 8010978:	af00      	add	r7, sp, #0
 801097a:	60f8      	str	r0, [r7, #12]
 801097c:	60b9      	str	r1, [r7, #8]
 801097e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d10a      	bne.n	801099c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8010986:	f04f 0350 	mov.w	r3, #80	; 0x50
 801098a:	f383 8811 	msr	BASEPRI, r3
 801098e:	f3bf 8f6f 	isb	sy
 8010992:	f3bf 8f4f 	dsb	sy
 8010996:	617b      	str	r3, [r7, #20]
}
 8010998:	bf00      	nop
 801099a:	e7fe      	b.n	801099a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801099c:	4b0a      	ldr	r3, [pc, #40]	; (80109c8 <vTaskPlaceOnEventListRestricted+0x54>)
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	3318      	adds	r3, #24
 80109a2:	4619      	mov	r1, r3
 80109a4:	68f8      	ldr	r0, [r7, #12]
 80109a6:	f7fe fd3c 	bl	800f422 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d002      	beq.n	80109b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80109b0:	f04f 33ff 	mov.w	r3, #4294967295
 80109b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80109b6:	6879      	ldr	r1, [r7, #4]
 80109b8:	68b8      	ldr	r0, [r7, #8]
 80109ba:	f000 fc57 	bl	801126c <prvAddCurrentTaskToDelayedList>
	}
 80109be:	bf00      	nop
 80109c0:	3718      	adds	r7, #24
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}
 80109c6:	bf00      	nop
 80109c8:	20001dcc 	.word	0x20001dcc

080109cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b086      	sub	sp, #24
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	68db      	ldr	r3, [r3, #12]
 80109d8:	68db      	ldr	r3, [r3, #12]
 80109da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80109dc:	693b      	ldr	r3, [r7, #16]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d10a      	bne.n	80109f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80109e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109e6:	f383 8811 	msr	BASEPRI, r3
 80109ea:	f3bf 8f6f 	isb	sy
 80109ee:	f3bf 8f4f 	dsb	sy
 80109f2:	60fb      	str	r3, [r7, #12]
}
 80109f4:	bf00      	nop
 80109f6:	e7fe      	b.n	80109f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80109f8:	693b      	ldr	r3, [r7, #16]
 80109fa:	3318      	adds	r3, #24
 80109fc:	4618      	mov	r0, r3
 80109fe:	f7fe fd6d 	bl	800f4dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010a02:	4b1e      	ldr	r3, [pc, #120]	; (8010a7c <xTaskRemoveFromEventList+0xb0>)
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d11d      	bne.n	8010a46 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010a0a:	693b      	ldr	r3, [r7, #16]
 8010a0c:	3304      	adds	r3, #4
 8010a0e:	4618      	mov	r0, r3
 8010a10:	f7fe fd64 	bl	800f4dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010a14:	693b      	ldr	r3, [r7, #16]
 8010a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a18:	4b19      	ldr	r3, [pc, #100]	; (8010a80 <xTaskRemoveFromEventList+0xb4>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	429a      	cmp	r2, r3
 8010a1e:	d903      	bls.n	8010a28 <xTaskRemoveFromEventList+0x5c>
 8010a20:	693b      	ldr	r3, [r7, #16]
 8010a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a24:	4a16      	ldr	r2, [pc, #88]	; (8010a80 <xTaskRemoveFromEventList+0xb4>)
 8010a26:	6013      	str	r3, [r2, #0]
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a2c:	4613      	mov	r3, r2
 8010a2e:	009b      	lsls	r3, r3, #2
 8010a30:	4413      	add	r3, r2
 8010a32:	009b      	lsls	r3, r3, #2
 8010a34:	4a13      	ldr	r2, [pc, #76]	; (8010a84 <xTaskRemoveFromEventList+0xb8>)
 8010a36:	441a      	add	r2, r3
 8010a38:	693b      	ldr	r3, [r7, #16]
 8010a3a:	3304      	adds	r3, #4
 8010a3c:	4619      	mov	r1, r3
 8010a3e:	4610      	mov	r0, r2
 8010a40:	f7fe fcef 	bl	800f422 <vListInsertEnd>
 8010a44:	e005      	b.n	8010a52 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010a46:	693b      	ldr	r3, [r7, #16]
 8010a48:	3318      	adds	r3, #24
 8010a4a:	4619      	mov	r1, r3
 8010a4c:	480e      	ldr	r0, [pc, #56]	; (8010a88 <xTaskRemoveFromEventList+0xbc>)
 8010a4e:	f7fe fce8 	bl	800f422 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010a52:	693b      	ldr	r3, [r7, #16]
 8010a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a56:	4b0d      	ldr	r3, [pc, #52]	; (8010a8c <xTaskRemoveFromEventList+0xc0>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a5c:	429a      	cmp	r2, r3
 8010a5e:	d905      	bls.n	8010a6c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010a60:	2301      	movs	r3, #1
 8010a62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010a64:	4b0a      	ldr	r3, [pc, #40]	; (8010a90 <xTaskRemoveFromEventList+0xc4>)
 8010a66:	2201      	movs	r2, #1
 8010a68:	601a      	str	r2, [r3, #0]
 8010a6a:	e001      	b.n	8010a70 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010a70:	697b      	ldr	r3, [r7, #20]
}
 8010a72:	4618      	mov	r0, r3
 8010a74:	3718      	adds	r7, #24
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}
 8010a7a:	bf00      	nop
 8010a7c:	200022c8 	.word	0x200022c8
 8010a80:	200022a8 	.word	0x200022a8
 8010a84:	20001dd0 	.word	0x20001dd0
 8010a88:	20002260 	.word	0x20002260
 8010a8c:	20001dcc 	.word	0x20001dcc
 8010a90:	200022b4 	.word	0x200022b4

08010a94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010a94:	b480      	push	{r7}
 8010a96:	b083      	sub	sp, #12
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010a9c:	4b06      	ldr	r3, [pc, #24]	; (8010ab8 <vTaskInternalSetTimeOutState+0x24>)
 8010a9e:	681a      	ldr	r2, [r3, #0]
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010aa4:	4b05      	ldr	r3, [pc, #20]	; (8010abc <vTaskInternalSetTimeOutState+0x28>)
 8010aa6:	681a      	ldr	r2, [r3, #0]
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	605a      	str	r2, [r3, #4]
}
 8010aac:	bf00      	nop
 8010aae:	370c      	adds	r7, #12
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab6:	4770      	bx	lr
 8010ab8:	200022b8 	.word	0x200022b8
 8010abc:	200022a4 	.word	0x200022a4

08010ac0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b088      	sub	sp, #32
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
 8010ac8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d10a      	bne.n	8010ae6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ad4:	f383 8811 	msr	BASEPRI, r3
 8010ad8:	f3bf 8f6f 	isb	sy
 8010adc:	f3bf 8f4f 	dsb	sy
 8010ae0:	613b      	str	r3, [r7, #16]
}
 8010ae2:	bf00      	nop
 8010ae4:	e7fe      	b.n	8010ae4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d10a      	bne.n	8010b02 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010af0:	f383 8811 	msr	BASEPRI, r3
 8010af4:	f3bf 8f6f 	isb	sy
 8010af8:	f3bf 8f4f 	dsb	sy
 8010afc:	60fb      	str	r3, [r7, #12]
}
 8010afe:	bf00      	nop
 8010b00:	e7fe      	b.n	8010b00 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010b02:	f001 f87f 	bl	8011c04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010b06:	4b1d      	ldr	r3, [pc, #116]	; (8010b7c <xTaskCheckForTimeOut+0xbc>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	685b      	ldr	r3, [r3, #4]
 8010b10:	69ba      	ldr	r2, [r7, #24]
 8010b12:	1ad3      	subs	r3, r2, r3
 8010b14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b1e:	d102      	bne.n	8010b26 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010b20:	2300      	movs	r3, #0
 8010b22:	61fb      	str	r3, [r7, #28]
 8010b24:	e023      	b.n	8010b6e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681a      	ldr	r2, [r3, #0]
 8010b2a:	4b15      	ldr	r3, [pc, #84]	; (8010b80 <xTaskCheckForTimeOut+0xc0>)
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	429a      	cmp	r2, r3
 8010b30:	d007      	beq.n	8010b42 <xTaskCheckForTimeOut+0x82>
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	685b      	ldr	r3, [r3, #4]
 8010b36:	69ba      	ldr	r2, [r7, #24]
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	d302      	bcc.n	8010b42 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010b3c:	2301      	movs	r3, #1
 8010b3e:	61fb      	str	r3, [r7, #28]
 8010b40:	e015      	b.n	8010b6e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	697a      	ldr	r2, [r7, #20]
 8010b48:	429a      	cmp	r2, r3
 8010b4a:	d20b      	bcs.n	8010b64 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	681a      	ldr	r2, [r3, #0]
 8010b50:	697b      	ldr	r3, [r7, #20]
 8010b52:	1ad2      	subs	r2, r2, r3
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	f7ff ff9b 	bl	8010a94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	61fb      	str	r3, [r7, #28]
 8010b62:	e004      	b.n	8010b6e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	2200      	movs	r2, #0
 8010b68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010b6e:	f001 f879 	bl	8011c64 <vPortExitCritical>

	return xReturn;
 8010b72:	69fb      	ldr	r3, [r7, #28]
}
 8010b74:	4618      	mov	r0, r3
 8010b76:	3720      	adds	r7, #32
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}
 8010b7c:	200022a4 	.word	0x200022a4
 8010b80:	200022b8 	.word	0x200022b8

08010b84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010b84:	b480      	push	{r7}
 8010b86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010b88:	4b03      	ldr	r3, [pc, #12]	; (8010b98 <vTaskMissedYield+0x14>)
 8010b8a:	2201      	movs	r2, #1
 8010b8c:	601a      	str	r2, [r3, #0]
}
 8010b8e:	bf00      	nop
 8010b90:	46bd      	mov	sp, r7
 8010b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b96:	4770      	bx	lr
 8010b98:	200022b4 	.word	0x200022b4

08010b9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b082      	sub	sp, #8
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010ba4:	f000 f852 	bl	8010c4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010ba8:	4b06      	ldr	r3, [pc, #24]	; (8010bc4 <prvIdleTask+0x28>)
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	2b01      	cmp	r3, #1
 8010bae:	d9f9      	bls.n	8010ba4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010bb0:	4b05      	ldr	r3, [pc, #20]	; (8010bc8 <prvIdleTask+0x2c>)
 8010bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bb6:	601a      	str	r2, [r3, #0]
 8010bb8:	f3bf 8f4f 	dsb	sy
 8010bbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010bc0:	e7f0      	b.n	8010ba4 <prvIdleTask+0x8>
 8010bc2:	bf00      	nop
 8010bc4:	20001dd0 	.word	0x20001dd0
 8010bc8:	e000ed04 	.word	0xe000ed04

08010bcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b082      	sub	sp, #8
 8010bd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	607b      	str	r3, [r7, #4]
 8010bd6:	e00c      	b.n	8010bf2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010bd8:	687a      	ldr	r2, [r7, #4]
 8010bda:	4613      	mov	r3, r2
 8010bdc:	009b      	lsls	r3, r3, #2
 8010bde:	4413      	add	r3, r2
 8010be0:	009b      	lsls	r3, r3, #2
 8010be2:	4a12      	ldr	r2, [pc, #72]	; (8010c2c <prvInitialiseTaskLists+0x60>)
 8010be4:	4413      	add	r3, r2
 8010be6:	4618      	mov	r0, r3
 8010be8:	f7fe fbee 	bl	800f3c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	3301      	adds	r3, #1
 8010bf0:	607b      	str	r3, [r7, #4]
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	2b37      	cmp	r3, #55	; 0x37
 8010bf6:	d9ef      	bls.n	8010bd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010bf8:	480d      	ldr	r0, [pc, #52]	; (8010c30 <prvInitialiseTaskLists+0x64>)
 8010bfa:	f7fe fbe5 	bl	800f3c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010bfe:	480d      	ldr	r0, [pc, #52]	; (8010c34 <prvInitialiseTaskLists+0x68>)
 8010c00:	f7fe fbe2 	bl	800f3c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010c04:	480c      	ldr	r0, [pc, #48]	; (8010c38 <prvInitialiseTaskLists+0x6c>)
 8010c06:	f7fe fbdf 	bl	800f3c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010c0a:	480c      	ldr	r0, [pc, #48]	; (8010c3c <prvInitialiseTaskLists+0x70>)
 8010c0c:	f7fe fbdc 	bl	800f3c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010c10:	480b      	ldr	r0, [pc, #44]	; (8010c40 <prvInitialiseTaskLists+0x74>)
 8010c12:	f7fe fbd9 	bl	800f3c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010c16:	4b0b      	ldr	r3, [pc, #44]	; (8010c44 <prvInitialiseTaskLists+0x78>)
 8010c18:	4a05      	ldr	r2, [pc, #20]	; (8010c30 <prvInitialiseTaskLists+0x64>)
 8010c1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010c1c:	4b0a      	ldr	r3, [pc, #40]	; (8010c48 <prvInitialiseTaskLists+0x7c>)
 8010c1e:	4a05      	ldr	r2, [pc, #20]	; (8010c34 <prvInitialiseTaskLists+0x68>)
 8010c20:	601a      	str	r2, [r3, #0]
}
 8010c22:	bf00      	nop
 8010c24:	3708      	adds	r7, #8
 8010c26:	46bd      	mov	sp, r7
 8010c28:	bd80      	pop	{r7, pc}
 8010c2a:	bf00      	nop
 8010c2c:	20001dd0 	.word	0x20001dd0
 8010c30:	20002230 	.word	0x20002230
 8010c34:	20002244 	.word	0x20002244
 8010c38:	20002260 	.word	0x20002260
 8010c3c:	20002274 	.word	0x20002274
 8010c40:	2000228c 	.word	0x2000228c
 8010c44:	20002258 	.word	0x20002258
 8010c48:	2000225c 	.word	0x2000225c

08010c4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b082      	sub	sp, #8
 8010c50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010c52:	e019      	b.n	8010c88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010c54:	f000 ffd6 	bl	8011c04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c58:	4b10      	ldr	r3, [pc, #64]	; (8010c9c <prvCheckTasksWaitingTermination+0x50>)
 8010c5a:	68db      	ldr	r3, [r3, #12]
 8010c5c:	68db      	ldr	r3, [r3, #12]
 8010c5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	3304      	adds	r3, #4
 8010c64:	4618      	mov	r0, r3
 8010c66:	f7fe fc39 	bl	800f4dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010c6a:	4b0d      	ldr	r3, [pc, #52]	; (8010ca0 <prvCheckTasksWaitingTermination+0x54>)
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	3b01      	subs	r3, #1
 8010c70:	4a0b      	ldr	r2, [pc, #44]	; (8010ca0 <prvCheckTasksWaitingTermination+0x54>)
 8010c72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010c74:	4b0b      	ldr	r3, [pc, #44]	; (8010ca4 <prvCheckTasksWaitingTermination+0x58>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	3b01      	subs	r3, #1
 8010c7a:	4a0a      	ldr	r2, [pc, #40]	; (8010ca4 <prvCheckTasksWaitingTermination+0x58>)
 8010c7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010c7e:	f000 fff1 	bl	8011c64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010c82:	6878      	ldr	r0, [r7, #4]
 8010c84:	f000 f810 	bl	8010ca8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010c88:	4b06      	ldr	r3, [pc, #24]	; (8010ca4 <prvCheckTasksWaitingTermination+0x58>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d1e1      	bne.n	8010c54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010c90:	bf00      	nop
 8010c92:	bf00      	nop
 8010c94:	3708      	adds	r7, #8
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd80      	pop	{r7, pc}
 8010c9a:	bf00      	nop
 8010c9c:	20002274 	.word	0x20002274
 8010ca0:	200022a0 	.word	0x200022a0
 8010ca4:	20002288 	.word	0x20002288

08010ca8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b084      	sub	sp, #16
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	3358      	adds	r3, #88	; 0x58
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	f002 f863 	bl	8012d80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d108      	bne.n	8010cd6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f001 f989 	bl	8011fe0 <vPortFree>
				vPortFree( pxTCB );
 8010cce:	6878      	ldr	r0, [r7, #4]
 8010cd0:	f001 f986 	bl	8011fe0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010cd4:	e018      	b.n	8010d08 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8010cdc:	2b01      	cmp	r3, #1
 8010cde:	d103      	bne.n	8010ce8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f001 f97d 	bl	8011fe0 <vPortFree>
	}
 8010ce6:	e00f      	b.n	8010d08 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8010cee:	2b02      	cmp	r3, #2
 8010cf0:	d00a      	beq.n	8010d08 <prvDeleteTCB+0x60>
	__asm volatile
 8010cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cf6:	f383 8811 	msr	BASEPRI, r3
 8010cfa:	f3bf 8f6f 	isb	sy
 8010cfe:	f3bf 8f4f 	dsb	sy
 8010d02:	60fb      	str	r3, [r7, #12]
}
 8010d04:	bf00      	nop
 8010d06:	e7fe      	b.n	8010d06 <prvDeleteTCB+0x5e>
	}
 8010d08:	bf00      	nop
 8010d0a:	3710      	adds	r7, #16
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	bd80      	pop	{r7, pc}

08010d10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010d10:	b480      	push	{r7}
 8010d12:	b083      	sub	sp, #12
 8010d14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010d16:	4b0c      	ldr	r3, [pc, #48]	; (8010d48 <prvResetNextTaskUnblockTime+0x38>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d104      	bne.n	8010d2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010d20:	4b0a      	ldr	r3, [pc, #40]	; (8010d4c <prvResetNextTaskUnblockTime+0x3c>)
 8010d22:	f04f 32ff 	mov.w	r2, #4294967295
 8010d26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010d28:	e008      	b.n	8010d3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d2a:	4b07      	ldr	r3, [pc, #28]	; (8010d48 <prvResetNextTaskUnblockTime+0x38>)
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	68db      	ldr	r3, [r3, #12]
 8010d30:	68db      	ldr	r3, [r3, #12]
 8010d32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	685b      	ldr	r3, [r3, #4]
 8010d38:	4a04      	ldr	r2, [pc, #16]	; (8010d4c <prvResetNextTaskUnblockTime+0x3c>)
 8010d3a:	6013      	str	r3, [r2, #0]
}
 8010d3c:	bf00      	nop
 8010d3e:	370c      	adds	r7, #12
 8010d40:	46bd      	mov	sp, r7
 8010d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d46:	4770      	bx	lr
 8010d48:	20002258 	.word	0x20002258
 8010d4c:	200022c0 	.word	0x200022c0

08010d50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010d50:	b480      	push	{r7}
 8010d52:	b083      	sub	sp, #12
 8010d54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010d56:	4b0b      	ldr	r3, [pc, #44]	; (8010d84 <xTaskGetSchedulerState+0x34>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d102      	bne.n	8010d64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010d5e:	2301      	movs	r3, #1
 8010d60:	607b      	str	r3, [r7, #4]
 8010d62:	e008      	b.n	8010d76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d64:	4b08      	ldr	r3, [pc, #32]	; (8010d88 <xTaskGetSchedulerState+0x38>)
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d102      	bne.n	8010d72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010d6c:	2302      	movs	r3, #2
 8010d6e:	607b      	str	r3, [r7, #4]
 8010d70:	e001      	b.n	8010d76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010d72:	2300      	movs	r3, #0
 8010d74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010d76:	687b      	ldr	r3, [r7, #4]
	}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	370c      	adds	r7, #12
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d82:	4770      	bx	lr
 8010d84:	200022ac 	.word	0x200022ac
 8010d88:	200022c8 	.word	0x200022c8

08010d8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b086      	sub	sp, #24
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d056      	beq.n	8010e50 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010da2:	4b2e      	ldr	r3, [pc, #184]	; (8010e5c <xTaskPriorityDisinherit+0xd0>)
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	693a      	ldr	r2, [r7, #16]
 8010da8:	429a      	cmp	r2, r3
 8010daa:	d00a      	beq.n	8010dc2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010db0:	f383 8811 	msr	BASEPRI, r3
 8010db4:	f3bf 8f6f 	isb	sy
 8010db8:	f3bf 8f4f 	dsb	sy
 8010dbc:	60fb      	str	r3, [r7, #12]
}
 8010dbe:	bf00      	nop
 8010dc0:	e7fe      	b.n	8010dc0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010dc2:	693b      	ldr	r3, [r7, #16]
 8010dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d10a      	bne.n	8010de0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dce:	f383 8811 	msr	BASEPRI, r3
 8010dd2:	f3bf 8f6f 	isb	sy
 8010dd6:	f3bf 8f4f 	dsb	sy
 8010dda:	60bb      	str	r3, [r7, #8]
}
 8010ddc:	bf00      	nop
 8010dde:	e7fe      	b.n	8010dde <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010de0:	693b      	ldr	r3, [r7, #16]
 8010de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010de4:	1e5a      	subs	r2, r3, #1
 8010de6:	693b      	ldr	r3, [r7, #16]
 8010de8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010dea:	693b      	ldr	r3, [r7, #16]
 8010dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dee:	693b      	ldr	r3, [r7, #16]
 8010df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010df2:	429a      	cmp	r2, r3
 8010df4:	d02c      	beq.n	8010e50 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010df6:	693b      	ldr	r3, [r7, #16]
 8010df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d128      	bne.n	8010e50 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010dfe:	693b      	ldr	r3, [r7, #16]
 8010e00:	3304      	adds	r3, #4
 8010e02:	4618      	mov	r0, r3
 8010e04:	f7fe fb6a 	bl	800f4dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010e08:	693b      	ldr	r3, [r7, #16]
 8010e0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010e0c:	693b      	ldr	r3, [r7, #16]
 8010e0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e10:	693b      	ldr	r3, [r7, #16]
 8010e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010e18:	693b      	ldr	r3, [r7, #16]
 8010e1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010e1c:	693b      	ldr	r3, [r7, #16]
 8010e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e20:	4b0f      	ldr	r3, [pc, #60]	; (8010e60 <xTaskPriorityDisinherit+0xd4>)
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	429a      	cmp	r2, r3
 8010e26:	d903      	bls.n	8010e30 <xTaskPriorityDisinherit+0xa4>
 8010e28:	693b      	ldr	r3, [r7, #16]
 8010e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e2c:	4a0c      	ldr	r2, [pc, #48]	; (8010e60 <xTaskPriorityDisinherit+0xd4>)
 8010e2e:	6013      	str	r3, [r2, #0]
 8010e30:	693b      	ldr	r3, [r7, #16]
 8010e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e34:	4613      	mov	r3, r2
 8010e36:	009b      	lsls	r3, r3, #2
 8010e38:	4413      	add	r3, r2
 8010e3a:	009b      	lsls	r3, r3, #2
 8010e3c:	4a09      	ldr	r2, [pc, #36]	; (8010e64 <xTaskPriorityDisinherit+0xd8>)
 8010e3e:	441a      	add	r2, r3
 8010e40:	693b      	ldr	r3, [r7, #16]
 8010e42:	3304      	adds	r3, #4
 8010e44:	4619      	mov	r1, r3
 8010e46:	4610      	mov	r0, r2
 8010e48:	f7fe faeb 	bl	800f422 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010e4c:	2301      	movs	r3, #1
 8010e4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010e50:	697b      	ldr	r3, [r7, #20]
	}
 8010e52:	4618      	mov	r0, r3
 8010e54:	3718      	adds	r7, #24
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}
 8010e5a:	bf00      	nop
 8010e5c:	20001dcc 	.word	0x20001dcc
 8010e60:	200022a8 	.word	0x200022a8
 8010e64:	20001dd0 	.word	0x20001dd0

08010e68 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b086      	sub	sp, #24
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	60f8      	str	r0, [r7, #12]
 8010e70:	60b9      	str	r1, [r7, #8]
 8010e72:	607a      	str	r2, [r7, #4]
 8010e74:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8010e76:	f000 fec5 	bl	8011c04 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010e7a:	4b29      	ldr	r3, [pc, #164]	; (8010f20 <xTaskNotifyWait+0xb8>)
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8010e82:	b2db      	uxtb	r3, r3
 8010e84:	2b02      	cmp	r3, #2
 8010e86:	d01c      	beq.n	8010ec2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8010e88:	4b25      	ldr	r3, [pc, #148]	; (8010f20 <xTaskNotifyWait+0xb8>)
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8010e90:	68fa      	ldr	r2, [r7, #12]
 8010e92:	43d2      	mvns	r2, r2
 8010e94:	400a      	ands	r2, r1
 8010e96:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8010e9a:	4b21      	ldr	r3, [pc, #132]	; (8010f20 <xTaskNotifyWait+0xb8>)
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	2201      	movs	r2, #1
 8010ea0:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 8010ea4:	683b      	ldr	r3, [r7, #0]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d00b      	beq.n	8010ec2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010eaa:	2101      	movs	r1, #1
 8010eac:	6838      	ldr	r0, [r7, #0]
 8010eae:	f000 f9dd 	bl	801126c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010eb2:	4b1c      	ldr	r3, [pc, #112]	; (8010f24 <xTaskNotifyWait+0xbc>)
 8010eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010eb8:	601a      	str	r2, [r3, #0]
 8010eba:	f3bf 8f4f 	dsb	sy
 8010ebe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010ec2:	f000 fecf 	bl	8011c64 <vPortExitCritical>

		taskENTER_CRITICAL();
 8010ec6:	f000 fe9d 	bl	8011c04 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d005      	beq.n	8010edc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8010ed0:	4b13      	ldr	r3, [pc, #76]	; (8010f20 <xTaskNotifyWait+0xb8>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010edc:	4b10      	ldr	r3, [pc, #64]	; (8010f20 <xTaskNotifyWait+0xb8>)
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8010ee4:	b2db      	uxtb	r3, r3
 8010ee6:	2b02      	cmp	r3, #2
 8010ee8:	d002      	beq.n	8010ef0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8010eea:	2300      	movs	r3, #0
 8010eec:	617b      	str	r3, [r7, #20]
 8010eee:	e00a      	b.n	8010f06 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8010ef0:	4b0b      	ldr	r3, [pc, #44]	; (8010f20 <xTaskNotifyWait+0xb8>)
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8010ef8:	68ba      	ldr	r2, [r7, #8]
 8010efa:	43d2      	mvns	r2, r2
 8010efc:	400a      	ands	r2, r1
 8010efe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 8010f02:	2301      	movs	r3, #1
 8010f04:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010f06:	4b06      	ldr	r3, [pc, #24]	; (8010f20 <xTaskNotifyWait+0xb8>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 8010f10:	f000 fea8 	bl	8011c64 <vPortExitCritical>

		return xReturn;
 8010f14:	697b      	ldr	r3, [r7, #20]
	}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3718      	adds	r7, #24
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}
 8010f1e:	bf00      	nop
 8010f20:	20001dcc 	.word	0x20001dcc
 8010f24:	e000ed04 	.word	0xe000ed04

08010f28 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b08a      	sub	sp, #40	; 0x28
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	60f8      	str	r0, [r7, #12]
 8010f30:	60b9      	str	r1, [r7, #8]
 8010f32:	603b      	str	r3, [r7, #0]
 8010f34:	4613      	mov	r3, r2
 8010f36:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010f38:	2301      	movs	r3, #1
 8010f3a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d10a      	bne.n	8010f58 <xTaskGenericNotify+0x30>
	__asm volatile
 8010f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f46:	f383 8811 	msr	BASEPRI, r3
 8010f4a:	f3bf 8f6f 	isb	sy
 8010f4e:	f3bf 8f4f 	dsb	sy
 8010f52:	61bb      	str	r3, [r7, #24]
}
 8010f54:	bf00      	nop
 8010f56:	e7fe      	b.n	8010f56 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8010f5c:	f000 fe52 	bl	8011c04 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8010f60:	683b      	ldr	r3, [r7, #0]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d004      	beq.n	8010f70 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010f66:	6a3b      	ldr	r3, [r7, #32]
 8010f68:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8010f6c:	683b      	ldr	r3, [r7, #0]
 8010f6e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010f70:	6a3b      	ldr	r3, [r7, #32]
 8010f72:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8010f76:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010f78:	6a3b      	ldr	r3, [r7, #32]
 8010f7a:	2202      	movs	r2, #2
 8010f7c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 8010f80:	79fb      	ldrb	r3, [r7, #7]
 8010f82:	2b04      	cmp	r3, #4
 8010f84:	d82d      	bhi.n	8010fe2 <xTaskGenericNotify+0xba>
 8010f86:	a201      	add	r2, pc, #4	; (adr r2, 8010f8c <xTaskGenericNotify+0x64>)
 8010f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f8c:	08011005 	.word	0x08011005
 8010f90:	08010fa1 	.word	0x08010fa1
 8010f94:	08010fb3 	.word	0x08010fb3
 8010f98:	08010fc3 	.word	0x08010fc3
 8010f9c:	08010fcd 	.word	0x08010fcd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010fa0:	6a3b      	ldr	r3, [r7, #32]
 8010fa2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8010fa6:	68bb      	ldr	r3, [r7, #8]
 8010fa8:	431a      	orrs	r2, r3
 8010faa:	6a3b      	ldr	r3, [r7, #32]
 8010fac:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8010fb0:	e02b      	b.n	801100a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010fb2:	6a3b      	ldr	r3, [r7, #32]
 8010fb4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8010fb8:	1c5a      	adds	r2, r3, #1
 8010fba:	6a3b      	ldr	r3, [r7, #32]
 8010fbc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8010fc0:	e023      	b.n	801100a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010fc2:	6a3b      	ldr	r3, [r7, #32]
 8010fc4:	68ba      	ldr	r2, [r7, #8]
 8010fc6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8010fca:	e01e      	b.n	801100a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010fcc:	7ffb      	ldrb	r3, [r7, #31]
 8010fce:	2b02      	cmp	r3, #2
 8010fd0:	d004      	beq.n	8010fdc <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010fd2:	6a3b      	ldr	r3, [r7, #32]
 8010fd4:	68ba      	ldr	r2, [r7, #8]
 8010fd6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010fda:	e016      	b.n	801100a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8010fdc:	2300      	movs	r3, #0
 8010fde:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8010fe0:	e013      	b.n	801100a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010fe2:	6a3b      	ldr	r3, [r7, #32]
 8010fe4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8010fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fec:	d00c      	beq.n	8011008 <xTaskGenericNotify+0xe0>
	__asm volatile
 8010fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ff2:	f383 8811 	msr	BASEPRI, r3
 8010ff6:	f3bf 8f6f 	isb	sy
 8010ffa:	f3bf 8f4f 	dsb	sy
 8010ffe:	617b      	str	r3, [r7, #20]
}
 8011000:	bf00      	nop
 8011002:	e7fe      	b.n	8011002 <xTaskGenericNotify+0xda>
					break;
 8011004:	bf00      	nop
 8011006:	e000      	b.n	801100a <xTaskGenericNotify+0xe2>

					break;
 8011008:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801100a:	7ffb      	ldrb	r3, [r7, #31]
 801100c:	2b01      	cmp	r3, #1
 801100e:	d13a      	bne.n	8011086 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011010:	6a3b      	ldr	r3, [r7, #32]
 8011012:	3304      	adds	r3, #4
 8011014:	4618      	mov	r0, r3
 8011016:	f7fe fa61 	bl	800f4dc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801101a:	6a3b      	ldr	r3, [r7, #32]
 801101c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801101e:	4b1d      	ldr	r3, [pc, #116]	; (8011094 <xTaskGenericNotify+0x16c>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	429a      	cmp	r2, r3
 8011024:	d903      	bls.n	801102e <xTaskGenericNotify+0x106>
 8011026:	6a3b      	ldr	r3, [r7, #32]
 8011028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801102a:	4a1a      	ldr	r2, [pc, #104]	; (8011094 <xTaskGenericNotify+0x16c>)
 801102c:	6013      	str	r3, [r2, #0]
 801102e:	6a3b      	ldr	r3, [r7, #32]
 8011030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011032:	4613      	mov	r3, r2
 8011034:	009b      	lsls	r3, r3, #2
 8011036:	4413      	add	r3, r2
 8011038:	009b      	lsls	r3, r3, #2
 801103a:	4a17      	ldr	r2, [pc, #92]	; (8011098 <xTaskGenericNotify+0x170>)
 801103c:	441a      	add	r2, r3
 801103e:	6a3b      	ldr	r3, [r7, #32]
 8011040:	3304      	adds	r3, #4
 8011042:	4619      	mov	r1, r3
 8011044:	4610      	mov	r0, r2
 8011046:	f7fe f9ec 	bl	800f422 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801104a:	6a3b      	ldr	r3, [r7, #32]
 801104c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801104e:	2b00      	cmp	r3, #0
 8011050:	d00a      	beq.n	8011068 <xTaskGenericNotify+0x140>
	__asm volatile
 8011052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011056:	f383 8811 	msr	BASEPRI, r3
 801105a:	f3bf 8f6f 	isb	sy
 801105e:	f3bf 8f4f 	dsb	sy
 8011062:	613b      	str	r3, [r7, #16]
}
 8011064:	bf00      	nop
 8011066:	e7fe      	b.n	8011066 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011068:	6a3b      	ldr	r3, [r7, #32]
 801106a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801106c:	4b0b      	ldr	r3, [pc, #44]	; (801109c <xTaskGenericNotify+0x174>)
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011072:	429a      	cmp	r2, r3
 8011074:	d907      	bls.n	8011086 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8011076:	4b0a      	ldr	r3, [pc, #40]	; (80110a0 <xTaskGenericNotify+0x178>)
 8011078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801107c:	601a      	str	r2, [r3, #0]
 801107e:	f3bf 8f4f 	dsb	sy
 8011082:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011086:	f000 fded 	bl	8011c64 <vPortExitCritical>

		return xReturn;
 801108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801108c:	4618      	mov	r0, r3
 801108e:	3728      	adds	r7, #40	; 0x28
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}
 8011094:	200022a8 	.word	0x200022a8
 8011098:	20001dd0 	.word	0x20001dd0
 801109c:	20001dcc 	.word	0x20001dcc
 80110a0:	e000ed04 	.word	0xe000ed04

080110a4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b08e      	sub	sp, #56	; 0x38
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	60f8      	str	r0, [r7, #12]
 80110ac:	60b9      	str	r1, [r7, #8]
 80110ae:	603b      	str	r3, [r7, #0]
 80110b0:	4613      	mov	r3, r2
 80110b2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80110b4:	2301      	movs	r3, #1
 80110b6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d10a      	bne.n	80110d4 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80110be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110c2:	f383 8811 	msr	BASEPRI, r3
 80110c6:	f3bf 8f6f 	isb	sy
 80110ca:	f3bf 8f4f 	dsb	sy
 80110ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80110d0:	bf00      	nop
 80110d2:	e7fe      	b.n	80110d2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80110d4:	f000 fe78 	bl	8011dc8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80110dc:	f3ef 8211 	mrs	r2, BASEPRI
 80110e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110e4:	f383 8811 	msr	BASEPRI, r3
 80110e8:	f3bf 8f6f 	isb	sy
 80110ec:	f3bf 8f4f 	dsb	sy
 80110f0:	623a      	str	r2, [r7, #32]
 80110f2:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80110f4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80110f6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80110f8:	683b      	ldr	r3, [r7, #0]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d004      	beq.n	8011108 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80110fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011100:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801110a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801110e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011114:	2202      	movs	r2, #2
 8011116:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 801111a:	79fb      	ldrb	r3, [r7, #7]
 801111c:	2b04      	cmp	r3, #4
 801111e:	d82f      	bhi.n	8011180 <xTaskGenericNotifyFromISR+0xdc>
 8011120:	a201      	add	r2, pc, #4	; (adr r2, 8011128 <xTaskGenericNotifyFromISR+0x84>)
 8011122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011126:	bf00      	nop
 8011128:	080111a3 	.word	0x080111a3
 801112c:	0801113d 	.word	0x0801113d
 8011130:	0801114f 	.word	0x0801114f
 8011134:	0801115f 	.word	0x0801115f
 8011138:	08011169 	.word	0x08011169
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801113c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801113e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	431a      	orrs	r2, r3
 8011146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011148:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 801114c:	e02c      	b.n	80111a8 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801114e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011150:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8011154:	1c5a      	adds	r2, r3, #1
 8011156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011158:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 801115c:	e024      	b.n	80111a8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801115e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011160:	68ba      	ldr	r2, [r7, #8]
 8011162:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8011166:	e01f      	b.n	80111a8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011168:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801116c:	2b02      	cmp	r3, #2
 801116e:	d004      	beq.n	801117a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011172:	68ba      	ldr	r2, [r7, #8]
 8011174:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011178:	e016      	b.n	80111a8 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 801117a:	2300      	movs	r3, #0
 801117c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801117e:	e013      	b.n	80111a8 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011182:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8011186:	f1b3 3fff 	cmp.w	r3, #4294967295
 801118a:	d00c      	beq.n	80111a6 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 801118c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011190:	f383 8811 	msr	BASEPRI, r3
 8011194:	f3bf 8f6f 	isb	sy
 8011198:	f3bf 8f4f 	dsb	sy
 801119c:	61bb      	str	r3, [r7, #24]
}
 801119e:	bf00      	nop
 80111a0:	e7fe      	b.n	80111a0 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80111a2:	bf00      	nop
 80111a4:	e000      	b.n	80111a8 <xTaskGenericNotifyFromISR+0x104>
					break;
 80111a6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80111a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80111ac:	2b01      	cmp	r3, #1
 80111ae:	d146      	bne.n	801123e <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80111b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d00a      	beq.n	80111ce <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 80111b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111bc:	f383 8811 	msr	BASEPRI, r3
 80111c0:	f3bf 8f6f 	isb	sy
 80111c4:	f3bf 8f4f 	dsb	sy
 80111c8:	617b      	str	r3, [r7, #20]
}
 80111ca:	bf00      	nop
 80111cc:	e7fe      	b.n	80111cc <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80111ce:	4b21      	ldr	r3, [pc, #132]	; (8011254 <xTaskGenericNotifyFromISR+0x1b0>)
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d11d      	bne.n	8011212 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80111d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d8:	3304      	adds	r3, #4
 80111da:	4618      	mov	r0, r3
 80111dc:	f7fe f97e 	bl	800f4dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80111e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111e4:	4b1c      	ldr	r3, [pc, #112]	; (8011258 <xTaskGenericNotifyFromISR+0x1b4>)
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	429a      	cmp	r2, r3
 80111ea:	d903      	bls.n	80111f4 <xTaskGenericNotifyFromISR+0x150>
 80111ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111f0:	4a19      	ldr	r2, [pc, #100]	; (8011258 <xTaskGenericNotifyFromISR+0x1b4>)
 80111f2:	6013      	str	r3, [r2, #0]
 80111f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111f8:	4613      	mov	r3, r2
 80111fa:	009b      	lsls	r3, r3, #2
 80111fc:	4413      	add	r3, r2
 80111fe:	009b      	lsls	r3, r3, #2
 8011200:	4a16      	ldr	r2, [pc, #88]	; (801125c <xTaskGenericNotifyFromISR+0x1b8>)
 8011202:	441a      	add	r2, r3
 8011204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011206:	3304      	adds	r3, #4
 8011208:	4619      	mov	r1, r3
 801120a:	4610      	mov	r0, r2
 801120c:	f7fe f909 	bl	800f422 <vListInsertEnd>
 8011210:	e005      	b.n	801121e <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8011212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011214:	3318      	adds	r3, #24
 8011216:	4619      	mov	r1, r3
 8011218:	4811      	ldr	r0, [pc, #68]	; (8011260 <xTaskGenericNotifyFromISR+0x1bc>)
 801121a:	f7fe f902 	bl	800f422 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801121e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011222:	4b10      	ldr	r3, [pc, #64]	; (8011264 <xTaskGenericNotifyFromISR+0x1c0>)
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011228:	429a      	cmp	r2, r3
 801122a:	d908      	bls.n	801123e <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801122c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801122e:	2b00      	cmp	r3, #0
 8011230:	d002      	beq.n	8011238 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8011232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011234:	2201      	movs	r2, #1
 8011236:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8011238:	4b0b      	ldr	r3, [pc, #44]	; (8011268 <xTaskGenericNotifyFromISR+0x1c4>)
 801123a:	2201      	movs	r2, #1
 801123c:	601a      	str	r2, [r3, #0]
 801123e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011240:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011242:	693b      	ldr	r3, [r7, #16]
 8011244:	f383 8811 	msr	BASEPRI, r3
}
 8011248:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801124a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 801124c:	4618      	mov	r0, r3
 801124e:	3738      	adds	r7, #56	; 0x38
 8011250:	46bd      	mov	sp, r7
 8011252:	bd80      	pop	{r7, pc}
 8011254:	200022c8 	.word	0x200022c8
 8011258:	200022a8 	.word	0x200022a8
 801125c:	20001dd0 	.word	0x20001dd0
 8011260:	20002260 	.word	0x20002260
 8011264:	20001dcc 	.word	0x20001dcc
 8011268:	200022b4 	.word	0x200022b4

0801126c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b084      	sub	sp, #16
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011276:	4b21      	ldr	r3, [pc, #132]	; (80112fc <prvAddCurrentTaskToDelayedList+0x90>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801127c:	4b20      	ldr	r3, [pc, #128]	; (8011300 <prvAddCurrentTaskToDelayedList+0x94>)
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	3304      	adds	r3, #4
 8011282:	4618      	mov	r0, r3
 8011284:	f7fe f92a 	bl	800f4dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801128e:	d10a      	bne.n	80112a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d007      	beq.n	80112a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011296:	4b1a      	ldr	r3, [pc, #104]	; (8011300 <prvAddCurrentTaskToDelayedList+0x94>)
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	3304      	adds	r3, #4
 801129c:	4619      	mov	r1, r3
 801129e:	4819      	ldr	r0, [pc, #100]	; (8011304 <prvAddCurrentTaskToDelayedList+0x98>)
 80112a0:	f7fe f8bf 	bl	800f422 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80112a4:	e026      	b.n	80112f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80112a6:	68fa      	ldr	r2, [r7, #12]
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	4413      	add	r3, r2
 80112ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80112ae:	4b14      	ldr	r3, [pc, #80]	; (8011300 <prvAddCurrentTaskToDelayedList+0x94>)
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	68ba      	ldr	r2, [r7, #8]
 80112b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80112b6:	68ba      	ldr	r2, [r7, #8]
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	429a      	cmp	r2, r3
 80112bc:	d209      	bcs.n	80112d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80112be:	4b12      	ldr	r3, [pc, #72]	; (8011308 <prvAddCurrentTaskToDelayedList+0x9c>)
 80112c0:	681a      	ldr	r2, [r3, #0]
 80112c2:	4b0f      	ldr	r3, [pc, #60]	; (8011300 <prvAddCurrentTaskToDelayedList+0x94>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	3304      	adds	r3, #4
 80112c8:	4619      	mov	r1, r3
 80112ca:	4610      	mov	r0, r2
 80112cc:	f7fe f8cd 	bl	800f46a <vListInsert>
}
 80112d0:	e010      	b.n	80112f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80112d2:	4b0e      	ldr	r3, [pc, #56]	; (801130c <prvAddCurrentTaskToDelayedList+0xa0>)
 80112d4:	681a      	ldr	r2, [r3, #0]
 80112d6:	4b0a      	ldr	r3, [pc, #40]	; (8011300 <prvAddCurrentTaskToDelayedList+0x94>)
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	3304      	adds	r3, #4
 80112dc:	4619      	mov	r1, r3
 80112de:	4610      	mov	r0, r2
 80112e0:	f7fe f8c3 	bl	800f46a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80112e4:	4b0a      	ldr	r3, [pc, #40]	; (8011310 <prvAddCurrentTaskToDelayedList+0xa4>)
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	68ba      	ldr	r2, [r7, #8]
 80112ea:	429a      	cmp	r2, r3
 80112ec:	d202      	bcs.n	80112f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80112ee:	4a08      	ldr	r2, [pc, #32]	; (8011310 <prvAddCurrentTaskToDelayedList+0xa4>)
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	6013      	str	r3, [r2, #0]
}
 80112f4:	bf00      	nop
 80112f6:	3710      	adds	r7, #16
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}
 80112fc:	200022a4 	.word	0x200022a4
 8011300:	20001dcc 	.word	0x20001dcc
 8011304:	2000228c 	.word	0x2000228c
 8011308:	2000225c 	.word	0x2000225c
 801130c:	20002258 	.word	0x20002258
 8011310:	200022c0 	.word	0x200022c0

08011314 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b08a      	sub	sp, #40	; 0x28
 8011318:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801131a:	2300      	movs	r3, #0
 801131c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801131e:	f000 fb07 	bl	8011930 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011322:	4b1c      	ldr	r3, [pc, #112]	; (8011394 <xTimerCreateTimerTask+0x80>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d021      	beq.n	801136e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801132a:	2300      	movs	r3, #0
 801132c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801132e:	2300      	movs	r3, #0
 8011330:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011332:	1d3a      	adds	r2, r7, #4
 8011334:	f107 0108 	add.w	r1, r7, #8
 8011338:	f107 030c 	add.w	r3, r7, #12
 801133c:	4618      	mov	r0, r3
 801133e:	f7fe f829 	bl	800f394 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011342:	6879      	ldr	r1, [r7, #4]
 8011344:	68bb      	ldr	r3, [r7, #8]
 8011346:	68fa      	ldr	r2, [r7, #12]
 8011348:	9202      	str	r2, [sp, #8]
 801134a:	9301      	str	r3, [sp, #4]
 801134c:	2302      	movs	r3, #2
 801134e:	9300      	str	r3, [sp, #0]
 8011350:	2300      	movs	r3, #0
 8011352:	460a      	mov	r2, r1
 8011354:	4910      	ldr	r1, [pc, #64]	; (8011398 <xTimerCreateTimerTask+0x84>)
 8011356:	4811      	ldr	r0, [pc, #68]	; (801139c <xTimerCreateTimerTask+0x88>)
 8011358:	f7fe fe90 	bl	801007c <xTaskCreateStatic>
 801135c:	4603      	mov	r3, r0
 801135e:	4a10      	ldr	r2, [pc, #64]	; (80113a0 <xTimerCreateTimerTask+0x8c>)
 8011360:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011362:	4b0f      	ldr	r3, [pc, #60]	; (80113a0 <xTimerCreateTimerTask+0x8c>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d001      	beq.n	801136e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801136a:	2301      	movs	r3, #1
 801136c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d10a      	bne.n	801138a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8011374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011378:	f383 8811 	msr	BASEPRI, r3
 801137c:	f3bf 8f6f 	isb	sy
 8011380:	f3bf 8f4f 	dsb	sy
 8011384:	613b      	str	r3, [r7, #16]
}
 8011386:	bf00      	nop
 8011388:	e7fe      	b.n	8011388 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801138a:	697b      	ldr	r3, [r7, #20]
}
 801138c:	4618      	mov	r0, r3
 801138e:	3718      	adds	r7, #24
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}
 8011394:	20002304 	.word	0x20002304
 8011398:	080151a4 	.word	0x080151a4
 801139c:	080114d9 	.word	0x080114d9
 80113a0:	20002308 	.word	0x20002308

080113a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b08a      	sub	sp, #40	; 0x28
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	60f8      	str	r0, [r7, #12]
 80113ac:	60b9      	str	r1, [r7, #8]
 80113ae:	607a      	str	r2, [r7, #4]
 80113b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80113b2:	2300      	movs	r3, #0
 80113b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d10a      	bne.n	80113d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80113bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113c0:	f383 8811 	msr	BASEPRI, r3
 80113c4:	f3bf 8f6f 	isb	sy
 80113c8:	f3bf 8f4f 	dsb	sy
 80113cc:	623b      	str	r3, [r7, #32]
}
 80113ce:	bf00      	nop
 80113d0:	e7fe      	b.n	80113d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80113d2:	4b1a      	ldr	r3, [pc, #104]	; (801143c <xTimerGenericCommand+0x98>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d02a      	beq.n	8011430 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80113e6:	68bb      	ldr	r3, [r7, #8]
 80113e8:	2b05      	cmp	r3, #5
 80113ea:	dc18      	bgt.n	801141e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80113ec:	f7ff fcb0 	bl	8010d50 <xTaskGetSchedulerState>
 80113f0:	4603      	mov	r3, r0
 80113f2:	2b02      	cmp	r3, #2
 80113f4:	d109      	bne.n	801140a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80113f6:	4b11      	ldr	r3, [pc, #68]	; (801143c <xTimerGenericCommand+0x98>)
 80113f8:	6818      	ldr	r0, [r3, #0]
 80113fa:	f107 0110 	add.w	r1, r7, #16
 80113fe:	2300      	movs	r3, #0
 8011400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011402:	f7fe f9d3 	bl	800f7ac <xQueueGenericSend>
 8011406:	6278      	str	r0, [r7, #36]	; 0x24
 8011408:	e012      	b.n	8011430 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801140a:	4b0c      	ldr	r3, [pc, #48]	; (801143c <xTimerGenericCommand+0x98>)
 801140c:	6818      	ldr	r0, [r3, #0]
 801140e:	f107 0110 	add.w	r1, r7, #16
 8011412:	2300      	movs	r3, #0
 8011414:	2200      	movs	r2, #0
 8011416:	f7fe f9c9 	bl	800f7ac <xQueueGenericSend>
 801141a:	6278      	str	r0, [r7, #36]	; 0x24
 801141c:	e008      	b.n	8011430 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801141e:	4b07      	ldr	r3, [pc, #28]	; (801143c <xTimerGenericCommand+0x98>)
 8011420:	6818      	ldr	r0, [r3, #0]
 8011422:	f107 0110 	add.w	r1, r7, #16
 8011426:	2300      	movs	r3, #0
 8011428:	683a      	ldr	r2, [r7, #0]
 801142a:	f7fe fabd 	bl	800f9a8 <xQueueGenericSendFromISR>
 801142e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011432:	4618      	mov	r0, r3
 8011434:	3728      	adds	r7, #40	; 0x28
 8011436:	46bd      	mov	sp, r7
 8011438:	bd80      	pop	{r7, pc}
 801143a:	bf00      	nop
 801143c:	20002304 	.word	0x20002304

08011440 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b088      	sub	sp, #32
 8011444:	af02      	add	r7, sp, #8
 8011446:	6078      	str	r0, [r7, #4]
 8011448:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801144a:	4b22      	ldr	r3, [pc, #136]	; (80114d4 <prvProcessExpiredTimer+0x94>)
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	68db      	ldr	r3, [r3, #12]
 8011450:	68db      	ldr	r3, [r3, #12]
 8011452:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011454:	697b      	ldr	r3, [r7, #20]
 8011456:	3304      	adds	r3, #4
 8011458:	4618      	mov	r0, r3
 801145a:	f7fe f83f 	bl	800f4dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801145e:	697b      	ldr	r3, [r7, #20]
 8011460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011464:	f003 0304 	and.w	r3, r3, #4
 8011468:	2b00      	cmp	r3, #0
 801146a:	d022      	beq.n	80114b2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	699a      	ldr	r2, [r3, #24]
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	18d1      	adds	r1, r2, r3
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	683a      	ldr	r2, [r7, #0]
 8011478:	6978      	ldr	r0, [r7, #20]
 801147a:	f000 f8d1 	bl	8011620 <prvInsertTimerInActiveList>
 801147e:	4603      	mov	r3, r0
 8011480:	2b00      	cmp	r3, #0
 8011482:	d01f      	beq.n	80114c4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011484:	2300      	movs	r3, #0
 8011486:	9300      	str	r3, [sp, #0]
 8011488:	2300      	movs	r3, #0
 801148a:	687a      	ldr	r2, [r7, #4]
 801148c:	2100      	movs	r1, #0
 801148e:	6978      	ldr	r0, [r7, #20]
 8011490:	f7ff ff88 	bl	80113a4 <xTimerGenericCommand>
 8011494:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011496:	693b      	ldr	r3, [r7, #16]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d113      	bne.n	80114c4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801149c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114a0:	f383 8811 	msr	BASEPRI, r3
 80114a4:	f3bf 8f6f 	isb	sy
 80114a8:	f3bf 8f4f 	dsb	sy
 80114ac:	60fb      	str	r3, [r7, #12]
}
 80114ae:	bf00      	nop
 80114b0:	e7fe      	b.n	80114b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80114b2:	697b      	ldr	r3, [r7, #20]
 80114b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80114b8:	f023 0301 	bic.w	r3, r3, #1
 80114bc:	b2da      	uxtb	r2, r3
 80114be:	697b      	ldr	r3, [r7, #20]
 80114c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80114c4:	697b      	ldr	r3, [r7, #20]
 80114c6:	6a1b      	ldr	r3, [r3, #32]
 80114c8:	6978      	ldr	r0, [r7, #20]
 80114ca:	4798      	blx	r3
}
 80114cc:	bf00      	nop
 80114ce:	3718      	adds	r7, #24
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd80      	pop	{r7, pc}
 80114d4:	200022fc 	.word	0x200022fc

080114d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b084      	sub	sp, #16
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80114e0:	f107 0308 	add.w	r3, r7, #8
 80114e4:	4618      	mov	r0, r3
 80114e6:	f000 f857 	bl	8011598 <prvGetNextExpireTime>
 80114ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	4619      	mov	r1, r3
 80114f0:	68f8      	ldr	r0, [r7, #12]
 80114f2:	f000 f803 	bl	80114fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80114f6:	f000 f8d5 	bl	80116a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80114fa:	e7f1      	b.n	80114e0 <prvTimerTask+0x8>

080114fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b084      	sub	sp, #16
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
 8011504:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011506:	f7ff f81b 	bl	8010540 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801150a:	f107 0308 	add.w	r3, r7, #8
 801150e:	4618      	mov	r0, r3
 8011510:	f000 f866 	bl	80115e0 <prvSampleTimeNow>
 8011514:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011516:	68bb      	ldr	r3, [r7, #8]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d130      	bne.n	801157e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d10a      	bne.n	8011538 <prvProcessTimerOrBlockTask+0x3c>
 8011522:	687a      	ldr	r2, [r7, #4]
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	429a      	cmp	r2, r3
 8011528:	d806      	bhi.n	8011538 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801152a:	f7ff f817 	bl	801055c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801152e:	68f9      	ldr	r1, [r7, #12]
 8011530:	6878      	ldr	r0, [r7, #4]
 8011532:	f7ff ff85 	bl	8011440 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011536:	e024      	b.n	8011582 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011538:	683b      	ldr	r3, [r7, #0]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d008      	beq.n	8011550 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801153e:	4b13      	ldr	r3, [pc, #76]	; (801158c <prvProcessTimerOrBlockTask+0x90>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d101      	bne.n	801154c <prvProcessTimerOrBlockTask+0x50>
 8011548:	2301      	movs	r3, #1
 801154a:	e000      	b.n	801154e <prvProcessTimerOrBlockTask+0x52>
 801154c:	2300      	movs	r3, #0
 801154e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011550:	4b0f      	ldr	r3, [pc, #60]	; (8011590 <prvProcessTimerOrBlockTask+0x94>)
 8011552:	6818      	ldr	r0, [r3, #0]
 8011554:	687a      	ldr	r2, [r7, #4]
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	1ad3      	subs	r3, r2, r3
 801155a:	683a      	ldr	r2, [r7, #0]
 801155c:	4619      	mov	r1, r3
 801155e:	f7fe fd59 	bl	8010014 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011562:	f7fe fffb 	bl	801055c <xTaskResumeAll>
 8011566:	4603      	mov	r3, r0
 8011568:	2b00      	cmp	r3, #0
 801156a:	d10a      	bne.n	8011582 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801156c:	4b09      	ldr	r3, [pc, #36]	; (8011594 <prvProcessTimerOrBlockTask+0x98>)
 801156e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011572:	601a      	str	r2, [r3, #0]
 8011574:	f3bf 8f4f 	dsb	sy
 8011578:	f3bf 8f6f 	isb	sy
}
 801157c:	e001      	b.n	8011582 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801157e:	f7fe ffed 	bl	801055c <xTaskResumeAll>
}
 8011582:	bf00      	nop
 8011584:	3710      	adds	r7, #16
 8011586:	46bd      	mov	sp, r7
 8011588:	bd80      	pop	{r7, pc}
 801158a:	bf00      	nop
 801158c:	20002300 	.word	0x20002300
 8011590:	20002304 	.word	0x20002304
 8011594:	e000ed04 	.word	0xe000ed04

08011598 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011598:	b480      	push	{r7}
 801159a:	b085      	sub	sp, #20
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80115a0:	4b0e      	ldr	r3, [pc, #56]	; (80115dc <prvGetNextExpireTime+0x44>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d101      	bne.n	80115ae <prvGetNextExpireTime+0x16>
 80115aa:	2201      	movs	r2, #1
 80115ac:	e000      	b.n	80115b0 <prvGetNextExpireTime+0x18>
 80115ae:	2200      	movs	r2, #0
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d105      	bne.n	80115c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80115bc:	4b07      	ldr	r3, [pc, #28]	; (80115dc <prvGetNextExpireTime+0x44>)
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	68db      	ldr	r3, [r3, #12]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	60fb      	str	r3, [r7, #12]
 80115c6:	e001      	b.n	80115cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80115c8:	2300      	movs	r3, #0
 80115ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80115cc:	68fb      	ldr	r3, [r7, #12]
}
 80115ce:	4618      	mov	r0, r3
 80115d0:	3714      	adds	r7, #20
 80115d2:	46bd      	mov	sp, r7
 80115d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d8:	4770      	bx	lr
 80115da:	bf00      	nop
 80115dc:	200022fc 	.word	0x200022fc

080115e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b084      	sub	sp, #16
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80115e8:	f7ff f856 	bl	8010698 <xTaskGetTickCount>
 80115ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80115ee:	4b0b      	ldr	r3, [pc, #44]	; (801161c <prvSampleTimeNow+0x3c>)
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	68fa      	ldr	r2, [r7, #12]
 80115f4:	429a      	cmp	r2, r3
 80115f6:	d205      	bcs.n	8011604 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80115f8:	f000 f936 	bl	8011868 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	2201      	movs	r2, #1
 8011600:	601a      	str	r2, [r3, #0]
 8011602:	e002      	b.n	801160a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2200      	movs	r2, #0
 8011608:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801160a:	4a04      	ldr	r2, [pc, #16]	; (801161c <prvSampleTimeNow+0x3c>)
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011610:	68fb      	ldr	r3, [r7, #12]
}
 8011612:	4618      	mov	r0, r3
 8011614:	3710      	adds	r7, #16
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}
 801161a:	bf00      	nop
 801161c:	2000230c 	.word	0x2000230c

08011620 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b086      	sub	sp, #24
 8011624:	af00      	add	r7, sp, #0
 8011626:	60f8      	str	r0, [r7, #12]
 8011628:	60b9      	str	r1, [r7, #8]
 801162a:	607a      	str	r2, [r7, #4]
 801162c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801162e:	2300      	movs	r3, #0
 8011630:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	68ba      	ldr	r2, [r7, #8]
 8011636:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	68fa      	ldr	r2, [r7, #12]
 801163c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801163e:	68ba      	ldr	r2, [r7, #8]
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	429a      	cmp	r2, r3
 8011644:	d812      	bhi.n	801166c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011646:	687a      	ldr	r2, [r7, #4]
 8011648:	683b      	ldr	r3, [r7, #0]
 801164a:	1ad2      	subs	r2, r2, r3
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	699b      	ldr	r3, [r3, #24]
 8011650:	429a      	cmp	r2, r3
 8011652:	d302      	bcc.n	801165a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011654:	2301      	movs	r3, #1
 8011656:	617b      	str	r3, [r7, #20]
 8011658:	e01b      	b.n	8011692 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801165a:	4b10      	ldr	r3, [pc, #64]	; (801169c <prvInsertTimerInActiveList+0x7c>)
 801165c:	681a      	ldr	r2, [r3, #0]
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	3304      	adds	r3, #4
 8011662:	4619      	mov	r1, r3
 8011664:	4610      	mov	r0, r2
 8011666:	f7fd ff00 	bl	800f46a <vListInsert>
 801166a:	e012      	b.n	8011692 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801166c:	687a      	ldr	r2, [r7, #4]
 801166e:	683b      	ldr	r3, [r7, #0]
 8011670:	429a      	cmp	r2, r3
 8011672:	d206      	bcs.n	8011682 <prvInsertTimerInActiveList+0x62>
 8011674:	68ba      	ldr	r2, [r7, #8]
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	429a      	cmp	r2, r3
 801167a:	d302      	bcc.n	8011682 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801167c:	2301      	movs	r3, #1
 801167e:	617b      	str	r3, [r7, #20]
 8011680:	e007      	b.n	8011692 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011682:	4b07      	ldr	r3, [pc, #28]	; (80116a0 <prvInsertTimerInActiveList+0x80>)
 8011684:	681a      	ldr	r2, [r3, #0]
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	3304      	adds	r3, #4
 801168a:	4619      	mov	r1, r3
 801168c:	4610      	mov	r0, r2
 801168e:	f7fd feec 	bl	800f46a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011692:	697b      	ldr	r3, [r7, #20]
}
 8011694:	4618      	mov	r0, r3
 8011696:	3718      	adds	r7, #24
 8011698:	46bd      	mov	sp, r7
 801169a:	bd80      	pop	{r7, pc}
 801169c:	20002300 	.word	0x20002300
 80116a0:	200022fc 	.word	0x200022fc

080116a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b08e      	sub	sp, #56	; 0x38
 80116a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80116aa:	e0ca      	b.n	8011842 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	da18      	bge.n	80116e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80116b2:	1d3b      	adds	r3, r7, #4
 80116b4:	3304      	adds	r3, #4
 80116b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80116b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d10a      	bne.n	80116d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80116be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116c2:	f383 8811 	msr	BASEPRI, r3
 80116c6:	f3bf 8f6f 	isb	sy
 80116ca:	f3bf 8f4f 	dsb	sy
 80116ce:	61fb      	str	r3, [r7, #28]
}
 80116d0:	bf00      	nop
 80116d2:	e7fe      	b.n	80116d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80116d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80116da:	6850      	ldr	r0, [r2, #4]
 80116dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80116de:	6892      	ldr	r2, [r2, #8]
 80116e0:	4611      	mov	r1, r2
 80116e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	f2c0 80aa 	blt.w	8011840 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80116f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116f2:	695b      	ldr	r3, [r3, #20]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d004      	beq.n	8011702 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80116f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116fa:	3304      	adds	r3, #4
 80116fc:	4618      	mov	r0, r3
 80116fe:	f7fd feed 	bl	800f4dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011702:	463b      	mov	r3, r7
 8011704:	4618      	mov	r0, r3
 8011706:	f7ff ff6b 	bl	80115e0 <prvSampleTimeNow>
 801170a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	2b09      	cmp	r3, #9
 8011710:	f200 8097 	bhi.w	8011842 <prvProcessReceivedCommands+0x19e>
 8011714:	a201      	add	r2, pc, #4	; (adr r2, 801171c <prvProcessReceivedCommands+0x78>)
 8011716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801171a:	bf00      	nop
 801171c:	08011745 	.word	0x08011745
 8011720:	08011745 	.word	0x08011745
 8011724:	08011745 	.word	0x08011745
 8011728:	080117b9 	.word	0x080117b9
 801172c:	080117cd 	.word	0x080117cd
 8011730:	08011817 	.word	0x08011817
 8011734:	08011745 	.word	0x08011745
 8011738:	08011745 	.word	0x08011745
 801173c:	080117b9 	.word	0x080117b9
 8011740:	080117cd 	.word	0x080117cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011746:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801174a:	f043 0301 	orr.w	r3, r3, #1
 801174e:	b2da      	uxtb	r2, r3
 8011750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011752:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011756:	68ba      	ldr	r2, [r7, #8]
 8011758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801175a:	699b      	ldr	r3, [r3, #24]
 801175c:	18d1      	adds	r1, r2, r3
 801175e:	68bb      	ldr	r3, [r7, #8]
 8011760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011764:	f7ff ff5c 	bl	8011620 <prvInsertTimerInActiveList>
 8011768:	4603      	mov	r3, r0
 801176a:	2b00      	cmp	r3, #0
 801176c:	d069      	beq.n	8011842 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801176e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011770:	6a1b      	ldr	r3, [r3, #32]
 8011772:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011774:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011778:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801177c:	f003 0304 	and.w	r3, r3, #4
 8011780:	2b00      	cmp	r3, #0
 8011782:	d05e      	beq.n	8011842 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011784:	68ba      	ldr	r2, [r7, #8]
 8011786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011788:	699b      	ldr	r3, [r3, #24]
 801178a:	441a      	add	r2, r3
 801178c:	2300      	movs	r3, #0
 801178e:	9300      	str	r3, [sp, #0]
 8011790:	2300      	movs	r3, #0
 8011792:	2100      	movs	r1, #0
 8011794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011796:	f7ff fe05 	bl	80113a4 <xTimerGenericCommand>
 801179a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801179c:	6a3b      	ldr	r3, [r7, #32]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d14f      	bne.n	8011842 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80117a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117a6:	f383 8811 	msr	BASEPRI, r3
 80117aa:	f3bf 8f6f 	isb	sy
 80117ae:	f3bf 8f4f 	dsb	sy
 80117b2:	61bb      	str	r3, [r7, #24]
}
 80117b4:	bf00      	nop
 80117b6:	e7fe      	b.n	80117b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80117b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80117be:	f023 0301 	bic.w	r3, r3, #1
 80117c2:	b2da      	uxtb	r2, r3
 80117c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80117ca:	e03a      	b.n	8011842 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80117cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80117d2:	f043 0301 	orr.w	r3, r3, #1
 80117d6:	b2da      	uxtb	r2, r3
 80117d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80117de:	68ba      	ldr	r2, [r7, #8]
 80117e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80117e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117e6:	699b      	ldr	r3, [r3, #24]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d10a      	bne.n	8011802 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80117ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117f0:	f383 8811 	msr	BASEPRI, r3
 80117f4:	f3bf 8f6f 	isb	sy
 80117f8:	f3bf 8f4f 	dsb	sy
 80117fc:	617b      	str	r3, [r7, #20]
}
 80117fe:	bf00      	nop
 8011800:	e7fe      	b.n	8011800 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011804:	699a      	ldr	r2, [r3, #24]
 8011806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011808:	18d1      	adds	r1, r2, r3
 801180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801180c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801180e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011810:	f7ff ff06 	bl	8011620 <prvInsertTimerInActiveList>
					break;
 8011814:	e015      	b.n	8011842 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011818:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801181c:	f003 0302 	and.w	r3, r3, #2
 8011820:	2b00      	cmp	r3, #0
 8011822:	d103      	bne.n	801182c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8011824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011826:	f000 fbdb 	bl	8011fe0 <vPortFree>
 801182a:	e00a      	b.n	8011842 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801182c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801182e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011832:	f023 0301 	bic.w	r3, r3, #1
 8011836:	b2da      	uxtb	r2, r3
 8011838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801183a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801183e:	e000      	b.n	8011842 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011840:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011842:	4b08      	ldr	r3, [pc, #32]	; (8011864 <prvProcessReceivedCommands+0x1c0>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	1d39      	adds	r1, r7, #4
 8011848:	2200      	movs	r2, #0
 801184a:	4618      	mov	r0, r3
 801184c:	f7fe f948 	bl	800fae0 <xQueueReceive>
 8011850:	4603      	mov	r3, r0
 8011852:	2b00      	cmp	r3, #0
 8011854:	f47f af2a 	bne.w	80116ac <prvProcessReceivedCommands+0x8>
	}
}
 8011858:	bf00      	nop
 801185a:	bf00      	nop
 801185c:	3730      	adds	r7, #48	; 0x30
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}
 8011862:	bf00      	nop
 8011864:	20002304 	.word	0x20002304

08011868 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011868:	b580      	push	{r7, lr}
 801186a:	b088      	sub	sp, #32
 801186c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801186e:	e048      	b.n	8011902 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011870:	4b2d      	ldr	r3, [pc, #180]	; (8011928 <prvSwitchTimerLists+0xc0>)
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	68db      	ldr	r3, [r3, #12]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801187a:	4b2b      	ldr	r3, [pc, #172]	; (8011928 <prvSwitchTimerLists+0xc0>)
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	68db      	ldr	r3, [r3, #12]
 8011880:	68db      	ldr	r3, [r3, #12]
 8011882:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	3304      	adds	r3, #4
 8011888:	4618      	mov	r0, r3
 801188a:	f7fd fe27 	bl	800f4dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	6a1b      	ldr	r3, [r3, #32]
 8011892:	68f8      	ldr	r0, [r7, #12]
 8011894:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801189c:	f003 0304 	and.w	r3, r3, #4
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d02e      	beq.n	8011902 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	699b      	ldr	r3, [r3, #24]
 80118a8:	693a      	ldr	r2, [r7, #16]
 80118aa:	4413      	add	r3, r2
 80118ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80118ae:	68ba      	ldr	r2, [r7, #8]
 80118b0:	693b      	ldr	r3, [r7, #16]
 80118b2:	429a      	cmp	r2, r3
 80118b4:	d90e      	bls.n	80118d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	68ba      	ldr	r2, [r7, #8]
 80118ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	68fa      	ldr	r2, [r7, #12]
 80118c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80118c2:	4b19      	ldr	r3, [pc, #100]	; (8011928 <prvSwitchTimerLists+0xc0>)
 80118c4:	681a      	ldr	r2, [r3, #0]
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	3304      	adds	r3, #4
 80118ca:	4619      	mov	r1, r3
 80118cc:	4610      	mov	r0, r2
 80118ce:	f7fd fdcc 	bl	800f46a <vListInsert>
 80118d2:	e016      	b.n	8011902 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80118d4:	2300      	movs	r3, #0
 80118d6:	9300      	str	r3, [sp, #0]
 80118d8:	2300      	movs	r3, #0
 80118da:	693a      	ldr	r2, [r7, #16]
 80118dc:	2100      	movs	r1, #0
 80118de:	68f8      	ldr	r0, [r7, #12]
 80118e0:	f7ff fd60 	bl	80113a4 <xTimerGenericCommand>
 80118e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d10a      	bne.n	8011902 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80118ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118f0:	f383 8811 	msr	BASEPRI, r3
 80118f4:	f3bf 8f6f 	isb	sy
 80118f8:	f3bf 8f4f 	dsb	sy
 80118fc:	603b      	str	r3, [r7, #0]
}
 80118fe:	bf00      	nop
 8011900:	e7fe      	b.n	8011900 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011902:	4b09      	ldr	r3, [pc, #36]	; (8011928 <prvSwitchTimerLists+0xc0>)
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d1b1      	bne.n	8011870 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801190c:	4b06      	ldr	r3, [pc, #24]	; (8011928 <prvSwitchTimerLists+0xc0>)
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011912:	4b06      	ldr	r3, [pc, #24]	; (801192c <prvSwitchTimerLists+0xc4>)
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	4a04      	ldr	r2, [pc, #16]	; (8011928 <prvSwitchTimerLists+0xc0>)
 8011918:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801191a:	4a04      	ldr	r2, [pc, #16]	; (801192c <prvSwitchTimerLists+0xc4>)
 801191c:	697b      	ldr	r3, [r7, #20]
 801191e:	6013      	str	r3, [r2, #0]
}
 8011920:	bf00      	nop
 8011922:	3718      	adds	r7, #24
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}
 8011928:	200022fc 	.word	0x200022fc
 801192c:	20002300 	.word	0x20002300

08011930 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b082      	sub	sp, #8
 8011934:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011936:	f000 f965 	bl	8011c04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801193a:	4b15      	ldr	r3, [pc, #84]	; (8011990 <prvCheckForValidListAndQueue+0x60>)
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d120      	bne.n	8011984 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011942:	4814      	ldr	r0, [pc, #80]	; (8011994 <prvCheckForValidListAndQueue+0x64>)
 8011944:	f7fd fd40 	bl	800f3c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011948:	4813      	ldr	r0, [pc, #76]	; (8011998 <prvCheckForValidListAndQueue+0x68>)
 801194a:	f7fd fd3d 	bl	800f3c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801194e:	4b13      	ldr	r3, [pc, #76]	; (801199c <prvCheckForValidListAndQueue+0x6c>)
 8011950:	4a10      	ldr	r2, [pc, #64]	; (8011994 <prvCheckForValidListAndQueue+0x64>)
 8011952:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011954:	4b12      	ldr	r3, [pc, #72]	; (80119a0 <prvCheckForValidListAndQueue+0x70>)
 8011956:	4a10      	ldr	r2, [pc, #64]	; (8011998 <prvCheckForValidListAndQueue+0x68>)
 8011958:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801195a:	2300      	movs	r3, #0
 801195c:	9300      	str	r3, [sp, #0]
 801195e:	4b11      	ldr	r3, [pc, #68]	; (80119a4 <prvCheckForValidListAndQueue+0x74>)
 8011960:	4a11      	ldr	r2, [pc, #68]	; (80119a8 <prvCheckForValidListAndQueue+0x78>)
 8011962:	2110      	movs	r1, #16
 8011964:	200a      	movs	r0, #10
 8011966:	f7fd fe4b 	bl	800f600 <xQueueGenericCreateStatic>
 801196a:	4603      	mov	r3, r0
 801196c:	4a08      	ldr	r2, [pc, #32]	; (8011990 <prvCheckForValidListAndQueue+0x60>)
 801196e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011970:	4b07      	ldr	r3, [pc, #28]	; (8011990 <prvCheckForValidListAndQueue+0x60>)
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d005      	beq.n	8011984 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011978:	4b05      	ldr	r3, [pc, #20]	; (8011990 <prvCheckForValidListAndQueue+0x60>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	490b      	ldr	r1, [pc, #44]	; (80119ac <prvCheckForValidListAndQueue+0x7c>)
 801197e:	4618      	mov	r0, r3
 8011980:	f7fe fb1e 	bl	800ffc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011984:	f000 f96e 	bl	8011c64 <vPortExitCritical>
}
 8011988:	bf00      	nop
 801198a:	46bd      	mov	sp, r7
 801198c:	bd80      	pop	{r7, pc}
 801198e:	bf00      	nop
 8011990:	20002304 	.word	0x20002304
 8011994:	200022d4 	.word	0x200022d4
 8011998:	200022e8 	.word	0x200022e8
 801199c:	200022fc 	.word	0x200022fc
 80119a0:	20002300 	.word	0x20002300
 80119a4:	200023b0 	.word	0x200023b0
 80119a8:	20002310 	.word	0x20002310
 80119ac:	080151ac 	.word	0x080151ac

080119b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80119b0:	b480      	push	{r7}
 80119b2:	b085      	sub	sp, #20
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	60f8      	str	r0, [r7, #12]
 80119b8:	60b9      	str	r1, [r7, #8]
 80119ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	3b04      	subs	r3, #4
 80119c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80119c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	3b04      	subs	r3, #4
 80119ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80119d0:	68bb      	ldr	r3, [r7, #8]
 80119d2:	f023 0201 	bic.w	r2, r3, #1
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	3b04      	subs	r3, #4
 80119de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80119e0:	4a0c      	ldr	r2, [pc, #48]	; (8011a14 <pxPortInitialiseStack+0x64>)
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	3b14      	subs	r3, #20
 80119ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80119ec:	687a      	ldr	r2, [r7, #4]
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	3b04      	subs	r3, #4
 80119f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	f06f 0202 	mvn.w	r2, #2
 80119fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	3b20      	subs	r3, #32
 8011a04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011a06:	68fb      	ldr	r3, [r7, #12]
}
 8011a08:	4618      	mov	r0, r3
 8011a0a:	3714      	adds	r7, #20
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a12:	4770      	bx	lr
 8011a14:	08011a19 	.word	0x08011a19

08011a18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011a18:	b480      	push	{r7}
 8011a1a:	b085      	sub	sp, #20
 8011a1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011a1e:	2300      	movs	r3, #0
 8011a20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011a22:	4b12      	ldr	r3, [pc, #72]	; (8011a6c <prvTaskExitError+0x54>)
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a2a:	d00a      	beq.n	8011a42 <prvTaskExitError+0x2a>
	__asm volatile
 8011a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a30:	f383 8811 	msr	BASEPRI, r3
 8011a34:	f3bf 8f6f 	isb	sy
 8011a38:	f3bf 8f4f 	dsb	sy
 8011a3c:	60fb      	str	r3, [r7, #12]
}
 8011a3e:	bf00      	nop
 8011a40:	e7fe      	b.n	8011a40 <prvTaskExitError+0x28>
	__asm volatile
 8011a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a46:	f383 8811 	msr	BASEPRI, r3
 8011a4a:	f3bf 8f6f 	isb	sy
 8011a4e:	f3bf 8f4f 	dsb	sy
 8011a52:	60bb      	str	r3, [r7, #8]
}
 8011a54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011a56:	bf00      	nop
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d0fc      	beq.n	8011a58 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011a5e:	bf00      	nop
 8011a60:	bf00      	nop
 8011a62:	3714      	adds	r7, #20
 8011a64:	46bd      	mov	sp, r7
 8011a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6a:	4770      	bx	lr
 8011a6c:	20000050 	.word	0x20000050

08011a70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011a70:	4b07      	ldr	r3, [pc, #28]	; (8011a90 <pxCurrentTCBConst2>)
 8011a72:	6819      	ldr	r1, [r3, #0]
 8011a74:	6808      	ldr	r0, [r1, #0]
 8011a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a7a:	f380 8809 	msr	PSP, r0
 8011a7e:	f3bf 8f6f 	isb	sy
 8011a82:	f04f 0000 	mov.w	r0, #0
 8011a86:	f380 8811 	msr	BASEPRI, r0
 8011a8a:	4770      	bx	lr
 8011a8c:	f3af 8000 	nop.w

08011a90 <pxCurrentTCBConst2>:
 8011a90:	20001dcc 	.word	0x20001dcc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011a94:	bf00      	nop
 8011a96:	bf00      	nop

08011a98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011a98:	4808      	ldr	r0, [pc, #32]	; (8011abc <prvPortStartFirstTask+0x24>)
 8011a9a:	6800      	ldr	r0, [r0, #0]
 8011a9c:	6800      	ldr	r0, [r0, #0]
 8011a9e:	f380 8808 	msr	MSP, r0
 8011aa2:	f04f 0000 	mov.w	r0, #0
 8011aa6:	f380 8814 	msr	CONTROL, r0
 8011aaa:	b662      	cpsie	i
 8011aac:	b661      	cpsie	f
 8011aae:	f3bf 8f4f 	dsb	sy
 8011ab2:	f3bf 8f6f 	isb	sy
 8011ab6:	df00      	svc	0
 8011ab8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011aba:	bf00      	nop
 8011abc:	e000ed08 	.word	0xe000ed08

08011ac0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b086      	sub	sp, #24
 8011ac4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011ac6:	4b46      	ldr	r3, [pc, #280]	; (8011be0 <xPortStartScheduler+0x120>)
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	4a46      	ldr	r2, [pc, #280]	; (8011be4 <xPortStartScheduler+0x124>)
 8011acc:	4293      	cmp	r3, r2
 8011ace:	d10a      	bne.n	8011ae6 <xPortStartScheduler+0x26>
	__asm volatile
 8011ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ad4:	f383 8811 	msr	BASEPRI, r3
 8011ad8:	f3bf 8f6f 	isb	sy
 8011adc:	f3bf 8f4f 	dsb	sy
 8011ae0:	613b      	str	r3, [r7, #16]
}
 8011ae2:	bf00      	nop
 8011ae4:	e7fe      	b.n	8011ae4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011ae6:	4b3e      	ldr	r3, [pc, #248]	; (8011be0 <xPortStartScheduler+0x120>)
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	4a3f      	ldr	r2, [pc, #252]	; (8011be8 <xPortStartScheduler+0x128>)
 8011aec:	4293      	cmp	r3, r2
 8011aee:	d10a      	bne.n	8011b06 <xPortStartScheduler+0x46>
	__asm volatile
 8011af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011af4:	f383 8811 	msr	BASEPRI, r3
 8011af8:	f3bf 8f6f 	isb	sy
 8011afc:	f3bf 8f4f 	dsb	sy
 8011b00:	60fb      	str	r3, [r7, #12]
}
 8011b02:	bf00      	nop
 8011b04:	e7fe      	b.n	8011b04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011b06:	4b39      	ldr	r3, [pc, #228]	; (8011bec <xPortStartScheduler+0x12c>)
 8011b08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011b0a:	697b      	ldr	r3, [r7, #20]
 8011b0c:	781b      	ldrb	r3, [r3, #0]
 8011b0e:	b2db      	uxtb	r3, r3
 8011b10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011b12:	697b      	ldr	r3, [r7, #20]
 8011b14:	22ff      	movs	r2, #255	; 0xff
 8011b16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011b18:	697b      	ldr	r3, [r7, #20]
 8011b1a:	781b      	ldrb	r3, [r3, #0]
 8011b1c:	b2db      	uxtb	r3, r3
 8011b1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011b20:	78fb      	ldrb	r3, [r7, #3]
 8011b22:	b2db      	uxtb	r3, r3
 8011b24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011b28:	b2da      	uxtb	r2, r3
 8011b2a:	4b31      	ldr	r3, [pc, #196]	; (8011bf0 <xPortStartScheduler+0x130>)
 8011b2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011b2e:	4b31      	ldr	r3, [pc, #196]	; (8011bf4 <xPortStartScheduler+0x134>)
 8011b30:	2207      	movs	r2, #7
 8011b32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011b34:	e009      	b.n	8011b4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011b36:	4b2f      	ldr	r3, [pc, #188]	; (8011bf4 <xPortStartScheduler+0x134>)
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	3b01      	subs	r3, #1
 8011b3c:	4a2d      	ldr	r2, [pc, #180]	; (8011bf4 <xPortStartScheduler+0x134>)
 8011b3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011b40:	78fb      	ldrb	r3, [r7, #3]
 8011b42:	b2db      	uxtb	r3, r3
 8011b44:	005b      	lsls	r3, r3, #1
 8011b46:	b2db      	uxtb	r3, r3
 8011b48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011b4a:	78fb      	ldrb	r3, [r7, #3]
 8011b4c:	b2db      	uxtb	r3, r3
 8011b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b52:	2b80      	cmp	r3, #128	; 0x80
 8011b54:	d0ef      	beq.n	8011b36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011b56:	4b27      	ldr	r3, [pc, #156]	; (8011bf4 <xPortStartScheduler+0x134>)
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	f1c3 0307 	rsb	r3, r3, #7
 8011b5e:	2b04      	cmp	r3, #4
 8011b60:	d00a      	beq.n	8011b78 <xPortStartScheduler+0xb8>
	__asm volatile
 8011b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b66:	f383 8811 	msr	BASEPRI, r3
 8011b6a:	f3bf 8f6f 	isb	sy
 8011b6e:	f3bf 8f4f 	dsb	sy
 8011b72:	60bb      	str	r3, [r7, #8]
}
 8011b74:	bf00      	nop
 8011b76:	e7fe      	b.n	8011b76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011b78:	4b1e      	ldr	r3, [pc, #120]	; (8011bf4 <xPortStartScheduler+0x134>)
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	021b      	lsls	r3, r3, #8
 8011b7e:	4a1d      	ldr	r2, [pc, #116]	; (8011bf4 <xPortStartScheduler+0x134>)
 8011b80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011b82:	4b1c      	ldr	r3, [pc, #112]	; (8011bf4 <xPortStartScheduler+0x134>)
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011b8a:	4a1a      	ldr	r2, [pc, #104]	; (8011bf4 <xPortStartScheduler+0x134>)
 8011b8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	b2da      	uxtb	r2, r3
 8011b92:	697b      	ldr	r3, [r7, #20]
 8011b94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011b96:	4b18      	ldr	r3, [pc, #96]	; (8011bf8 <xPortStartScheduler+0x138>)
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	4a17      	ldr	r2, [pc, #92]	; (8011bf8 <xPortStartScheduler+0x138>)
 8011b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011ba0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011ba2:	4b15      	ldr	r3, [pc, #84]	; (8011bf8 <xPortStartScheduler+0x138>)
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	4a14      	ldr	r2, [pc, #80]	; (8011bf8 <xPortStartScheduler+0x138>)
 8011ba8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011bac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011bae:	f000 f8dd 	bl	8011d6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011bb2:	4b12      	ldr	r3, [pc, #72]	; (8011bfc <xPortStartScheduler+0x13c>)
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011bb8:	f000 f8fc 	bl	8011db4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011bbc:	4b10      	ldr	r3, [pc, #64]	; (8011c00 <xPortStartScheduler+0x140>)
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	4a0f      	ldr	r2, [pc, #60]	; (8011c00 <xPortStartScheduler+0x140>)
 8011bc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011bc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011bc8:	f7ff ff66 	bl	8011a98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011bcc:	f7fe fe2e 	bl	801082c <vTaskSwitchContext>
	prvTaskExitError();
 8011bd0:	f7ff ff22 	bl	8011a18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011bd4:	2300      	movs	r3, #0
}
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	3718      	adds	r7, #24
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bd80      	pop	{r7, pc}
 8011bde:	bf00      	nop
 8011be0:	e000ed00 	.word	0xe000ed00
 8011be4:	410fc271 	.word	0x410fc271
 8011be8:	410fc270 	.word	0x410fc270
 8011bec:	e000e400 	.word	0xe000e400
 8011bf0:	20002400 	.word	0x20002400
 8011bf4:	20002404 	.word	0x20002404
 8011bf8:	e000ed20 	.word	0xe000ed20
 8011bfc:	20000050 	.word	0x20000050
 8011c00:	e000ef34 	.word	0xe000ef34

08011c04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011c04:	b480      	push	{r7}
 8011c06:	b083      	sub	sp, #12
 8011c08:	af00      	add	r7, sp, #0
	__asm volatile
 8011c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c0e:	f383 8811 	msr	BASEPRI, r3
 8011c12:	f3bf 8f6f 	isb	sy
 8011c16:	f3bf 8f4f 	dsb	sy
 8011c1a:	607b      	str	r3, [r7, #4]
}
 8011c1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011c1e:	4b0f      	ldr	r3, [pc, #60]	; (8011c5c <vPortEnterCritical+0x58>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	3301      	adds	r3, #1
 8011c24:	4a0d      	ldr	r2, [pc, #52]	; (8011c5c <vPortEnterCritical+0x58>)
 8011c26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011c28:	4b0c      	ldr	r3, [pc, #48]	; (8011c5c <vPortEnterCritical+0x58>)
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	2b01      	cmp	r3, #1
 8011c2e:	d10f      	bne.n	8011c50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011c30:	4b0b      	ldr	r3, [pc, #44]	; (8011c60 <vPortEnterCritical+0x5c>)
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	b2db      	uxtb	r3, r3
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d00a      	beq.n	8011c50 <vPortEnterCritical+0x4c>
	__asm volatile
 8011c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c3e:	f383 8811 	msr	BASEPRI, r3
 8011c42:	f3bf 8f6f 	isb	sy
 8011c46:	f3bf 8f4f 	dsb	sy
 8011c4a:	603b      	str	r3, [r7, #0]
}
 8011c4c:	bf00      	nop
 8011c4e:	e7fe      	b.n	8011c4e <vPortEnterCritical+0x4a>
	}
}
 8011c50:	bf00      	nop
 8011c52:	370c      	adds	r7, #12
 8011c54:	46bd      	mov	sp, r7
 8011c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5a:	4770      	bx	lr
 8011c5c:	20000050 	.word	0x20000050
 8011c60:	e000ed04 	.word	0xe000ed04

08011c64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011c64:	b480      	push	{r7}
 8011c66:	b083      	sub	sp, #12
 8011c68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011c6a:	4b12      	ldr	r3, [pc, #72]	; (8011cb4 <vPortExitCritical+0x50>)
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d10a      	bne.n	8011c88 <vPortExitCritical+0x24>
	__asm volatile
 8011c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c76:	f383 8811 	msr	BASEPRI, r3
 8011c7a:	f3bf 8f6f 	isb	sy
 8011c7e:	f3bf 8f4f 	dsb	sy
 8011c82:	607b      	str	r3, [r7, #4]
}
 8011c84:	bf00      	nop
 8011c86:	e7fe      	b.n	8011c86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011c88:	4b0a      	ldr	r3, [pc, #40]	; (8011cb4 <vPortExitCritical+0x50>)
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	3b01      	subs	r3, #1
 8011c8e:	4a09      	ldr	r2, [pc, #36]	; (8011cb4 <vPortExitCritical+0x50>)
 8011c90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011c92:	4b08      	ldr	r3, [pc, #32]	; (8011cb4 <vPortExitCritical+0x50>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d105      	bne.n	8011ca6 <vPortExitCritical+0x42>
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011c9e:	683b      	ldr	r3, [r7, #0]
 8011ca0:	f383 8811 	msr	BASEPRI, r3
}
 8011ca4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011ca6:	bf00      	nop
 8011ca8:	370c      	adds	r7, #12
 8011caa:	46bd      	mov	sp, r7
 8011cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb0:	4770      	bx	lr
 8011cb2:	bf00      	nop
 8011cb4:	20000050 	.word	0x20000050
	...

08011cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011cc0:	f3ef 8009 	mrs	r0, PSP
 8011cc4:	f3bf 8f6f 	isb	sy
 8011cc8:	4b15      	ldr	r3, [pc, #84]	; (8011d20 <pxCurrentTCBConst>)
 8011cca:	681a      	ldr	r2, [r3, #0]
 8011ccc:	f01e 0f10 	tst.w	lr, #16
 8011cd0:	bf08      	it	eq
 8011cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cda:	6010      	str	r0, [r2, #0]
 8011cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011ce0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011ce4:	f380 8811 	msr	BASEPRI, r0
 8011ce8:	f3bf 8f4f 	dsb	sy
 8011cec:	f3bf 8f6f 	isb	sy
 8011cf0:	f7fe fd9c 	bl	801082c <vTaskSwitchContext>
 8011cf4:	f04f 0000 	mov.w	r0, #0
 8011cf8:	f380 8811 	msr	BASEPRI, r0
 8011cfc:	bc09      	pop	{r0, r3}
 8011cfe:	6819      	ldr	r1, [r3, #0]
 8011d00:	6808      	ldr	r0, [r1, #0]
 8011d02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d06:	f01e 0f10 	tst.w	lr, #16
 8011d0a:	bf08      	it	eq
 8011d0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011d10:	f380 8809 	msr	PSP, r0
 8011d14:	f3bf 8f6f 	isb	sy
 8011d18:	4770      	bx	lr
 8011d1a:	bf00      	nop
 8011d1c:	f3af 8000 	nop.w

08011d20 <pxCurrentTCBConst>:
 8011d20:	20001dcc 	.word	0x20001dcc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011d24:	bf00      	nop
 8011d26:	bf00      	nop

08011d28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b082      	sub	sp, #8
 8011d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8011d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d32:	f383 8811 	msr	BASEPRI, r3
 8011d36:	f3bf 8f6f 	isb	sy
 8011d3a:	f3bf 8f4f 	dsb	sy
 8011d3e:	607b      	str	r3, [r7, #4]
}
 8011d40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011d42:	f7fe fcb9 	bl	80106b8 <xTaskIncrementTick>
 8011d46:	4603      	mov	r3, r0
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d003      	beq.n	8011d54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011d4c:	4b06      	ldr	r3, [pc, #24]	; (8011d68 <xPortSysTickHandler+0x40>)
 8011d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d52:	601a      	str	r2, [r3, #0]
 8011d54:	2300      	movs	r3, #0
 8011d56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011d58:	683b      	ldr	r3, [r7, #0]
 8011d5a:	f383 8811 	msr	BASEPRI, r3
}
 8011d5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011d60:	bf00      	nop
 8011d62:	3708      	adds	r7, #8
 8011d64:	46bd      	mov	sp, r7
 8011d66:	bd80      	pop	{r7, pc}
 8011d68:	e000ed04 	.word	0xe000ed04

08011d6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011d6c:	b480      	push	{r7}
 8011d6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011d70:	4b0b      	ldr	r3, [pc, #44]	; (8011da0 <vPortSetupTimerInterrupt+0x34>)
 8011d72:	2200      	movs	r2, #0
 8011d74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011d76:	4b0b      	ldr	r3, [pc, #44]	; (8011da4 <vPortSetupTimerInterrupt+0x38>)
 8011d78:	2200      	movs	r2, #0
 8011d7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011d7c:	4b0a      	ldr	r3, [pc, #40]	; (8011da8 <vPortSetupTimerInterrupt+0x3c>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	4a0a      	ldr	r2, [pc, #40]	; (8011dac <vPortSetupTimerInterrupt+0x40>)
 8011d82:	fba2 2303 	umull	r2, r3, r2, r3
 8011d86:	099b      	lsrs	r3, r3, #6
 8011d88:	4a09      	ldr	r2, [pc, #36]	; (8011db0 <vPortSetupTimerInterrupt+0x44>)
 8011d8a:	3b01      	subs	r3, #1
 8011d8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011d8e:	4b04      	ldr	r3, [pc, #16]	; (8011da0 <vPortSetupTimerInterrupt+0x34>)
 8011d90:	2207      	movs	r2, #7
 8011d92:	601a      	str	r2, [r3, #0]
}
 8011d94:	bf00      	nop
 8011d96:	46bd      	mov	sp, r7
 8011d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9c:	4770      	bx	lr
 8011d9e:	bf00      	nop
 8011da0:	e000e010 	.word	0xe000e010
 8011da4:	e000e018 	.word	0xe000e018
 8011da8:	20000010 	.word	0x20000010
 8011dac:	10624dd3 	.word	0x10624dd3
 8011db0:	e000e014 	.word	0xe000e014

08011db4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011db4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011dc4 <vPortEnableVFP+0x10>
 8011db8:	6801      	ldr	r1, [r0, #0]
 8011dba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011dbe:	6001      	str	r1, [r0, #0]
 8011dc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011dc2:	bf00      	nop
 8011dc4:	e000ed88 	.word	0xe000ed88

08011dc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011dc8:	b480      	push	{r7}
 8011dca:	b085      	sub	sp, #20
 8011dcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011dce:	f3ef 8305 	mrs	r3, IPSR
 8011dd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	2b0f      	cmp	r3, #15
 8011dd8:	d914      	bls.n	8011e04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011dda:	4a17      	ldr	r2, [pc, #92]	; (8011e38 <vPortValidateInterruptPriority+0x70>)
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	4413      	add	r3, r2
 8011de0:	781b      	ldrb	r3, [r3, #0]
 8011de2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011de4:	4b15      	ldr	r3, [pc, #84]	; (8011e3c <vPortValidateInterruptPriority+0x74>)
 8011de6:	781b      	ldrb	r3, [r3, #0]
 8011de8:	7afa      	ldrb	r2, [r7, #11]
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d20a      	bcs.n	8011e04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8011dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011df2:	f383 8811 	msr	BASEPRI, r3
 8011df6:	f3bf 8f6f 	isb	sy
 8011dfa:	f3bf 8f4f 	dsb	sy
 8011dfe:	607b      	str	r3, [r7, #4]
}
 8011e00:	bf00      	nop
 8011e02:	e7fe      	b.n	8011e02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011e04:	4b0e      	ldr	r3, [pc, #56]	; (8011e40 <vPortValidateInterruptPriority+0x78>)
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011e0c:	4b0d      	ldr	r3, [pc, #52]	; (8011e44 <vPortValidateInterruptPriority+0x7c>)
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	429a      	cmp	r2, r3
 8011e12:	d90a      	bls.n	8011e2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e18:	f383 8811 	msr	BASEPRI, r3
 8011e1c:	f3bf 8f6f 	isb	sy
 8011e20:	f3bf 8f4f 	dsb	sy
 8011e24:	603b      	str	r3, [r7, #0]
}
 8011e26:	bf00      	nop
 8011e28:	e7fe      	b.n	8011e28 <vPortValidateInterruptPriority+0x60>
	}
 8011e2a:	bf00      	nop
 8011e2c:	3714      	adds	r7, #20
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e34:	4770      	bx	lr
 8011e36:	bf00      	nop
 8011e38:	e000e3f0 	.word	0xe000e3f0
 8011e3c:	20002400 	.word	0x20002400
 8011e40:	e000ed0c 	.word	0xe000ed0c
 8011e44:	20002404 	.word	0x20002404

08011e48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b08a      	sub	sp, #40	; 0x28
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011e50:	2300      	movs	r3, #0
 8011e52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011e54:	f7fe fb74 	bl	8010540 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011e58:	4b5b      	ldr	r3, [pc, #364]	; (8011fc8 <pvPortMalloc+0x180>)
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d101      	bne.n	8011e64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011e60:	f000 f920 	bl	80120a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011e64:	4b59      	ldr	r3, [pc, #356]	; (8011fcc <pvPortMalloc+0x184>)
 8011e66:	681a      	ldr	r2, [r3, #0]
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	4013      	ands	r3, r2
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	f040 8093 	bne.w	8011f98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d01d      	beq.n	8011eb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011e78:	2208      	movs	r2, #8
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	4413      	add	r3, r2
 8011e7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	f003 0307 	and.w	r3, r3, #7
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d014      	beq.n	8011eb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	f023 0307 	bic.w	r3, r3, #7
 8011e90:	3308      	adds	r3, #8
 8011e92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	f003 0307 	and.w	r3, r3, #7
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d00a      	beq.n	8011eb4 <pvPortMalloc+0x6c>
	__asm volatile
 8011e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ea2:	f383 8811 	msr	BASEPRI, r3
 8011ea6:	f3bf 8f6f 	isb	sy
 8011eaa:	f3bf 8f4f 	dsb	sy
 8011eae:	617b      	str	r3, [r7, #20]
}
 8011eb0:	bf00      	nop
 8011eb2:	e7fe      	b.n	8011eb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d06e      	beq.n	8011f98 <pvPortMalloc+0x150>
 8011eba:	4b45      	ldr	r3, [pc, #276]	; (8011fd0 <pvPortMalloc+0x188>)
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	687a      	ldr	r2, [r7, #4]
 8011ec0:	429a      	cmp	r2, r3
 8011ec2:	d869      	bhi.n	8011f98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011ec4:	4b43      	ldr	r3, [pc, #268]	; (8011fd4 <pvPortMalloc+0x18c>)
 8011ec6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011ec8:	4b42      	ldr	r3, [pc, #264]	; (8011fd4 <pvPortMalloc+0x18c>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011ece:	e004      	b.n	8011eda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ed2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011edc:	685b      	ldr	r3, [r3, #4]
 8011ede:	687a      	ldr	r2, [r7, #4]
 8011ee0:	429a      	cmp	r2, r3
 8011ee2:	d903      	bls.n	8011eec <pvPortMalloc+0xa4>
 8011ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d1f1      	bne.n	8011ed0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011eec:	4b36      	ldr	r3, [pc, #216]	; (8011fc8 <pvPortMalloc+0x180>)
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	d050      	beq.n	8011f98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011ef6:	6a3b      	ldr	r3, [r7, #32]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	2208      	movs	r2, #8
 8011efc:	4413      	add	r3, r2
 8011efe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f02:	681a      	ldr	r2, [r3, #0]
 8011f04:	6a3b      	ldr	r3, [r7, #32]
 8011f06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f0a:	685a      	ldr	r2, [r3, #4]
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	1ad2      	subs	r2, r2, r3
 8011f10:	2308      	movs	r3, #8
 8011f12:	005b      	lsls	r3, r3, #1
 8011f14:	429a      	cmp	r2, r3
 8011f16:	d91f      	bls.n	8011f58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	4413      	add	r3, r2
 8011f1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011f20:	69bb      	ldr	r3, [r7, #24]
 8011f22:	f003 0307 	and.w	r3, r3, #7
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d00a      	beq.n	8011f40 <pvPortMalloc+0xf8>
	__asm volatile
 8011f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f2e:	f383 8811 	msr	BASEPRI, r3
 8011f32:	f3bf 8f6f 	isb	sy
 8011f36:	f3bf 8f4f 	dsb	sy
 8011f3a:	613b      	str	r3, [r7, #16]
}
 8011f3c:	bf00      	nop
 8011f3e:	e7fe      	b.n	8011f3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f42:	685a      	ldr	r2, [r3, #4]
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	1ad2      	subs	r2, r2, r3
 8011f48:	69bb      	ldr	r3, [r7, #24]
 8011f4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f4e:	687a      	ldr	r2, [r7, #4]
 8011f50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011f52:	69b8      	ldr	r0, [r7, #24]
 8011f54:	f000 f908 	bl	8012168 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011f58:	4b1d      	ldr	r3, [pc, #116]	; (8011fd0 <pvPortMalloc+0x188>)
 8011f5a:	681a      	ldr	r2, [r3, #0]
 8011f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f5e:	685b      	ldr	r3, [r3, #4]
 8011f60:	1ad3      	subs	r3, r2, r3
 8011f62:	4a1b      	ldr	r2, [pc, #108]	; (8011fd0 <pvPortMalloc+0x188>)
 8011f64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011f66:	4b1a      	ldr	r3, [pc, #104]	; (8011fd0 <pvPortMalloc+0x188>)
 8011f68:	681a      	ldr	r2, [r3, #0]
 8011f6a:	4b1b      	ldr	r3, [pc, #108]	; (8011fd8 <pvPortMalloc+0x190>)
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	429a      	cmp	r2, r3
 8011f70:	d203      	bcs.n	8011f7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011f72:	4b17      	ldr	r3, [pc, #92]	; (8011fd0 <pvPortMalloc+0x188>)
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	4a18      	ldr	r2, [pc, #96]	; (8011fd8 <pvPortMalloc+0x190>)
 8011f78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f7c:	685a      	ldr	r2, [r3, #4]
 8011f7e:	4b13      	ldr	r3, [pc, #76]	; (8011fcc <pvPortMalloc+0x184>)
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	431a      	orrs	r2, r3
 8011f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011f8e:	4b13      	ldr	r3, [pc, #76]	; (8011fdc <pvPortMalloc+0x194>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	3301      	adds	r3, #1
 8011f94:	4a11      	ldr	r2, [pc, #68]	; (8011fdc <pvPortMalloc+0x194>)
 8011f96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011f98:	f7fe fae0 	bl	801055c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011f9c:	69fb      	ldr	r3, [r7, #28]
 8011f9e:	f003 0307 	and.w	r3, r3, #7
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d00a      	beq.n	8011fbc <pvPortMalloc+0x174>
	__asm volatile
 8011fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011faa:	f383 8811 	msr	BASEPRI, r3
 8011fae:	f3bf 8f6f 	isb	sy
 8011fb2:	f3bf 8f4f 	dsb	sy
 8011fb6:	60fb      	str	r3, [r7, #12]
}
 8011fb8:	bf00      	nop
 8011fba:	e7fe      	b.n	8011fba <pvPortMalloc+0x172>
	return pvReturn;
 8011fbc:	69fb      	ldr	r3, [r7, #28]
}
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	3728      	adds	r7, #40	; 0x28
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	bd80      	pop	{r7, pc}
 8011fc6:	bf00      	nop
 8011fc8:	20004f08 	.word	0x20004f08
 8011fcc:	20004f1c 	.word	0x20004f1c
 8011fd0:	20004f0c 	.word	0x20004f0c
 8011fd4:	20004f00 	.word	0x20004f00
 8011fd8:	20004f10 	.word	0x20004f10
 8011fdc:	20004f14 	.word	0x20004f14

08011fe0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b086      	sub	sp, #24
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d04d      	beq.n	801208e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011ff2:	2308      	movs	r3, #8
 8011ff4:	425b      	negs	r3, r3
 8011ff6:	697a      	ldr	r2, [r7, #20]
 8011ff8:	4413      	add	r3, r2
 8011ffa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011ffc:	697b      	ldr	r3, [r7, #20]
 8011ffe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012000:	693b      	ldr	r3, [r7, #16]
 8012002:	685a      	ldr	r2, [r3, #4]
 8012004:	4b24      	ldr	r3, [pc, #144]	; (8012098 <vPortFree+0xb8>)
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	4013      	ands	r3, r2
 801200a:	2b00      	cmp	r3, #0
 801200c:	d10a      	bne.n	8012024 <vPortFree+0x44>
	__asm volatile
 801200e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012012:	f383 8811 	msr	BASEPRI, r3
 8012016:	f3bf 8f6f 	isb	sy
 801201a:	f3bf 8f4f 	dsb	sy
 801201e:	60fb      	str	r3, [r7, #12]
}
 8012020:	bf00      	nop
 8012022:	e7fe      	b.n	8012022 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012024:	693b      	ldr	r3, [r7, #16]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d00a      	beq.n	8012042 <vPortFree+0x62>
	__asm volatile
 801202c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012030:	f383 8811 	msr	BASEPRI, r3
 8012034:	f3bf 8f6f 	isb	sy
 8012038:	f3bf 8f4f 	dsb	sy
 801203c:	60bb      	str	r3, [r7, #8]
}
 801203e:	bf00      	nop
 8012040:	e7fe      	b.n	8012040 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012042:	693b      	ldr	r3, [r7, #16]
 8012044:	685a      	ldr	r2, [r3, #4]
 8012046:	4b14      	ldr	r3, [pc, #80]	; (8012098 <vPortFree+0xb8>)
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	4013      	ands	r3, r2
 801204c:	2b00      	cmp	r3, #0
 801204e:	d01e      	beq.n	801208e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012050:	693b      	ldr	r3, [r7, #16]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d11a      	bne.n	801208e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012058:	693b      	ldr	r3, [r7, #16]
 801205a:	685a      	ldr	r2, [r3, #4]
 801205c:	4b0e      	ldr	r3, [pc, #56]	; (8012098 <vPortFree+0xb8>)
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	43db      	mvns	r3, r3
 8012062:	401a      	ands	r2, r3
 8012064:	693b      	ldr	r3, [r7, #16]
 8012066:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012068:	f7fe fa6a 	bl	8010540 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801206c:	693b      	ldr	r3, [r7, #16]
 801206e:	685a      	ldr	r2, [r3, #4]
 8012070:	4b0a      	ldr	r3, [pc, #40]	; (801209c <vPortFree+0xbc>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	4413      	add	r3, r2
 8012076:	4a09      	ldr	r2, [pc, #36]	; (801209c <vPortFree+0xbc>)
 8012078:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801207a:	6938      	ldr	r0, [r7, #16]
 801207c:	f000 f874 	bl	8012168 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012080:	4b07      	ldr	r3, [pc, #28]	; (80120a0 <vPortFree+0xc0>)
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	3301      	adds	r3, #1
 8012086:	4a06      	ldr	r2, [pc, #24]	; (80120a0 <vPortFree+0xc0>)
 8012088:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801208a:	f7fe fa67 	bl	801055c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801208e:	bf00      	nop
 8012090:	3718      	adds	r7, #24
 8012092:	46bd      	mov	sp, r7
 8012094:	bd80      	pop	{r7, pc}
 8012096:	bf00      	nop
 8012098:	20004f1c 	.word	0x20004f1c
 801209c:	20004f0c 	.word	0x20004f0c
 80120a0:	20004f18 	.word	0x20004f18

080120a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80120a4:	b480      	push	{r7}
 80120a6:	b085      	sub	sp, #20
 80120a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80120aa:	f642 23f8 	movw	r3, #11000	; 0x2af8
 80120ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80120b0:	4b27      	ldr	r3, [pc, #156]	; (8012150 <prvHeapInit+0xac>)
 80120b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	f003 0307 	and.w	r3, r3, #7
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d00c      	beq.n	80120d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	3307      	adds	r3, #7
 80120c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	f023 0307 	bic.w	r3, r3, #7
 80120ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80120cc:	68ba      	ldr	r2, [r7, #8]
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	1ad3      	subs	r3, r2, r3
 80120d2:	4a1f      	ldr	r2, [pc, #124]	; (8012150 <prvHeapInit+0xac>)
 80120d4:	4413      	add	r3, r2
 80120d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80120dc:	4a1d      	ldr	r2, [pc, #116]	; (8012154 <prvHeapInit+0xb0>)
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80120e2:	4b1c      	ldr	r3, [pc, #112]	; (8012154 <prvHeapInit+0xb0>)
 80120e4:	2200      	movs	r2, #0
 80120e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	68ba      	ldr	r2, [r7, #8]
 80120ec:	4413      	add	r3, r2
 80120ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80120f0:	2208      	movs	r2, #8
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	1a9b      	subs	r3, r3, r2
 80120f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	f023 0307 	bic.w	r3, r3, #7
 80120fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	4a15      	ldr	r2, [pc, #84]	; (8012158 <prvHeapInit+0xb4>)
 8012104:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012106:	4b14      	ldr	r3, [pc, #80]	; (8012158 <prvHeapInit+0xb4>)
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	2200      	movs	r2, #0
 801210c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801210e:	4b12      	ldr	r3, [pc, #72]	; (8012158 <prvHeapInit+0xb4>)
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	2200      	movs	r2, #0
 8012114:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	68fa      	ldr	r2, [r7, #12]
 801211e:	1ad2      	subs	r2, r2, r3
 8012120:	683b      	ldr	r3, [r7, #0]
 8012122:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012124:	4b0c      	ldr	r3, [pc, #48]	; (8012158 <prvHeapInit+0xb4>)
 8012126:	681a      	ldr	r2, [r3, #0]
 8012128:	683b      	ldr	r3, [r7, #0]
 801212a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801212c:	683b      	ldr	r3, [r7, #0]
 801212e:	685b      	ldr	r3, [r3, #4]
 8012130:	4a0a      	ldr	r2, [pc, #40]	; (801215c <prvHeapInit+0xb8>)
 8012132:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012134:	683b      	ldr	r3, [r7, #0]
 8012136:	685b      	ldr	r3, [r3, #4]
 8012138:	4a09      	ldr	r2, [pc, #36]	; (8012160 <prvHeapInit+0xbc>)
 801213a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801213c:	4b09      	ldr	r3, [pc, #36]	; (8012164 <prvHeapInit+0xc0>)
 801213e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012142:	601a      	str	r2, [r3, #0]
}
 8012144:	bf00      	nop
 8012146:	3714      	adds	r7, #20
 8012148:	46bd      	mov	sp, r7
 801214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214e:	4770      	bx	lr
 8012150:	20002408 	.word	0x20002408
 8012154:	20004f00 	.word	0x20004f00
 8012158:	20004f08 	.word	0x20004f08
 801215c:	20004f10 	.word	0x20004f10
 8012160:	20004f0c 	.word	0x20004f0c
 8012164:	20004f1c 	.word	0x20004f1c

08012168 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012168:	b480      	push	{r7}
 801216a:	b085      	sub	sp, #20
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012170:	4b28      	ldr	r3, [pc, #160]	; (8012214 <prvInsertBlockIntoFreeList+0xac>)
 8012172:	60fb      	str	r3, [r7, #12]
 8012174:	e002      	b.n	801217c <prvInsertBlockIntoFreeList+0x14>
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	60fb      	str	r3, [r7, #12]
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	687a      	ldr	r2, [r7, #4]
 8012182:	429a      	cmp	r2, r3
 8012184:	d8f7      	bhi.n	8012176 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	685b      	ldr	r3, [r3, #4]
 801218e:	68ba      	ldr	r2, [r7, #8]
 8012190:	4413      	add	r3, r2
 8012192:	687a      	ldr	r2, [r7, #4]
 8012194:	429a      	cmp	r2, r3
 8012196:	d108      	bne.n	80121aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	685a      	ldr	r2, [r3, #4]
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	685b      	ldr	r3, [r3, #4]
 80121a0:	441a      	add	r2, r3
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	685b      	ldr	r3, [r3, #4]
 80121b2:	68ba      	ldr	r2, [r7, #8]
 80121b4:	441a      	add	r2, r3
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	429a      	cmp	r2, r3
 80121bc:	d118      	bne.n	80121f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	681a      	ldr	r2, [r3, #0]
 80121c2:	4b15      	ldr	r3, [pc, #84]	; (8012218 <prvInsertBlockIntoFreeList+0xb0>)
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	429a      	cmp	r2, r3
 80121c8:	d00d      	beq.n	80121e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	685a      	ldr	r2, [r3, #4]
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	685b      	ldr	r3, [r3, #4]
 80121d4:	441a      	add	r2, r3
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	681a      	ldr	r2, [r3, #0]
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	601a      	str	r2, [r3, #0]
 80121e4:	e008      	b.n	80121f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80121e6:	4b0c      	ldr	r3, [pc, #48]	; (8012218 <prvInsertBlockIntoFreeList+0xb0>)
 80121e8:	681a      	ldr	r2, [r3, #0]
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	601a      	str	r2, [r3, #0]
 80121ee:	e003      	b.n	80121f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	681a      	ldr	r2, [r3, #0]
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80121f8:	68fa      	ldr	r2, [r7, #12]
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	429a      	cmp	r2, r3
 80121fe:	d002      	beq.n	8012206 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	687a      	ldr	r2, [r7, #4]
 8012204:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012206:	bf00      	nop
 8012208:	3714      	adds	r7, #20
 801220a:	46bd      	mov	sp, r7
 801220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012210:	4770      	bx	lr
 8012212:	bf00      	nop
 8012214:	20004f00 	.word	0x20004f00
 8012218:	20004f08 	.word	0x20004f08

0801221c <__assert_func>:
 801221c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801221e:	4614      	mov	r4, r2
 8012220:	461a      	mov	r2, r3
 8012222:	4b09      	ldr	r3, [pc, #36]	; (8012248 <__assert_func+0x2c>)
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	4605      	mov	r5, r0
 8012228:	68d8      	ldr	r0, [r3, #12]
 801222a:	b14c      	cbz	r4, 8012240 <__assert_func+0x24>
 801222c:	4b07      	ldr	r3, [pc, #28]	; (801224c <__assert_func+0x30>)
 801222e:	9100      	str	r1, [sp, #0]
 8012230:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012234:	4906      	ldr	r1, [pc, #24]	; (8012250 <__assert_func+0x34>)
 8012236:	462b      	mov	r3, r5
 8012238:	f000 f8ea 	bl	8012410 <fiprintf>
 801223c:	f000 fffa 	bl	8013234 <abort>
 8012240:	4b04      	ldr	r3, [pc, #16]	; (8012254 <__assert_func+0x38>)
 8012242:	461c      	mov	r4, r3
 8012244:	e7f3      	b.n	801222e <__assert_func+0x12>
 8012246:	bf00      	nop
 8012248:	20000054 	.word	0x20000054
 801224c:	0801563f 	.word	0x0801563f
 8012250:	0801564c 	.word	0x0801564c
 8012254:	0801567a 	.word	0x0801567a

08012258 <__errno>:
 8012258:	4b01      	ldr	r3, [pc, #4]	; (8012260 <__errno+0x8>)
 801225a:	6818      	ldr	r0, [r3, #0]
 801225c:	4770      	bx	lr
 801225e:	bf00      	nop
 8012260:	20000054 	.word	0x20000054

08012264 <std>:
 8012264:	2300      	movs	r3, #0
 8012266:	b510      	push	{r4, lr}
 8012268:	4604      	mov	r4, r0
 801226a:	e9c0 3300 	strd	r3, r3, [r0]
 801226e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012272:	6083      	str	r3, [r0, #8]
 8012274:	8181      	strh	r1, [r0, #12]
 8012276:	6643      	str	r3, [r0, #100]	; 0x64
 8012278:	81c2      	strh	r2, [r0, #14]
 801227a:	6183      	str	r3, [r0, #24]
 801227c:	4619      	mov	r1, r3
 801227e:	2208      	movs	r2, #8
 8012280:	305c      	adds	r0, #92	; 0x5c
 8012282:	f000 f956 	bl	8012532 <memset>
 8012286:	4b05      	ldr	r3, [pc, #20]	; (801229c <std+0x38>)
 8012288:	6263      	str	r3, [r4, #36]	; 0x24
 801228a:	4b05      	ldr	r3, [pc, #20]	; (80122a0 <std+0x3c>)
 801228c:	62a3      	str	r3, [r4, #40]	; 0x28
 801228e:	4b05      	ldr	r3, [pc, #20]	; (80122a4 <std+0x40>)
 8012290:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012292:	4b05      	ldr	r3, [pc, #20]	; (80122a8 <std+0x44>)
 8012294:	6224      	str	r4, [r4, #32]
 8012296:	6323      	str	r3, [r4, #48]	; 0x30
 8012298:	bd10      	pop	{r4, pc}
 801229a:	bf00      	nop
 801229c:	08012f01 	.word	0x08012f01
 80122a0:	08012f23 	.word	0x08012f23
 80122a4:	08012f5b 	.word	0x08012f5b
 80122a8:	08012f7f 	.word	0x08012f7f

080122ac <_cleanup_r>:
 80122ac:	4901      	ldr	r1, [pc, #4]	; (80122b4 <_cleanup_r+0x8>)
 80122ae:	f000 b8c1 	b.w	8012434 <_fwalk_reent>
 80122b2:	bf00      	nop
 80122b4:	08013371 	.word	0x08013371

080122b8 <__sfmoreglue>:
 80122b8:	b570      	push	{r4, r5, r6, lr}
 80122ba:	2268      	movs	r2, #104	; 0x68
 80122bc:	1e4d      	subs	r5, r1, #1
 80122be:	4355      	muls	r5, r2
 80122c0:	460e      	mov	r6, r1
 80122c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80122c6:	f000 f95d 	bl	8012584 <_malloc_r>
 80122ca:	4604      	mov	r4, r0
 80122cc:	b140      	cbz	r0, 80122e0 <__sfmoreglue+0x28>
 80122ce:	2100      	movs	r1, #0
 80122d0:	e9c0 1600 	strd	r1, r6, [r0]
 80122d4:	300c      	adds	r0, #12
 80122d6:	60a0      	str	r0, [r4, #8]
 80122d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80122dc:	f000 f929 	bl	8012532 <memset>
 80122e0:	4620      	mov	r0, r4
 80122e2:	bd70      	pop	{r4, r5, r6, pc}

080122e4 <__sfp_lock_acquire>:
 80122e4:	4801      	ldr	r0, [pc, #4]	; (80122ec <__sfp_lock_acquire+0x8>)
 80122e6:	f000 b8ea 	b.w	80124be <__retarget_lock_acquire_recursive>
 80122ea:	bf00      	nop
 80122ec:	20004f21 	.word	0x20004f21

080122f0 <__sfp_lock_release>:
 80122f0:	4801      	ldr	r0, [pc, #4]	; (80122f8 <__sfp_lock_release+0x8>)
 80122f2:	f000 b8e5 	b.w	80124c0 <__retarget_lock_release_recursive>
 80122f6:	bf00      	nop
 80122f8:	20004f21 	.word	0x20004f21

080122fc <__sinit_lock_acquire>:
 80122fc:	4801      	ldr	r0, [pc, #4]	; (8012304 <__sinit_lock_acquire+0x8>)
 80122fe:	f000 b8de 	b.w	80124be <__retarget_lock_acquire_recursive>
 8012302:	bf00      	nop
 8012304:	20004f22 	.word	0x20004f22

08012308 <__sinit_lock_release>:
 8012308:	4801      	ldr	r0, [pc, #4]	; (8012310 <__sinit_lock_release+0x8>)
 801230a:	f000 b8d9 	b.w	80124c0 <__retarget_lock_release_recursive>
 801230e:	bf00      	nop
 8012310:	20004f22 	.word	0x20004f22

08012314 <__sinit>:
 8012314:	b510      	push	{r4, lr}
 8012316:	4604      	mov	r4, r0
 8012318:	f7ff fff0 	bl	80122fc <__sinit_lock_acquire>
 801231c:	69a3      	ldr	r3, [r4, #24]
 801231e:	b11b      	cbz	r3, 8012328 <__sinit+0x14>
 8012320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012324:	f7ff bff0 	b.w	8012308 <__sinit_lock_release>
 8012328:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801232c:	6523      	str	r3, [r4, #80]	; 0x50
 801232e:	4b13      	ldr	r3, [pc, #76]	; (801237c <__sinit+0x68>)
 8012330:	4a13      	ldr	r2, [pc, #76]	; (8012380 <__sinit+0x6c>)
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	62a2      	str	r2, [r4, #40]	; 0x28
 8012336:	42a3      	cmp	r3, r4
 8012338:	bf04      	itt	eq
 801233a:	2301      	moveq	r3, #1
 801233c:	61a3      	streq	r3, [r4, #24]
 801233e:	4620      	mov	r0, r4
 8012340:	f000 f820 	bl	8012384 <__sfp>
 8012344:	6060      	str	r0, [r4, #4]
 8012346:	4620      	mov	r0, r4
 8012348:	f000 f81c 	bl	8012384 <__sfp>
 801234c:	60a0      	str	r0, [r4, #8]
 801234e:	4620      	mov	r0, r4
 8012350:	f000 f818 	bl	8012384 <__sfp>
 8012354:	2200      	movs	r2, #0
 8012356:	60e0      	str	r0, [r4, #12]
 8012358:	2104      	movs	r1, #4
 801235a:	6860      	ldr	r0, [r4, #4]
 801235c:	f7ff ff82 	bl	8012264 <std>
 8012360:	68a0      	ldr	r0, [r4, #8]
 8012362:	2201      	movs	r2, #1
 8012364:	2109      	movs	r1, #9
 8012366:	f7ff ff7d 	bl	8012264 <std>
 801236a:	68e0      	ldr	r0, [r4, #12]
 801236c:	2202      	movs	r2, #2
 801236e:	2112      	movs	r1, #18
 8012370:	f7ff ff78 	bl	8012264 <std>
 8012374:	2301      	movs	r3, #1
 8012376:	61a3      	str	r3, [r4, #24]
 8012378:	e7d2      	b.n	8012320 <__sinit+0xc>
 801237a:	bf00      	nop
 801237c:	080156dc 	.word	0x080156dc
 8012380:	080122ad 	.word	0x080122ad

08012384 <__sfp>:
 8012384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012386:	4607      	mov	r7, r0
 8012388:	f7ff ffac 	bl	80122e4 <__sfp_lock_acquire>
 801238c:	4b1e      	ldr	r3, [pc, #120]	; (8012408 <__sfp+0x84>)
 801238e:	681e      	ldr	r6, [r3, #0]
 8012390:	69b3      	ldr	r3, [r6, #24]
 8012392:	b913      	cbnz	r3, 801239a <__sfp+0x16>
 8012394:	4630      	mov	r0, r6
 8012396:	f7ff ffbd 	bl	8012314 <__sinit>
 801239a:	3648      	adds	r6, #72	; 0x48
 801239c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80123a0:	3b01      	subs	r3, #1
 80123a2:	d503      	bpl.n	80123ac <__sfp+0x28>
 80123a4:	6833      	ldr	r3, [r6, #0]
 80123a6:	b30b      	cbz	r3, 80123ec <__sfp+0x68>
 80123a8:	6836      	ldr	r6, [r6, #0]
 80123aa:	e7f7      	b.n	801239c <__sfp+0x18>
 80123ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80123b0:	b9d5      	cbnz	r5, 80123e8 <__sfp+0x64>
 80123b2:	4b16      	ldr	r3, [pc, #88]	; (801240c <__sfp+0x88>)
 80123b4:	60e3      	str	r3, [r4, #12]
 80123b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80123ba:	6665      	str	r5, [r4, #100]	; 0x64
 80123bc:	f000 f87e 	bl	80124bc <__retarget_lock_init_recursive>
 80123c0:	f7ff ff96 	bl	80122f0 <__sfp_lock_release>
 80123c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80123c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80123cc:	6025      	str	r5, [r4, #0]
 80123ce:	61a5      	str	r5, [r4, #24]
 80123d0:	2208      	movs	r2, #8
 80123d2:	4629      	mov	r1, r5
 80123d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80123d8:	f000 f8ab 	bl	8012532 <memset>
 80123dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80123e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80123e4:	4620      	mov	r0, r4
 80123e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123e8:	3468      	adds	r4, #104	; 0x68
 80123ea:	e7d9      	b.n	80123a0 <__sfp+0x1c>
 80123ec:	2104      	movs	r1, #4
 80123ee:	4638      	mov	r0, r7
 80123f0:	f7ff ff62 	bl	80122b8 <__sfmoreglue>
 80123f4:	4604      	mov	r4, r0
 80123f6:	6030      	str	r0, [r6, #0]
 80123f8:	2800      	cmp	r0, #0
 80123fa:	d1d5      	bne.n	80123a8 <__sfp+0x24>
 80123fc:	f7ff ff78 	bl	80122f0 <__sfp_lock_release>
 8012400:	230c      	movs	r3, #12
 8012402:	603b      	str	r3, [r7, #0]
 8012404:	e7ee      	b.n	80123e4 <__sfp+0x60>
 8012406:	bf00      	nop
 8012408:	080156dc 	.word	0x080156dc
 801240c:	ffff0001 	.word	0xffff0001

08012410 <fiprintf>:
 8012410:	b40e      	push	{r1, r2, r3}
 8012412:	b503      	push	{r0, r1, lr}
 8012414:	4601      	mov	r1, r0
 8012416:	ab03      	add	r3, sp, #12
 8012418:	4805      	ldr	r0, [pc, #20]	; (8012430 <fiprintf+0x20>)
 801241a:	f853 2b04 	ldr.w	r2, [r3], #4
 801241e:	6800      	ldr	r0, [r0, #0]
 8012420:	9301      	str	r3, [sp, #4]
 8012422:	f000 f94d 	bl	80126c0 <_vfiprintf_r>
 8012426:	b002      	add	sp, #8
 8012428:	f85d eb04 	ldr.w	lr, [sp], #4
 801242c:	b003      	add	sp, #12
 801242e:	4770      	bx	lr
 8012430:	20000054 	.word	0x20000054

08012434 <_fwalk_reent>:
 8012434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012438:	4606      	mov	r6, r0
 801243a:	4688      	mov	r8, r1
 801243c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012440:	2700      	movs	r7, #0
 8012442:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012446:	f1b9 0901 	subs.w	r9, r9, #1
 801244a:	d505      	bpl.n	8012458 <_fwalk_reent+0x24>
 801244c:	6824      	ldr	r4, [r4, #0]
 801244e:	2c00      	cmp	r4, #0
 8012450:	d1f7      	bne.n	8012442 <_fwalk_reent+0xe>
 8012452:	4638      	mov	r0, r7
 8012454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012458:	89ab      	ldrh	r3, [r5, #12]
 801245a:	2b01      	cmp	r3, #1
 801245c:	d907      	bls.n	801246e <_fwalk_reent+0x3a>
 801245e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012462:	3301      	adds	r3, #1
 8012464:	d003      	beq.n	801246e <_fwalk_reent+0x3a>
 8012466:	4629      	mov	r1, r5
 8012468:	4630      	mov	r0, r6
 801246a:	47c0      	blx	r8
 801246c:	4307      	orrs	r7, r0
 801246e:	3568      	adds	r5, #104	; 0x68
 8012470:	e7e9      	b.n	8012446 <_fwalk_reent+0x12>
	...

08012474 <__libc_init_array>:
 8012474:	b570      	push	{r4, r5, r6, lr}
 8012476:	4d0d      	ldr	r5, [pc, #52]	; (80124ac <__libc_init_array+0x38>)
 8012478:	4c0d      	ldr	r4, [pc, #52]	; (80124b0 <__libc_init_array+0x3c>)
 801247a:	1b64      	subs	r4, r4, r5
 801247c:	10a4      	asrs	r4, r4, #2
 801247e:	2600      	movs	r6, #0
 8012480:	42a6      	cmp	r6, r4
 8012482:	d109      	bne.n	8012498 <__libc_init_array+0x24>
 8012484:	4d0b      	ldr	r5, [pc, #44]	; (80124b4 <__libc_init_array+0x40>)
 8012486:	4c0c      	ldr	r4, [pc, #48]	; (80124b8 <__libc_init_array+0x44>)
 8012488:	f001 fa90 	bl	80139ac <_init>
 801248c:	1b64      	subs	r4, r4, r5
 801248e:	10a4      	asrs	r4, r4, #2
 8012490:	2600      	movs	r6, #0
 8012492:	42a6      	cmp	r6, r4
 8012494:	d105      	bne.n	80124a2 <__libc_init_array+0x2e>
 8012496:	bd70      	pop	{r4, r5, r6, pc}
 8012498:	f855 3b04 	ldr.w	r3, [r5], #4
 801249c:	4798      	blx	r3
 801249e:	3601      	adds	r6, #1
 80124a0:	e7ee      	b.n	8012480 <__libc_init_array+0xc>
 80124a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80124a6:	4798      	blx	r3
 80124a8:	3601      	adds	r6, #1
 80124aa:	e7f2      	b.n	8012492 <__libc_init_array+0x1e>
 80124ac:	08015790 	.word	0x08015790
 80124b0:	08015790 	.word	0x08015790
 80124b4:	08015790 	.word	0x08015790
 80124b8:	08015794 	.word	0x08015794

080124bc <__retarget_lock_init_recursive>:
 80124bc:	4770      	bx	lr

080124be <__retarget_lock_acquire_recursive>:
 80124be:	4770      	bx	lr

080124c0 <__retarget_lock_release_recursive>:
 80124c0:	4770      	bx	lr

080124c2 <memcmp>:
 80124c2:	b510      	push	{r4, lr}
 80124c4:	3901      	subs	r1, #1
 80124c6:	4402      	add	r2, r0
 80124c8:	4290      	cmp	r0, r2
 80124ca:	d101      	bne.n	80124d0 <memcmp+0xe>
 80124cc:	2000      	movs	r0, #0
 80124ce:	e005      	b.n	80124dc <memcmp+0x1a>
 80124d0:	7803      	ldrb	r3, [r0, #0]
 80124d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80124d6:	42a3      	cmp	r3, r4
 80124d8:	d001      	beq.n	80124de <memcmp+0x1c>
 80124da:	1b18      	subs	r0, r3, r4
 80124dc:	bd10      	pop	{r4, pc}
 80124de:	3001      	adds	r0, #1
 80124e0:	e7f2      	b.n	80124c8 <memcmp+0x6>

080124e2 <memcpy>:
 80124e2:	440a      	add	r2, r1
 80124e4:	4291      	cmp	r1, r2
 80124e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80124ea:	d100      	bne.n	80124ee <memcpy+0xc>
 80124ec:	4770      	bx	lr
 80124ee:	b510      	push	{r4, lr}
 80124f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80124f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80124f8:	4291      	cmp	r1, r2
 80124fa:	d1f9      	bne.n	80124f0 <memcpy+0xe>
 80124fc:	bd10      	pop	{r4, pc}

080124fe <memmove>:
 80124fe:	4288      	cmp	r0, r1
 8012500:	b510      	push	{r4, lr}
 8012502:	eb01 0402 	add.w	r4, r1, r2
 8012506:	d902      	bls.n	801250e <memmove+0x10>
 8012508:	4284      	cmp	r4, r0
 801250a:	4623      	mov	r3, r4
 801250c:	d807      	bhi.n	801251e <memmove+0x20>
 801250e:	1e43      	subs	r3, r0, #1
 8012510:	42a1      	cmp	r1, r4
 8012512:	d008      	beq.n	8012526 <memmove+0x28>
 8012514:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012518:	f803 2f01 	strb.w	r2, [r3, #1]!
 801251c:	e7f8      	b.n	8012510 <memmove+0x12>
 801251e:	4402      	add	r2, r0
 8012520:	4601      	mov	r1, r0
 8012522:	428a      	cmp	r2, r1
 8012524:	d100      	bne.n	8012528 <memmove+0x2a>
 8012526:	bd10      	pop	{r4, pc}
 8012528:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801252c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012530:	e7f7      	b.n	8012522 <memmove+0x24>

08012532 <memset>:
 8012532:	4402      	add	r2, r0
 8012534:	4603      	mov	r3, r0
 8012536:	4293      	cmp	r3, r2
 8012538:	d100      	bne.n	801253c <memset+0xa>
 801253a:	4770      	bx	lr
 801253c:	f803 1b01 	strb.w	r1, [r3], #1
 8012540:	e7f9      	b.n	8012536 <memset+0x4>
	...

08012544 <sbrk_aligned>:
 8012544:	b570      	push	{r4, r5, r6, lr}
 8012546:	4e0e      	ldr	r6, [pc, #56]	; (8012580 <sbrk_aligned+0x3c>)
 8012548:	460c      	mov	r4, r1
 801254a:	6831      	ldr	r1, [r6, #0]
 801254c:	4605      	mov	r5, r0
 801254e:	b911      	cbnz	r1, 8012556 <sbrk_aligned+0x12>
 8012550:	f000 fc72 	bl	8012e38 <_sbrk_r>
 8012554:	6030      	str	r0, [r6, #0]
 8012556:	4621      	mov	r1, r4
 8012558:	4628      	mov	r0, r5
 801255a:	f000 fc6d 	bl	8012e38 <_sbrk_r>
 801255e:	1c43      	adds	r3, r0, #1
 8012560:	d00a      	beq.n	8012578 <sbrk_aligned+0x34>
 8012562:	1cc4      	adds	r4, r0, #3
 8012564:	f024 0403 	bic.w	r4, r4, #3
 8012568:	42a0      	cmp	r0, r4
 801256a:	d007      	beq.n	801257c <sbrk_aligned+0x38>
 801256c:	1a21      	subs	r1, r4, r0
 801256e:	4628      	mov	r0, r5
 8012570:	f000 fc62 	bl	8012e38 <_sbrk_r>
 8012574:	3001      	adds	r0, #1
 8012576:	d101      	bne.n	801257c <sbrk_aligned+0x38>
 8012578:	f04f 34ff 	mov.w	r4, #4294967295
 801257c:	4620      	mov	r0, r4
 801257e:	bd70      	pop	{r4, r5, r6, pc}
 8012580:	20004f28 	.word	0x20004f28

08012584 <_malloc_r>:
 8012584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012588:	1ccd      	adds	r5, r1, #3
 801258a:	f025 0503 	bic.w	r5, r5, #3
 801258e:	3508      	adds	r5, #8
 8012590:	2d0c      	cmp	r5, #12
 8012592:	bf38      	it	cc
 8012594:	250c      	movcc	r5, #12
 8012596:	2d00      	cmp	r5, #0
 8012598:	4607      	mov	r7, r0
 801259a:	db01      	blt.n	80125a0 <_malloc_r+0x1c>
 801259c:	42a9      	cmp	r1, r5
 801259e:	d905      	bls.n	80125ac <_malloc_r+0x28>
 80125a0:	230c      	movs	r3, #12
 80125a2:	603b      	str	r3, [r7, #0]
 80125a4:	2600      	movs	r6, #0
 80125a6:	4630      	mov	r0, r6
 80125a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125ac:	4e2e      	ldr	r6, [pc, #184]	; (8012668 <_malloc_r+0xe4>)
 80125ae:	f000 ff9b 	bl	80134e8 <__malloc_lock>
 80125b2:	6833      	ldr	r3, [r6, #0]
 80125b4:	461c      	mov	r4, r3
 80125b6:	bb34      	cbnz	r4, 8012606 <_malloc_r+0x82>
 80125b8:	4629      	mov	r1, r5
 80125ba:	4638      	mov	r0, r7
 80125bc:	f7ff ffc2 	bl	8012544 <sbrk_aligned>
 80125c0:	1c43      	adds	r3, r0, #1
 80125c2:	4604      	mov	r4, r0
 80125c4:	d14d      	bne.n	8012662 <_malloc_r+0xde>
 80125c6:	6834      	ldr	r4, [r6, #0]
 80125c8:	4626      	mov	r6, r4
 80125ca:	2e00      	cmp	r6, #0
 80125cc:	d140      	bne.n	8012650 <_malloc_r+0xcc>
 80125ce:	6823      	ldr	r3, [r4, #0]
 80125d0:	4631      	mov	r1, r6
 80125d2:	4638      	mov	r0, r7
 80125d4:	eb04 0803 	add.w	r8, r4, r3
 80125d8:	f000 fc2e 	bl	8012e38 <_sbrk_r>
 80125dc:	4580      	cmp	r8, r0
 80125de:	d13a      	bne.n	8012656 <_malloc_r+0xd2>
 80125e0:	6821      	ldr	r1, [r4, #0]
 80125e2:	3503      	adds	r5, #3
 80125e4:	1a6d      	subs	r5, r5, r1
 80125e6:	f025 0503 	bic.w	r5, r5, #3
 80125ea:	3508      	adds	r5, #8
 80125ec:	2d0c      	cmp	r5, #12
 80125ee:	bf38      	it	cc
 80125f0:	250c      	movcc	r5, #12
 80125f2:	4629      	mov	r1, r5
 80125f4:	4638      	mov	r0, r7
 80125f6:	f7ff ffa5 	bl	8012544 <sbrk_aligned>
 80125fa:	3001      	adds	r0, #1
 80125fc:	d02b      	beq.n	8012656 <_malloc_r+0xd2>
 80125fe:	6823      	ldr	r3, [r4, #0]
 8012600:	442b      	add	r3, r5
 8012602:	6023      	str	r3, [r4, #0]
 8012604:	e00e      	b.n	8012624 <_malloc_r+0xa0>
 8012606:	6822      	ldr	r2, [r4, #0]
 8012608:	1b52      	subs	r2, r2, r5
 801260a:	d41e      	bmi.n	801264a <_malloc_r+0xc6>
 801260c:	2a0b      	cmp	r2, #11
 801260e:	d916      	bls.n	801263e <_malloc_r+0xba>
 8012610:	1961      	adds	r1, r4, r5
 8012612:	42a3      	cmp	r3, r4
 8012614:	6025      	str	r5, [r4, #0]
 8012616:	bf18      	it	ne
 8012618:	6059      	strne	r1, [r3, #4]
 801261a:	6863      	ldr	r3, [r4, #4]
 801261c:	bf08      	it	eq
 801261e:	6031      	streq	r1, [r6, #0]
 8012620:	5162      	str	r2, [r4, r5]
 8012622:	604b      	str	r3, [r1, #4]
 8012624:	4638      	mov	r0, r7
 8012626:	f104 060b 	add.w	r6, r4, #11
 801262a:	f000 ff63 	bl	80134f4 <__malloc_unlock>
 801262e:	f026 0607 	bic.w	r6, r6, #7
 8012632:	1d23      	adds	r3, r4, #4
 8012634:	1af2      	subs	r2, r6, r3
 8012636:	d0b6      	beq.n	80125a6 <_malloc_r+0x22>
 8012638:	1b9b      	subs	r3, r3, r6
 801263a:	50a3      	str	r3, [r4, r2]
 801263c:	e7b3      	b.n	80125a6 <_malloc_r+0x22>
 801263e:	6862      	ldr	r2, [r4, #4]
 8012640:	42a3      	cmp	r3, r4
 8012642:	bf0c      	ite	eq
 8012644:	6032      	streq	r2, [r6, #0]
 8012646:	605a      	strne	r2, [r3, #4]
 8012648:	e7ec      	b.n	8012624 <_malloc_r+0xa0>
 801264a:	4623      	mov	r3, r4
 801264c:	6864      	ldr	r4, [r4, #4]
 801264e:	e7b2      	b.n	80125b6 <_malloc_r+0x32>
 8012650:	4634      	mov	r4, r6
 8012652:	6876      	ldr	r6, [r6, #4]
 8012654:	e7b9      	b.n	80125ca <_malloc_r+0x46>
 8012656:	230c      	movs	r3, #12
 8012658:	603b      	str	r3, [r7, #0]
 801265a:	4638      	mov	r0, r7
 801265c:	f000 ff4a 	bl	80134f4 <__malloc_unlock>
 8012660:	e7a1      	b.n	80125a6 <_malloc_r+0x22>
 8012662:	6025      	str	r5, [r4, #0]
 8012664:	e7de      	b.n	8012624 <_malloc_r+0xa0>
 8012666:	bf00      	nop
 8012668:	20004f24 	.word	0x20004f24

0801266c <__sfputc_r>:
 801266c:	6893      	ldr	r3, [r2, #8]
 801266e:	3b01      	subs	r3, #1
 8012670:	2b00      	cmp	r3, #0
 8012672:	b410      	push	{r4}
 8012674:	6093      	str	r3, [r2, #8]
 8012676:	da08      	bge.n	801268a <__sfputc_r+0x1e>
 8012678:	6994      	ldr	r4, [r2, #24]
 801267a:	42a3      	cmp	r3, r4
 801267c:	db01      	blt.n	8012682 <__sfputc_r+0x16>
 801267e:	290a      	cmp	r1, #10
 8012680:	d103      	bne.n	801268a <__sfputc_r+0x1e>
 8012682:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012686:	f000 bd03 	b.w	8013090 <__swbuf_r>
 801268a:	6813      	ldr	r3, [r2, #0]
 801268c:	1c58      	adds	r0, r3, #1
 801268e:	6010      	str	r0, [r2, #0]
 8012690:	7019      	strb	r1, [r3, #0]
 8012692:	4608      	mov	r0, r1
 8012694:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012698:	4770      	bx	lr

0801269a <__sfputs_r>:
 801269a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801269c:	4606      	mov	r6, r0
 801269e:	460f      	mov	r7, r1
 80126a0:	4614      	mov	r4, r2
 80126a2:	18d5      	adds	r5, r2, r3
 80126a4:	42ac      	cmp	r4, r5
 80126a6:	d101      	bne.n	80126ac <__sfputs_r+0x12>
 80126a8:	2000      	movs	r0, #0
 80126aa:	e007      	b.n	80126bc <__sfputs_r+0x22>
 80126ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126b0:	463a      	mov	r2, r7
 80126b2:	4630      	mov	r0, r6
 80126b4:	f7ff ffda 	bl	801266c <__sfputc_r>
 80126b8:	1c43      	adds	r3, r0, #1
 80126ba:	d1f3      	bne.n	80126a4 <__sfputs_r+0xa>
 80126bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080126c0 <_vfiprintf_r>:
 80126c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126c4:	460d      	mov	r5, r1
 80126c6:	b09d      	sub	sp, #116	; 0x74
 80126c8:	4614      	mov	r4, r2
 80126ca:	4698      	mov	r8, r3
 80126cc:	4606      	mov	r6, r0
 80126ce:	b118      	cbz	r0, 80126d8 <_vfiprintf_r+0x18>
 80126d0:	6983      	ldr	r3, [r0, #24]
 80126d2:	b90b      	cbnz	r3, 80126d8 <_vfiprintf_r+0x18>
 80126d4:	f7ff fe1e 	bl	8012314 <__sinit>
 80126d8:	4b89      	ldr	r3, [pc, #548]	; (8012900 <_vfiprintf_r+0x240>)
 80126da:	429d      	cmp	r5, r3
 80126dc:	d11b      	bne.n	8012716 <_vfiprintf_r+0x56>
 80126de:	6875      	ldr	r5, [r6, #4]
 80126e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80126e2:	07d9      	lsls	r1, r3, #31
 80126e4:	d405      	bmi.n	80126f2 <_vfiprintf_r+0x32>
 80126e6:	89ab      	ldrh	r3, [r5, #12]
 80126e8:	059a      	lsls	r2, r3, #22
 80126ea:	d402      	bmi.n	80126f2 <_vfiprintf_r+0x32>
 80126ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80126ee:	f7ff fee6 	bl	80124be <__retarget_lock_acquire_recursive>
 80126f2:	89ab      	ldrh	r3, [r5, #12]
 80126f4:	071b      	lsls	r3, r3, #28
 80126f6:	d501      	bpl.n	80126fc <_vfiprintf_r+0x3c>
 80126f8:	692b      	ldr	r3, [r5, #16]
 80126fa:	b9eb      	cbnz	r3, 8012738 <_vfiprintf_r+0x78>
 80126fc:	4629      	mov	r1, r5
 80126fe:	4630      	mov	r0, r6
 8012700:	f000 fd2a 	bl	8013158 <__swsetup_r>
 8012704:	b1c0      	cbz	r0, 8012738 <_vfiprintf_r+0x78>
 8012706:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012708:	07dc      	lsls	r4, r3, #31
 801270a:	d50e      	bpl.n	801272a <_vfiprintf_r+0x6a>
 801270c:	f04f 30ff 	mov.w	r0, #4294967295
 8012710:	b01d      	add	sp, #116	; 0x74
 8012712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012716:	4b7b      	ldr	r3, [pc, #492]	; (8012904 <_vfiprintf_r+0x244>)
 8012718:	429d      	cmp	r5, r3
 801271a:	d101      	bne.n	8012720 <_vfiprintf_r+0x60>
 801271c:	68b5      	ldr	r5, [r6, #8]
 801271e:	e7df      	b.n	80126e0 <_vfiprintf_r+0x20>
 8012720:	4b79      	ldr	r3, [pc, #484]	; (8012908 <_vfiprintf_r+0x248>)
 8012722:	429d      	cmp	r5, r3
 8012724:	bf08      	it	eq
 8012726:	68f5      	ldreq	r5, [r6, #12]
 8012728:	e7da      	b.n	80126e0 <_vfiprintf_r+0x20>
 801272a:	89ab      	ldrh	r3, [r5, #12]
 801272c:	0598      	lsls	r0, r3, #22
 801272e:	d4ed      	bmi.n	801270c <_vfiprintf_r+0x4c>
 8012730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012732:	f7ff fec5 	bl	80124c0 <__retarget_lock_release_recursive>
 8012736:	e7e9      	b.n	801270c <_vfiprintf_r+0x4c>
 8012738:	2300      	movs	r3, #0
 801273a:	9309      	str	r3, [sp, #36]	; 0x24
 801273c:	2320      	movs	r3, #32
 801273e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012742:	f8cd 800c 	str.w	r8, [sp, #12]
 8012746:	2330      	movs	r3, #48	; 0x30
 8012748:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801290c <_vfiprintf_r+0x24c>
 801274c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012750:	f04f 0901 	mov.w	r9, #1
 8012754:	4623      	mov	r3, r4
 8012756:	469a      	mov	sl, r3
 8012758:	f813 2b01 	ldrb.w	r2, [r3], #1
 801275c:	b10a      	cbz	r2, 8012762 <_vfiprintf_r+0xa2>
 801275e:	2a25      	cmp	r2, #37	; 0x25
 8012760:	d1f9      	bne.n	8012756 <_vfiprintf_r+0x96>
 8012762:	ebba 0b04 	subs.w	fp, sl, r4
 8012766:	d00b      	beq.n	8012780 <_vfiprintf_r+0xc0>
 8012768:	465b      	mov	r3, fp
 801276a:	4622      	mov	r2, r4
 801276c:	4629      	mov	r1, r5
 801276e:	4630      	mov	r0, r6
 8012770:	f7ff ff93 	bl	801269a <__sfputs_r>
 8012774:	3001      	adds	r0, #1
 8012776:	f000 80aa 	beq.w	80128ce <_vfiprintf_r+0x20e>
 801277a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801277c:	445a      	add	r2, fp
 801277e:	9209      	str	r2, [sp, #36]	; 0x24
 8012780:	f89a 3000 	ldrb.w	r3, [sl]
 8012784:	2b00      	cmp	r3, #0
 8012786:	f000 80a2 	beq.w	80128ce <_vfiprintf_r+0x20e>
 801278a:	2300      	movs	r3, #0
 801278c:	f04f 32ff 	mov.w	r2, #4294967295
 8012790:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012794:	f10a 0a01 	add.w	sl, sl, #1
 8012798:	9304      	str	r3, [sp, #16]
 801279a:	9307      	str	r3, [sp, #28]
 801279c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80127a0:	931a      	str	r3, [sp, #104]	; 0x68
 80127a2:	4654      	mov	r4, sl
 80127a4:	2205      	movs	r2, #5
 80127a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127aa:	4858      	ldr	r0, [pc, #352]	; (801290c <_vfiprintf_r+0x24c>)
 80127ac:	f7ed fd18 	bl	80001e0 <memchr>
 80127b0:	9a04      	ldr	r2, [sp, #16]
 80127b2:	b9d8      	cbnz	r0, 80127ec <_vfiprintf_r+0x12c>
 80127b4:	06d1      	lsls	r1, r2, #27
 80127b6:	bf44      	itt	mi
 80127b8:	2320      	movmi	r3, #32
 80127ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80127be:	0713      	lsls	r3, r2, #28
 80127c0:	bf44      	itt	mi
 80127c2:	232b      	movmi	r3, #43	; 0x2b
 80127c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80127c8:	f89a 3000 	ldrb.w	r3, [sl]
 80127cc:	2b2a      	cmp	r3, #42	; 0x2a
 80127ce:	d015      	beq.n	80127fc <_vfiprintf_r+0x13c>
 80127d0:	9a07      	ldr	r2, [sp, #28]
 80127d2:	4654      	mov	r4, sl
 80127d4:	2000      	movs	r0, #0
 80127d6:	f04f 0c0a 	mov.w	ip, #10
 80127da:	4621      	mov	r1, r4
 80127dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80127e0:	3b30      	subs	r3, #48	; 0x30
 80127e2:	2b09      	cmp	r3, #9
 80127e4:	d94e      	bls.n	8012884 <_vfiprintf_r+0x1c4>
 80127e6:	b1b0      	cbz	r0, 8012816 <_vfiprintf_r+0x156>
 80127e8:	9207      	str	r2, [sp, #28]
 80127ea:	e014      	b.n	8012816 <_vfiprintf_r+0x156>
 80127ec:	eba0 0308 	sub.w	r3, r0, r8
 80127f0:	fa09 f303 	lsl.w	r3, r9, r3
 80127f4:	4313      	orrs	r3, r2
 80127f6:	9304      	str	r3, [sp, #16]
 80127f8:	46a2      	mov	sl, r4
 80127fa:	e7d2      	b.n	80127a2 <_vfiprintf_r+0xe2>
 80127fc:	9b03      	ldr	r3, [sp, #12]
 80127fe:	1d19      	adds	r1, r3, #4
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	9103      	str	r1, [sp, #12]
 8012804:	2b00      	cmp	r3, #0
 8012806:	bfbb      	ittet	lt
 8012808:	425b      	neglt	r3, r3
 801280a:	f042 0202 	orrlt.w	r2, r2, #2
 801280e:	9307      	strge	r3, [sp, #28]
 8012810:	9307      	strlt	r3, [sp, #28]
 8012812:	bfb8      	it	lt
 8012814:	9204      	strlt	r2, [sp, #16]
 8012816:	7823      	ldrb	r3, [r4, #0]
 8012818:	2b2e      	cmp	r3, #46	; 0x2e
 801281a:	d10c      	bne.n	8012836 <_vfiprintf_r+0x176>
 801281c:	7863      	ldrb	r3, [r4, #1]
 801281e:	2b2a      	cmp	r3, #42	; 0x2a
 8012820:	d135      	bne.n	801288e <_vfiprintf_r+0x1ce>
 8012822:	9b03      	ldr	r3, [sp, #12]
 8012824:	1d1a      	adds	r2, r3, #4
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	9203      	str	r2, [sp, #12]
 801282a:	2b00      	cmp	r3, #0
 801282c:	bfb8      	it	lt
 801282e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012832:	3402      	adds	r4, #2
 8012834:	9305      	str	r3, [sp, #20]
 8012836:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801291c <_vfiprintf_r+0x25c>
 801283a:	7821      	ldrb	r1, [r4, #0]
 801283c:	2203      	movs	r2, #3
 801283e:	4650      	mov	r0, sl
 8012840:	f7ed fcce 	bl	80001e0 <memchr>
 8012844:	b140      	cbz	r0, 8012858 <_vfiprintf_r+0x198>
 8012846:	2340      	movs	r3, #64	; 0x40
 8012848:	eba0 000a 	sub.w	r0, r0, sl
 801284c:	fa03 f000 	lsl.w	r0, r3, r0
 8012850:	9b04      	ldr	r3, [sp, #16]
 8012852:	4303      	orrs	r3, r0
 8012854:	3401      	adds	r4, #1
 8012856:	9304      	str	r3, [sp, #16]
 8012858:	f814 1b01 	ldrb.w	r1, [r4], #1
 801285c:	482c      	ldr	r0, [pc, #176]	; (8012910 <_vfiprintf_r+0x250>)
 801285e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012862:	2206      	movs	r2, #6
 8012864:	f7ed fcbc 	bl	80001e0 <memchr>
 8012868:	2800      	cmp	r0, #0
 801286a:	d03f      	beq.n	80128ec <_vfiprintf_r+0x22c>
 801286c:	4b29      	ldr	r3, [pc, #164]	; (8012914 <_vfiprintf_r+0x254>)
 801286e:	bb1b      	cbnz	r3, 80128b8 <_vfiprintf_r+0x1f8>
 8012870:	9b03      	ldr	r3, [sp, #12]
 8012872:	3307      	adds	r3, #7
 8012874:	f023 0307 	bic.w	r3, r3, #7
 8012878:	3308      	adds	r3, #8
 801287a:	9303      	str	r3, [sp, #12]
 801287c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801287e:	443b      	add	r3, r7
 8012880:	9309      	str	r3, [sp, #36]	; 0x24
 8012882:	e767      	b.n	8012754 <_vfiprintf_r+0x94>
 8012884:	fb0c 3202 	mla	r2, ip, r2, r3
 8012888:	460c      	mov	r4, r1
 801288a:	2001      	movs	r0, #1
 801288c:	e7a5      	b.n	80127da <_vfiprintf_r+0x11a>
 801288e:	2300      	movs	r3, #0
 8012890:	3401      	adds	r4, #1
 8012892:	9305      	str	r3, [sp, #20]
 8012894:	4619      	mov	r1, r3
 8012896:	f04f 0c0a 	mov.w	ip, #10
 801289a:	4620      	mov	r0, r4
 801289c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80128a0:	3a30      	subs	r2, #48	; 0x30
 80128a2:	2a09      	cmp	r2, #9
 80128a4:	d903      	bls.n	80128ae <_vfiprintf_r+0x1ee>
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d0c5      	beq.n	8012836 <_vfiprintf_r+0x176>
 80128aa:	9105      	str	r1, [sp, #20]
 80128ac:	e7c3      	b.n	8012836 <_vfiprintf_r+0x176>
 80128ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80128b2:	4604      	mov	r4, r0
 80128b4:	2301      	movs	r3, #1
 80128b6:	e7f0      	b.n	801289a <_vfiprintf_r+0x1da>
 80128b8:	ab03      	add	r3, sp, #12
 80128ba:	9300      	str	r3, [sp, #0]
 80128bc:	462a      	mov	r2, r5
 80128be:	4b16      	ldr	r3, [pc, #88]	; (8012918 <_vfiprintf_r+0x258>)
 80128c0:	a904      	add	r1, sp, #16
 80128c2:	4630      	mov	r0, r6
 80128c4:	f3af 8000 	nop.w
 80128c8:	4607      	mov	r7, r0
 80128ca:	1c78      	adds	r0, r7, #1
 80128cc:	d1d6      	bne.n	801287c <_vfiprintf_r+0x1bc>
 80128ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80128d0:	07d9      	lsls	r1, r3, #31
 80128d2:	d405      	bmi.n	80128e0 <_vfiprintf_r+0x220>
 80128d4:	89ab      	ldrh	r3, [r5, #12]
 80128d6:	059a      	lsls	r2, r3, #22
 80128d8:	d402      	bmi.n	80128e0 <_vfiprintf_r+0x220>
 80128da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80128dc:	f7ff fdf0 	bl	80124c0 <__retarget_lock_release_recursive>
 80128e0:	89ab      	ldrh	r3, [r5, #12]
 80128e2:	065b      	lsls	r3, r3, #25
 80128e4:	f53f af12 	bmi.w	801270c <_vfiprintf_r+0x4c>
 80128e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80128ea:	e711      	b.n	8012710 <_vfiprintf_r+0x50>
 80128ec:	ab03      	add	r3, sp, #12
 80128ee:	9300      	str	r3, [sp, #0]
 80128f0:	462a      	mov	r2, r5
 80128f2:	4b09      	ldr	r3, [pc, #36]	; (8012918 <_vfiprintf_r+0x258>)
 80128f4:	a904      	add	r1, sp, #16
 80128f6:	4630      	mov	r0, r6
 80128f8:	f000 f880 	bl	80129fc <_printf_i>
 80128fc:	e7e4      	b.n	80128c8 <_vfiprintf_r+0x208>
 80128fe:	bf00      	nop
 8012900:	0801569c 	.word	0x0801569c
 8012904:	080156bc 	.word	0x080156bc
 8012908:	0801567c 	.word	0x0801567c
 801290c:	080156e0 	.word	0x080156e0
 8012910:	080156ea 	.word	0x080156ea
 8012914:	00000000 	.word	0x00000000
 8012918:	0801269b 	.word	0x0801269b
 801291c:	080156e6 	.word	0x080156e6

08012920 <_printf_common>:
 8012920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012924:	4616      	mov	r6, r2
 8012926:	4699      	mov	r9, r3
 8012928:	688a      	ldr	r2, [r1, #8]
 801292a:	690b      	ldr	r3, [r1, #16]
 801292c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012930:	4293      	cmp	r3, r2
 8012932:	bfb8      	it	lt
 8012934:	4613      	movlt	r3, r2
 8012936:	6033      	str	r3, [r6, #0]
 8012938:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801293c:	4607      	mov	r7, r0
 801293e:	460c      	mov	r4, r1
 8012940:	b10a      	cbz	r2, 8012946 <_printf_common+0x26>
 8012942:	3301      	adds	r3, #1
 8012944:	6033      	str	r3, [r6, #0]
 8012946:	6823      	ldr	r3, [r4, #0]
 8012948:	0699      	lsls	r1, r3, #26
 801294a:	bf42      	ittt	mi
 801294c:	6833      	ldrmi	r3, [r6, #0]
 801294e:	3302      	addmi	r3, #2
 8012950:	6033      	strmi	r3, [r6, #0]
 8012952:	6825      	ldr	r5, [r4, #0]
 8012954:	f015 0506 	ands.w	r5, r5, #6
 8012958:	d106      	bne.n	8012968 <_printf_common+0x48>
 801295a:	f104 0a19 	add.w	sl, r4, #25
 801295e:	68e3      	ldr	r3, [r4, #12]
 8012960:	6832      	ldr	r2, [r6, #0]
 8012962:	1a9b      	subs	r3, r3, r2
 8012964:	42ab      	cmp	r3, r5
 8012966:	dc26      	bgt.n	80129b6 <_printf_common+0x96>
 8012968:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801296c:	1e13      	subs	r3, r2, #0
 801296e:	6822      	ldr	r2, [r4, #0]
 8012970:	bf18      	it	ne
 8012972:	2301      	movne	r3, #1
 8012974:	0692      	lsls	r2, r2, #26
 8012976:	d42b      	bmi.n	80129d0 <_printf_common+0xb0>
 8012978:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801297c:	4649      	mov	r1, r9
 801297e:	4638      	mov	r0, r7
 8012980:	47c0      	blx	r8
 8012982:	3001      	adds	r0, #1
 8012984:	d01e      	beq.n	80129c4 <_printf_common+0xa4>
 8012986:	6823      	ldr	r3, [r4, #0]
 8012988:	68e5      	ldr	r5, [r4, #12]
 801298a:	6832      	ldr	r2, [r6, #0]
 801298c:	f003 0306 	and.w	r3, r3, #6
 8012990:	2b04      	cmp	r3, #4
 8012992:	bf08      	it	eq
 8012994:	1aad      	subeq	r5, r5, r2
 8012996:	68a3      	ldr	r3, [r4, #8]
 8012998:	6922      	ldr	r2, [r4, #16]
 801299a:	bf0c      	ite	eq
 801299c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80129a0:	2500      	movne	r5, #0
 80129a2:	4293      	cmp	r3, r2
 80129a4:	bfc4      	itt	gt
 80129a6:	1a9b      	subgt	r3, r3, r2
 80129a8:	18ed      	addgt	r5, r5, r3
 80129aa:	2600      	movs	r6, #0
 80129ac:	341a      	adds	r4, #26
 80129ae:	42b5      	cmp	r5, r6
 80129b0:	d11a      	bne.n	80129e8 <_printf_common+0xc8>
 80129b2:	2000      	movs	r0, #0
 80129b4:	e008      	b.n	80129c8 <_printf_common+0xa8>
 80129b6:	2301      	movs	r3, #1
 80129b8:	4652      	mov	r2, sl
 80129ba:	4649      	mov	r1, r9
 80129bc:	4638      	mov	r0, r7
 80129be:	47c0      	blx	r8
 80129c0:	3001      	adds	r0, #1
 80129c2:	d103      	bne.n	80129cc <_printf_common+0xac>
 80129c4:	f04f 30ff 	mov.w	r0, #4294967295
 80129c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129cc:	3501      	adds	r5, #1
 80129ce:	e7c6      	b.n	801295e <_printf_common+0x3e>
 80129d0:	18e1      	adds	r1, r4, r3
 80129d2:	1c5a      	adds	r2, r3, #1
 80129d4:	2030      	movs	r0, #48	; 0x30
 80129d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80129da:	4422      	add	r2, r4
 80129dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80129e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80129e4:	3302      	adds	r3, #2
 80129e6:	e7c7      	b.n	8012978 <_printf_common+0x58>
 80129e8:	2301      	movs	r3, #1
 80129ea:	4622      	mov	r2, r4
 80129ec:	4649      	mov	r1, r9
 80129ee:	4638      	mov	r0, r7
 80129f0:	47c0      	blx	r8
 80129f2:	3001      	adds	r0, #1
 80129f4:	d0e6      	beq.n	80129c4 <_printf_common+0xa4>
 80129f6:	3601      	adds	r6, #1
 80129f8:	e7d9      	b.n	80129ae <_printf_common+0x8e>
	...

080129fc <_printf_i>:
 80129fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012a00:	7e0f      	ldrb	r7, [r1, #24]
 8012a02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012a04:	2f78      	cmp	r7, #120	; 0x78
 8012a06:	4691      	mov	r9, r2
 8012a08:	4680      	mov	r8, r0
 8012a0a:	460c      	mov	r4, r1
 8012a0c:	469a      	mov	sl, r3
 8012a0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012a12:	d807      	bhi.n	8012a24 <_printf_i+0x28>
 8012a14:	2f62      	cmp	r7, #98	; 0x62
 8012a16:	d80a      	bhi.n	8012a2e <_printf_i+0x32>
 8012a18:	2f00      	cmp	r7, #0
 8012a1a:	f000 80d8 	beq.w	8012bce <_printf_i+0x1d2>
 8012a1e:	2f58      	cmp	r7, #88	; 0x58
 8012a20:	f000 80a3 	beq.w	8012b6a <_printf_i+0x16e>
 8012a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012a2c:	e03a      	b.n	8012aa4 <_printf_i+0xa8>
 8012a2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012a32:	2b15      	cmp	r3, #21
 8012a34:	d8f6      	bhi.n	8012a24 <_printf_i+0x28>
 8012a36:	a101      	add	r1, pc, #4	; (adr r1, 8012a3c <_printf_i+0x40>)
 8012a38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012a3c:	08012a95 	.word	0x08012a95
 8012a40:	08012aa9 	.word	0x08012aa9
 8012a44:	08012a25 	.word	0x08012a25
 8012a48:	08012a25 	.word	0x08012a25
 8012a4c:	08012a25 	.word	0x08012a25
 8012a50:	08012a25 	.word	0x08012a25
 8012a54:	08012aa9 	.word	0x08012aa9
 8012a58:	08012a25 	.word	0x08012a25
 8012a5c:	08012a25 	.word	0x08012a25
 8012a60:	08012a25 	.word	0x08012a25
 8012a64:	08012a25 	.word	0x08012a25
 8012a68:	08012bb5 	.word	0x08012bb5
 8012a6c:	08012ad9 	.word	0x08012ad9
 8012a70:	08012b97 	.word	0x08012b97
 8012a74:	08012a25 	.word	0x08012a25
 8012a78:	08012a25 	.word	0x08012a25
 8012a7c:	08012bd7 	.word	0x08012bd7
 8012a80:	08012a25 	.word	0x08012a25
 8012a84:	08012ad9 	.word	0x08012ad9
 8012a88:	08012a25 	.word	0x08012a25
 8012a8c:	08012a25 	.word	0x08012a25
 8012a90:	08012b9f 	.word	0x08012b9f
 8012a94:	682b      	ldr	r3, [r5, #0]
 8012a96:	1d1a      	adds	r2, r3, #4
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	602a      	str	r2, [r5, #0]
 8012a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012aa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012aa4:	2301      	movs	r3, #1
 8012aa6:	e0a3      	b.n	8012bf0 <_printf_i+0x1f4>
 8012aa8:	6820      	ldr	r0, [r4, #0]
 8012aaa:	6829      	ldr	r1, [r5, #0]
 8012aac:	0606      	lsls	r6, r0, #24
 8012aae:	f101 0304 	add.w	r3, r1, #4
 8012ab2:	d50a      	bpl.n	8012aca <_printf_i+0xce>
 8012ab4:	680e      	ldr	r6, [r1, #0]
 8012ab6:	602b      	str	r3, [r5, #0]
 8012ab8:	2e00      	cmp	r6, #0
 8012aba:	da03      	bge.n	8012ac4 <_printf_i+0xc8>
 8012abc:	232d      	movs	r3, #45	; 0x2d
 8012abe:	4276      	negs	r6, r6
 8012ac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012ac4:	485e      	ldr	r0, [pc, #376]	; (8012c40 <_printf_i+0x244>)
 8012ac6:	230a      	movs	r3, #10
 8012ac8:	e019      	b.n	8012afe <_printf_i+0x102>
 8012aca:	680e      	ldr	r6, [r1, #0]
 8012acc:	602b      	str	r3, [r5, #0]
 8012ace:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012ad2:	bf18      	it	ne
 8012ad4:	b236      	sxthne	r6, r6
 8012ad6:	e7ef      	b.n	8012ab8 <_printf_i+0xbc>
 8012ad8:	682b      	ldr	r3, [r5, #0]
 8012ada:	6820      	ldr	r0, [r4, #0]
 8012adc:	1d19      	adds	r1, r3, #4
 8012ade:	6029      	str	r1, [r5, #0]
 8012ae0:	0601      	lsls	r1, r0, #24
 8012ae2:	d501      	bpl.n	8012ae8 <_printf_i+0xec>
 8012ae4:	681e      	ldr	r6, [r3, #0]
 8012ae6:	e002      	b.n	8012aee <_printf_i+0xf2>
 8012ae8:	0646      	lsls	r6, r0, #25
 8012aea:	d5fb      	bpl.n	8012ae4 <_printf_i+0xe8>
 8012aec:	881e      	ldrh	r6, [r3, #0]
 8012aee:	4854      	ldr	r0, [pc, #336]	; (8012c40 <_printf_i+0x244>)
 8012af0:	2f6f      	cmp	r7, #111	; 0x6f
 8012af2:	bf0c      	ite	eq
 8012af4:	2308      	moveq	r3, #8
 8012af6:	230a      	movne	r3, #10
 8012af8:	2100      	movs	r1, #0
 8012afa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012afe:	6865      	ldr	r5, [r4, #4]
 8012b00:	60a5      	str	r5, [r4, #8]
 8012b02:	2d00      	cmp	r5, #0
 8012b04:	bfa2      	ittt	ge
 8012b06:	6821      	ldrge	r1, [r4, #0]
 8012b08:	f021 0104 	bicge.w	r1, r1, #4
 8012b0c:	6021      	strge	r1, [r4, #0]
 8012b0e:	b90e      	cbnz	r6, 8012b14 <_printf_i+0x118>
 8012b10:	2d00      	cmp	r5, #0
 8012b12:	d04d      	beq.n	8012bb0 <_printf_i+0x1b4>
 8012b14:	4615      	mov	r5, r2
 8012b16:	fbb6 f1f3 	udiv	r1, r6, r3
 8012b1a:	fb03 6711 	mls	r7, r3, r1, r6
 8012b1e:	5dc7      	ldrb	r7, [r0, r7]
 8012b20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012b24:	4637      	mov	r7, r6
 8012b26:	42bb      	cmp	r3, r7
 8012b28:	460e      	mov	r6, r1
 8012b2a:	d9f4      	bls.n	8012b16 <_printf_i+0x11a>
 8012b2c:	2b08      	cmp	r3, #8
 8012b2e:	d10b      	bne.n	8012b48 <_printf_i+0x14c>
 8012b30:	6823      	ldr	r3, [r4, #0]
 8012b32:	07de      	lsls	r6, r3, #31
 8012b34:	d508      	bpl.n	8012b48 <_printf_i+0x14c>
 8012b36:	6923      	ldr	r3, [r4, #16]
 8012b38:	6861      	ldr	r1, [r4, #4]
 8012b3a:	4299      	cmp	r1, r3
 8012b3c:	bfde      	ittt	le
 8012b3e:	2330      	movle	r3, #48	; 0x30
 8012b40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012b44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012b48:	1b52      	subs	r2, r2, r5
 8012b4a:	6122      	str	r2, [r4, #16]
 8012b4c:	f8cd a000 	str.w	sl, [sp]
 8012b50:	464b      	mov	r3, r9
 8012b52:	aa03      	add	r2, sp, #12
 8012b54:	4621      	mov	r1, r4
 8012b56:	4640      	mov	r0, r8
 8012b58:	f7ff fee2 	bl	8012920 <_printf_common>
 8012b5c:	3001      	adds	r0, #1
 8012b5e:	d14c      	bne.n	8012bfa <_printf_i+0x1fe>
 8012b60:	f04f 30ff 	mov.w	r0, #4294967295
 8012b64:	b004      	add	sp, #16
 8012b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b6a:	4835      	ldr	r0, [pc, #212]	; (8012c40 <_printf_i+0x244>)
 8012b6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012b70:	6829      	ldr	r1, [r5, #0]
 8012b72:	6823      	ldr	r3, [r4, #0]
 8012b74:	f851 6b04 	ldr.w	r6, [r1], #4
 8012b78:	6029      	str	r1, [r5, #0]
 8012b7a:	061d      	lsls	r5, r3, #24
 8012b7c:	d514      	bpl.n	8012ba8 <_printf_i+0x1ac>
 8012b7e:	07df      	lsls	r7, r3, #31
 8012b80:	bf44      	itt	mi
 8012b82:	f043 0320 	orrmi.w	r3, r3, #32
 8012b86:	6023      	strmi	r3, [r4, #0]
 8012b88:	b91e      	cbnz	r6, 8012b92 <_printf_i+0x196>
 8012b8a:	6823      	ldr	r3, [r4, #0]
 8012b8c:	f023 0320 	bic.w	r3, r3, #32
 8012b90:	6023      	str	r3, [r4, #0]
 8012b92:	2310      	movs	r3, #16
 8012b94:	e7b0      	b.n	8012af8 <_printf_i+0xfc>
 8012b96:	6823      	ldr	r3, [r4, #0]
 8012b98:	f043 0320 	orr.w	r3, r3, #32
 8012b9c:	6023      	str	r3, [r4, #0]
 8012b9e:	2378      	movs	r3, #120	; 0x78
 8012ba0:	4828      	ldr	r0, [pc, #160]	; (8012c44 <_printf_i+0x248>)
 8012ba2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012ba6:	e7e3      	b.n	8012b70 <_printf_i+0x174>
 8012ba8:	0659      	lsls	r1, r3, #25
 8012baa:	bf48      	it	mi
 8012bac:	b2b6      	uxthmi	r6, r6
 8012bae:	e7e6      	b.n	8012b7e <_printf_i+0x182>
 8012bb0:	4615      	mov	r5, r2
 8012bb2:	e7bb      	b.n	8012b2c <_printf_i+0x130>
 8012bb4:	682b      	ldr	r3, [r5, #0]
 8012bb6:	6826      	ldr	r6, [r4, #0]
 8012bb8:	6961      	ldr	r1, [r4, #20]
 8012bba:	1d18      	adds	r0, r3, #4
 8012bbc:	6028      	str	r0, [r5, #0]
 8012bbe:	0635      	lsls	r5, r6, #24
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	d501      	bpl.n	8012bc8 <_printf_i+0x1cc>
 8012bc4:	6019      	str	r1, [r3, #0]
 8012bc6:	e002      	b.n	8012bce <_printf_i+0x1d2>
 8012bc8:	0670      	lsls	r0, r6, #25
 8012bca:	d5fb      	bpl.n	8012bc4 <_printf_i+0x1c8>
 8012bcc:	8019      	strh	r1, [r3, #0]
 8012bce:	2300      	movs	r3, #0
 8012bd0:	6123      	str	r3, [r4, #16]
 8012bd2:	4615      	mov	r5, r2
 8012bd4:	e7ba      	b.n	8012b4c <_printf_i+0x150>
 8012bd6:	682b      	ldr	r3, [r5, #0]
 8012bd8:	1d1a      	adds	r2, r3, #4
 8012bda:	602a      	str	r2, [r5, #0]
 8012bdc:	681d      	ldr	r5, [r3, #0]
 8012bde:	6862      	ldr	r2, [r4, #4]
 8012be0:	2100      	movs	r1, #0
 8012be2:	4628      	mov	r0, r5
 8012be4:	f7ed fafc 	bl	80001e0 <memchr>
 8012be8:	b108      	cbz	r0, 8012bee <_printf_i+0x1f2>
 8012bea:	1b40      	subs	r0, r0, r5
 8012bec:	6060      	str	r0, [r4, #4]
 8012bee:	6863      	ldr	r3, [r4, #4]
 8012bf0:	6123      	str	r3, [r4, #16]
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012bf8:	e7a8      	b.n	8012b4c <_printf_i+0x150>
 8012bfa:	6923      	ldr	r3, [r4, #16]
 8012bfc:	462a      	mov	r2, r5
 8012bfe:	4649      	mov	r1, r9
 8012c00:	4640      	mov	r0, r8
 8012c02:	47d0      	blx	sl
 8012c04:	3001      	adds	r0, #1
 8012c06:	d0ab      	beq.n	8012b60 <_printf_i+0x164>
 8012c08:	6823      	ldr	r3, [r4, #0]
 8012c0a:	079b      	lsls	r3, r3, #30
 8012c0c:	d413      	bmi.n	8012c36 <_printf_i+0x23a>
 8012c0e:	68e0      	ldr	r0, [r4, #12]
 8012c10:	9b03      	ldr	r3, [sp, #12]
 8012c12:	4298      	cmp	r0, r3
 8012c14:	bfb8      	it	lt
 8012c16:	4618      	movlt	r0, r3
 8012c18:	e7a4      	b.n	8012b64 <_printf_i+0x168>
 8012c1a:	2301      	movs	r3, #1
 8012c1c:	4632      	mov	r2, r6
 8012c1e:	4649      	mov	r1, r9
 8012c20:	4640      	mov	r0, r8
 8012c22:	47d0      	blx	sl
 8012c24:	3001      	adds	r0, #1
 8012c26:	d09b      	beq.n	8012b60 <_printf_i+0x164>
 8012c28:	3501      	adds	r5, #1
 8012c2a:	68e3      	ldr	r3, [r4, #12]
 8012c2c:	9903      	ldr	r1, [sp, #12]
 8012c2e:	1a5b      	subs	r3, r3, r1
 8012c30:	42ab      	cmp	r3, r5
 8012c32:	dcf2      	bgt.n	8012c1a <_printf_i+0x21e>
 8012c34:	e7eb      	b.n	8012c0e <_printf_i+0x212>
 8012c36:	2500      	movs	r5, #0
 8012c38:	f104 0619 	add.w	r6, r4, #25
 8012c3c:	e7f5      	b.n	8012c2a <_printf_i+0x22e>
 8012c3e:	bf00      	nop
 8012c40:	080156f1 	.word	0x080156f1
 8012c44:	08015702 	.word	0x08015702

08012c48 <iprintf>:
 8012c48:	b40f      	push	{r0, r1, r2, r3}
 8012c4a:	4b0a      	ldr	r3, [pc, #40]	; (8012c74 <iprintf+0x2c>)
 8012c4c:	b513      	push	{r0, r1, r4, lr}
 8012c4e:	681c      	ldr	r4, [r3, #0]
 8012c50:	b124      	cbz	r4, 8012c5c <iprintf+0x14>
 8012c52:	69a3      	ldr	r3, [r4, #24]
 8012c54:	b913      	cbnz	r3, 8012c5c <iprintf+0x14>
 8012c56:	4620      	mov	r0, r4
 8012c58:	f7ff fb5c 	bl	8012314 <__sinit>
 8012c5c:	ab05      	add	r3, sp, #20
 8012c5e:	9a04      	ldr	r2, [sp, #16]
 8012c60:	68a1      	ldr	r1, [r4, #8]
 8012c62:	9301      	str	r3, [sp, #4]
 8012c64:	4620      	mov	r0, r4
 8012c66:	f7ff fd2b 	bl	80126c0 <_vfiprintf_r>
 8012c6a:	b002      	add	sp, #8
 8012c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c70:	b004      	add	sp, #16
 8012c72:	4770      	bx	lr
 8012c74:	20000054 	.word	0x20000054

08012c78 <_puts_r>:
 8012c78:	b570      	push	{r4, r5, r6, lr}
 8012c7a:	460e      	mov	r6, r1
 8012c7c:	4605      	mov	r5, r0
 8012c7e:	b118      	cbz	r0, 8012c88 <_puts_r+0x10>
 8012c80:	6983      	ldr	r3, [r0, #24]
 8012c82:	b90b      	cbnz	r3, 8012c88 <_puts_r+0x10>
 8012c84:	f7ff fb46 	bl	8012314 <__sinit>
 8012c88:	69ab      	ldr	r3, [r5, #24]
 8012c8a:	68ac      	ldr	r4, [r5, #8]
 8012c8c:	b913      	cbnz	r3, 8012c94 <_puts_r+0x1c>
 8012c8e:	4628      	mov	r0, r5
 8012c90:	f7ff fb40 	bl	8012314 <__sinit>
 8012c94:	4b2c      	ldr	r3, [pc, #176]	; (8012d48 <_puts_r+0xd0>)
 8012c96:	429c      	cmp	r4, r3
 8012c98:	d120      	bne.n	8012cdc <_puts_r+0x64>
 8012c9a:	686c      	ldr	r4, [r5, #4]
 8012c9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012c9e:	07db      	lsls	r3, r3, #31
 8012ca0:	d405      	bmi.n	8012cae <_puts_r+0x36>
 8012ca2:	89a3      	ldrh	r3, [r4, #12]
 8012ca4:	0598      	lsls	r0, r3, #22
 8012ca6:	d402      	bmi.n	8012cae <_puts_r+0x36>
 8012ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012caa:	f7ff fc08 	bl	80124be <__retarget_lock_acquire_recursive>
 8012cae:	89a3      	ldrh	r3, [r4, #12]
 8012cb0:	0719      	lsls	r1, r3, #28
 8012cb2:	d51d      	bpl.n	8012cf0 <_puts_r+0x78>
 8012cb4:	6923      	ldr	r3, [r4, #16]
 8012cb6:	b1db      	cbz	r3, 8012cf0 <_puts_r+0x78>
 8012cb8:	3e01      	subs	r6, #1
 8012cba:	68a3      	ldr	r3, [r4, #8]
 8012cbc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012cc0:	3b01      	subs	r3, #1
 8012cc2:	60a3      	str	r3, [r4, #8]
 8012cc4:	bb39      	cbnz	r1, 8012d16 <_puts_r+0x9e>
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	da38      	bge.n	8012d3c <_puts_r+0xc4>
 8012cca:	4622      	mov	r2, r4
 8012ccc:	210a      	movs	r1, #10
 8012cce:	4628      	mov	r0, r5
 8012cd0:	f000 f9de 	bl	8013090 <__swbuf_r>
 8012cd4:	3001      	adds	r0, #1
 8012cd6:	d011      	beq.n	8012cfc <_puts_r+0x84>
 8012cd8:	250a      	movs	r5, #10
 8012cda:	e011      	b.n	8012d00 <_puts_r+0x88>
 8012cdc:	4b1b      	ldr	r3, [pc, #108]	; (8012d4c <_puts_r+0xd4>)
 8012cde:	429c      	cmp	r4, r3
 8012ce0:	d101      	bne.n	8012ce6 <_puts_r+0x6e>
 8012ce2:	68ac      	ldr	r4, [r5, #8]
 8012ce4:	e7da      	b.n	8012c9c <_puts_r+0x24>
 8012ce6:	4b1a      	ldr	r3, [pc, #104]	; (8012d50 <_puts_r+0xd8>)
 8012ce8:	429c      	cmp	r4, r3
 8012cea:	bf08      	it	eq
 8012cec:	68ec      	ldreq	r4, [r5, #12]
 8012cee:	e7d5      	b.n	8012c9c <_puts_r+0x24>
 8012cf0:	4621      	mov	r1, r4
 8012cf2:	4628      	mov	r0, r5
 8012cf4:	f000 fa30 	bl	8013158 <__swsetup_r>
 8012cf8:	2800      	cmp	r0, #0
 8012cfa:	d0dd      	beq.n	8012cb8 <_puts_r+0x40>
 8012cfc:	f04f 35ff 	mov.w	r5, #4294967295
 8012d00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012d02:	07da      	lsls	r2, r3, #31
 8012d04:	d405      	bmi.n	8012d12 <_puts_r+0x9a>
 8012d06:	89a3      	ldrh	r3, [r4, #12]
 8012d08:	059b      	lsls	r3, r3, #22
 8012d0a:	d402      	bmi.n	8012d12 <_puts_r+0x9a>
 8012d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d0e:	f7ff fbd7 	bl	80124c0 <__retarget_lock_release_recursive>
 8012d12:	4628      	mov	r0, r5
 8012d14:	bd70      	pop	{r4, r5, r6, pc}
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	da04      	bge.n	8012d24 <_puts_r+0xac>
 8012d1a:	69a2      	ldr	r2, [r4, #24]
 8012d1c:	429a      	cmp	r2, r3
 8012d1e:	dc06      	bgt.n	8012d2e <_puts_r+0xb6>
 8012d20:	290a      	cmp	r1, #10
 8012d22:	d004      	beq.n	8012d2e <_puts_r+0xb6>
 8012d24:	6823      	ldr	r3, [r4, #0]
 8012d26:	1c5a      	adds	r2, r3, #1
 8012d28:	6022      	str	r2, [r4, #0]
 8012d2a:	7019      	strb	r1, [r3, #0]
 8012d2c:	e7c5      	b.n	8012cba <_puts_r+0x42>
 8012d2e:	4622      	mov	r2, r4
 8012d30:	4628      	mov	r0, r5
 8012d32:	f000 f9ad 	bl	8013090 <__swbuf_r>
 8012d36:	3001      	adds	r0, #1
 8012d38:	d1bf      	bne.n	8012cba <_puts_r+0x42>
 8012d3a:	e7df      	b.n	8012cfc <_puts_r+0x84>
 8012d3c:	6823      	ldr	r3, [r4, #0]
 8012d3e:	250a      	movs	r5, #10
 8012d40:	1c5a      	adds	r2, r3, #1
 8012d42:	6022      	str	r2, [r4, #0]
 8012d44:	701d      	strb	r5, [r3, #0]
 8012d46:	e7db      	b.n	8012d00 <_puts_r+0x88>
 8012d48:	0801569c 	.word	0x0801569c
 8012d4c:	080156bc 	.word	0x080156bc
 8012d50:	0801567c 	.word	0x0801567c

08012d54 <puts>:
 8012d54:	4b02      	ldr	r3, [pc, #8]	; (8012d60 <puts+0xc>)
 8012d56:	4601      	mov	r1, r0
 8012d58:	6818      	ldr	r0, [r3, #0]
 8012d5a:	f7ff bf8d 	b.w	8012c78 <_puts_r>
 8012d5e:	bf00      	nop
 8012d60:	20000054 	.word	0x20000054

08012d64 <cleanup_glue>:
 8012d64:	b538      	push	{r3, r4, r5, lr}
 8012d66:	460c      	mov	r4, r1
 8012d68:	6809      	ldr	r1, [r1, #0]
 8012d6a:	4605      	mov	r5, r0
 8012d6c:	b109      	cbz	r1, 8012d72 <cleanup_glue+0xe>
 8012d6e:	f7ff fff9 	bl	8012d64 <cleanup_glue>
 8012d72:	4621      	mov	r1, r4
 8012d74:	4628      	mov	r0, r5
 8012d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012d7a:	f000 bbc1 	b.w	8013500 <_free_r>
	...

08012d80 <_reclaim_reent>:
 8012d80:	4b2c      	ldr	r3, [pc, #176]	; (8012e34 <_reclaim_reent+0xb4>)
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	4283      	cmp	r3, r0
 8012d86:	b570      	push	{r4, r5, r6, lr}
 8012d88:	4604      	mov	r4, r0
 8012d8a:	d051      	beq.n	8012e30 <_reclaim_reent+0xb0>
 8012d8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012d8e:	b143      	cbz	r3, 8012da2 <_reclaim_reent+0x22>
 8012d90:	68db      	ldr	r3, [r3, #12]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d14a      	bne.n	8012e2c <_reclaim_reent+0xac>
 8012d96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d98:	6819      	ldr	r1, [r3, #0]
 8012d9a:	b111      	cbz	r1, 8012da2 <_reclaim_reent+0x22>
 8012d9c:	4620      	mov	r0, r4
 8012d9e:	f000 fbaf 	bl	8013500 <_free_r>
 8012da2:	6961      	ldr	r1, [r4, #20]
 8012da4:	b111      	cbz	r1, 8012dac <_reclaim_reent+0x2c>
 8012da6:	4620      	mov	r0, r4
 8012da8:	f000 fbaa 	bl	8013500 <_free_r>
 8012dac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012dae:	b111      	cbz	r1, 8012db6 <_reclaim_reent+0x36>
 8012db0:	4620      	mov	r0, r4
 8012db2:	f000 fba5 	bl	8013500 <_free_r>
 8012db6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012db8:	b111      	cbz	r1, 8012dc0 <_reclaim_reent+0x40>
 8012dba:	4620      	mov	r0, r4
 8012dbc:	f000 fba0 	bl	8013500 <_free_r>
 8012dc0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012dc2:	b111      	cbz	r1, 8012dca <_reclaim_reent+0x4a>
 8012dc4:	4620      	mov	r0, r4
 8012dc6:	f000 fb9b 	bl	8013500 <_free_r>
 8012dca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012dcc:	b111      	cbz	r1, 8012dd4 <_reclaim_reent+0x54>
 8012dce:	4620      	mov	r0, r4
 8012dd0:	f000 fb96 	bl	8013500 <_free_r>
 8012dd4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012dd6:	b111      	cbz	r1, 8012dde <_reclaim_reent+0x5e>
 8012dd8:	4620      	mov	r0, r4
 8012dda:	f000 fb91 	bl	8013500 <_free_r>
 8012dde:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012de0:	b111      	cbz	r1, 8012de8 <_reclaim_reent+0x68>
 8012de2:	4620      	mov	r0, r4
 8012de4:	f000 fb8c 	bl	8013500 <_free_r>
 8012de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012dea:	b111      	cbz	r1, 8012df2 <_reclaim_reent+0x72>
 8012dec:	4620      	mov	r0, r4
 8012dee:	f000 fb87 	bl	8013500 <_free_r>
 8012df2:	69a3      	ldr	r3, [r4, #24]
 8012df4:	b1e3      	cbz	r3, 8012e30 <_reclaim_reent+0xb0>
 8012df6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012df8:	4620      	mov	r0, r4
 8012dfa:	4798      	blx	r3
 8012dfc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012dfe:	b1b9      	cbz	r1, 8012e30 <_reclaim_reent+0xb0>
 8012e00:	4620      	mov	r0, r4
 8012e02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e06:	f7ff bfad 	b.w	8012d64 <cleanup_glue>
 8012e0a:	5949      	ldr	r1, [r1, r5]
 8012e0c:	b941      	cbnz	r1, 8012e20 <_reclaim_reent+0xa0>
 8012e0e:	3504      	adds	r5, #4
 8012e10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e12:	2d80      	cmp	r5, #128	; 0x80
 8012e14:	68d9      	ldr	r1, [r3, #12]
 8012e16:	d1f8      	bne.n	8012e0a <_reclaim_reent+0x8a>
 8012e18:	4620      	mov	r0, r4
 8012e1a:	f000 fb71 	bl	8013500 <_free_r>
 8012e1e:	e7ba      	b.n	8012d96 <_reclaim_reent+0x16>
 8012e20:	680e      	ldr	r6, [r1, #0]
 8012e22:	4620      	mov	r0, r4
 8012e24:	f000 fb6c 	bl	8013500 <_free_r>
 8012e28:	4631      	mov	r1, r6
 8012e2a:	e7ef      	b.n	8012e0c <_reclaim_reent+0x8c>
 8012e2c:	2500      	movs	r5, #0
 8012e2e:	e7ef      	b.n	8012e10 <_reclaim_reent+0x90>
 8012e30:	bd70      	pop	{r4, r5, r6, pc}
 8012e32:	bf00      	nop
 8012e34:	20000054 	.word	0x20000054

08012e38 <_sbrk_r>:
 8012e38:	b538      	push	{r3, r4, r5, lr}
 8012e3a:	4d06      	ldr	r5, [pc, #24]	; (8012e54 <_sbrk_r+0x1c>)
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	4604      	mov	r4, r0
 8012e40:	4608      	mov	r0, r1
 8012e42:	602b      	str	r3, [r5, #0]
 8012e44:	f7ef fc5c 	bl	8002700 <_sbrk>
 8012e48:	1c43      	adds	r3, r0, #1
 8012e4a:	d102      	bne.n	8012e52 <_sbrk_r+0x1a>
 8012e4c:	682b      	ldr	r3, [r5, #0]
 8012e4e:	b103      	cbz	r3, 8012e52 <_sbrk_r+0x1a>
 8012e50:	6023      	str	r3, [r4, #0]
 8012e52:	bd38      	pop	{r3, r4, r5, pc}
 8012e54:	20004f2c 	.word	0x20004f2c

08012e58 <sniprintf>:
 8012e58:	b40c      	push	{r2, r3}
 8012e5a:	b530      	push	{r4, r5, lr}
 8012e5c:	4b17      	ldr	r3, [pc, #92]	; (8012ebc <sniprintf+0x64>)
 8012e5e:	1e0c      	subs	r4, r1, #0
 8012e60:	681d      	ldr	r5, [r3, #0]
 8012e62:	b09d      	sub	sp, #116	; 0x74
 8012e64:	da08      	bge.n	8012e78 <sniprintf+0x20>
 8012e66:	238b      	movs	r3, #139	; 0x8b
 8012e68:	602b      	str	r3, [r5, #0]
 8012e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8012e6e:	b01d      	add	sp, #116	; 0x74
 8012e70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012e74:	b002      	add	sp, #8
 8012e76:	4770      	bx	lr
 8012e78:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012e7c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012e80:	bf14      	ite	ne
 8012e82:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012e86:	4623      	moveq	r3, r4
 8012e88:	9304      	str	r3, [sp, #16]
 8012e8a:	9307      	str	r3, [sp, #28]
 8012e8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012e90:	9002      	str	r0, [sp, #8]
 8012e92:	9006      	str	r0, [sp, #24]
 8012e94:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012e98:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012e9a:	ab21      	add	r3, sp, #132	; 0x84
 8012e9c:	a902      	add	r1, sp, #8
 8012e9e:	4628      	mov	r0, r5
 8012ea0:	9301      	str	r3, [sp, #4]
 8012ea2:	f000 fc03 	bl	80136ac <_svfiprintf_r>
 8012ea6:	1c43      	adds	r3, r0, #1
 8012ea8:	bfbc      	itt	lt
 8012eaa:	238b      	movlt	r3, #139	; 0x8b
 8012eac:	602b      	strlt	r3, [r5, #0]
 8012eae:	2c00      	cmp	r4, #0
 8012eb0:	d0dd      	beq.n	8012e6e <sniprintf+0x16>
 8012eb2:	9b02      	ldr	r3, [sp, #8]
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	701a      	strb	r2, [r3, #0]
 8012eb8:	e7d9      	b.n	8012e6e <sniprintf+0x16>
 8012eba:	bf00      	nop
 8012ebc:	20000054 	.word	0x20000054

08012ec0 <siprintf>:
 8012ec0:	b40e      	push	{r1, r2, r3}
 8012ec2:	b500      	push	{lr}
 8012ec4:	b09c      	sub	sp, #112	; 0x70
 8012ec6:	ab1d      	add	r3, sp, #116	; 0x74
 8012ec8:	9002      	str	r0, [sp, #8]
 8012eca:	9006      	str	r0, [sp, #24]
 8012ecc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012ed0:	4809      	ldr	r0, [pc, #36]	; (8012ef8 <siprintf+0x38>)
 8012ed2:	9107      	str	r1, [sp, #28]
 8012ed4:	9104      	str	r1, [sp, #16]
 8012ed6:	4909      	ldr	r1, [pc, #36]	; (8012efc <siprintf+0x3c>)
 8012ed8:	f853 2b04 	ldr.w	r2, [r3], #4
 8012edc:	9105      	str	r1, [sp, #20]
 8012ede:	6800      	ldr	r0, [r0, #0]
 8012ee0:	9301      	str	r3, [sp, #4]
 8012ee2:	a902      	add	r1, sp, #8
 8012ee4:	f000 fbe2 	bl	80136ac <_svfiprintf_r>
 8012ee8:	9b02      	ldr	r3, [sp, #8]
 8012eea:	2200      	movs	r2, #0
 8012eec:	701a      	strb	r2, [r3, #0]
 8012eee:	b01c      	add	sp, #112	; 0x70
 8012ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ef4:	b003      	add	sp, #12
 8012ef6:	4770      	bx	lr
 8012ef8:	20000054 	.word	0x20000054
 8012efc:	ffff0208 	.word	0xffff0208

08012f00 <__sread>:
 8012f00:	b510      	push	{r4, lr}
 8012f02:	460c      	mov	r4, r1
 8012f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f08:	f000 fcd0 	bl	80138ac <_read_r>
 8012f0c:	2800      	cmp	r0, #0
 8012f0e:	bfab      	itete	ge
 8012f10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012f12:	89a3      	ldrhlt	r3, [r4, #12]
 8012f14:	181b      	addge	r3, r3, r0
 8012f16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012f1a:	bfac      	ite	ge
 8012f1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8012f1e:	81a3      	strhlt	r3, [r4, #12]
 8012f20:	bd10      	pop	{r4, pc}

08012f22 <__swrite>:
 8012f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f26:	461f      	mov	r7, r3
 8012f28:	898b      	ldrh	r3, [r1, #12]
 8012f2a:	05db      	lsls	r3, r3, #23
 8012f2c:	4605      	mov	r5, r0
 8012f2e:	460c      	mov	r4, r1
 8012f30:	4616      	mov	r6, r2
 8012f32:	d505      	bpl.n	8012f40 <__swrite+0x1e>
 8012f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f38:	2302      	movs	r3, #2
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	f000 fa54 	bl	80133e8 <_lseek_r>
 8012f40:	89a3      	ldrh	r3, [r4, #12]
 8012f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012f4a:	81a3      	strh	r3, [r4, #12]
 8012f4c:	4632      	mov	r2, r6
 8012f4e:	463b      	mov	r3, r7
 8012f50:	4628      	mov	r0, r5
 8012f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f56:	f000 b8ed 	b.w	8013134 <_write_r>

08012f5a <__sseek>:
 8012f5a:	b510      	push	{r4, lr}
 8012f5c:	460c      	mov	r4, r1
 8012f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f62:	f000 fa41 	bl	80133e8 <_lseek_r>
 8012f66:	1c43      	adds	r3, r0, #1
 8012f68:	89a3      	ldrh	r3, [r4, #12]
 8012f6a:	bf15      	itete	ne
 8012f6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8012f6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012f72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012f76:	81a3      	strheq	r3, [r4, #12]
 8012f78:	bf18      	it	ne
 8012f7a:	81a3      	strhne	r3, [r4, #12]
 8012f7c:	bd10      	pop	{r4, pc}

08012f7e <__sclose>:
 8012f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f82:	f000 b95f 	b.w	8013244 <_close_r>

08012f86 <strncpy>:
 8012f86:	b510      	push	{r4, lr}
 8012f88:	3901      	subs	r1, #1
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	b132      	cbz	r2, 8012f9c <strncpy+0x16>
 8012f8e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012f92:	f803 4b01 	strb.w	r4, [r3], #1
 8012f96:	3a01      	subs	r2, #1
 8012f98:	2c00      	cmp	r4, #0
 8012f9a:	d1f7      	bne.n	8012f8c <strncpy+0x6>
 8012f9c:	441a      	add	r2, r3
 8012f9e:	2100      	movs	r1, #0
 8012fa0:	4293      	cmp	r3, r2
 8012fa2:	d100      	bne.n	8012fa6 <strncpy+0x20>
 8012fa4:	bd10      	pop	{r4, pc}
 8012fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8012faa:	e7f9      	b.n	8012fa0 <strncpy+0x1a>

08012fac <strstr>:
 8012fac:	780a      	ldrb	r2, [r1, #0]
 8012fae:	b570      	push	{r4, r5, r6, lr}
 8012fb0:	b96a      	cbnz	r2, 8012fce <strstr+0x22>
 8012fb2:	bd70      	pop	{r4, r5, r6, pc}
 8012fb4:	429a      	cmp	r2, r3
 8012fb6:	d109      	bne.n	8012fcc <strstr+0x20>
 8012fb8:	460c      	mov	r4, r1
 8012fba:	4605      	mov	r5, r0
 8012fbc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d0f6      	beq.n	8012fb2 <strstr+0x6>
 8012fc4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8012fc8:	429e      	cmp	r6, r3
 8012fca:	d0f7      	beq.n	8012fbc <strstr+0x10>
 8012fcc:	3001      	adds	r0, #1
 8012fce:	7803      	ldrb	r3, [r0, #0]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d1ef      	bne.n	8012fb4 <strstr+0x8>
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	e7ec      	b.n	8012fb2 <strstr+0x6>

08012fd8 <strtok>:
 8012fd8:	4b16      	ldr	r3, [pc, #88]	; (8013034 <strtok+0x5c>)
 8012fda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012fdc:	681e      	ldr	r6, [r3, #0]
 8012fde:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8012fe0:	4605      	mov	r5, r0
 8012fe2:	b9fc      	cbnz	r4, 8013024 <strtok+0x4c>
 8012fe4:	2050      	movs	r0, #80	; 0x50
 8012fe6:	9101      	str	r1, [sp, #4]
 8012fe8:	f000 fa76 	bl	80134d8 <malloc>
 8012fec:	9901      	ldr	r1, [sp, #4]
 8012fee:	65b0      	str	r0, [r6, #88]	; 0x58
 8012ff0:	4602      	mov	r2, r0
 8012ff2:	b920      	cbnz	r0, 8012ffe <strtok+0x26>
 8012ff4:	4b10      	ldr	r3, [pc, #64]	; (8013038 <strtok+0x60>)
 8012ff6:	4811      	ldr	r0, [pc, #68]	; (801303c <strtok+0x64>)
 8012ff8:	2157      	movs	r1, #87	; 0x57
 8012ffa:	f7ff f90f 	bl	801221c <__assert_func>
 8012ffe:	e9c0 4400 	strd	r4, r4, [r0]
 8013002:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8013006:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801300a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801300e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8013012:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8013016:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801301a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801301e:	6184      	str	r4, [r0, #24]
 8013020:	7704      	strb	r4, [r0, #28]
 8013022:	6244      	str	r4, [r0, #36]	; 0x24
 8013024:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8013026:	2301      	movs	r3, #1
 8013028:	4628      	mov	r0, r5
 801302a:	b002      	add	sp, #8
 801302c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013030:	f000 b806 	b.w	8013040 <__strtok_r>
 8013034:	20000054 	.word	0x20000054
 8013038:	08015713 	.word	0x08015713
 801303c:	0801572a 	.word	0x0801572a

08013040 <__strtok_r>:
 8013040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013042:	b908      	cbnz	r0, 8013048 <__strtok_r+0x8>
 8013044:	6810      	ldr	r0, [r2, #0]
 8013046:	b188      	cbz	r0, 801306c <__strtok_r+0x2c>
 8013048:	4604      	mov	r4, r0
 801304a:	4620      	mov	r0, r4
 801304c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013050:	460f      	mov	r7, r1
 8013052:	f817 6b01 	ldrb.w	r6, [r7], #1
 8013056:	b91e      	cbnz	r6, 8013060 <__strtok_r+0x20>
 8013058:	b965      	cbnz	r5, 8013074 <__strtok_r+0x34>
 801305a:	6015      	str	r5, [r2, #0]
 801305c:	4628      	mov	r0, r5
 801305e:	e005      	b.n	801306c <__strtok_r+0x2c>
 8013060:	42b5      	cmp	r5, r6
 8013062:	d1f6      	bne.n	8013052 <__strtok_r+0x12>
 8013064:	2b00      	cmp	r3, #0
 8013066:	d1f0      	bne.n	801304a <__strtok_r+0xa>
 8013068:	6014      	str	r4, [r2, #0]
 801306a:	7003      	strb	r3, [r0, #0]
 801306c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801306e:	461c      	mov	r4, r3
 8013070:	e00c      	b.n	801308c <__strtok_r+0x4c>
 8013072:	b915      	cbnz	r5, 801307a <__strtok_r+0x3a>
 8013074:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013078:	460e      	mov	r6, r1
 801307a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801307e:	42ab      	cmp	r3, r5
 8013080:	d1f7      	bne.n	8013072 <__strtok_r+0x32>
 8013082:	2b00      	cmp	r3, #0
 8013084:	d0f3      	beq.n	801306e <__strtok_r+0x2e>
 8013086:	2300      	movs	r3, #0
 8013088:	f804 3c01 	strb.w	r3, [r4, #-1]
 801308c:	6014      	str	r4, [r2, #0]
 801308e:	e7ed      	b.n	801306c <__strtok_r+0x2c>

08013090 <__swbuf_r>:
 8013090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013092:	460e      	mov	r6, r1
 8013094:	4614      	mov	r4, r2
 8013096:	4605      	mov	r5, r0
 8013098:	b118      	cbz	r0, 80130a2 <__swbuf_r+0x12>
 801309a:	6983      	ldr	r3, [r0, #24]
 801309c:	b90b      	cbnz	r3, 80130a2 <__swbuf_r+0x12>
 801309e:	f7ff f939 	bl	8012314 <__sinit>
 80130a2:	4b21      	ldr	r3, [pc, #132]	; (8013128 <__swbuf_r+0x98>)
 80130a4:	429c      	cmp	r4, r3
 80130a6:	d12b      	bne.n	8013100 <__swbuf_r+0x70>
 80130a8:	686c      	ldr	r4, [r5, #4]
 80130aa:	69a3      	ldr	r3, [r4, #24]
 80130ac:	60a3      	str	r3, [r4, #8]
 80130ae:	89a3      	ldrh	r3, [r4, #12]
 80130b0:	071a      	lsls	r2, r3, #28
 80130b2:	d52f      	bpl.n	8013114 <__swbuf_r+0x84>
 80130b4:	6923      	ldr	r3, [r4, #16]
 80130b6:	b36b      	cbz	r3, 8013114 <__swbuf_r+0x84>
 80130b8:	6923      	ldr	r3, [r4, #16]
 80130ba:	6820      	ldr	r0, [r4, #0]
 80130bc:	1ac0      	subs	r0, r0, r3
 80130be:	6963      	ldr	r3, [r4, #20]
 80130c0:	b2f6      	uxtb	r6, r6
 80130c2:	4283      	cmp	r3, r0
 80130c4:	4637      	mov	r7, r6
 80130c6:	dc04      	bgt.n	80130d2 <__swbuf_r+0x42>
 80130c8:	4621      	mov	r1, r4
 80130ca:	4628      	mov	r0, r5
 80130cc:	f000 f950 	bl	8013370 <_fflush_r>
 80130d0:	bb30      	cbnz	r0, 8013120 <__swbuf_r+0x90>
 80130d2:	68a3      	ldr	r3, [r4, #8]
 80130d4:	3b01      	subs	r3, #1
 80130d6:	60a3      	str	r3, [r4, #8]
 80130d8:	6823      	ldr	r3, [r4, #0]
 80130da:	1c5a      	adds	r2, r3, #1
 80130dc:	6022      	str	r2, [r4, #0]
 80130de:	701e      	strb	r6, [r3, #0]
 80130e0:	6963      	ldr	r3, [r4, #20]
 80130e2:	3001      	adds	r0, #1
 80130e4:	4283      	cmp	r3, r0
 80130e6:	d004      	beq.n	80130f2 <__swbuf_r+0x62>
 80130e8:	89a3      	ldrh	r3, [r4, #12]
 80130ea:	07db      	lsls	r3, r3, #31
 80130ec:	d506      	bpl.n	80130fc <__swbuf_r+0x6c>
 80130ee:	2e0a      	cmp	r6, #10
 80130f0:	d104      	bne.n	80130fc <__swbuf_r+0x6c>
 80130f2:	4621      	mov	r1, r4
 80130f4:	4628      	mov	r0, r5
 80130f6:	f000 f93b 	bl	8013370 <_fflush_r>
 80130fa:	b988      	cbnz	r0, 8013120 <__swbuf_r+0x90>
 80130fc:	4638      	mov	r0, r7
 80130fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013100:	4b0a      	ldr	r3, [pc, #40]	; (801312c <__swbuf_r+0x9c>)
 8013102:	429c      	cmp	r4, r3
 8013104:	d101      	bne.n	801310a <__swbuf_r+0x7a>
 8013106:	68ac      	ldr	r4, [r5, #8]
 8013108:	e7cf      	b.n	80130aa <__swbuf_r+0x1a>
 801310a:	4b09      	ldr	r3, [pc, #36]	; (8013130 <__swbuf_r+0xa0>)
 801310c:	429c      	cmp	r4, r3
 801310e:	bf08      	it	eq
 8013110:	68ec      	ldreq	r4, [r5, #12]
 8013112:	e7ca      	b.n	80130aa <__swbuf_r+0x1a>
 8013114:	4621      	mov	r1, r4
 8013116:	4628      	mov	r0, r5
 8013118:	f000 f81e 	bl	8013158 <__swsetup_r>
 801311c:	2800      	cmp	r0, #0
 801311e:	d0cb      	beq.n	80130b8 <__swbuf_r+0x28>
 8013120:	f04f 37ff 	mov.w	r7, #4294967295
 8013124:	e7ea      	b.n	80130fc <__swbuf_r+0x6c>
 8013126:	bf00      	nop
 8013128:	0801569c 	.word	0x0801569c
 801312c:	080156bc 	.word	0x080156bc
 8013130:	0801567c 	.word	0x0801567c

08013134 <_write_r>:
 8013134:	b538      	push	{r3, r4, r5, lr}
 8013136:	4d07      	ldr	r5, [pc, #28]	; (8013154 <_write_r+0x20>)
 8013138:	4604      	mov	r4, r0
 801313a:	4608      	mov	r0, r1
 801313c:	4611      	mov	r1, r2
 801313e:	2200      	movs	r2, #0
 8013140:	602a      	str	r2, [r5, #0]
 8013142:	461a      	mov	r2, r3
 8013144:	f7ed ff2e 	bl	8000fa4 <_write>
 8013148:	1c43      	adds	r3, r0, #1
 801314a:	d102      	bne.n	8013152 <_write_r+0x1e>
 801314c:	682b      	ldr	r3, [r5, #0]
 801314e:	b103      	cbz	r3, 8013152 <_write_r+0x1e>
 8013150:	6023      	str	r3, [r4, #0]
 8013152:	bd38      	pop	{r3, r4, r5, pc}
 8013154:	20004f2c 	.word	0x20004f2c

08013158 <__swsetup_r>:
 8013158:	4b32      	ldr	r3, [pc, #200]	; (8013224 <__swsetup_r+0xcc>)
 801315a:	b570      	push	{r4, r5, r6, lr}
 801315c:	681d      	ldr	r5, [r3, #0]
 801315e:	4606      	mov	r6, r0
 8013160:	460c      	mov	r4, r1
 8013162:	b125      	cbz	r5, 801316e <__swsetup_r+0x16>
 8013164:	69ab      	ldr	r3, [r5, #24]
 8013166:	b913      	cbnz	r3, 801316e <__swsetup_r+0x16>
 8013168:	4628      	mov	r0, r5
 801316a:	f7ff f8d3 	bl	8012314 <__sinit>
 801316e:	4b2e      	ldr	r3, [pc, #184]	; (8013228 <__swsetup_r+0xd0>)
 8013170:	429c      	cmp	r4, r3
 8013172:	d10f      	bne.n	8013194 <__swsetup_r+0x3c>
 8013174:	686c      	ldr	r4, [r5, #4]
 8013176:	89a3      	ldrh	r3, [r4, #12]
 8013178:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801317c:	0719      	lsls	r1, r3, #28
 801317e:	d42c      	bmi.n	80131da <__swsetup_r+0x82>
 8013180:	06dd      	lsls	r5, r3, #27
 8013182:	d411      	bmi.n	80131a8 <__swsetup_r+0x50>
 8013184:	2309      	movs	r3, #9
 8013186:	6033      	str	r3, [r6, #0]
 8013188:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801318c:	81a3      	strh	r3, [r4, #12]
 801318e:	f04f 30ff 	mov.w	r0, #4294967295
 8013192:	e03e      	b.n	8013212 <__swsetup_r+0xba>
 8013194:	4b25      	ldr	r3, [pc, #148]	; (801322c <__swsetup_r+0xd4>)
 8013196:	429c      	cmp	r4, r3
 8013198:	d101      	bne.n	801319e <__swsetup_r+0x46>
 801319a:	68ac      	ldr	r4, [r5, #8]
 801319c:	e7eb      	b.n	8013176 <__swsetup_r+0x1e>
 801319e:	4b24      	ldr	r3, [pc, #144]	; (8013230 <__swsetup_r+0xd8>)
 80131a0:	429c      	cmp	r4, r3
 80131a2:	bf08      	it	eq
 80131a4:	68ec      	ldreq	r4, [r5, #12]
 80131a6:	e7e6      	b.n	8013176 <__swsetup_r+0x1e>
 80131a8:	0758      	lsls	r0, r3, #29
 80131aa:	d512      	bpl.n	80131d2 <__swsetup_r+0x7a>
 80131ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80131ae:	b141      	cbz	r1, 80131c2 <__swsetup_r+0x6a>
 80131b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80131b4:	4299      	cmp	r1, r3
 80131b6:	d002      	beq.n	80131be <__swsetup_r+0x66>
 80131b8:	4630      	mov	r0, r6
 80131ba:	f000 f9a1 	bl	8013500 <_free_r>
 80131be:	2300      	movs	r3, #0
 80131c0:	6363      	str	r3, [r4, #52]	; 0x34
 80131c2:	89a3      	ldrh	r3, [r4, #12]
 80131c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80131c8:	81a3      	strh	r3, [r4, #12]
 80131ca:	2300      	movs	r3, #0
 80131cc:	6063      	str	r3, [r4, #4]
 80131ce:	6923      	ldr	r3, [r4, #16]
 80131d0:	6023      	str	r3, [r4, #0]
 80131d2:	89a3      	ldrh	r3, [r4, #12]
 80131d4:	f043 0308 	orr.w	r3, r3, #8
 80131d8:	81a3      	strh	r3, [r4, #12]
 80131da:	6923      	ldr	r3, [r4, #16]
 80131dc:	b94b      	cbnz	r3, 80131f2 <__swsetup_r+0x9a>
 80131de:	89a3      	ldrh	r3, [r4, #12]
 80131e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80131e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80131e8:	d003      	beq.n	80131f2 <__swsetup_r+0x9a>
 80131ea:	4621      	mov	r1, r4
 80131ec:	4630      	mov	r0, r6
 80131ee:	f000 f933 	bl	8013458 <__smakebuf_r>
 80131f2:	89a0      	ldrh	r0, [r4, #12]
 80131f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80131f8:	f010 0301 	ands.w	r3, r0, #1
 80131fc:	d00a      	beq.n	8013214 <__swsetup_r+0xbc>
 80131fe:	2300      	movs	r3, #0
 8013200:	60a3      	str	r3, [r4, #8]
 8013202:	6963      	ldr	r3, [r4, #20]
 8013204:	425b      	negs	r3, r3
 8013206:	61a3      	str	r3, [r4, #24]
 8013208:	6923      	ldr	r3, [r4, #16]
 801320a:	b943      	cbnz	r3, 801321e <__swsetup_r+0xc6>
 801320c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013210:	d1ba      	bne.n	8013188 <__swsetup_r+0x30>
 8013212:	bd70      	pop	{r4, r5, r6, pc}
 8013214:	0781      	lsls	r1, r0, #30
 8013216:	bf58      	it	pl
 8013218:	6963      	ldrpl	r3, [r4, #20]
 801321a:	60a3      	str	r3, [r4, #8]
 801321c:	e7f4      	b.n	8013208 <__swsetup_r+0xb0>
 801321e:	2000      	movs	r0, #0
 8013220:	e7f7      	b.n	8013212 <__swsetup_r+0xba>
 8013222:	bf00      	nop
 8013224:	20000054 	.word	0x20000054
 8013228:	0801569c 	.word	0x0801569c
 801322c:	080156bc 	.word	0x080156bc
 8013230:	0801567c 	.word	0x0801567c

08013234 <abort>:
 8013234:	b508      	push	{r3, lr}
 8013236:	2006      	movs	r0, #6
 8013238:	f000 fb72 	bl	8013920 <raise>
 801323c:	2001      	movs	r0, #1
 801323e:	f7ef fa03 	bl	8002648 <_exit>
	...

08013244 <_close_r>:
 8013244:	b538      	push	{r3, r4, r5, lr}
 8013246:	4d06      	ldr	r5, [pc, #24]	; (8013260 <_close_r+0x1c>)
 8013248:	2300      	movs	r3, #0
 801324a:	4604      	mov	r4, r0
 801324c:	4608      	mov	r0, r1
 801324e:	602b      	str	r3, [r5, #0]
 8013250:	f7ef fa21 	bl	8002696 <_close>
 8013254:	1c43      	adds	r3, r0, #1
 8013256:	d102      	bne.n	801325e <_close_r+0x1a>
 8013258:	682b      	ldr	r3, [r5, #0]
 801325a:	b103      	cbz	r3, 801325e <_close_r+0x1a>
 801325c:	6023      	str	r3, [r4, #0]
 801325e:	bd38      	pop	{r3, r4, r5, pc}
 8013260:	20004f2c 	.word	0x20004f2c

08013264 <__sflush_r>:
 8013264:	898a      	ldrh	r2, [r1, #12]
 8013266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801326a:	4605      	mov	r5, r0
 801326c:	0710      	lsls	r0, r2, #28
 801326e:	460c      	mov	r4, r1
 8013270:	d458      	bmi.n	8013324 <__sflush_r+0xc0>
 8013272:	684b      	ldr	r3, [r1, #4]
 8013274:	2b00      	cmp	r3, #0
 8013276:	dc05      	bgt.n	8013284 <__sflush_r+0x20>
 8013278:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801327a:	2b00      	cmp	r3, #0
 801327c:	dc02      	bgt.n	8013284 <__sflush_r+0x20>
 801327e:	2000      	movs	r0, #0
 8013280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013284:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013286:	2e00      	cmp	r6, #0
 8013288:	d0f9      	beq.n	801327e <__sflush_r+0x1a>
 801328a:	2300      	movs	r3, #0
 801328c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013290:	682f      	ldr	r7, [r5, #0]
 8013292:	602b      	str	r3, [r5, #0]
 8013294:	d032      	beq.n	80132fc <__sflush_r+0x98>
 8013296:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013298:	89a3      	ldrh	r3, [r4, #12]
 801329a:	075a      	lsls	r2, r3, #29
 801329c:	d505      	bpl.n	80132aa <__sflush_r+0x46>
 801329e:	6863      	ldr	r3, [r4, #4]
 80132a0:	1ac0      	subs	r0, r0, r3
 80132a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80132a4:	b10b      	cbz	r3, 80132aa <__sflush_r+0x46>
 80132a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80132a8:	1ac0      	subs	r0, r0, r3
 80132aa:	2300      	movs	r3, #0
 80132ac:	4602      	mov	r2, r0
 80132ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80132b0:	6a21      	ldr	r1, [r4, #32]
 80132b2:	4628      	mov	r0, r5
 80132b4:	47b0      	blx	r6
 80132b6:	1c43      	adds	r3, r0, #1
 80132b8:	89a3      	ldrh	r3, [r4, #12]
 80132ba:	d106      	bne.n	80132ca <__sflush_r+0x66>
 80132bc:	6829      	ldr	r1, [r5, #0]
 80132be:	291d      	cmp	r1, #29
 80132c0:	d82c      	bhi.n	801331c <__sflush_r+0xb8>
 80132c2:	4a2a      	ldr	r2, [pc, #168]	; (801336c <__sflush_r+0x108>)
 80132c4:	40ca      	lsrs	r2, r1
 80132c6:	07d6      	lsls	r6, r2, #31
 80132c8:	d528      	bpl.n	801331c <__sflush_r+0xb8>
 80132ca:	2200      	movs	r2, #0
 80132cc:	6062      	str	r2, [r4, #4]
 80132ce:	04d9      	lsls	r1, r3, #19
 80132d0:	6922      	ldr	r2, [r4, #16]
 80132d2:	6022      	str	r2, [r4, #0]
 80132d4:	d504      	bpl.n	80132e0 <__sflush_r+0x7c>
 80132d6:	1c42      	adds	r2, r0, #1
 80132d8:	d101      	bne.n	80132de <__sflush_r+0x7a>
 80132da:	682b      	ldr	r3, [r5, #0]
 80132dc:	b903      	cbnz	r3, 80132e0 <__sflush_r+0x7c>
 80132de:	6560      	str	r0, [r4, #84]	; 0x54
 80132e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80132e2:	602f      	str	r7, [r5, #0]
 80132e4:	2900      	cmp	r1, #0
 80132e6:	d0ca      	beq.n	801327e <__sflush_r+0x1a>
 80132e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80132ec:	4299      	cmp	r1, r3
 80132ee:	d002      	beq.n	80132f6 <__sflush_r+0x92>
 80132f0:	4628      	mov	r0, r5
 80132f2:	f000 f905 	bl	8013500 <_free_r>
 80132f6:	2000      	movs	r0, #0
 80132f8:	6360      	str	r0, [r4, #52]	; 0x34
 80132fa:	e7c1      	b.n	8013280 <__sflush_r+0x1c>
 80132fc:	6a21      	ldr	r1, [r4, #32]
 80132fe:	2301      	movs	r3, #1
 8013300:	4628      	mov	r0, r5
 8013302:	47b0      	blx	r6
 8013304:	1c41      	adds	r1, r0, #1
 8013306:	d1c7      	bne.n	8013298 <__sflush_r+0x34>
 8013308:	682b      	ldr	r3, [r5, #0]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d0c4      	beq.n	8013298 <__sflush_r+0x34>
 801330e:	2b1d      	cmp	r3, #29
 8013310:	d001      	beq.n	8013316 <__sflush_r+0xb2>
 8013312:	2b16      	cmp	r3, #22
 8013314:	d101      	bne.n	801331a <__sflush_r+0xb6>
 8013316:	602f      	str	r7, [r5, #0]
 8013318:	e7b1      	b.n	801327e <__sflush_r+0x1a>
 801331a:	89a3      	ldrh	r3, [r4, #12]
 801331c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013320:	81a3      	strh	r3, [r4, #12]
 8013322:	e7ad      	b.n	8013280 <__sflush_r+0x1c>
 8013324:	690f      	ldr	r7, [r1, #16]
 8013326:	2f00      	cmp	r7, #0
 8013328:	d0a9      	beq.n	801327e <__sflush_r+0x1a>
 801332a:	0793      	lsls	r3, r2, #30
 801332c:	680e      	ldr	r6, [r1, #0]
 801332e:	bf08      	it	eq
 8013330:	694b      	ldreq	r3, [r1, #20]
 8013332:	600f      	str	r7, [r1, #0]
 8013334:	bf18      	it	ne
 8013336:	2300      	movne	r3, #0
 8013338:	eba6 0807 	sub.w	r8, r6, r7
 801333c:	608b      	str	r3, [r1, #8]
 801333e:	f1b8 0f00 	cmp.w	r8, #0
 8013342:	dd9c      	ble.n	801327e <__sflush_r+0x1a>
 8013344:	6a21      	ldr	r1, [r4, #32]
 8013346:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013348:	4643      	mov	r3, r8
 801334a:	463a      	mov	r2, r7
 801334c:	4628      	mov	r0, r5
 801334e:	47b0      	blx	r6
 8013350:	2800      	cmp	r0, #0
 8013352:	dc06      	bgt.n	8013362 <__sflush_r+0xfe>
 8013354:	89a3      	ldrh	r3, [r4, #12]
 8013356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801335a:	81a3      	strh	r3, [r4, #12]
 801335c:	f04f 30ff 	mov.w	r0, #4294967295
 8013360:	e78e      	b.n	8013280 <__sflush_r+0x1c>
 8013362:	4407      	add	r7, r0
 8013364:	eba8 0800 	sub.w	r8, r8, r0
 8013368:	e7e9      	b.n	801333e <__sflush_r+0xda>
 801336a:	bf00      	nop
 801336c:	20400001 	.word	0x20400001

08013370 <_fflush_r>:
 8013370:	b538      	push	{r3, r4, r5, lr}
 8013372:	690b      	ldr	r3, [r1, #16]
 8013374:	4605      	mov	r5, r0
 8013376:	460c      	mov	r4, r1
 8013378:	b913      	cbnz	r3, 8013380 <_fflush_r+0x10>
 801337a:	2500      	movs	r5, #0
 801337c:	4628      	mov	r0, r5
 801337e:	bd38      	pop	{r3, r4, r5, pc}
 8013380:	b118      	cbz	r0, 801338a <_fflush_r+0x1a>
 8013382:	6983      	ldr	r3, [r0, #24]
 8013384:	b90b      	cbnz	r3, 801338a <_fflush_r+0x1a>
 8013386:	f7fe ffc5 	bl	8012314 <__sinit>
 801338a:	4b14      	ldr	r3, [pc, #80]	; (80133dc <_fflush_r+0x6c>)
 801338c:	429c      	cmp	r4, r3
 801338e:	d11b      	bne.n	80133c8 <_fflush_r+0x58>
 8013390:	686c      	ldr	r4, [r5, #4]
 8013392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d0ef      	beq.n	801337a <_fflush_r+0xa>
 801339a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801339c:	07d0      	lsls	r0, r2, #31
 801339e:	d404      	bmi.n	80133aa <_fflush_r+0x3a>
 80133a0:	0599      	lsls	r1, r3, #22
 80133a2:	d402      	bmi.n	80133aa <_fflush_r+0x3a>
 80133a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80133a6:	f7ff f88a 	bl	80124be <__retarget_lock_acquire_recursive>
 80133aa:	4628      	mov	r0, r5
 80133ac:	4621      	mov	r1, r4
 80133ae:	f7ff ff59 	bl	8013264 <__sflush_r>
 80133b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80133b4:	07da      	lsls	r2, r3, #31
 80133b6:	4605      	mov	r5, r0
 80133b8:	d4e0      	bmi.n	801337c <_fflush_r+0xc>
 80133ba:	89a3      	ldrh	r3, [r4, #12]
 80133bc:	059b      	lsls	r3, r3, #22
 80133be:	d4dd      	bmi.n	801337c <_fflush_r+0xc>
 80133c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80133c2:	f7ff f87d 	bl	80124c0 <__retarget_lock_release_recursive>
 80133c6:	e7d9      	b.n	801337c <_fflush_r+0xc>
 80133c8:	4b05      	ldr	r3, [pc, #20]	; (80133e0 <_fflush_r+0x70>)
 80133ca:	429c      	cmp	r4, r3
 80133cc:	d101      	bne.n	80133d2 <_fflush_r+0x62>
 80133ce:	68ac      	ldr	r4, [r5, #8]
 80133d0:	e7df      	b.n	8013392 <_fflush_r+0x22>
 80133d2:	4b04      	ldr	r3, [pc, #16]	; (80133e4 <_fflush_r+0x74>)
 80133d4:	429c      	cmp	r4, r3
 80133d6:	bf08      	it	eq
 80133d8:	68ec      	ldreq	r4, [r5, #12]
 80133da:	e7da      	b.n	8013392 <_fflush_r+0x22>
 80133dc:	0801569c 	.word	0x0801569c
 80133e0:	080156bc 	.word	0x080156bc
 80133e4:	0801567c 	.word	0x0801567c

080133e8 <_lseek_r>:
 80133e8:	b538      	push	{r3, r4, r5, lr}
 80133ea:	4d07      	ldr	r5, [pc, #28]	; (8013408 <_lseek_r+0x20>)
 80133ec:	4604      	mov	r4, r0
 80133ee:	4608      	mov	r0, r1
 80133f0:	4611      	mov	r1, r2
 80133f2:	2200      	movs	r2, #0
 80133f4:	602a      	str	r2, [r5, #0]
 80133f6:	461a      	mov	r2, r3
 80133f8:	f7ef f974 	bl	80026e4 <_lseek>
 80133fc:	1c43      	adds	r3, r0, #1
 80133fe:	d102      	bne.n	8013406 <_lseek_r+0x1e>
 8013400:	682b      	ldr	r3, [r5, #0]
 8013402:	b103      	cbz	r3, 8013406 <_lseek_r+0x1e>
 8013404:	6023      	str	r3, [r4, #0]
 8013406:	bd38      	pop	{r3, r4, r5, pc}
 8013408:	20004f2c 	.word	0x20004f2c

0801340c <__swhatbuf_r>:
 801340c:	b570      	push	{r4, r5, r6, lr}
 801340e:	460e      	mov	r6, r1
 8013410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013414:	2900      	cmp	r1, #0
 8013416:	b096      	sub	sp, #88	; 0x58
 8013418:	4614      	mov	r4, r2
 801341a:	461d      	mov	r5, r3
 801341c:	da08      	bge.n	8013430 <__swhatbuf_r+0x24>
 801341e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013422:	2200      	movs	r2, #0
 8013424:	602a      	str	r2, [r5, #0]
 8013426:	061a      	lsls	r2, r3, #24
 8013428:	d410      	bmi.n	801344c <__swhatbuf_r+0x40>
 801342a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801342e:	e00e      	b.n	801344e <__swhatbuf_r+0x42>
 8013430:	466a      	mov	r2, sp
 8013432:	f000 fa91 	bl	8013958 <_fstat_r>
 8013436:	2800      	cmp	r0, #0
 8013438:	dbf1      	blt.n	801341e <__swhatbuf_r+0x12>
 801343a:	9a01      	ldr	r2, [sp, #4]
 801343c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013440:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013444:	425a      	negs	r2, r3
 8013446:	415a      	adcs	r2, r3
 8013448:	602a      	str	r2, [r5, #0]
 801344a:	e7ee      	b.n	801342a <__swhatbuf_r+0x1e>
 801344c:	2340      	movs	r3, #64	; 0x40
 801344e:	2000      	movs	r0, #0
 8013450:	6023      	str	r3, [r4, #0]
 8013452:	b016      	add	sp, #88	; 0x58
 8013454:	bd70      	pop	{r4, r5, r6, pc}
	...

08013458 <__smakebuf_r>:
 8013458:	898b      	ldrh	r3, [r1, #12]
 801345a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801345c:	079d      	lsls	r5, r3, #30
 801345e:	4606      	mov	r6, r0
 8013460:	460c      	mov	r4, r1
 8013462:	d507      	bpl.n	8013474 <__smakebuf_r+0x1c>
 8013464:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013468:	6023      	str	r3, [r4, #0]
 801346a:	6123      	str	r3, [r4, #16]
 801346c:	2301      	movs	r3, #1
 801346e:	6163      	str	r3, [r4, #20]
 8013470:	b002      	add	sp, #8
 8013472:	bd70      	pop	{r4, r5, r6, pc}
 8013474:	ab01      	add	r3, sp, #4
 8013476:	466a      	mov	r2, sp
 8013478:	f7ff ffc8 	bl	801340c <__swhatbuf_r>
 801347c:	9900      	ldr	r1, [sp, #0]
 801347e:	4605      	mov	r5, r0
 8013480:	4630      	mov	r0, r6
 8013482:	f7ff f87f 	bl	8012584 <_malloc_r>
 8013486:	b948      	cbnz	r0, 801349c <__smakebuf_r+0x44>
 8013488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801348c:	059a      	lsls	r2, r3, #22
 801348e:	d4ef      	bmi.n	8013470 <__smakebuf_r+0x18>
 8013490:	f023 0303 	bic.w	r3, r3, #3
 8013494:	f043 0302 	orr.w	r3, r3, #2
 8013498:	81a3      	strh	r3, [r4, #12]
 801349a:	e7e3      	b.n	8013464 <__smakebuf_r+0xc>
 801349c:	4b0d      	ldr	r3, [pc, #52]	; (80134d4 <__smakebuf_r+0x7c>)
 801349e:	62b3      	str	r3, [r6, #40]	; 0x28
 80134a0:	89a3      	ldrh	r3, [r4, #12]
 80134a2:	6020      	str	r0, [r4, #0]
 80134a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134a8:	81a3      	strh	r3, [r4, #12]
 80134aa:	9b00      	ldr	r3, [sp, #0]
 80134ac:	6163      	str	r3, [r4, #20]
 80134ae:	9b01      	ldr	r3, [sp, #4]
 80134b0:	6120      	str	r0, [r4, #16]
 80134b2:	b15b      	cbz	r3, 80134cc <__smakebuf_r+0x74>
 80134b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80134b8:	4630      	mov	r0, r6
 80134ba:	f000 fa5f 	bl	801397c <_isatty_r>
 80134be:	b128      	cbz	r0, 80134cc <__smakebuf_r+0x74>
 80134c0:	89a3      	ldrh	r3, [r4, #12]
 80134c2:	f023 0303 	bic.w	r3, r3, #3
 80134c6:	f043 0301 	orr.w	r3, r3, #1
 80134ca:	81a3      	strh	r3, [r4, #12]
 80134cc:	89a0      	ldrh	r0, [r4, #12]
 80134ce:	4305      	orrs	r5, r0
 80134d0:	81a5      	strh	r5, [r4, #12]
 80134d2:	e7cd      	b.n	8013470 <__smakebuf_r+0x18>
 80134d4:	080122ad 	.word	0x080122ad

080134d8 <malloc>:
 80134d8:	4b02      	ldr	r3, [pc, #8]	; (80134e4 <malloc+0xc>)
 80134da:	4601      	mov	r1, r0
 80134dc:	6818      	ldr	r0, [r3, #0]
 80134de:	f7ff b851 	b.w	8012584 <_malloc_r>
 80134e2:	bf00      	nop
 80134e4:	20000054 	.word	0x20000054

080134e8 <__malloc_lock>:
 80134e8:	4801      	ldr	r0, [pc, #4]	; (80134f0 <__malloc_lock+0x8>)
 80134ea:	f7fe bfe8 	b.w	80124be <__retarget_lock_acquire_recursive>
 80134ee:	bf00      	nop
 80134f0:	20004f20 	.word	0x20004f20

080134f4 <__malloc_unlock>:
 80134f4:	4801      	ldr	r0, [pc, #4]	; (80134fc <__malloc_unlock+0x8>)
 80134f6:	f7fe bfe3 	b.w	80124c0 <__retarget_lock_release_recursive>
 80134fa:	bf00      	nop
 80134fc:	20004f20 	.word	0x20004f20

08013500 <_free_r>:
 8013500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013502:	2900      	cmp	r1, #0
 8013504:	d044      	beq.n	8013590 <_free_r+0x90>
 8013506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801350a:	9001      	str	r0, [sp, #4]
 801350c:	2b00      	cmp	r3, #0
 801350e:	f1a1 0404 	sub.w	r4, r1, #4
 8013512:	bfb8      	it	lt
 8013514:	18e4      	addlt	r4, r4, r3
 8013516:	f7ff ffe7 	bl	80134e8 <__malloc_lock>
 801351a:	4a1e      	ldr	r2, [pc, #120]	; (8013594 <_free_r+0x94>)
 801351c:	9801      	ldr	r0, [sp, #4]
 801351e:	6813      	ldr	r3, [r2, #0]
 8013520:	b933      	cbnz	r3, 8013530 <_free_r+0x30>
 8013522:	6063      	str	r3, [r4, #4]
 8013524:	6014      	str	r4, [r2, #0]
 8013526:	b003      	add	sp, #12
 8013528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801352c:	f7ff bfe2 	b.w	80134f4 <__malloc_unlock>
 8013530:	42a3      	cmp	r3, r4
 8013532:	d908      	bls.n	8013546 <_free_r+0x46>
 8013534:	6825      	ldr	r5, [r4, #0]
 8013536:	1961      	adds	r1, r4, r5
 8013538:	428b      	cmp	r3, r1
 801353a:	bf01      	itttt	eq
 801353c:	6819      	ldreq	r1, [r3, #0]
 801353e:	685b      	ldreq	r3, [r3, #4]
 8013540:	1949      	addeq	r1, r1, r5
 8013542:	6021      	streq	r1, [r4, #0]
 8013544:	e7ed      	b.n	8013522 <_free_r+0x22>
 8013546:	461a      	mov	r2, r3
 8013548:	685b      	ldr	r3, [r3, #4]
 801354a:	b10b      	cbz	r3, 8013550 <_free_r+0x50>
 801354c:	42a3      	cmp	r3, r4
 801354e:	d9fa      	bls.n	8013546 <_free_r+0x46>
 8013550:	6811      	ldr	r1, [r2, #0]
 8013552:	1855      	adds	r5, r2, r1
 8013554:	42a5      	cmp	r5, r4
 8013556:	d10b      	bne.n	8013570 <_free_r+0x70>
 8013558:	6824      	ldr	r4, [r4, #0]
 801355a:	4421      	add	r1, r4
 801355c:	1854      	adds	r4, r2, r1
 801355e:	42a3      	cmp	r3, r4
 8013560:	6011      	str	r1, [r2, #0]
 8013562:	d1e0      	bne.n	8013526 <_free_r+0x26>
 8013564:	681c      	ldr	r4, [r3, #0]
 8013566:	685b      	ldr	r3, [r3, #4]
 8013568:	6053      	str	r3, [r2, #4]
 801356a:	4421      	add	r1, r4
 801356c:	6011      	str	r1, [r2, #0]
 801356e:	e7da      	b.n	8013526 <_free_r+0x26>
 8013570:	d902      	bls.n	8013578 <_free_r+0x78>
 8013572:	230c      	movs	r3, #12
 8013574:	6003      	str	r3, [r0, #0]
 8013576:	e7d6      	b.n	8013526 <_free_r+0x26>
 8013578:	6825      	ldr	r5, [r4, #0]
 801357a:	1961      	adds	r1, r4, r5
 801357c:	428b      	cmp	r3, r1
 801357e:	bf04      	itt	eq
 8013580:	6819      	ldreq	r1, [r3, #0]
 8013582:	685b      	ldreq	r3, [r3, #4]
 8013584:	6063      	str	r3, [r4, #4]
 8013586:	bf04      	itt	eq
 8013588:	1949      	addeq	r1, r1, r5
 801358a:	6021      	streq	r1, [r4, #0]
 801358c:	6054      	str	r4, [r2, #4]
 801358e:	e7ca      	b.n	8013526 <_free_r+0x26>
 8013590:	b003      	add	sp, #12
 8013592:	bd30      	pop	{r4, r5, pc}
 8013594:	20004f24 	.word	0x20004f24

08013598 <_realloc_r>:
 8013598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801359c:	4680      	mov	r8, r0
 801359e:	4614      	mov	r4, r2
 80135a0:	460e      	mov	r6, r1
 80135a2:	b921      	cbnz	r1, 80135ae <_realloc_r+0x16>
 80135a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80135a8:	4611      	mov	r1, r2
 80135aa:	f7fe bfeb 	b.w	8012584 <_malloc_r>
 80135ae:	b92a      	cbnz	r2, 80135bc <_realloc_r+0x24>
 80135b0:	f7ff ffa6 	bl	8013500 <_free_r>
 80135b4:	4625      	mov	r5, r4
 80135b6:	4628      	mov	r0, r5
 80135b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135bc:	f000 f9ee 	bl	801399c <_malloc_usable_size_r>
 80135c0:	4284      	cmp	r4, r0
 80135c2:	4607      	mov	r7, r0
 80135c4:	d802      	bhi.n	80135cc <_realloc_r+0x34>
 80135c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80135ca:	d812      	bhi.n	80135f2 <_realloc_r+0x5a>
 80135cc:	4621      	mov	r1, r4
 80135ce:	4640      	mov	r0, r8
 80135d0:	f7fe ffd8 	bl	8012584 <_malloc_r>
 80135d4:	4605      	mov	r5, r0
 80135d6:	2800      	cmp	r0, #0
 80135d8:	d0ed      	beq.n	80135b6 <_realloc_r+0x1e>
 80135da:	42bc      	cmp	r4, r7
 80135dc:	4622      	mov	r2, r4
 80135de:	4631      	mov	r1, r6
 80135e0:	bf28      	it	cs
 80135e2:	463a      	movcs	r2, r7
 80135e4:	f7fe ff7d 	bl	80124e2 <memcpy>
 80135e8:	4631      	mov	r1, r6
 80135ea:	4640      	mov	r0, r8
 80135ec:	f7ff ff88 	bl	8013500 <_free_r>
 80135f0:	e7e1      	b.n	80135b6 <_realloc_r+0x1e>
 80135f2:	4635      	mov	r5, r6
 80135f4:	e7df      	b.n	80135b6 <_realloc_r+0x1e>

080135f6 <__ssputs_r>:
 80135f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135fa:	688e      	ldr	r6, [r1, #8]
 80135fc:	429e      	cmp	r6, r3
 80135fe:	4682      	mov	sl, r0
 8013600:	460c      	mov	r4, r1
 8013602:	4690      	mov	r8, r2
 8013604:	461f      	mov	r7, r3
 8013606:	d838      	bhi.n	801367a <__ssputs_r+0x84>
 8013608:	898a      	ldrh	r2, [r1, #12]
 801360a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801360e:	d032      	beq.n	8013676 <__ssputs_r+0x80>
 8013610:	6825      	ldr	r5, [r4, #0]
 8013612:	6909      	ldr	r1, [r1, #16]
 8013614:	eba5 0901 	sub.w	r9, r5, r1
 8013618:	6965      	ldr	r5, [r4, #20]
 801361a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801361e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013622:	3301      	adds	r3, #1
 8013624:	444b      	add	r3, r9
 8013626:	106d      	asrs	r5, r5, #1
 8013628:	429d      	cmp	r5, r3
 801362a:	bf38      	it	cc
 801362c:	461d      	movcc	r5, r3
 801362e:	0553      	lsls	r3, r2, #21
 8013630:	d531      	bpl.n	8013696 <__ssputs_r+0xa0>
 8013632:	4629      	mov	r1, r5
 8013634:	f7fe ffa6 	bl	8012584 <_malloc_r>
 8013638:	4606      	mov	r6, r0
 801363a:	b950      	cbnz	r0, 8013652 <__ssputs_r+0x5c>
 801363c:	230c      	movs	r3, #12
 801363e:	f8ca 3000 	str.w	r3, [sl]
 8013642:	89a3      	ldrh	r3, [r4, #12]
 8013644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013648:	81a3      	strh	r3, [r4, #12]
 801364a:	f04f 30ff 	mov.w	r0, #4294967295
 801364e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013652:	6921      	ldr	r1, [r4, #16]
 8013654:	464a      	mov	r2, r9
 8013656:	f7fe ff44 	bl	80124e2 <memcpy>
 801365a:	89a3      	ldrh	r3, [r4, #12]
 801365c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013664:	81a3      	strh	r3, [r4, #12]
 8013666:	6126      	str	r6, [r4, #16]
 8013668:	6165      	str	r5, [r4, #20]
 801366a:	444e      	add	r6, r9
 801366c:	eba5 0509 	sub.w	r5, r5, r9
 8013670:	6026      	str	r6, [r4, #0]
 8013672:	60a5      	str	r5, [r4, #8]
 8013674:	463e      	mov	r6, r7
 8013676:	42be      	cmp	r6, r7
 8013678:	d900      	bls.n	801367c <__ssputs_r+0x86>
 801367a:	463e      	mov	r6, r7
 801367c:	6820      	ldr	r0, [r4, #0]
 801367e:	4632      	mov	r2, r6
 8013680:	4641      	mov	r1, r8
 8013682:	f7fe ff3c 	bl	80124fe <memmove>
 8013686:	68a3      	ldr	r3, [r4, #8]
 8013688:	1b9b      	subs	r3, r3, r6
 801368a:	60a3      	str	r3, [r4, #8]
 801368c:	6823      	ldr	r3, [r4, #0]
 801368e:	4433      	add	r3, r6
 8013690:	6023      	str	r3, [r4, #0]
 8013692:	2000      	movs	r0, #0
 8013694:	e7db      	b.n	801364e <__ssputs_r+0x58>
 8013696:	462a      	mov	r2, r5
 8013698:	f7ff ff7e 	bl	8013598 <_realloc_r>
 801369c:	4606      	mov	r6, r0
 801369e:	2800      	cmp	r0, #0
 80136a0:	d1e1      	bne.n	8013666 <__ssputs_r+0x70>
 80136a2:	6921      	ldr	r1, [r4, #16]
 80136a4:	4650      	mov	r0, sl
 80136a6:	f7ff ff2b 	bl	8013500 <_free_r>
 80136aa:	e7c7      	b.n	801363c <__ssputs_r+0x46>

080136ac <_svfiprintf_r>:
 80136ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136b0:	4698      	mov	r8, r3
 80136b2:	898b      	ldrh	r3, [r1, #12]
 80136b4:	061b      	lsls	r3, r3, #24
 80136b6:	b09d      	sub	sp, #116	; 0x74
 80136b8:	4607      	mov	r7, r0
 80136ba:	460d      	mov	r5, r1
 80136bc:	4614      	mov	r4, r2
 80136be:	d50e      	bpl.n	80136de <_svfiprintf_r+0x32>
 80136c0:	690b      	ldr	r3, [r1, #16]
 80136c2:	b963      	cbnz	r3, 80136de <_svfiprintf_r+0x32>
 80136c4:	2140      	movs	r1, #64	; 0x40
 80136c6:	f7fe ff5d 	bl	8012584 <_malloc_r>
 80136ca:	6028      	str	r0, [r5, #0]
 80136cc:	6128      	str	r0, [r5, #16]
 80136ce:	b920      	cbnz	r0, 80136da <_svfiprintf_r+0x2e>
 80136d0:	230c      	movs	r3, #12
 80136d2:	603b      	str	r3, [r7, #0]
 80136d4:	f04f 30ff 	mov.w	r0, #4294967295
 80136d8:	e0d1      	b.n	801387e <_svfiprintf_r+0x1d2>
 80136da:	2340      	movs	r3, #64	; 0x40
 80136dc:	616b      	str	r3, [r5, #20]
 80136de:	2300      	movs	r3, #0
 80136e0:	9309      	str	r3, [sp, #36]	; 0x24
 80136e2:	2320      	movs	r3, #32
 80136e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80136e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80136ec:	2330      	movs	r3, #48	; 0x30
 80136ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013898 <_svfiprintf_r+0x1ec>
 80136f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80136f6:	f04f 0901 	mov.w	r9, #1
 80136fa:	4623      	mov	r3, r4
 80136fc:	469a      	mov	sl, r3
 80136fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013702:	b10a      	cbz	r2, 8013708 <_svfiprintf_r+0x5c>
 8013704:	2a25      	cmp	r2, #37	; 0x25
 8013706:	d1f9      	bne.n	80136fc <_svfiprintf_r+0x50>
 8013708:	ebba 0b04 	subs.w	fp, sl, r4
 801370c:	d00b      	beq.n	8013726 <_svfiprintf_r+0x7a>
 801370e:	465b      	mov	r3, fp
 8013710:	4622      	mov	r2, r4
 8013712:	4629      	mov	r1, r5
 8013714:	4638      	mov	r0, r7
 8013716:	f7ff ff6e 	bl	80135f6 <__ssputs_r>
 801371a:	3001      	adds	r0, #1
 801371c:	f000 80aa 	beq.w	8013874 <_svfiprintf_r+0x1c8>
 8013720:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013722:	445a      	add	r2, fp
 8013724:	9209      	str	r2, [sp, #36]	; 0x24
 8013726:	f89a 3000 	ldrb.w	r3, [sl]
 801372a:	2b00      	cmp	r3, #0
 801372c:	f000 80a2 	beq.w	8013874 <_svfiprintf_r+0x1c8>
 8013730:	2300      	movs	r3, #0
 8013732:	f04f 32ff 	mov.w	r2, #4294967295
 8013736:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801373a:	f10a 0a01 	add.w	sl, sl, #1
 801373e:	9304      	str	r3, [sp, #16]
 8013740:	9307      	str	r3, [sp, #28]
 8013742:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013746:	931a      	str	r3, [sp, #104]	; 0x68
 8013748:	4654      	mov	r4, sl
 801374a:	2205      	movs	r2, #5
 801374c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013750:	4851      	ldr	r0, [pc, #324]	; (8013898 <_svfiprintf_r+0x1ec>)
 8013752:	f7ec fd45 	bl	80001e0 <memchr>
 8013756:	9a04      	ldr	r2, [sp, #16]
 8013758:	b9d8      	cbnz	r0, 8013792 <_svfiprintf_r+0xe6>
 801375a:	06d0      	lsls	r0, r2, #27
 801375c:	bf44      	itt	mi
 801375e:	2320      	movmi	r3, #32
 8013760:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013764:	0711      	lsls	r1, r2, #28
 8013766:	bf44      	itt	mi
 8013768:	232b      	movmi	r3, #43	; 0x2b
 801376a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801376e:	f89a 3000 	ldrb.w	r3, [sl]
 8013772:	2b2a      	cmp	r3, #42	; 0x2a
 8013774:	d015      	beq.n	80137a2 <_svfiprintf_r+0xf6>
 8013776:	9a07      	ldr	r2, [sp, #28]
 8013778:	4654      	mov	r4, sl
 801377a:	2000      	movs	r0, #0
 801377c:	f04f 0c0a 	mov.w	ip, #10
 8013780:	4621      	mov	r1, r4
 8013782:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013786:	3b30      	subs	r3, #48	; 0x30
 8013788:	2b09      	cmp	r3, #9
 801378a:	d94e      	bls.n	801382a <_svfiprintf_r+0x17e>
 801378c:	b1b0      	cbz	r0, 80137bc <_svfiprintf_r+0x110>
 801378e:	9207      	str	r2, [sp, #28]
 8013790:	e014      	b.n	80137bc <_svfiprintf_r+0x110>
 8013792:	eba0 0308 	sub.w	r3, r0, r8
 8013796:	fa09 f303 	lsl.w	r3, r9, r3
 801379a:	4313      	orrs	r3, r2
 801379c:	9304      	str	r3, [sp, #16]
 801379e:	46a2      	mov	sl, r4
 80137a0:	e7d2      	b.n	8013748 <_svfiprintf_r+0x9c>
 80137a2:	9b03      	ldr	r3, [sp, #12]
 80137a4:	1d19      	adds	r1, r3, #4
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	9103      	str	r1, [sp, #12]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	bfbb      	ittet	lt
 80137ae:	425b      	neglt	r3, r3
 80137b0:	f042 0202 	orrlt.w	r2, r2, #2
 80137b4:	9307      	strge	r3, [sp, #28]
 80137b6:	9307      	strlt	r3, [sp, #28]
 80137b8:	bfb8      	it	lt
 80137ba:	9204      	strlt	r2, [sp, #16]
 80137bc:	7823      	ldrb	r3, [r4, #0]
 80137be:	2b2e      	cmp	r3, #46	; 0x2e
 80137c0:	d10c      	bne.n	80137dc <_svfiprintf_r+0x130>
 80137c2:	7863      	ldrb	r3, [r4, #1]
 80137c4:	2b2a      	cmp	r3, #42	; 0x2a
 80137c6:	d135      	bne.n	8013834 <_svfiprintf_r+0x188>
 80137c8:	9b03      	ldr	r3, [sp, #12]
 80137ca:	1d1a      	adds	r2, r3, #4
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	9203      	str	r2, [sp, #12]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	bfb8      	it	lt
 80137d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80137d8:	3402      	adds	r4, #2
 80137da:	9305      	str	r3, [sp, #20]
 80137dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80138a8 <_svfiprintf_r+0x1fc>
 80137e0:	7821      	ldrb	r1, [r4, #0]
 80137e2:	2203      	movs	r2, #3
 80137e4:	4650      	mov	r0, sl
 80137e6:	f7ec fcfb 	bl	80001e0 <memchr>
 80137ea:	b140      	cbz	r0, 80137fe <_svfiprintf_r+0x152>
 80137ec:	2340      	movs	r3, #64	; 0x40
 80137ee:	eba0 000a 	sub.w	r0, r0, sl
 80137f2:	fa03 f000 	lsl.w	r0, r3, r0
 80137f6:	9b04      	ldr	r3, [sp, #16]
 80137f8:	4303      	orrs	r3, r0
 80137fa:	3401      	adds	r4, #1
 80137fc:	9304      	str	r3, [sp, #16]
 80137fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013802:	4826      	ldr	r0, [pc, #152]	; (801389c <_svfiprintf_r+0x1f0>)
 8013804:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013808:	2206      	movs	r2, #6
 801380a:	f7ec fce9 	bl	80001e0 <memchr>
 801380e:	2800      	cmp	r0, #0
 8013810:	d038      	beq.n	8013884 <_svfiprintf_r+0x1d8>
 8013812:	4b23      	ldr	r3, [pc, #140]	; (80138a0 <_svfiprintf_r+0x1f4>)
 8013814:	bb1b      	cbnz	r3, 801385e <_svfiprintf_r+0x1b2>
 8013816:	9b03      	ldr	r3, [sp, #12]
 8013818:	3307      	adds	r3, #7
 801381a:	f023 0307 	bic.w	r3, r3, #7
 801381e:	3308      	adds	r3, #8
 8013820:	9303      	str	r3, [sp, #12]
 8013822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013824:	4433      	add	r3, r6
 8013826:	9309      	str	r3, [sp, #36]	; 0x24
 8013828:	e767      	b.n	80136fa <_svfiprintf_r+0x4e>
 801382a:	fb0c 3202 	mla	r2, ip, r2, r3
 801382e:	460c      	mov	r4, r1
 8013830:	2001      	movs	r0, #1
 8013832:	e7a5      	b.n	8013780 <_svfiprintf_r+0xd4>
 8013834:	2300      	movs	r3, #0
 8013836:	3401      	adds	r4, #1
 8013838:	9305      	str	r3, [sp, #20]
 801383a:	4619      	mov	r1, r3
 801383c:	f04f 0c0a 	mov.w	ip, #10
 8013840:	4620      	mov	r0, r4
 8013842:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013846:	3a30      	subs	r2, #48	; 0x30
 8013848:	2a09      	cmp	r2, #9
 801384a:	d903      	bls.n	8013854 <_svfiprintf_r+0x1a8>
 801384c:	2b00      	cmp	r3, #0
 801384e:	d0c5      	beq.n	80137dc <_svfiprintf_r+0x130>
 8013850:	9105      	str	r1, [sp, #20]
 8013852:	e7c3      	b.n	80137dc <_svfiprintf_r+0x130>
 8013854:	fb0c 2101 	mla	r1, ip, r1, r2
 8013858:	4604      	mov	r4, r0
 801385a:	2301      	movs	r3, #1
 801385c:	e7f0      	b.n	8013840 <_svfiprintf_r+0x194>
 801385e:	ab03      	add	r3, sp, #12
 8013860:	9300      	str	r3, [sp, #0]
 8013862:	462a      	mov	r2, r5
 8013864:	4b0f      	ldr	r3, [pc, #60]	; (80138a4 <_svfiprintf_r+0x1f8>)
 8013866:	a904      	add	r1, sp, #16
 8013868:	4638      	mov	r0, r7
 801386a:	f3af 8000 	nop.w
 801386e:	1c42      	adds	r2, r0, #1
 8013870:	4606      	mov	r6, r0
 8013872:	d1d6      	bne.n	8013822 <_svfiprintf_r+0x176>
 8013874:	89ab      	ldrh	r3, [r5, #12]
 8013876:	065b      	lsls	r3, r3, #25
 8013878:	f53f af2c 	bmi.w	80136d4 <_svfiprintf_r+0x28>
 801387c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801387e:	b01d      	add	sp, #116	; 0x74
 8013880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013884:	ab03      	add	r3, sp, #12
 8013886:	9300      	str	r3, [sp, #0]
 8013888:	462a      	mov	r2, r5
 801388a:	4b06      	ldr	r3, [pc, #24]	; (80138a4 <_svfiprintf_r+0x1f8>)
 801388c:	a904      	add	r1, sp, #16
 801388e:	4638      	mov	r0, r7
 8013890:	f7ff f8b4 	bl	80129fc <_printf_i>
 8013894:	e7eb      	b.n	801386e <_svfiprintf_r+0x1c2>
 8013896:	bf00      	nop
 8013898:	080156e0 	.word	0x080156e0
 801389c:	080156ea 	.word	0x080156ea
 80138a0:	00000000 	.word	0x00000000
 80138a4:	080135f7 	.word	0x080135f7
 80138a8:	080156e6 	.word	0x080156e6

080138ac <_read_r>:
 80138ac:	b538      	push	{r3, r4, r5, lr}
 80138ae:	4d07      	ldr	r5, [pc, #28]	; (80138cc <_read_r+0x20>)
 80138b0:	4604      	mov	r4, r0
 80138b2:	4608      	mov	r0, r1
 80138b4:	4611      	mov	r1, r2
 80138b6:	2200      	movs	r2, #0
 80138b8:	602a      	str	r2, [r5, #0]
 80138ba:	461a      	mov	r2, r3
 80138bc:	f7ee fece 	bl	800265c <_read>
 80138c0:	1c43      	adds	r3, r0, #1
 80138c2:	d102      	bne.n	80138ca <_read_r+0x1e>
 80138c4:	682b      	ldr	r3, [r5, #0]
 80138c6:	b103      	cbz	r3, 80138ca <_read_r+0x1e>
 80138c8:	6023      	str	r3, [r4, #0]
 80138ca:	bd38      	pop	{r3, r4, r5, pc}
 80138cc:	20004f2c 	.word	0x20004f2c

080138d0 <_raise_r>:
 80138d0:	291f      	cmp	r1, #31
 80138d2:	b538      	push	{r3, r4, r5, lr}
 80138d4:	4604      	mov	r4, r0
 80138d6:	460d      	mov	r5, r1
 80138d8:	d904      	bls.n	80138e4 <_raise_r+0x14>
 80138da:	2316      	movs	r3, #22
 80138dc:	6003      	str	r3, [r0, #0]
 80138de:	f04f 30ff 	mov.w	r0, #4294967295
 80138e2:	bd38      	pop	{r3, r4, r5, pc}
 80138e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80138e6:	b112      	cbz	r2, 80138ee <_raise_r+0x1e>
 80138e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80138ec:	b94b      	cbnz	r3, 8013902 <_raise_r+0x32>
 80138ee:	4620      	mov	r0, r4
 80138f0:	f000 f830 	bl	8013954 <_getpid_r>
 80138f4:	462a      	mov	r2, r5
 80138f6:	4601      	mov	r1, r0
 80138f8:	4620      	mov	r0, r4
 80138fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80138fe:	f000 b817 	b.w	8013930 <_kill_r>
 8013902:	2b01      	cmp	r3, #1
 8013904:	d00a      	beq.n	801391c <_raise_r+0x4c>
 8013906:	1c59      	adds	r1, r3, #1
 8013908:	d103      	bne.n	8013912 <_raise_r+0x42>
 801390a:	2316      	movs	r3, #22
 801390c:	6003      	str	r3, [r0, #0]
 801390e:	2001      	movs	r0, #1
 8013910:	e7e7      	b.n	80138e2 <_raise_r+0x12>
 8013912:	2400      	movs	r4, #0
 8013914:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013918:	4628      	mov	r0, r5
 801391a:	4798      	blx	r3
 801391c:	2000      	movs	r0, #0
 801391e:	e7e0      	b.n	80138e2 <_raise_r+0x12>

08013920 <raise>:
 8013920:	4b02      	ldr	r3, [pc, #8]	; (801392c <raise+0xc>)
 8013922:	4601      	mov	r1, r0
 8013924:	6818      	ldr	r0, [r3, #0]
 8013926:	f7ff bfd3 	b.w	80138d0 <_raise_r>
 801392a:	bf00      	nop
 801392c:	20000054 	.word	0x20000054

08013930 <_kill_r>:
 8013930:	b538      	push	{r3, r4, r5, lr}
 8013932:	4d07      	ldr	r5, [pc, #28]	; (8013950 <_kill_r+0x20>)
 8013934:	2300      	movs	r3, #0
 8013936:	4604      	mov	r4, r0
 8013938:	4608      	mov	r0, r1
 801393a:	4611      	mov	r1, r2
 801393c:	602b      	str	r3, [r5, #0]
 801393e:	f7ee fe73 	bl	8002628 <_kill>
 8013942:	1c43      	adds	r3, r0, #1
 8013944:	d102      	bne.n	801394c <_kill_r+0x1c>
 8013946:	682b      	ldr	r3, [r5, #0]
 8013948:	b103      	cbz	r3, 801394c <_kill_r+0x1c>
 801394a:	6023      	str	r3, [r4, #0]
 801394c:	bd38      	pop	{r3, r4, r5, pc}
 801394e:	bf00      	nop
 8013950:	20004f2c 	.word	0x20004f2c

08013954 <_getpid_r>:
 8013954:	f7ee be60 	b.w	8002618 <_getpid>

08013958 <_fstat_r>:
 8013958:	b538      	push	{r3, r4, r5, lr}
 801395a:	4d07      	ldr	r5, [pc, #28]	; (8013978 <_fstat_r+0x20>)
 801395c:	2300      	movs	r3, #0
 801395e:	4604      	mov	r4, r0
 8013960:	4608      	mov	r0, r1
 8013962:	4611      	mov	r1, r2
 8013964:	602b      	str	r3, [r5, #0]
 8013966:	f7ee fea2 	bl	80026ae <_fstat>
 801396a:	1c43      	adds	r3, r0, #1
 801396c:	d102      	bne.n	8013974 <_fstat_r+0x1c>
 801396e:	682b      	ldr	r3, [r5, #0]
 8013970:	b103      	cbz	r3, 8013974 <_fstat_r+0x1c>
 8013972:	6023      	str	r3, [r4, #0]
 8013974:	bd38      	pop	{r3, r4, r5, pc}
 8013976:	bf00      	nop
 8013978:	20004f2c 	.word	0x20004f2c

0801397c <_isatty_r>:
 801397c:	b538      	push	{r3, r4, r5, lr}
 801397e:	4d06      	ldr	r5, [pc, #24]	; (8013998 <_isatty_r+0x1c>)
 8013980:	2300      	movs	r3, #0
 8013982:	4604      	mov	r4, r0
 8013984:	4608      	mov	r0, r1
 8013986:	602b      	str	r3, [r5, #0]
 8013988:	f7ee fea1 	bl	80026ce <_isatty>
 801398c:	1c43      	adds	r3, r0, #1
 801398e:	d102      	bne.n	8013996 <_isatty_r+0x1a>
 8013990:	682b      	ldr	r3, [r5, #0]
 8013992:	b103      	cbz	r3, 8013996 <_isatty_r+0x1a>
 8013994:	6023      	str	r3, [r4, #0]
 8013996:	bd38      	pop	{r3, r4, r5, pc}
 8013998:	20004f2c 	.word	0x20004f2c

0801399c <_malloc_usable_size_r>:
 801399c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80139a0:	1f18      	subs	r0, r3, #4
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	bfbc      	itt	lt
 80139a6:	580b      	ldrlt	r3, [r1, r0]
 80139a8:	18c0      	addlt	r0, r0, r3
 80139aa:	4770      	bx	lr

080139ac <_init>:
 80139ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139ae:	bf00      	nop
 80139b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139b2:	bc08      	pop	{r3}
 80139b4:	469e      	mov	lr, r3
 80139b6:	4770      	bx	lr

080139b8 <_fini>:
 80139b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139ba:	bf00      	nop
 80139bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139be:	bc08      	pop	{r3}
 80139c0:	469e      	mov	lr, r3
 80139c2:	4770      	bx	lr
