
nodo_acelerometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d770  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000958  0800d900  0800d900  0001d900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e258  0800e258  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e258  0800e258  0001e258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e260  0800e260  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e260  0800e260  0001e260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e264  0800e264  0001e264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800e268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003254  200000a8  0800e310  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200032fc  0800e310  000232fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f375  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005dd0  00000000  00000000  0004f44d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000029b8  00000000  00000000  00055220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002770  00000000  00000000  00057bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007e54  00000000  00000000  0005a348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c503  00000000  00000000  0006219c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e17e  00000000  00000000  0008e69f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019c81d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bf20  00000000  00000000  0019c870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d8e8 	.word	0x0800d8e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800d8e8 	.word	0x0800d8e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	2b00      	cmp	r3, #0
 800059a:	d013      	beq.n	80005c4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00b      	beq.n	80005c4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005ac:	e000      	b.n	80005b0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0f9      	beq.n	80005ae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c4:	687b      	ldr	r3, [r7, #4]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f001 fa7a 	bl	8001ad2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f857 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 fa21 	bl	8000a28 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80005e6:	f000 f8b5 	bl	8000754 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80005ea:	f000 f8eb 	bl	80007c4 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80005ee:	f000 f929 	bl	8000844 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80005f2:	f000 f94d 	bl	8000890 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80005f6:	f000 f989 	bl	800090c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80005fa:	f000 f9b7 	bl	800096c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005fe:	f000 f9e5 	bl	80009cc <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  ACCELERO_StatusTypeDef status_acc;
  status_acc = BSP_ACCELERO_Init_INT();
 8000602:	f000 fbe5 	bl	8000dd0 <BSP_ACCELERO_Init_INT>
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
  if(status_acc == ACCELERO_OK){
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d102      	bne.n	8000616 <main+0x42>
	  printf("Inicializado ACCELERO\r\n");
 8000610:	4813      	ldr	r0, [pc, #76]	; (8000660 <main+0x8c>)
 8000612:	f00c f837 	bl	800c684 <puts>
  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000616:	f008 fb09 	bl	8008c2c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Acelero */
  AceleroHandle = osMessageQueueNew (128, sizeof(uint16_t), &Acelero_attributes);
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <main+0x90>)
 800061c:	2102      	movs	r1, #2
 800061e:	2080      	movs	r0, #128	; 0x80
 8000620:	f008 fce0 	bl	8008fe4 <osMessageQueueNew>
 8000624:	4603      	mov	r3, r0
 8000626:	4a10      	ldr	r2, [pc, #64]	; (8000668 <main+0x94>)
 8000628:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sendAccel */
  sendAccelHandle = osThreadNew(sendAccel_func, NULL, &sendAccel_attributes);
 800062a:	4a10      	ldr	r2, [pc, #64]	; (800066c <main+0x98>)
 800062c:	2100      	movs	r1, #0
 800062e:	4810      	ldr	r0, [pc, #64]	; (8000670 <main+0x9c>)
 8000630:	f008 fb5b 	bl	8008cea <osThreadNew>
 8000634:	4603      	mov	r3, r0
 8000636:	4a0f      	ldr	r2, [pc, #60]	; (8000674 <main+0xa0>)
 8000638:	6013      	str	r3, [r2, #0]

  /* creation of readAccel */
  readAccelHandle = osThreadNew(readAccel_func, NULL, &readAccel_attributes);
 800063a:	4a0f      	ldr	r2, [pc, #60]	; (8000678 <main+0xa4>)
 800063c:	2100      	movs	r1, #0
 800063e:	480f      	ldr	r0, [pc, #60]	; (800067c <main+0xa8>)
 8000640:	f008 fb53 	bl	8008cea <osThreadNew>
 8000644:	4603      	mov	r3, r0
 8000646:	4a0e      	ldr	r2, [pc, #56]	; (8000680 <main+0xac>)
 8000648:	6013      	str	r3, [r2, #0]

  /* creation of wifiStartTask */
  wifiStartTaskHandle = osThreadNew(wifiStartTask_function, NULL, &wifiStartTask_attributes);
 800064a:	4a0e      	ldr	r2, [pc, #56]	; (8000684 <main+0xb0>)
 800064c:	2100      	movs	r1, #0
 800064e:	480e      	ldr	r0, [pc, #56]	; (8000688 <main+0xb4>)
 8000650:	f008 fb4b 	bl	8008cea <osThreadNew>
 8000654:	4603      	mov	r3, r0
 8000656:	4a0d      	ldr	r2, [pc, #52]	; (800068c <main+0xb8>)
 8000658:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800065a:	f008 fb0b 	bl	8008c74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065e:	e7fe      	b.n	800065e <main+0x8a>
 8000660:	0800d930 	.word	0x0800d930
 8000664:	0800e0b0 	.word	0x0800e0b0
 8000668:	2000070c 	.word	0x2000070c
 800066c:	0800e044 	.word	0x0800e044
 8000670:	08000fd9 	.word	0x08000fd9
 8000674:	20000700 	.word	0x20000700
 8000678:	0800e068 	.word	0x0800e068
 800067c:	08001085 	.word	0x08001085
 8000680:	20000704 	.word	0x20000704
 8000684:	0800e08c 	.word	0x0800e08c
 8000688:	08001131 	.word	0x08001131
 800068c:	20000708 	.word	0x20000708

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b096      	sub	sp, #88	; 0x58
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	2244      	movs	r2, #68	; 0x44
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f00b fecd 	bl	800c43e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	463b      	mov	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006b6:	f002 feb7 	bl	8003428 <HAL_PWREx_ControlVoltageScaling>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006c0:	f000 fd52 	bl	8001168 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006c4:	f002 fe92 	bl	80033ec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006c8:	4b21      	ldr	r3, [pc, #132]	; (8000750 <SystemClock_Config+0xc0>)
 80006ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006ce:	4a20      	ldr	r2, [pc, #128]	; (8000750 <SystemClock_Config+0xc0>)
 80006d0:	f023 0318 	bic.w	r3, r3, #24
 80006d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006d8:	2314      	movs	r3, #20
 80006da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006e8:	2360      	movs	r3, #96	; 0x60
 80006ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ec:	2302      	movs	r3, #2
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006f0:	2301      	movs	r3, #1
 80006f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f4:	2301      	movs	r3, #1
 80006f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006f8:	2328      	movs	r3, #40	; 0x28
 80006fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006fc:	2307      	movs	r3, #7
 80006fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4618      	mov	r0, r3
 800070e:	f002 ffad 	bl	800366c <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000718:	f000 fd26 	bl	8001168 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2303      	movs	r3, #3
 8000722:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	2104      	movs	r1, #4
 8000734:	4618      	mov	r0, r3
 8000736:	f003 fb81 	bl	8003e3c <HAL_RCC_ClockConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000740:	f000 fd12 	bl	8001168 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000744:	f004 f89c 	bl	8004880 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000748:	bf00      	nop
 800074a:	3758      	adds	r7, #88	; 0x58
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40021000 	.word	0x40021000

08000754 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000758:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_DFSDM1_Init+0x68>)
 800075a:	4a19      	ldr	r2, [pc, #100]	; (80007c0 <MX_DFSDM1_Init+0x6c>)
 800075c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_DFSDM1_Init+0x68>)
 8000760:	2201      	movs	r2, #1
 8000762:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_DFSDM1_Init+0x68>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_DFSDM1_Init+0x68>)
 800076c:	2202      	movs	r2, #2
 800076e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_DFSDM1_Init+0x68>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_DFSDM1_Init+0x68>)
 8000778:	2200      	movs	r2, #0
 800077a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_DFSDM1_Init+0x68>)
 800077e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000782:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000784:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <MX_DFSDM1_Init+0x68>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_DFSDM1_Init+0x68>)
 800078c:	2204      	movs	r2, #4
 800078e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <MX_DFSDM1_Init+0x68>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_DFSDM1_Init+0x68>)
 8000798:	2201      	movs	r2, #1
 800079a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <MX_DFSDM1_Init+0x68>)
 800079e:	2200      	movs	r2, #0
 80007a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_DFSDM1_Init+0x68>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_DFSDM1_Init+0x68>)
 80007aa:	f001 fb03 	bl	8001db4 <HAL_DFSDM_ChannelInit>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80007b4:	f000 fcd8 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200000c4 	.word	0x200000c4
 80007c0:	40016020 	.word	0x40016020

080007c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_I2C2_Init+0x74>)
 80007ca:	4a1c      	ldr	r2, [pc, #112]	; (800083c <MX_I2C2_Init+0x78>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_I2C2_Init+0x74>)
 80007d0:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <MX_I2C2_Init+0x7c>)
 80007d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_I2C2_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_I2C2_Init+0x74>)
 80007dc:	2201      	movs	r2, #1
 80007de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_I2C2_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_I2C2_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_I2C2_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_I2C2_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_I2C2_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007fe:	480e      	ldr	r0, [pc, #56]	; (8000838 <MX_I2C2_Init+0x74>)
 8000800:	f001 ff0c 	bl	800261c <HAL_I2C_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800080a:	f000 fcad 	bl	8001168 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800080e:	2100      	movs	r1, #0
 8000810:	4809      	ldr	r0, [pc, #36]	; (8000838 <MX_I2C2_Init+0x74>)
 8000812:	f002 fc0b 	bl	800302c <HAL_I2CEx_ConfigAnalogFilter>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800081c:	f000 fca4 	bl	8001168 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000820:	2100      	movs	r1, #0
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_I2C2_Init+0x74>)
 8000824:	f002 fc4d 	bl	80030c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800082e:	f000 fc9b 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200000fc 	.word	0x200000fc
 800083c:	40005800 	.word	0x40005800
 8000840:	10909cec 	.word	0x10909cec

08000844 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_QUADSPI_Init+0x44>)
 800084a:	4a10      	ldr	r2, [pc, #64]	; (800088c <MX_QUADSPI_Init+0x48>)
 800084c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_QUADSPI_Init+0x44>)
 8000850:	2202      	movs	r2, #2
 8000852:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_QUADSPI_Init+0x44>)
 8000856:	2204      	movs	r2, #4
 8000858:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_QUADSPI_Init+0x44>)
 800085c:	2210      	movs	r2, #16
 800085e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_QUADSPI_Init+0x44>)
 8000862:	2217      	movs	r2, #23
 8000864:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_QUADSPI_Init+0x44>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_QUADSPI_Init+0x44>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_QUADSPI_Init+0x44>)
 8000874:	f002 fe3e 	bl	80034f4 <HAL_QSPI_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800087e:	f000 fc73 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000148 	.word	0x20000148
 800088c:	a0001000 	.word	0xa0001000

08000890 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_SPI3_Init+0x74>)
 8000896:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <MX_SPI3_Init+0x78>)
 8000898:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_SPI3_Init+0x74>)
 800089c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_SPI3_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_SPI3_Init+0x74>)
 80008aa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008ae:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_SPI3_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_SPI3_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_SPI3_Init+0x74>)
 80008be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_SPI3_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_SPI3_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_SPI3_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_SPI3_Init+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_SPI3_Init+0x74>)
 80008de:	2207      	movs	r2, #7
 80008e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_SPI3_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_SPI3_Init+0x74>)
 80008ea:	2208      	movs	r2, #8
 80008ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_SPI3_Init+0x74>)
 80008f0:	f004 f9a8 	bl	8004c44 <HAL_SPI_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008fa:	f000 fc35 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	2000018c 	.word	0x2000018c
 8000908:	40003c00 	.word	0x40003c00

0800090c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_USART1_UART_Init+0x58>)
 8000912:	4a15      	ldr	r2, [pc, #84]	; (8000968 <MX_USART1_UART_Init+0x5c>)
 8000914:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <MX_USART1_UART_Init+0x58>)
 8000918:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800091c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_USART1_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_USART1_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_USART1_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_USART1_UART_Init+0x58>)
 8000932:	220c      	movs	r2, #12
 8000934:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_USART1_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_USART1_UART_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_USART1_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_USART1_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_USART1_UART_Init+0x58>)
 8000950:	f005 ff76 	bl	8006840 <HAL_UART_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800095a:	f000 fc05 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200001f0 	.word	0x200001f0
 8000968:	40013800 	.word	0x40013800

0800096c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_USART3_UART_Init+0x58>)
 8000972:	4a15      	ldr	r2, [pc, #84]	; (80009c8 <MX_USART3_UART_Init+0x5c>)
 8000974:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_USART3_UART_Init+0x58>)
 8000978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800097c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_USART3_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_USART3_UART_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_USART3_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_USART3_UART_Init+0x58>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_USART3_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_USART3_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_USART3_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_USART3_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_USART3_UART_Init+0x58>)
 80009b0:	f005 ff46 	bl	8006840 <HAL_UART_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009ba:	f000 fbd5 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000274 	.word	0x20000274
 80009c8:	40004800 	.word	0x40004800

080009cc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009da:	2206      	movs	r2, #6
 80009dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e0:	2202      	movs	r2, #2
 80009e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e6:	2202      	movs	r2, #2
 80009e8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a10:	f002 fba3 	bl	800315a <HAL_PCD_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a1a:	f000 fba5 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200002f8 	.word	0x200002f8

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a3e:	4bba      	ldr	r3, [pc, #744]	; (8000d28 <MX_GPIO_Init+0x300>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	4ab9      	ldr	r2, [pc, #740]	; (8000d28 <MX_GPIO_Init+0x300>)
 8000a44:	f043 0310 	orr.w	r3, r3, #16
 8000a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4a:	4bb7      	ldr	r3, [pc, #732]	; (8000d28 <MX_GPIO_Init+0x300>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	f003 0310 	and.w	r3, r3, #16
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a56:	4bb4      	ldr	r3, [pc, #720]	; (8000d28 <MX_GPIO_Init+0x300>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	4ab3      	ldr	r2, [pc, #716]	; (8000d28 <MX_GPIO_Init+0x300>)
 8000a5c:	f043 0304 	orr.w	r3, r3, #4
 8000a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a62:	4bb1      	ldr	r3, [pc, #708]	; (8000d28 <MX_GPIO_Init+0x300>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	f003 0304 	and.w	r3, r3, #4
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	4bae      	ldr	r3, [pc, #696]	; (8000d28 <MX_GPIO_Init+0x300>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	4aad      	ldr	r2, [pc, #692]	; (8000d28 <MX_GPIO_Init+0x300>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7a:	4bab      	ldr	r3, [pc, #684]	; (8000d28 <MX_GPIO_Init+0x300>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a86:	4ba8      	ldr	r3, [pc, #672]	; (8000d28 <MX_GPIO_Init+0x300>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	4aa7      	ldr	r2, [pc, #668]	; (8000d28 <MX_GPIO_Init+0x300>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a92:	4ba5      	ldr	r3, [pc, #660]	; (8000d28 <MX_GPIO_Init+0x300>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9e:	4ba2      	ldr	r3, [pc, #648]	; (8000d28 <MX_GPIO_Init+0x300>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	4aa1      	ldr	r2, [pc, #644]	; (8000d28 <MX_GPIO_Init+0x300>)
 8000aa4:	f043 0308 	orr.w	r3, r3, #8
 8000aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aaa:	4b9f      	ldr	r3, [pc, #636]	; (8000d28 <MX_GPIO_Init+0x300>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	f003 0308 	and.w	r3, r3, #8
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000abc:	489b      	ldr	r0, [pc, #620]	; (8000d2c <MX_GPIO_Init+0x304>)
 8000abe:	f001 fd7d 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f248 1104 	movw	r1, #33028	; 0x8104
 8000ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000acc:	f001 fd76 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000ad6:	4896      	ldr	r0, [pc, #600]	; (8000d30 <MX_GPIO_Init+0x308>)
 8000ad8:	f001 fd70 	bl	80025bc <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f241 0181 	movw	r1, #4225	; 0x1081
 8000ae2:	4894      	ldr	r0, [pc, #592]	; (8000d34 <MX_GPIO_Init+0x30c>)
 8000ae4:	f001 fd6a 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aee:	4891      	ldr	r0, [pc, #580]	; (8000d34 <MX_GPIO_Init+0x30c>)
 8000af0:	f001 fd64 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000afa:	488f      	ldr	r0, [pc, #572]	; (8000d38 <MX_GPIO_Init+0x310>)
 8000afc:	f001 fd5e 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2120      	movs	r1, #32
 8000b04:	488a      	ldr	r0, [pc, #552]	; (8000d30 <MX_GPIO_Init+0x308>)
 8000b06:	f001 fd59 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	4887      	ldr	r0, [pc, #540]	; (8000d2c <MX_GPIO_Init+0x304>)
 8000b10:	f001 fd54 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000b14:	f240 1315 	movw	r3, #277	; 0x115
 8000b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	487f      	ldr	r0, [pc, #508]	; (8000d2c <MX_GPIO_Init+0x304>)
 8000b2e:	f001 fa8f 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000b32:	236a      	movs	r3, #106	; 0x6a
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b36:	4b81      	ldr	r3, [pc, #516]	; (8000d3c <MX_GPIO_Init+0x314>)
 8000b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4879      	ldr	r0, [pc, #484]	; (8000d2c <MX_GPIO_Init+0x304>)
 8000b46:	f001 fa83 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOTON_Pin */
  GPIO_InitStruct.Pin = BOTON_Pin;
 8000b4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b50:	4b7b      	ldr	r3, [pc, #492]	; (8000d40 <MX_GPIO_Init+0x318>)
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOTON_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4876      	ldr	r0, [pc, #472]	; (8000d38 <MX_GPIO_Init+0x310>)
 8000b60:	f001 fa76 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000b64:	233f      	movs	r3, #63	; 0x3f
 8000b66:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b68:	230b      	movs	r3, #11
 8000b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	4870      	ldr	r0, [pc, #448]	; (8000d38 <MX_GPIO_Init+0x310>)
 8000b78:	f001 fa6a 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b8c:	2308      	movs	r3, #8
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9a:	f001 fa59 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000b9e:	f248 1304 	movw	r3, #33028	; 0x8104
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bba:	f001 fa49 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000bbe:	2308      	movs	r3, #8
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bdc:	f001 fa38 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000be0:	2310      	movs	r3, #16
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000be4:	230b      	movs	r3, #11
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf6:	f001 fa2b 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000bfa:	23e0      	movs	r3, #224	; 0xe0
 8000bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c0a:	2305      	movs	r3, #5
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c18:	f001 fa1a 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c20:	4b46      	ldr	r3, [pc, #280]	; (8000d3c <MX_GPIO_Init+0x314>)
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4840      	ldr	r0, [pc, #256]	; (8000d30 <MX_GPIO_Init+0x308>)
 8000c30:	f001 fa0e 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000c34:	2302      	movs	r3, #2
 8000c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c38:	230b      	movs	r3, #11
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	483a      	ldr	r0, [pc, #232]	; (8000d30 <MX_GPIO_Init+0x308>)
 8000c48:	f001 fa02 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000c4c:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000c50:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4832      	ldr	r0, [pc, #200]	; (8000d30 <MX_GPIO_Init+0x308>)
 8000c66:	f001 f9f3 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000c6a:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000c6e:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c70:	4b32      	ldr	r3, [pc, #200]	; (8000d3c <MX_GPIO_Init+0x314>)
 8000c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	482d      	ldr	r0, [pc, #180]	; (8000d34 <MX_GPIO_Init+0x30c>)
 8000c80:	f001 f9e6 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000c84:	f243 0381 	movw	r3, #12417	; 0x3081
 8000c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4825      	ldr	r0, [pc, #148]	; (8000d34 <MX_GPIO_Init+0x30c>)
 8000c9e:	f001 f9d7 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000ca2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4619      	mov	r1, r3
 8000cba:	481f      	ldr	r0, [pc, #124]	; (8000d38 <MX_GPIO_Init+0x310>)
 8000cbc:	f001 f9c8 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000cc0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <MX_GPIO_Init+0x314>)
 8000cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4818      	ldr	r0, [pc, #96]	; (8000d38 <MX_GPIO_Init+0x310>)
 8000cd6:	f001 f9bb 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cea:	2305      	movs	r3, #5
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480f      	ldr	r0, [pc, #60]	; (8000d34 <MX_GPIO_Init+0x30c>)
 8000cf6:	f001 f9ab 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000cfa:	2378      	movs	r3, #120	; 0x78
 8000cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d0a:	2307      	movs	r3, #7
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	4807      	ldr	r0, [pc, #28]	; (8000d34 <MX_GPIO_Init+0x30c>)
 8000d16:	f001 f99b 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000d1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d20:	2312      	movs	r3, #18
 8000d22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	e00d      	b.n	8000d44 <MX_GPIO_Init+0x31c>
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	48001000 	.word	0x48001000
 8000d30:	48000400 	.word	0x48000400
 8000d34:	48000c00 	.word	0x48000c00
 8000d38:	48000800 	.word	0x48000800
 8000d3c:	10110000 	.word	0x10110000
 8000d40:	10210000 	.word	0x10210000
 8000d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	480f      	ldr	r0, [pc, #60]	; (8000d94 <MX_GPIO_Init+0x36c>)
 8000d56:	f001 f97b 	bl	8002050 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2105      	movs	r1, #5
 8000d5e:	2007      	movs	r0, #7
 8000d60:	f000 fff0 	bl	8001d44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000d64:	2007      	movs	r0, #7
 8000d66:	f001 f809 	bl	8001d7c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2105      	movs	r1, #5
 8000d6e:	2017      	movs	r0, #23
 8000d70:	f000 ffe8 	bl	8001d44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d74:	2017      	movs	r0, #23
 8000d76:	f001 f801 	bl	8001d7c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2105      	movs	r1, #5
 8000d7e:	2028      	movs	r0, #40	; 0x28
 8000d80:	f000 ffe0 	bl	8001d44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d84:	2028      	movs	r0, #40	; 0x28
 8000d86:	f000 fff9 	bl	8001d7c <HAL_NVIC_EnableIRQ>

}
 8000d8a:	bf00      	nop
 8000d8c:	3728      	adds	r7, #40	; 0x28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	48000400 	.word	0x48000400

08000d98 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
int DataIdx;
for(DataIdx=0; DataIdx<len; DataIdx++)
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	e009      	b.n	8000dbe <_write+0x26>
{
ITM_SendChar(*ptr++);
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	1c5a      	adds	r2, r3, #1
 8000dae:	60ba      	str	r2, [r7, #8]
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fbe6 	bl	8000584 <ITM_SendChar>
for(DataIdx=0; DataIdx<len; DataIdx++)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbf1      	blt.n	8000daa <_write+0x12>
}
return len;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <BSP_ACCELERO_Init_INT>:


ACCELERO_StatusTypeDef BSP_ACCELERO_Init_INT(void){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
ACCELERO_StatusTypeDef ret;
ret = BSP_ACCELERO_Init();
 8000dd6:	f006 fd5b 	bl	8007890 <BSP_ACCELERO_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
if (ret == ACCELERO_OK)
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d12f      	bne.n	8000e44 <BSP_ACCELERO_Init_INT+0x74>
{
/* Initialize interruption*/
uint8_t tmp;
tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G);
 8000de4:	210b      	movs	r1, #11
 8000de6:	20d4      	movs	r0, #212	; 0xd4
 8000de8:	f006 fd16 	bl	8007818 <SENSOR_IO_Read>
 8000dec:	4603      	mov	r3, r0
 8000dee:	71bb      	strb	r3, [r7, #6]
tmp |=0b10000000;
 8000df0:	79bb      	ldrb	r3, [r7, #6]
 8000df2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000df6:	71bb      	strb	r3, [r7, #6]
SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G, tmp);
 8000df8:	79bb      	ldrb	r3, [r7, #6]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	210b      	movs	r1, #11
 8000dfe:	20d4      	movs	r0, #212	; 0xd4
 8000e00:	f006 fcf0 	bl	80077e4 <SENSOR_IO_Write>
tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL);
 8000e04:	210d      	movs	r1, #13
 8000e06:	20d4      	movs	r0, #212	; 0xd4
 8000e08:	f006 fd06 	bl	8007818 <SENSOR_IO_Read>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	71bb      	strb	r3, [r7, #6]
tmp |=0b00000001;
 8000e10:	79bb      	ldrb	r3, [r7, #6]
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	71bb      	strb	r3, [r7, #6]
SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, tmp);
 8000e18:	79bb      	ldrb	r3, [r7, #6]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	210d      	movs	r1, #13
 8000e1e:	20d4      	movs	r0, #212	; 0xd4
 8000e20:	f006 fce0 	bl	80077e4 <SENSOR_IO_Write>
tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG);
 8000e24:	211a      	movs	r1, #26
 8000e26:	20d4      	movs	r0, #212	; 0xd4
 8000e28:	f006 fcf6 	bl	8007818 <SENSOR_IO_Read>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	71bb      	strb	r3, [r7, #6]
tmp |=0b10000000;
 8000e30:	79bb      	ldrb	r3, [r7, #6]
 8000e32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e36:	71bb      	strb	r3, [r7, #6]
SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG, tmp);
 8000e38:	79bb      	ldrb	r3, [r7, #6]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	211a      	movs	r1, #26
 8000e3e:	20d4      	movs	r0, #212	; 0xd4
 8000e40:	f006 fcd0 	bl	80077e4 <SENSOR_IO_Write>
}
return ret;
 8000e44:	79fb      	ldrb	r3, [r7, #7]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LSM6DSL_INT1_EXTI11_Pin)
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e60:	d105      	bne.n	8000e6e <HAL_GPIO_EXTI_Callback+0x1e>
	{
		/* Aquí escribiremos nuestra funcionalidad*/
		osThreadFlagsSet(sendAccelHandle, 0x00000001U);
 8000e62:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <HAL_GPIO_EXTI_Callback+0x48>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2101      	movs	r1, #1
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f007 ffd1 	bl	8008e10 <osThreadFlagsSet>
	}
	if (GPIO_Pin == BOTON_Pin){
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e74:	d105      	bne.n	8000e82 <HAL_GPIO_EXTI_Callback+0x32>
		/* Aquí escribiremos nuestra funcionalidad*/
		osThreadFlagsSet(readAccelHandle, 0x00000001U);
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f007 ffc7 	bl	8008e10 <osThreadFlagsSet>
	}

	switch (GPIO_Pin)
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d102      	bne.n	8000e8e <HAL_GPIO_EXTI_Callback+0x3e>
	  {
	    case (GPIO_PIN_1):
	    {
	      SPI_WIFI_ISR();
 8000e88:	f007 fdfc 	bl	8008a84 <SPI_WIFI_ISR>
	      break;
 8000e8c:	e000      	b.n	8000e90 <HAL_GPIO_EXTI_Callback+0x40>
	    }
	    default:
	    {
	      break;
 8000e8e:	bf00      	nop
	    }
	  }

}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000700 	.word	0x20000700
 8000e9c:	20000704 	.word	0x20000704

08000ea0 <wifi_start>:

static int wifi_start(void)
{
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];
  printf("wifistart\r\n");
 8000ea6:	481d      	ldr	r0, [pc, #116]	; (8000f1c <wifi_start+0x7c>)
 8000ea8:	f00b fbec 	bl	800c684 <puts>
 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 8000eac:	f007 fdfa 	bl	8008aa4 <WIFI_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d129      	bne.n	8000f0a <wifi_start+0x6a>
  {
	printf("xddddddd\r\n");
 8000eb6:	481a      	ldr	r0, [pc, #104]	; (8000f20 <wifi_start+0x80>)
 8000eb8:	f00b fbe4 	bl	800c684 <puts>
    printf(("ES-WIFI Initialized.\r\n"));
 8000ebc:	4819      	ldr	r0, [pc, #100]	; (8000f24 <wifi_start+0x84>)
 8000ebe:	f00b fbe1 	bl	800c684 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f007 fe3b 	bl	8008b40 <WIFI_GetMAC_Address>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d116      	bne.n	8000efe <wifi_start+0x5e>
    {
      printf("MAC asignada\r\n");
 8000ed0:	4815      	ldr	r0, [pc, #84]	; (8000f28 <wifi_start+0x88>)
 8000ed2:	f00b fbd7 	bl	800c684 <puts>
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
               MAC_Addr[0],
 8000ed6:	783b      	ldrb	r3, [r7, #0]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8000ed8:	4618      	mov	r0, r3
               MAC_Addr[1],
 8000eda:	787b      	ldrb	r3, [r7, #1]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8000edc:	461c      	mov	r4, r3
               MAC_Addr[2],
 8000ede:	78bb      	ldrb	r3, [r7, #2]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8000ee0:	461d      	mov	r5, r3
               MAC_Addr[3],
 8000ee2:	78fb      	ldrb	r3, [r7, #3]
               MAC_Addr[4],
 8000ee4:	793a      	ldrb	r2, [r7, #4]
               MAC_Addr[5]);
 8000ee6:	7979      	ldrb	r1, [r7, #5]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8000ee8:	9102      	str	r1, [sp, #8]
 8000eea:	9201      	str	r2, [sp, #4]
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	462b      	mov	r3, r5
 8000ef0:	4622      	mov	r2, r4
 8000ef2:	4601      	mov	r1, r0
 8000ef4:	480d      	ldr	r0, [pc, #52]	; (8000f2c <wifi_start+0x8c>)
 8000ef6:	f00b fb3f 	bl	800c578 <iprintf>
  else
  {
	printf("Errorfifi\r\n");
    return -1;
  }
  return 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e00a      	b.n	8000f14 <wifi_start+0x74>
      printf("> ERROR : CANNOT get MAC address\r\n");
 8000efe:	480c      	ldr	r0, [pc, #48]	; (8000f30 <wifi_start+0x90>)
 8000f00:	f00b fbc0 	bl	800c684 <puts>
      return -1;
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295
 8000f08:	e004      	b.n	8000f14 <wifi_start+0x74>
	printf("Errorfifi\r\n");
 8000f0a:	480a      	ldr	r0, [pc, #40]	; (8000f34 <wifi_start+0x94>)
 8000f0c:	f00b fbba 	bl	800c684 <puts>
    return -1;
 8000f10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f1c:	0800d948 	.word	0x0800d948
 8000f20:	0800d954 	.word	0x0800d954
 8000f24:	0800d960 	.word	0x0800d960
 8000f28:	0800d978 	.word	0x0800d978
 8000f2c:	0800d988 	.word	0x0800d988
 8000f30:	0800d9c8 	.word	0x0800d9c8
 8000f34:	0800d9ec 	.word	0x0800d9ec

08000f38 <wifi_connect>:

int wifi_connect(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af02      	add	r7, sp, #8

  wifi_start();
 8000f3e:	f7ff ffaf 	bl	8000ea0 <wifi_start>

  printf("Connecting to %s\r\n",SSID);
 8000f42:	4919      	ldr	r1, [pc, #100]	; (8000fa8 <wifi_connect+0x70>)
 8000f44:	4819      	ldr	r0, [pc, #100]	; (8000fac <wifi_connect+0x74>)
 8000f46:	f00b fb17 	bl	800c578 <iprintf>
  if( WIFI_Connect(SSID, PASSWORD, WIFISECURITY) == WIFI_STATUS_OK)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	4918      	ldr	r1, [pc, #96]	; (8000fb0 <wifi_connect+0x78>)
 8000f4e:	4816      	ldr	r0, [pc, #88]	; (8000fa8 <wifi_connect+0x70>)
 8000f50:	f007 fdd4 	bl	8008afc <WIFI_Connect>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d11d      	bne.n	8000f96 <wifi_connect+0x5e>
  {
    if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8000f5a:	4816      	ldr	r0, [pc, #88]	; (8000fb4 <wifi_connect+0x7c>)
 8000f5c:	f007 fe06 	bl	8008b6c <WIFI_GetIP_Address>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d111      	bne.n	8000f8a <wifi_connect+0x52>
    {
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
               IP_Addr[0],
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <wifi_connect+0x7c>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 8000f6a:	4619      	mov	r1, r3
               IP_Addr[1],
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <wifi_connect+0x7c>)
 8000f6e:	785b      	ldrb	r3, [r3, #1]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 8000f70:	461a      	mov	r2, r3
               IP_Addr[2],
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <wifi_connect+0x7c>)
 8000f74:	789b      	ldrb	r3, [r3, #2]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 8000f76:	4618      	mov	r0, r3
               IP_Addr[3]);
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <wifi_connect+0x7c>)
 8000f7a:	78db      	ldrb	r3, [r3, #3]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	4603      	mov	r3, r0
 8000f80:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <wifi_connect+0x80>)
 8000f82:	f00b faf9 	bl	800c578 <iprintf>
  else
  {
		 printf("ERROR : es-wifi module NOT connected\n");
     return -1;
  }
  return 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e00a      	b.n	8000fa0 <wifi_connect+0x68>
		  printf(" ERROR : es-wifi module CANNOT get IP address\r\n");
 8000f8a:	480c      	ldr	r0, [pc, #48]	; (8000fbc <wifi_connect+0x84>)
 8000f8c:	f00b fb7a 	bl	800c684 <puts>
      return -1;
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295
 8000f94:	e004      	b.n	8000fa0 <wifi_connect+0x68>
		 printf("ERROR : es-wifi module NOT connected\n");
 8000f96:	480a      	ldr	r0, [pc, #40]	; (8000fc0 <wifi_connect+0x88>)
 8000f98:	f00b fb74 	bl	800c684 <puts>
     return -1;
 8000f9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	0800d9f8 	.word	0x0800d9f8
 8000fac:	0800da08 	.word	0x0800da08
 8000fb0:	0800da1c 	.word	0x0800da1c
 8000fb4:	20000710 	.word	0x20000710
 8000fb8:	0800da28 	.word	0x0800da28
 8000fbc:	0800da64 	.word	0x0800da64
 8000fc0:	0800da94 	.word	0x0800da94

08000fc4 <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <SPI3_IRQHandler+0x10>)
 8000fca:	f004 fc37 	bl	800583c <HAL_SPI_IRQHandler>
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200007e0 	.word	0x200007e0

08000fd8 <sendAccel_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendAccel_func */
void sendAccel_func(void *argument)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int16_t DataXYZ[3];
	int16_t *pDataXYZ = DataXYZ;
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	61fb      	str	r3, [r7, #28]
	uint32_t tick;
	uint32_t espacio_cola;
  /* Infinite loop */
	for(;;)
	{
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8000fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8000fea:	2100      	movs	r1, #0
 8000fec:	2001      	movs	r0, #1
 8000fee:	f007 ff5d 	bl	8008eac <osThreadFlagsWait>
		BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8000ff2:	69f8      	ldr	r0, [r7, #28]
 8000ff4:	f006 fc8a 	bl	800790c <BSP_ACCELERO_AccGetXYZ>
		tick = osKernelGetTickCount();
 8000ff8:	f007 fe62 	bl	8008cc0 <osKernelGetTickCount>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	60fb      	str	r3, [r7, #12]
		//printf("Tick: %ld Eje x: %d Eje y: %d Eje z: %d \r\n", tick, DataXYZ[0], DataXYZ[1], DataXYZ[2]);
		//printf("Recogida datos\r\n");
		espacio_cola=osMessageQueueGetSpace(AceleroHandle);
 8001000:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <sendAccel_func+0x98>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f008 f91f 	bl	8009248 <osMessageQueueGetSpace>
 800100a:	61b8      	str	r0, [r7, #24]
		//if(espacio_cola!=0){
		printf("Espacio en la cola: %d\r\n",espacio_cola);
 800100c:	69b9      	ldr	r1, [r7, #24]
 800100e:	4819      	ldr	r0, [pc, #100]	; (8001074 <sendAccel_func+0x9c>)
 8001010:	f00b fab2 	bl	800c578 <iprintf>
		//}
		if (espacio_cola != 0){
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0e5      	beq.n	8000fe6 <sendAccel_func+0xe>
			osMessageQueuePut(AceleroHandle,&DataXYZ[2],0,pdMS_TO_TICKS(10));
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <sendAccel_func+0x98>)
 800101c:	6818      	ldr	r0, [r3, #0]
 800101e:	f107 0310 	add.w	r3, r7, #16
 8001022:	1d19      	adds	r1, r3, #4
 8001024:	230a      	movs	r3, #10
 8001026:	2200      	movs	r2, #0
 8001028:	f008 f850 	bl	80090cc <osMessageQueuePut>
			osMessageQueuePut(AceleroHandle,&tick,0,pdMS_TO_TICKS(10));
 800102c:	4b10      	ldr	r3, [pc, #64]	; (8001070 <sendAccel_func+0x98>)
 800102e:	6818      	ldr	r0, [r3, #0]
 8001030:	f107 010c 	add.w	r1, r7, #12
 8001034:	230a      	movs	r3, #10
 8001036:	2200      	movs	r2, #0
 8001038:	f008 f848 	bl	80090cc <osMessageQueuePut>
			printf("Tick: %ld Eje x: %d Eje y: %d Eje z: %d \r\n", tick, DataXYZ[0], DataXYZ[1], DataXYZ[2]);
 800103c:	68f9      	ldr	r1, [r7, #12]
 800103e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001042:	461a      	mov	r2, r3
 8001044:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001048:	4618      	mov	r0, r3
 800104a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	4603      	mov	r3, r0
 8001052:	4809      	ldr	r0, [pc, #36]	; (8001078 <sendAccel_func+0xa0>)
 8001054:	f00b fa90 	bl	800c578 <iprintf>
			printf("Se ha metido un dato de: %d\r\n",DataXYZ[2]);
 8001058:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800105c:	4619      	mov	r1, r3
 800105e:	4807      	ldr	r0, [pc, #28]	; (800107c <sendAccel_func+0xa4>)
 8001060:	f00b fa8a 	bl	800c578 <iprintf>
			printf("Se ha metido un tick de: %d\r\n",tick);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4619      	mov	r1, r3
 8001068:	4805      	ldr	r0, [pc, #20]	; (8001080 <sendAccel_func+0xa8>)
 800106a:	f00b fa85 	bl	800c578 <iprintf>
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 800106e:	e7ba      	b.n	8000fe6 <sendAccel_func+0xe>
 8001070:	2000070c 	.word	0x2000070c
 8001074:	0800dabc 	.word	0x0800dabc
 8001078:	0800dad8 	.word	0x0800dad8
 800107c:	0800db04 	.word	0x0800db04
 8001080:	0800db24 	.word	0x0800db24

08001084 <readAccel_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readAccel_func */
void readAccel_func(void *argument)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b0c6      	sub	sp, #280	; 0x118
 8001088:	af00      	add	r7, sp, #0
 800108a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800108e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001092:	6018      	str	r0, [r3, #0]
	uint16_t dato_cola;
	uint16_t datos_cola[128];
	/* Infinite loop */
	for(;;)
	{
		read_estado_flag=osThreadFlagsWait(0x00000001U, osFlagsWaitAny, pdMS_TO_TICKS(7000)); //Cada diez segundos
 8001094:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001098:	2100      	movs	r1, #0
 800109a:	2001      	movs	r0, #1
 800109c:	f007 ff06 	bl	8008eac <osThreadFlagsWait>
 80010a0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
		//Cojo los datos:
		if(read_estado_flag == 0x00000001U){
 80010a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d103      	bne.n	80010b4 <readAccel_func+0x30>
			printf("Le he dado al boton\r\n");
 80010ac:	481d      	ldr	r0, [pc, #116]	; (8001124 <readAccel_func+0xa0>)
 80010ae:	f00b fae9 	bl	800c684 <puts>
 80010b2:	e007      	b.n	80010c4 <readAccel_func+0x40>
		}
		else if(read_estado_flag == osErrorTimeout){
 80010b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80010b8:	f113 0f02 	cmn.w	r3, #2
 80010bc:	d102      	bne.n	80010c4 <readAccel_func+0x40>
			printf("Ha saltado el timeout\r\n");
 80010be:	481a      	ldr	r0, [pc, #104]	; (8001128 <readAccel_func+0xa4>)
 80010c0:	f00b fae0 	bl	800c684 <puts>
		}
		if(osMessageQueueGetSpace(AceleroHandle)==0){
 80010c4:	4b19      	ldr	r3, [pc, #100]	; (800112c <readAccel_func+0xa8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f008 f8bd 	bl	8009248 <osMessageQueueGetSpace>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d120      	bne.n	8001116 <readAccel_func+0x92>
			for(int i=0; i<128; i++){
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80010da:	e017      	b.n	800110c <readAccel_func+0x88>
				osMessageQueueGet(AceleroHandle, dato_cola, NULL, pdMS_TO_TICKS(10));
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <readAccel_func+0xa8>)
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80010e4:	4619      	mov	r1, r3
 80010e6:	230a      	movs	r3, #10
 80010e8:	2200      	movs	r2, #0
 80010ea:	f008 f84f 	bl	800918c <osMessageQueueGet>
				datos_cola[i]=dato_cola;
 80010ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80010f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010f6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80010fa:	f8b7 110e 	ldrh.w	r1, [r7, #270]	; 0x10e
 80010fe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for(int i=0; i<128; i++){
 8001102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001106:	3301      	adds	r3, #1
 8001108:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800110c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001110:	2b7f      	cmp	r3, #127	; 0x7f
 8001112:	dde3      	ble.n	80010dc <readAccel_func+0x58>
 8001114:	e7be      	b.n	8001094 <readAccel_func+0x10>
				//contador_cola = osMessageQueueGetCount(AceleroHandle);
			}
		}
		else{
			osMessageQueueReset(AceleroHandle);
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <readAccel_func+0xa8>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f008 f8c9 	bl	80092b2 <osMessageQueueReset>
		read_estado_flag=osThreadFlagsWait(0x00000001U, osFlagsWaitAny, pdMS_TO_TICKS(7000)); //Cada diez segundos
 8001120:	e7b8      	b.n	8001094 <readAccel_func+0x10>
 8001122:	bf00      	nop
 8001124:	0800db44 	.word	0x0800db44
 8001128:	0800db5c 	.word	0x0800db5c
 800112c:	2000070c 	.word	0x2000070c

08001130 <wifiStartTask_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_wifiStartTask_function */
void wifiStartTask_function(void *argument)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN wifiStartTask_function */
  /* Infinite loop */
  wifi_connect();
 8001138:	f7ff fefe 	bl	8000f38 <wifi_connect>
  for(;;)
  {
    osDelay(1);
 800113c:	2001      	movs	r0, #1
 800113e:	f007 ff36 	bl	8008fae <osDelay>
 8001142:	e7fb      	b.n	800113c <wifiStartTask_function+0xc>

08001144 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a04      	ldr	r2, [pc, #16]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d101      	bne.n	800115a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001156:	f000 fcd5 	bl	8001b04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40001000 	.word	0x40001000

08001168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800116c:	b672      	cpsid	i
}
 800116e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001170:	e7fe      	b.n	8001170 <Error_Handler+0x8>
	...

08001174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_MspInit+0x4c>)
 800117c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117e:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <HAL_MspInit+0x4c>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6613      	str	r3, [r2, #96]	; 0x60
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_MspInit+0x4c>)
 8001188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <HAL_MspInit+0x4c>)
 8001194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <HAL_MspInit+0x4c>)
 8001198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119c:	6593      	str	r3, [r2, #88]	; 0x58
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HAL_MspInit+0x4c>)
 80011a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	210f      	movs	r1, #15
 80011ae:	f06f 0001 	mvn.w	r0, #1
 80011b2:	f000 fdc7 	bl	8001d44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000

080011c4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b0ac      	sub	sp, #176	; 0xb0
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2288      	movs	r2, #136	; 0x88
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f00b f92a 	bl	800c43e <memset>
  if(DFSDM1_Init == 0)
 80011ea:	4b25      	ldr	r3, [pc, #148]	; (8001280 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d142      	bne.n	8001278 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80011f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4618      	mov	r0, r3
 8001204:	f003 f852 	bl	80042ac <HAL_RCCEx_PeriphCLKConfig>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800120e:	f7ff ffab 	bl	8001168 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001216:	4a1b      	ldr	r2, [pc, #108]	; (8001284 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001218:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800121c:	6613      	str	r3, [r2, #96]	; 0x60
 800121e:	4b19      	ldr	r3, [pc, #100]	; (8001284 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001222:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800122a:	4b16      	ldr	r3, [pc, #88]	; (8001284 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	4a15      	ldr	r2, [pc, #84]	; (8001284 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001230:	f043 0310 	orr.w	r3, r3, #16
 8001234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	f003 0310 	and.w	r3, r3, #16
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001242:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001246:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800125c:	2306      	movs	r3, #6
 800125e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001262:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001266:	4619      	mov	r1, r3
 8001268:	4807      	ldr	r0, [pc, #28]	; (8001288 <HAL_DFSDM_ChannelMspInit+0xc4>)
 800126a:	f000 fef1 	bl	8002050 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800126e:	4b04      	ldr	r3, [pc, #16]	; (8001280 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	3301      	adds	r3, #1
 8001274:	4a02      	ldr	r2, [pc, #8]	; (8001280 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001276:	6013      	str	r3, [r2, #0]
  }

}
 8001278:	bf00      	nop
 800127a:	37b0      	adds	r7, #176	; 0xb0
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000714 	.word	0x20000714
 8001284:	40021000 	.word	0x40021000
 8001288:	48001000 	.word	0x48001000

0800128c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b0ac      	sub	sp, #176	; 0xb0
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2288      	movs	r2, #136	; 0x88
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f00b f8c6 	bl	800c43e <memset>
  if(hi2c->Instance==I2C2)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a21      	ldr	r2, [pc, #132]	; (800133c <HAL_I2C_MspInit+0xb0>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d13b      	bne.n	8001334 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4618      	mov	r0, r3
 80012ca:	f002 ffef 	bl	80042ac <HAL_RCCEx_PeriphCLKConfig>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012d4:	f7ff ff48 	bl	8001168 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <HAL_I2C_MspInit+0xb4>)
 80012da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012dc:	4a18      	ldr	r2, [pc, #96]	; (8001340 <HAL_I2C_MspInit+0xb4>)
 80012de:	f043 0302 	orr.w	r3, r3, #2
 80012e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e4:	4b16      	ldr	r3, [pc, #88]	; (8001340 <HAL_I2C_MspInit+0xb4>)
 80012e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80012f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f8:	2312      	movs	r3, #18
 80012fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fe:	2301      	movs	r3, #1
 8001300:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800130a:	2304      	movs	r3, #4
 800130c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001314:	4619      	mov	r1, r3
 8001316:	480b      	ldr	r0, [pc, #44]	; (8001344 <HAL_I2C_MspInit+0xb8>)
 8001318:	f000 fe9a 	bl	8002050 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <HAL_I2C_MspInit+0xb4>)
 800131e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001320:	4a07      	ldr	r2, [pc, #28]	; (8001340 <HAL_I2C_MspInit+0xb4>)
 8001322:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001326:	6593      	str	r3, [r2, #88]	; 0x58
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <HAL_I2C_MspInit+0xb4>)
 800132a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001334:	bf00      	nop
 8001336:	37b0      	adds	r7, #176	; 0xb0
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40005800 	.word	0x40005800
 8001340:	40021000 	.word	0x40021000
 8001344:	48000400 	.word	0x48000400

08001348 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <HAL_I2C_MspDeInit+0x3c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d10f      	bne.n	800137a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <HAL_I2C_MspDeInit+0x40>)
 800135c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <HAL_I2C_MspDeInit+0x40>)
 8001360:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001364:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001366:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800136a:	4808      	ldr	r0, [pc, #32]	; (800138c <HAL_I2C_MspDeInit+0x44>)
 800136c:	f001 f81a 	bl	80023a4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001370:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <HAL_I2C_MspDeInit+0x44>)
 8001376:	f001 f815 	bl	80023a4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40005800 	.word	0x40005800
 8001388:	40021000 	.word	0x40021000
 800138c:	48000400 	.word	0x48000400

08001390 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a17      	ldr	r2, [pc, #92]	; (800140c <HAL_QSPI_MspInit+0x7c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d128      	bne.n	8001404 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <HAL_QSPI_MspInit+0x80>)
 80013b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013b6:	4a16      	ldr	r2, [pc, #88]	; (8001410 <HAL_QSPI_MspInit+0x80>)
 80013b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013bc:	6513      	str	r3, [r2, #80]	; 0x50
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <HAL_QSPI_MspInit+0x80>)
 80013c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <HAL_QSPI_MspInit+0x80>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ce:	4a10      	ldr	r2, [pc, #64]	; (8001410 <HAL_QSPI_MspInit+0x80>)
 80013d0:	f043 0310 	orr.w	r3, r3, #16
 80013d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <HAL_QSPI_MspInit+0x80>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80013e2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80013e6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80013f4:	230a      	movs	r3, #10
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <HAL_QSPI_MspInit+0x84>)
 8001400:	f000 fe26 	bl	8002050 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001404:	bf00      	nop
 8001406:	3728      	adds	r7, #40	; 0x28
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	a0001000 	.word	0xa0001000
 8001410:	40021000 	.word	0x40021000
 8001414:	48001000 	.word	0x48001000

08001418 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a1b      	ldr	r2, [pc, #108]	; (80014a4 <HAL_SPI_MspInit+0x8c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d130      	bne.n	800149c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800143a:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_SPI_MspInit+0x90>)
 800143c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143e:	4a1a      	ldr	r2, [pc, #104]	; (80014a8 <HAL_SPI_MspInit+0x90>)
 8001440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001444:	6593      	str	r3, [r2, #88]	; 0x58
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <HAL_SPI_MspInit+0x90>)
 8001448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_SPI_MspInit+0x90>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <HAL_SPI_MspInit+0x90>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145e:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_SPI_MspInit+0x90>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800146a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800146e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800147c:	2306      	movs	r3, #6
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	4809      	ldr	r0, [pc, #36]	; (80014ac <HAL_SPI_MspInit+0x94>)
 8001488:	f000 fde2 	bl	8002050 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	2105      	movs	r1, #5
 8001490:	2033      	movs	r0, #51	; 0x33
 8001492:	f000 fc57 	bl	8001d44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001496:	2033      	movs	r0, #51	; 0x33
 8001498:	f000 fc70 	bl	8001d7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800149c:	bf00      	nop
 800149e:	3728      	adds	r7, #40	; 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40003c00 	.word	0x40003c00
 80014a8:	40021000 	.word	0x40021000
 80014ac:	48000800 	.word	0x48000800

080014b0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <HAL_SPI_MspDeInit+0x38>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d10d      	bne.n	80014de <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <HAL_SPI_MspDeInit+0x3c>)
 80014c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c6:	4a09      	ldr	r2, [pc, #36]	; (80014ec <HAL_SPI_MspDeInit+0x3c>)
 80014c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80014cc:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 80014ce:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80014d2:	4807      	ldr	r0, [pc, #28]	; (80014f0 <HAL_SPI_MspDeInit+0x40>)
 80014d4:	f000 ff66 	bl	80023a4 <HAL_GPIO_DeInit>

    /* SPI3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
 80014d8:	2033      	movs	r0, #51	; 0x33
 80014da:	f000 fc5d 	bl	8001d98 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40003c00 	.word	0x40003c00
 80014ec:	40021000 	.word	0x40021000
 80014f0:	48000800 	.word	0x48000800

080014f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b0ae      	sub	sp, #184	; 0xb8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800150c:	f107 031c 	add.w	r3, r7, #28
 8001510:	2288      	movs	r2, #136	; 0x88
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f00a ff92 	bl	800c43e <memset>
  if(huart->Instance==USART1)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a42      	ldr	r2, [pc, #264]	; (8001628 <HAL_UART_MspInit+0x134>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d13b      	bne.n	800159c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001524:	2301      	movs	r3, #1
 8001526:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001528:	2300      	movs	r3, #0
 800152a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	4618      	mov	r0, r3
 8001532:	f002 febb 	bl	80042ac <HAL_RCCEx_PeriphCLKConfig>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800153c:	f7ff fe14 	bl	8001168 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001540:	4b3a      	ldr	r3, [pc, #232]	; (800162c <HAL_UART_MspInit+0x138>)
 8001542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001544:	4a39      	ldr	r2, [pc, #228]	; (800162c <HAL_UART_MspInit+0x138>)
 8001546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800154a:	6613      	str	r3, [r2, #96]	; 0x60
 800154c:	4b37      	ldr	r3, [pc, #220]	; (800162c <HAL_UART_MspInit+0x138>)
 800154e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001554:	61bb      	str	r3, [r7, #24]
 8001556:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001558:	4b34      	ldr	r3, [pc, #208]	; (800162c <HAL_UART_MspInit+0x138>)
 800155a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155c:	4a33      	ldr	r2, [pc, #204]	; (800162c <HAL_UART_MspInit+0x138>)
 800155e:	f043 0302 	orr.w	r3, r3, #2
 8001562:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001564:	4b31      	ldr	r3, [pc, #196]	; (800162c <HAL_UART_MspInit+0x138>)
 8001566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001570:	23c0      	movs	r3, #192	; 0xc0
 8001572:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001588:	2307      	movs	r3, #7
 800158a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001592:	4619      	mov	r1, r3
 8001594:	4826      	ldr	r0, [pc, #152]	; (8001630 <HAL_UART_MspInit+0x13c>)
 8001596:	f000 fd5b 	bl	8002050 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800159a:	e040      	b.n	800161e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a24      	ldr	r2, [pc, #144]	; (8001634 <HAL_UART_MspInit+0x140>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d13b      	bne.n	800161e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015a6:	2304      	movs	r3, #4
 80015a8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ae:	f107 031c 	add.w	r3, r7, #28
 80015b2:	4618      	mov	r0, r3
 80015b4:	f002 fe7a 	bl	80042ac <HAL_RCCEx_PeriphCLKConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_UART_MspInit+0xce>
      Error_Handler();
 80015be:	f7ff fdd3 	bl	8001168 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015c2:	4b1a      	ldr	r3, [pc, #104]	; (800162c <HAL_UART_MspInit+0x138>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	4a19      	ldr	r2, [pc, #100]	; (800162c <HAL_UART_MspInit+0x138>)
 80015c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015cc:	6593      	str	r3, [r2, #88]	; 0x58
 80015ce:	4b17      	ldr	r3, [pc, #92]	; (800162c <HAL_UART_MspInit+0x138>)
 80015d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <HAL_UART_MspInit+0x138>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015de:	4a13      	ldr	r2, [pc, #76]	; (800162c <HAL_UART_MspInit+0x138>)
 80015e0:	f043 0308 	orr.w	r3, r3, #8
 80015e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <HAL_UART_MspInit+0x138>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80015f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001606:	2303      	movs	r3, #3
 8001608:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800160c:	2307      	movs	r3, #7
 800160e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001612:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001616:	4619      	mov	r1, r3
 8001618:	4807      	ldr	r0, [pc, #28]	; (8001638 <HAL_UART_MspInit+0x144>)
 800161a:	f000 fd19 	bl	8002050 <HAL_GPIO_Init>
}
 800161e:	bf00      	nop
 8001620:	37b8      	adds	r7, #184	; 0xb8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40013800 	.word	0x40013800
 800162c:	40021000 	.word	0x40021000
 8001630:	48000400 	.word	0x48000400
 8001634:	40004800 	.word	0x40004800
 8001638:	48000c00 	.word	0x48000c00

0800163c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b0ac      	sub	sp, #176	; 0xb0
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2288      	movs	r2, #136	; 0x88
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f00a feee 	bl	800c43e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800166a:	d17c      	bne.n	8001766 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800166c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001670:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001672:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001676:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800167a:	2301      	movs	r3, #1
 800167c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800167e:	2301      	movs	r3, #1
 8001680:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001682:	2318      	movs	r3, #24
 8001684:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001686:	2307      	movs	r3, #7
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800168a:	2302      	movs	r3, #2
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800168e:	2302      	movs	r3, #2
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001692:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001696:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4618      	mov	r0, r3
 800169e:	f002 fe05 	bl	80042ac <HAL_RCCEx_PeriphCLKConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80016a8:	f7ff fd5e 	bl	8001168 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	4b30      	ldr	r3, [pc, #192]	; (8001770 <HAL_PCD_MspInit+0x134>)
 80016ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b0:	4a2f      	ldr	r2, [pc, #188]	; (8001770 <HAL_PCD_MspInit+0x134>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b8:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <HAL_PCD_MspInit+0x134>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80016c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016dc:	4619      	mov	r1, r3
 80016de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e2:	f000 fcb5 	bl	8002050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80016e6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80016ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001700:	230a      	movs	r3, #10
 8001702:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001706:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800170a:	4619      	mov	r1, r3
 800170c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001710:	f000 fc9e 	bl	8002050 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001714:	4b16      	ldr	r3, [pc, #88]	; (8001770 <HAL_PCD_MspInit+0x134>)
 8001716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001718:	4a15      	ldr	r2, [pc, #84]	; (8001770 <HAL_PCD_MspInit+0x134>)
 800171a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800171e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001720:	4b13      	ldr	r3, [pc, #76]	; (8001770 <HAL_PCD_MspInit+0x134>)
 8001722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800172c:	4b10      	ldr	r3, [pc, #64]	; (8001770 <HAL_PCD_MspInit+0x134>)
 800172e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d114      	bne.n	8001762 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001738:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <HAL_PCD_MspInit+0x134>)
 800173a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173c:	4a0c      	ldr	r2, [pc, #48]	; (8001770 <HAL_PCD_MspInit+0x134>)
 800173e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001742:	6593      	str	r3, [r2, #88]	; 0x58
 8001744:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <HAL_PCD_MspInit+0x134>)
 8001746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001750:	f001 fec0 	bl	80034d4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_PCD_MspInit+0x134>)
 8001756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001758:	4a05      	ldr	r2, [pc, #20]	; (8001770 <HAL_PCD_MspInit+0x134>)
 800175a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800175e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001760:	e001      	b.n	8001766 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001762:	f001 feb7 	bl	80034d4 <HAL_PWREx_EnableVddUSB>
}
 8001766:	bf00      	nop
 8001768:	37b0      	adds	r7, #176	; 0xb0
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000

08001774 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08e      	sub	sp, #56	; 0x38
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800177c:	2300      	movs	r3, #0
 800177e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001782:	4b34      	ldr	r3, [pc, #208]	; (8001854 <HAL_InitTick+0xe0>)
 8001784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001786:	4a33      	ldr	r2, [pc, #204]	; (8001854 <HAL_InitTick+0xe0>)
 8001788:	f043 0310 	orr.w	r3, r3, #16
 800178c:	6593      	str	r3, [r2, #88]	; 0x58
 800178e:	4b31      	ldr	r3, [pc, #196]	; (8001854 <HAL_InitTick+0xe0>)
 8001790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800179a:	f107 0210 	add.w	r2, r7, #16
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f002 fcef 	bl	8004188 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017aa:	6a3b      	ldr	r3, [r7, #32]
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d103      	bne.n	80017bc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017b4:	f002 fcbc 	bl	8004130 <HAL_RCC_GetPCLK1Freq>
 80017b8:	6378      	str	r0, [r7, #52]	; 0x34
 80017ba:	e004      	b.n	80017c6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017bc:	f002 fcb8 	bl	8004130 <HAL_RCC_GetPCLK1Freq>
 80017c0:	4603      	mov	r3, r0
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c8:	4a23      	ldr	r2, [pc, #140]	; (8001858 <HAL_InitTick+0xe4>)
 80017ca:	fba2 2303 	umull	r2, r3, r2, r3
 80017ce:	0c9b      	lsrs	r3, r3, #18
 80017d0:	3b01      	subs	r3, #1
 80017d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017d4:	4b21      	ldr	r3, [pc, #132]	; (800185c <HAL_InitTick+0xe8>)
 80017d6:	4a22      	ldr	r2, [pc, #136]	; (8001860 <HAL_InitTick+0xec>)
 80017d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017da:	4b20      	ldr	r3, [pc, #128]	; (800185c <HAL_InitTick+0xe8>)
 80017dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017e0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017e2:	4a1e      	ldr	r2, [pc, #120]	; (800185c <HAL_InitTick+0xe8>)
 80017e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017e8:	4b1c      	ldr	r3, [pc, #112]	; (800185c <HAL_InitTick+0xe8>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_InitTick+0xe8>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <HAL_InitTick+0xe8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80017fa:	4818      	ldr	r0, [pc, #96]	; (800185c <HAL_InitTick+0xe8>)
 80017fc:	f004 fd4f 	bl	800629e <HAL_TIM_Base_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001806:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800180a:	2b00      	cmp	r3, #0
 800180c:	d11b      	bne.n	8001846 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800180e:	4813      	ldr	r0, [pc, #76]	; (800185c <HAL_InitTick+0xe8>)
 8001810:	f004 fda6 	bl	8006360 <HAL_TIM_Base_Start_IT>
 8001814:	4603      	mov	r3, r0
 8001816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800181a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800181e:	2b00      	cmp	r3, #0
 8001820:	d111      	bne.n	8001846 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001822:	2036      	movs	r0, #54	; 0x36
 8001824:	f000 faaa 	bl	8001d7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b0f      	cmp	r3, #15
 800182c:	d808      	bhi.n	8001840 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800182e:	2200      	movs	r2, #0
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	2036      	movs	r0, #54	; 0x36
 8001834:	f000 fa86 	bl	8001d44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001838:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <HAL_InitTick+0xf0>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	e002      	b.n	8001846 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001846:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800184a:	4618      	mov	r0, r3
 800184c:	3738      	adds	r7, #56	; 0x38
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000
 8001858:	431bde83 	.word	0x431bde83
 800185c:	20000718 	.word	0x20000718
 8001860:	40001000 	.word	0x40001000
 8001864:	20000004 	.word	0x20000004

08001868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800186c:	e7fe      	b.n	800186c <NMI_Handler+0x4>

0800186e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001872:	e7fe      	b.n	8001872 <HardFault_Handler+0x4>

08001874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <MemManage_Handler+0x4>

0800187a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <BusFault_Handler+0x4>

08001880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <UsageFault_Handler+0x4>

08001886 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ISM43362_DRDY_EXTI1_Pin);
 8001898:	2002      	movs	r0, #2
 800189a:	f000 fea7 	bl	80025ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80018a6:	2020      	movs	r0, #32
 80018a8:	f000 fea0 	bl	80025ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80018ac:	2040      	movs	r0, #64	; 0x40
 80018ae:	f000 fe9d 	bl	80025ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80018b2:	2080      	movs	r0, #128	; 0x80
 80018b4:	f000 fe9a 	bl	80025ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80018b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80018bc:	f000 fe96 	bl	80025ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80018c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80018cc:	f000 fe8e 	bl	80025ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80018d0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80018d4:	f000 fe8a 	bl	80025ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BOTON_Pin);
 80018d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018dc:	f000 fe86 	bl	80025ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80018e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80018e4:	f000 fe82 	bl	80025ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80018e8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80018ec:	f000 fe7e 	bl	80025ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <TIM6_DAC_IRQHandler+0x10>)
 80018fa:	f004 fda1 	bl	8006440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000718 	.word	0x20000718

08001908 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
	return 1;
 800190c:	2301      	movs	r3, #1
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_kill>:

int _kill(int pid, int sig)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001922:	f00a fc5b 	bl	800c1dc <__errno>
 8001926:	4603      	mov	r3, r0
 8001928:	2216      	movs	r2, #22
 800192a:	601a      	str	r2, [r3, #0]
	return -1;
 800192c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <_exit>:

void _exit (int status)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001940:	f04f 31ff 	mov.w	r1, #4294967295
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ffe7 	bl	8001918 <_kill>
	while (1) {}		/* Make sure we hang here */
 800194a:	e7fe      	b.n	800194a <_exit+0x12>

0800194c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	e00a      	b.n	8001974 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800195e:	f3af 8000 	nop.w
 8001962:	4601      	mov	r1, r0
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	60ba      	str	r2, [r7, #8]
 800196a:	b2ca      	uxtb	r2, r1
 800196c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3301      	adds	r3, #1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	429a      	cmp	r2, r3
 800197a:	dbf0      	blt.n	800195e <_read+0x12>
	}

return len;
 800197c:	687b      	ldr	r3, [r7, #4]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
	return -1;
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ae:	605a      	str	r2, [r3, #4]
	return 0;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <_isatty>:

int _isatty(int file)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
	return 1;
 80019c6:	2301      	movs	r3, #1
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
	return 0;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f8:	4a14      	ldr	r2, [pc, #80]	; (8001a4c <_sbrk+0x5c>)
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <_sbrk+0x60>)
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <_sbrk+0x64>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d102      	bne.n	8001a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <_sbrk+0x64>)
 8001a0e:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <_sbrk+0x68>)
 8001a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <_sbrk+0x64>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d207      	bcs.n	8001a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a20:	f00a fbdc 	bl	800c1dc <__errno>
 8001a24:	4603      	mov	r3, r0
 8001a26:	220c      	movs	r2, #12
 8001a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2e:	e009      	b.n	8001a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <_sbrk+0x64>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <_sbrk+0x64>)
 8001a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a42:	68fb      	ldr	r3, [r7, #12]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20018000 	.word	0x20018000
 8001a50:	00000400 	.word	0x00000400
 8001a54:	20000764 	.word	0x20000764
 8001a58:	20003300 	.word	0x20003300

08001a5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <SystemInit+0x20>)
 8001a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a66:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <SystemInit+0x20>)
 8001a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a84:	f7ff ffea 	bl	8001a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a88:	480c      	ldr	r0, [pc, #48]	; (8001abc <LoopForever+0x6>)
  ldr r1, =_edata
 8001a8a:	490d      	ldr	r1, [pc, #52]	; (8001ac0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ac4 <LoopForever+0xe>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a90:	e002      	b.n	8001a98 <LoopCopyDataInit>

08001a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a96:	3304      	adds	r3, #4

08001a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a9c:	d3f9      	bcc.n	8001a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001aa0:	4c0a      	ldr	r4, [pc, #40]	; (8001acc <LoopForever+0x16>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa4:	e001      	b.n	8001aaa <LoopFillZerobss>

08001aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa8:	3204      	adds	r2, #4

08001aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aac:	d3fb      	bcc.n	8001aa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aae:	f00a fc91 	bl	800c3d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ab2:	f7fe fd8f 	bl	80005d4 <main>

08001ab6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ab6:	e7fe      	b.n	8001ab6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ab8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac0:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001ac4:	0800e268 	.word	0x0800e268
  ldr r2, =_sbss
 8001ac8:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001acc:	200032fc 	.word	0x200032fc

08001ad0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ad0:	e7fe      	b.n	8001ad0 <ADC1_2_IRQHandler>

08001ad2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001adc:	2003      	movs	r0, #3
 8001ade:	f000 f926 	bl	8001d2e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ae2:	200f      	movs	r0, #15
 8001ae4:	f7ff fe46 	bl	8001774 <HAL_InitTick>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	71fb      	strb	r3, [r7, #7]
 8001af2:	e001      	b.n	8001af8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001af4:	f7ff fb3e 	bl	8001174 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001af8:	79fb      	ldrb	r3, [r7, #7]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_IncTick+0x20>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_IncTick+0x24>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <HAL_IncTick+0x24>)
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000008 	.word	0x20000008
 8001b28:	20000768 	.word	0x20000768

08001b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_GetTick+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20000768 	.word	0x20000768

08001b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b4c:	f7ff ffee 	bl	8001b2c <HAL_GetTick>
 8001b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5c:	d005      	beq.n	8001b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_Delay+0x44>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b6a:	bf00      	nop
 8001b6c:	f7ff ffde 	bl	8001b2c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d8f7      	bhi.n	8001b6c <HAL_Delay+0x28>
  {
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000008 	.word	0x20000008

08001b8c <__NVIC_SetPriorityGrouping>:
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bbe:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	60d3      	str	r3, [r2, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_GetPriorityGrouping>:
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <__NVIC_GetPriorityGrouping+0x18>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	f003 0307 	and.w	r3, r3, #7
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_EnableIRQ>:
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	db0b      	blt.n	8001c1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	f003 021f 	and.w	r2, r3, #31
 8001c08:	4907      	ldr	r1, [pc, #28]	; (8001c28 <__NVIC_EnableIRQ+0x38>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	2001      	movs	r0, #1
 8001c12:	fa00 f202 	lsl.w	r2, r0, r2
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000e100 	.word	0xe000e100

08001c2c <__NVIC_DisableIRQ>:
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	db12      	blt.n	8001c64 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	f003 021f 	and.w	r2, r3, #31
 8001c44:	490a      	ldr	r1, [pc, #40]	; (8001c70 <__NVIC_DisableIRQ+0x44>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c52:	3320      	adds	r3, #32
 8001c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c58:	f3bf 8f4f 	dsb	sy
}
 8001c5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c5e:	f3bf 8f6f 	isb	sy
}
 8001c62:	bf00      	nop
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000e100 	.word	0xe000e100

08001c74 <__NVIC_SetPriority>:
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	6039      	str	r1, [r7, #0]
 8001c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	db0a      	blt.n	8001c9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	490c      	ldr	r1, [pc, #48]	; (8001cc0 <__NVIC_SetPriority+0x4c>)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	0112      	lsls	r2, r2, #4
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	440b      	add	r3, r1
 8001c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c9c:	e00a      	b.n	8001cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	4908      	ldr	r1, [pc, #32]	; (8001cc4 <__NVIC_SetPriority+0x50>)
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	3b04      	subs	r3, #4
 8001cac:	0112      	lsls	r2, r2, #4
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	761a      	strb	r2, [r3, #24]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000e100 	.word	0xe000e100
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <NVIC_EncodePriority>:
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	; 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f1c3 0307 	rsb	r3, r3, #7
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	bf28      	it	cs
 8001ce6:	2304      	movcs	r3, #4
 8001ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3304      	adds	r3, #4
 8001cee:	2b06      	cmp	r3, #6
 8001cf0:	d902      	bls.n	8001cf8 <NVIC_EncodePriority+0x30>
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3b03      	subs	r3, #3
 8001cf6:	e000      	b.n	8001cfa <NVIC_EncodePriority+0x32>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43da      	mvns	r2, r3
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d10:	f04f 31ff 	mov.w	r1, #4294967295
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1a:	43d9      	mvns	r1, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	4313      	orrs	r3, r2
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3724      	adds	r7, #36	; 0x24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff ff28 	bl	8001b8c <__NVIC_SetPriorityGrouping>
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d56:	f7ff ff3d 	bl	8001bd4 <__NVIC_GetPriorityGrouping>
 8001d5a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	68b9      	ldr	r1, [r7, #8]
 8001d60:	6978      	ldr	r0, [r7, #20]
 8001d62:	f7ff ffb1 	bl	8001cc8 <NVIC_EncodePriority>
 8001d66:	4602      	mov	r2, r0
 8001d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ff80 	bl	8001c74 <__NVIC_SetPriority>
}
 8001d74:	bf00      	nop
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ff30 	bl	8001bf0 <__NVIC_EnableIRQ>
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff ff40 	bl	8001c2c <__NVIC_DisableIRQ>
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e0ac      	b.n	8001f20 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f8b2 	bl	8001f34 <DFSDM_GetChannelFromInstance>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4a55      	ldr	r2, [pc, #340]	; (8001f28 <HAL_DFSDM_ChannelInit+0x174>)
 8001dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e09f      	b.n	8001f20 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff f9ef 	bl	80011c4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001de6:	4b51      	ldr	r3, [pc, #324]	; (8001f2c <HAL_DFSDM_ChannelInit+0x178>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	3301      	adds	r3, #1
 8001dec:	4a4f      	ldr	r2, [pc, #316]	; (8001f2c <HAL_DFSDM_ChannelInit+0x178>)
 8001dee:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001df0:	4b4e      	ldr	r3, [pc, #312]	; (8001f2c <HAL_DFSDM_ChannelInit+0x178>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d125      	bne.n	8001e44 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001df8:	4b4d      	ldr	r3, [pc, #308]	; (8001f30 <HAL_DFSDM_ChannelInit+0x17c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a4c      	ldr	r2, [pc, #304]	; (8001f30 <HAL_DFSDM_ChannelInit+0x17c>)
 8001dfe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e02:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001e04:	4b4a      	ldr	r3, [pc, #296]	; (8001f30 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	4948      	ldr	r1, [pc, #288]	; (8001f30 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001e12:	4b47      	ldr	r3, [pc, #284]	; (8001f30 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a46      	ldr	r2, [pc, #280]	; (8001f30 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e18:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001e1c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	791b      	ldrb	r3, [r3, #4]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d108      	bne.n	8001e38 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001e26:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	041b      	lsls	r3, r3, #16
 8001e32:	493f      	ldr	r1, [pc, #252]	; (8001f30 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001e38:	4b3d      	ldr	r3, [pc, #244]	; (8001f30 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a3c      	ldr	r2, [pc, #240]	; (8001f30 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e42:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001e52:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6819      	ldr	r1, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001e62:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001e68:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 020f 	bic.w	r2, r2, #15
 8001e80:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6819      	ldr	r1, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001e90:	431a      	orrs	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001ea8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6899      	ldr	r1, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f002 0207 	and.w	r2, r2, #7
 8001ed4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6859      	ldr	r1, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f00:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 f810 	bl	8001f34 <DFSDM_GetChannelFromInstance>
 8001f14:	4602      	mov	r2, r0
 8001f16:	4904      	ldr	r1, [pc, #16]	; (8001f28 <HAL_DFSDM_ChannelInit+0x174>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000770 	.word	0x20000770
 8001f2c:	2000076c 	.word	0x2000076c
 8001f30:	40016000 	.word	0x40016000

08001f34 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a1c      	ldr	r2, [pc, #112]	; (8001fb0 <DFSDM_GetChannelFromInstance+0x7c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d102      	bne.n	8001f4a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	e02b      	b.n	8001fa2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a19      	ldr	r2, [pc, #100]	; (8001fb4 <DFSDM_GetChannelFromInstance+0x80>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d102      	bne.n	8001f58 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001f52:	2301      	movs	r3, #1
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	e024      	b.n	8001fa2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a17      	ldr	r2, [pc, #92]	; (8001fb8 <DFSDM_GetChannelFromInstance+0x84>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d102      	bne.n	8001f66 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001f60:	2302      	movs	r3, #2
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	e01d      	b.n	8001fa2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <DFSDM_GetChannelFromInstance+0x88>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d102      	bne.n	8001f74 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001f6e:	2304      	movs	r3, #4
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	e016      	b.n	8001fa2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <DFSDM_GetChannelFromInstance+0x8c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d102      	bne.n	8001f82 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001f7c:	2305      	movs	r3, #5
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	e00f      	b.n	8001fa2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a0f      	ldr	r2, [pc, #60]	; (8001fc4 <DFSDM_GetChannelFromInstance+0x90>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d102      	bne.n	8001f90 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001f8a:	2306      	movs	r3, #6
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	e008      	b.n	8001fa2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a0d      	ldr	r2, [pc, #52]	; (8001fc8 <DFSDM_GetChannelFromInstance+0x94>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d102      	bne.n	8001f9e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001f98:	2307      	movs	r3, #7
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	e001      	b.n	8001fa2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	40016000 	.word	0x40016000
 8001fb4:	40016020 	.word	0x40016020
 8001fb8:	40016040 	.word	0x40016040
 8001fbc:	40016080 	.word	0x40016080
 8001fc0:	400160a0 	.word	0x400160a0
 8001fc4:	400160c0 	.word	0x400160c0
 8001fc8:	400160e0 	.word	0x400160e0

08001fcc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d005      	beq.n	8001ff0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2204      	movs	r2, #4
 8001fe8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	73fb      	strb	r3, [r7, #15]
 8001fee:	e029      	b.n	8002044 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 020e 	bic.w	r2, r2, #14
 8001ffe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0201 	bic.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002014:	f003 021c 	and.w	r2, r3, #28
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	2101      	movs	r1, #1
 800201e:	fa01 f202 	lsl.w	r2, r1, r2
 8002022:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	4798      	blx	r3
    }
  }
  return status;
 8002044:	7bfb      	ldrb	r3, [r7, #15]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002050:	b480      	push	{r7}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800205e:	e17f      	b.n	8002360 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	2101      	movs	r1, #1
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	4013      	ands	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 8171 	beq.w	800235a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d00b      	beq.n	8002098 <HAL_GPIO_Init+0x48>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b02      	cmp	r3, #2
 8002086:	d007      	beq.n	8002098 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800208c:	2b11      	cmp	r3, #17
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b12      	cmp	r3, #18
 8002096:	d130      	bne.n	80020fa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	2203      	movs	r2, #3
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4013      	ands	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020ce:	2201      	movs	r2, #1
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4013      	ands	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	091b      	lsrs	r3, r3, #4
 80020e4:	f003 0201 	and.w	r2, r3, #1
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b03      	cmp	r3, #3
 8002104:	d118      	bne.n	8002138 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800210c:	2201      	movs	r2, #1
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	f003 0201 	and.w	r2, r3, #1
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	2203      	movs	r2, #3
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	4313      	orrs	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b02      	cmp	r3, #2
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_Init+0x128>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b12      	cmp	r3, #18
 8002176:	d123      	bne.n	80021c0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	08da      	lsrs	r2, r3, #3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3208      	adds	r2, #8
 8002180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002184:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	220f      	movs	r2, #15
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4013      	ands	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	08da      	lsrs	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3208      	adds	r2, #8
 80021ba:	6939      	ldr	r1, [r7, #16]
 80021bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	2203      	movs	r2, #3
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4013      	ands	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 0203 	and.w	r2, r3, #3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 80ac 	beq.w	800235a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002202:	4b5f      	ldr	r3, [pc, #380]	; (8002380 <HAL_GPIO_Init+0x330>)
 8002204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002206:	4a5e      	ldr	r2, [pc, #376]	; (8002380 <HAL_GPIO_Init+0x330>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	6613      	str	r3, [r2, #96]	; 0x60
 800220e:	4b5c      	ldr	r3, [pc, #368]	; (8002380 <HAL_GPIO_Init+0x330>)
 8002210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800221a:	4a5a      	ldr	r2, [pc, #360]	; (8002384 <HAL_GPIO_Init+0x334>)
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	3302      	adds	r3, #2
 8002222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002226:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	220f      	movs	r2, #15
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002244:	d025      	beq.n	8002292 <HAL_GPIO_Init+0x242>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a4f      	ldr	r2, [pc, #316]	; (8002388 <HAL_GPIO_Init+0x338>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d01f      	beq.n	800228e <HAL_GPIO_Init+0x23e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a4e      	ldr	r2, [pc, #312]	; (800238c <HAL_GPIO_Init+0x33c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d019      	beq.n	800228a <HAL_GPIO_Init+0x23a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a4d      	ldr	r2, [pc, #308]	; (8002390 <HAL_GPIO_Init+0x340>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d013      	beq.n	8002286 <HAL_GPIO_Init+0x236>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a4c      	ldr	r2, [pc, #304]	; (8002394 <HAL_GPIO_Init+0x344>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d00d      	beq.n	8002282 <HAL_GPIO_Init+0x232>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a4b      	ldr	r2, [pc, #300]	; (8002398 <HAL_GPIO_Init+0x348>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d007      	beq.n	800227e <HAL_GPIO_Init+0x22e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a4a      	ldr	r2, [pc, #296]	; (800239c <HAL_GPIO_Init+0x34c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d101      	bne.n	800227a <HAL_GPIO_Init+0x22a>
 8002276:	2306      	movs	r3, #6
 8002278:	e00c      	b.n	8002294 <HAL_GPIO_Init+0x244>
 800227a:	2307      	movs	r3, #7
 800227c:	e00a      	b.n	8002294 <HAL_GPIO_Init+0x244>
 800227e:	2305      	movs	r3, #5
 8002280:	e008      	b.n	8002294 <HAL_GPIO_Init+0x244>
 8002282:	2304      	movs	r3, #4
 8002284:	e006      	b.n	8002294 <HAL_GPIO_Init+0x244>
 8002286:	2303      	movs	r3, #3
 8002288:	e004      	b.n	8002294 <HAL_GPIO_Init+0x244>
 800228a:	2302      	movs	r3, #2
 800228c:	e002      	b.n	8002294 <HAL_GPIO_Init+0x244>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <HAL_GPIO_Init+0x244>
 8002292:	2300      	movs	r3, #0
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	f002 0203 	and.w	r2, r2, #3
 800229a:	0092      	lsls	r2, r2, #2
 800229c:	4093      	lsls	r3, r2
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022a4:	4937      	ldr	r1, [pc, #220]	; (8002384 <HAL_GPIO_Init+0x334>)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	089b      	lsrs	r3, r3, #2
 80022aa:	3302      	adds	r3, #2
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022b2:	4b3b      	ldr	r3, [pc, #236]	; (80023a0 <HAL_GPIO_Init+0x350>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4013      	ands	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022d6:	4a32      	ldr	r2, [pc, #200]	; (80023a0 <HAL_GPIO_Init+0x350>)
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80022dc:	4b30      	ldr	r3, [pc, #192]	; (80023a0 <HAL_GPIO_Init+0x350>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002300:	4a27      	ldr	r2, [pc, #156]	; (80023a0 <HAL_GPIO_Init+0x350>)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002306:	4b26      	ldr	r3, [pc, #152]	; (80023a0 <HAL_GPIO_Init+0x350>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	43db      	mvns	r3, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800232a:	4a1d      	ldr	r2, [pc, #116]	; (80023a0 <HAL_GPIO_Init+0x350>)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002330:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <HAL_GPIO_Init+0x350>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	43db      	mvns	r3, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002354:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <HAL_GPIO_Init+0x350>)
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	3301      	adds	r3, #1
 800235e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	fa22 f303 	lsr.w	r3, r2, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	f47f ae78 	bne.w	8002060 <HAL_GPIO_Init+0x10>
  }
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	371c      	adds	r7, #28
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000
 8002384:	40010000 	.word	0x40010000
 8002388:	48000400 	.word	0x48000400
 800238c:	48000800 	.word	0x48000800
 8002390:	48000c00 	.word	0x48000c00
 8002394:	48001000 	.word	0x48001000
 8002398:	48001400 	.word	0x48001400
 800239c:	48001800 	.word	0x48001800
 80023a0:	40010400 	.word	0x40010400

080023a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80023b2:	e0cd      	b.n	8002550 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80023b4:	2201      	movs	r2, #1
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 80c0 	beq.w	800254a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80023ca:	4a68      	ldr	r2, [pc, #416]	; (800256c <HAL_GPIO_DeInit+0x1c8>)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	089b      	lsrs	r3, r3, #2
 80023d0:	3302      	adds	r3, #2
 80023d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	220f      	movs	r2, #15
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4013      	ands	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023f2:	d025      	beq.n	8002440 <HAL_GPIO_DeInit+0x9c>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a5e      	ldr	r2, [pc, #376]	; (8002570 <HAL_GPIO_DeInit+0x1cc>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d01f      	beq.n	800243c <HAL_GPIO_DeInit+0x98>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a5d      	ldr	r2, [pc, #372]	; (8002574 <HAL_GPIO_DeInit+0x1d0>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d019      	beq.n	8002438 <HAL_GPIO_DeInit+0x94>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a5c      	ldr	r2, [pc, #368]	; (8002578 <HAL_GPIO_DeInit+0x1d4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d013      	beq.n	8002434 <HAL_GPIO_DeInit+0x90>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a5b      	ldr	r2, [pc, #364]	; (800257c <HAL_GPIO_DeInit+0x1d8>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d00d      	beq.n	8002430 <HAL_GPIO_DeInit+0x8c>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a5a      	ldr	r2, [pc, #360]	; (8002580 <HAL_GPIO_DeInit+0x1dc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d007      	beq.n	800242c <HAL_GPIO_DeInit+0x88>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a59      	ldr	r2, [pc, #356]	; (8002584 <HAL_GPIO_DeInit+0x1e0>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d101      	bne.n	8002428 <HAL_GPIO_DeInit+0x84>
 8002424:	2306      	movs	r3, #6
 8002426:	e00c      	b.n	8002442 <HAL_GPIO_DeInit+0x9e>
 8002428:	2307      	movs	r3, #7
 800242a:	e00a      	b.n	8002442 <HAL_GPIO_DeInit+0x9e>
 800242c:	2305      	movs	r3, #5
 800242e:	e008      	b.n	8002442 <HAL_GPIO_DeInit+0x9e>
 8002430:	2304      	movs	r3, #4
 8002432:	e006      	b.n	8002442 <HAL_GPIO_DeInit+0x9e>
 8002434:	2303      	movs	r3, #3
 8002436:	e004      	b.n	8002442 <HAL_GPIO_DeInit+0x9e>
 8002438:	2302      	movs	r3, #2
 800243a:	e002      	b.n	8002442 <HAL_GPIO_DeInit+0x9e>
 800243c:	2301      	movs	r3, #1
 800243e:	e000      	b.n	8002442 <HAL_GPIO_DeInit+0x9e>
 8002440:	2300      	movs	r3, #0
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	f002 0203 	and.w	r2, r2, #3
 8002448:	0092      	lsls	r2, r2, #2
 800244a:	4093      	lsls	r3, r2
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	429a      	cmp	r2, r3
 8002450:	d132      	bne.n	80024b8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002452:	4b4d      	ldr	r3, [pc, #308]	; (8002588 <HAL_GPIO_DeInit+0x1e4>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	43db      	mvns	r3, r3
 800245a:	494b      	ldr	r1, [pc, #300]	; (8002588 <HAL_GPIO_DeInit+0x1e4>)
 800245c:	4013      	ands	r3, r2
 800245e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002460:	4b49      	ldr	r3, [pc, #292]	; (8002588 <HAL_GPIO_DeInit+0x1e4>)
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	43db      	mvns	r3, r3
 8002468:	4947      	ldr	r1, [pc, #284]	; (8002588 <HAL_GPIO_DeInit+0x1e4>)
 800246a:	4013      	ands	r3, r2
 800246c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800246e:	4b46      	ldr	r3, [pc, #280]	; (8002588 <HAL_GPIO_DeInit+0x1e4>)
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	43db      	mvns	r3, r3
 8002476:	4944      	ldr	r1, [pc, #272]	; (8002588 <HAL_GPIO_DeInit+0x1e4>)
 8002478:	4013      	ands	r3, r2
 800247a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800247c:	4b42      	ldr	r3, [pc, #264]	; (8002588 <HAL_GPIO_DeInit+0x1e4>)
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	43db      	mvns	r3, r3
 8002484:	4940      	ldr	r1, [pc, #256]	; (8002588 <HAL_GPIO_DeInit+0x1e4>)
 8002486:	4013      	ands	r3, r2
 8002488:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	220f      	movs	r2, #15
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800249a:	4a34      	ldr	r2, [pc, #208]	; (800256c <HAL_GPIO_DeInit+0x1c8>)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	089b      	lsrs	r3, r3, #2
 80024a0:	3302      	adds	r3, #2
 80024a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	43da      	mvns	r2, r3
 80024aa:	4830      	ldr	r0, [pc, #192]	; (800256c <HAL_GPIO_DeInit+0x1c8>)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	089b      	lsrs	r3, r3, #2
 80024b0:	400a      	ands	r2, r1
 80024b2:	3302      	adds	r3, #2
 80024b4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	2103      	movs	r1, #3
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	08da      	lsrs	r2, r3, #3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3208      	adds	r2, #8
 80024d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	220f      	movs	r2, #15
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	08d2      	lsrs	r2, r2, #3
 80024ec:	4019      	ands	r1, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3208      	adds	r2, #8
 80024f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	2103      	movs	r1, #3
 8002500:	fa01 f303 	lsl.w	r3, r1, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	401a      	ands	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	2101      	movs	r1, #1
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	fa01 f303 	lsl.w	r3, r1, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	401a      	ands	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	2103      	movs	r1, #3
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	401a      	ands	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800253a:	2101      	movs	r1, #1
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	fa01 f303 	lsl.w	r3, r1, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	401a      	ands	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	3301      	adds	r3, #1
 800254e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	f47f af2b 	bne.w	80023b4 <HAL_GPIO_DeInit+0x10>
  }
}
 800255e:	bf00      	nop
 8002560:	bf00      	nop
 8002562:	371c      	adds	r7, #28
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	40010000 	.word	0x40010000
 8002570:	48000400 	.word	0x48000400
 8002574:	48000800 	.word	0x48000800
 8002578:	48000c00 	.word	0x48000c00
 800257c:	48001000 	.word	0x48001000
 8002580:	48001400 	.word	0x48001400
 8002584:	48001800 	.word	0x48001800
 8002588:	40010400 	.word	0x40010400

0800258c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	887b      	ldrh	r3, [r7, #2]
 800259e:	4013      	ands	r3, r2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025a4:	2301      	movs	r3, #1
 80025a6:	73fb      	strb	r3, [r7, #15]
 80025a8:	e001      	b.n	80025ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025aa:	2300      	movs	r3, #0
 80025ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	807b      	strh	r3, [r7, #2]
 80025c8:	4613      	mov	r3, r2
 80025ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025cc:	787b      	ldrb	r3, [r7, #1]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025d2:	887a      	ldrh	r2, [r7, #2]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025d8:	e002      	b.n	80025e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025f6:	4b08      	ldr	r3, [pc, #32]	; (8002618 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	88fb      	ldrh	r3, [r7, #6]
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d006      	beq.n	8002610 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002602:	4a05      	ldr	r2, [pc, #20]	; (8002618 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fc20 	bl	8000e50 <HAL_GPIO_EXTI_Callback>
  }
}
 8002610:	bf00      	nop
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40010400 	.word	0x40010400

0800261c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e081      	b.n	8002732 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7fe fe22 	bl	800128c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2224      	movs	r2, #36	; 0x24
 800264c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0201 	bic.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800266c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800267c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d107      	bne.n	8002696 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	e006      	b.n	80026a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d104      	bne.n	80026b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	ea42 0103 	orr.w	r1, r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	021a      	lsls	r2, r3, #8
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69d9      	ldr	r1, [r3, #28]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1a      	ldr	r2, [r3, #32]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e021      	b.n	8002790 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2224      	movs	r2, #36	; 0x24
 8002750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0201 	bic.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7fe fdef 	bl	8001348 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	4608      	mov	r0, r1
 80027a2:	4611      	mov	r1, r2
 80027a4:	461a      	mov	r2, r3
 80027a6:	4603      	mov	r3, r0
 80027a8:	817b      	strh	r3, [r7, #10]
 80027aa:	460b      	mov	r3, r1
 80027ac:	813b      	strh	r3, [r7, #8]
 80027ae:	4613      	mov	r3, r2
 80027b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b20      	cmp	r3, #32
 80027bc:	f040 80f9 	bne.w	80029b2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <HAL_I2C_Mem_Write+0x34>
 80027c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d105      	bne.n	80027d8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0ed      	b.n	80029b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_I2C_Mem_Write+0x4e>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e0e6      	b.n	80029b4 <HAL_I2C_Mem_Write+0x21c>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027ee:	f7ff f99d 	bl	8001b2c <HAL_GetTick>
 80027f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	2319      	movs	r3, #25
 80027fa:	2201      	movs	r2, #1
 80027fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 fac3 	bl	8002d8c <I2C_WaitOnFlagUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0d1      	b.n	80029b4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2221      	movs	r2, #33	; 0x21
 8002814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2240      	movs	r2, #64	; 0x40
 800281c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a3a      	ldr	r2, [r7, #32]
 800282a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002830:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002838:	88f8      	ldrh	r0, [r7, #6]
 800283a:	893a      	ldrh	r2, [r7, #8]
 800283c:	8979      	ldrh	r1, [r7, #10]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	9301      	str	r3, [sp, #4]
 8002842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	4603      	mov	r3, r0
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 f9d3 	bl	8002bf4 <I2C_RequestMemoryWrite>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0a9      	b.n	80029b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002864:	b29b      	uxth	r3, r3
 8002866:	2bff      	cmp	r3, #255	; 0xff
 8002868:	d90e      	bls.n	8002888 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	22ff      	movs	r2, #255	; 0xff
 800286e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002874:	b2da      	uxtb	r2, r3
 8002876:	8979      	ldrh	r1, [r7, #10]
 8002878:	2300      	movs	r3, #0
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 fba5 	bl	8002fd0 <I2C_TransferConfig>
 8002886:	e00f      	b.n	80028a8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002896:	b2da      	uxtb	r2, r3
 8002898:	8979      	ldrh	r1, [r7, #10]
 800289a:	2300      	movs	r3, #0
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 fb94 	bl	8002fd0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 faad 	bl	8002e0c <I2C_WaitOnTXISFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e07b      	b.n	80029b4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	781a      	ldrb	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	3b01      	subs	r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d034      	beq.n	8002960 <HAL_I2C_Mem_Write+0x1c8>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d130      	bne.n	8002960 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002904:	2200      	movs	r2, #0
 8002906:	2180      	movs	r1, #128	; 0x80
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 fa3f 	bl	8002d8c <I2C_WaitOnFlagUntilTimeout>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e04d      	b.n	80029b4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291c:	b29b      	uxth	r3, r3
 800291e:	2bff      	cmp	r3, #255	; 0xff
 8002920:	d90e      	bls.n	8002940 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	22ff      	movs	r2, #255	; 0xff
 8002926:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292c:	b2da      	uxtb	r2, r3
 800292e:	8979      	ldrh	r1, [r7, #10]
 8002930:	2300      	movs	r3, #0
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 fb49 	bl	8002fd0 <I2C_TransferConfig>
 800293e:	e00f      	b.n	8002960 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294e:	b2da      	uxtb	r2, r3
 8002950:	8979      	ldrh	r1, [r7, #10]
 8002952:	2300      	movs	r3, #0
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 fb38 	bl	8002fd0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d19e      	bne.n	80028a8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 fa8c 	bl	8002e8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e01a      	b.n	80029b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2220      	movs	r2, #32
 8002984:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6859      	ldr	r1, [r3, #4]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <HAL_I2C_Mem_Write+0x224>)
 8002992:	400b      	ands	r3, r1
 8002994:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	e000      	b.n	80029b4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80029b2:	2302      	movs	r3, #2
  }
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	fe00e800 	.word	0xfe00e800

080029c0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	4608      	mov	r0, r1
 80029ca:	4611      	mov	r1, r2
 80029cc:	461a      	mov	r2, r3
 80029ce:	4603      	mov	r3, r0
 80029d0:	817b      	strh	r3, [r7, #10]
 80029d2:	460b      	mov	r3, r1
 80029d4:	813b      	strh	r3, [r7, #8]
 80029d6:	4613      	mov	r3, r2
 80029d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b20      	cmp	r3, #32
 80029e4:	f040 80fd 	bne.w	8002be2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <HAL_I2C_Mem_Read+0x34>
 80029ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d105      	bne.n	8002a00 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0f1      	b.n	8002be4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_I2C_Mem_Read+0x4e>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e0ea      	b.n	8002be4 <HAL_I2C_Mem_Read+0x224>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a16:	f7ff f889 	bl	8001b2c <HAL_GetTick>
 8002a1a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	2319      	movs	r3, #25
 8002a22:	2201      	movs	r2, #1
 8002a24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 f9af 	bl	8002d8c <I2C_WaitOnFlagUntilTimeout>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0d5      	b.n	8002be4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2222      	movs	r2, #34	; 0x22
 8002a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2240      	movs	r2, #64	; 0x40
 8002a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a3a      	ldr	r2, [r7, #32]
 8002a52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a60:	88f8      	ldrh	r0, [r7, #6]
 8002a62:	893a      	ldrh	r2, [r7, #8]
 8002a64:	8979      	ldrh	r1, [r7, #10]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	9301      	str	r3, [sp, #4]
 8002a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	4603      	mov	r3, r0
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 f913 	bl	8002c9c <I2C_RequestMemoryRead>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0ad      	b.n	8002be4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2bff      	cmp	r3, #255	; 0xff
 8002a90:	d90e      	bls.n	8002ab0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	22ff      	movs	r2, #255	; 0xff
 8002a96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	8979      	ldrh	r1, [r7, #10]
 8002aa0:	4b52      	ldr	r3, [pc, #328]	; (8002bec <HAL_I2C_Mem_Read+0x22c>)
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 fa91 	bl	8002fd0 <I2C_TransferConfig>
 8002aae:	e00f      	b.n	8002ad0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	8979      	ldrh	r1, [r7, #10]
 8002ac2:	4b4a      	ldr	r3, [pc, #296]	; (8002bec <HAL_I2C_Mem_Read+0x22c>)
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 fa80 	bl	8002fd0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2104      	movs	r1, #4
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f956 	bl	8002d8c <I2C_WaitOnFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e07c      	b.n	8002be4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d034      	beq.n	8002b90 <HAL_I2C_Mem_Read+0x1d0>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d130      	bne.n	8002b90 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b34:	2200      	movs	r2, #0
 8002b36:	2180      	movs	r1, #128	; 0x80
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 f927 	bl	8002d8c <I2C_WaitOnFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e04d      	b.n	8002be4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	2bff      	cmp	r3, #255	; 0xff
 8002b50:	d90e      	bls.n	8002b70 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	22ff      	movs	r2, #255	; 0xff
 8002b56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	8979      	ldrh	r1, [r7, #10]
 8002b60:	2300      	movs	r3, #0
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 fa31 	bl	8002fd0 <I2C_TransferConfig>
 8002b6e:	e00f      	b.n	8002b90 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	8979      	ldrh	r1, [r7, #10]
 8002b82:	2300      	movs	r3, #0
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 fa20 	bl	8002fd0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d19a      	bne.n	8002ad0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 f974 	bl	8002e8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e01a      	b.n	8002be4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6859      	ldr	r1, [r3, #4]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <HAL_I2C_Mem_Read+0x230>)
 8002bc2:	400b      	ands	r3, r1
 8002bc4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e000      	b.n	8002be4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002be2:	2302      	movs	r3, #2
  }
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	80002400 	.word	0x80002400
 8002bf0:	fe00e800 	.word	0xfe00e800

08002bf4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af02      	add	r7, sp, #8
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	4608      	mov	r0, r1
 8002bfe:	4611      	mov	r1, r2
 8002c00:	461a      	mov	r2, r3
 8002c02:	4603      	mov	r3, r0
 8002c04:	817b      	strh	r3, [r7, #10]
 8002c06:	460b      	mov	r3, r1
 8002c08:	813b      	strh	r3, [r7, #8]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c0e:	88fb      	ldrh	r3, [r7, #6]
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	8979      	ldrh	r1, [r7, #10]
 8002c14:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <I2C_RequestMemoryWrite+0xa4>)
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 f9d7 	bl	8002fd0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	69b9      	ldr	r1, [r7, #24]
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 f8f0 	bl	8002e0c <I2C_WaitOnTXISFlagUntilTimeout>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e02c      	b.n	8002c90 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c36:	88fb      	ldrh	r3, [r7, #6]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d105      	bne.n	8002c48 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c3c:	893b      	ldrh	r3, [r7, #8]
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	629a      	str	r2, [r3, #40]	; 0x28
 8002c46:	e015      	b.n	8002c74 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c48:	893b      	ldrh	r3, [r7, #8]
 8002c4a:	0a1b      	lsrs	r3, r3, #8
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c56:	69fa      	ldr	r2, [r7, #28]
 8002c58:	69b9      	ldr	r1, [r7, #24]
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f8d6 	bl	8002e0c <I2C_WaitOnTXISFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e012      	b.n	8002c90 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c6a:	893b      	ldrh	r3, [r7, #8]
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2180      	movs	r1, #128	; 0x80
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 f884 	bl	8002d8c <I2C_WaitOnFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	80002000 	.word	0x80002000

08002c9c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	4608      	mov	r0, r1
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4603      	mov	r3, r0
 8002cac:	817b      	strh	r3, [r7, #10]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	813b      	strh	r3, [r7, #8]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	8979      	ldrh	r1, [r7, #10]
 8002cbc:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <I2C_RequestMemoryRead+0xa4>)
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 f984 	bl	8002fd0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	69b9      	ldr	r1, [r7, #24]
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 f89d 	bl	8002e0c <I2C_WaitOnTXISFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e02c      	b.n	8002d36 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cdc:	88fb      	ldrh	r3, [r7, #6]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d105      	bne.n	8002cee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ce2:	893b      	ldrh	r3, [r7, #8]
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	629a      	str	r2, [r3, #40]	; 0x28
 8002cec:	e015      	b.n	8002d1a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002cee:	893b      	ldrh	r3, [r7, #8]
 8002cf0:	0a1b      	lsrs	r3, r3, #8
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cfc:	69fa      	ldr	r2, [r7, #28]
 8002cfe:	69b9      	ldr	r1, [r7, #24]
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 f883 	bl	8002e0c <I2C_WaitOnTXISFlagUntilTimeout>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e012      	b.n	8002d36 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d10:	893b      	ldrh	r3, [r7, #8]
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	2200      	movs	r2, #0
 8002d22:	2140      	movs	r1, #64	; 0x40
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 f831 	bl	8002d8c <I2C_WaitOnFlagUntilTimeout>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	80002000 	.word	0x80002000

08002d44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d103      	bne.n	8002d62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d007      	beq.n	8002d80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	619a      	str	r2, [r3, #24]
  }
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	603b      	str	r3, [r7, #0]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d9c:	e022      	b.n	8002de4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da4:	d01e      	beq.n	8002de4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da6:	f7fe fec1 	bl	8001b2c <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d302      	bcc.n	8002dbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d113      	bne.n	8002de4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc0:	f043 0220 	orr.w	r2, r3, #32
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e00f      	b.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	4013      	ands	r3, r2
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	bf0c      	ite	eq
 8002df4:	2301      	moveq	r3, #1
 8002df6:	2300      	movne	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d0cd      	beq.n	8002d9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e18:	e02c      	b.n	8002e74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	68b9      	ldr	r1, [r7, #8]
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f870 	bl	8002f04 <I2C_IsAcknowledgeFailed>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e02a      	b.n	8002e84 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e34:	d01e      	beq.n	8002e74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e36:	f7fe fe79 	bl	8001b2c <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d302      	bcc.n	8002e4c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d113      	bne.n	8002e74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e50:	f043 0220 	orr.w	r2, r3, #32
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e007      	b.n	8002e84 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d1cb      	bne.n	8002e1a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e98:	e028      	b.n	8002eec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f830 	bl	8002f04 <I2C_IsAcknowledgeFailed>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e026      	b.n	8002efc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eae:	f7fe fe3d 	bl	8001b2c <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d302      	bcc.n	8002ec4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d113      	bne.n	8002eec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec8:	f043 0220 	orr.w	r2, r3, #32
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e007      	b.n	8002efc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b20      	cmp	r3, #32
 8002ef8:	d1cf      	bne.n	8002e9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	2b10      	cmp	r3, #16
 8002f1c:	d151      	bne.n	8002fc2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f1e:	e022      	b.n	8002f66 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f26:	d01e      	beq.n	8002f66 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f28:	f7fe fe00 	bl	8001b2c <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d302      	bcc.n	8002f3e <I2C_IsAcknowledgeFailed+0x3a>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d113      	bne.n	8002f66 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	f043 0220 	orr.w	r2, r3, #32
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e02e      	b.n	8002fc4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	2b20      	cmp	r3, #32
 8002f72:	d1d5      	bne.n	8002f20 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2210      	movs	r2, #16
 8002f7a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2220      	movs	r2, #32
 8002f82:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f7ff fedd 	bl	8002d44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6859      	ldr	r1, [r3, #4]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	4b0d      	ldr	r3, [pc, #52]	; (8002fcc <I2C_IsAcknowledgeFailed+0xc8>)
 8002f96:	400b      	ands	r3, r1
 8002f98:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	f043 0204 	orr.w	r2, r3, #4
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	fe00e800 	.word	0xfe00e800

08002fd0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	607b      	str	r3, [r7, #4]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	817b      	strh	r3, [r7, #10]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	0d5b      	lsrs	r3, r3, #21
 8002fec:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002ff0:	4b0d      	ldr	r3, [pc, #52]	; (8003028 <I2C_TransferConfig+0x58>)
 8002ff2:	430b      	orrs	r3, r1
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	ea02 0103 	and.w	r1, r2, r3
 8002ffa:	897b      	ldrh	r3, [r7, #10]
 8002ffc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003000:	7a7b      	ldrb	r3, [r7, #9]
 8003002:	041b      	lsls	r3, r3, #16
 8003004:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	431a      	orrs	r2, r3
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	431a      	orrs	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800301a:	bf00      	nop
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	03ff63ff 	.word	0x03ff63ff

0800302c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b20      	cmp	r3, #32
 8003040:	d138      	bne.n	80030b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800304c:	2302      	movs	r3, #2
 800304e:	e032      	b.n	80030b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2224      	movs	r2, #36	; 0x24
 800305c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0201 	bic.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800307e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6819      	ldr	r1, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	e000      	b.n	80030b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030b4:	2302      	movs	r3, #2
  }
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b085      	sub	sp, #20
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	d139      	bne.n	800314c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e033      	b.n	800314e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2224      	movs	r2, #36	; 0x24
 80030f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0201 	bic.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003114:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	021b      	lsls	r3, r3, #8
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4313      	orrs	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	e000      	b.n	800314e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800314c:	2302      	movs	r3, #2
  }
}
 800314e:	4618      	mov	r0, r3
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800315a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800315c:	b08f      	sub	sp, #60	; 0x3c
 800315e:	af0a      	add	r7, sp, #40	; 0x28
 8003160:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e116      	b.n	800339a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fe fa58 	bl	800163c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2203      	movs	r2, #3
 8003190:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319c:	2b00      	cmp	r3, #0
 800319e:	d102      	bne.n	80031a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f003 ffe3 	bl	8007176 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	603b      	str	r3, [r7, #0]
 80031b6:	687e      	ldr	r6, [r7, #4]
 80031b8:	466d      	mov	r5, sp
 80031ba:	f106 0410 	add.w	r4, r6, #16
 80031be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80031ce:	1d33      	adds	r3, r6, #4
 80031d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031d2:	6838      	ldr	r0, [r7, #0]
 80031d4:	f003 ffa3 	bl	800711e <USB_CoreInit>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2202      	movs	r2, #2
 80031e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e0d7      	b.n	800339a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f003 ffd1 	bl	8007198 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f6:	2300      	movs	r3, #0
 80031f8:	73fb      	strb	r3, [r7, #15]
 80031fa:	e04a      	b.n	8003292 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031fc:	7bfa      	ldrb	r2, [r7, #15]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	333d      	adds	r3, #61	; 0x3d
 800320c:	2201      	movs	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003210:	7bfa      	ldrb	r2, [r7, #15]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	333c      	adds	r3, #60	; 0x3c
 8003220:	7bfa      	ldrb	r2, [r7, #15]
 8003222:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	7bfb      	ldrb	r3, [r7, #15]
 8003228:	b298      	uxth	r0, r3
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	1a9b      	subs	r3, r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	3342      	adds	r3, #66	; 0x42
 8003238:	4602      	mov	r2, r0
 800323a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800323c:	7bfa      	ldrb	r2, [r7, #15]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	333f      	adds	r3, #63	; 0x3f
 800324c:	2200      	movs	r2, #0
 800324e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003250:	7bfa      	ldrb	r2, [r7, #15]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	3344      	adds	r3, #68	; 0x44
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	3348      	adds	r3, #72	; 0x48
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003278:	7bfa      	ldrb	r2, [r7, #15]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	3350      	adds	r3, #80	; 0x50
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800328c:	7bfb      	ldrb	r3, [r7, #15]
 800328e:	3301      	adds	r3, #1
 8003290:	73fb      	strb	r3, [r7, #15]
 8003292:	7bfa      	ldrb	r2, [r7, #15]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	429a      	cmp	r2, r3
 800329a:	d3af      	bcc.n	80031fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800329c:	2300      	movs	r3, #0
 800329e:	73fb      	strb	r3, [r7, #15]
 80032a0:	e044      	b.n	800332c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032a2:	7bfa      	ldrb	r2, [r7, #15]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032b8:	7bfa      	ldrb	r2, [r7, #15]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80032ca:	7bfa      	ldrb	r2, [r7, #15]
 80032cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032ce:	7bfa      	ldrb	r2, [r7, #15]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80032e0:	2200      	movs	r2, #0
 80032e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032e4:	7bfa      	ldrb	r2, [r7, #15]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032fa:	7bfa      	ldrb	r2, [r7, #15]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	1a9b      	subs	r3, r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003310:	7bfa      	ldrb	r2, [r7, #15]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	3301      	adds	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
 800332c:	7bfa      	ldrb	r2, [r7, #15]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	429a      	cmp	r2, r3
 8003334:	d3b5      	bcc.n	80032a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	687e      	ldr	r6, [r7, #4]
 800333e:	466d      	mov	r5, sp
 8003340:	f106 0410 	add.w	r4, r6, #16
 8003344:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003346:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800334a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800334c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003350:	e885 0003 	stmia.w	r5, {r0, r1}
 8003354:	1d33      	adds	r3, r6, #4
 8003356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003358:	6838      	ldr	r0, [r7, #0]
 800335a:	f003 ff47 	bl	80071ec <USB_DevInit>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e014      	b.n	800339a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	2b01      	cmp	r3, #1
 8003386:	d102      	bne.n	800338e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f80a 	bl	80033a2 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f004 f8d7 	bl	8007546 <USB_DevDisconnect>

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033a2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b085      	sub	sp, #20
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d4:	f043 0303 	orr.w	r3, r3, #3
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
	...

080033ec <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033f0:	4b05      	ldr	r3, [pc, #20]	; (8003408 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a04      	ldr	r2, [pc, #16]	; (8003408 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033fa:	6013      	str	r3, [r2, #0]
}
 80033fc:	bf00      	nop
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40007000 	.word	0x40007000

0800340c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003410:	4b04      	ldr	r3, [pc, #16]	; (8003424 <HAL_PWREx_GetVoltageRange+0x18>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003418:	4618      	mov	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40007000 	.word	0x40007000

08003428 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003436:	d130      	bne.n	800349a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003438:	4b23      	ldr	r3, [pc, #140]	; (80034c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003444:	d038      	beq.n	80034b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003446:	4b20      	ldr	r3, [pc, #128]	; (80034c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800344e:	4a1e      	ldr	r2, [pc, #120]	; (80034c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003450:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003454:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003456:	4b1d      	ldr	r3, [pc, #116]	; (80034cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2232      	movs	r2, #50	; 0x32
 800345c:	fb02 f303 	mul.w	r3, r2, r3
 8003460:	4a1b      	ldr	r2, [pc, #108]	; (80034d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003462:	fba2 2303 	umull	r2, r3, r2, r3
 8003466:	0c9b      	lsrs	r3, r3, #18
 8003468:	3301      	adds	r3, #1
 800346a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800346c:	e002      	b.n	8003474 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	3b01      	subs	r3, #1
 8003472:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003474:	4b14      	ldr	r3, [pc, #80]	; (80034c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800347c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003480:	d102      	bne.n	8003488 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1f2      	bne.n	800346e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003488:	4b0f      	ldr	r3, [pc, #60]	; (80034c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003494:	d110      	bne.n	80034b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e00f      	b.n	80034ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800349a:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a6:	d007      	beq.n	80034b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034a8:	4b07      	ldr	r3, [pc, #28]	; (80034c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034b0:	4a05      	ldr	r2, [pc, #20]	; (80034c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40007000 	.word	0x40007000
 80034cc:	20000000 	.word	0x20000000
 80034d0:	431bde83 	.word	0x431bde83

080034d4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	4a04      	ldr	r2, [pc, #16]	; (80034f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80034de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034e2:	6053      	str	r3, [r2, #4]
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40007000 	.word	0x40007000

080034f4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80034fc:	f7fe fb16 	bl	8001b2c <HAL_GetTick>
 8003500:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e063      	b.n	80035d4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10b      	bne.n	8003530 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7fd ff35 	bl	8001390 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003526:	f241 3188 	movw	r1, #5000	; 0x1388
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f858 	bl	80035e0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	3b01      	subs	r3, #1
 8003540:	021a      	lsls	r2, r3, #8
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	2120      	movs	r1, #32
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f850 	bl	80035fc <QSPI_WaitFlagStateUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003560:	7afb      	ldrb	r3, [r7, #11]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d131      	bne.n	80035ca <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003570:	f023 0310 	bic.w	r3, r3, #16
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6852      	ldr	r2, [r2, #4]
 8003578:	0611      	lsls	r1, r2, #24
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	68d2      	ldr	r2, [r2, #12]
 800357e:	4311      	orrs	r1, r2
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	430b      	orrs	r3, r1
 8003586:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	4b13      	ldr	r3, [pc, #76]	; (80035dc <HAL_QSPI_Init+0xe8>)
 8003590:	4013      	ands	r3, r2
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6912      	ldr	r2, [r2, #16]
 8003596:	0411      	lsls	r1, r2, #16
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6952      	ldr	r2, [r2, #20]
 800359c:	4311      	orrs	r1, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6992      	ldr	r2, [r2, #24]
 80035a2:	4311      	orrs	r1, r2
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6812      	ldr	r2, [r2, #0]
 80035a8:	430b      	orrs	r3, r1
 80035aa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80035d2:	7afb      	ldrb	r3, [r7, #11]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	ffe0f8fe 	.word	0xffe0f8fe

080035e0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	641a      	str	r2, [r3, #64]	; 0x40
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	4613      	mov	r3, r2
 800360a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800360c:	e01a      	b.n	8003644 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003614:	d016      	beq.n	8003644 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003616:	f7fe fa89 	bl	8001b2c <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	429a      	cmp	r2, r3
 8003624:	d302      	bcc.n	800362c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10b      	bne.n	8003644 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2204      	movs	r2, #4
 8003630:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003638:	f043 0201 	orr.w	r2, r3, #1
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e00e      	b.n	8003662 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	4013      	ands	r3, r2
 800364e:	2b00      	cmp	r3, #0
 8003650:	bf14      	ite	ne
 8003652:	2301      	movne	r3, #1
 8003654:	2300      	moveq	r3, #0
 8003656:	b2db      	uxtb	r3, r3
 8003658:	461a      	mov	r2, r3
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	429a      	cmp	r2, r3
 800365e:	d1d6      	bne.n	800360e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
	...

0800366c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e3d8      	b.n	8003e30 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800367e:	4b97      	ldr	r3, [pc, #604]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
 8003686:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003688:	4b94      	ldr	r3, [pc, #592]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f003 0303 	and.w	r3, r3, #3
 8003690:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0310 	and.w	r3, r3, #16
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 80e4 	beq.w	8003868 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d007      	beq.n	80036b6 <HAL_RCC_OscConfig+0x4a>
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	2b0c      	cmp	r3, #12
 80036aa:	f040 808b 	bne.w	80037c4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	f040 8087 	bne.w	80037c4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036b6:	4b89      	ldr	r3, [pc, #548]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <HAL_RCC_OscConfig+0x62>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e3b0      	b.n	8003e30 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1a      	ldr	r2, [r3, #32]
 80036d2:	4b82      	ldr	r3, [pc, #520]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d004      	beq.n	80036e8 <HAL_RCC_OscConfig+0x7c>
 80036de:	4b7f      	ldr	r3, [pc, #508]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e6:	e005      	b.n	80036f4 <HAL_RCC_OscConfig+0x88>
 80036e8:	4b7c      	ldr	r3, [pc, #496]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 80036ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ee:	091b      	lsrs	r3, r3, #4
 80036f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d223      	bcs.n	8003740 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fd75 	bl	80041ec <RCC_SetFlashLatencyFromMSIRange>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e391      	b.n	8003e30 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800370c:	4b73      	ldr	r3, [pc, #460]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a72      	ldr	r2, [pc, #456]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003712:	f043 0308 	orr.w	r3, r3, #8
 8003716:	6013      	str	r3, [r2, #0]
 8003718:	4b70      	ldr	r3, [pc, #448]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	496d      	ldr	r1, [pc, #436]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003726:	4313      	orrs	r3, r2
 8003728:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800372a:	4b6c      	ldr	r3, [pc, #432]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	021b      	lsls	r3, r3, #8
 8003738:	4968      	ldr	r1, [pc, #416]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 800373a:	4313      	orrs	r3, r2
 800373c:	604b      	str	r3, [r1, #4]
 800373e:	e025      	b.n	800378c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003740:	4b66      	ldr	r3, [pc, #408]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a65      	ldr	r2, [pc, #404]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003746:	f043 0308 	orr.w	r3, r3, #8
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	4b63      	ldr	r3, [pc, #396]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	4960      	ldr	r1, [pc, #384]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 800375a:	4313      	orrs	r3, r2
 800375c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800375e:	4b5f      	ldr	r3, [pc, #380]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	021b      	lsls	r3, r3, #8
 800376c:	495b      	ldr	r1, [pc, #364]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 800376e:	4313      	orrs	r3, r2
 8003770:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d109      	bne.n	800378c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	4618      	mov	r0, r3
 800377e:	f000 fd35 	bl	80041ec <RCC_SetFlashLatencyFromMSIRange>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e351      	b.n	8003e30 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800378c:	f000 fc38 	bl	8004000 <HAL_RCC_GetSysClockFreq>
 8003790:	4602      	mov	r2, r0
 8003792:	4b52      	ldr	r3, [pc, #328]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	091b      	lsrs	r3, r3, #4
 8003798:	f003 030f 	and.w	r3, r3, #15
 800379c:	4950      	ldr	r1, [pc, #320]	; (80038e0 <HAL_RCC_OscConfig+0x274>)
 800379e:	5ccb      	ldrb	r3, [r1, r3]
 80037a0:	f003 031f 	and.w	r3, r3, #31
 80037a4:	fa22 f303 	lsr.w	r3, r2, r3
 80037a8:	4a4e      	ldr	r2, [pc, #312]	; (80038e4 <HAL_RCC_OscConfig+0x278>)
 80037aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80037ac:	4b4e      	ldr	r3, [pc, #312]	; (80038e8 <HAL_RCC_OscConfig+0x27c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fd ffdf 	bl	8001774 <HAL_InitTick>
 80037b6:	4603      	mov	r3, r0
 80037b8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d052      	beq.n	8003866 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	e335      	b.n	8003e30 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d032      	beq.n	8003832 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037cc:	4b43      	ldr	r3, [pc, #268]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a42      	ldr	r2, [pc, #264]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037d8:	f7fe f9a8 	bl	8001b2c <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037e0:	f7fe f9a4 	bl	8001b2c <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e31e      	b.n	8003e30 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037f2:	4b3a      	ldr	r3, [pc, #232]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037fe:	4b37      	ldr	r3, [pc, #220]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a36      	ldr	r2, [pc, #216]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003804:	f043 0308 	orr.w	r3, r3, #8
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	4b34      	ldr	r3, [pc, #208]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	4931      	ldr	r1, [pc, #196]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003818:	4313      	orrs	r3, r2
 800381a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800381c:	4b2f      	ldr	r3, [pc, #188]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	021b      	lsls	r3, r3, #8
 800382a:	492c      	ldr	r1, [pc, #176]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 800382c:	4313      	orrs	r3, r2
 800382e:	604b      	str	r3, [r1, #4]
 8003830:	e01a      	b.n	8003868 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003832:	4b2a      	ldr	r3, [pc, #168]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a29      	ldr	r2, [pc, #164]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003838:	f023 0301 	bic.w	r3, r3, #1
 800383c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800383e:	f7fe f975 	bl	8001b2c <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003846:	f7fe f971 	bl	8001b2c <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e2eb      	b.n	8003e30 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003858:	4b20      	ldr	r3, [pc, #128]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1f0      	bne.n	8003846 <HAL_RCC_OscConfig+0x1da>
 8003864:	e000      	b.n	8003868 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003866:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	d074      	beq.n	800395e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	2b08      	cmp	r3, #8
 8003878:	d005      	beq.n	8003886 <HAL_RCC_OscConfig+0x21a>
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	2b0c      	cmp	r3, #12
 800387e:	d10e      	bne.n	800389e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	2b03      	cmp	r3, #3
 8003884:	d10b      	bne.n	800389e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003886:	4b15      	ldr	r3, [pc, #84]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d064      	beq.n	800395c <HAL_RCC_OscConfig+0x2f0>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d160      	bne.n	800395c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e2c8      	b.n	8003e30 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a6:	d106      	bne.n	80038b6 <HAL_RCC_OscConfig+0x24a>
 80038a8:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a0b      	ldr	r2, [pc, #44]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 80038ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	e026      	b.n	8003904 <HAL_RCC_OscConfig+0x298>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038be:	d115      	bne.n	80038ec <HAL_RCC_OscConfig+0x280>
 80038c0:	4b06      	ldr	r3, [pc, #24]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a05      	ldr	r2, [pc, #20]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 80038c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	4b03      	ldr	r3, [pc, #12]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a02      	ldr	r2, [pc, #8]	; (80038dc <HAL_RCC_OscConfig+0x270>)
 80038d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	e014      	b.n	8003904 <HAL_RCC_OscConfig+0x298>
 80038da:	bf00      	nop
 80038dc:	40021000 	.word	0x40021000
 80038e0:	0800e0c8 	.word	0x0800e0c8
 80038e4:	20000000 	.word	0x20000000
 80038e8:	20000004 	.word	0x20000004
 80038ec:	4ba0      	ldr	r3, [pc, #640]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a9f      	ldr	r2, [pc, #636]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 80038f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	4b9d      	ldr	r3, [pc, #628]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a9c      	ldr	r2, [pc, #624]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 80038fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d013      	beq.n	8003934 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390c:	f7fe f90e 	bl	8001b2c <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003914:	f7fe f90a 	bl	8001b2c <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b64      	cmp	r3, #100	; 0x64
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e284      	b.n	8003e30 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003926:	4b92      	ldr	r3, [pc, #584]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0x2a8>
 8003932:	e014      	b.n	800395e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003934:	f7fe f8fa 	bl	8001b2c <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800393c:	f7fe f8f6 	bl	8001b2c <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b64      	cmp	r3, #100	; 0x64
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e270      	b.n	8003e30 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800394e:	4b88      	ldr	r3, [pc, #544]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x2d0>
 800395a:	e000      	b.n	800395e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800395c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d060      	beq.n	8003a2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	2b04      	cmp	r3, #4
 800396e:	d005      	beq.n	800397c <HAL_RCC_OscConfig+0x310>
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	2b0c      	cmp	r3, #12
 8003974:	d119      	bne.n	80039aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2b02      	cmp	r3, #2
 800397a:	d116      	bne.n	80039aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800397c:	4b7c      	ldr	r3, [pc, #496]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <HAL_RCC_OscConfig+0x328>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e24d      	b.n	8003e30 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003994:	4b76      	ldr	r3, [pc, #472]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	061b      	lsls	r3, r3, #24
 80039a2:	4973      	ldr	r1, [pc, #460]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039a8:	e040      	b.n	8003a2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d023      	beq.n	80039fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b2:	4b6f      	ldr	r3, [pc, #444]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a6e      	ldr	r2, [pc, #440]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 80039b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039be:	f7fe f8b5 	bl	8001b2c <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039c6:	f7fe f8b1 	bl	8001b2c <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e22b      	b.n	8003e30 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039d8:	4b65      	ldr	r3, [pc, #404]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0f0      	beq.n	80039c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e4:	4b62      	ldr	r3, [pc, #392]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	061b      	lsls	r3, r3, #24
 80039f2:	495f      	ldr	r1, [pc, #380]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	604b      	str	r3, [r1, #4]
 80039f8:	e018      	b.n	8003a2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039fa:	4b5d      	ldr	r3, [pc, #372]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a5c      	ldr	r2, [pc, #368]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a06:	f7fe f891 	bl	8001b2c <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a0e:	f7fe f88d 	bl	8001b2c <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e207      	b.n	8003e30 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a20:	4b53      	ldr	r3, [pc, #332]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1f0      	bne.n	8003a0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d03c      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01c      	beq.n	8003a7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a40:	4b4b      	ldr	r3, [pc, #300]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a46:	4a4a      	ldr	r2, [pc, #296]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a50:	f7fe f86c 	bl	8001b2c <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a58:	f7fe f868 	bl	8001b2c <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e1e2      	b.n	8003e30 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a6a:	4b41      	ldr	r3, [pc, #260]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0ef      	beq.n	8003a58 <HAL_RCC_OscConfig+0x3ec>
 8003a78:	e01b      	b.n	8003ab2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a7a:	4b3d      	ldr	r3, [pc, #244]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a80:	4a3b      	ldr	r2, [pc, #236]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003a82:	f023 0301 	bic.w	r3, r3, #1
 8003a86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8a:	f7fe f84f 	bl	8001b2c <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a92:	f7fe f84b 	bl	8001b2c <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e1c5      	b.n	8003e30 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003aa4:	4b32      	ldr	r3, [pc, #200]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1ef      	bne.n	8003a92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 80a6 	beq.w	8003c0c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ac4:	4b2a      	ldr	r3, [pc, #168]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10d      	bne.n	8003aec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad0:	4b27      	ldr	r3, [pc, #156]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad4:	4a26      	ldr	r2, [pc, #152]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ada:	6593      	str	r3, [r2, #88]	; 0x58
 8003adc:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aec:	4b21      	ldr	r3, [pc, #132]	; (8003b74 <HAL_RCC_OscConfig+0x508>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d118      	bne.n	8003b2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003af8:	4b1e      	ldr	r3, [pc, #120]	; (8003b74 <HAL_RCC_OscConfig+0x508>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a1d      	ldr	r2, [pc, #116]	; (8003b74 <HAL_RCC_OscConfig+0x508>)
 8003afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b04:	f7fe f812 	bl	8001b2c <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b0c:	f7fe f80e 	bl	8001b2c <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e188      	b.n	8003e30 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b1e:	4b15      	ldr	r3, [pc, #84]	; (8003b74 <HAL_RCC_OscConfig+0x508>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d108      	bne.n	8003b44 <HAL_RCC_OscConfig+0x4d8>
 8003b32:	4b0f      	ldr	r3, [pc, #60]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b38:	4a0d      	ldr	r2, [pc, #52]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b42:	e029      	b.n	8003b98 <HAL_RCC_OscConfig+0x52c>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b05      	cmp	r3, #5
 8003b4a:	d115      	bne.n	8003b78 <HAL_RCC_OscConfig+0x50c>
 8003b4c:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b52:	4a07      	ldr	r2, [pc, #28]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003b54:	f043 0304 	orr.w	r3, r3, #4
 8003b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b5c:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b62:	4a03      	ldr	r2, [pc, #12]	; (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b6c:	e014      	b.n	8003b98 <HAL_RCC_OscConfig+0x52c>
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000
 8003b74:	40007000 	.word	0x40007000
 8003b78:	4b91      	ldr	r3, [pc, #580]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7e:	4a90      	ldr	r2, [pc, #576]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003b80:	f023 0301 	bic.w	r3, r3, #1
 8003b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b88:	4b8d      	ldr	r3, [pc, #564]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8e:	4a8c      	ldr	r2, [pc, #560]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003b90:	f023 0304 	bic.w	r3, r3, #4
 8003b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d016      	beq.n	8003bce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba0:	f7fd ffc4 	bl	8001b2c <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ba6:	e00a      	b.n	8003bbe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba8:	f7fd ffc0 	bl	8001b2c <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e138      	b.n	8003e30 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bbe:	4b80      	ldr	r3, [pc, #512]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0ed      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x53c>
 8003bcc:	e015      	b.n	8003bfa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bce:	f7fd ffad 	bl	8001b2c <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bd4:	e00a      	b.n	8003bec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd6:	f7fd ffa9 	bl	8001b2c <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e121      	b.n	8003e30 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bec:	4b74      	ldr	r3, [pc, #464]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1ed      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bfa:	7ffb      	ldrb	r3, [r7, #31]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d105      	bne.n	8003c0c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c00:	4b6f      	ldr	r3, [pc, #444]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c04:	4a6e      	ldr	r2, [pc, #440]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c0a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 810c 	beq.w	8003e2e <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	f040 80d4 	bne.w	8003dc8 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c20:	4b67      	ldr	r3, [pc, #412]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f003 0203 	and.w	r2, r3, #3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d130      	bne.n	8003c96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d127      	bne.n	8003c96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c50:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d11f      	bne.n	8003c96 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c60:	2a07      	cmp	r2, #7
 8003c62:	bf14      	ite	ne
 8003c64:	2201      	movne	r2, #1
 8003c66:	2200      	moveq	r2, #0
 8003c68:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d113      	bne.n	8003c96 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c78:	085b      	lsrs	r3, r3, #1
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d109      	bne.n	8003c96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	085b      	lsrs	r3, r3, #1
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d06e      	beq.n	8003d74 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	2b0c      	cmp	r3, #12
 8003c9a:	d069      	beq.n	8003d70 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c9c:	4b48      	ldr	r3, [pc, #288]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d105      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ca8:	4b45      	ldr	r3, [pc, #276]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0bb      	b.n	8003e30 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003cb8:	4b41      	ldr	r3, [pc, #260]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a40      	ldr	r2, [pc, #256]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003cbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cc2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cc4:	f7fd ff32 	bl	8001b2c <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ccc:	f7fd ff2e 	bl	8001b2c <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e0a8      	b.n	8003e30 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cde:	4b38      	ldr	r3, [pc, #224]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cea:	4b35      	ldr	r3, [pc, #212]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	4b35      	ldr	r3, [pc, #212]	; (8003dc4 <HAL_RCC_OscConfig+0x758>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003cfa:	3a01      	subs	r2, #1
 8003cfc:	0112      	lsls	r2, r2, #4
 8003cfe:	4311      	orrs	r1, r2
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d04:	0212      	lsls	r2, r2, #8
 8003d06:	4311      	orrs	r1, r2
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d0c:	0852      	lsrs	r2, r2, #1
 8003d0e:	3a01      	subs	r2, #1
 8003d10:	0552      	lsls	r2, r2, #21
 8003d12:	4311      	orrs	r1, r2
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d18:	0852      	lsrs	r2, r2, #1
 8003d1a:	3a01      	subs	r2, #1
 8003d1c:	0652      	lsls	r2, r2, #25
 8003d1e:	4311      	orrs	r1, r2
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d24:	0912      	lsrs	r2, r2, #4
 8003d26:	0452      	lsls	r2, r2, #17
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	4925      	ldr	r1, [pc, #148]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d30:	4b23      	ldr	r3, [pc, #140]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a22      	ldr	r2, [pc, #136]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003d36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d3c:	4b20      	ldr	r3, [pc, #128]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	4a1f      	ldr	r2, [pc, #124]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d48:	f7fd fef0 	bl	8001b2c <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d50:	f7fd feec 	bl	8001b2c <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e066      	b.n	8003e30 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d62:	4b17      	ldr	r3, [pc, #92]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0f0      	beq.n	8003d50 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d6e:	e05e      	b.n	8003e2e <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e05d      	b.n	8003e30 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d74:	4b12      	ldr	r3, [pc, #72]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d156      	bne.n	8003e2e <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d80:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a0e      	ldr	r2, [pc, #56]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	4a0b      	ldr	r2, [pc, #44]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d98:	f7fd fec8 	bl	8001b2c <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da0:	f7fd fec4 	bl	8001b2c <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e03e      	b.n	8003e30 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003db2:	4b03      	ldr	r3, [pc, #12]	; (8003dc0 <HAL_RCC_OscConfig+0x754>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0f0      	beq.n	8003da0 <HAL_RCC_OscConfig+0x734>
 8003dbe:	e036      	b.n	8003e2e <HAL_RCC_OscConfig+0x7c2>
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	2b0c      	cmp	r3, #12
 8003dcc:	d02d      	beq.n	8003e2a <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dce:	4b1a      	ldr	r3, [pc, #104]	; (8003e38 <HAL_RCC_OscConfig+0x7cc>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a19      	ldr	r2, [pc, #100]	; (8003e38 <HAL_RCC_OscConfig+0x7cc>)
 8003dd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dd8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003dda:	4b17      	ldr	r3, [pc, #92]	; (8003e38 <HAL_RCC_OscConfig+0x7cc>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d105      	bne.n	8003df2 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003de6:	4b14      	ldr	r3, [pc, #80]	; (8003e38 <HAL_RCC_OscConfig+0x7cc>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	4a13      	ldr	r2, [pc, #76]	; (8003e38 <HAL_RCC_OscConfig+0x7cc>)
 8003dec:	f023 0303 	bic.w	r3, r3, #3
 8003df0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003df2:	4b11      	ldr	r3, [pc, #68]	; (8003e38 <HAL_RCC_OscConfig+0x7cc>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	4a10      	ldr	r2, [pc, #64]	; (8003e38 <HAL_RCC_OscConfig+0x7cc>)
 8003df8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e00:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e02:	f7fd fe93 	bl	8001b2c <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e08:	e008      	b.n	8003e1c <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e0a:	f7fd fe8f 	bl	8001b2c <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e009      	b.n	8003e30 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e1c:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <HAL_RCC_OscConfig+0x7cc>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1f0      	bne.n	8003e0a <HAL_RCC_OscConfig+0x79e>
 8003e28:	e001      	b.n	8003e2e <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e000      	b.n	8003e30 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3720      	adds	r7, #32
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40021000 	.word	0x40021000

08003e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e0c8      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e50:	4b66      	ldr	r3, [pc, #408]	; (8003fec <HAL_RCC_ClockConfig+0x1b0>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d910      	bls.n	8003e80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5e:	4b63      	ldr	r3, [pc, #396]	; (8003fec <HAL_RCC_ClockConfig+0x1b0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f023 0207 	bic.w	r2, r3, #7
 8003e66:	4961      	ldr	r1, [pc, #388]	; (8003fec <HAL_RCC_ClockConfig+0x1b0>)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6e:	4b5f      	ldr	r3, [pc, #380]	; (8003fec <HAL_RCC_ClockConfig+0x1b0>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e0b0      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d04c      	beq.n	8003f26 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d107      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e94:	4b56      	ldr	r3, [pc, #344]	; (8003ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d121      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e09e      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d107      	bne.n	8003ebc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eac:	4b50      	ldr	r3, [pc, #320]	; (8003ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d115      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e092      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d107      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ec4:	4b4a      	ldr	r3, [pc, #296]	; (8003ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d109      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e086      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ed4:	4b46      	ldr	r3, [pc, #280]	; (8003ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e07e      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ee4:	4b42      	ldr	r3, [pc, #264]	; (8003ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f023 0203 	bic.w	r2, r3, #3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	493f      	ldr	r1, [pc, #252]	; (8003ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ef6:	f7fd fe19 	bl	8001b2c <HAL_GetTick>
 8003efa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efc:	e00a      	b.n	8003f14 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003efe:	f7fd fe15 	bl	8001b2c <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e066      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f14:	4b36      	ldr	r3, [pc, #216]	; (8003ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 020c 	and.w	r2, r3, #12
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d1eb      	bne.n	8003efe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d008      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f32:	4b2f      	ldr	r3, [pc, #188]	; (8003ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	492c      	ldr	r1, [pc, #176]	; (8003ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f44:	4b29      	ldr	r3, [pc, #164]	; (8003fec <HAL_RCC_ClockConfig+0x1b0>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d210      	bcs.n	8003f74 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f52:	4b26      	ldr	r3, [pc, #152]	; (8003fec <HAL_RCC_ClockConfig+0x1b0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f023 0207 	bic.w	r2, r3, #7
 8003f5a:	4924      	ldr	r1, [pc, #144]	; (8003fec <HAL_RCC_ClockConfig+0x1b0>)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f62:	4b22      	ldr	r3, [pc, #136]	; (8003fec <HAL_RCC_ClockConfig+0x1b0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e036      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f80:	4b1b      	ldr	r3, [pc, #108]	; (8003ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	4918      	ldr	r1, [pc, #96]	; (8003ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d009      	beq.n	8003fb2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f9e:	4b14      	ldr	r3, [pc, #80]	; (8003ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4910      	ldr	r1, [pc, #64]	; (8003ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fb2:	f000 f825 	bl	8004000 <HAL_RCC_GetSysClockFreq>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	4b0d      	ldr	r3, [pc, #52]	; (8003ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	091b      	lsrs	r3, r3, #4
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	490c      	ldr	r1, [pc, #48]	; (8003ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc4:	5ccb      	ldrb	r3, [r1, r3]
 8003fc6:	f003 031f 	and.w	r3, r3, #31
 8003fca:	fa22 f303 	lsr.w	r3, r2, r3
 8003fce:	4a0a      	ldr	r2, [pc, #40]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003fd2:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <HAL_RCC_ClockConfig+0x1c0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fd fbcc 	bl	8001774 <HAL_InitTick>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	72fb      	strb	r3, [r7, #11]

  return status;
 8003fe0:	7afb      	ldrb	r3, [r7, #11]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	40022000 	.word	0x40022000
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	0800e0c8 	.word	0x0800e0c8
 8003ff8:	20000000 	.word	0x20000000
 8003ffc:	20000004 	.word	0x20000004

08004000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004000:	b480      	push	{r7}
 8004002:	b089      	sub	sp, #36	; 0x24
 8004004:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	61fb      	str	r3, [r7, #28]
 800400a:	2300      	movs	r3, #0
 800400c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800400e:	4b3e      	ldr	r3, [pc, #248]	; (8004108 <HAL_RCC_GetSysClockFreq+0x108>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 030c 	and.w	r3, r3, #12
 8004016:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004018:	4b3b      	ldr	r3, [pc, #236]	; (8004108 <HAL_RCC_GetSysClockFreq+0x108>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f003 0303 	and.w	r3, r3, #3
 8004020:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <HAL_RCC_GetSysClockFreq+0x34>
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	2b0c      	cmp	r3, #12
 800402c:	d121      	bne.n	8004072 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d11e      	bne.n	8004072 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004034:	4b34      	ldr	r3, [pc, #208]	; (8004108 <HAL_RCC_GetSysClockFreq+0x108>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b00      	cmp	r3, #0
 800403e:	d107      	bne.n	8004050 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004040:	4b31      	ldr	r3, [pc, #196]	; (8004108 <HAL_RCC_GetSysClockFreq+0x108>)
 8004042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004046:	0a1b      	lsrs	r3, r3, #8
 8004048:	f003 030f 	and.w	r3, r3, #15
 800404c:	61fb      	str	r3, [r7, #28]
 800404e:	e005      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004050:	4b2d      	ldr	r3, [pc, #180]	; (8004108 <HAL_RCC_GetSysClockFreq+0x108>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	091b      	lsrs	r3, r3, #4
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800405c:	4a2b      	ldr	r2, [pc, #172]	; (800410c <HAL_RCC_GetSysClockFreq+0x10c>)
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004064:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10d      	bne.n	8004088 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004070:	e00a      	b.n	8004088 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	2b04      	cmp	r3, #4
 8004076:	d102      	bne.n	800407e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004078:	4b25      	ldr	r3, [pc, #148]	; (8004110 <HAL_RCC_GetSysClockFreq+0x110>)
 800407a:	61bb      	str	r3, [r7, #24]
 800407c:	e004      	b.n	8004088 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	2b08      	cmp	r3, #8
 8004082:	d101      	bne.n	8004088 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004084:	4b23      	ldr	r3, [pc, #140]	; (8004114 <HAL_RCC_GetSysClockFreq+0x114>)
 8004086:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	2b0c      	cmp	r3, #12
 800408c:	d134      	bne.n	80040f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800408e:	4b1e      	ldr	r3, [pc, #120]	; (8004108 <HAL_RCC_GetSysClockFreq+0x108>)
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b02      	cmp	r3, #2
 800409c:	d003      	beq.n	80040a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2b03      	cmp	r3, #3
 80040a2:	d003      	beq.n	80040ac <HAL_RCC_GetSysClockFreq+0xac>
 80040a4:	e005      	b.n	80040b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040a6:	4b1a      	ldr	r3, [pc, #104]	; (8004110 <HAL_RCC_GetSysClockFreq+0x110>)
 80040a8:	617b      	str	r3, [r7, #20]
      break;
 80040aa:	e005      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040ac:	4b19      	ldr	r3, [pc, #100]	; (8004114 <HAL_RCC_GetSysClockFreq+0x114>)
 80040ae:	617b      	str	r3, [r7, #20]
      break;
 80040b0:	e002      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	617b      	str	r3, [r7, #20]
      break;
 80040b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040b8:	4b13      	ldr	r3, [pc, #76]	; (8004108 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	091b      	lsrs	r3, r3, #4
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	3301      	adds	r3, #1
 80040c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040c6:	4b10      	ldr	r3, [pc, #64]	; (8004108 <HAL_RCC_GetSysClockFreq+0x108>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	0a1b      	lsrs	r3, r3, #8
 80040cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	fb03 f202 	mul.w	r2, r3, r2
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040de:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <HAL_RCC_GetSysClockFreq+0x108>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	0e5b      	lsrs	r3, r3, #25
 80040e4:	f003 0303 	and.w	r3, r3, #3
 80040e8:	3301      	adds	r3, #1
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040f8:	69bb      	ldr	r3, [r7, #24]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3724      	adds	r7, #36	; 0x24
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40021000 	.word	0x40021000
 800410c:	0800e0e0 	.word	0x0800e0e0
 8004110:	00f42400 	.word	0x00f42400
 8004114:	007a1200 	.word	0x007a1200

08004118 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800411c:	4b03      	ldr	r3, [pc, #12]	; (800412c <HAL_RCC_GetHCLKFreq+0x14>)
 800411e:	681b      	ldr	r3, [r3, #0]
}
 8004120:	4618      	mov	r0, r3
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	20000000 	.word	0x20000000

08004130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004134:	f7ff fff0 	bl	8004118 <HAL_RCC_GetHCLKFreq>
 8004138:	4602      	mov	r2, r0
 800413a:	4b06      	ldr	r3, [pc, #24]	; (8004154 <HAL_RCC_GetPCLK1Freq+0x24>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	0a1b      	lsrs	r3, r3, #8
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	4904      	ldr	r1, [pc, #16]	; (8004158 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004146:	5ccb      	ldrb	r3, [r1, r3]
 8004148:	f003 031f 	and.w	r3, r3, #31
 800414c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004150:	4618      	mov	r0, r3
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40021000 	.word	0x40021000
 8004158:	0800e0d8 	.word	0x0800e0d8

0800415c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004160:	f7ff ffda 	bl	8004118 <HAL_RCC_GetHCLKFreq>
 8004164:	4602      	mov	r2, r0
 8004166:	4b06      	ldr	r3, [pc, #24]	; (8004180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	0adb      	lsrs	r3, r3, #11
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	4904      	ldr	r1, [pc, #16]	; (8004184 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004172:	5ccb      	ldrb	r3, [r1, r3]
 8004174:	f003 031f 	and.w	r3, r3, #31
 8004178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800417c:	4618      	mov	r0, r3
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40021000 	.word	0x40021000
 8004184:	0800e0d8 	.word	0x0800e0d8

08004188 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	220f      	movs	r2, #15
 8004196:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004198:	4b12      	ldr	r3, [pc, #72]	; (80041e4 <HAL_RCC_GetClockConfig+0x5c>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 0203 	and.w	r2, r3, #3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80041a4:	4b0f      	ldr	r3, [pc, #60]	; (80041e4 <HAL_RCC_GetClockConfig+0x5c>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80041b0:	4b0c      	ldr	r3, [pc, #48]	; (80041e4 <HAL_RCC_GetClockConfig+0x5c>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80041bc:	4b09      	ldr	r3, [pc, #36]	; (80041e4 <HAL_RCC_GetClockConfig+0x5c>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	08db      	lsrs	r3, r3, #3
 80041c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80041ca:	4b07      	ldr	r3, [pc, #28]	; (80041e8 <HAL_RCC_GetClockConfig+0x60>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0207 	and.w	r2, r3, #7
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	601a      	str	r2, [r3, #0]
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40021000 	.word	0x40021000
 80041e8:	40022000 	.word	0x40022000

080041ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041f4:	2300      	movs	r3, #0
 80041f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041f8:	4b2a      	ldr	r3, [pc, #168]	; (80042a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004204:	f7ff f902 	bl	800340c <HAL_PWREx_GetVoltageRange>
 8004208:	6178      	str	r0, [r7, #20]
 800420a:	e014      	b.n	8004236 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800420c:	4b25      	ldr	r3, [pc, #148]	; (80042a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800420e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004210:	4a24      	ldr	r2, [pc, #144]	; (80042a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004216:	6593      	str	r3, [r2, #88]	; 0x58
 8004218:	4b22      	ldr	r3, [pc, #136]	; (80042a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800421a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004224:	f7ff f8f2 	bl	800340c <HAL_PWREx_GetVoltageRange>
 8004228:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800422a:	4b1e      	ldr	r3, [pc, #120]	; (80042a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800422c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422e:	4a1d      	ldr	r2, [pc, #116]	; (80042a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004234:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800423c:	d10b      	bne.n	8004256 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b80      	cmp	r3, #128	; 0x80
 8004242:	d919      	bls.n	8004278 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2ba0      	cmp	r3, #160	; 0xa0
 8004248:	d902      	bls.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800424a:	2302      	movs	r3, #2
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	e013      	b.n	8004278 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004250:	2301      	movs	r3, #1
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	e010      	b.n	8004278 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b80      	cmp	r3, #128	; 0x80
 800425a:	d902      	bls.n	8004262 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800425c:	2303      	movs	r3, #3
 800425e:	613b      	str	r3, [r7, #16]
 8004260:	e00a      	b.n	8004278 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b80      	cmp	r3, #128	; 0x80
 8004266:	d102      	bne.n	800426e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004268:	2302      	movs	r3, #2
 800426a:	613b      	str	r3, [r7, #16]
 800426c:	e004      	b.n	8004278 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b70      	cmp	r3, #112	; 0x70
 8004272:	d101      	bne.n	8004278 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004274:	2301      	movs	r3, #1
 8004276:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004278:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f023 0207 	bic.w	r2, r3, #7
 8004280:	4909      	ldr	r1, [pc, #36]	; (80042a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004288:	4b07      	ldr	r3, [pc, #28]	; (80042a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	429a      	cmp	r2, r3
 8004294:	d001      	beq.n	800429a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40021000 	.word	0x40021000
 80042a8:	40022000 	.word	0x40022000

080042ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042b4:	2300      	movs	r3, #0
 80042b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042b8:	2300      	movs	r3, #0
 80042ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d041      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042d0:	d02a      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80042d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042d6:	d824      	bhi.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042dc:	d008      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80042de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042e2:	d81e      	bhi.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80042e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ec:	d010      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80042ee:	e018      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042f0:	4b86      	ldr	r3, [pc, #536]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	4a85      	ldr	r2, [pc, #532]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042fc:	e015      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3304      	adds	r3, #4
 8004302:	2100      	movs	r1, #0
 8004304:	4618      	mov	r0, r3
 8004306:	f000 facb 	bl	80048a0 <RCCEx_PLLSAI1_Config>
 800430a:	4603      	mov	r3, r0
 800430c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800430e:	e00c      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3320      	adds	r3, #32
 8004314:	2100      	movs	r1, #0
 8004316:	4618      	mov	r0, r3
 8004318:	f000 fbb6 	bl	8004a88 <RCCEx_PLLSAI2_Config>
 800431c:	4603      	mov	r3, r0
 800431e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004320:	e003      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	74fb      	strb	r3, [r7, #19]
      break;
 8004326:	e000      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004328:	bf00      	nop
    }

    if(ret == HAL_OK)
 800432a:	7cfb      	ldrb	r3, [r7, #19]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10b      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004330:	4b76      	ldr	r3, [pc, #472]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004336:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800433e:	4973      	ldr	r1, [pc, #460]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004340:	4313      	orrs	r3, r2
 8004342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004346:	e001      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004348:	7cfb      	ldrb	r3, [r7, #19]
 800434a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d041      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800435c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004360:	d02a      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004362:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004366:	d824      	bhi.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004368:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800436c:	d008      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800436e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004372:	d81e      	bhi.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800437c:	d010      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800437e:	e018      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004380:	4b62      	ldr	r3, [pc, #392]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	4a61      	ldr	r2, [pc, #388]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800438a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800438c:	e015      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3304      	adds	r3, #4
 8004392:	2100      	movs	r1, #0
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fa83 	bl	80048a0 <RCCEx_PLLSAI1_Config>
 800439a:	4603      	mov	r3, r0
 800439c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800439e:	e00c      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3320      	adds	r3, #32
 80043a4:	2100      	movs	r1, #0
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 fb6e 	bl	8004a88 <RCCEx_PLLSAI2_Config>
 80043ac:	4603      	mov	r3, r0
 80043ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043b0:	e003      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	74fb      	strb	r3, [r7, #19]
      break;
 80043b6:	e000      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80043b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ba:	7cfb      	ldrb	r3, [r7, #19]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10b      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043c0:	4b52      	ldr	r3, [pc, #328]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043ce:	494f      	ldr	r1, [pc, #316]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043d6:	e001      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d8:	7cfb      	ldrb	r3, [r7, #19]
 80043da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 80a0 	beq.w	800452a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ea:	2300      	movs	r3, #0
 80043ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043ee:	4b47      	ldr	r3, [pc, #284]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80043fe:	2300      	movs	r3, #0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00d      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004404:	4b41      	ldr	r3, [pc, #260]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004408:	4a40      	ldr	r2, [pc, #256]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800440a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800440e:	6593      	str	r3, [r2, #88]	; 0x58
 8004410:	4b3e      	ldr	r3, [pc, #248]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004418:	60bb      	str	r3, [r7, #8]
 800441a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800441c:	2301      	movs	r3, #1
 800441e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004420:	4b3b      	ldr	r3, [pc, #236]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a3a      	ldr	r2, [pc, #232]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800442a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800442c:	f7fd fb7e 	bl	8001b2c <HAL_GetTick>
 8004430:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004432:	e009      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004434:	f7fd fb7a 	bl	8001b2c <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d902      	bls.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	74fb      	strb	r3, [r7, #19]
        break;
 8004446:	e005      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004448:	4b31      	ldr	r3, [pc, #196]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0ef      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004454:	7cfb      	ldrb	r3, [r7, #19]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d15c      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800445a:	4b2c      	ldr	r3, [pc, #176]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004460:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004464:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d01f      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	429a      	cmp	r2, r3
 8004476:	d019      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004478:	4b24      	ldr	r3, [pc, #144]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800447a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004482:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004484:	4b21      	ldr	r3, [pc, #132]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448a:	4a20      	ldr	r2, [pc, #128]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800448c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004494:	4b1d      	ldr	r3, [pc, #116]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449a:	4a1c      	ldr	r2, [pc, #112]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800449c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044a4:	4a19      	ldr	r2, [pc, #100]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d016      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b6:	f7fd fb39 	bl	8001b2c <HAL_GetTick>
 80044ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044bc:	e00b      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044be:	f7fd fb35 	bl	8001b2c <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d902      	bls.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	74fb      	strb	r3, [r7, #19]
            break;
 80044d4:	e006      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044d6:	4b0d      	ldr	r3, [pc, #52]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0ec      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80044e4:	7cfb      	ldrb	r3, [r7, #19]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10c      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044ea:	4b08      	ldr	r3, [pc, #32]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044fa:	4904      	ldr	r1, [pc, #16]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004502:	e009      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004504:	7cfb      	ldrb	r3, [r7, #19]
 8004506:	74bb      	strb	r3, [r7, #18]
 8004508:	e006      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800450a:	bf00      	nop
 800450c:	40021000 	.word	0x40021000
 8004510:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004514:	7cfb      	ldrb	r3, [r7, #19]
 8004516:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004518:	7c7b      	ldrb	r3, [r7, #17]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d105      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800451e:	4b9e      	ldr	r3, [pc, #632]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004522:	4a9d      	ldr	r2, [pc, #628]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004528:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004536:	4b98      	ldr	r3, [pc, #608]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453c:	f023 0203 	bic.w	r2, r3, #3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	4994      	ldr	r1, [pc, #592]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004546:	4313      	orrs	r3, r2
 8004548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004558:	4b8f      	ldr	r3, [pc, #572]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455e:	f023 020c 	bic.w	r2, r3, #12
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004566:	498c      	ldr	r1, [pc, #560]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800457a:	4b87      	ldr	r3, [pc, #540]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004580:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	4983      	ldr	r1, [pc, #524]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800459c:	4b7e      	ldr	r3, [pc, #504]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045aa:	497b      	ldr	r1, [pc, #492]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0310 	and.w	r3, r3, #16
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045be:	4b76      	ldr	r3, [pc, #472]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045cc:	4972      	ldr	r1, [pc, #456]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0320 	and.w	r3, r3, #32
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045e0:	4b6d      	ldr	r3, [pc, #436]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ee:	496a      	ldr	r1, [pc, #424]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004602:	4b65      	ldr	r3, [pc, #404]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004608:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004610:	4961      	ldr	r1, [pc, #388]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004624:	4b5c      	ldr	r3, [pc, #368]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004632:	4959      	ldr	r1, [pc, #356]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004646:	4b54      	ldr	r3, [pc, #336]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004654:	4950      	ldr	r1, [pc, #320]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004668:	4b4b      	ldr	r3, [pc, #300]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004676:	4948      	ldr	r1, [pc, #288]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004678:	4313      	orrs	r3, r2
 800467a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800468a:	4b43      	ldr	r3, [pc, #268]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004690:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004698:	493f      	ldr	r1, [pc, #252]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d028      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046ac:	4b3a      	ldr	r3, [pc, #232]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ba:	4937      	ldr	r1, [pc, #220]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046ca:	d106      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046cc:	4b32      	ldr	r3, [pc, #200]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4a31      	ldr	r2, [pc, #196]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046d6:	60d3      	str	r3, [r2, #12]
 80046d8:	e011      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046e2:	d10c      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3304      	adds	r3, #4
 80046e8:	2101      	movs	r1, #1
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 f8d8 	bl	80048a0 <RCCEx_PLLSAI1_Config>
 80046f0:	4603      	mov	r3, r0
 80046f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046f4:	7cfb      	ldrb	r3, [r7, #19]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80046fa:	7cfb      	ldrb	r3, [r7, #19]
 80046fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d028      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800470a:	4b23      	ldr	r3, [pc, #140]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800470c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004710:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004718:	491f      	ldr	r1, [pc, #124]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004724:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004728:	d106      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800472a:	4b1b      	ldr	r3, [pc, #108]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	4a1a      	ldr	r2, [pc, #104]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004730:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004734:	60d3      	str	r3, [r2, #12]
 8004736:	e011      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004740:	d10c      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	3304      	adds	r3, #4
 8004746:	2101      	movs	r1, #1
 8004748:	4618      	mov	r0, r3
 800474a:	f000 f8a9 	bl	80048a0 <RCCEx_PLLSAI1_Config>
 800474e:	4603      	mov	r3, r0
 8004750:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004752:	7cfb      	ldrb	r3, [r7, #19]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004758:	7cfb      	ldrb	r3, [r7, #19]
 800475a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d02b      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004768:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004776:	4908      	ldr	r1, [pc, #32]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004782:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004786:	d109      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004788:	4b03      	ldr	r3, [pc, #12]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	4a02      	ldr	r2, [pc, #8]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004792:	60d3      	str	r3, [r2, #12]
 8004794:	e014      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004796:	bf00      	nop
 8004798:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047a4:	d10c      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	3304      	adds	r3, #4
 80047aa:	2101      	movs	r1, #1
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 f877 	bl	80048a0 <RCCEx_PLLSAI1_Config>
 80047b2:	4603      	mov	r3, r0
 80047b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047b6:	7cfb      	ldrb	r3, [r7, #19]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80047bc:	7cfb      	ldrb	r3, [r7, #19]
 80047be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d02f      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047cc:	4b2b      	ldr	r3, [pc, #172]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047da:	4928      	ldr	r1, [pc, #160]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047ea:	d10d      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3304      	adds	r3, #4
 80047f0:	2102      	movs	r1, #2
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 f854 	bl	80048a0 <RCCEx_PLLSAI1_Config>
 80047f8:	4603      	mov	r3, r0
 80047fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047fc:	7cfb      	ldrb	r3, [r7, #19]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d014      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004802:	7cfb      	ldrb	r3, [r7, #19]
 8004804:	74bb      	strb	r3, [r7, #18]
 8004806:	e011      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800480c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004810:	d10c      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3320      	adds	r3, #32
 8004816:	2102      	movs	r1, #2
 8004818:	4618      	mov	r0, r3
 800481a:	f000 f935 	bl	8004a88 <RCCEx_PLLSAI2_Config>
 800481e:	4603      	mov	r3, r0
 8004820:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004822:	7cfb      	ldrb	r3, [r7, #19]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004828:	7cfb      	ldrb	r3, [r7, #19]
 800482a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004838:	4b10      	ldr	r3, [pc, #64]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800483a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004846:	490d      	ldr	r1, [pc, #52]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00b      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800485a:	4b08      	ldr	r3, [pc, #32]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800485c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004860:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800486a:	4904      	ldr	r1, [pc, #16]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004872:	7cbb      	ldrb	r3, [r7, #18]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3718      	adds	r7, #24
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40021000 	.word	0x40021000

08004880 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004884:	4b05      	ldr	r3, [pc, #20]	; (800489c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a04      	ldr	r2, [pc, #16]	; (800489c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800488a:	f043 0304 	orr.w	r3, r3, #4
 800488e:	6013      	str	r3, [r2, #0]
}
 8004890:	bf00      	nop
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	40021000 	.word	0x40021000

080048a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048ae:	4b75      	ldr	r3, [pc, #468]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d018      	beq.n	80048ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048ba:	4b72      	ldr	r3, [pc, #456]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f003 0203 	and.w	r2, r3, #3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d10d      	bne.n	80048e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
       ||
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d009      	beq.n	80048e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80048d2:	4b6c      	ldr	r3, [pc, #432]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	091b      	lsrs	r3, r3, #4
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
       ||
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d047      	beq.n	8004976 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	73fb      	strb	r3, [r7, #15]
 80048ea:	e044      	b.n	8004976 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b03      	cmp	r3, #3
 80048f2:	d018      	beq.n	8004926 <RCCEx_PLLSAI1_Config+0x86>
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d825      	bhi.n	8004944 <RCCEx_PLLSAI1_Config+0xa4>
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d002      	beq.n	8004902 <RCCEx_PLLSAI1_Config+0x62>
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d009      	beq.n	8004914 <RCCEx_PLLSAI1_Config+0x74>
 8004900:	e020      	b.n	8004944 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004902:	4b60      	ldr	r3, [pc, #384]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d11d      	bne.n	800494a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004912:	e01a      	b.n	800494a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004914:	4b5b      	ldr	r3, [pc, #364]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800491c:	2b00      	cmp	r3, #0
 800491e:	d116      	bne.n	800494e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004924:	e013      	b.n	800494e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004926:	4b57      	ldr	r3, [pc, #348]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10f      	bne.n	8004952 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004932:	4b54      	ldr	r3, [pc, #336]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d109      	bne.n	8004952 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004942:	e006      	b.n	8004952 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	73fb      	strb	r3, [r7, #15]
      break;
 8004948:	e004      	b.n	8004954 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800494a:	bf00      	nop
 800494c:	e002      	b.n	8004954 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800494e:	bf00      	nop
 8004950:	e000      	b.n	8004954 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004952:	bf00      	nop
    }

    if(status == HAL_OK)
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10d      	bne.n	8004976 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800495a:	4b4a      	ldr	r3, [pc, #296]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6819      	ldr	r1, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	3b01      	subs	r3, #1
 800496c:	011b      	lsls	r3, r3, #4
 800496e:	430b      	orrs	r3, r1
 8004970:	4944      	ldr	r1, [pc, #272]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004972:	4313      	orrs	r3, r2
 8004974:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004976:	7bfb      	ldrb	r3, [r7, #15]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d17d      	bne.n	8004a78 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800497c:	4b41      	ldr	r3, [pc, #260]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a40      	ldr	r2, [pc, #256]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004982:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004986:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004988:	f7fd f8d0 	bl	8001b2c <HAL_GetTick>
 800498c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800498e:	e009      	b.n	80049a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004990:	f7fd f8cc 	bl	8001b2c <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d902      	bls.n	80049a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	73fb      	strb	r3, [r7, #15]
        break;
 80049a2:	e005      	b.n	80049b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049a4:	4b37      	ldr	r3, [pc, #220]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1ef      	bne.n	8004990 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049b0:	7bfb      	ldrb	r3, [r7, #15]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d160      	bne.n	8004a78 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d111      	bne.n	80049e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049bc:	4b31      	ldr	r3, [pc, #196]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80049c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6892      	ldr	r2, [r2, #8]
 80049cc:	0211      	lsls	r1, r2, #8
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	68d2      	ldr	r2, [r2, #12]
 80049d2:	0912      	lsrs	r2, r2, #4
 80049d4:	0452      	lsls	r2, r2, #17
 80049d6:	430a      	orrs	r2, r1
 80049d8:	492a      	ldr	r1, [pc, #168]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	610b      	str	r3, [r1, #16]
 80049de:	e027      	b.n	8004a30 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d112      	bne.n	8004a0c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049e6:	4b27      	ldr	r3, [pc, #156]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80049ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6892      	ldr	r2, [r2, #8]
 80049f6:	0211      	lsls	r1, r2, #8
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6912      	ldr	r2, [r2, #16]
 80049fc:	0852      	lsrs	r2, r2, #1
 80049fe:	3a01      	subs	r2, #1
 8004a00:	0552      	lsls	r2, r2, #21
 8004a02:	430a      	orrs	r2, r1
 8004a04:	491f      	ldr	r1, [pc, #124]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	610b      	str	r3, [r1, #16]
 8004a0a:	e011      	b.n	8004a30 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a0c:	4b1d      	ldr	r3, [pc, #116]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6892      	ldr	r2, [r2, #8]
 8004a1c:	0211      	lsls	r1, r2, #8
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6952      	ldr	r2, [r2, #20]
 8004a22:	0852      	lsrs	r2, r2, #1
 8004a24:	3a01      	subs	r2, #1
 8004a26:	0652      	lsls	r2, r2, #25
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	4916      	ldr	r1, [pc, #88]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a30:	4b14      	ldr	r3, [pc, #80]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a13      	ldr	r2, [pc, #76]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a3c:	f7fd f876 	bl	8001b2c <HAL_GetTick>
 8004a40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a42:	e009      	b.n	8004a58 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a44:	f7fd f872 	bl	8001b2c <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d902      	bls.n	8004a58 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	73fb      	strb	r3, [r7, #15]
          break;
 8004a56:	e005      	b.n	8004a64 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a58:	4b0a      	ldr	r3, [pc, #40]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0ef      	beq.n	8004a44 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d106      	bne.n	8004a78 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a6a:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a6c:	691a      	ldr	r2, [r3, #16]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	4904      	ldr	r1, [pc, #16]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	40021000 	.word	0x40021000

08004a88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a96:	4b6a      	ldr	r3, [pc, #424]	; (8004c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d018      	beq.n	8004ad4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004aa2:	4b67      	ldr	r3, [pc, #412]	; (8004c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f003 0203 	and.w	r2, r3, #3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d10d      	bne.n	8004ace <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
       ||
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d009      	beq.n	8004ace <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004aba:	4b61      	ldr	r3, [pc, #388]	; (8004c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	091b      	lsrs	r3, r3, #4
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	1c5a      	adds	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
       ||
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d047      	beq.n	8004b5e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	73fb      	strb	r3, [r7, #15]
 8004ad2:	e044      	b.n	8004b5e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b03      	cmp	r3, #3
 8004ada:	d018      	beq.n	8004b0e <RCCEx_PLLSAI2_Config+0x86>
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d825      	bhi.n	8004b2c <RCCEx_PLLSAI2_Config+0xa4>
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d002      	beq.n	8004aea <RCCEx_PLLSAI2_Config+0x62>
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d009      	beq.n	8004afc <RCCEx_PLLSAI2_Config+0x74>
 8004ae8:	e020      	b.n	8004b2c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004aea:	4b55      	ldr	r3, [pc, #340]	; (8004c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d11d      	bne.n	8004b32 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004afa:	e01a      	b.n	8004b32 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004afc:	4b50      	ldr	r3, [pc, #320]	; (8004c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d116      	bne.n	8004b36 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b0c:	e013      	b.n	8004b36 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b0e:	4b4c      	ldr	r3, [pc, #304]	; (8004c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10f      	bne.n	8004b3a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b1a:	4b49      	ldr	r3, [pc, #292]	; (8004c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d109      	bne.n	8004b3a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b2a:	e006      	b.n	8004b3a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b30:	e004      	b.n	8004b3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b32:	bf00      	nop
 8004b34:	e002      	b.n	8004b3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b36:	bf00      	nop
 8004b38:	e000      	b.n	8004b3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10d      	bne.n	8004b5e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b42:	4b3f      	ldr	r3, [pc, #252]	; (8004c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6819      	ldr	r1, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	011b      	lsls	r3, r3, #4
 8004b56:	430b      	orrs	r3, r1
 8004b58:	4939      	ldr	r1, [pc, #228]	; (8004c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d167      	bne.n	8004c34 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b64:	4b36      	ldr	r3, [pc, #216]	; (8004c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a35      	ldr	r2, [pc, #212]	; (8004c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b70:	f7fc ffdc 	bl	8001b2c <HAL_GetTick>
 8004b74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b76:	e009      	b.n	8004b8c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b78:	f7fc ffd8 	bl	8001b2c <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d902      	bls.n	8004b8c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	73fb      	strb	r3, [r7, #15]
        break;
 8004b8a:	e005      	b.n	8004b98 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b8c:	4b2c      	ldr	r3, [pc, #176]	; (8004c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1ef      	bne.n	8004b78 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d14a      	bne.n	8004c34 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d111      	bne.n	8004bc8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ba4:	4b26      	ldr	r3, [pc, #152]	; (8004c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6892      	ldr	r2, [r2, #8]
 8004bb4:	0211      	lsls	r1, r2, #8
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	68d2      	ldr	r2, [r2, #12]
 8004bba:	0912      	lsrs	r2, r2, #4
 8004bbc:	0452      	lsls	r2, r2, #17
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	491f      	ldr	r1, [pc, #124]	; (8004c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	614b      	str	r3, [r1, #20]
 8004bc6:	e011      	b.n	8004bec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bc8:	4b1d      	ldr	r3, [pc, #116]	; (8004c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004bd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6892      	ldr	r2, [r2, #8]
 8004bd8:	0211      	lsls	r1, r2, #8
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6912      	ldr	r2, [r2, #16]
 8004bde:	0852      	lsrs	r2, r2, #1
 8004be0:	3a01      	subs	r2, #1
 8004be2:	0652      	lsls	r2, r2, #25
 8004be4:	430a      	orrs	r2, r1
 8004be6:	4916      	ldr	r1, [pc, #88]	; (8004c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004bec:	4b14      	ldr	r3, [pc, #80]	; (8004c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a13      	ldr	r2, [pc, #76]	; (8004c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf8:	f7fc ff98 	bl	8001b2c <HAL_GetTick>
 8004bfc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bfe:	e009      	b.n	8004c14 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c00:	f7fc ff94 	bl	8001b2c <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d902      	bls.n	8004c14 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	73fb      	strb	r3, [r7, #15]
          break;
 8004c12:	e005      	b.n	8004c20 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c14:	4b0a      	ldr	r3, [pc, #40]	; (8004c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0ef      	beq.n	8004c00 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d106      	bne.n	8004c34 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c26:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c28:	695a      	ldr	r2, [r3, #20]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	4904      	ldr	r1, [pc, #16]	; (8004c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	40021000 	.word	0x40021000

08004c44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e095      	b.n	8004d82 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d108      	bne.n	8004c70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c66:	d009      	beq.n	8004c7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	61da      	str	r2, [r3, #28]
 8004c6e:	e005      	b.n	8004c7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7fc fbbe 	bl	8001418 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cb2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cbc:	d902      	bls.n	8004cc4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	e002      	b.n	8004cca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cc8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004cd2:	d007      	beq.n	8004ce4 <HAL_SPI_Init+0xa0>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cdc:	d002      	beq.n	8004ce4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d26:	ea42 0103 	orr.w	r1, r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	0c1b      	lsrs	r3, r3, #16
 8004d40:	f003 0204 	and.w	r2, r3, #4
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	f003 0310 	and.w	r3, r3, #16
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d52:	f003 0308 	and.w	r3, r3, #8
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d60:	ea42 0103 	orr.w	r1, r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b082      	sub	sp, #8
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e01a      	b.n	8004dd2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004db2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7fc fb7b 	bl	80014b0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b088      	sub	sp, #32
 8004dde:	af02      	add	r7, sp, #8
 8004de0:	60f8      	str	r0, [r7, #12]
 8004de2:	60b9      	str	r1, [r7, #8]
 8004de4:	603b      	str	r3, [r7, #0]
 8004de6:	4613      	mov	r3, r2
 8004de8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004df6:	d112      	bne.n	8004e1e <HAL_SPI_Receive+0x44>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10e      	bne.n	8004e1e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2204      	movs	r2, #4
 8004e04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e08:	88fa      	ldrh	r2, [r7, #6]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	68b9      	ldr	r1, [r7, #8]
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 f910 	bl	800503a <HAL_SPI_TransmitReceive>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	e109      	b.n	8005032 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d101      	bne.n	8004e2c <HAL_SPI_Receive+0x52>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e102      	b.n	8005032 <HAL_SPI_Receive+0x258>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e34:	f7fc fe7a 	bl	8001b2c <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d002      	beq.n	8004e4c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004e46:	2302      	movs	r3, #2
 8004e48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e4a:	e0e9      	b.n	8005020 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d002      	beq.n	8004e58 <HAL_SPI_Receive+0x7e>
 8004e52:	88fb      	ldrh	r3, [r7, #6]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d102      	bne.n	8004e5e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e5c:	e0e0      	b.n	8005020 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2204      	movs	r2, #4
 8004e62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	88fa      	ldrh	r2, [r7, #6]
 8004e76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	88fa      	ldrh	r2, [r7, #6]
 8004e7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ea8:	d908      	bls.n	8004ebc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004eb8:	605a      	str	r2, [r3, #4]
 8004eba:	e007      	b.n	8004ecc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004eca:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ed4:	d10f      	bne.n	8004ef6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ee4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ef4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f00:	2b40      	cmp	r3, #64	; 0x40
 8004f02:	d007      	beq.n	8004f14 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f12:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f1c:	d867      	bhi.n	8004fee <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f1e:	e030      	b.n	8004f82 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d117      	bne.n	8004f5e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f103 020c 	add.w	r2, r3, #12
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	7812      	ldrb	r2, [r2, #0]
 8004f3c:	b2d2      	uxtb	r2, r2
 8004f3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004f5c:	e011      	b.n	8004f82 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f5e:	f7fc fde5 	bl	8001b2c <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d803      	bhi.n	8004f76 <HAL_SPI_Receive+0x19c>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f74:	d102      	bne.n	8004f7c <HAL_SPI_Receive+0x1a2>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d102      	bne.n	8004f82 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f80:	e04e      	b.n	8005020 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1c8      	bne.n	8004f20 <HAL_SPI_Receive+0x146>
 8004f8e:	e034      	b.n	8004ffa <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d115      	bne.n	8004fca <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa8:	b292      	uxth	r2, r2
 8004faa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb0:	1c9a      	adds	r2, r3, #2
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004fc8:	e011      	b.n	8004fee <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fca:	f7fc fdaf 	bl	8001b2c <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d803      	bhi.n	8004fe2 <HAL_SPI_Receive+0x208>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe0:	d102      	bne.n	8004fe8 <HAL_SPI_Receive+0x20e>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d102      	bne.n	8004fee <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004fec:	e018      	b.n	8005020 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1ca      	bne.n	8004f90 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	6839      	ldr	r1, [r7, #0]
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 fffe 	bl	8006000 <SPI_EndRxTransaction>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2220      	movs	r2, #32
 800500e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	75fb      	strb	r3, [r7, #23]
 800501c:	e000      	b.n	8005020 <HAL_SPI_Receive+0x246>
  }

error :
 800501e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005030:	7dfb      	ldrb	r3, [r7, #23]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3718      	adds	r7, #24
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b08a      	sub	sp, #40	; 0x28
 800503e:	af00      	add	r7, sp, #0
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	607a      	str	r2, [r7, #4]
 8005046:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005048:	2301      	movs	r3, #1
 800504a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800504c:	2300      	movs	r3, #0
 800504e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_SPI_TransmitReceive+0x26>
 800505c:	2302      	movs	r3, #2
 800505e:	e1fb      	b.n	8005458 <HAL_SPI_TransmitReceive+0x41e>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005068:	f7fc fd60 	bl	8001b2c <HAL_GetTick>
 800506c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005074:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800507c:	887b      	ldrh	r3, [r7, #2]
 800507e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005080:	887b      	ldrh	r3, [r7, #2]
 8005082:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005084:	7efb      	ldrb	r3, [r7, #27]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d00e      	beq.n	80050a8 <HAL_SPI_TransmitReceive+0x6e>
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005090:	d106      	bne.n	80050a0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d102      	bne.n	80050a0 <HAL_SPI_TransmitReceive+0x66>
 800509a:	7efb      	ldrb	r3, [r7, #27]
 800509c:	2b04      	cmp	r3, #4
 800509e:	d003      	beq.n	80050a8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80050a0:	2302      	movs	r3, #2
 80050a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80050a6:	e1cd      	b.n	8005444 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d005      	beq.n	80050ba <HAL_SPI_TransmitReceive+0x80>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <HAL_SPI_TransmitReceive+0x80>
 80050b4:	887b      	ldrh	r3, [r7, #2]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d103      	bne.n	80050c2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80050c0:	e1c0      	b.n	8005444 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	d003      	beq.n	80050d6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2205      	movs	r2, #5
 80050d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	887a      	ldrh	r2, [r7, #2]
 80050e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	887a      	ldrh	r2, [r7, #2]
 80050ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	887a      	ldrh	r2, [r7, #2]
 80050fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	887a      	ldrh	r2, [r7, #2]
 8005102:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005118:	d802      	bhi.n	8005120 <HAL_SPI_TransmitReceive+0xe6>
 800511a:	8a3b      	ldrh	r3, [r7, #16]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d908      	bls.n	8005132 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800512e:	605a      	str	r2, [r3, #4]
 8005130:	e007      	b.n	8005142 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005140:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514c:	2b40      	cmp	r3, #64	; 0x40
 800514e:	d007      	beq.n	8005160 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800515e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005168:	d97c      	bls.n	8005264 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <HAL_SPI_TransmitReceive+0x13e>
 8005172:	8a7b      	ldrh	r3, [r7, #18]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d169      	bne.n	800524c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517c:	881a      	ldrh	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005188:	1c9a      	adds	r2, r3, #2
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005192:	b29b      	uxth	r3, r3
 8005194:	3b01      	subs	r3, #1
 8005196:	b29a      	uxth	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800519c:	e056      	b.n	800524c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d11b      	bne.n	80051e4 <HAL_SPI_TransmitReceive+0x1aa>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d016      	beq.n	80051e4 <HAL_SPI_TransmitReceive+0x1aa>
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d113      	bne.n	80051e4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	881a      	ldrh	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051cc:	1c9a      	adds	r2, r3, #2
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	3b01      	subs	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d11c      	bne.n	800522c <HAL_SPI_TransmitReceive+0x1f2>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d016      	beq.n	800522c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005208:	b292      	uxth	r2, r2
 800520a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	1c9a      	adds	r2, r3, #2
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800521c:	b29b      	uxth	r3, r3
 800521e:	3b01      	subs	r3, #1
 8005220:	b29a      	uxth	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005228:	2301      	movs	r3, #1
 800522a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800522c:	f7fc fc7e 	bl	8001b2c <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005238:	429a      	cmp	r2, r3
 800523a:	d807      	bhi.n	800524c <HAL_SPI_TransmitReceive+0x212>
 800523c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005242:	d003      	beq.n	800524c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800524a:	e0fb      	b.n	8005444 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005250:	b29b      	uxth	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1a3      	bne.n	800519e <HAL_SPI_TransmitReceive+0x164>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800525c:	b29b      	uxth	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d19d      	bne.n	800519e <HAL_SPI_TransmitReceive+0x164>
 8005262:	e0df      	b.n	8005424 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <HAL_SPI_TransmitReceive+0x23a>
 800526c:	8a7b      	ldrh	r3, [r7, #18]
 800526e:	2b01      	cmp	r3, #1
 8005270:	f040 80cb 	bne.w	800540a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b01      	cmp	r3, #1
 800527c:	d912      	bls.n	80052a4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005282:	881a      	ldrh	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528e:	1c9a      	adds	r2, r3, #2
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005298:	b29b      	uxth	r3, r3
 800529a:	3b02      	subs	r3, #2
 800529c:	b29a      	uxth	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052a2:	e0b2      	b.n	800540a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	330c      	adds	r3, #12
 80052ae:	7812      	ldrb	r2, [r2, #0]
 80052b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	3b01      	subs	r3, #1
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052ca:	e09e      	b.n	800540a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d134      	bne.n	8005344 <HAL_SPI_TransmitReceive+0x30a>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052de:	b29b      	uxth	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d02f      	beq.n	8005344 <HAL_SPI_TransmitReceive+0x30a>
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d12c      	bne.n	8005344 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d912      	bls.n	800531a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f8:	881a      	ldrh	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005304:	1c9a      	adds	r2, r3, #2
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800530e:	b29b      	uxth	r3, r3
 8005310:	3b02      	subs	r3, #2
 8005312:	b29a      	uxth	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005318:	e012      	b.n	8005340 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	330c      	adds	r3, #12
 8005324:	7812      	ldrb	r2, [r2, #0]
 8005326:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005336:	b29b      	uxth	r3, r3
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b01      	cmp	r3, #1
 8005350:	d148      	bne.n	80053e4 <HAL_SPI_TransmitReceive+0x3aa>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005358:	b29b      	uxth	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d042      	beq.n	80053e4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005364:	b29b      	uxth	r3, r3
 8005366:	2b01      	cmp	r3, #1
 8005368:	d923      	bls.n	80053b2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68da      	ldr	r2, [r3, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005374:	b292      	uxth	r2, r2
 8005376:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537c:	1c9a      	adds	r2, r3, #2
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005388:	b29b      	uxth	r3, r3
 800538a:	3b02      	subs	r3, #2
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800539a:	b29b      	uxth	r3, r3
 800539c:	2b01      	cmp	r3, #1
 800539e:	d81f      	bhi.n	80053e0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053ae:	605a      	str	r2, [r3, #4]
 80053b0:	e016      	b.n	80053e0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f103 020c 	add.w	r2, r3, #12
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	7812      	ldrb	r2, [r2, #0]
 80053c0:	b2d2      	uxtb	r2, r2
 80053c2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b29a      	uxth	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053e0:	2301      	movs	r3, #1
 80053e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80053e4:	f7fc fba2 	bl	8001b2c <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d803      	bhi.n	80053fc <HAL_SPI_TransmitReceive+0x3c2>
 80053f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fa:	d102      	bne.n	8005402 <HAL_SPI_TransmitReceive+0x3c8>
 80053fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d103      	bne.n	800540a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005408:	e01c      	b.n	8005444 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800540e:	b29b      	uxth	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	f47f af5b 	bne.w	80052cc <HAL_SPI_TransmitReceive+0x292>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800541c:	b29b      	uxth	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	f47f af54 	bne.w	80052cc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005424:	69fa      	ldr	r2, [r7, #28]
 8005426:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 fe41 	bl	80060b0 <SPI_EndRxTxTransaction>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d006      	beq.n	8005442 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2220      	movs	r2, #32
 800543e:	661a      	str	r2, [r3, #96]	; 0x60
 8005440:	e000      	b.n	8005444 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005442:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005454:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005458:	4618      	mov	r0, r3
 800545a:	3728      	adds	r7, #40	; 0x28
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	4613      	mov	r3, r2
 800546c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800546e:	2300      	movs	r3, #0
 8005470:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005478:	2b01      	cmp	r3, #1
 800547a:	d101      	bne.n	8005480 <HAL_SPI_Transmit_IT+0x20>
 800547c:	2302      	movs	r3, #2
 800547e:	e072      	b.n	8005566 <HAL_SPI_Transmit_IT+0x106>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d002      	beq.n	8005494 <HAL_SPI_Transmit_IT+0x34>
 800548e:	88fb      	ldrh	r3, [r7, #6]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d102      	bne.n	800549a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005498:	e060      	b.n	800555c <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d002      	beq.n	80054ac <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80054a6:	2302      	movs	r3, #2
 80054a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054aa:	e057      	b.n	800555c <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2203      	movs	r2, #3
 80054b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	88fa      	ldrh	r2, [r7, #6]
 80054c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	88fa      	ldrh	r2, [r7, #6]
 80054ca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054f0:	d903      	bls.n	80054fa <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4a1f      	ldr	r2, [pc, #124]	; (8005574 <HAL_SPI_Transmit_IT+0x114>)
 80054f6:	651a      	str	r2, [r3, #80]	; 0x50
 80054f8:	e002      	b.n	8005500 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4a1e      	ldr	r2, [pc, #120]	; (8005578 <HAL_SPI_Transmit_IT+0x118>)
 80054fe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005508:	d10f      	bne.n	800552a <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005518:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005528:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8005538:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005544:	2b40      	cmp	r3, #64	; 0x40
 8005546:	d008      	beq.n	800555a <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	e000      	b.n	800555c <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800555a:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005564:	7dfb      	ldrb	r3, [r7, #23]
}
 8005566:	4618      	mov	r0, r3
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	08005d87 	.word	0x08005d87
 8005578:	08005d41 	.word	0x08005d41

0800557c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	4613      	mov	r3, r2
 8005588:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800558a:	2300      	movs	r3, #0
 800558c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d110      	bne.n	80055b8 <HAL_SPI_Receive_IT+0x3c>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800559e:	d10b      	bne.n	80055b8 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2204      	movs	r2, #4
 80055a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80055a8:	88fb      	ldrh	r3, [r7, #6]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	68b9      	ldr	r1, [r7, #8]
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 f894 	bl	80056dc <HAL_SPI_TransmitReceive_IT>
 80055b4:	4603      	mov	r3, r0
 80055b6:	e089      	b.n	80056cc <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d101      	bne.n	80055c6 <HAL_SPI_Receive_IT+0x4a>
 80055c2:	2302      	movs	r3, #2
 80055c4:	e082      	b.n	80056cc <HAL_SPI_Receive_IT+0x150>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d002      	beq.n	80055e0 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80055da:	2302      	movs	r3, #2
 80055dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055de:	e070      	b.n	80056c2 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <HAL_SPI_Receive_IT+0x70>
 80055e6:	88fb      	ldrh	r3, [r7, #6]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d102      	bne.n	80055f2 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055f0:	e067      	b.n	80056c2 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2204      	movs	r2, #4
 80055f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	88fa      	ldrh	r2, [r7, #6]
 800560a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	88fa      	ldrh	r2, [r7, #6]
 8005612:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005636:	d90b      	bls.n	8005650 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005646:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4a22      	ldr	r2, [pc, #136]	; (80056d4 <HAL_SPI_Receive_IT+0x158>)
 800564c:	64da      	str	r2, [r3, #76]	; 0x4c
 800564e:	e00a      	b.n	8005666 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800565e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4a1d      	ldr	r2, [pc, #116]	; (80056d8 <HAL_SPI_Receive_IT+0x15c>)
 8005664:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800566e:	d10f      	bne.n	8005690 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800567e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800568e:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800569e:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056aa:	2b40      	cmp	r3, #64	; 0x40
 80056ac:	d008      	beq.n	80056c0 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	e000      	b.n	80056c2 <HAL_SPI_Receive_IT+0x146>
  }

error :
 80056c0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80056ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	08005cf5 	.word	0x08005cf5
 80056d8:	08005ca5 	.word	0x08005ca5

080056dc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <HAL_SPI_TransmitReceive_IT+0x20>
 80056f8:	2302      	movs	r3, #2
 80056fa:	e091      	b.n	8005820 <HAL_SPI_TransmitReceive_IT+0x144>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800570a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005712:	7dbb      	ldrb	r3, [r7, #22]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d00d      	beq.n	8005734 <HAL_SPI_TransmitReceive_IT+0x58>
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800571e:	d106      	bne.n	800572e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d102      	bne.n	800572e <HAL_SPI_TransmitReceive_IT+0x52>
 8005728:	7dbb      	ldrb	r3, [r7, #22]
 800572a:	2b04      	cmp	r3, #4
 800572c:	d002      	beq.n	8005734 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800572e:	2302      	movs	r3, #2
 8005730:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005732:	e070      	b.n	8005816 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d005      	beq.n	8005746 <HAL_SPI_TransmitReceive_IT+0x6a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <HAL_SPI_TransmitReceive_IT+0x6a>
 8005740:	887b      	ldrh	r3, [r7, #2]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d102      	bne.n	800574c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	75fb      	strb	r3, [r7, #23]
    goto error;
 800574a:	e064      	b.n	8005816 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b04      	cmp	r3, #4
 8005756:	d003      	beq.n	8005760 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2205      	movs	r2, #5
 800575c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	887a      	ldrh	r2, [r7, #2]
 8005770:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	887a      	ldrh	r2, [r7, #2]
 8005776:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	887a      	ldrh	r2, [r7, #2]
 8005782:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	887a      	ldrh	r2, [r7, #2]
 800578a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005796:	d906      	bls.n	80057a6 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4a24      	ldr	r2, [pc, #144]	; (800582c <HAL_SPI_TransmitReceive_IT+0x150>)
 800579c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4a23      	ldr	r2, [pc, #140]	; (8005830 <HAL_SPI_TransmitReceive_IT+0x154>)
 80057a2:	651a      	str	r2, [r3, #80]	; 0x50
 80057a4:	e005      	b.n	80057b2 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	4a22      	ldr	r2, [pc, #136]	; (8005834 <HAL_SPI_TransmitReceive_IT+0x158>)
 80057aa:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4a22      	ldr	r2, [pc, #136]	; (8005838 <HAL_SPI_TransmitReceive_IT+0x15c>)
 80057b0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057ba:	d802      	bhi.n	80057c2 <HAL_SPI_TransmitReceive_IT+0xe6>
 80057bc:	887b      	ldrh	r3, [r7, #2]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d908      	bls.n	80057d4 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057d0:	605a      	str	r2, [r3, #4]
 80057d2:	e007      	b.n	80057e4 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057e2:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80057f2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fe:	2b40      	cmp	r3, #64	; 0x40
 8005800:	d008      	beq.n	8005814 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	e000      	b.n	8005816 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8005814:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800581e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005820:	4618      	mov	r0, r3
 8005822:	371c      	adds	r7, #28
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	08005bdf 	.word	0x08005bdf
 8005830:	08005c45 	.word	0x08005c45
 8005834:	08005a8f 	.word	0x08005a8f
 8005838:	08005b4d 	.word	0x08005b4d

0800583c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b088      	sub	sp, #32
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	099b      	lsrs	r3, r3, #6
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10f      	bne.n	8005880 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	099b      	lsrs	r3, r3, #6
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d004      	beq.n	8005880 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	4798      	blx	r3
    return;
 800587e:	e0d7      	b.n	8005a30 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	085b      	lsrs	r3, r3, #1
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00a      	beq.n	80058a2 <HAL_SPI_IRQHandler+0x66>
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	09db      	lsrs	r3, r3, #7
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b00      	cmp	r3, #0
 8005896:	d004      	beq.n	80058a2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	4798      	blx	r3
    return;
 80058a0:	e0c6      	b.n	8005a30 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	095b      	lsrs	r3, r3, #5
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10c      	bne.n	80058c8 <HAL_SPI_IRQHandler+0x8c>
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	099b      	lsrs	r3, r3, #6
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d106      	bne.n	80058c8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	0a1b      	lsrs	r3, r3, #8
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 80b4 	beq.w	8005a30 <HAL_SPI_IRQHandler+0x1f4>
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	095b      	lsrs	r3, r3, #5
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 80ad 	beq.w	8005a30 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	099b      	lsrs	r3, r3, #6
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d023      	beq.n	800592a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b03      	cmp	r3, #3
 80058ec:	d011      	beq.n	8005912 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f2:	f043 0204 	orr.w	r2, r3, #4
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058fa:	2300      	movs	r3, #0
 80058fc:	617b      	str	r3, [r7, #20]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	617b      	str	r3, [r7, #20]
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	e00b      	b.n	800592a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005912:	2300      	movs	r3, #0
 8005914:	613b      	str	r3, [r7, #16]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	613b      	str	r3, [r7, #16]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	613b      	str	r3, [r7, #16]
 8005926:	693b      	ldr	r3, [r7, #16]
        return;
 8005928:	e082      	b.n	8005a30 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	095b      	lsrs	r3, r3, #5
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	d014      	beq.n	8005960 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800593a:	f043 0201 	orr.w	r2, r3, #1
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005942:	2300      	movs	r3, #0
 8005944:	60fb      	str	r3, [r7, #12]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	60fb      	str	r3, [r7, #12]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	0a1b      	lsrs	r3, r3, #8
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00c      	beq.n	8005986 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005970:	f043 0208 	orr.w	r2, r3, #8
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005978:	2300      	movs	r3, #0
 800597a:	60bb      	str	r3, [r7, #8]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	60bb      	str	r3, [r7, #8]
 8005984:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800598a:	2b00      	cmp	r3, #0
 800598c:	d04f      	beq.n	8005a2e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800599c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d104      	bne.n	80059ba <HAL_SPI_IRQHandler+0x17e>
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d034      	beq.n	8005a24 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0203 	bic.w	r2, r2, #3
 80059c8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d011      	beq.n	80059f6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d6:	4a18      	ldr	r2, [pc, #96]	; (8005a38 <HAL_SPI_IRQHandler+0x1fc>)
 80059d8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fc faf4 	bl	8001fcc <HAL_DMA_Abort_IT>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d005      	beq.n	80059f6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d016      	beq.n	8005a2c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a02:	4a0d      	ldr	r2, [pc, #52]	; (8005a38 <HAL_SPI_IRQHandler+0x1fc>)
 8005a04:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fc fade 	bl	8001fcc <HAL_DMA_Abort_IT>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005a22:	e003      	b.n	8005a2c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f813 	bl	8005a50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005a2a:	e000      	b.n	8005a2e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005a2c:	bf00      	nop
    return;
 8005a2e:	bf00      	nop
  }
}
 8005a30:	3720      	adds	r7, #32
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	08005a65 	.word	0x08005a65

08005a3c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a70:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f7ff ffe5 	bl	8005a50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a86:	bf00      	nop
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b082      	sub	sp, #8
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d923      	bls.n	8005aea <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68da      	ldr	r2, [r3, #12]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aac:	b292      	uxth	r2, r2
 8005aae:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab4:	1c9a      	adds	r2, r3, #2
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	3b02      	subs	r3, #2
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d11f      	bne.n	8005b18 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ae6:	605a      	str	r2, [r3, #4]
 8005ae8:	e016      	b.n	8005b18 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f103 020c 	add.w	r2, r3, #12
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	7812      	ldrb	r2, [r2, #0]
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10f      	bne.n	8005b44 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b32:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d102      	bne.n	8005b44 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fafc 	bl	800613c <SPI_CloseRxTx_ISR>
    }
  }
}
 8005b44:	bf00      	nop
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d912      	bls.n	8005b84 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b62:	881a      	ldrh	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6e:	1c9a      	adds	r2, r3, #2
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	3b02      	subs	r3, #2
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b82:	e012      	b.n	8005baa <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	330c      	adds	r3, #12
 8005b8e:	7812      	ldrb	r2, [r2, #0]
 8005b90:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d110      	bne.n	8005bd6 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bc2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d102      	bne.n	8005bd6 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 fab3 	bl	800613c <SPI_CloseRxTx_ISR>
    }
  }
}
 8005bd6:	bf00      	nop
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b082      	sub	sp, #8
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	b292      	uxth	r2, r2
 8005bf2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf8:	1c9a      	adds	r2, r3, #2
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	3b01      	subs	r3, #1
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10f      	bne.n	8005c3c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c2a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d102      	bne.n	8005c3c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fa80 	bl	800613c <SPI_CloseRxTx_ISR>
    }
  }
}
 8005c3c:	bf00      	nop
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c50:	881a      	ldrh	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5c:	1c9a      	adds	r2, r3, #2
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d110      	bne.n	8005c9c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	685a      	ldr	r2, [r3, #4]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c88:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d102      	bne.n	8005c9c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fa50 	bl	800613c <SPI_CloseRxTx_ISR>
    }
  }
}
 8005c9c:	bf00      	nop
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f103 020c 	add.w	r2, r3, #12
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb8:	7812      	ldrb	r2, [r2, #0]
 8005cba:	b2d2      	uxtb	r2, r2
 8005cbc:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d102      	bne.n	8005cec <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fa6a 	bl	80061c0 <SPI_CloseRx_ISR>
  }
}
 8005cec:	bf00      	nop
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	b292      	uxth	r2, r2
 8005d08:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	1c9a      	adds	r2, r3, #2
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d102      	bne.n	8005d38 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fa44 	bl	80061c0 <SPI_CloseRx_ISR>
  }
}
 8005d38:	bf00      	nop
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	330c      	adds	r3, #12
 8005d52:	7812      	ldrb	r2, [r2, #0]
 8005d54:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	3b01      	subs	r3, #1
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d102      	bne.n	8005d7e <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 fa51 	bl	8006220 <SPI_CloseTx_ISR>
  }
}
 8005d7e:	bf00      	nop
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b082      	sub	sp, #8
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d92:	881a      	ldrh	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9e:	1c9a      	adds	r2, r3, #2
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	3b01      	subs	r3, #1
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d102      	bne.n	8005dc2 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 fa2f 	bl	8006220 <SPI_CloseTx_ISR>
  }
}
 8005dc2:	bf00      	nop
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
	...

08005dcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b088      	sub	sp, #32
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ddc:	f7fb fea6 	bl	8001b2c <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de4:	1a9b      	subs	r3, r3, r2
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	4413      	add	r3, r2
 8005dea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005dec:	f7fb fe9e 	bl	8001b2c <HAL_GetTick>
 8005df0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005df2:	4b39      	ldr	r3, [pc, #228]	; (8005ed8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	015b      	lsls	r3, r3, #5
 8005df8:	0d1b      	lsrs	r3, r3, #20
 8005dfa:	69fa      	ldr	r2, [r7, #28]
 8005dfc:	fb02 f303 	mul.w	r3, r2, r3
 8005e00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e02:	e054      	b.n	8005eae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0a:	d050      	beq.n	8005eae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e0c:	f7fb fe8e 	bl	8001b2c <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	69fa      	ldr	r2, [r7, #28]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d902      	bls.n	8005e22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d13d      	bne.n	8005e9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e3a:	d111      	bne.n	8005e60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e44:	d004      	beq.n	8005e50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e4e:	d107      	bne.n	8005e60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e68:	d10f      	bne.n	8005e8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e78:	601a      	str	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e017      	b.n	8005ece <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	bf0c      	ite	eq
 8005ebe:	2301      	moveq	r3, #1
 8005ec0:	2300      	movne	r3, #0
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	79fb      	ldrb	r3, [r7, #7]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d19b      	bne.n	8005e04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3720      	adds	r7, #32
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20000000 	.word	0x20000000

08005edc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005eea:	f7fb fe1f 	bl	8001b2c <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef2:	1a9b      	subs	r3, r3, r2
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005efa:	f7fb fe17 	bl	8001b2c <HAL_GetTick>
 8005efe:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f00:	4b3e      	ldr	r3, [pc, #248]	; (8005ffc <SPI_WaitFifoStateUntilTimeout+0x120>)
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	00da      	lsls	r2, r3, #3
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	0d1b      	lsrs	r3, r3, #20
 8005f10:	69fa      	ldr	r2, [r7, #28]
 8005f12:	fb02 f303 	mul.w	r3, r2, r3
 8005f16:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f18:	e062      	b.n	8005fe0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f20:	d109      	bne.n	8005f36 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d106      	bne.n	8005f36 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	330c      	adds	r3, #12
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005f34:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3c:	d050      	beq.n	8005fe0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f3e:	f7fb fdf5 	bl	8001b2c <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	69fa      	ldr	r2, [r7, #28]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d902      	bls.n	8005f54 <SPI_WaitFifoStateUntilTimeout+0x78>
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d13d      	bne.n	8005fd0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f6c:	d111      	bne.n	8005f92 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f76:	d004      	beq.n	8005f82 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f80:	d107      	bne.n	8005f92 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f9a:	d10f      	bne.n	8005fbc <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005faa:	601a      	str	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e010      	b.n	8005ff2 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689a      	ldr	r2, [r3, #8]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	4013      	ands	r3, r2
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d194      	bne.n	8005f1a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3720      	adds	r7, #32
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20000000 	.word	0x20000000

08006000 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af02      	add	r7, sp, #8
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006014:	d111      	bne.n	800603a <SPI_EndRxTransaction+0x3a>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800601e:	d004      	beq.n	800602a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006028:	d107      	bne.n	800603a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006038:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2200      	movs	r2, #0
 8006042:	2180      	movs	r1, #128	; 0x80
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f7ff fec1 	bl	8005dcc <SPI_WaitFlagStateUntilTimeout>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d007      	beq.n	8006060 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006054:	f043 0220 	orr.w	r2, r3, #32
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e023      	b.n	80060a8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006068:	d11d      	bne.n	80060a6 <SPI_EndRxTransaction+0xa6>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006072:	d004      	beq.n	800607e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800607c:	d113      	bne.n	80060a6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	2200      	movs	r2, #0
 8006086:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f7ff ff26 	bl	8005edc <SPI_WaitFifoStateUntilTimeout>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d007      	beq.n	80060a6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800609a:	f043 0220 	orr.w	r2, r3, #32
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e000      	b.n	80060a8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af02      	add	r7, sp, #8
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f7ff ff07 	bl	8005edc <SPI_WaitFifoStateUntilTimeout>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d007      	beq.n	80060e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d8:	f043 0220 	orr.w	r2, r3, #32
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e027      	b.n	8006134 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	2200      	movs	r2, #0
 80060ec:	2180      	movs	r1, #128	; 0x80
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f7ff fe6c 	bl	8005dcc <SPI_WaitFlagStateUntilTimeout>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d007      	beq.n	800610a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060fe:	f043 0220 	orr.w	r2, r3, #32
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e014      	b.n	8006134 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2200      	movs	r2, #0
 8006112:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f7ff fee0 	bl	8005edc <SPI_WaitFifoStateUntilTimeout>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d007      	beq.n	8006132 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006126:	f043 0220 	orr.w	r2, r3, #32
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e000      	b.n	8006134 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006144:	f7fb fcf2 	bl	8001b2c <HAL_GetTick>
 8006148:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 0220 	bic.w	r2, r2, #32
 8006158:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	2164      	movs	r1, #100	; 0x64
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7ff ffa6 	bl	80060b0 <SPI_EndRxTxTransaction>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d005      	beq.n	8006176 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800616e:	f043 0220 	orr.w	r2, r3, #32
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800617a:	2b00      	cmp	r3, #0
 800617c:	d115      	bne.n	80061aa <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b04      	cmp	r3, #4
 8006188:	d107      	bne.n	800619a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f002 fc4e 	bl	8008a34 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006198:	e00e      	b.n	80061b8 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7ff fc4a 	bl	8005a3c <HAL_SPI_TxRxCpltCallback>
}
 80061a8:	e006      	b.n	80061b8 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff fc4c 	bl	8005a50 <HAL_SPI_ErrorCallback>
}
 80061b8:	bf00      	nop
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80061d6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80061d8:	f7fb fca8 	bl	8001b2c <HAL_GetTick>
 80061dc:	4603      	mov	r3, r0
 80061de:	461a      	mov	r2, r3
 80061e0:	2164      	movs	r1, #100	; 0x64
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7ff ff0c 	bl	8006000 <SPI_EndRxTransaction>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d005      	beq.n	80061fa <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061f2:	f043 0220 	orr.w	r2, r3, #32
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006206:	2b00      	cmp	r3, #0
 8006208:	d103      	bne.n	8006212 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f002 fc12 	bl	8008a34 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006210:	e002      	b.n	8006218 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7ff fc1c 	bl	8005a50 <HAL_SPI_ErrorCallback>
}
 8006218:	bf00      	nop
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006228:	f7fb fc80 	bl	8001b2c <HAL_GetTick>
 800622c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800623c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	2164      	movs	r1, #100	; 0x64
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7ff ff34 	bl	80060b0 <SPI_EndRxTxTransaction>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d005      	beq.n	800625a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006252:	f043 0220 	orr.w	r2, r3, #32
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10a      	bne.n	8006278 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006262:	2300      	movs	r3, #0
 8006264:	60bb      	str	r3, [r7, #8]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	60bb      	str	r3, [r7, #8]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	60bb      	str	r3, [r7, #8]
 8006276:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006284:	2b00      	cmp	r3, #0
 8006286:	d003      	beq.n	8006290 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7ff fbe1 	bl	8005a50 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800628e:	e002      	b.n	8006296 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f002 fbe3 	bl	8008a5c <HAL_SPI_TxCpltCallback>
}
 8006296:	bf00      	nop
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b082      	sub	sp, #8
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e049      	b.n	8006344 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d106      	bne.n	80062ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 f841 	bl	800634c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2202      	movs	r2, #2
 80062ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	3304      	adds	r3, #4
 80062da:	4619      	mov	r1, r3
 80062dc:	4610      	mov	r0, r2
 80062de:	f000 f9f7 	bl	80066d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3708      	adds	r7, #8
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b01      	cmp	r3, #1
 8006372:	d001      	beq.n	8006378 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e04f      	b.n	8006418 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2202      	movs	r2, #2
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68da      	ldr	r2, [r3, #12]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f042 0201 	orr.w	r2, r2, #1
 800638e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a23      	ldr	r2, [pc, #140]	; (8006424 <HAL_TIM_Base_Start_IT+0xc4>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d01d      	beq.n	80063d6 <HAL_TIM_Base_Start_IT+0x76>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a2:	d018      	beq.n	80063d6 <HAL_TIM_Base_Start_IT+0x76>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a1f      	ldr	r2, [pc, #124]	; (8006428 <HAL_TIM_Base_Start_IT+0xc8>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d013      	beq.n	80063d6 <HAL_TIM_Base_Start_IT+0x76>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a1e      	ldr	r2, [pc, #120]	; (800642c <HAL_TIM_Base_Start_IT+0xcc>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d00e      	beq.n	80063d6 <HAL_TIM_Base_Start_IT+0x76>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a1c      	ldr	r2, [pc, #112]	; (8006430 <HAL_TIM_Base_Start_IT+0xd0>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d009      	beq.n	80063d6 <HAL_TIM_Base_Start_IT+0x76>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a1b      	ldr	r2, [pc, #108]	; (8006434 <HAL_TIM_Base_Start_IT+0xd4>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d004      	beq.n	80063d6 <HAL_TIM_Base_Start_IT+0x76>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a19      	ldr	r2, [pc, #100]	; (8006438 <HAL_TIM_Base_Start_IT+0xd8>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d115      	bne.n	8006402 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	4b17      	ldr	r3, [pc, #92]	; (800643c <HAL_TIM_Base_Start_IT+0xdc>)
 80063de:	4013      	ands	r3, r2
 80063e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2b06      	cmp	r3, #6
 80063e6:	d015      	beq.n	8006414 <HAL_TIM_Base_Start_IT+0xb4>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ee:	d011      	beq.n	8006414 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f042 0201 	orr.w	r2, r2, #1
 80063fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006400:	e008      	b.n	8006414 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f042 0201 	orr.w	r2, r2, #1
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	e000      	b.n	8006416 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006414:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr
 8006424:	40012c00 	.word	0x40012c00
 8006428:	40000400 	.word	0x40000400
 800642c:	40000800 	.word	0x40000800
 8006430:	40000c00 	.word	0x40000c00
 8006434:	40013400 	.word	0x40013400
 8006438:	40014000 	.word	0x40014000
 800643c:	00010007 	.word	0x00010007

08006440 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b02      	cmp	r3, #2
 8006454:	d122      	bne.n	800649c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f003 0302 	and.w	r3, r3, #2
 8006460:	2b02      	cmp	r3, #2
 8006462:	d11b      	bne.n	800649c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f06f 0202 	mvn.w	r2, #2
 800646c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2201      	movs	r2, #1
 8006472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	f003 0303 	and.w	r3, r3, #3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f905 	bl	8006692 <HAL_TIM_IC_CaptureCallback>
 8006488:	e005      	b.n	8006496 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f8f7 	bl	800667e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f908 	bl	80066a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0304 	and.w	r3, r3, #4
 80064a6:	2b04      	cmp	r3, #4
 80064a8:	d122      	bne.n	80064f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f003 0304 	and.w	r3, r3, #4
 80064b4:	2b04      	cmp	r3, #4
 80064b6:	d11b      	bne.n	80064f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f06f 0204 	mvn.w	r2, #4
 80064c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2202      	movs	r2, #2
 80064c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f8db 	bl	8006692 <HAL_TIM_IC_CaptureCallback>
 80064dc:	e005      	b.n	80064ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f8cd 	bl	800667e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f8de 	bl	80066a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f003 0308 	and.w	r3, r3, #8
 80064fa:	2b08      	cmp	r3, #8
 80064fc:	d122      	bne.n	8006544 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f003 0308 	and.w	r3, r3, #8
 8006508:	2b08      	cmp	r3, #8
 800650a:	d11b      	bne.n	8006544 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f06f 0208 	mvn.w	r2, #8
 8006514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2204      	movs	r2, #4
 800651a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	f003 0303 	and.w	r3, r3, #3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f8b1 	bl	8006692 <HAL_TIM_IC_CaptureCallback>
 8006530:	e005      	b.n	800653e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f8a3 	bl	800667e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 f8b4 	bl	80066a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f003 0310 	and.w	r3, r3, #16
 800654e:	2b10      	cmp	r3, #16
 8006550:	d122      	bne.n	8006598 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f003 0310 	and.w	r3, r3, #16
 800655c:	2b10      	cmp	r3, #16
 800655e:	d11b      	bne.n	8006598 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f06f 0210 	mvn.w	r2, #16
 8006568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2208      	movs	r2, #8
 800656e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f887 	bl	8006692 <HAL_TIM_IC_CaptureCallback>
 8006584:	e005      	b.n	8006592 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f879 	bl	800667e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f88a 	bl	80066a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d10e      	bne.n	80065c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d107      	bne.n	80065c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f06f 0201 	mvn.w	r2, #1
 80065bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7fa fdc0 	bl	8001144 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ce:	2b80      	cmp	r3, #128	; 0x80
 80065d0:	d10e      	bne.n	80065f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065dc:	2b80      	cmp	r3, #128	; 0x80
 80065de:	d107      	bne.n	80065f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f914 	bl	8006818 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065fe:	d10e      	bne.n	800661e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660a:	2b80      	cmp	r3, #128	; 0x80
 800660c:	d107      	bne.n	800661e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f907 	bl	800682c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006628:	2b40      	cmp	r3, #64	; 0x40
 800662a:	d10e      	bne.n	800664a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006636:	2b40      	cmp	r3, #64	; 0x40
 8006638:	d107      	bne.n	800664a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f838 	bl	80066ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	f003 0320 	and.w	r3, r3, #32
 8006654:	2b20      	cmp	r3, #32
 8006656:	d10e      	bne.n	8006676 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	f003 0320 	and.w	r3, r3, #32
 8006662:	2b20      	cmp	r3, #32
 8006664:	d107      	bne.n	8006676 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f06f 0220 	mvn.w	r2, #32
 800666e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f8c7 	bl	8006804 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006676:	bf00      	nop
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800667e:	b480      	push	{r7}
 8006680:	b083      	sub	sp, #12
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006686:	bf00      	nop
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006692:	b480      	push	{r7}
 8006694:	b083      	sub	sp, #12
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800669a:	bf00      	nop
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
	...

080066d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a40      	ldr	r2, [pc, #256]	; (80067e4 <TIM_Base_SetConfig+0x114>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d013      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ee:	d00f      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a3d      	ldr	r2, [pc, #244]	; (80067e8 <TIM_Base_SetConfig+0x118>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d00b      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a3c      	ldr	r2, [pc, #240]	; (80067ec <TIM_Base_SetConfig+0x11c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d007      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a3b      	ldr	r2, [pc, #236]	; (80067f0 <TIM_Base_SetConfig+0x120>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d003      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a3a      	ldr	r2, [pc, #232]	; (80067f4 <TIM_Base_SetConfig+0x124>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d108      	bne.n	8006722 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	4313      	orrs	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a2f      	ldr	r2, [pc, #188]	; (80067e4 <TIM_Base_SetConfig+0x114>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d01f      	beq.n	800676a <TIM_Base_SetConfig+0x9a>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006730:	d01b      	beq.n	800676a <TIM_Base_SetConfig+0x9a>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a2c      	ldr	r2, [pc, #176]	; (80067e8 <TIM_Base_SetConfig+0x118>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d017      	beq.n	800676a <TIM_Base_SetConfig+0x9a>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a2b      	ldr	r2, [pc, #172]	; (80067ec <TIM_Base_SetConfig+0x11c>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d013      	beq.n	800676a <TIM_Base_SetConfig+0x9a>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a2a      	ldr	r2, [pc, #168]	; (80067f0 <TIM_Base_SetConfig+0x120>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d00f      	beq.n	800676a <TIM_Base_SetConfig+0x9a>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a29      	ldr	r2, [pc, #164]	; (80067f4 <TIM_Base_SetConfig+0x124>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d00b      	beq.n	800676a <TIM_Base_SetConfig+0x9a>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a28      	ldr	r2, [pc, #160]	; (80067f8 <TIM_Base_SetConfig+0x128>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d007      	beq.n	800676a <TIM_Base_SetConfig+0x9a>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a27      	ldr	r2, [pc, #156]	; (80067fc <TIM_Base_SetConfig+0x12c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d003      	beq.n	800676a <TIM_Base_SetConfig+0x9a>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a26      	ldr	r2, [pc, #152]	; (8006800 <TIM_Base_SetConfig+0x130>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d108      	bne.n	800677c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	4313      	orrs	r3, r2
 800677a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a10      	ldr	r2, [pc, #64]	; (80067e4 <TIM_Base_SetConfig+0x114>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d00f      	beq.n	80067c8 <TIM_Base_SetConfig+0xf8>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a12      	ldr	r2, [pc, #72]	; (80067f4 <TIM_Base_SetConfig+0x124>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d00b      	beq.n	80067c8 <TIM_Base_SetConfig+0xf8>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a11      	ldr	r2, [pc, #68]	; (80067f8 <TIM_Base_SetConfig+0x128>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d007      	beq.n	80067c8 <TIM_Base_SetConfig+0xf8>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a10      	ldr	r2, [pc, #64]	; (80067fc <TIM_Base_SetConfig+0x12c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d003      	beq.n	80067c8 <TIM_Base_SetConfig+0xf8>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a0f      	ldr	r2, [pc, #60]	; (8006800 <TIM_Base_SetConfig+0x130>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d103      	bne.n	80067d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	691a      	ldr	r2, [r3, #16]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	615a      	str	r2, [r3, #20]
}
 80067d6:	bf00      	nop
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	40012c00 	.word	0x40012c00
 80067e8:	40000400 	.word	0x40000400
 80067ec:	40000800 	.word	0x40000800
 80067f0:	40000c00 	.word	0x40000c00
 80067f4:	40013400 	.word	0x40013400
 80067f8:	40014000 	.word	0x40014000
 80067fc:	40014400 	.word	0x40014400
 8006800:	40014800 	.word	0x40014800

08006804 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e040      	b.n	80068d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006856:	2b00      	cmp	r3, #0
 8006858:	d106      	bne.n	8006868 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7fa fe46 	bl	80014f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2224      	movs	r2, #36	; 0x24
 800686c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0201 	bic.w	r2, r2, #1
 800687c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f82c 	bl	80068dc <UART_SetConfig>
 8006884:	4603      	mov	r3, r0
 8006886:	2b01      	cmp	r3, #1
 8006888:	d101      	bne.n	800688e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e022      	b.n	80068d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006892:	2b00      	cmp	r3, #0
 8006894:	d002      	beq.n	800689c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fada 	bl	8006e50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	689a      	ldr	r2, [r3, #8]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0201 	orr.w	r2, r2, #1
 80068ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fb61 	bl	8006f94 <UART_CheckIdleState>
 80068d2:	4603      	mov	r3, r0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068e0:	b08a      	sub	sp, #40	; 0x28
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	689a      	ldr	r2, [r3, #8]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	431a      	orrs	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	431a      	orrs	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	69db      	ldr	r3, [r3, #28]
 8006900:	4313      	orrs	r3, r2
 8006902:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	4ba4      	ldr	r3, [pc, #656]	; (8006b9c <UART_SetConfig+0x2c0>)
 800690c:	4013      	ands	r3, r2
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	6812      	ldr	r2, [r2, #0]
 8006912:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006914:	430b      	orrs	r3, r1
 8006916:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	68da      	ldr	r2, [r3, #12]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a99      	ldr	r2, [pc, #612]	; (8006ba0 <UART_SetConfig+0x2c4>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d004      	beq.n	8006948 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006944:	4313      	orrs	r3, r2
 8006946:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006958:	430a      	orrs	r2, r1
 800695a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a90      	ldr	r2, [pc, #576]	; (8006ba4 <UART_SetConfig+0x2c8>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d126      	bne.n	80069b4 <UART_SetConfig+0xd8>
 8006966:	4b90      	ldr	r3, [pc, #576]	; (8006ba8 <UART_SetConfig+0x2cc>)
 8006968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800696c:	f003 0303 	and.w	r3, r3, #3
 8006970:	2b03      	cmp	r3, #3
 8006972:	d81b      	bhi.n	80069ac <UART_SetConfig+0xd0>
 8006974:	a201      	add	r2, pc, #4	; (adr r2, 800697c <UART_SetConfig+0xa0>)
 8006976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697a:	bf00      	nop
 800697c:	0800698d 	.word	0x0800698d
 8006980:	0800699d 	.word	0x0800699d
 8006984:	08006995 	.word	0x08006995
 8006988:	080069a5 	.word	0x080069a5
 800698c:	2301      	movs	r3, #1
 800698e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006992:	e116      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 8006994:	2302      	movs	r3, #2
 8006996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800699a:	e112      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 800699c:	2304      	movs	r3, #4
 800699e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069a2:	e10e      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 80069a4:	2308      	movs	r3, #8
 80069a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069aa:	e10a      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 80069ac:	2310      	movs	r3, #16
 80069ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069b2:	e106      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a7c      	ldr	r2, [pc, #496]	; (8006bac <UART_SetConfig+0x2d0>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d138      	bne.n	8006a30 <UART_SetConfig+0x154>
 80069be:	4b7a      	ldr	r3, [pc, #488]	; (8006ba8 <UART_SetConfig+0x2cc>)
 80069c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069c4:	f003 030c 	and.w	r3, r3, #12
 80069c8:	2b0c      	cmp	r3, #12
 80069ca:	d82d      	bhi.n	8006a28 <UART_SetConfig+0x14c>
 80069cc:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <UART_SetConfig+0xf8>)
 80069ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d2:	bf00      	nop
 80069d4:	08006a09 	.word	0x08006a09
 80069d8:	08006a29 	.word	0x08006a29
 80069dc:	08006a29 	.word	0x08006a29
 80069e0:	08006a29 	.word	0x08006a29
 80069e4:	08006a19 	.word	0x08006a19
 80069e8:	08006a29 	.word	0x08006a29
 80069ec:	08006a29 	.word	0x08006a29
 80069f0:	08006a29 	.word	0x08006a29
 80069f4:	08006a11 	.word	0x08006a11
 80069f8:	08006a29 	.word	0x08006a29
 80069fc:	08006a29 	.word	0x08006a29
 8006a00:	08006a29 	.word	0x08006a29
 8006a04:	08006a21 	.word	0x08006a21
 8006a08:	2300      	movs	r3, #0
 8006a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a0e:	e0d8      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 8006a10:	2302      	movs	r3, #2
 8006a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a16:	e0d4      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 8006a18:	2304      	movs	r3, #4
 8006a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a1e:	e0d0      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 8006a20:	2308      	movs	r3, #8
 8006a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a26:	e0cc      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 8006a28:	2310      	movs	r3, #16
 8006a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a2e:	e0c8      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a5e      	ldr	r2, [pc, #376]	; (8006bb0 <UART_SetConfig+0x2d4>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d125      	bne.n	8006a86 <UART_SetConfig+0x1aa>
 8006a3a:	4b5b      	ldr	r3, [pc, #364]	; (8006ba8 <UART_SetConfig+0x2cc>)
 8006a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a44:	2b30      	cmp	r3, #48	; 0x30
 8006a46:	d016      	beq.n	8006a76 <UART_SetConfig+0x19a>
 8006a48:	2b30      	cmp	r3, #48	; 0x30
 8006a4a:	d818      	bhi.n	8006a7e <UART_SetConfig+0x1a2>
 8006a4c:	2b20      	cmp	r3, #32
 8006a4e:	d00a      	beq.n	8006a66 <UART_SetConfig+0x18a>
 8006a50:	2b20      	cmp	r3, #32
 8006a52:	d814      	bhi.n	8006a7e <UART_SetConfig+0x1a2>
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <UART_SetConfig+0x182>
 8006a58:	2b10      	cmp	r3, #16
 8006a5a:	d008      	beq.n	8006a6e <UART_SetConfig+0x192>
 8006a5c:	e00f      	b.n	8006a7e <UART_SetConfig+0x1a2>
 8006a5e:	2300      	movs	r3, #0
 8006a60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a64:	e0ad      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 8006a66:	2302      	movs	r3, #2
 8006a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a6c:	e0a9      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 8006a6e:	2304      	movs	r3, #4
 8006a70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a74:	e0a5      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 8006a76:	2308      	movs	r3, #8
 8006a78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a7c:	e0a1      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 8006a7e:	2310      	movs	r3, #16
 8006a80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a84:	e09d      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a4a      	ldr	r2, [pc, #296]	; (8006bb4 <UART_SetConfig+0x2d8>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d125      	bne.n	8006adc <UART_SetConfig+0x200>
 8006a90:	4b45      	ldr	r3, [pc, #276]	; (8006ba8 <UART_SetConfig+0x2cc>)
 8006a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a9a:	2bc0      	cmp	r3, #192	; 0xc0
 8006a9c:	d016      	beq.n	8006acc <UART_SetConfig+0x1f0>
 8006a9e:	2bc0      	cmp	r3, #192	; 0xc0
 8006aa0:	d818      	bhi.n	8006ad4 <UART_SetConfig+0x1f8>
 8006aa2:	2b80      	cmp	r3, #128	; 0x80
 8006aa4:	d00a      	beq.n	8006abc <UART_SetConfig+0x1e0>
 8006aa6:	2b80      	cmp	r3, #128	; 0x80
 8006aa8:	d814      	bhi.n	8006ad4 <UART_SetConfig+0x1f8>
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <UART_SetConfig+0x1d8>
 8006aae:	2b40      	cmp	r3, #64	; 0x40
 8006ab0:	d008      	beq.n	8006ac4 <UART_SetConfig+0x1e8>
 8006ab2:	e00f      	b.n	8006ad4 <UART_SetConfig+0x1f8>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aba:	e082      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 8006abc:	2302      	movs	r3, #2
 8006abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ac2:	e07e      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 8006ac4:	2304      	movs	r3, #4
 8006ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aca:	e07a      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 8006acc:	2308      	movs	r3, #8
 8006ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ad2:	e076      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 8006ad4:	2310      	movs	r3, #16
 8006ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ada:	e072      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a35      	ldr	r2, [pc, #212]	; (8006bb8 <UART_SetConfig+0x2dc>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d12a      	bne.n	8006b3c <UART_SetConfig+0x260>
 8006ae6:	4b30      	ldr	r3, [pc, #192]	; (8006ba8 <UART_SetConfig+0x2cc>)
 8006ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006af0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006af4:	d01a      	beq.n	8006b2c <UART_SetConfig+0x250>
 8006af6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006afa:	d81b      	bhi.n	8006b34 <UART_SetConfig+0x258>
 8006afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b00:	d00c      	beq.n	8006b1c <UART_SetConfig+0x240>
 8006b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b06:	d815      	bhi.n	8006b34 <UART_SetConfig+0x258>
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d003      	beq.n	8006b14 <UART_SetConfig+0x238>
 8006b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b10:	d008      	beq.n	8006b24 <UART_SetConfig+0x248>
 8006b12:	e00f      	b.n	8006b34 <UART_SetConfig+0x258>
 8006b14:	2300      	movs	r3, #0
 8006b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b1a:	e052      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b22:	e04e      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 8006b24:	2304      	movs	r3, #4
 8006b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b2a:	e04a      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 8006b2c:	2308      	movs	r3, #8
 8006b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b32:	e046      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 8006b34:	2310      	movs	r3, #16
 8006b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b3a:	e042      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a17      	ldr	r2, [pc, #92]	; (8006ba0 <UART_SetConfig+0x2c4>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d13a      	bne.n	8006bbc <UART_SetConfig+0x2e0>
 8006b46:	4b18      	ldr	r3, [pc, #96]	; (8006ba8 <UART_SetConfig+0x2cc>)
 8006b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b54:	d01a      	beq.n	8006b8c <UART_SetConfig+0x2b0>
 8006b56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b5a:	d81b      	bhi.n	8006b94 <UART_SetConfig+0x2b8>
 8006b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b60:	d00c      	beq.n	8006b7c <UART_SetConfig+0x2a0>
 8006b62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b66:	d815      	bhi.n	8006b94 <UART_SetConfig+0x2b8>
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d003      	beq.n	8006b74 <UART_SetConfig+0x298>
 8006b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b70:	d008      	beq.n	8006b84 <UART_SetConfig+0x2a8>
 8006b72:	e00f      	b.n	8006b94 <UART_SetConfig+0x2b8>
 8006b74:	2300      	movs	r3, #0
 8006b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b7a:	e022      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b82:	e01e      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 8006b84:	2304      	movs	r3, #4
 8006b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b8a:	e01a      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 8006b8c:	2308      	movs	r3, #8
 8006b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b92:	e016      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 8006b94:	2310      	movs	r3, #16
 8006b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b9a:	e012      	b.n	8006bc2 <UART_SetConfig+0x2e6>
 8006b9c:	efff69f3 	.word	0xefff69f3
 8006ba0:	40008000 	.word	0x40008000
 8006ba4:	40013800 	.word	0x40013800
 8006ba8:	40021000 	.word	0x40021000
 8006bac:	40004400 	.word	0x40004400
 8006bb0:	40004800 	.word	0x40004800
 8006bb4:	40004c00 	.word	0x40004c00
 8006bb8:	40005000 	.word	0x40005000
 8006bbc:	2310      	movs	r3, #16
 8006bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4aa0      	ldr	r2, [pc, #640]	; (8006e48 <UART_SetConfig+0x56c>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d17a      	bne.n	8006cc2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bd0:	2b08      	cmp	r3, #8
 8006bd2:	d824      	bhi.n	8006c1e <UART_SetConfig+0x342>
 8006bd4:	a201      	add	r2, pc, #4	; (adr r2, 8006bdc <UART_SetConfig+0x300>)
 8006bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bda:	bf00      	nop
 8006bdc:	08006c01 	.word	0x08006c01
 8006be0:	08006c1f 	.word	0x08006c1f
 8006be4:	08006c09 	.word	0x08006c09
 8006be8:	08006c1f 	.word	0x08006c1f
 8006bec:	08006c0f 	.word	0x08006c0f
 8006bf0:	08006c1f 	.word	0x08006c1f
 8006bf4:	08006c1f 	.word	0x08006c1f
 8006bf8:	08006c1f 	.word	0x08006c1f
 8006bfc:	08006c17 	.word	0x08006c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c00:	f7fd fa96 	bl	8004130 <HAL_RCC_GetPCLK1Freq>
 8006c04:	61f8      	str	r0, [r7, #28]
        break;
 8006c06:	e010      	b.n	8006c2a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c08:	4b90      	ldr	r3, [pc, #576]	; (8006e4c <UART_SetConfig+0x570>)
 8006c0a:	61fb      	str	r3, [r7, #28]
        break;
 8006c0c:	e00d      	b.n	8006c2a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c0e:	f7fd f9f7 	bl	8004000 <HAL_RCC_GetSysClockFreq>
 8006c12:	61f8      	str	r0, [r7, #28]
        break;
 8006c14:	e009      	b.n	8006c2a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c1a:	61fb      	str	r3, [r7, #28]
        break;
 8006c1c:	e005      	b.n	8006c2a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 80fd 	beq.w	8006e2c <UART_SetConfig+0x550>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	4613      	mov	r3, r2
 8006c38:	005b      	lsls	r3, r3, #1
 8006c3a:	4413      	add	r3, r2
 8006c3c:	69fa      	ldr	r2, [r7, #28]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d305      	bcc.n	8006c4e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c48:	69fa      	ldr	r2, [r7, #28]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d903      	bls.n	8006c56 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c54:	e0ea      	b.n	8006e2c <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	461c      	mov	r4, r3
 8006c5c:	4615      	mov	r5, r2
 8006c5e:	f04f 0200 	mov.w	r2, #0
 8006c62:	f04f 0300 	mov.w	r3, #0
 8006c66:	022b      	lsls	r3, r5, #8
 8006c68:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006c6c:	0222      	lsls	r2, r4, #8
 8006c6e:	68f9      	ldr	r1, [r7, #12]
 8006c70:	6849      	ldr	r1, [r1, #4]
 8006c72:	0849      	lsrs	r1, r1, #1
 8006c74:	2000      	movs	r0, #0
 8006c76:	4688      	mov	r8, r1
 8006c78:	4681      	mov	r9, r0
 8006c7a:	eb12 0a08 	adds.w	sl, r2, r8
 8006c7e:	eb43 0b09 	adc.w	fp, r3, r9
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	603b      	str	r3, [r7, #0]
 8006c8a:	607a      	str	r2, [r7, #4]
 8006c8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c90:	4650      	mov	r0, sl
 8006c92:	4659      	mov	r1, fp
 8006c94:	f7f9 faf4 	bl	8000280 <__aeabi_uldivmod>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ca6:	d308      	bcc.n	8006cba <UART_SetConfig+0x3de>
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cae:	d204      	bcs.n	8006cba <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	60da      	str	r2, [r3, #12]
 8006cb8:	e0b8      	b.n	8006e2c <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006cc0:	e0b4      	b.n	8006e2c <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cca:	d15f      	bne.n	8006d8c <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 8006ccc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cd0:	2b08      	cmp	r3, #8
 8006cd2:	d828      	bhi.n	8006d26 <UART_SetConfig+0x44a>
 8006cd4:	a201      	add	r2, pc, #4	; (adr r2, 8006cdc <UART_SetConfig+0x400>)
 8006cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cda:	bf00      	nop
 8006cdc:	08006d01 	.word	0x08006d01
 8006ce0:	08006d09 	.word	0x08006d09
 8006ce4:	08006d11 	.word	0x08006d11
 8006ce8:	08006d27 	.word	0x08006d27
 8006cec:	08006d17 	.word	0x08006d17
 8006cf0:	08006d27 	.word	0x08006d27
 8006cf4:	08006d27 	.word	0x08006d27
 8006cf8:	08006d27 	.word	0x08006d27
 8006cfc:	08006d1f 	.word	0x08006d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d00:	f7fd fa16 	bl	8004130 <HAL_RCC_GetPCLK1Freq>
 8006d04:	61f8      	str	r0, [r7, #28]
        break;
 8006d06:	e014      	b.n	8006d32 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d08:	f7fd fa28 	bl	800415c <HAL_RCC_GetPCLK2Freq>
 8006d0c:	61f8      	str	r0, [r7, #28]
        break;
 8006d0e:	e010      	b.n	8006d32 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d10:	4b4e      	ldr	r3, [pc, #312]	; (8006e4c <UART_SetConfig+0x570>)
 8006d12:	61fb      	str	r3, [r7, #28]
        break;
 8006d14:	e00d      	b.n	8006d32 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d16:	f7fd f973 	bl	8004000 <HAL_RCC_GetSysClockFreq>
 8006d1a:	61f8      	str	r0, [r7, #28]
        break;
 8006d1c:	e009      	b.n	8006d32 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d22:	61fb      	str	r3, [r7, #28]
        break;
 8006d24:	e005      	b.n	8006d32 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006d26:	2300      	movs	r3, #0
 8006d28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d079      	beq.n	8006e2c <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	005a      	lsls	r2, r3, #1
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	085b      	lsrs	r3, r3, #1
 8006d42:	441a      	add	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	2b0f      	cmp	r3, #15
 8006d54:	d916      	bls.n	8006d84 <UART_SetConfig+0x4a8>
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d5c:	d212      	bcs.n	8006d84 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	f023 030f 	bic.w	r3, r3, #15
 8006d66:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	085b      	lsrs	r3, r3, #1
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	f003 0307 	and.w	r3, r3, #7
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	8afb      	ldrh	r3, [r7, #22]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	8afa      	ldrh	r2, [r7, #22]
 8006d80:	60da      	str	r2, [r3, #12]
 8006d82:	e053      	b.n	8006e2c <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d8a:	e04f      	b.n	8006e2c <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d90:	2b08      	cmp	r3, #8
 8006d92:	d828      	bhi.n	8006de6 <UART_SetConfig+0x50a>
 8006d94:	a201      	add	r2, pc, #4	; (adr r2, 8006d9c <UART_SetConfig+0x4c0>)
 8006d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9a:	bf00      	nop
 8006d9c:	08006dc1 	.word	0x08006dc1
 8006da0:	08006dc9 	.word	0x08006dc9
 8006da4:	08006dd1 	.word	0x08006dd1
 8006da8:	08006de7 	.word	0x08006de7
 8006dac:	08006dd7 	.word	0x08006dd7
 8006db0:	08006de7 	.word	0x08006de7
 8006db4:	08006de7 	.word	0x08006de7
 8006db8:	08006de7 	.word	0x08006de7
 8006dbc:	08006ddf 	.word	0x08006ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dc0:	f7fd f9b6 	bl	8004130 <HAL_RCC_GetPCLK1Freq>
 8006dc4:	61f8      	str	r0, [r7, #28]
        break;
 8006dc6:	e014      	b.n	8006df2 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dc8:	f7fd f9c8 	bl	800415c <HAL_RCC_GetPCLK2Freq>
 8006dcc:	61f8      	str	r0, [r7, #28]
        break;
 8006dce:	e010      	b.n	8006df2 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dd0:	4b1e      	ldr	r3, [pc, #120]	; (8006e4c <UART_SetConfig+0x570>)
 8006dd2:	61fb      	str	r3, [r7, #28]
        break;
 8006dd4:	e00d      	b.n	8006df2 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dd6:	f7fd f913 	bl	8004000 <HAL_RCC_GetSysClockFreq>
 8006dda:	61f8      	str	r0, [r7, #28]
        break;
 8006ddc:	e009      	b.n	8006df2 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006de2:	61fb      	str	r3, [r7, #28]
        break;
 8006de4:	e005      	b.n	8006df2 <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006df0:	bf00      	nop
    }

    if (pclk != 0U)
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d019      	beq.n	8006e2c <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	085a      	lsrs	r2, r3, #1
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	441a      	add	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	2b0f      	cmp	r3, #15
 8006e12:	d908      	bls.n	8006e26 <UART_SetConfig+0x54a>
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e1a:	d204      	bcs.n	8006e26 <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	69ba      	ldr	r2, [r7, #24]
 8006e22:	60da      	str	r2, [r3, #12]
 8006e24:	e002      	b.n	8006e2c <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006e38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3728      	adds	r7, #40	; 0x28
 8006e40:	46bd      	mov	sp, r7
 8006e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e46:	bf00      	nop
 8006e48:	40008000 	.word	0x40008000
 8006e4c:	00f42400 	.word	0x00f42400

08006e50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00a      	beq.n	8006e7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	430a      	orrs	r2, r1
 8006e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	f003 0302 	and.w	r3, r3, #2
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00a      	beq.n	8006e9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	f003 0304 	and.w	r3, r3, #4
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00a      	beq.n	8006ebe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	f003 0308 	and.w	r3, r3, #8
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00a      	beq.n	8006ee0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	430a      	orrs	r2, r1
 8006ede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee4:	f003 0310 	and.w	r3, r3, #16
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00a      	beq.n	8006f02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	f003 0320 	and.w	r3, r3, #32
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00a      	beq.n	8006f24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	430a      	orrs	r2, r1
 8006f22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d01a      	beq.n	8006f66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	430a      	orrs	r2, r1
 8006f44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f4e:	d10a      	bne.n	8006f66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00a      	beq.n	8006f88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	430a      	orrs	r2, r1
 8006f86:	605a      	str	r2, [r3, #4]
  }
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af02      	add	r7, sp, #8
 8006f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fa4:	f7fa fdc2 	bl	8001b2c <HAL_GetTick>
 8006fa8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0308 	and.w	r3, r3, #8
 8006fb4:	2b08      	cmp	r3, #8
 8006fb6:	d10e      	bne.n	8006fd6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fbc:	9300      	str	r3, [sp, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f82d 	bl	8007026 <UART_WaitOnFlagUntilTimeout>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e023      	b.n	800701e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b04      	cmp	r3, #4
 8006fe2:	d10e      	bne.n	8007002 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fe4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f817 	bl	8007026 <UART_WaitOnFlagUntilTimeout>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e00d      	b.n	800701e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2220      	movs	r2, #32
 8007006:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2220      	movs	r2, #32
 800700c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b084      	sub	sp, #16
 800702a:	af00      	add	r7, sp, #0
 800702c:	60f8      	str	r0, [r7, #12]
 800702e:	60b9      	str	r1, [r7, #8]
 8007030:	603b      	str	r3, [r7, #0]
 8007032:	4613      	mov	r3, r2
 8007034:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007036:	e05e      	b.n	80070f6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800703e:	d05a      	beq.n	80070f6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007040:	f7fa fd74 	bl	8001b2c <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	69ba      	ldr	r2, [r7, #24]
 800704c:	429a      	cmp	r2, r3
 800704e:	d302      	bcc.n	8007056 <UART_WaitOnFlagUntilTimeout+0x30>
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d11b      	bne.n	800708e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007064:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689a      	ldr	r2, [r3, #8]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f022 0201 	bic.w	r2, r2, #1
 8007074:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2220      	movs	r2, #32
 800707a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2220      	movs	r2, #32
 8007080:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e043      	b.n	8007116 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0304 	and.w	r3, r3, #4
 8007098:	2b00      	cmp	r3, #0
 800709a:	d02c      	beq.n	80070f6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	69db      	ldr	r3, [r3, #28]
 80070a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070aa:	d124      	bne.n	80070f6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070b4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80070c4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	689a      	ldr	r2, [r3, #8]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f022 0201 	bic.w	r2, r2, #1
 80070d4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2220      	movs	r2, #32
 80070da:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2220      	movs	r2, #32
 80070e0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2220      	movs	r2, #32
 80070e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e00f      	b.n	8007116 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	69da      	ldr	r2, [r3, #28]
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	4013      	ands	r3, r2
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	429a      	cmp	r2, r3
 8007104:	bf0c      	ite	eq
 8007106:	2301      	moveq	r3, #1
 8007108:	2300      	movne	r3, #0
 800710a:	b2db      	uxtb	r3, r3
 800710c:	461a      	mov	r2, r3
 800710e:	79fb      	ldrb	r3, [r7, #7]
 8007110:	429a      	cmp	r2, r3
 8007112:	d091      	beq.n	8007038 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800711e:	b084      	sub	sp, #16
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	f107 001c 	add.w	r0, r7, #28
 800712c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fa23 	bl	8007588 <USB_CoreReset>
 8007142:	4603      	mov	r3, r0
 8007144:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007148:	2b00      	cmp	r3, #0
 800714a:	d106      	bne.n	800715a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007150:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	639a      	str	r2, [r3, #56]	; 0x38
 8007158:	e005      	b.n	8007166 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007166:	7bfb      	ldrb	r3, [r7, #15]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007172:	b004      	add	sp, #16
 8007174:	4770      	bx	lr

08007176 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007176:	b480      	push	{r7}
 8007178:	b083      	sub	sp, #12
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f023 0201 	bic.w	r2, r3, #1
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	460b      	mov	r3, r1
 80071a2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80071b0:	78fb      	ldrb	r3, [r7, #3]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d106      	bne.n	80071c4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	60da      	str	r2, [r3, #12]
 80071c2:	e00b      	b.n	80071dc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80071c4:	78fb      	ldrb	r3, [r7, #3]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d106      	bne.n	80071d8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	60da      	str	r2, [r3, #12]
 80071d6:	e001      	b.n	80071dc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e003      	b.n	80071e4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80071dc:	2032      	movs	r0, #50	; 0x32
 80071de:	f7fa fcb1 	bl	8001b44 <HAL_Delay>

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071ec:	b084      	sub	sp, #16
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b086      	sub	sp, #24
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80071fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80071fe:	2300      	movs	r3, #0
 8007200:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007206:	2300      	movs	r3, #0
 8007208:	613b      	str	r3, [r7, #16]
 800720a:	e009      	b.n	8007220 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	3340      	adds	r3, #64	; 0x40
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	4413      	add	r3, r2
 8007216:	2200      	movs	r2, #0
 8007218:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	3301      	adds	r3, #1
 800721e:	613b      	str	r3, [r7, #16]
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	2b0e      	cmp	r3, #14
 8007224:	d9f2      	bls.n	800720c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007228:	2b00      	cmp	r3, #0
 800722a:	d11c      	bne.n	8007266 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800723a:	f043 0302 	orr.w	r3, r3, #2
 800723e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007244:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	e005      	b.n	8007272 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007278:	461a      	mov	r2, r3
 800727a:	2300      	movs	r3, #0
 800727c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007284:	4619      	mov	r1, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800728c:	461a      	mov	r2, r3
 800728e:	680b      	ldr	r3, [r1, #0]
 8007290:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007292:	2103      	movs	r1, #3
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 f93d 	bl	8007514 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800729a:	2110      	movs	r1, #16
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f8f1 	bl	8007484 <USB_FlushTxFifo>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d001      	beq.n	80072ac <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f90f 	bl	80074d0 <USB_FlushRxFifo>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d001      	beq.n	80072bc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c2:	461a      	mov	r2, r3
 80072c4:	2300      	movs	r3, #0
 80072c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ce:	461a      	mov	r2, r3
 80072d0:	2300      	movs	r3, #0
 80072d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072da:	461a      	mov	r2, r3
 80072dc:	2300      	movs	r3, #0
 80072de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072e0:	2300      	movs	r3, #0
 80072e2:	613b      	str	r3, [r7, #16]
 80072e4:	e043      	b.n	800736e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072fc:	d118      	bne.n	8007330 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10a      	bne.n	800731a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007310:	461a      	mov	r2, r3
 8007312:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007316:	6013      	str	r3, [r2, #0]
 8007318:	e013      	b.n	8007342 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	4413      	add	r3, r2
 8007322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007326:	461a      	mov	r2, r3
 8007328:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800732c:	6013      	str	r3, [r2, #0]
 800732e:	e008      	b.n	8007342 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733c:	461a      	mov	r2, r3
 800733e:	2300      	movs	r3, #0
 8007340:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	015a      	lsls	r2, r3, #5
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	4413      	add	r3, r2
 800734a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800734e:	461a      	mov	r2, r3
 8007350:	2300      	movs	r3, #0
 8007352:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007360:	461a      	mov	r2, r3
 8007362:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007366:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	3301      	adds	r3, #1
 800736c:	613b      	str	r3, [r7, #16]
 800736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	429a      	cmp	r2, r3
 8007374:	d3b7      	bcc.n	80072e6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007376:	2300      	movs	r3, #0
 8007378:	613b      	str	r3, [r7, #16]
 800737a:	e043      	b.n	8007404 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	4413      	add	r3, r2
 8007384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800738e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007392:	d118      	bne.n	80073c6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10a      	bne.n	80073b0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a6:	461a      	mov	r2, r3
 80073a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80073ac:	6013      	str	r3, [r2, #0]
 80073ae:	e013      	b.n	80073d8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	015a      	lsls	r2, r3, #5
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	4413      	add	r3, r2
 80073b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073bc:	461a      	mov	r2, r3
 80073be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80073c2:	6013      	str	r3, [r2, #0]
 80073c4:	e008      	b.n	80073d8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d2:	461a      	mov	r2, r3
 80073d4:	2300      	movs	r3, #0
 80073d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	015a      	lsls	r2, r3, #5
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e4:	461a      	mov	r2, r3
 80073e6:	2300      	movs	r3, #0
 80073e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	015a      	lsls	r2, r3, #5
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f6:	461a      	mov	r2, r3
 80073f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80073fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	3301      	adds	r3, #1
 8007402:	613b      	str	r3, [r7, #16]
 8007404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	429a      	cmp	r2, r3
 800740a:	d3b7      	bcc.n	800737c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800741a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800741e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800742c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	f043 0210 	orr.w	r2, r3, #16
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	699a      	ldr	r2, [r3, #24]
 800743e:	4b10      	ldr	r3, [pc, #64]	; (8007480 <USB_DevInit+0x294>)
 8007440:	4313      	orrs	r3, r2
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007448:	2b00      	cmp	r3, #0
 800744a:	d005      	beq.n	8007458 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	f043 0208 	orr.w	r2, r3, #8
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800745a:	2b01      	cmp	r3, #1
 800745c:	d107      	bne.n	800746e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007466:	f043 0304 	orr.w	r3, r3, #4
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800746e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3718      	adds	r7, #24
 8007474:	46bd      	mov	sp, r7
 8007476:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800747a:	b004      	add	sp, #16
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	803c3800 	.word	0x803c3800

08007484 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800748e:	2300      	movs	r3, #0
 8007490:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	019b      	lsls	r3, r3, #6
 8007496:	f043 0220 	orr.w	r2, r3, #32
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	3301      	adds	r3, #1
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4a09      	ldr	r2, [pc, #36]	; (80074cc <USB_FlushTxFifo+0x48>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d901      	bls.n	80074b0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e006      	b.n	80074be <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	f003 0320 	and.w	r3, r3, #32
 80074b8:	2b20      	cmp	r3, #32
 80074ba:	d0f0      	beq.n	800749e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	00030d40 	.word	0x00030d40

080074d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80074d8:	2300      	movs	r3, #0
 80074da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2210      	movs	r2, #16
 80074e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	3301      	adds	r3, #1
 80074e6:	60fb      	str	r3, [r7, #12]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	4a09      	ldr	r2, [pc, #36]	; (8007510 <USB_FlushRxFifo+0x40>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d901      	bls.n	80074f4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e006      	b.n	8007502 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	f003 0310 	and.w	r3, r3, #16
 80074fc:	2b10      	cmp	r3, #16
 80074fe:	d0f0      	beq.n	80074e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3714      	adds	r7, #20
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	00030d40 	.word	0x00030d40

08007514 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	78fb      	ldrb	r3, [r7, #3]
 800752e:	68f9      	ldr	r1, [r7, #12]
 8007530:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007534:	4313      	orrs	r3, r2
 8007536:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007546:	b480      	push	{r7}
 8007548:	b085      	sub	sp, #20
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007560:	f023 0303 	bic.w	r3, r3, #3
 8007564:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007574:	f043 0302 	orr.w	r3, r3, #2
 8007578:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007590:	2300      	movs	r3, #0
 8007592:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	3301      	adds	r3, #1
 8007598:	60fb      	str	r3, [r7, #12]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	4a13      	ldr	r2, [pc, #76]	; (80075ec <USB_CoreReset+0x64>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d901      	bls.n	80075a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e01b      	b.n	80075de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	daf2      	bge.n	8007594 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	f043 0201 	orr.w	r2, r3, #1
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	3301      	adds	r3, #1
 80075c2:	60fb      	str	r3, [r7, #12]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	4a09      	ldr	r2, [pc, #36]	; (80075ec <USB_CoreReset+0x64>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d901      	bls.n	80075d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e006      	b.n	80075de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d0f0      	beq.n	80075be <USB_CoreReset+0x36>

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	00030d40 	.word	0x00030d40

080075f0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08a      	sub	sp, #40	; 0x28
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80075f8:	4b27      	ldr	r3, [pc, #156]	; (8007698 <I2Cx_MspInit+0xa8>)
 80075fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075fc:	4a26      	ldr	r2, [pc, #152]	; (8007698 <I2Cx_MspInit+0xa8>)
 80075fe:	f043 0302 	orr.w	r3, r3, #2
 8007602:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007604:	4b24      	ldr	r3, [pc, #144]	; (8007698 <I2Cx_MspInit+0xa8>)
 8007606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007608:	f003 0302 	and.w	r3, r3, #2
 800760c:	613b      	str	r3, [r7, #16]
 800760e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8007610:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007614:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8007616:	2312      	movs	r3, #18
 8007618:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800761a:	2301      	movs	r3, #1
 800761c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800761e:	2303      	movs	r3, #3
 8007620:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8007622:	2304      	movs	r3, #4
 8007624:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8007626:	f107 0314 	add.w	r3, r7, #20
 800762a:	4619      	mov	r1, r3
 800762c:	481b      	ldr	r0, [pc, #108]	; (800769c <I2Cx_MspInit+0xac>)
 800762e:	f7fa fd0f 	bl	8002050 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8007632:	f107 0314 	add.w	r3, r7, #20
 8007636:	4619      	mov	r1, r3
 8007638:	4818      	ldr	r0, [pc, #96]	; (800769c <I2Cx_MspInit+0xac>)
 800763a:	f7fa fd09 	bl	8002050 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800763e:	4b16      	ldr	r3, [pc, #88]	; (8007698 <I2Cx_MspInit+0xa8>)
 8007640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007642:	4a15      	ldr	r2, [pc, #84]	; (8007698 <I2Cx_MspInit+0xa8>)
 8007644:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007648:	6593      	str	r3, [r2, #88]	; 0x58
 800764a:	4b13      	ldr	r3, [pc, #76]	; (8007698 <I2Cx_MspInit+0xa8>)
 800764c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800764e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007652:	60fb      	str	r3, [r7, #12]
 8007654:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8007656:	4b10      	ldr	r3, [pc, #64]	; (8007698 <I2Cx_MspInit+0xa8>)
 8007658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765a:	4a0f      	ldr	r2, [pc, #60]	; (8007698 <I2Cx_MspInit+0xa8>)
 800765c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007660:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8007662:	4b0d      	ldr	r3, [pc, #52]	; (8007698 <I2Cx_MspInit+0xa8>)
 8007664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007666:	4a0c      	ldr	r2, [pc, #48]	; (8007698 <I2Cx_MspInit+0xa8>)
 8007668:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800766c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800766e:	2200      	movs	r2, #0
 8007670:	210f      	movs	r1, #15
 8007672:	2021      	movs	r0, #33	; 0x21
 8007674:	f7fa fb66 	bl	8001d44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8007678:	2021      	movs	r0, #33	; 0x21
 800767a:	f7fa fb7f 	bl	8001d7c <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800767e:	2200      	movs	r2, #0
 8007680:	210f      	movs	r1, #15
 8007682:	2022      	movs	r0, #34	; 0x22
 8007684:	f7fa fb5e 	bl	8001d44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8007688:	2022      	movs	r0, #34	; 0x22
 800768a:	f7fa fb77 	bl	8001d7c <HAL_NVIC_EnableIRQ>
}
 800768e:	bf00      	nop
 8007690:	3728      	adds	r7, #40	; 0x28
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	40021000 	.word	0x40021000
 800769c:	48000400 	.word	0x48000400

080076a0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a12      	ldr	r2, [pc, #72]	; (80076f4 <I2Cx_Init+0x54>)
 80076ac:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a11      	ldr	r2, [pc, #68]	; (80076f8 <I2Cx_Init+0x58>)
 80076b2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7ff ff89 	bl	80075f0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f7fa ff9c 	bl	800261c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80076e4:	2100      	movs	r1, #0
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7fb fca0 	bl	800302c <HAL_I2CEx_ConfigAnalogFilter>
}
 80076ec:	bf00      	nop
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	40005800 	.word	0x40005800
 80076f8:	00702681 	.word	0x00702681

080076fc <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b08a      	sub	sp, #40	; 0x28
 8007700:	af04      	add	r7, sp, #16
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	4608      	mov	r0, r1
 8007706:	4611      	mov	r1, r2
 8007708:	461a      	mov	r2, r3
 800770a:	4603      	mov	r3, r0
 800770c:	72fb      	strb	r3, [r7, #11]
 800770e:	460b      	mov	r3, r1
 8007710:	813b      	strh	r3, [r7, #8]
 8007712:	4613      	mov	r3, r2
 8007714:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800771a:	7afb      	ldrb	r3, [r7, #11]
 800771c:	b299      	uxth	r1, r3
 800771e:	88f8      	ldrh	r0, [r7, #6]
 8007720:	893a      	ldrh	r2, [r7, #8]
 8007722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007726:	9302      	str	r3, [sp, #8]
 8007728:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800772a:	9301      	str	r3, [sp, #4]
 800772c:	6a3b      	ldr	r3, [r7, #32]
 800772e:	9300      	str	r3, [sp, #0]
 8007730:	4603      	mov	r3, r0
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f7fb f944 	bl	80029c0 <HAL_I2C_Mem_Read>
 8007738:	4603      	mov	r3, r0
 800773a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800773c:	7dfb      	ldrb	r3, [r7, #23]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d004      	beq.n	800774c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8007742:	7afb      	ldrb	r3, [r7, #11]
 8007744:	4619      	mov	r1, r3
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 f832 	bl	80077b0 <I2Cx_Error>
  }
  return status;
 800774c:	7dfb      	ldrb	r3, [r7, #23]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3718      	adds	r7, #24
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b08a      	sub	sp, #40	; 0x28
 800775a:	af04      	add	r7, sp, #16
 800775c:	60f8      	str	r0, [r7, #12]
 800775e:	4608      	mov	r0, r1
 8007760:	4611      	mov	r1, r2
 8007762:	461a      	mov	r2, r3
 8007764:	4603      	mov	r3, r0
 8007766:	72fb      	strb	r3, [r7, #11]
 8007768:	460b      	mov	r3, r1
 800776a:	813b      	strh	r3, [r7, #8]
 800776c:	4613      	mov	r3, r2
 800776e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8007774:	7afb      	ldrb	r3, [r7, #11]
 8007776:	b299      	uxth	r1, r3
 8007778:	88f8      	ldrh	r0, [r7, #6]
 800777a:	893a      	ldrh	r2, [r7, #8]
 800777c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007780:	9302      	str	r3, [sp, #8]
 8007782:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007784:	9301      	str	r3, [sp, #4]
 8007786:	6a3b      	ldr	r3, [r7, #32]
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	4603      	mov	r3, r0
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f7fb f803 	bl	8002798 <HAL_I2C_Mem_Write>
 8007792:	4603      	mov	r3, r0
 8007794:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8007796:	7dfb      	ldrb	r3, [r7, #23]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d004      	beq.n	80077a6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800779c:	7afb      	ldrb	r3, [r7, #11]
 800779e:	4619      	mov	r1, r3
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 f805 	bl	80077b0 <I2Cx_Error>
  }
  return status;
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	460b      	mov	r3, r1
 80077ba:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f7fa ffbc 	bl	800273a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7ff ff6c 	bl	80076a0 <I2Cx_Init>
}
 80077c8:	bf00      	nop
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80077d4:	4802      	ldr	r0, [pc, #8]	; (80077e0 <SENSOR_IO_Init+0x10>)
 80077d6:	f7ff ff63 	bl	80076a0 <I2Cx_Init>
}
 80077da:	bf00      	nop
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	20000790 	.word	0x20000790

080077e4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af02      	add	r7, sp, #8
 80077ea:	4603      	mov	r3, r0
 80077ec:	71fb      	strb	r3, [r7, #7]
 80077ee:	460b      	mov	r3, r1
 80077f0:	71bb      	strb	r3, [r7, #6]
 80077f2:	4613      	mov	r3, r2
 80077f4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80077f6:	79bb      	ldrb	r3, [r7, #6]
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	79f9      	ldrb	r1, [r7, #7]
 80077fc:	2301      	movs	r3, #1
 80077fe:	9301      	str	r3, [sp, #4]
 8007800:	1d7b      	adds	r3, r7, #5
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	2301      	movs	r3, #1
 8007806:	4803      	ldr	r0, [pc, #12]	; (8007814 <SENSOR_IO_Write+0x30>)
 8007808:	f7ff ffa5 	bl	8007756 <I2Cx_WriteMultiple>
}
 800780c:	bf00      	nop
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	20000790 	.word	0x20000790

08007818 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af02      	add	r7, sp, #8
 800781e:	4603      	mov	r3, r0
 8007820:	460a      	mov	r2, r1
 8007822:	71fb      	strb	r3, [r7, #7]
 8007824:	4613      	mov	r3, r2
 8007826:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8007828:	2300      	movs	r3, #0
 800782a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800782c:	79bb      	ldrb	r3, [r7, #6]
 800782e:	b29a      	uxth	r2, r3
 8007830:	79f9      	ldrb	r1, [r7, #7]
 8007832:	2301      	movs	r3, #1
 8007834:	9301      	str	r3, [sp, #4]
 8007836:	f107 030f 	add.w	r3, r7, #15
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	2301      	movs	r3, #1
 800783e:	4804      	ldr	r0, [pc, #16]	; (8007850 <SENSOR_IO_Read+0x38>)
 8007840:	f7ff ff5c 	bl	80076fc <I2Cx_ReadMultiple>

  return read_value;
 8007844:	7bfb      	ldrb	r3, [r7, #15]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	20000790 	.word	0x20000790

08007854 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af02      	add	r7, sp, #8
 800785a:	603a      	str	r2, [r7, #0]
 800785c:	461a      	mov	r2, r3
 800785e:	4603      	mov	r3, r0
 8007860:	71fb      	strb	r3, [r7, #7]
 8007862:	460b      	mov	r3, r1
 8007864:	71bb      	strb	r3, [r7, #6]
 8007866:	4613      	mov	r3, r2
 8007868:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800786a:	79bb      	ldrb	r3, [r7, #6]
 800786c:	b29a      	uxth	r2, r3
 800786e:	79f9      	ldrb	r1, [r7, #7]
 8007870:	88bb      	ldrh	r3, [r7, #4]
 8007872:	9301      	str	r3, [sp, #4]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	2301      	movs	r3, #1
 800787a:	4804      	ldr	r0, [pc, #16]	; (800788c <SENSOR_IO_ReadMultiple+0x38>)
 800787c:	f7ff ff3e 	bl	80076fc <I2Cx_ReadMultiple>
 8007880:	4603      	mov	r3, r0
 8007882:	b29b      	uxth	r3, r3
}
 8007884:	4618      	mov	r0, r3
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	20000790 	.word	0x20000790

08007890 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800789a:	2300      	movs	r3, #0
 800789c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800789e:	4b19      	ldr	r3, [pc, #100]	; (8007904 <BSP_ACCELERO_Init+0x74>)
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	4798      	blx	r3
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b6a      	cmp	r3, #106	; 0x6a
 80078a8:	d002      	beq.n	80078b0 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	73fb      	strb	r3, [r7, #15]
 80078ae:	e024      	b.n	80078fa <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80078b0:	4b15      	ldr	r3, [pc, #84]	; (8007908 <BSP_ACCELERO_Init+0x78>)
 80078b2:	4a14      	ldr	r2, [pc, #80]	; (8007904 <BSP_ACCELERO_Init+0x74>)
 80078b4:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80078b6:	2330      	movs	r3, #48	; 0x30
 80078b8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80078ba:	2300      	movs	r3, #0
 80078bc:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80078be:	2300      	movs	r3, #0
 80078c0:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80078c2:	2340      	movs	r3, #64	; 0x40
 80078c4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80078c6:	2300      	movs	r3, #0
 80078c8:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80078ca:	2300      	movs	r3, #0
 80078cc:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80078ce:	797a      	ldrb	r2, [r7, #5]
 80078d0:	7abb      	ldrb	r3, [r7, #10]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80078d8:	7a3b      	ldrb	r3, [r7, #8]
 80078da:	f043 0304 	orr.w	r3, r3, #4
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	021b      	lsls	r3, r3, #8
 80078e2:	b21a      	sxth	r2, r3
 80078e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	b21b      	sxth	r3, r3
 80078ec:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80078ee:	4b06      	ldr	r3, [pc, #24]	; (8007908 <BSP_ACCELERO_Init+0x78>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	89ba      	ldrh	r2, [r7, #12]
 80078f6:	4610      	mov	r0, r2
 80078f8:	4798      	blx	r3
  }  

  return ret;
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	2000000c 	.word	0x2000000c
 8007908:	200007dc 	.word	0x200007dc

0800790c <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8007914:	4b08      	ldr	r3, [pc, #32]	; (8007938 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d009      	beq.n	8007930 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800791c:	4b06      	ldr	r3, [pc, #24]	; (8007938 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007922:	2b00      	cmp	r3, #0
 8007924:	d004      	beq.n	8007930 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8007926:	4b04      	ldr	r3, [pc, #16]	; (8007938 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	4798      	blx	r3
    }
  }
}
 8007930:	bf00      	nop
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	200007dc 	.word	0x200007dc

0800793c <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	4603      	mov	r3, r0
 8007944:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8007946:	2300      	movs	r3, #0
 8007948:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800794a:	2110      	movs	r1, #16
 800794c:	20d4      	movs	r0, #212	; 0xd4
 800794e:	f7ff ff63 	bl	8007818 <SENSOR_IO_Read>
 8007952:	4603      	mov	r3, r0
 8007954:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8007956:	88fb      	ldrh	r3, [r7, #6]
 8007958:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800795a:	7bbb      	ldrb	r3, [r7, #14]
 800795c:	f003 0303 	and.w	r3, r3, #3
 8007960:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8007962:	7bba      	ldrb	r2, [r7, #14]
 8007964:	7bfb      	ldrb	r3, [r7, #15]
 8007966:	4313      	orrs	r3, r2
 8007968:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800796a:	7bbb      	ldrb	r3, [r7, #14]
 800796c:	461a      	mov	r2, r3
 800796e:	2110      	movs	r1, #16
 8007970:	20d4      	movs	r0, #212	; 0xd4
 8007972:	f7ff ff37 	bl	80077e4 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8007976:	2112      	movs	r1, #18
 8007978:	20d4      	movs	r0, #212	; 0xd4
 800797a:	f7ff ff4d 	bl	8007818 <SENSOR_IO_Read>
 800797e:	4603      	mov	r3, r0
 8007980:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8007982:	88fb      	ldrh	r3, [r7, #6]
 8007984:	0a1b      	lsrs	r3, r3, #8
 8007986:	b29b      	uxth	r3, r3
 8007988:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800798a:	7bbb      	ldrb	r3, [r7, #14]
 800798c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8007990:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8007992:	7bba      	ldrb	r2, [r7, #14]
 8007994:	7bfb      	ldrb	r3, [r7, #15]
 8007996:	4313      	orrs	r3, r2
 8007998:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800799a:	7bbb      	ldrb	r3, [r7, #14]
 800799c:	461a      	mov	r2, r3
 800799e:	2112      	movs	r1, #18
 80079a0:	20d4      	movs	r0, #212	; 0xd4
 80079a2:	f7ff ff1f 	bl	80077e4 <SENSOR_IO_Write>
}
 80079a6:	bf00      	nop
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b082      	sub	sp, #8
 80079b2:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80079b4:	2300      	movs	r3, #0
 80079b6:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80079b8:	2110      	movs	r1, #16
 80079ba:	20d4      	movs	r0, #212	; 0xd4
 80079bc:	f7ff ff2c 	bl	8007818 <SENSOR_IO_Read>
 80079c0:	4603      	mov	r3, r0
 80079c2:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80079c4:	79fb      	ldrb	r3, [r7, #7]
 80079c6:	f003 030f 	and.w	r3, r3, #15
 80079ca:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80079cc:	79fb      	ldrb	r3, [r7, #7]
 80079ce:	461a      	mov	r2, r3
 80079d0:	2110      	movs	r1, #16
 80079d2:	20d4      	movs	r0, #212	; 0xd4
 80079d4:	f7ff ff06 	bl	80077e4 <SENSOR_IO_Write>
}
 80079d8:	bf00      	nop
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80079e0:	b580      	push	{r7, lr}
 80079e2:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80079e4:	f7ff fef4 	bl	80077d0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80079e8:	210f      	movs	r1, #15
 80079ea:	20d4      	movs	r0, #212	; 0xd4
 80079ec:	f7ff ff14 	bl	8007818 <SENSOR_IO_Read>
 80079f0:	4603      	mov	r3, r0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b084      	sub	sp, #16
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	4603      	mov	r3, r0
 80079fe:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8007a00:	2300      	movs	r3, #0
 8007a02:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8007a04:	2115      	movs	r1, #21
 8007a06:	20d4      	movs	r0, #212	; 0xd4
 8007a08:	f7ff ff06 	bl	8007818 <SENSOR_IO_Read>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
 8007a12:	f023 0310 	bic.w	r3, r3, #16
 8007a16:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8007a18:	88fb      	ldrh	r3, [r7, #6]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
 8007a20:	f043 0310 	orr.w	r3, r3, #16
 8007a24:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
 8007a28:	461a      	mov	r2, r3
 8007a2a:	2115      	movs	r1, #21
 8007a2c:	20d4      	movs	r0, #212	; 0xd4
 8007a2e:	f7ff fed9 	bl	80077e4 <SENSOR_IO_Write>
}
 8007a32:	bf00      	nop
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
	...

08007a3c <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b088      	sub	sp, #32
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8007a44:	2300      	movs	r3, #0
 8007a46:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8007a4c:	f04f 0300 	mov.w	r3, #0
 8007a50:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8007a52:	2110      	movs	r1, #16
 8007a54:	20d4      	movs	r0, #212	; 0xd4
 8007a56:	f7ff fedf 	bl	8007818 <SENSOR_IO_Read>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8007a5e:	f107 0208 	add.w	r2, r7, #8
 8007a62:	2306      	movs	r3, #6
 8007a64:	2128      	movs	r1, #40	; 0x28
 8007a66:	20d4      	movs	r0, #212	; 0xd4
 8007a68:	f7ff fef4 	bl	8007854 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	77fb      	strb	r3, [r7, #31]
 8007a70:	e01c      	b.n	8007aac <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8007a72:	7ffb      	ldrb	r3, [r7, #31]
 8007a74:	005b      	lsls	r3, r3, #1
 8007a76:	3301      	adds	r3, #1
 8007a78:	3320      	adds	r3, #32
 8007a7a:	443b      	add	r3, r7
 8007a7c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	021b      	lsls	r3, r3, #8
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	7ffb      	ldrb	r3, [r7, #31]
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	3320      	adds	r3, #32
 8007a8c:	443b      	add	r3, r7
 8007a8e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	4413      	add	r3, r2
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	7ffb      	ldrb	r3, [r7, #31]
 8007a9a:	b212      	sxth	r2, r2
 8007a9c:	005b      	lsls	r3, r3, #1
 8007a9e:	3320      	adds	r3, #32
 8007aa0:	443b      	add	r3, r7
 8007aa2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8007aa6:	7ffb      	ldrb	r3, [r7, #31]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	77fb      	strb	r3, [r7, #31]
 8007aac:	7ffb      	ldrb	r3, [r7, #31]
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d9df      	bls.n	8007a72 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8007ab2:	7dfb      	ldrb	r3, [r7, #23]
 8007ab4:	f003 030c 	and.w	r3, r3, #12
 8007ab8:	2b0c      	cmp	r3, #12
 8007aba:	d829      	bhi.n	8007b10 <LSM6DSL_AccReadXYZ+0xd4>
 8007abc:	a201      	add	r2, pc, #4	; (adr r2, 8007ac4 <LSM6DSL_AccReadXYZ+0x88>)
 8007abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac2:	bf00      	nop
 8007ac4:	08007af9 	.word	0x08007af9
 8007ac8:	08007b11 	.word	0x08007b11
 8007acc:	08007b11 	.word	0x08007b11
 8007ad0:	08007b11 	.word	0x08007b11
 8007ad4:	08007b0b 	.word	0x08007b0b
 8007ad8:	08007b11 	.word	0x08007b11
 8007adc:	08007b11 	.word	0x08007b11
 8007ae0:	08007b11 	.word	0x08007b11
 8007ae4:	08007aff 	.word	0x08007aff
 8007ae8:	08007b11 	.word	0x08007b11
 8007aec:	08007b11 	.word	0x08007b11
 8007af0:	08007b11 	.word	0x08007b11
 8007af4:	08007b05 	.word	0x08007b05
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8007af8:	4b18      	ldr	r3, [pc, #96]	; (8007b5c <LSM6DSL_AccReadXYZ+0x120>)
 8007afa:	61bb      	str	r3, [r7, #24]
    break;
 8007afc:	e008      	b.n	8007b10 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8007afe:	4b18      	ldr	r3, [pc, #96]	; (8007b60 <LSM6DSL_AccReadXYZ+0x124>)
 8007b00:	61bb      	str	r3, [r7, #24]
    break;
 8007b02:	e005      	b.n	8007b10 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8007b04:	4b17      	ldr	r3, [pc, #92]	; (8007b64 <LSM6DSL_AccReadXYZ+0x128>)
 8007b06:	61bb      	str	r3, [r7, #24]
    break;
 8007b08:	e002      	b.n	8007b10 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8007b0a:	4b17      	ldr	r3, [pc, #92]	; (8007b68 <LSM6DSL_AccReadXYZ+0x12c>)
 8007b0c:	61bb      	str	r3, [r7, #24]
    break;    
 8007b0e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8007b10:	2300      	movs	r3, #0
 8007b12:	77fb      	strb	r3, [r7, #31]
 8007b14:	e01a      	b.n	8007b4c <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8007b16:	7ffb      	ldrb	r3, [r7, #31]
 8007b18:	005b      	lsls	r3, r3, #1
 8007b1a:	3320      	adds	r3, #32
 8007b1c:	443b      	add	r3, r7
 8007b1e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8007b22:	ee07 3a90 	vmov	s15, r3
 8007b26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8007b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b32:	7ffb      	ldrb	r3, [r7, #31]
 8007b34:	005b      	lsls	r3, r3, #1
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	4413      	add	r3, r2
 8007b3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b3e:	ee17 2a90 	vmov	r2, s15
 8007b42:	b212      	sxth	r2, r2
 8007b44:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8007b46:	7ffb      	ldrb	r3, [r7, #31]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	77fb      	strb	r3, [r7, #31]
 8007b4c:	7ffb      	ldrb	r3, [r7, #31]
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d9e1      	bls.n	8007b16 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8007b52:	bf00      	nop
 8007b54:	bf00      	nop
 8007b56:	3720      	adds	r7, #32
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	3d79db23 	.word	0x3d79db23
 8007b60:	3df9db23 	.word	0x3df9db23
 8007b64:	3e79db23 	.word	0x3e79db23
 8007b68:	3ef9db23 	.word	0x3ef9db23

08007b6c <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	4603      	mov	r3, r0
 8007b74:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8007b76:	79fb      	ldrb	r3, [r7, #7]
 8007b78:	2b2f      	cmp	r3, #47	; 0x2f
 8007b7a:	d906      	bls.n	8007b8a <Hex2Num+0x1e>
 8007b7c:	79fb      	ldrb	r3, [r7, #7]
 8007b7e:	2b39      	cmp	r3, #57	; 0x39
 8007b80:	d803      	bhi.n	8007b8a <Hex2Num+0x1e>
        return a - '0';
 8007b82:	79fb      	ldrb	r3, [r7, #7]
 8007b84:	3b30      	subs	r3, #48	; 0x30
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	e014      	b.n	8007bb4 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8007b8a:	79fb      	ldrb	r3, [r7, #7]
 8007b8c:	2b60      	cmp	r3, #96	; 0x60
 8007b8e:	d906      	bls.n	8007b9e <Hex2Num+0x32>
 8007b90:	79fb      	ldrb	r3, [r7, #7]
 8007b92:	2b66      	cmp	r3, #102	; 0x66
 8007b94:	d803      	bhi.n	8007b9e <Hex2Num+0x32>
        return (a - 'a') + 10;
 8007b96:	79fb      	ldrb	r3, [r7, #7]
 8007b98:	3b57      	subs	r3, #87	; 0x57
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	e00a      	b.n	8007bb4 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8007b9e:	79fb      	ldrb	r3, [r7, #7]
 8007ba0:	2b40      	cmp	r3, #64	; 0x40
 8007ba2:	d906      	bls.n	8007bb2 <Hex2Num+0x46>
 8007ba4:	79fb      	ldrb	r3, [r7, #7]
 8007ba6:	2b46      	cmp	r3, #70	; 0x46
 8007ba8:	d803      	bhi.n	8007bb2 <Hex2Num+0x46>
        return (a - 'A') + 10;
 8007baa:	79fb      	ldrb	r3, [r7, #7]
 8007bac:	3b37      	subs	r3, #55	; 0x37
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	e000      	b.n	8007bb4 <Hex2Num+0x48>
    }

    return 0;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8007bd2:	e012      	b.n	8007bfa <ParseHexNumber+0x3a>
        sum <<= 4;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	011b      	lsls	r3, r3, #4
 8007bd8:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7ff ffc4 	bl	8007b6c <Hex2Num>
 8007be4:	4603      	mov	r3, r0
 8007be6:	461a      	mov	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4413      	add	r3, r2
 8007bec:	60fb      	str	r3, [r7, #12]
        ptr++;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	607b      	str	r3, [r7, #4]
        i++;
 8007bf4:	7afb      	ldrb	r3, [r7, #11]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	2b2f      	cmp	r3, #47	; 0x2f
 8007c00:	d903      	bls.n	8007c0a <ParseHexNumber+0x4a>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	2b39      	cmp	r3, #57	; 0x39
 8007c08:	d9e4      	bls.n	8007bd4 <ParseHexNumber+0x14>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	2b60      	cmp	r3, #96	; 0x60
 8007c10:	d903      	bls.n	8007c1a <ParseHexNumber+0x5a>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	2b66      	cmp	r3, #102	; 0x66
 8007c18:	d9dc      	bls.n	8007bd4 <ParseHexNumber+0x14>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	2b40      	cmp	r3, #64	; 0x40
 8007c20:	d903      	bls.n	8007c2a <ParseHexNumber+0x6a>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	2b46      	cmp	r3, #70	; 0x46
 8007c28:	d9d4      	bls.n	8007bd4 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d002      	beq.n	8007c36 <ParseHexNumber+0x76>
        *cnt = i;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	7afa      	ldrb	r2, [r7, #11]
 8007c34:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8007c36:	68fb      	ldr	r3, [r7, #12]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	73fb      	strb	r3, [r7, #15]
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8007c52:	2300      	movs	r3, #0
 8007c54:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	2b2d      	cmp	r3, #45	; 0x2d
 8007c5c:	d119      	bne.n	8007c92 <ParseNumber+0x52>
        minus = 1;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	3301      	adds	r3, #1
 8007c66:	607b      	str	r3, [r7, #4]
        i++;
 8007c68:	7bbb      	ldrb	r3, [r7, #14]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8007c6e:	e010      	b.n	8007c92 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	4613      	mov	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	005b      	lsls	r3, r3, #1
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	3b30      	subs	r3, #48	; 0x30
 8007c82:	4413      	add	r3, r2
 8007c84:	60bb      	str	r3, [r7, #8]
        ptr++;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	607b      	str	r3, [r7, #4]
        i++;
 8007c8c:	7bbb      	ldrb	r3, [r7, #14]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	2b2f      	cmp	r3, #47	; 0x2f
 8007c98:	d903      	bls.n	8007ca2 <ParseNumber+0x62>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	2b39      	cmp	r3, #57	; 0x39
 8007ca0:	d9e6      	bls.n	8007c70 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d002      	beq.n	8007cae <ParseNumber+0x6e>
        *cnt = i;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	7bba      	ldrb	r2, [r7, #14]
 8007cac:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d002      	beq.n	8007cba <ParseNumber+0x7a>
        return 0 - sum;
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	425b      	negs	r3, r3
 8007cb8:	e000      	b.n	8007cbc <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8007cba:	68bb      	ldr	r3, [r7, #8]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3714      	adds	r7, #20
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8007cd6:	e019      	b.n	8007d0c <ParseMAC+0x44>
    hexcnt = 1;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	2b3a      	cmp	r3, #58	; 0x3a
 8007ce2:	d00e      	beq.n	8007d02 <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8007ce4:	f107 030e 	add.w	r3, r7, #14
 8007ce8:	4619      	mov	r1, r3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7ff ff68 	bl	8007bc0 <ParseHexNumber>
 8007cf0:	4601      	mov	r1, r0
 8007cf2:	7bfb      	ldrb	r3, [r7, #15]
 8007cf4:	1c5a      	adds	r2, r3, #1
 8007cf6:	73fa      	strb	r2, [r7, #15]
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	b2ca      	uxtb	r2, r1
 8007d00:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8007d02:	7bbb      	ldrb	r3, [r7, #14]
 8007d04:	461a      	mov	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4413      	add	r3, r2
 8007d0a:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1e1      	bne.n	8007cd8 <ParseMAC+0x10>
  }
}
 8007d14:	bf00      	nop
 8007d16:	bf00      	nop
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b084      	sub	sp, #16
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8007d2c:	e019      	b.n	8007d62 <ParseIP+0x44>
    hexcnt = 1;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	2b2e      	cmp	r3, #46	; 0x2e
 8007d38:	d00e      	beq.n	8007d58 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8007d3a:	f107 030e 	add.w	r3, r7, #14
 8007d3e:	4619      	mov	r1, r3
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7ff ff7d 	bl	8007c40 <ParseNumber>
 8007d46:	4601      	mov	r1, r0
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
 8007d4a:	1c5a      	adds	r2, r3, #1
 8007d4c:	73fa      	strb	r2, [r7, #15]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	4413      	add	r3, r2
 8007d54:	b2ca      	uxtb	r2, r1
 8007d56:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8007d58:	7bbb      	ldrb	r3, [r7, #14]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4413      	add	r3, r2
 8007d60:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1e1      	bne.n	8007d2e <ParseIP+0x10>
  }
}
 8007d6a:	bf00      	nop
 8007d6c:	bf00      	nop
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	3302      	adds	r3, #2
 8007d86:	4934      	ldr	r1, [pc, #208]	; (8007e58 <AT_ParseInfo+0xe4>)
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f004 fd89 	bl	800c8a0 <strtok>
 8007d8e:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8007d90:	e05a      	b.n	8007e48 <AT_ParseInfo+0xd4>
    switch (num++) {
 8007d92:	7afb      	ldrb	r3, [r7, #11]
 8007d94:	1c5a      	adds	r2, r3, #1
 8007d96:	72fa      	strb	r2, [r7, #11]
 8007d98:	2b06      	cmp	r3, #6
 8007d9a:	d84f      	bhi.n	8007e3c <AT_ParseInfo+0xc8>
 8007d9c:	a201      	add	r2, pc, #4	; (adr r2, 8007da4 <AT_ParseInfo+0x30>)
 8007d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da2:	bf00      	nop
 8007da4:	08007dc1 	.word	0x08007dc1
 8007da8:	08007dcf 	.word	0x08007dcf
 8007dac:	08007ddf 	.word	0x08007ddf
 8007db0:	08007def 	.word	0x08007def
 8007db4:	08007dff 	.word	0x08007dff
 8007db8:	08007e0f 	.word	0x08007e0f
 8007dbc:	08007e23 	.word	0x08007e23
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	68f9      	ldr	r1, [r7, #12]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f004 fd41 	bl	800c84e <strncpy>
      break;
 8007dcc:	e037      	b.n	8007e3e <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	3320      	adds	r3, #32
 8007dd2:	2218      	movs	r2, #24
 8007dd4:	68f9      	ldr	r1, [r7, #12]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f004 fd39 	bl	800c84e <strncpy>
      break;
 8007ddc:	e02f      	b.n	8007e3e <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	3338      	adds	r3, #56	; 0x38
 8007de2:	2210      	movs	r2, #16
 8007de4:	68f9      	ldr	r1, [r7, #12]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f004 fd31 	bl	800c84e <strncpy>
      break;
 8007dec:	e027      	b.n	8007e3e <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	3348      	adds	r3, #72	; 0x48
 8007df2:	2210      	movs	r2, #16
 8007df4:	68f9      	ldr	r1, [r7, #12]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f004 fd29 	bl	800c84e <strncpy>
      break;
 8007dfc:	e01f      	b.n	8007e3e <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	3358      	adds	r3, #88	; 0x58
 8007e02:	2210      	movs	r2, #16
 8007e04:	68f9      	ldr	r1, [r7, #12]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f004 fd21 	bl	800c84e <strncpy>
      break;
 8007e0c:	e017      	b.n	8007e3e <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8007e0e:	2100      	movs	r1, #0
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f7ff ff15 	bl	8007c40 <ParseNumber>
 8007e16:	4603      	mov	r3, r0
 8007e18:	461a      	mov	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8007e20:	e00d      	b.n	8007e3e <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 8007e22:	490e      	ldr	r1, [pc, #56]	; (8007e5c <AT_ParseInfo+0xe8>)
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f004 fd3b 	bl	800c8a0 <strtok>
 8007e2a:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	3368      	adds	r3, #104	; 0x68
 8007e30:	2220      	movs	r2, #32
 8007e32:	68f9      	ldr	r1, [r7, #12]
 8007e34:	4618      	mov	r0, r3
 8007e36:	f004 fd0a 	bl	800c84e <strncpy>
      break;
 8007e3a:	e000      	b.n	8007e3e <AT_ParseInfo+0xca>

    default: break;
 8007e3c:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8007e3e:	4906      	ldr	r1, [pc, #24]	; (8007e58 <AT_ParseInfo+0xe4>)
 8007e40:	2000      	movs	r0, #0
 8007e42:	f004 fd2d 	bl	800c8a0 <strtok>
 8007e46:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d1a1      	bne.n	8007d92 <AT_ParseInfo+0x1e>
  }
}
 8007e4e:	bf00      	nop
 8007e50:	bf00      	nop
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	0800dba4 	.word	0x0800dba4
 8007e5c:	0800dba8 	.word	0x0800dba8

08007e60 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	3302      	adds	r3, #2
 8007e72:	4952      	ldr	r1, [pc, #328]	; (8007fbc <AT_ParseConnSettings+0x15c>)
 8007e74:	4618      	mov	r0, r3
 8007e76:	f004 fd13 	bl	800c8a0 <strtok>
 8007e7a:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8007e7c:	e095      	b.n	8007faa <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
 8007e80:	1c5a      	adds	r2, r3, #1
 8007e82:	73fa      	strb	r2, [r7, #15]
 8007e84:	2b0b      	cmp	r3, #11
 8007e86:	d87f      	bhi.n	8007f88 <AT_ParseConnSettings+0x128>
 8007e88:	a201      	add	r2, pc, #4	; (adr r2, 8007e90 <AT_ParseConnSettings+0x30>)
 8007e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8e:	bf00      	nop
 8007e90:	08007ec1 	.word	0x08007ec1
 8007e94:	08007ecf 	.word	0x08007ecf
 8007e98:	08007edf 	.word	0x08007edf
 8007e9c:	08007ef3 	.word	0x08007ef3
 8007ea0:	08007f07 	.word	0x08007f07
 8007ea4:	08007f1b 	.word	0x08007f1b
 8007ea8:	08007f29 	.word	0x08007f29
 8007eac:	08007f37 	.word	0x08007f37
 8007eb0:	08007f45 	.word	0x08007f45
 8007eb4:	08007f53 	.word	0x08007f53
 8007eb8:	08007f61 	.word	0x08007f61
 8007ebc:	08007f75 	.word	0x08007f75
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	2221      	movs	r2, #33	; 0x21
 8007ec4:	68b9      	ldr	r1, [r7, #8]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f004 fcc1 	bl	800c84e <strncpy>
      break;
 8007ecc:	e05d      	b.n	8007f8a <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	3321      	adds	r3, #33	; 0x21
 8007ed2:	2221      	movs	r2, #33	; 0x21
 8007ed4:	68b9      	ldr	r1, [r7, #8]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f004 fcb9 	bl	800c84e <strncpy>
      break;
 8007edc:	e055      	b.n	8007f8a <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8007ede:	2100      	movs	r1, #0
 8007ee0:	68b8      	ldr	r0, [r7, #8]
 8007ee2:	f7ff fead 	bl	8007c40 <ParseNumber>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	b2da      	uxtb	r2, r3
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8007ef0:	e04b      	b.n	8007f8a <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	68b8      	ldr	r0, [r7, #8]
 8007ef6:	f7ff fea3 	bl	8007c40 <ParseNumber>
 8007efa:	4603      	mov	r3, r0
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8007f04:	e041      	b.n	8007f8a <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8007f06:	2100      	movs	r1, #0
 8007f08:	68b8      	ldr	r0, [r7, #8]
 8007f0a:	f7ff fe99 	bl	8007c40 <ParseNumber>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	b2da      	uxtb	r2, r3
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8007f18:	e037      	b.n	8007f8a <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	3348      	adds	r3, #72	; 0x48
 8007f1e:	4619      	mov	r1, r3
 8007f20:	68b8      	ldr	r0, [r7, #8]
 8007f22:	f7ff fefc 	bl	8007d1e <ParseIP>
      break;
 8007f26:	e030      	b.n	8007f8a <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	334c      	adds	r3, #76	; 0x4c
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	68b8      	ldr	r0, [r7, #8]
 8007f30:	f7ff fef5 	bl	8007d1e <ParseIP>
      break;
 8007f34:	e029      	b.n	8007f8a <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	3350      	adds	r3, #80	; 0x50
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	68b8      	ldr	r0, [r7, #8]
 8007f3e:	f7ff feee 	bl	8007d1e <ParseIP>
      break;
 8007f42:	e022      	b.n	8007f8a <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	3354      	adds	r3, #84	; 0x54
 8007f48:	4619      	mov	r1, r3
 8007f4a:	68b8      	ldr	r0, [r7, #8]
 8007f4c:	f7ff fee7 	bl	8007d1e <ParseIP>
      break;
 8007f50:	e01b      	b.n	8007f8a <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	3358      	adds	r3, #88	; 0x58
 8007f56:	4619      	mov	r1, r3
 8007f58:	68b8      	ldr	r0, [r7, #8]
 8007f5a:	f7ff fee0 	bl	8007d1e <ParseIP>
      break;
 8007f5e:	e014      	b.n	8007f8a <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8007f60:	2100      	movs	r1, #0
 8007f62:	68b8      	ldr	r0, [r7, #8]
 8007f64:	f7ff fe6c 	bl	8007c40 <ParseNumber>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8007f72:	e00a      	b.n	8007f8a <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8007f74:	2100      	movs	r1, #0
 8007f76:	68b8      	ldr	r0, [r7, #8]
 8007f78:	f7ff fe62 	bl	8007c40 <ParseNumber>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8007f86:	e000      	b.n	8007f8a <AT_ParseConnSettings+0x12a>

    default:
      break;
 8007f88:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8007f8a:	490c      	ldr	r1, [pc, #48]	; (8007fbc <AT_ParseConnSettings+0x15c>)
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	f004 fc87 	bl	800c8a0 <strtok>
 8007f92:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d007      	beq.n	8007faa <AT_ParseConnSettings+0x14a>
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	2b2c      	cmp	r3, #44	; 0x2c
 8007fa2:	d102      	bne.n	8007faa <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8007fa4:	7bfb      	ldrb	r3, [r7, #15]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f47f af66 	bne.w	8007e7e <AT_ParseConnSettings+0x1e>
    }
  }
}
 8007fb2:	bf00      	nop
 8007fb4:	bf00      	nop
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	0800dba4 	.word	0x0800dba4

08007fc0 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	3302      	adds	r3, #2
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	2b31      	cmp	r3, #49	; 0x31
 8007fd2:	bf0c      	ite	eq
 8007fd4:	2301      	moveq	r3, #1
 8007fd6:	2300      	movne	r3, #0
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	461a      	mov	r2, r3
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	701a      	strb	r2, [r3, #0]
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8007fec:	b590      	push	{r4, r7, lr}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8008006:	68b8      	ldr	r0, [r7, #8]
 8008008:	f7f8 f8e2 	bl	80001d0 <strlen>
 800800c:	4603      	mov	r3, r0
 800800e:	b299      	uxth	r1, r3
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8008016:	461a      	mov	r2, r3
 8008018:	68b8      	ldr	r0, [r7, #8]
 800801a:	47a0      	blx	r4
 800801c:	4603      	mov	r3, r0
 800801e:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	dd3e      	ble.n	80080a4 <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8008032:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	4798      	blx	r3
 800803a:	4603      	mov	r3, r0
 800803c:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 800803e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008042:	2b00      	cmp	r3, #0
 8008044:	dd27      	ble.n	8008096 <AT_ExecuteCommand+0xaa>
 8008046:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800804a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800804e:	dc22      	bgt.n	8008096 <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8008050:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008054:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008058:	d105      	bne.n	8008066 <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 800805a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800805e:	b29b      	uxth	r3, r3
 8008060:	3b01      	subs	r3, #1
 8008062:	b29b      	uxth	r3, r3
 8008064:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8008066:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	4413      	add	r3, r2
 800806e:	2200      	movs	r2, #0
 8008070:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8008072:	490f      	ldr	r1, [pc, #60]	; (80080b0 <AT_ExecuteCommand+0xc4>)
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f004 fbfd 	bl	800c874 <strstr>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8008080:	2300      	movs	r3, #0
 8008082:	e010      	b.n	80080a6 <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8008084:	490b      	ldr	r1, [pc, #44]	; (80080b4 <AT_ExecuteCommand+0xc8>)
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f004 fbf4 	bl	800c874 <strstr>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8008092:	2305      	movs	r3, #5
 8008094:	e007      	b.n	80080a6 <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8008096:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800809a:	f113 0f04 	cmn.w	r3, #4
 800809e:	d101      	bne.n	80080a4 <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 80080a0:	2306      	movs	r3, #6
 80080a2:	e000      	b.n	80080a6 <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80080a4:	2304      	movs	r3, #4
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	371c      	adds	r7, #28
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd90      	pop	{r4, r7, pc}
 80080ae:	bf00      	nop
 80080b0:	0800dbb8 	.word	0x0800dbb8
 80080b4:	0800dbc4 	.word	0x0800dbc4

080080b8 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80080c0:	2302      	movs	r3, #2
 80080c2:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f247 5230 	movw	r2, #30000	; 0x7530
 80080ca:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80080d4:	2000      	movs	r0, #0
 80080d6:	4798      	blx	r3
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d113      	bne.n	8008106 <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80080e4:	461a      	mov	r2, r3
 80080e6:	490a      	ldr	r1, [pc, #40]	; (8008110 <ES_WIFI_Init+0x58>)
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7ff ff7f 	bl	8007fec <AT_ExecuteCommand>
 80080ee:	4603      	mov	r3, r0
 80080f0:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d106      	bne.n	8008106 <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7ff fe37 	bl	8007d74 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 8008106:	7bfb      	ldrb	r3, [r7, #15]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	0800dbd4 	.word	0x0800dbd4

08008114 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
 8008120:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00b      	beq.n	8008140 <ES_WIFI_RegisterBusIO+0x2c>
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d008      	beq.n	8008140 <ES_WIFI_RegisterBusIO+0x2c>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d005      	beq.n	8008140 <ES_WIFI_RegisterBusIO+0x2c>
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d002      	beq.n	8008140 <ES_WIFI_RegisterBusIO+0x2c>
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d101      	bne.n	8008144 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8008140:	2302      	movs	r3, #2
 8008142:	e014      	b.n	800816e <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	69ba      	ldr	r2, [r7, #24]
 8008158:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	69fa      	ldr	r2, [r7, #28]
 8008160:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3714      	adds	r7, #20
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
	...

0800817c <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b086      	sub	sp, #24
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
 8008188:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	4932      	ldr	r1, [pc, #200]	; (800825c <ES_WIFI_Connect+0xe0>)
 8008194:	4618      	mov	r0, r3
 8008196:	f004 faf7 	bl	800c788 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80081a6:	461a      	mov	r2, r3
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f7ff ff1f 	bl	8007fec <AT_ExecuteCommand>
 80081ae:	4603      	mov	r3, r0
 80081b0:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80081b2:	7dfb      	ldrb	r3, [r7, #23]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d14b      	bne.n	8008250 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	4927      	ldr	r1, [pc, #156]	; (8008260 <ES_WIFI_Connect+0xe4>)
 80081c2:	4618      	mov	r0, r3
 80081c4:	f004 fae0 	bl	800c788 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80081d4:	461a      	mov	r2, r3
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f7ff ff08 	bl	8007fec <AT_ExecuteCommand>
 80081dc:	4603      	mov	r3, r0
 80081de:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 80081e0:	7dfb      	ldrb	r3, [r7, #23]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d134      	bne.n	8008250 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	78fa      	ldrb	r2, [r7, #3]
 80081ea:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80081f4:	78fa      	ldrb	r2, [r7, #3]
 80081f6:	491b      	ldr	r1, [pc, #108]	; (8008264 <ES_WIFI_Connect+0xe8>)
 80081f8:	4618      	mov	r0, r3
 80081fa:	f004 fac5 	bl	800c788 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800820a:	461a      	mov	r2, r3
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f7ff feed 	bl	8007fec <AT_ExecuteCommand>
 8008212:	4603      	mov	r3, r0
 8008214:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8008216:	7dfb      	ldrb	r3, [r7, #23]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d119      	bne.n	8008250 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008222:	4911      	ldr	r1, [pc, #68]	; (8008268 <ES_WIFI_Connect+0xec>)
 8008224:	4618      	mov	r0, r3
 8008226:	f004 faaf 	bl	800c788 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008236:	461a      	mov	r2, r3
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f7ff fed7 	bl	8007fec <AT_ExecuteCommand>
 800823e:	4603      	mov	r3, r0
 8008240:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8008242:	7dfb      	ldrb	r3, [r7, #23]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d103      	bne.n	8008250 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8008250:	7dfb      	ldrb	r3, [r7, #23]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3718      	adds	r7, #24
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	0800dbec 	.word	0x0800dbec
 8008260:	0800dbf4 	.word	0x0800dbf4
 8008264:	0800dbfc 	.word	0x0800dbfc
 8008268:	0800dc04 	.word	0x0800dc04

0800826c <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800827a:	4911      	ldr	r1, [pc, #68]	; (80082c0 <ES_WIFI_IsConnected+0x54>)
 800827c:	4618      	mov	r0, r3
 800827e:	f004 fa83 	bl	800c788 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800828e:	461a      	mov	r2, r3
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f7ff feab 	bl	8007fec <AT_ExecuteCommand>
 8008296:	4603      	mov	r3, r0
 8008298:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800829a:	7bfb      	ldrb	r3, [r7, #15]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d108      	bne.n	80082b2 <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f503 7294 	add.w	r2, r3, #296	; 0x128
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	33d2      	adds	r3, #210	; 0xd2
 80082aa:	4619      	mov	r1, r3
 80082ac:	4610      	mov	r0, r2
 80082ae:	f7ff fe87 	bl	8007fc0 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	0800dc08 	.word	0x0800dc08

080082c4 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80082d2:	4910      	ldr	r1, [pc, #64]	; (8008314 <ES_WIFI_GetNetworkSettings+0x50>)
 80082d4:	4618      	mov	r0, r3
 80082d6:	f004 fa57 	bl	800c788 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80082e6:	461a      	mov	r2, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f7ff fe7f 	bl	8007fec <AT_ExecuteCommand>
 80082ee:	4603      	mov	r3, r0
 80082f0:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d108      	bne.n	800830a <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f503 7294 	add.w	r2, r3, #296	; 0x128
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	338d      	adds	r3, #141	; 0x8d
 8008302:	4619      	mov	r1, r3
 8008304:	4610      	mov	r0, r2
 8008306:	f7ff fdab 	bl	8007e60 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 800830a:	7bfb      	ldrb	r3, [r7, #15]
}
 800830c:	4618      	mov	r0, r3
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	0800dc10 	.word	0x0800dc10

08008318 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008328:	4912      	ldr	r1, [pc, #72]	; (8008374 <ES_WIFI_GetMACAddress+0x5c>)
 800832a:	4618      	mov	r0, r3
 800832c:	f004 fa2c 	bl	800c788 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800833c:	461a      	mov	r2, r3
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f7ff fe54 	bl	8007fec <AT_ExecuteCommand>
 8008344:	4603      	mov	r3, r0
 8008346:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8008348:	7bfb      	ldrb	r3, [r7, #15]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10c      	bne.n	8008368 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008354:	3302      	adds	r3, #2
 8008356:	4908      	ldr	r1, [pc, #32]	; (8008378 <ES_WIFI_GetMACAddress+0x60>)
 8008358:	4618      	mov	r0, r3
 800835a:	f004 faa1 	bl	800c8a0 <strtok>
 800835e:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 8008360:	6839      	ldr	r1, [r7, #0]
 8008362:	68b8      	ldr	r0, [r7, #8]
 8008364:	f7ff fcb0 	bl	8007cc8 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 8008368:	7bfb      	ldrb	r3, [r7, #15]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	0800dc60 	.word	0x0800dc60
 8008378:	0800dc64 	.word	0x0800dc64

0800837c <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b08c      	sub	sp, #48	; 0x30
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8008384:	4b56      	ldr	r3, [pc, #344]	; (80084e0 <SPI_WIFI_MspInit+0x164>)
 8008386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008388:	4a55      	ldr	r2, [pc, #340]	; (80084e0 <SPI_WIFI_MspInit+0x164>)
 800838a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800838e:	6593      	str	r3, [r2, #88]	; 0x58
 8008390:	4b53      	ldr	r3, [pc, #332]	; (80084e0 <SPI_WIFI_MspInit+0x164>)
 8008392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008398:	61bb      	str	r3, [r7, #24]
 800839a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800839c:	4b50      	ldr	r3, [pc, #320]	; (80084e0 <SPI_WIFI_MspInit+0x164>)
 800839e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083a0:	4a4f      	ldr	r2, [pc, #316]	; (80084e0 <SPI_WIFI_MspInit+0x164>)
 80083a2:	f043 0302 	orr.w	r3, r3, #2
 80083a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80083a8:	4b4d      	ldr	r3, [pc, #308]	; (80084e0 <SPI_WIFI_MspInit+0x164>)
 80083aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ac:	f003 0302 	and.w	r3, r3, #2
 80083b0:	617b      	str	r3, [r7, #20]
 80083b2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80083b4:	4b4a      	ldr	r3, [pc, #296]	; (80084e0 <SPI_WIFI_MspInit+0x164>)
 80083b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083b8:	4a49      	ldr	r2, [pc, #292]	; (80084e0 <SPI_WIFI_MspInit+0x164>)
 80083ba:	f043 0304 	orr.w	r3, r3, #4
 80083be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80083c0:	4b47      	ldr	r3, [pc, #284]	; (80084e0 <SPI_WIFI_MspInit+0x164>)
 80083c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083c4:	f003 0304 	and.w	r3, r3, #4
 80083c8:	613b      	str	r3, [r7, #16]
 80083ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80083cc:	4b44      	ldr	r3, [pc, #272]	; (80084e0 <SPI_WIFI_MspInit+0x164>)
 80083ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083d0:	4a43      	ldr	r2, [pc, #268]	; (80084e0 <SPI_WIFI_MspInit+0x164>)
 80083d2:	f043 0310 	orr.w	r3, r3, #16
 80083d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80083d8:	4b41      	ldr	r3, [pc, #260]	; (80084e0 <SPI_WIFI_MspInit+0x164>)
 80083da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083dc:	f003 0310 	and.w	r3, r3, #16
 80083e0:	60fb      	str	r3, [r7, #12]
 80083e2:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 80083e4:	2200      	movs	r2, #0
 80083e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80083ea:	483e      	ldr	r0, [pc, #248]	; (80084e4 <SPI_WIFI_MspInit+0x168>)
 80083ec:	f7fa f8e6 	bl	80025bc <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 80083f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80083f4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80083f6:	2301      	movs	r3, #1
 80083f8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80083fa:	2300      	movs	r3, #0
 80083fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80083fe:	2300      	movs	r3, #0
 8008400:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8008402:	f107 031c 	add.w	r3, r7, #28
 8008406:	4619      	mov	r1, r3
 8008408:	4836      	ldr	r0, [pc, #216]	; (80084e4 <SPI_WIFI_MspInit+0x168>)
 800840a:	f7f9 fe21 	bl	8002050 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800840e:	2302      	movs	r3, #2
 8008410:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8008412:	4b35      	ldr	r3, [pc, #212]	; (80084e8 <SPI_WIFI_MspInit+0x16c>)
 8008414:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008416:	2300      	movs	r3, #0
 8008418:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800841a:	2300      	movs	r3, #0
 800841c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800841e:	f107 031c 	add.w	r3, r7, #28
 8008422:	4619      	mov	r1, r3
 8008424:	4831      	ldr	r0, [pc, #196]	; (80084ec <SPI_WIFI_MspInit+0x170>)
 8008426:	f7f9 fe13 	bl	8002050 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 800842a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800842e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8008430:	2301      	movs	r3, #1
 8008432:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008434:	2300      	movs	r3, #0
 8008436:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8008438:	2300      	movs	r3, #0
 800843a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 800843c:	2300      	movs	r3, #0
 800843e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8008440:	f107 031c 	add.w	r3, r7, #28
 8008444:	4619      	mov	r1, r3
 8008446:	4829      	ldr	r0, [pc, #164]	; (80084ec <SPI_WIFI_MspInit+0x170>)
 8008448:	f7f9 fe02 	bl	8002050 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 800844c:	2201      	movs	r2, #1
 800844e:	2101      	movs	r1, #1
 8008450:	4826      	ldr	r0, [pc, #152]	; (80084ec <SPI_WIFI_MspInit+0x170>)
 8008452:	f7fa f8b3 	bl	80025bc <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8008456:	2301      	movs	r3, #1
 8008458:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800845a:	2301      	movs	r3, #1
 800845c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800845e:	2300      	movs	r3, #0
 8008460:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008462:	2301      	movs	r3, #1
 8008464:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8008466:	f107 031c 	add.w	r3, r7, #28
 800846a:	4619      	mov	r1, r3
 800846c:	481f      	ldr	r0, [pc, #124]	; (80084ec <SPI_WIFI_MspInit+0x170>)
 800846e:	f7f9 fdef 	bl	8002050 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8008472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008476:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8008478:	2302      	movs	r3, #2
 800847a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800847c:	2300      	movs	r3, #0
 800847e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008480:	2301      	movs	r3, #1
 8008482:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8008484:	2306      	movs	r3, #6
 8008486:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8008488:	f107 031c 	add.w	r3, r7, #28
 800848c:	4619      	mov	r1, r3
 800848e:	4818      	ldr	r0, [pc, #96]	; (80084f0 <SPI_WIFI_MspInit+0x174>)
 8008490:	f7f9 fdde 	bl	8002050 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8008494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008498:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800849a:	2302      	movs	r3, #2
 800849c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800849e:	2300      	movs	r3, #0
 80084a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80084a2:	2301      	movs	r3, #1
 80084a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80084a6:	2306      	movs	r3, #6
 80084a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 80084aa:	f107 031c 	add.w	r3, r7, #28
 80084ae:	4619      	mov	r1, r3
 80084b0:	480f      	ldr	r0, [pc, #60]	; (80084f0 <SPI_WIFI_MspInit+0x174>)
 80084b2:	f7f9 fdcd 	bl	8002050 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 80084b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80084ba:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80084bc:	2302      	movs	r3, #2
 80084be:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 80084c0:	2301      	movs	r3, #1
 80084c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80084c4:	2301      	movs	r3, #1
 80084c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80084c8:	2306      	movs	r3, #6
 80084ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 80084cc:	f107 031c 	add.w	r3, r7, #28
 80084d0:	4619      	mov	r1, r3
 80084d2:	4807      	ldr	r0, [pc, #28]	; (80084f0 <SPI_WIFI_MspInit+0x174>)
 80084d4:	f7f9 fdbc 	bl	8002050 <HAL_GPIO_Init>
}
 80084d8:	bf00      	nop
 80084da:	3730      	adds	r7, #48	; 0x30
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	40021000 	.word	0x40021000
 80084e4:	48000400 	.word	0x48000400
 80084e8:	10110000 	.word	0x10110000
 80084ec:	48001000 	.word	0x48001000
 80084f0:	48000800 	.word	0x48000800

080084f4 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	4603      	mov	r3, r0
 80084fc:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 80084fe:	2300      	movs	r3, #0
 8008500:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 8008502:	88fb      	ldrh	r3, [r7, #6]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d145      	bne.n	8008594 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8008508:	4b27      	ldr	r3, [pc, #156]	; (80085a8 <SPI_WIFI_Init+0xb4>)
 800850a:	4a28      	ldr	r2, [pc, #160]	; (80085ac <SPI_WIFI_Init+0xb8>)
 800850c:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 800850e:	4826      	ldr	r0, [pc, #152]	; (80085a8 <SPI_WIFI_Init+0xb4>)
 8008510:	f7ff ff34 	bl	800837c <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8008514:	4b24      	ldr	r3, [pc, #144]	; (80085a8 <SPI_WIFI_Init+0xb4>)
 8008516:	f44f 7282 	mov.w	r2, #260	; 0x104
 800851a:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 800851c:	4b22      	ldr	r3, [pc, #136]	; (80085a8 <SPI_WIFI_Init+0xb4>)
 800851e:	2200      	movs	r2, #0
 8008520:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8008522:	4b21      	ldr	r3, [pc, #132]	; (80085a8 <SPI_WIFI_Init+0xb4>)
 8008524:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8008528:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800852a:	4b1f      	ldr	r3, [pc, #124]	; (80085a8 <SPI_WIFI_Init+0xb4>)
 800852c:	2200      	movs	r2, #0
 800852e:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8008530:	4b1d      	ldr	r3, [pc, #116]	; (80085a8 <SPI_WIFI_Init+0xb4>)
 8008532:	2200      	movs	r2, #0
 8008534:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8008536:	4b1c      	ldr	r3, [pc, #112]	; (80085a8 <SPI_WIFI_Init+0xb4>)
 8008538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800853c:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 800853e:	4b1a      	ldr	r3, [pc, #104]	; (80085a8 <SPI_WIFI_Init+0xb4>)
 8008540:	2210      	movs	r2, #16
 8008542:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8008544:	4b18      	ldr	r3, [pc, #96]	; (80085a8 <SPI_WIFI_Init+0xb4>)
 8008546:	2200      	movs	r2, #0
 8008548:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 800854a:	4b17      	ldr	r3, [pc, #92]	; (80085a8 <SPI_WIFI_Init+0xb4>)
 800854c:	2200      	movs	r2, #0
 800854e:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8008550:	4b15      	ldr	r3, [pc, #84]	; (80085a8 <SPI_WIFI_Init+0xb4>)
 8008552:	2200      	movs	r2, #0
 8008554:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8008556:	4b14      	ldr	r3, [pc, #80]	; (80085a8 <SPI_WIFI_Init+0xb4>)
 8008558:	2200      	movs	r2, #0
 800855a:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 800855c:	4812      	ldr	r0, [pc, #72]	; (80085a8 <SPI_WIFI_Init+0xb4>)
 800855e:	f7fc fb71 	bl	8004c44 <HAL_SPI_Init>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d002      	beq.n	800856e <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8008568:	f04f 33ff 	mov.w	r3, #4294967295
 800856c:	e018      	b.n	80085a0 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 800856e:	2200      	movs	r2, #0
 8008570:	2100      	movs	r1, #0
 8008572:	2007      	movs	r0, #7
 8008574:	f7f9 fbe6 	bl	8001d44 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8008578:	2007      	movs	r0, #7
 800857a:	f7f9 fbff 	bl	8001d7c <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 800857e:	2200      	movs	r2, #0
 8008580:	2100      	movs	r1, #0
 8008582:	2033      	movs	r0, #51	; 0x33
 8008584:	f7f9 fbde 	bl	8001d44 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8008588:	2033      	movs	r0, #51	; 0x33
 800858a:	f7f9 fbf7 	bl	8001d7c <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 800858e:	200a      	movs	r0, #10
 8008590:	f000 f9fe 	bl	8008990 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 8008594:	f000 f80c 	bl	80085b0 <SPI_WIFI_ResetModule>
 8008598:	4603      	mov	r3, r0
 800859a:	73fb      	strb	r3, [r7, #15]

  return rc;
 800859c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	200007e0 	.word	0x200007e0
 80085ac:	40003c00 	.word	0x40003c00

080085b0 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 80085b6:	f7f9 fab9 	bl	8001b2c <HAL_GetTick>
 80085ba:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 80085bc:	2300      	movs	r3, #0
 80085be:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 80085c0:	2200      	movs	r2, #0
 80085c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80085c6:	4830      	ldr	r0, [pc, #192]	; (8008688 <SPI_WIFI_ResetModule+0xd8>)
 80085c8:	f7f9 fff8 	bl	80025bc <HAL_GPIO_WritePin>
 80085cc:	200a      	movs	r0, #10
 80085ce:	f7f9 fab9 	bl	8001b44 <HAL_Delay>
 80085d2:	2201      	movs	r2, #1
 80085d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80085d8:	482b      	ldr	r0, [pc, #172]	; (8008688 <SPI_WIFI_ResetModule+0xd8>)
 80085da:	f7f9 ffef 	bl	80025bc <HAL_GPIO_WritePin>
 80085de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80085e2:	f7f9 faaf 	bl	8001b44 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 80085e6:	2200      	movs	r2, #0
 80085e8:	2101      	movs	r1, #1
 80085ea:	4827      	ldr	r0, [pc, #156]	; (8008688 <SPI_WIFI_ResetModule+0xd8>)
 80085ec:	f7f9 ffe6 	bl	80025bc <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80085f0:	200f      	movs	r0, #15
 80085f2:	f000 f9cd 	bl	8008990 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 80085f6:	e020      	b.n	800863a <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 80085f8:	7bfb      	ldrb	r3, [r7, #15]
 80085fa:	463a      	mov	r2, r7
 80085fc:	18d1      	adds	r1, r2, r3
 80085fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008602:	2201      	movs	r2, #1
 8008604:	4821      	ldr	r0, [pc, #132]	; (800868c <SPI_WIFI_ResetModule+0xdc>)
 8008606:	f7fc fbe8 	bl	8004dda <HAL_SPI_Receive>
 800860a:	4603      	mov	r3, r0
 800860c:	71fb      	strb	r3, [r7, #7]
    count += 2;
 800860e:	7bfb      	ldrb	r3, [r7, #15]
 8008610:	3302      	adds	r3, #2
 8008612:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8008614:	f7f9 fa8a 	bl	8001b2c <HAL_GetTick>
 8008618:	4602      	mov	r2, r0
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	1ad3      	subs	r3, r2, r3
 800861e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008622:	d202      	bcs.n	800862a <SPI_WIFI_ResetModule+0x7a>
 8008624:	79fb      	ldrb	r3, [r7, #7]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d007      	beq.n	800863a <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 800862a:	2201      	movs	r2, #1
 800862c:	2101      	movs	r1, #1
 800862e:	4816      	ldr	r0, [pc, #88]	; (8008688 <SPI_WIFI_ResetModule+0xd8>)
 8008630:	f7f9 ffc4 	bl	80025bc <HAL_GPIO_WritePin>
      return -1;
 8008634:	f04f 33ff 	mov.w	r3, #4294967295
 8008638:	e021      	b.n	800867e <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 800863a:	2102      	movs	r1, #2
 800863c:	4812      	ldr	r0, [pc, #72]	; (8008688 <SPI_WIFI_ResetModule+0xd8>)
 800863e:	f7f9 ffa5 	bl	800258c <HAL_GPIO_ReadPin>
 8008642:	4603      	mov	r3, r0
 8008644:	2b01      	cmp	r3, #1
 8008646:	d0d7      	beq.n	80085f8 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 8008648:	2201      	movs	r2, #1
 800864a:	2101      	movs	r1, #1
 800864c:	480e      	ldr	r0, [pc, #56]	; (8008688 <SPI_WIFI_ResetModule+0xd8>)
 800864e:	f7f9 ffb5 	bl	80025bc <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8008652:	783b      	ldrb	r3, [r7, #0]
 8008654:	2b15      	cmp	r3, #21
 8008656:	d10e      	bne.n	8008676 <SPI_WIFI_ResetModule+0xc6>
 8008658:	787b      	ldrb	r3, [r7, #1]
 800865a:	2b15      	cmp	r3, #21
 800865c:	d10b      	bne.n	8008676 <SPI_WIFI_ResetModule+0xc6>
 800865e:	78bb      	ldrb	r3, [r7, #2]
 8008660:	2b0d      	cmp	r3, #13
 8008662:	d108      	bne.n	8008676 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8008664:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8008666:	2b0a      	cmp	r3, #10
 8008668:	d105      	bne.n	8008676 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800866a:	793b      	ldrb	r3, [r7, #4]
 800866c:	2b3e      	cmp	r3, #62	; 0x3e
 800866e:	d102      	bne.n	8008676 <SPI_WIFI_ResetModule+0xc6>
 8008670:	797b      	ldrb	r3, [r7, #5]
 8008672:	2b20      	cmp	r3, #32
 8008674:	d002      	beq.n	800867c <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8008676:	f04f 33ff 	mov.w	r3, #4294967295
 800867a:	e000      	b.n	800867e <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	48001000 	.word	0x48001000
 800868c:	200007e0 	.word	0x200007e0

08008690 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8008694:	4802      	ldr	r0, [pc, #8]	; (80086a0 <SPI_WIFI_DeInit+0x10>)
 8008696:	f7fc fb78 	bl	8004d8a <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	200007e0 	.word	0x200007e0

080086a4 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 80086ac:	f7f9 fa3e 	bl	8001b2c <HAL_GetTick>
 80086b0:	4603      	mov	r3, r0
 80086b2:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 80086b4:	e00a      	b.n	80086cc <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80086b6:	f7f9 fa39 	bl	8001b2c <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	1ad2      	subs	r2, r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d902      	bls.n	80086cc <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 80086c6:	f04f 33ff 	mov.w	r3, #4294967295
 80086ca:	e007      	b.n	80086dc <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 80086cc:	2102      	movs	r1, #2
 80086ce:	4805      	ldr	r0, [pc, #20]	; (80086e4 <wait_cmddata_rdy_high+0x40>)
 80086d0:	f7f9 ff5c 	bl	800258c <HAL_GPIO_ReadPin>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d1ed      	bne.n	80086b6 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	48001000 	.word	0x48001000

080086e8 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80086f0:	f7f9 fa1c 	bl	8001b2c <HAL_GetTick>
 80086f4:	4603      	mov	r3, r0
 80086f6:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 80086f8:	e00a      	b.n	8008710 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80086fa:	f7f9 fa17 	bl	8001b2c <HAL_GetTick>
 80086fe:	4602      	mov	r2, r0
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	1ad2      	subs	r2, r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	429a      	cmp	r2, r3
 8008708:	d902      	bls.n	8008710 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800870a:	f04f 33ff 	mov.w	r3, #4294967295
 800870e:	e004      	b.n	800871a <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8008710:	4b04      	ldr	r3, [pc, #16]	; (8008724 <wait_cmddata_rdy_rising_event+0x3c>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d0f0      	beq.n	80086fa <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8008718:	2300      	movs	r3, #0
#endif
}
 800871a:	4618      	mov	r0, r3
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	2000084c 	.word	0x2000084c

08008728 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8008730:	f7f9 f9fc 	bl	8001b2c <HAL_GetTick>
 8008734:	4603      	mov	r3, r0
 8008736:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 8008738:	e00a      	b.n	8008750 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800873a:	f7f9 f9f7 	bl	8001b2c <HAL_GetTick>
 800873e:	4602      	mov	r2, r0
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	1ad2      	subs	r2, r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	429a      	cmp	r2, r3
 8008748:	d902      	bls.n	8008750 <wait_spi_rx_event+0x28>
    {
      return -1;
 800874a:	f04f 33ff 	mov.w	r3, #4294967295
 800874e:	e004      	b.n	800875a <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 8008750:	4b04      	ldr	r3, [pc, #16]	; (8008764 <wait_spi_rx_event+0x3c>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d0f0      	beq.n	800873a <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8008758:	2300      	movs	r3, #0
#endif
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	20000844 	.word	0x20000844

08008768 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8008770:	f7f9 f9dc 	bl	8001b2c <HAL_GetTick>
 8008774:	4603      	mov	r3, r0
 8008776:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 8008778:	e00a      	b.n	8008790 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800877a:	f7f9 f9d7 	bl	8001b2c <HAL_GetTick>
 800877e:	4602      	mov	r2, r0
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	1ad2      	subs	r2, r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	429a      	cmp	r2, r3
 8008788:	d902      	bls.n	8008790 <wait_spi_tx_event+0x28>
    {
      return -1;
 800878a:	f04f 33ff 	mov.w	r3, #4294967295
 800878e:	e004      	b.n	800879a <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 8008790:	4b04      	ldr	r3, [pc, #16]	; (80087a4 <wait_spi_tx_event+0x3c>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d0f0      	beq.n	800877a <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8008798:	2300      	movs	r3, #0
#endif
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	20000848 	.word	0x20000848

080087a8 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b086      	sub	sp, #24
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	460b      	mov	r3, r1
 80087b2:	607a      	str	r2, [r7, #4]
 80087b4:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 80087b6:	2300      	movs	r3, #0
 80087b8:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 80087ba:	2201      	movs	r2, #1
 80087bc:	2101      	movs	r1, #1
 80087be:	4834      	ldr	r0, [pc, #208]	; (8008890 <SPI_WIFI_ReceiveData+0xe8>)
 80087c0:	f7f9 fefc 	bl	80025bc <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 80087c4:	2003      	movs	r0, #3
 80087c6:	f000 f8e3 	bl	8008990 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7ff ff8b 	bl	80086e8 <wait_cmddata_rdy_rising_event>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	da02      	bge.n	80087de <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 80087d8:	f06f 0302 	mvn.w	r3, #2
 80087dc:	e054      	b.n	8008888 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 80087de:	2200      	movs	r2, #0
 80087e0:	2101      	movs	r1, #1
 80087e2:	482b      	ldr	r0, [pc, #172]	; (8008890 <SPI_WIFI_ReceiveData+0xe8>)
 80087e4:	f7f9 feea 	bl	80025bc <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80087e8:	200f      	movs	r0, #15
 80087ea:	f000 f8d1 	bl	8008990 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 80087ee:	e03d      	b.n	800886c <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 80087f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80087f4:	897b      	ldrh	r3, [r7, #10]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	db02      	blt.n	8008800 <SPI_WIFI_ReceiveData+0x58>
 80087fa:	897b      	ldrh	r3, [r7, #10]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d13c      	bne.n	800887a <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8008800:	4b24      	ldr	r3, [pc, #144]	; (8008894 <SPI_WIFI_ReceiveData+0xec>)
 8008802:	2201      	movs	r2, #1
 8008804:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8008806:	f107 0314 	add.w	r3, r7, #20
 800880a:	2201      	movs	r2, #1
 800880c:	4619      	mov	r1, r3
 800880e:	4822      	ldr	r0, [pc, #136]	; (8008898 <SPI_WIFI_ReceiveData+0xf0>)
 8008810:	f7fc feb4 	bl	800557c <HAL_SPI_Receive_IT>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d007      	beq.n	800882a <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800881a:	2201      	movs	r2, #1
 800881c:	2101      	movs	r1, #1
 800881e:	481c      	ldr	r0, [pc, #112]	; (8008890 <SPI_WIFI_ReceiveData+0xe8>)
 8008820:	f7f9 fecc 	bl	80025bc <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8008824:	f04f 33ff 	mov.w	r3, #4294967295
 8008828:	e02e      	b.n	8008888 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4618      	mov	r0, r3
 800882e:	f7ff ff7b 	bl	8008728 <wait_spi_rx_event>

      pData[0] = tmp[0];
 8008832:	7d3a      	ldrb	r2, [r7, #20]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	3301      	adds	r3, #1
 800883c:	7d7a      	ldrb	r2, [r7, #21]
 800883e:	701a      	strb	r2, [r3, #0]
      length += 2;
 8008840:	8afb      	ldrh	r3, [r7, #22]
 8008842:	3302      	adds	r3, #2
 8008844:	b29b      	uxth	r3, r3
 8008846:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	3302      	adds	r3, #2
 800884c:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 800884e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008852:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008856:	db09      	blt.n	800886c <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8008858:	2201      	movs	r2, #1
 800885a:	2101      	movs	r1, #1
 800885c:	480c      	ldr	r0, [pc, #48]	; (8008890 <SPI_WIFI_ReceiveData+0xe8>)
 800885e:	f7f9 fead 	bl	80025bc <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8008862:	f7ff fea5 	bl	80085b0 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8008866:	f06f 0303 	mvn.w	r3, #3
 800886a:	e00d      	b.n	8008888 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 800886c:	2102      	movs	r1, #2
 800886e:	4808      	ldr	r0, [pc, #32]	; (8008890 <SPI_WIFI_ReceiveData+0xe8>)
 8008870:	f7f9 fe8c 	bl	800258c <HAL_GPIO_ReadPin>
 8008874:	4603      	mov	r3, r0
 8008876:	2b01      	cmp	r3, #1
 8008878:	d0ba      	beq.n	80087f0 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 800887a:	2201      	movs	r2, #1
 800887c:	2101      	movs	r1, #1
 800887e:	4804      	ldr	r0, [pc, #16]	; (8008890 <SPI_WIFI_ReceiveData+0xe8>)
 8008880:	f7f9 fe9c 	bl	80025bc <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8008884:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8008888:	4618      	mov	r0, r3
 800888a:	3718      	adds	r7, #24
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	48001000 	.word	0x48001000
 8008894:	20000844 	.word	0x20000844
 8008898:	200007e0 	.word	0x200007e0

0800889c <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	460b      	mov	r3, r1
 80088a6:	607a      	str	r2, [r7, #4]
 80088a8:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7ff fef9 	bl	80086a4 <wait_cmddata_rdy_high>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	da02      	bge.n	80088be <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 80088b8:	f04f 33ff 	mov.w	r3, #4294967295
 80088bc:	e04f      	b.n	800895e <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 80088be:	4b2a      	ldr	r3, [pc, #168]	; (8008968 <SPI_WIFI_SendData+0xcc>)
 80088c0:	2201      	movs	r2, #1
 80088c2:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 80088c4:	2200      	movs	r2, #0
 80088c6:	2101      	movs	r1, #1
 80088c8:	4828      	ldr	r0, [pc, #160]	; (800896c <SPI_WIFI_SendData+0xd0>)
 80088ca:	f7f9 fe77 	bl	80025bc <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80088ce:	200f      	movs	r0, #15
 80088d0:	f000 f85e 	bl	8008990 <SPI_WIFI_DelayUs>
  if (len > 1)
 80088d4:	897b      	ldrh	r3, [r7, #10]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d919      	bls.n	800890e <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 80088da:	4b25      	ldr	r3, [pc, #148]	; (8008970 <SPI_WIFI_SendData+0xd4>)
 80088dc:	2201      	movs	r2, #1
 80088de:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 80088e0:	897b      	ldrh	r3, [r7, #10]
 80088e2:	085b      	lsrs	r3, r3, #1
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	461a      	mov	r2, r3
 80088e8:	68f9      	ldr	r1, [r7, #12]
 80088ea:	4822      	ldr	r0, [pc, #136]	; (8008974 <SPI_WIFI_SendData+0xd8>)
 80088ec:	f7fc fdb8 	bl	8005460 <HAL_SPI_Transmit_IT>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d007      	beq.n	8008906 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 80088f6:	2201      	movs	r2, #1
 80088f8:	2101      	movs	r1, #1
 80088fa:	481c      	ldr	r0, [pc, #112]	; (800896c <SPI_WIFI_SendData+0xd0>)
 80088fc:	f7f9 fe5e 	bl	80025bc <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8008900:	f04f 33ff 	mov.w	r3, #4294967295
 8008904:	e02b      	b.n	800895e <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4618      	mov	r0, r3
 800890a:	f7ff ff2d 	bl	8008768 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 800890e:	897b      	ldrh	r3, [r7, #10]
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	2b00      	cmp	r3, #0
 8008916:	d020      	beq.n	800895a <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 8008918:	897b      	ldrh	r3, [r7, #10]
 800891a:	3b01      	subs	r3, #1
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	4413      	add	r3, r2
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8008924:	230a      	movs	r3, #10
 8008926:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8008928:	4b11      	ldr	r3, [pc, #68]	; (8008970 <SPI_WIFI_SendData+0xd4>)
 800892a:	2201      	movs	r2, #1
 800892c:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800892e:	f107 0314 	add.w	r3, r7, #20
 8008932:	2201      	movs	r2, #1
 8008934:	4619      	mov	r1, r3
 8008936:	480f      	ldr	r0, [pc, #60]	; (8008974 <SPI_WIFI_SendData+0xd8>)
 8008938:	f7fc fd92 	bl	8005460 <HAL_SPI_Transmit_IT>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d007      	beq.n	8008952 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8008942:	2201      	movs	r2, #1
 8008944:	2101      	movs	r1, #1
 8008946:	4809      	ldr	r0, [pc, #36]	; (800896c <SPI_WIFI_SendData+0xd0>)
 8008948:	f7f9 fe38 	bl	80025bc <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800894c:	f04f 33ff 	mov.w	r3, #4294967295
 8008950:	e005      	b.n	800895e <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4618      	mov	r0, r3
 8008956:	f7ff ff07 	bl	8008768 <wait_spi_tx_event>
    
  }
  return len;
 800895a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3718      	adds	r7, #24
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	2000084c 	.word	0x2000084c
 800896c:	48001000 	.word	0x48001000
 8008970:	20000848 	.word	0x20000848
 8008974:	200007e0 	.word	0x200007e0

08008978 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f7f9 f8df 	bl	8001b44 <HAL_Delay>
}
 8008986:	bf00      	nop
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
	...

08008990 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8008998:	2300      	movs	r3, #0
 800899a:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 800899c:	2300      	movs	r3, #0
 800899e:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 80089a0:	4b20      	ldr	r3, [pc, #128]	; (8008a24 <SPI_WIFI_DelayUs+0x94>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d122      	bne.n	80089ee <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 80089a8:	4b1f      	ldr	r3, [pc, #124]	; (8008a28 <SPI_WIFI_DelayUs+0x98>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a1f      	ldr	r2, [pc, #124]	; (8008a2c <SPI_WIFI_DelayUs+0x9c>)
 80089ae:	fba2 2303 	umull	r2, r3, r2, r3
 80089b2:	099b      	lsrs	r3, r3, #6
 80089b4:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 80089b6:	2300      	movs	r3, #0
 80089b8:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 80089be:	f7f9 f8b5 	bl	8001b2c <HAL_GetTick>
 80089c2:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 80089c4:	e002      	b.n	80089cc <SPI_WIFI_DelayUs+0x3c>
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	3b01      	subs	r3, #1
 80089ca:	60bb      	str	r3, [r7, #8]
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1f9      	bne.n	80089c6 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 80089d2:	f7f9 f8ab 	bl	8001b2c <HAL_GetTick>
 80089d6:	4602      	mov	r2, r0
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	4a11      	ldr	r2, [pc, #68]	; (8008a24 <SPI_WIFI_DelayUs+0x94>)
 80089de:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 80089e0:	4b10      	ldr	r3, [pc, #64]	; (8008a24 <SPI_WIFI_DelayUs+0x94>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d102      	bne.n	80089ee <SPI_WIFI_DelayUs+0x5e>
 80089e8:	4b0e      	ldr	r3, [pc, #56]	; (8008a24 <SPI_WIFI_DelayUs+0x94>)
 80089ea:	2201      	movs	r2, #1
 80089ec:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 80089ee:	4b0e      	ldr	r3, [pc, #56]	; (8008a28 <SPI_WIFI_DelayUs+0x98>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a0f      	ldr	r2, [pc, #60]	; (8008a30 <SPI_WIFI_DelayUs+0xa0>)
 80089f4:	fba2 2303 	umull	r2, r3, r2, r3
 80089f8:	0c9a      	lsrs	r2, r3, #18
 80089fa:	4b0a      	ldr	r3, [pc, #40]	; (8008a24 <SPI_WIFI_DelayUs+0x94>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a02:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	fb02 f303 	mul.w	r3, r2, r3
 8008a0c:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8008a0e:	e002      	b.n	8008a16 <SPI_WIFI_DelayUs+0x86>
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	3b01      	subs	r3, #1
 8008a14:	60bb      	str	r3, [r7, #8]
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1f9      	bne.n	8008a10 <SPI_WIFI_DelayUs+0x80>
  return;
 8008a1c:	bf00      	nop
}
 8008a1e:	3718      	adds	r7, #24
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	20000850 	.word	0x20000850
 8008a28:	20000000 	.word	0x20000000
 8008a2c:	10624dd3 	.word	0x10624dd3
 8008a30:	431bde83 	.word	0x431bde83

08008a34 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8008a3c:	4b06      	ldr	r3, [pc, #24]	; (8008a58 <HAL_SPI_RxCpltCallback+0x24>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d002      	beq.n	8008a4a <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8008a44:	4b04      	ldr	r3, [pc, #16]	; (8008a58 <HAL_SPI_RxCpltCallback+0x24>)
 8008a46:	2200      	movs	r2, #0
 8008a48:	601a      	str	r2, [r3, #0]
  }
}
 8008a4a:	bf00      	nop
 8008a4c:	370c      	adds	r7, #12
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	20000844 	.word	0x20000844

08008a5c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8008a64:	4b06      	ldr	r3, [pc, #24]	; (8008a80 <HAL_SPI_TxCpltCallback+0x24>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d002      	beq.n	8008a72 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8008a6c:	4b04      	ldr	r3, [pc, #16]	; (8008a80 <HAL_SPI_TxCpltCallback+0x24>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	601a      	str	r2, [r3, #0]
  }
}
 8008a72:	bf00      	nop
 8008a74:	370c      	adds	r7, #12
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	20000848 	.word	0x20000848

08008a84 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8008a84:	b480      	push	{r7}
 8008a86:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8008a88:	4b05      	ldr	r3, [pc, #20]	; (8008aa0 <SPI_WIFI_ISR+0x1c>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d102      	bne.n	8008a96 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8008a90:	4b03      	ldr	r3, [pc, #12]	; (8008aa0 <SPI_WIFI_ISR+0x1c>)
 8008a92:	2200      	movs	r2, #0
 8008a94:	601a      	str	r2, [r3, #0]
   }
}
 8008a96:	bf00      	nop
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	2000084c 	.word	0x2000084c

08008aa4 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8008aae:	4b0d      	ldr	r3, [pc, #52]	; (8008ae4 <WIFI_Init+0x40>)
 8008ab0:	9301      	str	r3, [sp, #4]
 8008ab2:	4b0d      	ldr	r3, [pc, #52]	; (8008ae8 <WIFI_Init+0x44>)
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	4b0d      	ldr	r3, [pc, #52]	; (8008aec <WIFI_Init+0x48>)
 8008ab8:	4a0d      	ldr	r2, [pc, #52]	; (8008af0 <WIFI_Init+0x4c>)
 8008aba:	490e      	ldr	r1, [pc, #56]	; (8008af4 <WIFI_Init+0x50>)
 8008abc:	480e      	ldr	r0, [pc, #56]	; (8008af8 <WIFI_Init+0x54>)
 8008abe:	f7ff fb29 	bl	8008114 <ES_WIFI_RegisterBusIO>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d107      	bne.n	8008ad8 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8008ac8:	480b      	ldr	r0, [pc, #44]	; (8008af8 <WIFI_Init+0x54>)
 8008aca:	f7ff faf5 	bl	80080b8 <ES_WIFI_Init>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d101      	bne.n	8008ad8 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8008ad8:	79fb      	ldrb	r3, [r7, #7]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	080087a9 	.word	0x080087a9
 8008ae8:	0800889d 	.word	0x0800889d
 8008aec:	08008979 	.word	0x08008979
 8008af0:	08008691 	.word	0x08008691
 8008af4:	080084f5 	.word	0x080084f5
 8008af8:	20000854 	.word	0x20000854

08008afc <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b086      	sub	sp, #24
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	4613      	mov	r3, r2
 8008b08:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8008b0e:	79fb      	ldrb	r3, [r7, #7]
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	68f9      	ldr	r1, [r7, #12]
 8008b14:	4809      	ldr	r0, [pc, #36]	; (8008b3c <WIFI_Connect+0x40>)
 8008b16:	f7ff fb31 	bl	800817c <ES_WIFI_Connect>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d107      	bne.n	8008b30 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8008b20:	4806      	ldr	r0, [pc, #24]	; (8008b3c <WIFI_Connect+0x40>)
 8008b22:	f7ff fbcf 	bl	80082c4 <ES_WIFI_GetNetworkSettings>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d101      	bne.n	8008b30 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8008b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3718      	adds	r7, #24
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	20000854 	.word	0x20000854

08008b40 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8008b4c:	6879      	ldr	r1, [r7, #4]
 8008b4e:	4806      	ldr	r0, [pc, #24]	; (8008b68 <WIFI_GetMAC_Address+0x28>)
 8008b50:	f7ff fbe2 	bl	8008318 <ES_WIFI_GetMACAddress>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d101      	bne.n	8008b5e <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8008b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	20000854 	.word	0x20000854

08008b6c <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8008b78:	4809      	ldr	r0, [pc, #36]	; (8008ba0 <WIFI_GetIP_Address+0x34>)
 8008b7a:	f7ff fb77 	bl	800826c <ES_WIFI_IsConnected>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d107      	bne.n	8008b94 <WIFI_GetIP_Address+0x28>
 8008b84:	4b06      	ldr	r3, [pc, #24]	; (8008ba0 <WIFI_GetIP_Address+0x34>)
 8008b86:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 8008b8a:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	20000854 	.word	0x20000854

08008ba4 <__NVIC_SetPriority>:
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	4603      	mov	r3, r0
 8008bac:	6039      	str	r1, [r7, #0]
 8008bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	db0a      	blt.n	8008bce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	490c      	ldr	r1, [pc, #48]	; (8008bf0 <__NVIC_SetPriority+0x4c>)
 8008bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bc2:	0112      	lsls	r2, r2, #4
 8008bc4:	b2d2      	uxtb	r2, r2
 8008bc6:	440b      	add	r3, r1
 8008bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008bcc:	e00a      	b.n	8008be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	4908      	ldr	r1, [pc, #32]	; (8008bf4 <__NVIC_SetPriority+0x50>)
 8008bd4:	79fb      	ldrb	r3, [r7, #7]
 8008bd6:	f003 030f 	and.w	r3, r3, #15
 8008bda:	3b04      	subs	r3, #4
 8008bdc:	0112      	lsls	r2, r2, #4
 8008bde:	b2d2      	uxtb	r2, r2
 8008be0:	440b      	add	r3, r1
 8008be2:	761a      	strb	r2, [r3, #24]
}
 8008be4:	bf00      	nop
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr
 8008bf0:	e000e100 	.word	0xe000e100
 8008bf4:	e000ed00 	.word	0xe000ed00

08008bf8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008bfc:	4b05      	ldr	r3, [pc, #20]	; (8008c14 <SysTick_Handler+0x1c>)
 8008bfe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008c00:	f002 f886 	bl	800ad10 <xTaskGetSchedulerState>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d001      	beq.n	8008c0e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008c0a:	f003 f86d 	bl	800bce8 <xPortSysTickHandler>
  }
}
 8008c0e:	bf00      	nop
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	e000e010 	.word	0xe000e010

08008c18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	f06f 0004 	mvn.w	r0, #4
 8008c22:	f7ff ffbf 	bl	8008ba4 <__NVIC_SetPriority>
#endif
}
 8008c26:	bf00      	nop
 8008c28:	bd80      	pop	{r7, pc}
	...

08008c2c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c32:	f3ef 8305 	mrs	r3, IPSR
 8008c36:	603b      	str	r3, [r7, #0]
  return(result);
 8008c38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008c3e:	f06f 0305 	mvn.w	r3, #5
 8008c42:	607b      	str	r3, [r7, #4]
 8008c44:	e00c      	b.n	8008c60 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008c46:	4b0a      	ldr	r3, [pc, #40]	; (8008c70 <osKernelInitialize+0x44>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d105      	bne.n	8008c5a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008c4e:	4b08      	ldr	r3, [pc, #32]	; (8008c70 <osKernelInitialize+0x44>)
 8008c50:	2201      	movs	r2, #1
 8008c52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008c54:	2300      	movs	r3, #0
 8008c56:	607b      	str	r3, [r7, #4]
 8008c58:	e002      	b.n	8008c60 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008c60:	687b      	ldr	r3, [r7, #4]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	370c      	adds	r7, #12
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	20001154 	.word	0x20001154

08008c74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c7a:	f3ef 8305 	mrs	r3, IPSR
 8008c7e:	603b      	str	r3, [r7, #0]
  return(result);
 8008c80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d003      	beq.n	8008c8e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008c86:	f06f 0305 	mvn.w	r3, #5
 8008c8a:	607b      	str	r3, [r7, #4]
 8008c8c:	e010      	b.n	8008cb0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008c8e:	4b0b      	ldr	r3, [pc, #44]	; (8008cbc <osKernelStart+0x48>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d109      	bne.n	8008caa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008c96:	f7ff ffbf 	bl	8008c18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008c9a:	4b08      	ldr	r3, [pc, #32]	; (8008cbc <osKernelStart+0x48>)
 8008c9c:	2202      	movs	r2, #2
 8008c9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008ca0:	f001 fbc8 	bl	800a434 <vTaskStartScheduler>
      stat = osOK;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	607b      	str	r3, [r7, #4]
 8008ca8:	e002      	b.n	8008cb0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008caa:	f04f 33ff 	mov.w	r3, #4294967295
 8008cae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008cb0:	687b      	ldr	r3, [r7, #4]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	20001154 	.word	0x20001154

08008cc0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cc6:	f3ef 8305 	mrs	r3, IPSR
 8008cca:	603b      	str	r3, [r7, #0]
  return(result);
 8008ccc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d003      	beq.n	8008cda <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8008cd2:	f001 fcdb 	bl	800a68c <xTaskGetTickCountFromISR>
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	e002      	b.n	8008ce0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8008cda:	f001 fcc7 	bl	800a66c <xTaskGetTickCount>
 8008cde:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8008ce0:	687b      	ldr	r3, [r7, #4]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b08e      	sub	sp, #56	; 0x38
 8008cee:	af04      	add	r7, sp, #16
 8008cf0:	60f8      	str	r0, [r7, #12]
 8008cf2:	60b9      	str	r1, [r7, #8]
 8008cf4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cfa:	f3ef 8305 	mrs	r3, IPSR
 8008cfe:	617b      	str	r3, [r7, #20]
  return(result);
 8008d00:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d17e      	bne.n	8008e04 <osThreadNew+0x11a>
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d07b      	beq.n	8008e04 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008d0c:	2380      	movs	r3, #128	; 0x80
 8008d0e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008d10:	2318      	movs	r3, #24
 8008d12:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008d14:	2300      	movs	r3, #0
 8008d16:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008d18:	f04f 33ff 	mov.w	r3, #4294967295
 8008d1c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d045      	beq.n	8008db0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d002      	beq.n	8008d32 <osThreadNew+0x48>
        name = attr->name;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d002      	beq.n	8008d40 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d008      	beq.n	8008d58 <osThreadNew+0x6e>
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	2b38      	cmp	r3, #56	; 0x38
 8008d4a:	d805      	bhi.n	8008d58 <osThreadNew+0x6e>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	f003 0301 	and.w	r3, r3, #1
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <osThreadNew+0x72>
        return (NULL);
 8008d58:	2300      	movs	r3, #0
 8008d5a:	e054      	b.n	8008e06 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	695b      	ldr	r3, [r3, #20]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d003      	beq.n	8008d6c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	695b      	ldr	r3, [r3, #20]
 8008d68:	089b      	lsrs	r3, r3, #2
 8008d6a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00e      	beq.n	8008d92 <osThreadNew+0xa8>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	2bbb      	cmp	r3, #187	; 0xbb
 8008d7a:	d90a      	bls.n	8008d92 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d006      	beq.n	8008d92 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	695b      	ldr	r3, [r3, #20]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d002      	beq.n	8008d92 <osThreadNew+0xa8>
        mem = 1;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	61bb      	str	r3, [r7, #24]
 8008d90:	e010      	b.n	8008db4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10c      	bne.n	8008db4 <osThreadNew+0xca>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d108      	bne.n	8008db4 <osThreadNew+0xca>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d104      	bne.n	8008db4 <osThreadNew+0xca>
          mem = 0;
 8008daa:	2300      	movs	r3, #0
 8008dac:	61bb      	str	r3, [r7, #24]
 8008dae:	e001      	b.n	8008db4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008db0:	2300      	movs	r3, #0
 8008db2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d110      	bne.n	8008ddc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008dc2:	9202      	str	r2, [sp, #8]
 8008dc4:	9301      	str	r3, [sp, #4]
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	9300      	str	r3, [sp, #0]
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	6a3a      	ldr	r2, [r7, #32]
 8008dce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f001 f943 	bl	800a05c <xTaskCreateStatic>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	613b      	str	r3, [r7, #16]
 8008dda:	e013      	b.n	8008e04 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d110      	bne.n	8008e04 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008de2:	6a3b      	ldr	r3, [r7, #32]
 8008de4:	b29a      	uxth	r2, r3
 8008de6:	f107 0310 	add.w	r3, r7, #16
 8008dea:	9301      	str	r3, [sp, #4]
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	9300      	str	r3, [sp, #0]
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008df4:	68f8      	ldr	r0, [r7, #12]
 8008df6:	f001 f98e 	bl	800a116 <xTaskCreate>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d001      	beq.n	8008e04 <osThreadNew+0x11a>
            hTask = NULL;
 8008e00:	2300      	movs	r3, #0
 8008e02:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008e04:	693b      	ldr	r3, [r7, #16]
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3728      	adds	r7, #40	; 0x28
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
	...

08008e10 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b088      	sub	sp, #32
 8008e14:	af02      	add	r7, sp, #8
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <osThreadFlagsSet+0x1a>
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	da03      	bge.n	8008e32 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8008e2a:	f06f 0303 	mvn.w	r3, #3
 8008e2e:	60fb      	str	r3, [r7, #12]
 8008e30:	e035      	b.n	8008e9e <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8008e32:	f04f 33ff 	mov.w	r3, #4294967295
 8008e36:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e38:	f3ef 8305 	mrs	r3, IPSR
 8008e3c:	613b      	str	r3, [r7, #16]
  return(result);
 8008e3e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d01f      	beq.n	8008e84 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8008e44:	2300      	movs	r3, #0
 8008e46:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8008e48:	f107 0308 	add.w	r3, r7, #8
 8008e4c:	9300      	str	r3, [sp, #0]
 8008e4e:	2300      	movs	r3, #0
 8008e50:	2201      	movs	r2, #1
 8008e52:	6839      	ldr	r1, [r7, #0]
 8008e54:	6978      	ldr	r0, [r7, #20]
 8008e56:	f002 f905 	bl	800b064 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8008e5a:	f107 030c 	add.w	r3, r7, #12
 8008e5e:	2200      	movs	r2, #0
 8008e60:	9200      	str	r2, [sp, #0]
 8008e62:	2200      	movs	r2, #0
 8008e64:	2100      	movs	r1, #0
 8008e66:	6978      	ldr	r0, [r7, #20]
 8008e68:	f002 f8fc 	bl	800b064 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d015      	beq.n	8008e9e <osThreadFlagsSet+0x8e>
 8008e72:	4b0d      	ldr	r3, [pc, #52]	; (8008ea8 <osThreadFlagsSet+0x98>)
 8008e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e78:	601a      	str	r2, [r3, #0]
 8008e7a:	f3bf 8f4f 	dsb	sy
 8008e7e:	f3bf 8f6f 	isb	sy
 8008e82:	e00c      	b.n	8008e9e <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8008e84:	2300      	movs	r3, #0
 8008e86:	2201      	movs	r2, #1
 8008e88:	6839      	ldr	r1, [r7, #0]
 8008e8a:	6978      	ldr	r0, [r7, #20]
 8008e8c:	f002 f82c 	bl	800aee8 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8008e90:	f107 030c 	add.w	r3, r7, #12
 8008e94:	2200      	movs	r2, #0
 8008e96:	2100      	movs	r1, #0
 8008e98:	6978      	ldr	r0, [r7, #20]
 8008e9a:	f002 f825 	bl	800aee8 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3718      	adds	r7, #24
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	e000ed04 	.word	0xe000ed04

08008eac <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b08c      	sub	sp, #48	; 0x30
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008eb8:	f3ef 8305 	mrs	r3, IPSR
 8008ebc:	617b      	str	r3, [r7, #20]
  return(result);
 8008ebe:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d003      	beq.n	8008ecc <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8008ec4:	f06f 0305 	mvn.w	r3, #5
 8008ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008eca:	e06b      	b.n	8008fa4 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	da03      	bge.n	8008eda <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8008ed2:	f06f 0303 	mvn.w	r3, #3
 8008ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ed8:	e064      	b.n	8008fa4 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	f003 0302 	and.w	r3, r3, #2
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d002      	beq.n	8008eea <osThreadFlagsWait+0x3e>
      clear = 0U;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ee8:	e001      	b.n	8008eee <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8008ef6:	f001 fbb9 	bl	800a66c <xTaskGetTickCount>
 8008efa:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8008efc:	f107 0210 	add.w	r2, r7, #16
 8008f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f04:	2000      	movs	r0, #0
 8008f06:	f001 ff8f 	bl	800ae28 <xTaskNotifyWait>
 8008f0a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d137      	bne.n	8008f82 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8008f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	4013      	ands	r3, r2
 8008f18:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	f003 0301 	and.w	r3, r3, #1
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00c      	beq.n	8008f46 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f30:	4013      	ands	r3, r2
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d032      	beq.n	8008f9e <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10f      	bne.n	8008f5e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8008f3e:	f06f 0302 	mvn.w	r3, #2
 8008f42:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8008f44:	e02e      	b.n	8008fa4 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d128      	bne.n	8008fa2 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d103      	bne.n	8008f5e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8008f56:	f06f 0302 	mvn.w	r3, #2
 8008f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8008f5c:	e022      	b.n	8008fa4 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8008f5e:	f001 fb85 	bl	800a66c <xTaskGetTickCount>
 8008f62:	4602      	mov	r2, r0
 8008f64:	6a3b      	ldr	r3, [r7, #32]
 8008f66:	1ad3      	subs	r3, r2, r3
 8008f68:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8008f6a:	69ba      	ldr	r2, [r7, #24]
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d902      	bls.n	8008f78 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8008f72:	2300      	movs	r3, #0
 8008f74:	627b      	str	r3, [r7, #36]	; 0x24
 8008f76:	e00e      	b.n	8008f96 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8008f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8008f80:	e009      	b.n	8008f96 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d103      	bne.n	8008f90 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8008f88:	f06f 0302 	mvn.w	r3, #2
 8008f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f8e:	e002      	b.n	8008f96 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8008f90:	f06f 0301 	mvn.w	r3, #1
 8008f94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1af      	bne.n	8008efc <osThreadFlagsWait+0x50>
 8008f9c:	e002      	b.n	8008fa4 <osThreadFlagsWait+0xf8>
            break;
 8008f9e:	bf00      	nop
 8008fa0:	e000      	b.n	8008fa4 <osThreadFlagsWait+0xf8>
            break;
 8008fa2:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8008fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3730      	adds	r7, #48	; 0x30
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b084      	sub	sp, #16
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fb6:	f3ef 8305 	mrs	r3, IPSR
 8008fba:	60bb      	str	r3, [r7, #8]
  return(result);
 8008fbc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d003      	beq.n	8008fca <osDelay+0x1c>
    stat = osErrorISR;
 8008fc2:	f06f 0305 	mvn.w	r3, #5
 8008fc6:	60fb      	str	r3, [r7, #12]
 8008fc8:	e007      	b.n	8008fda <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d002      	beq.n	8008fda <osDelay+0x2c>
      vTaskDelay(ticks);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f001 f9f9 	bl	800a3cc <vTaskDelay>
    }
  }

  return (stat);
 8008fda:	68fb      	ldr	r3, [r7, #12]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b08a      	sub	sp, #40	; 0x28
 8008fe8:	af02      	add	r7, sp, #8
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ff4:	f3ef 8305 	mrs	r3, IPSR
 8008ff8:	613b      	str	r3, [r7, #16]
  return(result);
 8008ffa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d15f      	bne.n	80090c0 <osMessageQueueNew+0xdc>
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d05c      	beq.n	80090c0 <osMessageQueueNew+0xdc>
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d059      	beq.n	80090c0 <osMessageQueueNew+0xdc>
    mem = -1;
 800900c:	f04f 33ff 	mov.w	r3, #4294967295
 8009010:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d029      	beq.n	800906c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d012      	beq.n	8009046 <osMessageQueueNew+0x62>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	2b4f      	cmp	r3, #79	; 0x4f
 8009026:	d90e      	bls.n	8009046 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00a      	beq.n	8009046 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	695a      	ldr	r2, [r3, #20]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	68b9      	ldr	r1, [r7, #8]
 8009038:	fb01 f303 	mul.w	r3, r1, r3
 800903c:	429a      	cmp	r2, r3
 800903e:	d302      	bcc.n	8009046 <osMessageQueueNew+0x62>
        mem = 1;
 8009040:	2301      	movs	r3, #1
 8009042:	61bb      	str	r3, [r7, #24]
 8009044:	e014      	b.n	8009070 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d110      	bne.n	8009070 <osMessageQueueNew+0x8c>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d10c      	bne.n	8009070 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800905a:	2b00      	cmp	r3, #0
 800905c:	d108      	bne.n	8009070 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	695b      	ldr	r3, [r3, #20]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d104      	bne.n	8009070 <osMessageQueueNew+0x8c>
          mem = 0;
 8009066:	2300      	movs	r3, #0
 8009068:	61bb      	str	r3, [r7, #24]
 800906a:	e001      	b.n	8009070 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800906c:	2300      	movs	r3, #0
 800906e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	2b01      	cmp	r3, #1
 8009074:	d10b      	bne.n	800908e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	691a      	ldr	r2, [r3, #16]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	2100      	movs	r1, #0
 8009080:	9100      	str	r1, [sp, #0]
 8009082:	68b9      	ldr	r1, [r7, #8]
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f000 fa87 	bl	8009598 <xQueueGenericCreateStatic>
 800908a:	61f8      	str	r0, [r7, #28]
 800908c:	e008      	b.n	80090a0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d105      	bne.n	80090a0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009094:	2200      	movs	r2, #0
 8009096:	68b9      	ldr	r1, [r7, #8]
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	f000 faf5 	bl	8009688 <xQueueGenericCreate>
 800909e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00c      	beq.n	80090c0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d003      	beq.n	80090b4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	617b      	str	r3, [r7, #20]
 80090b2:	e001      	b.n	80090b8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80090b4:	2300      	movs	r3, #0
 80090b6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80090b8:	6979      	ldr	r1, [r7, #20]
 80090ba:	69f8      	ldr	r0, [r7, #28]
 80090bc:	f000 ff70 	bl	8009fa0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80090c0:	69fb      	ldr	r3, [r7, #28]
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3720      	adds	r7, #32
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
	...

080090cc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b088      	sub	sp, #32
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	603b      	str	r3, [r7, #0]
 80090d8:	4613      	mov	r3, r2
 80090da:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80090e0:	2300      	movs	r3, #0
 80090e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090e4:	f3ef 8305 	mrs	r3, IPSR
 80090e8:	617b      	str	r3, [r7, #20]
  return(result);
 80090ea:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d028      	beq.n	8009142 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d005      	beq.n	8009102 <osMessageQueuePut+0x36>
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d002      	beq.n	8009102 <osMessageQueuePut+0x36>
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d003      	beq.n	800910a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009102:	f06f 0303 	mvn.w	r3, #3
 8009106:	61fb      	str	r3, [r7, #28]
 8009108:	e038      	b.n	800917c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800910a:	2300      	movs	r3, #0
 800910c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800910e:	f107 0210 	add.w	r2, r7, #16
 8009112:	2300      	movs	r3, #0
 8009114:	68b9      	ldr	r1, [r7, #8]
 8009116:	69b8      	ldr	r0, [r7, #24]
 8009118:	f000 fc12 	bl	8009940 <xQueueGenericSendFromISR>
 800911c:	4603      	mov	r3, r0
 800911e:	2b01      	cmp	r3, #1
 8009120:	d003      	beq.n	800912a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009122:	f06f 0302 	mvn.w	r3, #2
 8009126:	61fb      	str	r3, [r7, #28]
 8009128:	e028      	b.n	800917c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d025      	beq.n	800917c <osMessageQueuePut+0xb0>
 8009130:	4b15      	ldr	r3, [pc, #84]	; (8009188 <osMessageQueuePut+0xbc>)
 8009132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009136:	601a      	str	r2, [r3, #0]
 8009138:	f3bf 8f4f 	dsb	sy
 800913c:	f3bf 8f6f 	isb	sy
 8009140:	e01c      	b.n	800917c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d002      	beq.n	800914e <osMessageQueuePut+0x82>
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d103      	bne.n	8009156 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800914e:	f06f 0303 	mvn.w	r3, #3
 8009152:	61fb      	str	r3, [r7, #28]
 8009154:	e012      	b.n	800917c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009156:	2300      	movs	r3, #0
 8009158:	683a      	ldr	r2, [r7, #0]
 800915a:	68b9      	ldr	r1, [r7, #8]
 800915c:	69b8      	ldr	r0, [r7, #24]
 800915e:	f000 faf1 	bl	8009744 <xQueueGenericSend>
 8009162:	4603      	mov	r3, r0
 8009164:	2b01      	cmp	r3, #1
 8009166:	d009      	beq.n	800917c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800916e:	f06f 0301 	mvn.w	r3, #1
 8009172:	61fb      	str	r3, [r7, #28]
 8009174:	e002      	b.n	800917c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009176:	f06f 0302 	mvn.w	r3, #2
 800917a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800917c:	69fb      	ldr	r3, [r7, #28]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3720      	adds	r7, #32
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	e000ed04 	.word	0xe000ed04

0800918c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800918c:	b580      	push	{r7, lr}
 800918e:	b088      	sub	sp, #32
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	607a      	str	r2, [r7, #4]
 8009198:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800919e:	2300      	movs	r3, #0
 80091a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091a2:	f3ef 8305 	mrs	r3, IPSR
 80091a6:	617b      	str	r3, [r7, #20]
  return(result);
 80091a8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d028      	beq.n	8009200 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d005      	beq.n	80091c0 <osMessageQueueGet+0x34>
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d002      	beq.n	80091c0 <osMessageQueueGet+0x34>
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d003      	beq.n	80091c8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80091c0:	f06f 0303 	mvn.w	r3, #3
 80091c4:	61fb      	str	r3, [r7, #28]
 80091c6:	e037      	b.n	8009238 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80091c8:	2300      	movs	r3, #0
 80091ca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80091cc:	f107 0310 	add.w	r3, r7, #16
 80091d0:	461a      	mov	r2, r3
 80091d2:	68b9      	ldr	r1, [r7, #8]
 80091d4:	69b8      	ldr	r0, [r7, #24]
 80091d6:	f000 fd2f 	bl	8009c38 <xQueueReceiveFromISR>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d003      	beq.n	80091e8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80091e0:	f06f 0302 	mvn.w	r3, #2
 80091e4:	61fb      	str	r3, [r7, #28]
 80091e6:	e027      	b.n	8009238 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d024      	beq.n	8009238 <osMessageQueueGet+0xac>
 80091ee:	4b15      	ldr	r3, [pc, #84]	; (8009244 <osMessageQueueGet+0xb8>)
 80091f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091f4:	601a      	str	r2, [r3, #0]
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	f3bf 8f6f 	isb	sy
 80091fe:	e01b      	b.n	8009238 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d002      	beq.n	800920c <osMessageQueueGet+0x80>
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d103      	bne.n	8009214 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800920c:	f06f 0303 	mvn.w	r3, #3
 8009210:	61fb      	str	r3, [r7, #28]
 8009212:	e011      	b.n	8009238 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009214:	683a      	ldr	r2, [r7, #0]
 8009216:	68b9      	ldr	r1, [r7, #8]
 8009218:	69b8      	ldr	r0, [r7, #24]
 800921a:	f000 fc2d 	bl	8009a78 <xQueueReceive>
 800921e:	4603      	mov	r3, r0
 8009220:	2b01      	cmp	r3, #1
 8009222:	d009      	beq.n	8009238 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d003      	beq.n	8009232 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800922a:	f06f 0301 	mvn.w	r3, #1
 800922e:	61fb      	str	r3, [r7, #28]
 8009230:	e002      	b.n	8009238 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009232:	f06f 0302 	mvn.w	r3, #2
 8009236:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009238:	69fb      	ldr	r3, [r7, #28]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3720      	adds	r7, #32
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	e000ed04 	.word	0xe000ed04

08009248 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 8009248:	b580      	push	{r7, lr}
 800924a:	b08a      	sub	sp, #40	; 0x28
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 8009254:	6a3b      	ldr	r3, [r7, #32]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d102      	bne.n	8009260 <osMessageQueueGetSpace+0x18>
    space = 0U;
 800925a:	2300      	movs	r3, #0
 800925c:	627b      	str	r3, [r7, #36]	; 0x24
 800925e:	e023      	b.n	80092a8 <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009260:	f3ef 8305 	mrs	r3, IPSR
 8009264:	61bb      	str	r3, [r7, #24]
  return(result);
 8009266:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 8009268:	2b00      	cmp	r3, #0
 800926a:	d019      	beq.n	80092a0 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800926c:	f3ef 8211 	mrs	r2, BASEPRI
 8009270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009274:	f383 8811 	msr	BASEPRI, r3
 8009278:	f3bf 8f6f 	isb	sy
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	613a      	str	r2, [r7, #16]
 8009282:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009284:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 8009286:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 8009288:	6a3b      	ldr	r3, [r7, #32]
 800928a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800928c:	6a3b      	ldr	r3, [r7, #32]
 800928e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	627b      	str	r3, [r7, #36]	; 0x24
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800929e:	e003      	b.n	80092a8 <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 80092a0:	6a38      	ldr	r0, [r7, #32]
 80092a2:	f000 fd49 	bl	8009d38 <uxQueueSpacesAvailable>
 80092a6:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return (space);
 80092a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3728      	adds	r7, #40	; 0x28
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <osMessageQueueReset>:

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b086      	sub	sp, #24
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092be:	f3ef 8305 	mrs	r3, IPSR
 80092c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80092c4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d003      	beq.n	80092d2 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 80092ca:	f06f 0305 	mvn.w	r3, #5
 80092ce:	617b      	str	r3, [r7, #20]
 80092d0:	e00c      	b.n	80092ec <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d103      	bne.n	80092e0 <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 80092d8:	f06f 0303 	mvn.w	r3, #3
 80092dc:	617b      	str	r3, [r7, #20]
 80092de:	e005      	b.n	80092ec <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 80092e4:	2100      	movs	r1, #0
 80092e6:	6938      	ldr	r0, [r7, #16]
 80092e8:	f000 f8ee 	bl	80094c8 <xQueueGenericReset>
  }

  return (stat);
 80092ec:	697b      	ldr	r3, [r7, #20]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3718      	adds	r7, #24
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
	...

080092f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	4a07      	ldr	r2, [pc, #28]	; (8009324 <vApplicationGetIdleTaskMemory+0x2c>)
 8009308:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	4a06      	ldr	r2, [pc, #24]	; (8009328 <vApplicationGetIdleTaskMemory+0x30>)
 800930e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2280      	movs	r2, #128	; 0x80
 8009314:	601a      	str	r2, [r3, #0]
}
 8009316:	bf00      	nop
 8009318:	3714      	adds	r7, #20
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	20001158 	.word	0x20001158
 8009328:	20001214 	.word	0x20001214

0800932c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	4a07      	ldr	r2, [pc, #28]	; (8009358 <vApplicationGetTimerTaskMemory+0x2c>)
 800933c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	4a06      	ldr	r2, [pc, #24]	; (800935c <vApplicationGetTimerTaskMemory+0x30>)
 8009342:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f44f 7280 	mov.w	r2, #256	; 0x100
 800934a:	601a      	str	r2, [r3, #0]
}
 800934c:	bf00      	nop
 800934e:	3714      	adds	r7, #20
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr
 8009358:	20001414 	.word	0x20001414
 800935c:	200014d0 	.word	0x200014d0

08009360 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f103 0208 	add.w	r2, r3, #8
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f04f 32ff 	mov.w	r2, #4294967295
 8009378:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f103 0208 	add.w	r2, r3, #8
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f103 0208 	add.w	r2, r3, #8
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009394:	bf00      	nop
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80093ae:	bf00      	nop
 80093b0:	370c      	adds	r7, #12
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr

080093ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80093ba:	b480      	push	{r7}
 80093bc:	b085      	sub	sp, #20
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
 80093c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	689a      	ldr	r2, [r3, #8]
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	683a      	ldr	r2, [r7, #0]
 80093de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	683a      	ldr	r2, [r7, #0]
 80093e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	1c5a      	adds	r2, r3, #1
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	601a      	str	r2, [r3, #0]
}
 80093f6:	bf00      	nop
 80093f8:	3714      	adds	r7, #20
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009402:	b480      	push	{r7}
 8009404:	b085      	sub	sp, #20
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
 800940a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009418:	d103      	bne.n	8009422 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	60fb      	str	r3, [r7, #12]
 8009420:	e00c      	b.n	800943c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	3308      	adds	r3, #8
 8009426:	60fb      	str	r3, [r7, #12]
 8009428:	e002      	b.n	8009430 <vListInsert+0x2e>
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	60fb      	str	r3, [r7, #12]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68ba      	ldr	r2, [r7, #8]
 8009438:	429a      	cmp	r2, r3
 800943a:	d2f6      	bcs.n	800942a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	685a      	ldr	r2, [r3, #4]
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	683a      	ldr	r2, [r7, #0]
 800944a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	683a      	ldr	r2, [r7, #0]
 8009456:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	1c5a      	adds	r2, r3, #1
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	601a      	str	r2, [r3, #0]
}
 8009468:	bf00      	nop
 800946a:	3714      	adds	r7, #20
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	6892      	ldr	r2, [r2, #8]
 800948a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	6852      	ldr	r2, [r2, #4]
 8009494:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	429a      	cmp	r2, r3
 800949e:	d103      	bne.n	80094a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	689a      	ldr	r2, [r3, #8]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	1e5a      	subs	r2, r3, #1
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3714      	adds	r7, #20
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d10a      	bne.n	80094f2 <xQueueGenericReset+0x2a>
	__asm volatile
 80094dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e0:	f383 8811 	msr	BASEPRI, r3
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	f3bf 8f4f 	dsb	sy
 80094ec:	60bb      	str	r3, [r7, #8]
}
 80094ee:	bf00      	nop
 80094f0:	e7fe      	b.n	80094f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80094f2:	f002 fb67 	bl	800bbc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094fe:	68f9      	ldr	r1, [r7, #12]
 8009500:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009502:	fb01 f303 	mul.w	r3, r1, r3
 8009506:	441a      	add	r2, r3
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2200      	movs	r2, #0
 8009510:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009522:	3b01      	subs	r3, #1
 8009524:	68f9      	ldr	r1, [r7, #12]
 8009526:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009528:	fb01 f303 	mul.w	r3, r1, r3
 800952c:	441a      	add	r2, r3
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	22ff      	movs	r2, #255	; 0xff
 8009536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	22ff      	movs	r2, #255	; 0xff
 800953e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d114      	bne.n	8009572 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d01a      	beq.n	8009586 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	3310      	adds	r3, #16
 8009554:	4618      	mov	r0, r3
 8009556:	f001 fa19 	bl	800a98c <xTaskRemoveFromEventList>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d012      	beq.n	8009586 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009560:	4b0c      	ldr	r3, [pc, #48]	; (8009594 <xQueueGenericReset+0xcc>)
 8009562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009566:	601a      	str	r2, [r3, #0]
 8009568:	f3bf 8f4f 	dsb	sy
 800956c:	f3bf 8f6f 	isb	sy
 8009570:	e009      	b.n	8009586 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	3310      	adds	r3, #16
 8009576:	4618      	mov	r0, r3
 8009578:	f7ff fef2 	bl	8009360 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	3324      	adds	r3, #36	; 0x24
 8009580:	4618      	mov	r0, r3
 8009582:	f7ff feed 	bl	8009360 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009586:	f002 fb4d 	bl	800bc24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800958a:	2301      	movs	r3, #1
}
 800958c:	4618      	mov	r0, r3
 800958e:	3710      	adds	r7, #16
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	e000ed04 	.word	0xe000ed04

08009598 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009598:	b580      	push	{r7, lr}
 800959a:	b08e      	sub	sp, #56	; 0x38
 800959c:	af02      	add	r7, sp, #8
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	607a      	str	r2, [r7, #4]
 80095a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10a      	bne.n	80095c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80095ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b0:	f383 8811 	msr	BASEPRI, r3
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80095be:	bf00      	nop
 80095c0:	e7fe      	b.n	80095c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10a      	bne.n	80095de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80095c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80095da:	bf00      	nop
 80095dc:	e7fe      	b.n	80095dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d002      	beq.n	80095ea <xQueueGenericCreateStatic+0x52>
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d001      	beq.n	80095ee <xQueueGenericCreateStatic+0x56>
 80095ea:	2301      	movs	r3, #1
 80095ec:	e000      	b.n	80095f0 <xQueueGenericCreateStatic+0x58>
 80095ee:	2300      	movs	r3, #0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d10a      	bne.n	800960a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80095f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f8:	f383 8811 	msr	BASEPRI, r3
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	623b      	str	r3, [r7, #32]
}
 8009606:	bf00      	nop
 8009608:	e7fe      	b.n	8009608 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d102      	bne.n	8009616 <xQueueGenericCreateStatic+0x7e>
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d101      	bne.n	800961a <xQueueGenericCreateStatic+0x82>
 8009616:	2301      	movs	r3, #1
 8009618:	e000      	b.n	800961c <xQueueGenericCreateStatic+0x84>
 800961a:	2300      	movs	r3, #0
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10a      	bne.n	8009636 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009624:	f383 8811 	msr	BASEPRI, r3
 8009628:	f3bf 8f6f 	isb	sy
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	61fb      	str	r3, [r7, #28]
}
 8009632:	bf00      	nop
 8009634:	e7fe      	b.n	8009634 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009636:	2350      	movs	r3, #80	; 0x50
 8009638:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	2b50      	cmp	r3, #80	; 0x50
 800963e:	d00a      	beq.n	8009656 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	61bb      	str	r3, [r7, #24]
}
 8009652:	bf00      	nop
 8009654:	e7fe      	b.n	8009654 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009656:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800965c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00d      	beq.n	800967e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009664:	2201      	movs	r2, #1
 8009666:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800966a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800966e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009670:	9300      	str	r3, [sp, #0]
 8009672:	4613      	mov	r3, r2
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	68b9      	ldr	r1, [r7, #8]
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f000 f83f 	bl	80096fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800967e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009680:	4618      	mov	r0, r3
 8009682:	3730      	adds	r7, #48	; 0x30
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009688:	b580      	push	{r7, lr}
 800968a:	b08a      	sub	sp, #40	; 0x28
 800968c:	af02      	add	r7, sp, #8
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	4613      	mov	r3, r2
 8009694:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d10a      	bne.n	80096b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800969c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a0:	f383 8811 	msr	BASEPRI, r3
 80096a4:	f3bf 8f6f 	isb	sy
 80096a8:	f3bf 8f4f 	dsb	sy
 80096ac:	613b      	str	r3, [r7, #16]
}
 80096ae:	bf00      	nop
 80096b0:	e7fe      	b.n	80096b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	68ba      	ldr	r2, [r7, #8]
 80096b6:	fb02 f303 	mul.w	r3, r2, r3
 80096ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	3350      	adds	r3, #80	; 0x50
 80096c0:	4618      	mov	r0, r3
 80096c2:	f002 fba1 	bl	800be08 <pvPortMalloc>
 80096c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d011      	beq.n	80096f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	3350      	adds	r3, #80	; 0x50
 80096d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	2200      	movs	r2, #0
 80096dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80096e0:	79fa      	ldrb	r2, [r7, #7]
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	9300      	str	r3, [sp, #0]
 80096e6:	4613      	mov	r3, r2
 80096e8:	697a      	ldr	r2, [r7, #20]
 80096ea:	68b9      	ldr	r1, [r7, #8]
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f000 f805 	bl	80096fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80096f2:	69bb      	ldr	r3, [r7, #24]
	}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3720      	adds	r7, #32
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	607a      	str	r2, [r7, #4]
 8009708:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d103      	bne.n	8009718 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	69ba      	ldr	r2, [r7, #24]
 8009714:	601a      	str	r2, [r3, #0]
 8009716:	e002      	b.n	800971e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800971e:	69bb      	ldr	r3, [r7, #24]
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	68ba      	ldr	r2, [r7, #8]
 8009728:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800972a:	2101      	movs	r1, #1
 800972c:	69b8      	ldr	r0, [r7, #24]
 800972e:	f7ff fecb 	bl	80094c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	78fa      	ldrb	r2, [r7, #3]
 8009736:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800973a:	bf00      	nop
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
	...

08009744 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b08e      	sub	sp, #56	; 0x38
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	607a      	str	r2, [r7, #4]
 8009750:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009752:	2300      	movs	r3, #0
 8009754:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800975a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975c:	2b00      	cmp	r3, #0
 800975e:	d10a      	bne.n	8009776 <xQueueGenericSend+0x32>
	__asm volatile
 8009760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009764:	f383 8811 	msr	BASEPRI, r3
 8009768:	f3bf 8f6f 	isb	sy
 800976c:	f3bf 8f4f 	dsb	sy
 8009770:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009772:	bf00      	nop
 8009774:	e7fe      	b.n	8009774 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d103      	bne.n	8009784 <xQueueGenericSend+0x40>
 800977c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009780:	2b00      	cmp	r3, #0
 8009782:	d101      	bne.n	8009788 <xQueueGenericSend+0x44>
 8009784:	2301      	movs	r3, #1
 8009786:	e000      	b.n	800978a <xQueueGenericSend+0x46>
 8009788:	2300      	movs	r3, #0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d10a      	bne.n	80097a4 <xQueueGenericSend+0x60>
	__asm volatile
 800978e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80097a0:	bf00      	nop
 80097a2:	e7fe      	b.n	80097a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	d103      	bne.n	80097b2 <xQueueGenericSend+0x6e>
 80097aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d101      	bne.n	80097b6 <xQueueGenericSend+0x72>
 80097b2:	2301      	movs	r3, #1
 80097b4:	e000      	b.n	80097b8 <xQueueGenericSend+0x74>
 80097b6:	2300      	movs	r3, #0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d10a      	bne.n	80097d2 <xQueueGenericSend+0x8e>
	__asm volatile
 80097bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c0:	f383 8811 	msr	BASEPRI, r3
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	623b      	str	r3, [r7, #32]
}
 80097ce:	bf00      	nop
 80097d0:	e7fe      	b.n	80097d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097d2:	f001 fa9d 	bl	800ad10 <xTaskGetSchedulerState>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d102      	bne.n	80097e2 <xQueueGenericSend+0x9e>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d101      	bne.n	80097e6 <xQueueGenericSend+0xa2>
 80097e2:	2301      	movs	r3, #1
 80097e4:	e000      	b.n	80097e8 <xQueueGenericSend+0xa4>
 80097e6:	2300      	movs	r3, #0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10a      	bne.n	8009802 <xQueueGenericSend+0xbe>
	__asm volatile
 80097ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f0:	f383 8811 	msr	BASEPRI, r3
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	61fb      	str	r3, [r7, #28]
}
 80097fe:	bf00      	nop
 8009800:	e7fe      	b.n	8009800 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009802:	f002 f9df 	bl	800bbc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800980a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800980e:	429a      	cmp	r2, r3
 8009810:	d302      	bcc.n	8009818 <xQueueGenericSend+0xd4>
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	2b02      	cmp	r3, #2
 8009816:	d129      	bne.n	800986c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009818:	683a      	ldr	r2, [r7, #0]
 800981a:	68b9      	ldr	r1, [r7, #8]
 800981c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800981e:	f000 faae 	bl	8009d7e <prvCopyDataToQueue>
 8009822:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009828:	2b00      	cmp	r3, #0
 800982a:	d010      	beq.n	800984e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800982c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800982e:	3324      	adds	r3, #36	; 0x24
 8009830:	4618      	mov	r0, r3
 8009832:	f001 f8ab 	bl	800a98c <xTaskRemoveFromEventList>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d013      	beq.n	8009864 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800983c:	4b3f      	ldr	r3, [pc, #252]	; (800993c <xQueueGenericSend+0x1f8>)
 800983e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009842:	601a      	str	r2, [r3, #0]
 8009844:	f3bf 8f4f 	dsb	sy
 8009848:	f3bf 8f6f 	isb	sy
 800984c:	e00a      	b.n	8009864 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800984e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009850:	2b00      	cmp	r3, #0
 8009852:	d007      	beq.n	8009864 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009854:	4b39      	ldr	r3, [pc, #228]	; (800993c <xQueueGenericSend+0x1f8>)
 8009856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800985a:	601a      	str	r2, [r3, #0]
 800985c:	f3bf 8f4f 	dsb	sy
 8009860:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009864:	f002 f9de 	bl	800bc24 <vPortExitCritical>
				return pdPASS;
 8009868:	2301      	movs	r3, #1
 800986a:	e063      	b.n	8009934 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d103      	bne.n	800987a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009872:	f002 f9d7 	bl	800bc24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009876:	2300      	movs	r3, #0
 8009878:	e05c      	b.n	8009934 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800987a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800987c:	2b00      	cmp	r3, #0
 800987e:	d106      	bne.n	800988e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009880:	f107 0314 	add.w	r3, r7, #20
 8009884:	4618      	mov	r0, r3
 8009886:	f001 f8e5 	bl	800aa54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800988a:	2301      	movs	r3, #1
 800988c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800988e:	f002 f9c9 	bl	800bc24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009892:	f000 fe3f 	bl	800a514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009896:	f002 f995 	bl	800bbc4 <vPortEnterCritical>
 800989a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098a0:	b25b      	sxtb	r3, r3
 80098a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a6:	d103      	bne.n	80098b0 <xQueueGenericSend+0x16c>
 80098a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098aa:	2200      	movs	r2, #0
 80098ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098b6:	b25b      	sxtb	r3, r3
 80098b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098bc:	d103      	bne.n	80098c6 <xQueueGenericSend+0x182>
 80098be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c0:	2200      	movs	r2, #0
 80098c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098c6:	f002 f9ad 	bl	800bc24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098ca:	1d3a      	adds	r2, r7, #4
 80098cc:	f107 0314 	add.w	r3, r7, #20
 80098d0:	4611      	mov	r1, r2
 80098d2:	4618      	mov	r0, r3
 80098d4:	f001 f8d4 	bl	800aa80 <xTaskCheckForTimeOut>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d124      	bne.n	8009928 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80098de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098e0:	f000 fb45 	bl	8009f6e <prvIsQueueFull>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d018      	beq.n	800991c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80098ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ec:	3310      	adds	r3, #16
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	4611      	mov	r1, r2
 80098f2:	4618      	mov	r0, r3
 80098f4:	f000 fffa 	bl	800a8ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80098f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098fa:	f000 fad0 	bl	8009e9e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80098fe:	f000 fe17 	bl	800a530 <xTaskResumeAll>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	f47f af7c 	bne.w	8009802 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800990a:	4b0c      	ldr	r3, [pc, #48]	; (800993c <xQueueGenericSend+0x1f8>)
 800990c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009910:	601a      	str	r2, [r3, #0]
 8009912:	f3bf 8f4f 	dsb	sy
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	e772      	b.n	8009802 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800991c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800991e:	f000 fabe 	bl	8009e9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009922:	f000 fe05 	bl	800a530 <xTaskResumeAll>
 8009926:	e76c      	b.n	8009802 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800992a:	f000 fab8 	bl	8009e9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800992e:	f000 fdff 	bl	800a530 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009932:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009934:	4618      	mov	r0, r3
 8009936:	3738      	adds	r7, #56	; 0x38
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	e000ed04 	.word	0xe000ed04

08009940 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b090      	sub	sp, #64	; 0x40
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
 800994c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009954:	2b00      	cmp	r3, #0
 8009956:	d10a      	bne.n	800996e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995c:	f383 8811 	msr	BASEPRI, r3
 8009960:	f3bf 8f6f 	isb	sy
 8009964:	f3bf 8f4f 	dsb	sy
 8009968:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800996a:	bf00      	nop
 800996c:	e7fe      	b.n	800996c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d103      	bne.n	800997c <xQueueGenericSendFromISR+0x3c>
 8009974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009978:	2b00      	cmp	r3, #0
 800997a:	d101      	bne.n	8009980 <xQueueGenericSendFromISR+0x40>
 800997c:	2301      	movs	r3, #1
 800997e:	e000      	b.n	8009982 <xQueueGenericSendFromISR+0x42>
 8009980:	2300      	movs	r3, #0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d10a      	bne.n	800999c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998a:	f383 8811 	msr	BASEPRI, r3
 800998e:	f3bf 8f6f 	isb	sy
 8009992:	f3bf 8f4f 	dsb	sy
 8009996:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009998:	bf00      	nop
 800999a:	e7fe      	b.n	800999a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	2b02      	cmp	r3, #2
 80099a0:	d103      	bne.n	80099aa <xQueueGenericSendFromISR+0x6a>
 80099a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d101      	bne.n	80099ae <xQueueGenericSendFromISR+0x6e>
 80099aa:	2301      	movs	r3, #1
 80099ac:	e000      	b.n	80099b0 <xQueueGenericSendFromISR+0x70>
 80099ae:	2300      	movs	r3, #0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d10a      	bne.n	80099ca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80099b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b8:	f383 8811 	msr	BASEPRI, r3
 80099bc:	f3bf 8f6f 	isb	sy
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	623b      	str	r3, [r7, #32]
}
 80099c6:	bf00      	nop
 80099c8:	e7fe      	b.n	80099c8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80099ca:	f002 f9dd 	bl	800bd88 <vPortValidateInterruptPriority>
	__asm volatile
 80099ce:	f3ef 8211 	mrs	r2, BASEPRI
 80099d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	61fa      	str	r2, [r7, #28]
 80099e4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80099e6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80099e8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80099ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d302      	bcc.n	80099fc <xQueueGenericSendFromISR+0xbc>
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d12f      	bne.n	8009a5c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80099fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a0c:	683a      	ldr	r2, [r7, #0]
 8009a0e:	68b9      	ldr	r1, [r7, #8]
 8009a10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a12:	f000 f9b4 	bl	8009d7e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009a16:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a1e:	d112      	bne.n	8009a46 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d016      	beq.n	8009a56 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2a:	3324      	adds	r3, #36	; 0x24
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f000 ffad 	bl	800a98c <xTaskRemoveFromEventList>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00e      	beq.n	8009a56 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d00b      	beq.n	8009a56 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2201      	movs	r2, #1
 8009a42:	601a      	str	r2, [r3, #0]
 8009a44:	e007      	b.n	8009a56 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009a46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	b25a      	sxtb	r2, r3
 8009a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009a56:	2301      	movs	r3, #1
 8009a58:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009a5a:	e001      	b.n	8009a60 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a62:	617b      	str	r3, [r7, #20]
	__asm volatile
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	f383 8811 	msr	BASEPRI, r3
}
 8009a6a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3740      	adds	r7, #64	; 0x40
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
	...

08009a78 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b08c      	sub	sp, #48	; 0x30
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a84:	2300      	movs	r3, #0
 8009a86:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d10a      	bne.n	8009aa8 <xQueueReceive+0x30>
	__asm volatile
 8009a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a96:	f383 8811 	msr	BASEPRI, r3
 8009a9a:	f3bf 8f6f 	isb	sy
 8009a9e:	f3bf 8f4f 	dsb	sy
 8009aa2:	623b      	str	r3, [r7, #32]
}
 8009aa4:	bf00      	nop
 8009aa6:	e7fe      	b.n	8009aa6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d103      	bne.n	8009ab6 <xQueueReceive+0x3e>
 8009aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d101      	bne.n	8009aba <xQueueReceive+0x42>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e000      	b.n	8009abc <xQueueReceive+0x44>
 8009aba:	2300      	movs	r3, #0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d10a      	bne.n	8009ad6 <xQueueReceive+0x5e>
	__asm volatile
 8009ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac4:	f383 8811 	msr	BASEPRI, r3
 8009ac8:	f3bf 8f6f 	isb	sy
 8009acc:	f3bf 8f4f 	dsb	sy
 8009ad0:	61fb      	str	r3, [r7, #28]
}
 8009ad2:	bf00      	nop
 8009ad4:	e7fe      	b.n	8009ad4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ad6:	f001 f91b 	bl	800ad10 <xTaskGetSchedulerState>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d102      	bne.n	8009ae6 <xQueueReceive+0x6e>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d101      	bne.n	8009aea <xQueueReceive+0x72>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e000      	b.n	8009aec <xQueueReceive+0x74>
 8009aea:	2300      	movs	r3, #0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d10a      	bne.n	8009b06 <xQueueReceive+0x8e>
	__asm volatile
 8009af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af4:	f383 8811 	msr	BASEPRI, r3
 8009af8:	f3bf 8f6f 	isb	sy
 8009afc:	f3bf 8f4f 	dsb	sy
 8009b00:	61bb      	str	r3, [r7, #24]
}
 8009b02:	bf00      	nop
 8009b04:	e7fe      	b.n	8009b04 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b06:	f002 f85d 	bl	800bbc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b0e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d01f      	beq.n	8009b56 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b16:	68b9      	ldr	r1, [r7, #8]
 8009b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b1a:	f000 f99a 	bl	8009e52 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b20:	1e5a      	subs	r2, r3, #1
 8009b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b24:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00f      	beq.n	8009b4e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b30:	3310      	adds	r3, #16
 8009b32:	4618      	mov	r0, r3
 8009b34:	f000 ff2a 	bl	800a98c <xTaskRemoveFromEventList>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d007      	beq.n	8009b4e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b3e:	4b3d      	ldr	r3, [pc, #244]	; (8009c34 <xQueueReceive+0x1bc>)
 8009b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b44:	601a      	str	r2, [r3, #0]
 8009b46:	f3bf 8f4f 	dsb	sy
 8009b4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b4e:	f002 f869 	bl	800bc24 <vPortExitCritical>
				return pdPASS;
 8009b52:	2301      	movs	r3, #1
 8009b54:	e069      	b.n	8009c2a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d103      	bne.n	8009b64 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b5c:	f002 f862 	bl	800bc24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009b60:	2300      	movs	r3, #0
 8009b62:	e062      	b.n	8009c2a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d106      	bne.n	8009b78 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b6a:	f107 0310 	add.w	r3, r7, #16
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f000 ff70 	bl	800aa54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b74:	2301      	movs	r3, #1
 8009b76:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b78:	f002 f854 	bl	800bc24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b7c:	f000 fcca 	bl	800a514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b80:	f002 f820 	bl	800bbc4 <vPortEnterCritical>
 8009b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b8a:	b25b      	sxtb	r3, r3
 8009b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b90:	d103      	bne.n	8009b9a <xQueueReceive+0x122>
 8009b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b94:	2200      	movs	r2, #0
 8009b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ba0:	b25b      	sxtb	r3, r3
 8009ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba6:	d103      	bne.n	8009bb0 <xQueueReceive+0x138>
 8009ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009baa:	2200      	movs	r2, #0
 8009bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bb0:	f002 f838 	bl	800bc24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009bb4:	1d3a      	adds	r2, r7, #4
 8009bb6:	f107 0310 	add.w	r3, r7, #16
 8009bba:	4611      	mov	r1, r2
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f000 ff5f 	bl	800aa80 <xTaskCheckForTimeOut>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d123      	bne.n	8009c10 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bca:	f000 f9ba 	bl	8009f42 <prvIsQueueEmpty>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d017      	beq.n	8009c04 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd6:	3324      	adds	r3, #36	; 0x24
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	4611      	mov	r1, r2
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f000 fe85 	bl	800a8ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009be2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009be4:	f000 f95b 	bl	8009e9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009be8:	f000 fca2 	bl	800a530 <xTaskResumeAll>
 8009bec:	4603      	mov	r3, r0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d189      	bne.n	8009b06 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009bf2:	4b10      	ldr	r3, [pc, #64]	; (8009c34 <xQueueReceive+0x1bc>)
 8009bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bf8:	601a      	str	r2, [r3, #0]
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	f3bf 8f6f 	isb	sy
 8009c02:	e780      	b.n	8009b06 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c06:	f000 f94a 	bl	8009e9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c0a:	f000 fc91 	bl	800a530 <xTaskResumeAll>
 8009c0e:	e77a      	b.n	8009b06 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009c10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c12:	f000 f944 	bl	8009e9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c16:	f000 fc8b 	bl	800a530 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c1c:	f000 f991 	bl	8009f42 <prvIsQueueEmpty>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	f43f af6f 	beq.w	8009b06 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3730      	adds	r7, #48	; 0x30
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	e000ed04 	.word	0xe000ed04

08009c38 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b08e      	sub	sp, #56	; 0x38
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10a      	bne.n	8009c64 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c52:	f383 8811 	msr	BASEPRI, r3
 8009c56:	f3bf 8f6f 	isb	sy
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	623b      	str	r3, [r7, #32]
}
 8009c60:	bf00      	nop
 8009c62:	e7fe      	b.n	8009c62 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d103      	bne.n	8009c72 <xQueueReceiveFromISR+0x3a>
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d101      	bne.n	8009c76 <xQueueReceiveFromISR+0x3e>
 8009c72:	2301      	movs	r3, #1
 8009c74:	e000      	b.n	8009c78 <xQueueReceiveFromISR+0x40>
 8009c76:	2300      	movs	r3, #0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10a      	bne.n	8009c92 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c80:	f383 8811 	msr	BASEPRI, r3
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	61fb      	str	r3, [r7, #28]
}
 8009c8e:	bf00      	nop
 8009c90:	e7fe      	b.n	8009c90 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c92:	f002 f879 	bl	800bd88 <vPortValidateInterruptPriority>
	__asm volatile
 8009c96:	f3ef 8211 	mrs	r2, BASEPRI
 8009c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9e:	f383 8811 	msr	BASEPRI, r3
 8009ca2:	f3bf 8f6f 	isb	sy
 8009ca6:	f3bf 8f4f 	dsb	sy
 8009caa:	61ba      	str	r2, [r7, #24]
 8009cac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009cae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d02f      	beq.n	8009d1e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009cc8:	68b9      	ldr	r1, [r7, #8]
 8009cca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ccc:	f000 f8c1 	bl	8009e52 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd2:	1e5a      	subs	r2, r3, #1
 8009cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009cd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce0:	d112      	bne.n	8009d08 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce4:	691b      	ldr	r3, [r3, #16]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d016      	beq.n	8009d18 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cec:	3310      	adds	r3, #16
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f000 fe4c 	bl	800a98c <xTaskRemoveFromEventList>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d00e      	beq.n	8009d18 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00b      	beq.n	8009d18 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	601a      	str	r2, [r3, #0]
 8009d06:	e007      	b.n	8009d18 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	b25a      	sxtb	r2, r3
 8009d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8009d1c:	e001      	b.n	8009d22 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	637b      	str	r3, [r7, #52]	; 0x34
 8009d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d24:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	f383 8811 	msr	BASEPRI, r3
}
 8009d2c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3738      	adds	r7, #56	; 0x38
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b086      	sub	sp, #24
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d10a      	bne.n	8009d60 <uxQueueSpacesAvailable+0x28>
	__asm volatile
 8009d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4e:	f383 8811 	msr	BASEPRI, r3
 8009d52:	f3bf 8f6f 	isb	sy
 8009d56:	f3bf 8f4f 	dsb	sy
 8009d5a:	60fb      	str	r3, [r7, #12]
}
 8009d5c:	bf00      	nop
 8009d5e:	e7fe      	b.n	8009d5e <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 8009d60:	f001 ff30 	bl	800bbc4 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d6c:	1ad3      	subs	r3, r2, r3
 8009d6e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8009d70:	f001 ff58 	bl	800bc24 <vPortExitCritical>

	return uxReturn;
 8009d74:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009d76:	4618      	mov	r0, r3
 8009d78:	3718      	adds	r7, #24
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b086      	sub	sp, #24
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	60f8      	str	r0, [r7, #12]
 8009d86:	60b9      	str	r1, [r7, #8]
 8009d88:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d92:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d10d      	bne.n	8009db8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d14d      	bne.n	8009e40 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	4618      	mov	r0, r3
 8009daa:	f000 ffcf 	bl	800ad4c <xTaskPriorityDisinherit>
 8009dae:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2200      	movs	r2, #0
 8009db4:	609a      	str	r2, [r3, #8]
 8009db6:	e043      	b.n	8009e40 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d119      	bne.n	8009df2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6858      	ldr	r0, [r3, #4]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	68b9      	ldr	r1, [r7, #8]
 8009dca:	f002 fb2a 	bl	800c422 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	685a      	ldr	r2, [r3, #4]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd6:	441a      	add	r2, r3
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	685a      	ldr	r2, [r3, #4]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d32b      	bcc.n	8009e40 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	605a      	str	r2, [r3, #4]
 8009df0:	e026      	b.n	8009e40 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	68d8      	ldr	r0, [r3, #12]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	68b9      	ldr	r1, [r7, #8]
 8009dfe:	f002 fb10 	bl	800c422 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	68da      	ldr	r2, [r3, #12]
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0a:	425b      	negs	r3, r3
 8009e0c:	441a      	add	r2, r3
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	68da      	ldr	r2, [r3, #12]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d207      	bcs.n	8009e2e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	689a      	ldr	r2, [r3, #8]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e26:	425b      	negs	r3, r3
 8009e28:	441a      	add	r2, r3
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2b02      	cmp	r3, #2
 8009e32:	d105      	bne.n	8009e40 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d002      	beq.n	8009e40 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	1c5a      	adds	r2, r3, #1
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009e48:	697b      	ldr	r3, [r7, #20]
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3718      	adds	r7, #24
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b082      	sub	sp, #8
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
 8009e5a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d018      	beq.n	8009e96 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	68da      	ldr	r2, [r3, #12]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6c:	441a      	add	r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	68da      	ldr	r2, [r3, #12]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d303      	bcc.n	8009e86 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	68d9      	ldr	r1, [r3, #12]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8e:	461a      	mov	r2, r3
 8009e90:	6838      	ldr	r0, [r7, #0]
 8009e92:	f002 fac6 	bl	800c422 <memcpy>
	}
}
 8009e96:	bf00      	nop
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b084      	sub	sp, #16
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009ea6:	f001 fe8d 	bl	800bbc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009eb0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009eb2:	e011      	b.n	8009ed8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d012      	beq.n	8009ee2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	3324      	adds	r3, #36	; 0x24
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f000 fd63 	bl	800a98c <xTaskRemoveFromEventList>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d001      	beq.n	8009ed0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009ecc:	f000 fe3a 	bl	800ab44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009ed0:	7bfb      	ldrb	r3, [r7, #15]
 8009ed2:	3b01      	subs	r3, #1
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	dce9      	bgt.n	8009eb4 <prvUnlockQueue+0x16>
 8009ee0:	e000      	b.n	8009ee4 <prvUnlockQueue+0x46>
					break;
 8009ee2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	22ff      	movs	r2, #255	; 0xff
 8009ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009eec:	f001 fe9a 	bl	800bc24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009ef0:	f001 fe68 	bl	800bbc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009efa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009efc:	e011      	b.n	8009f22 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d012      	beq.n	8009f2c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	3310      	adds	r3, #16
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f000 fd3e 	bl	800a98c <xTaskRemoveFromEventList>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d001      	beq.n	8009f1a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009f16:	f000 fe15 	bl	800ab44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009f1a:	7bbb      	ldrb	r3, [r7, #14]
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	dce9      	bgt.n	8009efe <prvUnlockQueue+0x60>
 8009f2a:	e000      	b.n	8009f2e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009f2c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	22ff      	movs	r2, #255	; 0xff
 8009f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009f36:	f001 fe75 	bl	800bc24 <vPortExitCritical>
}
 8009f3a:	bf00      	nop
 8009f3c:	3710      	adds	r7, #16
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b084      	sub	sp, #16
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009f4a:	f001 fe3b 	bl	800bbc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d102      	bne.n	8009f5c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009f56:	2301      	movs	r3, #1
 8009f58:	60fb      	str	r3, [r7, #12]
 8009f5a:	e001      	b.n	8009f60 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009f60:	f001 fe60 	bl	800bc24 <vPortExitCritical>

	return xReturn;
 8009f64:	68fb      	ldr	r3, [r7, #12]
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b084      	sub	sp, #16
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009f76:	f001 fe25 	bl	800bbc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d102      	bne.n	8009f8c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009f86:	2301      	movs	r3, #1
 8009f88:	60fb      	str	r3, [r7, #12]
 8009f8a:	e001      	b.n	8009f90 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009f90:	f001 fe48 	bl	800bc24 <vPortExitCritical>

	return xReturn;
 8009f94:	68fb      	ldr	r3, [r7, #12]
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3710      	adds	r7, #16
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
	...

08009fa0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009faa:	2300      	movs	r3, #0
 8009fac:	60fb      	str	r3, [r7, #12]
 8009fae:	e014      	b.n	8009fda <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009fb0:	4a0f      	ldr	r2, [pc, #60]	; (8009ff0 <vQueueAddToRegistry+0x50>)
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d10b      	bne.n	8009fd4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009fbc:	490c      	ldr	r1, [pc, #48]	; (8009ff0 <vQueueAddToRegistry+0x50>)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	683a      	ldr	r2, [r7, #0]
 8009fc2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009fc6:	4a0a      	ldr	r2, [pc, #40]	; (8009ff0 <vQueueAddToRegistry+0x50>)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	00db      	lsls	r3, r3, #3
 8009fcc:	4413      	add	r3, r2
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009fd2:	e006      	b.n	8009fe2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	60fb      	str	r3, [r7, #12]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2b07      	cmp	r3, #7
 8009fde:	d9e7      	bls.n	8009fb0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009fe0:	bf00      	nop
 8009fe2:	bf00      	nop
 8009fe4:	3714      	adds	r7, #20
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	200018d0 	.word	0x200018d0

08009ff4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b086      	sub	sp, #24
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a004:	f001 fdde 	bl	800bbc4 <vPortEnterCritical>
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a00e:	b25b      	sxtb	r3, r3
 800a010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a014:	d103      	bne.n	800a01e <vQueueWaitForMessageRestricted+0x2a>
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	2200      	movs	r2, #0
 800a01a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a024:	b25b      	sxtb	r3, r3
 800a026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a02a:	d103      	bne.n	800a034 <vQueueWaitForMessageRestricted+0x40>
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	2200      	movs	r2, #0
 800a030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a034:	f001 fdf6 	bl	800bc24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d106      	bne.n	800a04e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	3324      	adds	r3, #36	; 0x24
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	68b9      	ldr	r1, [r7, #8]
 800a048:	4618      	mov	r0, r3
 800a04a:	f000 fc73 	bl	800a934 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a04e:	6978      	ldr	r0, [r7, #20]
 800a050:	f7ff ff25 	bl	8009e9e <prvUnlockQueue>
	}
 800a054:	bf00      	nop
 800a056:	3718      	adds	r7, #24
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b08e      	sub	sp, #56	; 0x38
 800a060:	af04      	add	r7, sp, #16
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]
 800a068:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a06a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d10a      	bne.n	800a086 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	623b      	str	r3, [r7, #32]
}
 800a082:	bf00      	nop
 800a084:	e7fe      	b.n	800a084 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d10a      	bne.n	800a0a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800a08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a090:	f383 8811 	msr	BASEPRI, r3
 800a094:	f3bf 8f6f 	isb	sy
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	61fb      	str	r3, [r7, #28]
}
 800a09e:	bf00      	nop
 800a0a0:	e7fe      	b.n	800a0a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a0a2:	23bc      	movs	r3, #188	; 0xbc
 800a0a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	2bbc      	cmp	r3, #188	; 0xbc
 800a0aa:	d00a      	beq.n	800a0c2 <xTaskCreateStatic+0x66>
	__asm volatile
 800a0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b0:	f383 8811 	msr	BASEPRI, r3
 800a0b4:	f3bf 8f6f 	isb	sy
 800a0b8:	f3bf 8f4f 	dsb	sy
 800a0bc:	61bb      	str	r3, [r7, #24]
}
 800a0be:	bf00      	nop
 800a0c0:	e7fe      	b.n	800a0c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a0c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d01e      	beq.n	800a108 <xTaskCreateStatic+0xac>
 800a0ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d01b      	beq.n	800a108 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0dc:	2202      	movs	r2, #2
 800a0de:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	9303      	str	r3, [sp, #12]
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e8:	9302      	str	r3, [sp, #8]
 800a0ea:	f107 0314 	add.w	r3, r7, #20
 800a0ee:	9301      	str	r3, [sp, #4]
 800a0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f2:	9300      	str	r3, [sp, #0]
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	68b9      	ldr	r1, [r7, #8]
 800a0fa:	68f8      	ldr	r0, [r7, #12]
 800a0fc:	f000 f850 	bl	800a1a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a100:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a102:	f000 f8f3 	bl	800a2ec <prvAddNewTaskToReadyList>
 800a106:	e001      	b.n	800a10c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a108:	2300      	movs	r3, #0
 800a10a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a10c:	697b      	ldr	r3, [r7, #20]
	}
 800a10e:	4618      	mov	r0, r3
 800a110:	3728      	adds	r7, #40	; 0x28
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a116:	b580      	push	{r7, lr}
 800a118:	b08c      	sub	sp, #48	; 0x30
 800a11a:	af04      	add	r7, sp, #16
 800a11c:	60f8      	str	r0, [r7, #12]
 800a11e:	60b9      	str	r1, [r7, #8]
 800a120:	603b      	str	r3, [r7, #0]
 800a122:	4613      	mov	r3, r2
 800a124:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a126:	88fb      	ldrh	r3, [r7, #6]
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	4618      	mov	r0, r3
 800a12c:	f001 fe6c 	bl	800be08 <pvPortMalloc>
 800a130:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d00e      	beq.n	800a156 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a138:	20bc      	movs	r0, #188	; 0xbc
 800a13a:	f001 fe65 	bl	800be08 <pvPortMalloc>
 800a13e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d003      	beq.n	800a14e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a146:	69fb      	ldr	r3, [r7, #28]
 800a148:	697a      	ldr	r2, [r7, #20]
 800a14a:	631a      	str	r2, [r3, #48]	; 0x30
 800a14c:	e005      	b.n	800a15a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a14e:	6978      	ldr	r0, [r7, #20]
 800a150:	f001 ff26 	bl	800bfa0 <vPortFree>
 800a154:	e001      	b.n	800a15a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a156:	2300      	movs	r3, #0
 800a158:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a15a:	69fb      	ldr	r3, [r7, #28]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d017      	beq.n	800a190 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	2200      	movs	r2, #0
 800a164:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a168:	88fa      	ldrh	r2, [r7, #6]
 800a16a:	2300      	movs	r3, #0
 800a16c:	9303      	str	r3, [sp, #12]
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	9302      	str	r3, [sp, #8]
 800a172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a174:	9301      	str	r3, [sp, #4]
 800a176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a178:	9300      	str	r3, [sp, #0]
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	68b9      	ldr	r1, [r7, #8]
 800a17e:	68f8      	ldr	r0, [r7, #12]
 800a180:	f000 f80e 	bl	800a1a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a184:	69f8      	ldr	r0, [r7, #28]
 800a186:	f000 f8b1 	bl	800a2ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a18a:	2301      	movs	r3, #1
 800a18c:	61bb      	str	r3, [r7, #24]
 800a18e:	e002      	b.n	800a196 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a190:	f04f 33ff 	mov.w	r3, #4294967295
 800a194:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a196:	69bb      	ldr	r3, [r7, #24]
	}
 800a198:	4618      	mov	r0, r3
 800a19a:	3720      	adds	r7, #32
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b088      	sub	sp, #32
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]
 800a1ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	21a5      	movs	r1, #165	; 0xa5
 800a1ba:	f002 f940 	bl	800c43e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	4413      	add	r3, r2
 800a1ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	f023 0307 	bic.w	r3, r3, #7
 800a1d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a1d8:	69bb      	ldr	r3, [r7, #24]
 800a1da:	f003 0307 	and.w	r3, r3, #7
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00a      	beq.n	800a1f8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e6:	f383 8811 	msr	BASEPRI, r3
 800a1ea:	f3bf 8f6f 	isb	sy
 800a1ee:	f3bf 8f4f 	dsb	sy
 800a1f2:	617b      	str	r3, [r7, #20]
}
 800a1f4:	bf00      	nop
 800a1f6:	e7fe      	b.n	800a1f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d01f      	beq.n	800a23e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a1fe:	2300      	movs	r3, #0
 800a200:	61fb      	str	r3, [r7, #28]
 800a202:	e012      	b.n	800a22a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	4413      	add	r3, r2
 800a20a:	7819      	ldrb	r1, [r3, #0]
 800a20c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	4413      	add	r3, r2
 800a212:	3334      	adds	r3, #52	; 0x34
 800a214:	460a      	mov	r2, r1
 800a216:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a218:	68ba      	ldr	r2, [r7, #8]
 800a21a:	69fb      	ldr	r3, [r7, #28]
 800a21c:	4413      	add	r3, r2
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d006      	beq.n	800a232 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	3301      	adds	r3, #1
 800a228:	61fb      	str	r3, [r7, #28]
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	2b0f      	cmp	r3, #15
 800a22e:	d9e9      	bls.n	800a204 <prvInitialiseNewTask+0x64>
 800a230:	e000      	b.n	800a234 <prvInitialiseNewTask+0x94>
			{
				break;
 800a232:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a236:	2200      	movs	r2, #0
 800a238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a23c:	e003      	b.n	800a246 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a240:	2200      	movs	r2, #0
 800a242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a248:	2b37      	cmp	r3, #55	; 0x37
 800a24a:	d901      	bls.n	800a250 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a24c:	2337      	movs	r3, #55	; 0x37
 800a24e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a252:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a254:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a25a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25e:	2200      	movs	r2, #0
 800a260:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a264:	3304      	adds	r3, #4
 800a266:	4618      	mov	r0, r3
 800a268:	f7ff f89a 	bl	80093a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26e:	3318      	adds	r3, #24
 800a270:	4618      	mov	r0, r3
 800a272:	f7ff f895 	bl	80093a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a27a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a284:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a28a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28e:	2200      	movs	r2, #0
 800a290:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a296:	2200      	movs	r2, #0
 800a298:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29e:	3354      	adds	r3, #84	; 0x54
 800a2a0:	2260      	movs	r2, #96	; 0x60
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f002 f8ca 	bl	800c43e <memset>
 800a2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ac:	4a0c      	ldr	r2, [pc, #48]	; (800a2e0 <prvInitialiseNewTask+0x140>)
 800a2ae:	659a      	str	r2, [r3, #88]	; 0x58
 800a2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b2:	4a0c      	ldr	r2, [pc, #48]	; (800a2e4 <prvInitialiseNewTask+0x144>)
 800a2b4:	65da      	str	r2, [r3, #92]	; 0x5c
 800a2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b8:	4a0b      	ldr	r2, [pc, #44]	; (800a2e8 <prvInitialiseNewTask+0x148>)
 800a2ba:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a2bc:	683a      	ldr	r2, [r7, #0]
 800a2be:	68f9      	ldr	r1, [r7, #12]
 800a2c0:	69b8      	ldr	r0, [r7, #24]
 800a2c2:	f001 fb55 	bl	800b970 <pxPortInitialiseStack>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d002      	beq.n	800a2d8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2d8:	bf00      	nop
 800a2da:	3720      	adds	r7, #32
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	0800e130 	.word	0x0800e130
 800a2e4:	0800e150 	.word	0x0800e150
 800a2e8:	0800e110 	.word	0x0800e110

0800a2ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a2f4:	f001 fc66 	bl	800bbc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a2f8:	4b2d      	ldr	r3, [pc, #180]	; (800a3b0 <prvAddNewTaskToReadyList+0xc4>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	4a2c      	ldr	r2, [pc, #176]	; (800a3b0 <prvAddNewTaskToReadyList+0xc4>)
 800a300:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a302:	4b2c      	ldr	r3, [pc, #176]	; (800a3b4 <prvAddNewTaskToReadyList+0xc8>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d109      	bne.n	800a31e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a30a:	4a2a      	ldr	r2, [pc, #168]	; (800a3b4 <prvAddNewTaskToReadyList+0xc8>)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a310:	4b27      	ldr	r3, [pc, #156]	; (800a3b0 <prvAddNewTaskToReadyList+0xc4>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2b01      	cmp	r3, #1
 800a316:	d110      	bne.n	800a33a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a318:	f000 fc38 	bl	800ab8c <prvInitialiseTaskLists>
 800a31c:	e00d      	b.n	800a33a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a31e:	4b26      	ldr	r3, [pc, #152]	; (800a3b8 <prvAddNewTaskToReadyList+0xcc>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d109      	bne.n	800a33a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a326:	4b23      	ldr	r3, [pc, #140]	; (800a3b4 <prvAddNewTaskToReadyList+0xc8>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a330:	429a      	cmp	r2, r3
 800a332:	d802      	bhi.n	800a33a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a334:	4a1f      	ldr	r2, [pc, #124]	; (800a3b4 <prvAddNewTaskToReadyList+0xc8>)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a33a:	4b20      	ldr	r3, [pc, #128]	; (800a3bc <prvAddNewTaskToReadyList+0xd0>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	3301      	adds	r3, #1
 800a340:	4a1e      	ldr	r2, [pc, #120]	; (800a3bc <prvAddNewTaskToReadyList+0xd0>)
 800a342:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a344:	4b1d      	ldr	r3, [pc, #116]	; (800a3bc <prvAddNewTaskToReadyList+0xd0>)
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a350:	4b1b      	ldr	r3, [pc, #108]	; (800a3c0 <prvAddNewTaskToReadyList+0xd4>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	429a      	cmp	r2, r3
 800a356:	d903      	bls.n	800a360 <prvAddNewTaskToReadyList+0x74>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a35c:	4a18      	ldr	r2, [pc, #96]	; (800a3c0 <prvAddNewTaskToReadyList+0xd4>)
 800a35e:	6013      	str	r3, [r2, #0]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a364:	4613      	mov	r3, r2
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	4413      	add	r3, r2
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	4a15      	ldr	r2, [pc, #84]	; (800a3c4 <prvAddNewTaskToReadyList+0xd8>)
 800a36e:	441a      	add	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	3304      	adds	r3, #4
 800a374:	4619      	mov	r1, r3
 800a376:	4610      	mov	r0, r2
 800a378:	f7ff f81f 	bl	80093ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a37c:	f001 fc52 	bl	800bc24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a380:	4b0d      	ldr	r3, [pc, #52]	; (800a3b8 <prvAddNewTaskToReadyList+0xcc>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d00e      	beq.n	800a3a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a388:	4b0a      	ldr	r3, [pc, #40]	; (800a3b4 <prvAddNewTaskToReadyList+0xc8>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a392:	429a      	cmp	r2, r3
 800a394:	d207      	bcs.n	800a3a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a396:	4b0c      	ldr	r3, [pc, #48]	; (800a3c8 <prvAddNewTaskToReadyList+0xdc>)
 800a398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a39c:	601a      	str	r2, [r3, #0]
 800a39e:	f3bf 8f4f 	dsb	sy
 800a3a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3a6:	bf00      	nop
 800a3a8:	3708      	adds	r7, #8
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	20001de4 	.word	0x20001de4
 800a3b4:	20001910 	.word	0x20001910
 800a3b8:	20001df0 	.word	0x20001df0
 800a3bc:	20001e00 	.word	0x20001e00
 800a3c0:	20001dec 	.word	0x20001dec
 800a3c4:	20001914 	.word	0x20001914
 800a3c8:	e000ed04 	.word	0xe000ed04

0800a3cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d017      	beq.n	800a40e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a3de:	4b13      	ldr	r3, [pc, #76]	; (800a42c <vTaskDelay+0x60>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d00a      	beq.n	800a3fc <vTaskDelay+0x30>
	__asm volatile
 800a3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ea:	f383 8811 	msr	BASEPRI, r3
 800a3ee:	f3bf 8f6f 	isb	sy
 800a3f2:	f3bf 8f4f 	dsb	sy
 800a3f6:	60bb      	str	r3, [r7, #8]
}
 800a3f8:	bf00      	nop
 800a3fa:	e7fe      	b.n	800a3fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a3fc:	f000 f88a 	bl	800a514 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a400:	2100      	movs	r1, #0
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 ff12 	bl	800b22c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a408:	f000 f892 	bl	800a530 <xTaskResumeAll>
 800a40c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d107      	bne.n	800a424 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a414:	4b06      	ldr	r3, [pc, #24]	; (800a430 <vTaskDelay+0x64>)
 800a416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a41a:	601a      	str	r2, [r3, #0]
 800a41c:	f3bf 8f4f 	dsb	sy
 800a420:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a424:	bf00      	nop
 800a426:	3710      	adds	r7, #16
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	20001e0c 	.word	0x20001e0c
 800a430:	e000ed04 	.word	0xe000ed04

0800a434 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b08a      	sub	sp, #40	; 0x28
 800a438:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a43a:	2300      	movs	r3, #0
 800a43c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a43e:	2300      	movs	r3, #0
 800a440:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a442:	463a      	mov	r2, r7
 800a444:	1d39      	adds	r1, r7, #4
 800a446:	f107 0308 	add.w	r3, r7, #8
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fe ff54 	bl	80092f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a450:	6839      	ldr	r1, [r7, #0]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	68ba      	ldr	r2, [r7, #8]
 800a456:	9202      	str	r2, [sp, #8]
 800a458:	9301      	str	r3, [sp, #4]
 800a45a:	2300      	movs	r3, #0
 800a45c:	9300      	str	r3, [sp, #0]
 800a45e:	2300      	movs	r3, #0
 800a460:	460a      	mov	r2, r1
 800a462:	4924      	ldr	r1, [pc, #144]	; (800a4f4 <vTaskStartScheduler+0xc0>)
 800a464:	4824      	ldr	r0, [pc, #144]	; (800a4f8 <vTaskStartScheduler+0xc4>)
 800a466:	f7ff fdf9 	bl	800a05c <xTaskCreateStatic>
 800a46a:	4603      	mov	r3, r0
 800a46c:	4a23      	ldr	r2, [pc, #140]	; (800a4fc <vTaskStartScheduler+0xc8>)
 800a46e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a470:	4b22      	ldr	r3, [pc, #136]	; (800a4fc <vTaskStartScheduler+0xc8>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d002      	beq.n	800a47e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a478:	2301      	movs	r3, #1
 800a47a:	617b      	str	r3, [r7, #20]
 800a47c:	e001      	b.n	800a482 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a47e:	2300      	movs	r3, #0
 800a480:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	2b01      	cmp	r3, #1
 800a486:	d102      	bne.n	800a48e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a488:	f000 ff24 	bl	800b2d4 <xTimerCreateTimerTask>
 800a48c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	2b01      	cmp	r3, #1
 800a492:	d11b      	bne.n	800a4cc <vTaskStartScheduler+0x98>
	__asm volatile
 800a494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a498:	f383 8811 	msr	BASEPRI, r3
 800a49c:	f3bf 8f6f 	isb	sy
 800a4a0:	f3bf 8f4f 	dsb	sy
 800a4a4:	613b      	str	r3, [r7, #16]
}
 800a4a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a4a8:	4b15      	ldr	r3, [pc, #84]	; (800a500 <vTaskStartScheduler+0xcc>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	3354      	adds	r3, #84	; 0x54
 800a4ae:	4a15      	ldr	r2, [pc, #84]	; (800a504 <vTaskStartScheduler+0xd0>)
 800a4b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a4b2:	4b15      	ldr	r3, [pc, #84]	; (800a508 <vTaskStartScheduler+0xd4>)
 800a4b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a4ba:	4b14      	ldr	r3, [pc, #80]	; (800a50c <vTaskStartScheduler+0xd8>)
 800a4bc:	2201      	movs	r2, #1
 800a4be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a4c0:	4b13      	ldr	r3, [pc, #76]	; (800a510 <vTaskStartScheduler+0xdc>)
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a4c6:	f001 fadb 	bl	800ba80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a4ca:	e00e      	b.n	800a4ea <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d2:	d10a      	bne.n	800a4ea <vTaskStartScheduler+0xb6>
	__asm volatile
 800a4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d8:	f383 8811 	msr	BASEPRI, r3
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	60fb      	str	r3, [r7, #12]
}
 800a4e6:	bf00      	nop
 800a4e8:	e7fe      	b.n	800a4e8 <vTaskStartScheduler+0xb4>
}
 800a4ea:	bf00      	nop
 800a4ec:	3718      	adds	r7, #24
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	0800e02c 	.word	0x0800e02c
 800a4f8:	0800ab5d 	.word	0x0800ab5d
 800a4fc:	20001e08 	.word	0x20001e08
 800a500:	20001910 	.word	0x20001910
 800a504:	20000044 	.word	0x20000044
 800a508:	20001e04 	.word	0x20001e04
 800a50c:	20001df0 	.word	0x20001df0
 800a510:	20001de8 	.word	0x20001de8

0800a514 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a514:	b480      	push	{r7}
 800a516:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a518:	4b04      	ldr	r3, [pc, #16]	; (800a52c <vTaskSuspendAll+0x18>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	3301      	adds	r3, #1
 800a51e:	4a03      	ldr	r2, [pc, #12]	; (800a52c <vTaskSuspendAll+0x18>)
 800a520:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a522:	bf00      	nop
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr
 800a52c:	20001e0c 	.word	0x20001e0c

0800a530 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a536:	2300      	movs	r3, #0
 800a538:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a53a:	2300      	movs	r3, #0
 800a53c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a53e:	4b42      	ldr	r3, [pc, #264]	; (800a648 <xTaskResumeAll+0x118>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d10a      	bne.n	800a55c <xTaskResumeAll+0x2c>
	__asm volatile
 800a546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54a:	f383 8811 	msr	BASEPRI, r3
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	f3bf 8f4f 	dsb	sy
 800a556:	603b      	str	r3, [r7, #0]
}
 800a558:	bf00      	nop
 800a55a:	e7fe      	b.n	800a55a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a55c:	f001 fb32 	bl	800bbc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a560:	4b39      	ldr	r3, [pc, #228]	; (800a648 <xTaskResumeAll+0x118>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	3b01      	subs	r3, #1
 800a566:	4a38      	ldr	r2, [pc, #224]	; (800a648 <xTaskResumeAll+0x118>)
 800a568:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a56a:	4b37      	ldr	r3, [pc, #220]	; (800a648 <xTaskResumeAll+0x118>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d162      	bne.n	800a638 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a572:	4b36      	ldr	r3, [pc, #216]	; (800a64c <xTaskResumeAll+0x11c>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d05e      	beq.n	800a638 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a57a:	e02f      	b.n	800a5dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a57c:	4b34      	ldr	r3, [pc, #208]	; (800a650 <xTaskResumeAll+0x120>)
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	68db      	ldr	r3, [r3, #12]
 800a582:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	3318      	adds	r3, #24
 800a588:	4618      	mov	r0, r3
 800a58a:	f7fe ff73 	bl	8009474 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	3304      	adds	r3, #4
 800a592:	4618      	mov	r0, r3
 800a594:	f7fe ff6e 	bl	8009474 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a59c:	4b2d      	ldr	r3, [pc, #180]	; (800a654 <xTaskResumeAll+0x124>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d903      	bls.n	800a5ac <xTaskResumeAll+0x7c>
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a8:	4a2a      	ldr	r2, [pc, #168]	; (800a654 <xTaskResumeAll+0x124>)
 800a5aa:	6013      	str	r3, [r2, #0]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5b0:	4613      	mov	r3, r2
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	4413      	add	r3, r2
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	4a27      	ldr	r2, [pc, #156]	; (800a658 <xTaskResumeAll+0x128>)
 800a5ba:	441a      	add	r2, r3
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	3304      	adds	r3, #4
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	4610      	mov	r0, r2
 800a5c4:	f7fe fef9 	bl	80093ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5cc:	4b23      	ldr	r3, [pc, #140]	; (800a65c <xTaskResumeAll+0x12c>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d302      	bcc.n	800a5dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a5d6:	4b22      	ldr	r3, [pc, #136]	; (800a660 <xTaskResumeAll+0x130>)
 800a5d8:	2201      	movs	r2, #1
 800a5da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a5dc:	4b1c      	ldr	r3, [pc, #112]	; (800a650 <xTaskResumeAll+0x120>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d1cb      	bne.n	800a57c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d001      	beq.n	800a5ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a5ea:	f000 fb71 	bl	800acd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a5ee:	4b1d      	ldr	r3, [pc, #116]	; (800a664 <xTaskResumeAll+0x134>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d010      	beq.n	800a61c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a5fa:	f000 f859 	bl	800a6b0 <xTaskIncrementTick>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d002      	beq.n	800a60a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a604:	4b16      	ldr	r3, [pc, #88]	; (800a660 <xTaskResumeAll+0x130>)
 800a606:	2201      	movs	r2, #1
 800a608:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	3b01      	subs	r3, #1
 800a60e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d1f1      	bne.n	800a5fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a616:	4b13      	ldr	r3, [pc, #76]	; (800a664 <xTaskResumeAll+0x134>)
 800a618:	2200      	movs	r2, #0
 800a61a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a61c:	4b10      	ldr	r3, [pc, #64]	; (800a660 <xTaskResumeAll+0x130>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d009      	beq.n	800a638 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a624:	2301      	movs	r3, #1
 800a626:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a628:	4b0f      	ldr	r3, [pc, #60]	; (800a668 <xTaskResumeAll+0x138>)
 800a62a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a62e:	601a      	str	r2, [r3, #0]
 800a630:	f3bf 8f4f 	dsb	sy
 800a634:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a638:	f001 faf4 	bl	800bc24 <vPortExitCritical>

	return xAlreadyYielded;
 800a63c:	68bb      	ldr	r3, [r7, #8]
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3710      	adds	r7, #16
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	20001e0c 	.word	0x20001e0c
 800a64c:	20001de4 	.word	0x20001de4
 800a650:	20001da4 	.word	0x20001da4
 800a654:	20001dec 	.word	0x20001dec
 800a658:	20001914 	.word	0x20001914
 800a65c:	20001910 	.word	0x20001910
 800a660:	20001df8 	.word	0x20001df8
 800a664:	20001df4 	.word	0x20001df4
 800a668:	e000ed04 	.word	0xe000ed04

0800a66c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a672:	4b05      	ldr	r3, [pc, #20]	; (800a688 <xTaskGetTickCount+0x1c>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a678:	687b      	ldr	r3, [r7, #4]
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	370c      	adds	r7, #12
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr
 800a686:	bf00      	nop
 800a688:	20001de8 	.word	0x20001de8

0800a68c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a692:	f001 fb79 	bl	800bd88 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a696:	2300      	movs	r3, #0
 800a698:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a69a:	4b04      	ldr	r3, [pc, #16]	; (800a6ac <xTaskGetTickCountFromISR+0x20>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a6a0:	683b      	ldr	r3, [r7, #0]
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3708      	adds	r7, #8
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	20001de8 	.word	0x20001de8

0800a6b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b086      	sub	sp, #24
 800a6b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6ba:	4b4f      	ldr	r3, [pc, #316]	; (800a7f8 <xTaskIncrementTick+0x148>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f040 808f 	bne.w	800a7e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a6c4:	4b4d      	ldr	r3, [pc, #308]	; (800a7fc <xTaskIncrementTick+0x14c>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a6cc:	4a4b      	ldr	r2, [pc, #300]	; (800a7fc <xTaskIncrementTick+0x14c>)
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d120      	bne.n	800a71a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a6d8:	4b49      	ldr	r3, [pc, #292]	; (800a800 <xTaskIncrementTick+0x150>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00a      	beq.n	800a6f8 <xTaskIncrementTick+0x48>
	__asm volatile
 800a6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e6:	f383 8811 	msr	BASEPRI, r3
 800a6ea:	f3bf 8f6f 	isb	sy
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	603b      	str	r3, [r7, #0]
}
 800a6f4:	bf00      	nop
 800a6f6:	e7fe      	b.n	800a6f6 <xTaskIncrementTick+0x46>
 800a6f8:	4b41      	ldr	r3, [pc, #260]	; (800a800 <xTaskIncrementTick+0x150>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	60fb      	str	r3, [r7, #12]
 800a6fe:	4b41      	ldr	r3, [pc, #260]	; (800a804 <xTaskIncrementTick+0x154>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4a3f      	ldr	r2, [pc, #252]	; (800a800 <xTaskIncrementTick+0x150>)
 800a704:	6013      	str	r3, [r2, #0]
 800a706:	4a3f      	ldr	r2, [pc, #252]	; (800a804 <xTaskIncrementTick+0x154>)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6013      	str	r3, [r2, #0]
 800a70c:	4b3e      	ldr	r3, [pc, #248]	; (800a808 <xTaskIncrementTick+0x158>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	3301      	adds	r3, #1
 800a712:	4a3d      	ldr	r2, [pc, #244]	; (800a808 <xTaskIncrementTick+0x158>)
 800a714:	6013      	str	r3, [r2, #0]
 800a716:	f000 fadb 	bl	800acd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a71a:	4b3c      	ldr	r3, [pc, #240]	; (800a80c <xTaskIncrementTick+0x15c>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	693a      	ldr	r2, [r7, #16]
 800a720:	429a      	cmp	r2, r3
 800a722:	d349      	bcc.n	800a7b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a724:	4b36      	ldr	r3, [pc, #216]	; (800a800 <xTaskIncrementTick+0x150>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d104      	bne.n	800a738 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a72e:	4b37      	ldr	r3, [pc, #220]	; (800a80c <xTaskIncrementTick+0x15c>)
 800a730:	f04f 32ff 	mov.w	r2, #4294967295
 800a734:	601a      	str	r2, [r3, #0]
					break;
 800a736:	e03f      	b.n	800a7b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a738:	4b31      	ldr	r3, [pc, #196]	; (800a800 <xTaskIncrementTick+0x150>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a748:	693a      	ldr	r2, [r7, #16]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d203      	bcs.n	800a758 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a750:	4a2e      	ldr	r2, [pc, #184]	; (800a80c <xTaskIncrementTick+0x15c>)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a756:	e02f      	b.n	800a7b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	3304      	adds	r3, #4
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7fe fe89 	bl	8009474 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a766:	2b00      	cmp	r3, #0
 800a768:	d004      	beq.n	800a774 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	3318      	adds	r3, #24
 800a76e:	4618      	mov	r0, r3
 800a770:	f7fe fe80 	bl	8009474 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a778:	4b25      	ldr	r3, [pc, #148]	; (800a810 <xTaskIncrementTick+0x160>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d903      	bls.n	800a788 <xTaskIncrementTick+0xd8>
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a784:	4a22      	ldr	r2, [pc, #136]	; (800a810 <xTaskIncrementTick+0x160>)
 800a786:	6013      	str	r3, [r2, #0]
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a78c:	4613      	mov	r3, r2
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	4413      	add	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	4a1f      	ldr	r2, [pc, #124]	; (800a814 <xTaskIncrementTick+0x164>)
 800a796:	441a      	add	r2, r3
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	3304      	adds	r3, #4
 800a79c:	4619      	mov	r1, r3
 800a79e:	4610      	mov	r0, r2
 800a7a0:	f7fe fe0b 	bl	80093ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7a8:	4b1b      	ldr	r3, [pc, #108]	; (800a818 <xTaskIncrementTick+0x168>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d3b8      	bcc.n	800a724 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7b6:	e7b5      	b.n	800a724 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a7b8:	4b17      	ldr	r3, [pc, #92]	; (800a818 <xTaskIncrementTick+0x168>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7be:	4915      	ldr	r1, [pc, #84]	; (800a814 <xTaskIncrementTick+0x164>)
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	4413      	add	r3, r2
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	440b      	add	r3, r1
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d901      	bls.n	800a7d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a7d4:	4b11      	ldr	r3, [pc, #68]	; (800a81c <xTaskIncrementTick+0x16c>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d007      	beq.n	800a7ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	617b      	str	r3, [r7, #20]
 800a7e0:	e004      	b.n	800a7ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a7e2:	4b0f      	ldr	r3, [pc, #60]	; (800a820 <xTaskIncrementTick+0x170>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	4a0d      	ldr	r2, [pc, #52]	; (800a820 <xTaskIncrementTick+0x170>)
 800a7ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a7ec:	697b      	ldr	r3, [r7, #20]
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3718      	adds	r7, #24
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	20001e0c 	.word	0x20001e0c
 800a7fc:	20001de8 	.word	0x20001de8
 800a800:	20001d9c 	.word	0x20001d9c
 800a804:	20001da0 	.word	0x20001da0
 800a808:	20001dfc 	.word	0x20001dfc
 800a80c:	20001e04 	.word	0x20001e04
 800a810:	20001dec 	.word	0x20001dec
 800a814:	20001914 	.word	0x20001914
 800a818:	20001910 	.word	0x20001910
 800a81c:	20001df8 	.word	0x20001df8
 800a820:	20001df4 	.word	0x20001df4

0800a824 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a824:	b480      	push	{r7}
 800a826:	b085      	sub	sp, #20
 800a828:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a82a:	4b2a      	ldr	r3, [pc, #168]	; (800a8d4 <vTaskSwitchContext+0xb0>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d003      	beq.n	800a83a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a832:	4b29      	ldr	r3, [pc, #164]	; (800a8d8 <vTaskSwitchContext+0xb4>)
 800a834:	2201      	movs	r2, #1
 800a836:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a838:	e046      	b.n	800a8c8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a83a:	4b27      	ldr	r3, [pc, #156]	; (800a8d8 <vTaskSwitchContext+0xb4>)
 800a83c:	2200      	movs	r2, #0
 800a83e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a840:	4b26      	ldr	r3, [pc, #152]	; (800a8dc <vTaskSwitchContext+0xb8>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	60fb      	str	r3, [r7, #12]
 800a846:	e010      	b.n	800a86a <vTaskSwitchContext+0x46>
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d10a      	bne.n	800a864 <vTaskSwitchContext+0x40>
	__asm volatile
 800a84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a852:	f383 8811 	msr	BASEPRI, r3
 800a856:	f3bf 8f6f 	isb	sy
 800a85a:	f3bf 8f4f 	dsb	sy
 800a85e:	607b      	str	r3, [r7, #4]
}
 800a860:	bf00      	nop
 800a862:	e7fe      	b.n	800a862 <vTaskSwitchContext+0x3e>
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	3b01      	subs	r3, #1
 800a868:	60fb      	str	r3, [r7, #12]
 800a86a:	491d      	ldr	r1, [pc, #116]	; (800a8e0 <vTaskSwitchContext+0xbc>)
 800a86c:	68fa      	ldr	r2, [r7, #12]
 800a86e:	4613      	mov	r3, r2
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	4413      	add	r3, r2
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	440b      	add	r3, r1
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d0e4      	beq.n	800a848 <vTaskSwitchContext+0x24>
 800a87e:	68fa      	ldr	r2, [r7, #12]
 800a880:	4613      	mov	r3, r2
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	4413      	add	r3, r2
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	4a15      	ldr	r2, [pc, #84]	; (800a8e0 <vTaskSwitchContext+0xbc>)
 800a88a:	4413      	add	r3, r2
 800a88c:	60bb      	str	r3, [r7, #8]
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	685a      	ldr	r2, [r3, #4]
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	605a      	str	r2, [r3, #4]
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	685a      	ldr	r2, [r3, #4]
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	3308      	adds	r3, #8
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d104      	bne.n	800a8ae <vTaskSwitchContext+0x8a>
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	685a      	ldr	r2, [r3, #4]
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	605a      	str	r2, [r3, #4]
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	4a0b      	ldr	r2, [pc, #44]	; (800a8e4 <vTaskSwitchContext+0xc0>)
 800a8b6:	6013      	str	r3, [r2, #0]
 800a8b8:	4a08      	ldr	r2, [pc, #32]	; (800a8dc <vTaskSwitchContext+0xb8>)
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a8be:	4b09      	ldr	r3, [pc, #36]	; (800a8e4 <vTaskSwitchContext+0xc0>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	3354      	adds	r3, #84	; 0x54
 800a8c4:	4a08      	ldr	r2, [pc, #32]	; (800a8e8 <vTaskSwitchContext+0xc4>)
 800a8c6:	6013      	str	r3, [r2, #0]
}
 800a8c8:	bf00      	nop
 800a8ca:	3714      	adds	r7, #20
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr
 800a8d4:	20001e0c 	.word	0x20001e0c
 800a8d8:	20001df8 	.word	0x20001df8
 800a8dc:	20001dec 	.word	0x20001dec
 800a8e0:	20001914 	.word	0x20001914
 800a8e4:	20001910 	.word	0x20001910
 800a8e8:	20000044 	.word	0x20000044

0800a8ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d10a      	bne.n	800a912 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a900:	f383 8811 	msr	BASEPRI, r3
 800a904:	f3bf 8f6f 	isb	sy
 800a908:	f3bf 8f4f 	dsb	sy
 800a90c:	60fb      	str	r3, [r7, #12]
}
 800a90e:	bf00      	nop
 800a910:	e7fe      	b.n	800a910 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a912:	4b07      	ldr	r3, [pc, #28]	; (800a930 <vTaskPlaceOnEventList+0x44>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	3318      	adds	r3, #24
 800a918:	4619      	mov	r1, r3
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f7fe fd71 	bl	8009402 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a920:	2101      	movs	r1, #1
 800a922:	6838      	ldr	r0, [r7, #0]
 800a924:	f000 fc82 	bl	800b22c <prvAddCurrentTaskToDelayedList>
}
 800a928:	bf00      	nop
 800a92a:	3710      	adds	r7, #16
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	20001910 	.word	0x20001910

0800a934 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a934:	b580      	push	{r7, lr}
 800a936:	b086      	sub	sp, #24
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d10a      	bne.n	800a95c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94a:	f383 8811 	msr	BASEPRI, r3
 800a94e:	f3bf 8f6f 	isb	sy
 800a952:	f3bf 8f4f 	dsb	sy
 800a956:	617b      	str	r3, [r7, #20]
}
 800a958:	bf00      	nop
 800a95a:	e7fe      	b.n	800a95a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a95c:	4b0a      	ldr	r3, [pc, #40]	; (800a988 <vTaskPlaceOnEventListRestricted+0x54>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	3318      	adds	r3, #24
 800a962:	4619      	mov	r1, r3
 800a964:	68f8      	ldr	r0, [r7, #12]
 800a966:	f7fe fd28 	bl	80093ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d002      	beq.n	800a976 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a970:	f04f 33ff 	mov.w	r3, #4294967295
 800a974:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a976:	6879      	ldr	r1, [r7, #4]
 800a978:	68b8      	ldr	r0, [r7, #8]
 800a97a:	f000 fc57 	bl	800b22c <prvAddCurrentTaskToDelayedList>
	}
 800a97e:	bf00      	nop
 800a980:	3718      	adds	r7, #24
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	20001910 	.word	0x20001910

0800a98c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b086      	sub	sp, #24
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d10a      	bne.n	800a9b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a6:	f383 8811 	msr	BASEPRI, r3
 800a9aa:	f3bf 8f6f 	isb	sy
 800a9ae:	f3bf 8f4f 	dsb	sy
 800a9b2:	60fb      	str	r3, [r7, #12]
}
 800a9b4:	bf00      	nop
 800a9b6:	e7fe      	b.n	800a9b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	3318      	adds	r3, #24
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7fe fd59 	bl	8009474 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9c2:	4b1e      	ldr	r3, [pc, #120]	; (800aa3c <xTaskRemoveFromEventList+0xb0>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d11d      	bne.n	800aa06 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	3304      	adds	r3, #4
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7fe fd50 	bl	8009474 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d8:	4b19      	ldr	r3, [pc, #100]	; (800aa40 <xTaskRemoveFromEventList+0xb4>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d903      	bls.n	800a9e8 <xTaskRemoveFromEventList+0x5c>
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e4:	4a16      	ldr	r2, [pc, #88]	; (800aa40 <xTaskRemoveFromEventList+0xb4>)
 800a9e6:	6013      	str	r3, [r2, #0]
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	4413      	add	r3, r2
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	4a13      	ldr	r2, [pc, #76]	; (800aa44 <xTaskRemoveFromEventList+0xb8>)
 800a9f6:	441a      	add	r2, r3
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	3304      	adds	r3, #4
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	4610      	mov	r0, r2
 800aa00:	f7fe fcdb 	bl	80093ba <vListInsertEnd>
 800aa04:	e005      	b.n	800aa12 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	3318      	adds	r3, #24
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	480e      	ldr	r0, [pc, #56]	; (800aa48 <xTaskRemoveFromEventList+0xbc>)
 800aa0e:	f7fe fcd4 	bl	80093ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa16:	4b0d      	ldr	r3, [pc, #52]	; (800aa4c <xTaskRemoveFromEventList+0xc0>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d905      	bls.n	800aa2c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aa20:	2301      	movs	r3, #1
 800aa22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aa24:	4b0a      	ldr	r3, [pc, #40]	; (800aa50 <xTaskRemoveFromEventList+0xc4>)
 800aa26:	2201      	movs	r2, #1
 800aa28:	601a      	str	r2, [r3, #0]
 800aa2a:	e001      	b.n	800aa30 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aa30:	697b      	ldr	r3, [r7, #20]
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3718      	adds	r7, #24
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	20001e0c 	.word	0x20001e0c
 800aa40:	20001dec 	.word	0x20001dec
 800aa44:	20001914 	.word	0x20001914
 800aa48:	20001da4 	.word	0x20001da4
 800aa4c:	20001910 	.word	0x20001910
 800aa50:	20001df8 	.word	0x20001df8

0800aa54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aa5c:	4b06      	ldr	r3, [pc, #24]	; (800aa78 <vTaskInternalSetTimeOutState+0x24>)
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aa64:	4b05      	ldr	r3, [pc, #20]	; (800aa7c <vTaskInternalSetTimeOutState+0x28>)
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	605a      	str	r2, [r3, #4]
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr
 800aa78:	20001dfc 	.word	0x20001dfc
 800aa7c:	20001de8 	.word	0x20001de8

0800aa80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b088      	sub	sp, #32
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d10a      	bne.n	800aaa6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800aa90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa94:	f383 8811 	msr	BASEPRI, r3
 800aa98:	f3bf 8f6f 	isb	sy
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	613b      	str	r3, [r7, #16]
}
 800aaa2:	bf00      	nop
 800aaa4:	e7fe      	b.n	800aaa4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d10a      	bne.n	800aac2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800aaac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab0:	f383 8811 	msr	BASEPRI, r3
 800aab4:	f3bf 8f6f 	isb	sy
 800aab8:	f3bf 8f4f 	dsb	sy
 800aabc:	60fb      	str	r3, [r7, #12]
}
 800aabe:	bf00      	nop
 800aac0:	e7fe      	b.n	800aac0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800aac2:	f001 f87f 	bl	800bbc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aac6:	4b1d      	ldr	r3, [pc, #116]	; (800ab3c <xTaskCheckForTimeOut+0xbc>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	69ba      	ldr	r2, [r7, #24]
 800aad2:	1ad3      	subs	r3, r2, r3
 800aad4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aade:	d102      	bne.n	800aae6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aae0:	2300      	movs	r3, #0
 800aae2:	61fb      	str	r3, [r7, #28]
 800aae4:	e023      	b.n	800ab2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	4b15      	ldr	r3, [pc, #84]	; (800ab40 <xTaskCheckForTimeOut+0xc0>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d007      	beq.n	800ab02 <xTaskCheckForTimeOut+0x82>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	69ba      	ldr	r2, [r7, #24]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d302      	bcc.n	800ab02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aafc:	2301      	movs	r3, #1
 800aafe:	61fb      	str	r3, [r7, #28]
 800ab00:	e015      	b.n	800ab2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	697a      	ldr	r2, [r7, #20]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d20b      	bcs.n	800ab24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	1ad2      	subs	r2, r2, r3
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f7ff ff9b 	bl	800aa54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	61fb      	str	r3, [r7, #28]
 800ab22:	e004      	b.n	800ab2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	2200      	movs	r2, #0
 800ab28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ab2e:	f001 f879 	bl	800bc24 <vPortExitCritical>

	return xReturn;
 800ab32:	69fb      	ldr	r3, [r7, #28]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3720      	adds	r7, #32
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	20001de8 	.word	0x20001de8
 800ab40:	20001dfc 	.word	0x20001dfc

0800ab44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ab44:	b480      	push	{r7}
 800ab46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ab48:	4b03      	ldr	r3, [pc, #12]	; (800ab58 <vTaskMissedYield+0x14>)
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	601a      	str	r2, [r3, #0]
}
 800ab4e:	bf00      	nop
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr
 800ab58:	20001df8 	.word	0x20001df8

0800ab5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ab64:	f000 f852 	bl	800ac0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ab68:	4b06      	ldr	r3, [pc, #24]	; (800ab84 <prvIdleTask+0x28>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d9f9      	bls.n	800ab64 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ab70:	4b05      	ldr	r3, [pc, #20]	; (800ab88 <prvIdleTask+0x2c>)
 800ab72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab76:	601a      	str	r2, [r3, #0]
 800ab78:	f3bf 8f4f 	dsb	sy
 800ab7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ab80:	e7f0      	b.n	800ab64 <prvIdleTask+0x8>
 800ab82:	bf00      	nop
 800ab84:	20001914 	.word	0x20001914
 800ab88:	e000ed04 	.word	0xe000ed04

0800ab8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ab92:	2300      	movs	r3, #0
 800ab94:	607b      	str	r3, [r7, #4]
 800ab96:	e00c      	b.n	800abb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	4413      	add	r3, r2
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	4a12      	ldr	r2, [pc, #72]	; (800abec <prvInitialiseTaskLists+0x60>)
 800aba4:	4413      	add	r3, r2
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7fe fbda 	bl	8009360 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	3301      	adds	r3, #1
 800abb0:	607b      	str	r3, [r7, #4]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2b37      	cmp	r3, #55	; 0x37
 800abb6:	d9ef      	bls.n	800ab98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800abb8:	480d      	ldr	r0, [pc, #52]	; (800abf0 <prvInitialiseTaskLists+0x64>)
 800abba:	f7fe fbd1 	bl	8009360 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800abbe:	480d      	ldr	r0, [pc, #52]	; (800abf4 <prvInitialiseTaskLists+0x68>)
 800abc0:	f7fe fbce 	bl	8009360 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800abc4:	480c      	ldr	r0, [pc, #48]	; (800abf8 <prvInitialiseTaskLists+0x6c>)
 800abc6:	f7fe fbcb 	bl	8009360 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800abca:	480c      	ldr	r0, [pc, #48]	; (800abfc <prvInitialiseTaskLists+0x70>)
 800abcc:	f7fe fbc8 	bl	8009360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800abd0:	480b      	ldr	r0, [pc, #44]	; (800ac00 <prvInitialiseTaskLists+0x74>)
 800abd2:	f7fe fbc5 	bl	8009360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800abd6:	4b0b      	ldr	r3, [pc, #44]	; (800ac04 <prvInitialiseTaskLists+0x78>)
 800abd8:	4a05      	ldr	r2, [pc, #20]	; (800abf0 <prvInitialiseTaskLists+0x64>)
 800abda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800abdc:	4b0a      	ldr	r3, [pc, #40]	; (800ac08 <prvInitialiseTaskLists+0x7c>)
 800abde:	4a05      	ldr	r2, [pc, #20]	; (800abf4 <prvInitialiseTaskLists+0x68>)
 800abe0:	601a      	str	r2, [r3, #0]
}
 800abe2:	bf00      	nop
 800abe4:	3708      	adds	r7, #8
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	20001914 	.word	0x20001914
 800abf0:	20001d74 	.word	0x20001d74
 800abf4:	20001d88 	.word	0x20001d88
 800abf8:	20001da4 	.word	0x20001da4
 800abfc:	20001db8 	.word	0x20001db8
 800ac00:	20001dd0 	.word	0x20001dd0
 800ac04:	20001d9c 	.word	0x20001d9c
 800ac08:	20001da0 	.word	0x20001da0

0800ac0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac12:	e019      	b.n	800ac48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ac14:	f000 ffd6 	bl	800bbc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac18:	4b10      	ldr	r3, [pc, #64]	; (800ac5c <prvCheckTasksWaitingTermination+0x50>)
 800ac1a:	68db      	ldr	r3, [r3, #12]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	3304      	adds	r3, #4
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7fe fc25 	bl	8009474 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ac2a:	4b0d      	ldr	r3, [pc, #52]	; (800ac60 <prvCheckTasksWaitingTermination+0x54>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	3b01      	subs	r3, #1
 800ac30:	4a0b      	ldr	r2, [pc, #44]	; (800ac60 <prvCheckTasksWaitingTermination+0x54>)
 800ac32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ac34:	4b0b      	ldr	r3, [pc, #44]	; (800ac64 <prvCheckTasksWaitingTermination+0x58>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	3b01      	subs	r3, #1
 800ac3a:	4a0a      	ldr	r2, [pc, #40]	; (800ac64 <prvCheckTasksWaitingTermination+0x58>)
 800ac3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ac3e:	f000 fff1 	bl	800bc24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 f810 	bl	800ac68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac48:	4b06      	ldr	r3, [pc, #24]	; (800ac64 <prvCheckTasksWaitingTermination+0x58>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d1e1      	bne.n	800ac14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ac50:	bf00      	nop
 800ac52:	bf00      	nop
 800ac54:	3708      	adds	r7, #8
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	20001db8 	.word	0x20001db8
 800ac60:	20001de4 	.word	0x20001de4
 800ac64:	20001dcc 	.word	0x20001dcc

0800ac68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	3354      	adds	r3, #84	; 0x54
 800ac74:	4618      	mov	r0, r3
 800ac76:	f001 fd1b 	bl	800c6b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d108      	bne.n	800ac96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f001 f989 	bl	800bfa0 <vPortFree>
				vPortFree( pxTCB );
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f001 f986 	bl	800bfa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ac94:	e018      	b.n	800acc8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d103      	bne.n	800aca8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f001 f97d 	bl	800bfa0 <vPortFree>
	}
 800aca6:	e00f      	b.n	800acc8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800acae:	2b02      	cmp	r3, #2
 800acb0:	d00a      	beq.n	800acc8 <prvDeleteTCB+0x60>
	__asm volatile
 800acb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb6:	f383 8811 	msr	BASEPRI, r3
 800acba:	f3bf 8f6f 	isb	sy
 800acbe:	f3bf 8f4f 	dsb	sy
 800acc2:	60fb      	str	r3, [r7, #12]
}
 800acc4:	bf00      	nop
 800acc6:	e7fe      	b.n	800acc6 <prvDeleteTCB+0x5e>
	}
 800acc8:	bf00      	nop
 800acca:	3710      	adds	r7, #16
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acd6:	4b0c      	ldr	r3, [pc, #48]	; (800ad08 <prvResetNextTaskUnblockTime+0x38>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d104      	bne.n	800acea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ace0:	4b0a      	ldr	r3, [pc, #40]	; (800ad0c <prvResetNextTaskUnblockTime+0x3c>)
 800ace2:	f04f 32ff 	mov.w	r2, #4294967295
 800ace6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ace8:	e008      	b.n	800acfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acea:	4b07      	ldr	r3, [pc, #28]	; (800ad08 <prvResetNextTaskUnblockTime+0x38>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	68db      	ldr	r3, [r3, #12]
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	4a04      	ldr	r2, [pc, #16]	; (800ad0c <prvResetNextTaskUnblockTime+0x3c>)
 800acfa:	6013      	str	r3, [r2, #0]
}
 800acfc:	bf00      	nop
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr
 800ad08:	20001d9c 	.word	0x20001d9c
 800ad0c:	20001e04 	.word	0x20001e04

0800ad10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ad16:	4b0b      	ldr	r3, [pc, #44]	; (800ad44 <xTaskGetSchedulerState+0x34>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d102      	bne.n	800ad24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	607b      	str	r3, [r7, #4]
 800ad22:	e008      	b.n	800ad36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad24:	4b08      	ldr	r3, [pc, #32]	; (800ad48 <xTaskGetSchedulerState+0x38>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d102      	bne.n	800ad32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ad2c:	2302      	movs	r3, #2
 800ad2e:	607b      	str	r3, [r7, #4]
 800ad30:	e001      	b.n	800ad36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ad32:	2300      	movs	r3, #0
 800ad34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ad36:	687b      	ldr	r3, [r7, #4]
	}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	370c      	adds	r7, #12
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr
 800ad44:	20001df0 	.word	0x20001df0
 800ad48:	20001e0c 	.word	0x20001e0c

0800ad4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d056      	beq.n	800ae10 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ad62:	4b2e      	ldr	r3, [pc, #184]	; (800ae1c <xTaskPriorityDisinherit+0xd0>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	693a      	ldr	r2, [r7, #16]
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d00a      	beq.n	800ad82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ad6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad70:	f383 8811 	msr	BASEPRI, r3
 800ad74:	f3bf 8f6f 	isb	sy
 800ad78:	f3bf 8f4f 	dsb	sy
 800ad7c:	60fb      	str	r3, [r7, #12]
}
 800ad7e:	bf00      	nop
 800ad80:	e7fe      	b.n	800ad80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d10a      	bne.n	800ada0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ad8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8e:	f383 8811 	msr	BASEPRI, r3
 800ad92:	f3bf 8f6f 	isb	sy
 800ad96:	f3bf 8f4f 	dsb	sy
 800ad9a:	60bb      	str	r3, [r7, #8]
}
 800ad9c:	bf00      	nop
 800ad9e:	e7fe      	b.n	800ad9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ada4:	1e5a      	subs	r2, r3, #1
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d02c      	beq.n	800ae10 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d128      	bne.n	800ae10 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	3304      	adds	r3, #4
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7fe fb56 	bl	8009474 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade0:	4b0f      	ldr	r3, [pc, #60]	; (800ae20 <xTaskPriorityDisinherit+0xd4>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d903      	bls.n	800adf0 <xTaskPriorityDisinherit+0xa4>
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adec:	4a0c      	ldr	r2, [pc, #48]	; (800ae20 <xTaskPriorityDisinherit+0xd4>)
 800adee:	6013      	str	r3, [r2, #0]
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf4:	4613      	mov	r3, r2
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	4413      	add	r3, r2
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	4a09      	ldr	r2, [pc, #36]	; (800ae24 <xTaskPriorityDisinherit+0xd8>)
 800adfe:	441a      	add	r2, r3
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	3304      	adds	r3, #4
 800ae04:	4619      	mov	r1, r3
 800ae06:	4610      	mov	r0, r2
 800ae08:	f7fe fad7 	bl	80093ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ae10:	697b      	ldr	r3, [r7, #20]
	}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3718      	adds	r7, #24
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	20001910 	.word	0x20001910
 800ae20:	20001dec 	.word	0x20001dec
 800ae24:	20001914 	.word	0x20001914

0800ae28 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b086      	sub	sp, #24
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	607a      	str	r2, [r7, #4]
 800ae34:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ae36:	f000 fec5 	bl	800bbc4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ae3a:	4b29      	ldr	r3, [pc, #164]	; (800aee0 <xTaskNotifyWait+0xb8>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ae42:	b2db      	uxtb	r3, r3
 800ae44:	2b02      	cmp	r3, #2
 800ae46:	d01c      	beq.n	800ae82 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800ae48:	4b25      	ldr	r3, [pc, #148]	; (800aee0 <xTaskNotifyWait+0xb8>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	43d2      	mvns	r2, r2
 800ae54:	400a      	ands	r2, r1
 800ae56:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ae5a:	4b21      	ldr	r3, [pc, #132]	; (800aee0 <xTaskNotifyWait+0xb8>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2201      	movs	r2, #1
 800ae60:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00b      	beq.n	800ae82 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ae6a:	2101      	movs	r1, #1
 800ae6c:	6838      	ldr	r0, [r7, #0]
 800ae6e:	f000 f9dd 	bl	800b22c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ae72:	4b1c      	ldr	r3, [pc, #112]	; (800aee4 <xTaskNotifyWait+0xbc>)
 800ae74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae78:	601a      	str	r2, [r3, #0]
 800ae7a:	f3bf 8f4f 	dsb	sy
 800ae7e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ae82:	f000 fecf 	bl	800bc24 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ae86:	f000 fe9d 	bl	800bbc4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d005      	beq.n	800ae9c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800ae90:	4b13      	ldr	r3, [pc, #76]	; (800aee0 <xTaskNotifyWait+0xb8>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ae9c:	4b10      	ldr	r3, [pc, #64]	; (800aee0 <xTaskNotifyWait+0xb8>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	d002      	beq.n	800aeb0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	617b      	str	r3, [r7, #20]
 800aeae:	e00a      	b.n	800aec6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800aeb0:	4b0b      	ldr	r3, [pc, #44]	; (800aee0 <xTaskNotifyWait+0xb8>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800aeb8:	68ba      	ldr	r2, [r7, #8]
 800aeba:	43d2      	mvns	r2, r2
 800aebc:	400a      	ands	r2, r1
 800aebe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800aec2:	2301      	movs	r3, #1
 800aec4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aec6:	4b06      	ldr	r3, [pc, #24]	; (800aee0 <xTaskNotifyWait+0xb8>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2200      	movs	r2, #0
 800aecc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800aed0:	f000 fea8 	bl	800bc24 <vPortExitCritical>

		return xReturn;
 800aed4:	697b      	ldr	r3, [r7, #20]
	}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3718      	adds	r7, #24
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	20001910 	.word	0x20001910
 800aee4:	e000ed04 	.word	0xe000ed04

0800aee8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b08a      	sub	sp, #40	; 0x28
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	603b      	str	r3, [r7, #0]
 800aef4:	4613      	mov	r3, r2
 800aef6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800aef8:	2301      	movs	r3, #1
 800aefa:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d10a      	bne.n	800af18 <xTaskGenericNotify+0x30>
	__asm volatile
 800af02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af06:	f383 8811 	msr	BASEPRI, r3
 800af0a:	f3bf 8f6f 	isb	sy
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	61bb      	str	r3, [r7, #24]
}
 800af14:	bf00      	nop
 800af16:	e7fe      	b.n	800af16 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800af1c:	f000 fe52 	bl	800bbc4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d004      	beq.n	800af30 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800af26:	6a3b      	ldr	r3, [r7, #32]
 800af28:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800af30:	6a3b      	ldr	r3, [r7, #32]
 800af32:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800af36:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800af38:	6a3b      	ldr	r3, [r7, #32]
 800af3a:	2202      	movs	r2, #2
 800af3c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800af40:	79fb      	ldrb	r3, [r7, #7]
 800af42:	2b04      	cmp	r3, #4
 800af44:	d82d      	bhi.n	800afa2 <xTaskGenericNotify+0xba>
 800af46:	a201      	add	r2, pc, #4	; (adr r2, 800af4c <xTaskGenericNotify+0x64>)
 800af48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af4c:	0800afc5 	.word	0x0800afc5
 800af50:	0800af61 	.word	0x0800af61
 800af54:	0800af73 	.word	0x0800af73
 800af58:	0800af83 	.word	0x0800af83
 800af5c:	0800af8d 	.word	0x0800af8d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800af60:	6a3b      	ldr	r3, [r7, #32]
 800af62:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	431a      	orrs	r2, r3
 800af6a:	6a3b      	ldr	r3, [r7, #32]
 800af6c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800af70:	e02b      	b.n	800afca <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800af72:	6a3b      	ldr	r3, [r7, #32]
 800af74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800af78:	1c5a      	adds	r2, r3, #1
 800af7a:	6a3b      	ldr	r3, [r7, #32]
 800af7c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800af80:	e023      	b.n	800afca <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800af82:	6a3b      	ldr	r3, [r7, #32]
 800af84:	68ba      	ldr	r2, [r7, #8]
 800af86:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800af8a:	e01e      	b.n	800afca <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800af8c:	7ffb      	ldrb	r3, [r7, #31]
 800af8e:	2b02      	cmp	r3, #2
 800af90:	d004      	beq.n	800af9c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800af92:	6a3b      	ldr	r3, [r7, #32]
 800af94:	68ba      	ldr	r2, [r7, #8]
 800af96:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800af9a:	e016      	b.n	800afca <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800af9c:	2300      	movs	r3, #0
 800af9e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800afa0:	e013      	b.n	800afca <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800afa2:	6a3b      	ldr	r3, [r7, #32]
 800afa4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800afa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afac:	d00c      	beq.n	800afc8 <xTaskGenericNotify+0xe0>
	__asm volatile
 800afae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb2:	f383 8811 	msr	BASEPRI, r3
 800afb6:	f3bf 8f6f 	isb	sy
 800afba:	f3bf 8f4f 	dsb	sy
 800afbe:	617b      	str	r3, [r7, #20]
}
 800afc0:	bf00      	nop
 800afc2:	e7fe      	b.n	800afc2 <xTaskGenericNotify+0xda>
					break;
 800afc4:	bf00      	nop
 800afc6:	e000      	b.n	800afca <xTaskGenericNotify+0xe2>

					break;
 800afc8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800afca:	7ffb      	ldrb	r3, [r7, #31]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d13a      	bne.n	800b046 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afd0:	6a3b      	ldr	r3, [r7, #32]
 800afd2:	3304      	adds	r3, #4
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7fe fa4d 	bl	8009474 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800afda:	6a3b      	ldr	r3, [r7, #32]
 800afdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afde:	4b1d      	ldr	r3, [pc, #116]	; (800b054 <xTaskGenericNotify+0x16c>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d903      	bls.n	800afee <xTaskGenericNotify+0x106>
 800afe6:	6a3b      	ldr	r3, [r7, #32]
 800afe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afea:	4a1a      	ldr	r2, [pc, #104]	; (800b054 <xTaskGenericNotify+0x16c>)
 800afec:	6013      	str	r3, [r2, #0]
 800afee:	6a3b      	ldr	r3, [r7, #32]
 800aff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aff2:	4613      	mov	r3, r2
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	4413      	add	r3, r2
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	4a17      	ldr	r2, [pc, #92]	; (800b058 <xTaskGenericNotify+0x170>)
 800affc:	441a      	add	r2, r3
 800affe:	6a3b      	ldr	r3, [r7, #32]
 800b000:	3304      	adds	r3, #4
 800b002:	4619      	mov	r1, r3
 800b004:	4610      	mov	r0, r2
 800b006:	f7fe f9d8 	bl	80093ba <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b00a:	6a3b      	ldr	r3, [r7, #32]
 800b00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d00a      	beq.n	800b028 <xTaskGenericNotify+0x140>
	__asm volatile
 800b012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b016:	f383 8811 	msr	BASEPRI, r3
 800b01a:	f3bf 8f6f 	isb	sy
 800b01e:	f3bf 8f4f 	dsb	sy
 800b022:	613b      	str	r3, [r7, #16]
}
 800b024:	bf00      	nop
 800b026:	e7fe      	b.n	800b026 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b028:	6a3b      	ldr	r3, [r7, #32]
 800b02a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b02c:	4b0b      	ldr	r3, [pc, #44]	; (800b05c <xTaskGenericNotify+0x174>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b032:	429a      	cmp	r2, r3
 800b034:	d907      	bls.n	800b046 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b036:	4b0a      	ldr	r3, [pc, #40]	; (800b060 <xTaskGenericNotify+0x178>)
 800b038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b03c:	601a      	str	r2, [r3, #0]
 800b03e:	f3bf 8f4f 	dsb	sy
 800b042:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b046:	f000 fded 	bl	800bc24 <vPortExitCritical>

		return xReturn;
 800b04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3728      	adds	r7, #40	; 0x28
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}
 800b054:	20001dec 	.word	0x20001dec
 800b058:	20001914 	.word	0x20001914
 800b05c:	20001910 	.word	0x20001910
 800b060:	e000ed04 	.word	0xe000ed04

0800b064 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b064:	b580      	push	{r7, lr}
 800b066:	b08e      	sub	sp, #56	; 0x38
 800b068:	af00      	add	r7, sp, #0
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	603b      	str	r3, [r7, #0]
 800b070:	4613      	mov	r3, r2
 800b072:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b074:	2301      	movs	r3, #1
 800b076:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d10a      	bne.n	800b094 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800b07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b082:	f383 8811 	msr	BASEPRI, r3
 800b086:	f3bf 8f6f 	isb	sy
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b090:	bf00      	nop
 800b092:	e7fe      	b.n	800b092 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b094:	f000 fe78 	bl	800bd88 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800b09c:	f3ef 8211 	mrs	r2, BASEPRI
 800b0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a4:	f383 8811 	msr	BASEPRI, r3
 800b0a8:	f3bf 8f6f 	isb	sy
 800b0ac:	f3bf 8f4f 	dsb	sy
 800b0b0:	623a      	str	r2, [r7, #32]
 800b0b2:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800b0b4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d004      	beq.n	800b0c8 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ca:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b0ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d4:	2202      	movs	r2, #2
 800b0d6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800b0da:	79fb      	ldrb	r3, [r7, #7]
 800b0dc:	2b04      	cmp	r3, #4
 800b0de:	d82f      	bhi.n	800b140 <xTaskGenericNotifyFromISR+0xdc>
 800b0e0:	a201      	add	r2, pc, #4	; (adr r2, 800b0e8 <xTaskGenericNotifyFromISR+0x84>)
 800b0e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e6:	bf00      	nop
 800b0e8:	0800b163 	.word	0x0800b163
 800b0ec:	0800b0fd 	.word	0x0800b0fd
 800b0f0:	0800b10f 	.word	0x0800b10f
 800b0f4:	0800b11f 	.word	0x0800b11f
 800b0f8:	0800b129 	.word	0x0800b129
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fe:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	431a      	orrs	r2, r3
 800b106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b108:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b10c:	e02c      	b.n	800b168 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b110:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b114:	1c5a      	adds	r2, r3, #1
 800b116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b118:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b11c:	e024      	b.n	800b168 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b120:	68ba      	ldr	r2, [r7, #8]
 800b122:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b126:	e01f      	b.n	800b168 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b128:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b12c:	2b02      	cmp	r3, #2
 800b12e:	d004      	beq.n	800b13a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b132:	68ba      	ldr	r2, [r7, #8]
 800b134:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b138:	e016      	b.n	800b168 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800b13a:	2300      	movs	r3, #0
 800b13c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800b13e:	e013      	b.n	800b168 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b142:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b14a:	d00c      	beq.n	800b166 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800b14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b150:	f383 8811 	msr	BASEPRI, r3
 800b154:	f3bf 8f6f 	isb	sy
 800b158:	f3bf 8f4f 	dsb	sy
 800b15c:	61bb      	str	r3, [r7, #24]
}
 800b15e:	bf00      	nop
 800b160:	e7fe      	b.n	800b160 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800b162:	bf00      	nop
 800b164:	e000      	b.n	800b168 <xTaskGenericNotifyFromISR+0x104>
					break;
 800b166:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b168:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d146      	bne.n	800b1fe <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b174:	2b00      	cmp	r3, #0
 800b176:	d00a      	beq.n	800b18e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800b178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17c:	f383 8811 	msr	BASEPRI, r3
 800b180:	f3bf 8f6f 	isb	sy
 800b184:	f3bf 8f4f 	dsb	sy
 800b188:	617b      	str	r3, [r7, #20]
}
 800b18a:	bf00      	nop
 800b18c:	e7fe      	b.n	800b18c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b18e:	4b21      	ldr	r3, [pc, #132]	; (800b214 <xTaskGenericNotifyFromISR+0x1b0>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d11d      	bne.n	800b1d2 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b198:	3304      	adds	r3, #4
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fe f96a 	bl	8009474 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a4:	4b1c      	ldr	r3, [pc, #112]	; (800b218 <xTaskGenericNotifyFromISR+0x1b4>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d903      	bls.n	800b1b4 <xTaskGenericNotifyFromISR+0x150>
 800b1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b0:	4a19      	ldr	r2, [pc, #100]	; (800b218 <xTaskGenericNotifyFromISR+0x1b4>)
 800b1b2:	6013      	str	r3, [r2, #0]
 800b1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	4413      	add	r3, r2
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	4a16      	ldr	r2, [pc, #88]	; (800b21c <xTaskGenericNotifyFromISR+0x1b8>)
 800b1c2:	441a      	add	r2, r3
 800b1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c6:	3304      	adds	r3, #4
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	4610      	mov	r0, r2
 800b1cc:	f7fe f8f5 	bl	80093ba <vListInsertEnd>
 800b1d0:	e005      	b.n	800b1de <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d4:	3318      	adds	r3, #24
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	4811      	ldr	r0, [pc, #68]	; (800b220 <xTaskGenericNotifyFromISR+0x1bc>)
 800b1da:	f7fe f8ee 	bl	80093ba <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1e2:	4b10      	ldr	r3, [pc, #64]	; (800b224 <xTaskGenericNotifyFromISR+0x1c0>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d908      	bls.n	800b1fe <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b1ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d002      	beq.n	800b1f8 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b1f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800b1f8:	4b0b      	ldr	r3, [pc, #44]	; (800b228 <xTaskGenericNotifyFromISR+0x1c4>)
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	601a      	str	r2, [r3, #0]
 800b1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b200:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	f383 8811 	msr	BASEPRI, r3
}
 800b208:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b20a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3738      	adds	r7, #56	; 0x38
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	20001e0c 	.word	0x20001e0c
 800b218:	20001dec 	.word	0x20001dec
 800b21c:	20001914 	.word	0x20001914
 800b220:	20001da4 	.word	0x20001da4
 800b224:	20001910 	.word	0x20001910
 800b228:	20001df8 	.word	0x20001df8

0800b22c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b084      	sub	sp, #16
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b236:	4b21      	ldr	r3, [pc, #132]	; (800b2bc <prvAddCurrentTaskToDelayedList+0x90>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b23c:	4b20      	ldr	r3, [pc, #128]	; (800b2c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	3304      	adds	r3, #4
 800b242:	4618      	mov	r0, r3
 800b244:	f7fe f916 	bl	8009474 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b24e:	d10a      	bne.n	800b266 <prvAddCurrentTaskToDelayedList+0x3a>
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d007      	beq.n	800b266 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b256:	4b1a      	ldr	r3, [pc, #104]	; (800b2c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	3304      	adds	r3, #4
 800b25c:	4619      	mov	r1, r3
 800b25e:	4819      	ldr	r0, [pc, #100]	; (800b2c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800b260:	f7fe f8ab 	bl	80093ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b264:	e026      	b.n	800b2b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b266:	68fa      	ldr	r2, [r7, #12]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	4413      	add	r3, r2
 800b26c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b26e:	4b14      	ldr	r3, [pc, #80]	; (800b2c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	68ba      	ldr	r2, [r7, #8]
 800b274:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d209      	bcs.n	800b292 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b27e:	4b12      	ldr	r3, [pc, #72]	; (800b2c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	4b0f      	ldr	r3, [pc, #60]	; (800b2c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	3304      	adds	r3, #4
 800b288:	4619      	mov	r1, r3
 800b28a:	4610      	mov	r0, r2
 800b28c:	f7fe f8b9 	bl	8009402 <vListInsert>
}
 800b290:	e010      	b.n	800b2b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b292:	4b0e      	ldr	r3, [pc, #56]	; (800b2cc <prvAddCurrentTaskToDelayedList+0xa0>)
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	4b0a      	ldr	r3, [pc, #40]	; (800b2c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	3304      	adds	r3, #4
 800b29c:	4619      	mov	r1, r3
 800b29e:	4610      	mov	r0, r2
 800b2a0:	f7fe f8af 	bl	8009402 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b2a4:	4b0a      	ldr	r3, [pc, #40]	; (800b2d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	68ba      	ldr	r2, [r7, #8]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d202      	bcs.n	800b2b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b2ae:	4a08      	ldr	r2, [pc, #32]	; (800b2d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	6013      	str	r3, [r2, #0]
}
 800b2b4:	bf00      	nop
 800b2b6:	3710      	adds	r7, #16
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	20001de8 	.word	0x20001de8
 800b2c0:	20001910 	.word	0x20001910
 800b2c4:	20001dd0 	.word	0x20001dd0
 800b2c8:	20001da0 	.word	0x20001da0
 800b2cc:	20001d9c 	.word	0x20001d9c
 800b2d0:	20001e04 	.word	0x20001e04

0800b2d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b08a      	sub	sp, #40	; 0x28
 800b2d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b2de:	f000 fb07 	bl	800b8f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b2e2:	4b1c      	ldr	r3, [pc, #112]	; (800b354 <xTimerCreateTimerTask+0x80>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d021      	beq.n	800b32e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b2f2:	1d3a      	adds	r2, r7, #4
 800b2f4:	f107 0108 	add.w	r1, r7, #8
 800b2f8:	f107 030c 	add.w	r3, r7, #12
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7fe f815 	bl	800932c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b302:	6879      	ldr	r1, [r7, #4]
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	68fa      	ldr	r2, [r7, #12]
 800b308:	9202      	str	r2, [sp, #8]
 800b30a:	9301      	str	r3, [sp, #4]
 800b30c:	2302      	movs	r3, #2
 800b30e:	9300      	str	r3, [sp, #0]
 800b310:	2300      	movs	r3, #0
 800b312:	460a      	mov	r2, r1
 800b314:	4910      	ldr	r1, [pc, #64]	; (800b358 <xTimerCreateTimerTask+0x84>)
 800b316:	4811      	ldr	r0, [pc, #68]	; (800b35c <xTimerCreateTimerTask+0x88>)
 800b318:	f7fe fea0 	bl	800a05c <xTaskCreateStatic>
 800b31c:	4603      	mov	r3, r0
 800b31e:	4a10      	ldr	r2, [pc, #64]	; (800b360 <xTimerCreateTimerTask+0x8c>)
 800b320:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b322:	4b0f      	ldr	r3, [pc, #60]	; (800b360 <xTimerCreateTimerTask+0x8c>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d001      	beq.n	800b32e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b32a:	2301      	movs	r3, #1
 800b32c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d10a      	bne.n	800b34a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b338:	f383 8811 	msr	BASEPRI, r3
 800b33c:	f3bf 8f6f 	isb	sy
 800b340:	f3bf 8f4f 	dsb	sy
 800b344:	613b      	str	r3, [r7, #16]
}
 800b346:	bf00      	nop
 800b348:	e7fe      	b.n	800b348 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b34a:	697b      	ldr	r3, [r7, #20]
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3718      	adds	r7, #24
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	20001e40 	.word	0x20001e40
 800b358:	0800e034 	.word	0x0800e034
 800b35c:	0800b499 	.word	0x0800b499
 800b360:	20001e44 	.word	0x20001e44

0800b364 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b08a      	sub	sp, #40	; 0x28
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	607a      	str	r2, [r7, #4]
 800b370:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b372:	2300      	movs	r3, #0
 800b374:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d10a      	bne.n	800b392 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b380:	f383 8811 	msr	BASEPRI, r3
 800b384:	f3bf 8f6f 	isb	sy
 800b388:	f3bf 8f4f 	dsb	sy
 800b38c:	623b      	str	r3, [r7, #32]
}
 800b38e:	bf00      	nop
 800b390:	e7fe      	b.n	800b390 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b392:	4b1a      	ldr	r3, [pc, #104]	; (800b3fc <xTimerGenericCommand+0x98>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d02a      	beq.n	800b3f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	2b05      	cmp	r3, #5
 800b3aa:	dc18      	bgt.n	800b3de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b3ac:	f7ff fcb0 	bl	800ad10 <xTaskGetSchedulerState>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b02      	cmp	r3, #2
 800b3b4:	d109      	bne.n	800b3ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b3b6:	4b11      	ldr	r3, [pc, #68]	; (800b3fc <xTimerGenericCommand+0x98>)
 800b3b8:	6818      	ldr	r0, [r3, #0]
 800b3ba:	f107 0110 	add.w	r1, r7, #16
 800b3be:	2300      	movs	r3, #0
 800b3c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3c2:	f7fe f9bf 	bl	8009744 <xQueueGenericSend>
 800b3c6:	6278      	str	r0, [r7, #36]	; 0x24
 800b3c8:	e012      	b.n	800b3f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b3ca:	4b0c      	ldr	r3, [pc, #48]	; (800b3fc <xTimerGenericCommand+0x98>)
 800b3cc:	6818      	ldr	r0, [r3, #0]
 800b3ce:	f107 0110 	add.w	r1, r7, #16
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	f7fe f9b5 	bl	8009744 <xQueueGenericSend>
 800b3da:	6278      	str	r0, [r7, #36]	; 0x24
 800b3dc:	e008      	b.n	800b3f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b3de:	4b07      	ldr	r3, [pc, #28]	; (800b3fc <xTimerGenericCommand+0x98>)
 800b3e0:	6818      	ldr	r0, [r3, #0]
 800b3e2:	f107 0110 	add.w	r1, r7, #16
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	683a      	ldr	r2, [r7, #0]
 800b3ea:	f7fe faa9 	bl	8009940 <xQueueGenericSendFromISR>
 800b3ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3728      	adds	r7, #40	; 0x28
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	20001e40 	.word	0x20001e40

0800b400 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b088      	sub	sp, #32
 800b404:	af02      	add	r7, sp, #8
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b40a:	4b22      	ldr	r3, [pc, #136]	; (800b494 <prvProcessExpiredTimer+0x94>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	68db      	ldr	r3, [r3, #12]
 800b412:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	3304      	adds	r3, #4
 800b418:	4618      	mov	r0, r3
 800b41a:	f7fe f82b 	bl	8009474 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b424:	f003 0304 	and.w	r3, r3, #4
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d022      	beq.n	800b472 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	699a      	ldr	r2, [r3, #24]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	18d1      	adds	r1, r2, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	683a      	ldr	r2, [r7, #0]
 800b438:	6978      	ldr	r0, [r7, #20]
 800b43a:	f000 f8d1 	bl	800b5e0 <prvInsertTimerInActiveList>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d01f      	beq.n	800b484 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b444:	2300      	movs	r3, #0
 800b446:	9300      	str	r3, [sp, #0]
 800b448:	2300      	movs	r3, #0
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	2100      	movs	r1, #0
 800b44e:	6978      	ldr	r0, [r7, #20]
 800b450:	f7ff ff88 	bl	800b364 <xTimerGenericCommand>
 800b454:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d113      	bne.n	800b484 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b460:	f383 8811 	msr	BASEPRI, r3
 800b464:	f3bf 8f6f 	isb	sy
 800b468:	f3bf 8f4f 	dsb	sy
 800b46c:	60fb      	str	r3, [r7, #12]
}
 800b46e:	bf00      	nop
 800b470:	e7fe      	b.n	800b470 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b478:	f023 0301 	bic.w	r3, r3, #1
 800b47c:	b2da      	uxtb	r2, r3
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	6a1b      	ldr	r3, [r3, #32]
 800b488:	6978      	ldr	r0, [r7, #20]
 800b48a:	4798      	blx	r3
}
 800b48c:	bf00      	nop
 800b48e:	3718      	adds	r7, #24
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}
 800b494:	20001e38 	.word	0x20001e38

0800b498 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b084      	sub	sp, #16
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b4a0:	f107 0308 	add.w	r3, r7, #8
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f000 f857 	bl	800b558 <prvGetNextExpireTime>
 800b4aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f000 f803 	bl	800b4bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b4b6:	f000 f8d5 	bl	800b664 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b4ba:	e7f1      	b.n	800b4a0 <prvTimerTask+0x8>

0800b4bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b4c6:	f7ff f825 	bl	800a514 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b4ca:	f107 0308 	add.w	r3, r7, #8
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f000 f866 	bl	800b5a0 <prvSampleTimeNow>
 800b4d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d130      	bne.n	800b53e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d10a      	bne.n	800b4f8 <prvProcessTimerOrBlockTask+0x3c>
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d806      	bhi.n	800b4f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b4ea:	f7ff f821 	bl	800a530 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b4ee:	68f9      	ldr	r1, [r7, #12]
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f7ff ff85 	bl	800b400 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b4f6:	e024      	b.n	800b542 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d008      	beq.n	800b510 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b4fe:	4b13      	ldr	r3, [pc, #76]	; (800b54c <prvProcessTimerOrBlockTask+0x90>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d101      	bne.n	800b50c <prvProcessTimerOrBlockTask+0x50>
 800b508:	2301      	movs	r3, #1
 800b50a:	e000      	b.n	800b50e <prvProcessTimerOrBlockTask+0x52>
 800b50c:	2300      	movs	r3, #0
 800b50e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b510:	4b0f      	ldr	r3, [pc, #60]	; (800b550 <prvProcessTimerOrBlockTask+0x94>)
 800b512:	6818      	ldr	r0, [r3, #0]
 800b514:	687a      	ldr	r2, [r7, #4]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	1ad3      	subs	r3, r2, r3
 800b51a:	683a      	ldr	r2, [r7, #0]
 800b51c:	4619      	mov	r1, r3
 800b51e:	f7fe fd69 	bl	8009ff4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b522:	f7ff f805 	bl	800a530 <xTaskResumeAll>
 800b526:	4603      	mov	r3, r0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d10a      	bne.n	800b542 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b52c:	4b09      	ldr	r3, [pc, #36]	; (800b554 <prvProcessTimerOrBlockTask+0x98>)
 800b52e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b532:	601a      	str	r2, [r3, #0]
 800b534:	f3bf 8f4f 	dsb	sy
 800b538:	f3bf 8f6f 	isb	sy
}
 800b53c:	e001      	b.n	800b542 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b53e:	f7fe fff7 	bl	800a530 <xTaskResumeAll>
}
 800b542:	bf00      	nop
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	20001e3c 	.word	0x20001e3c
 800b550:	20001e40 	.word	0x20001e40
 800b554:	e000ed04 	.word	0xe000ed04

0800b558 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b560:	4b0e      	ldr	r3, [pc, #56]	; (800b59c <prvGetNextExpireTime+0x44>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d101      	bne.n	800b56e <prvGetNextExpireTime+0x16>
 800b56a:	2201      	movs	r2, #1
 800b56c:	e000      	b.n	800b570 <prvGetNextExpireTime+0x18>
 800b56e:	2200      	movs	r2, #0
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d105      	bne.n	800b588 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b57c:	4b07      	ldr	r3, [pc, #28]	; (800b59c <prvGetNextExpireTime+0x44>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	68db      	ldr	r3, [r3, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	60fb      	str	r3, [r7, #12]
 800b586:	e001      	b.n	800b58c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b588:	2300      	movs	r3, #0
 800b58a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b58c:	68fb      	ldr	r3, [r7, #12]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3714      	adds	r7, #20
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	20001e38 	.word	0x20001e38

0800b5a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b5a8:	f7ff f860 	bl	800a66c <xTaskGetTickCount>
 800b5ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b5ae:	4b0b      	ldr	r3, [pc, #44]	; (800b5dc <prvSampleTimeNow+0x3c>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	68fa      	ldr	r2, [r7, #12]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d205      	bcs.n	800b5c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b5b8:	f000 f936 	bl	800b828 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2201      	movs	r2, #1
 800b5c0:	601a      	str	r2, [r3, #0]
 800b5c2:	e002      	b.n	800b5ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b5ca:	4a04      	ldr	r2, [pc, #16]	; (800b5dc <prvSampleTimeNow+0x3c>)
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3710      	adds	r7, #16
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	20001e48 	.word	0x20001e48

0800b5e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b086      	sub	sp, #24
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	60b9      	str	r1, [r7, #8]
 800b5ea:	607a      	str	r2, [r7, #4]
 800b5ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	68ba      	ldr	r2, [r7, #8]
 800b5f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	68fa      	ldr	r2, [r7, #12]
 800b5fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b5fe:	68ba      	ldr	r2, [r7, #8]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	429a      	cmp	r2, r3
 800b604:	d812      	bhi.n	800b62c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	1ad2      	subs	r2, r2, r3
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	699b      	ldr	r3, [r3, #24]
 800b610:	429a      	cmp	r2, r3
 800b612:	d302      	bcc.n	800b61a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b614:	2301      	movs	r3, #1
 800b616:	617b      	str	r3, [r7, #20]
 800b618:	e01b      	b.n	800b652 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b61a:	4b10      	ldr	r3, [pc, #64]	; (800b65c <prvInsertTimerInActiveList+0x7c>)
 800b61c:	681a      	ldr	r2, [r3, #0]
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	3304      	adds	r3, #4
 800b622:	4619      	mov	r1, r3
 800b624:	4610      	mov	r0, r2
 800b626:	f7fd feec 	bl	8009402 <vListInsert>
 800b62a:	e012      	b.n	800b652 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b62c:	687a      	ldr	r2, [r7, #4]
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	429a      	cmp	r2, r3
 800b632:	d206      	bcs.n	800b642 <prvInsertTimerInActiveList+0x62>
 800b634:	68ba      	ldr	r2, [r7, #8]
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	429a      	cmp	r2, r3
 800b63a:	d302      	bcc.n	800b642 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b63c:	2301      	movs	r3, #1
 800b63e:	617b      	str	r3, [r7, #20]
 800b640:	e007      	b.n	800b652 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b642:	4b07      	ldr	r3, [pc, #28]	; (800b660 <prvInsertTimerInActiveList+0x80>)
 800b644:	681a      	ldr	r2, [r3, #0]
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	3304      	adds	r3, #4
 800b64a:	4619      	mov	r1, r3
 800b64c:	4610      	mov	r0, r2
 800b64e:	f7fd fed8 	bl	8009402 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b652:	697b      	ldr	r3, [r7, #20]
}
 800b654:	4618      	mov	r0, r3
 800b656:	3718      	adds	r7, #24
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	20001e3c 	.word	0x20001e3c
 800b660:	20001e38 	.word	0x20001e38

0800b664 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b08e      	sub	sp, #56	; 0x38
 800b668:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b66a:	e0ca      	b.n	800b802 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	da18      	bge.n	800b6a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b672:	1d3b      	adds	r3, r7, #4
 800b674:	3304      	adds	r3, #4
 800b676:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d10a      	bne.n	800b694 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b682:	f383 8811 	msr	BASEPRI, r3
 800b686:	f3bf 8f6f 	isb	sy
 800b68a:	f3bf 8f4f 	dsb	sy
 800b68e:	61fb      	str	r3, [r7, #28]
}
 800b690:	bf00      	nop
 800b692:	e7fe      	b.n	800b692 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b69a:	6850      	ldr	r0, [r2, #4]
 800b69c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b69e:	6892      	ldr	r2, [r2, #8]
 800b6a0:	4611      	mov	r1, r2
 800b6a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	f2c0 80aa 	blt.w	800b800 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b2:	695b      	ldr	r3, [r3, #20]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d004      	beq.n	800b6c2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ba:	3304      	adds	r3, #4
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7fd fed9 	bl	8009474 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b6c2:	463b      	mov	r3, r7
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7ff ff6b 	bl	800b5a0 <prvSampleTimeNow>
 800b6ca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2b09      	cmp	r3, #9
 800b6d0:	f200 8097 	bhi.w	800b802 <prvProcessReceivedCommands+0x19e>
 800b6d4:	a201      	add	r2, pc, #4	; (adr r2, 800b6dc <prvProcessReceivedCommands+0x78>)
 800b6d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6da:	bf00      	nop
 800b6dc:	0800b705 	.word	0x0800b705
 800b6e0:	0800b705 	.word	0x0800b705
 800b6e4:	0800b705 	.word	0x0800b705
 800b6e8:	0800b779 	.word	0x0800b779
 800b6ec:	0800b78d 	.word	0x0800b78d
 800b6f0:	0800b7d7 	.word	0x0800b7d7
 800b6f4:	0800b705 	.word	0x0800b705
 800b6f8:	0800b705 	.word	0x0800b705
 800b6fc:	0800b779 	.word	0x0800b779
 800b700:	0800b78d 	.word	0x0800b78d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b70a:	f043 0301 	orr.w	r3, r3, #1
 800b70e:	b2da      	uxtb	r2, r3
 800b710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b716:	68ba      	ldr	r2, [r7, #8]
 800b718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b71a:	699b      	ldr	r3, [r3, #24]
 800b71c:	18d1      	adds	r1, r2, r3
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b724:	f7ff ff5c 	bl	800b5e0 <prvInsertTimerInActiveList>
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d069      	beq.n	800b802 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b730:	6a1b      	ldr	r3, [r3, #32]
 800b732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b734:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b738:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b73c:	f003 0304 	and.w	r3, r3, #4
 800b740:	2b00      	cmp	r3, #0
 800b742:	d05e      	beq.n	800b802 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b744:	68ba      	ldr	r2, [r7, #8]
 800b746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b748:	699b      	ldr	r3, [r3, #24]
 800b74a:	441a      	add	r2, r3
 800b74c:	2300      	movs	r3, #0
 800b74e:	9300      	str	r3, [sp, #0]
 800b750:	2300      	movs	r3, #0
 800b752:	2100      	movs	r1, #0
 800b754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b756:	f7ff fe05 	bl	800b364 <xTimerGenericCommand>
 800b75a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b75c:	6a3b      	ldr	r3, [r7, #32]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d14f      	bne.n	800b802 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b766:	f383 8811 	msr	BASEPRI, r3
 800b76a:	f3bf 8f6f 	isb	sy
 800b76e:	f3bf 8f4f 	dsb	sy
 800b772:	61bb      	str	r3, [r7, #24]
}
 800b774:	bf00      	nop
 800b776:	e7fe      	b.n	800b776 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b77e:	f023 0301 	bic.w	r3, r3, #1
 800b782:	b2da      	uxtb	r2, r3
 800b784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b786:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b78a:	e03a      	b.n	800b802 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b792:	f043 0301 	orr.w	r3, r3, #1
 800b796:	b2da      	uxtb	r2, r3
 800b798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b79e:	68ba      	ldr	r2, [r7, #8]
 800b7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a6:	699b      	ldr	r3, [r3, #24]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d10a      	bne.n	800b7c2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b0:	f383 8811 	msr	BASEPRI, r3
 800b7b4:	f3bf 8f6f 	isb	sy
 800b7b8:	f3bf 8f4f 	dsb	sy
 800b7bc:	617b      	str	r3, [r7, #20]
}
 800b7be:	bf00      	nop
 800b7c0:	e7fe      	b.n	800b7c0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c4:	699a      	ldr	r2, [r3, #24]
 800b7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c8:	18d1      	adds	r1, r2, r3
 800b7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7d0:	f7ff ff06 	bl	800b5e0 <prvInsertTimerInActiveList>
					break;
 800b7d4:	e015      	b.n	800b802 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7dc:	f003 0302 	and.w	r3, r3, #2
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d103      	bne.n	800b7ec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b7e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7e6:	f000 fbdb 	bl	800bfa0 <vPortFree>
 800b7ea:	e00a      	b.n	800b802 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7f2:	f023 0301 	bic.w	r3, r3, #1
 800b7f6:	b2da      	uxtb	r2, r3
 800b7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b7fe:	e000      	b.n	800b802 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b800:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b802:	4b08      	ldr	r3, [pc, #32]	; (800b824 <prvProcessReceivedCommands+0x1c0>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	1d39      	adds	r1, r7, #4
 800b808:	2200      	movs	r2, #0
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7fe f934 	bl	8009a78 <xQueueReceive>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	f47f af2a 	bne.w	800b66c <prvProcessReceivedCommands+0x8>
	}
}
 800b818:	bf00      	nop
 800b81a:	bf00      	nop
 800b81c:	3730      	adds	r7, #48	; 0x30
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	20001e40 	.word	0x20001e40

0800b828 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b088      	sub	sp, #32
 800b82c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b82e:	e048      	b.n	800b8c2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b830:	4b2d      	ldr	r3, [pc, #180]	; (800b8e8 <prvSwitchTimerLists+0xc0>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	68db      	ldr	r3, [r3, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b83a:	4b2b      	ldr	r3, [pc, #172]	; (800b8e8 <prvSwitchTimerLists+0xc0>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	68db      	ldr	r3, [r3, #12]
 800b842:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	3304      	adds	r3, #4
 800b848:	4618      	mov	r0, r3
 800b84a:	f7fd fe13 	bl	8009474 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	6a1b      	ldr	r3, [r3, #32]
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b85c:	f003 0304 	and.w	r3, r3, #4
 800b860:	2b00      	cmp	r3, #0
 800b862:	d02e      	beq.n	800b8c2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	699b      	ldr	r3, [r3, #24]
 800b868:	693a      	ldr	r2, [r7, #16]
 800b86a:	4413      	add	r3, r2
 800b86c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b86e:	68ba      	ldr	r2, [r7, #8]
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	429a      	cmp	r2, r3
 800b874:	d90e      	bls.n	800b894 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	68ba      	ldr	r2, [r7, #8]
 800b87a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	68fa      	ldr	r2, [r7, #12]
 800b880:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b882:	4b19      	ldr	r3, [pc, #100]	; (800b8e8 <prvSwitchTimerLists+0xc0>)
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	3304      	adds	r3, #4
 800b88a:	4619      	mov	r1, r3
 800b88c:	4610      	mov	r0, r2
 800b88e:	f7fd fdb8 	bl	8009402 <vListInsert>
 800b892:	e016      	b.n	800b8c2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b894:	2300      	movs	r3, #0
 800b896:	9300      	str	r3, [sp, #0]
 800b898:	2300      	movs	r3, #0
 800b89a:	693a      	ldr	r2, [r7, #16]
 800b89c:	2100      	movs	r1, #0
 800b89e:	68f8      	ldr	r0, [r7, #12]
 800b8a0:	f7ff fd60 	bl	800b364 <xTimerGenericCommand>
 800b8a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10a      	bne.n	800b8c2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b0:	f383 8811 	msr	BASEPRI, r3
 800b8b4:	f3bf 8f6f 	isb	sy
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	603b      	str	r3, [r7, #0]
}
 800b8be:	bf00      	nop
 800b8c0:	e7fe      	b.n	800b8c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b8c2:	4b09      	ldr	r3, [pc, #36]	; (800b8e8 <prvSwitchTimerLists+0xc0>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d1b1      	bne.n	800b830 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b8cc:	4b06      	ldr	r3, [pc, #24]	; (800b8e8 <prvSwitchTimerLists+0xc0>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b8d2:	4b06      	ldr	r3, [pc, #24]	; (800b8ec <prvSwitchTimerLists+0xc4>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a04      	ldr	r2, [pc, #16]	; (800b8e8 <prvSwitchTimerLists+0xc0>)
 800b8d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b8da:	4a04      	ldr	r2, [pc, #16]	; (800b8ec <prvSwitchTimerLists+0xc4>)
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	6013      	str	r3, [r2, #0]
}
 800b8e0:	bf00      	nop
 800b8e2:	3718      	adds	r7, #24
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	20001e38 	.word	0x20001e38
 800b8ec:	20001e3c 	.word	0x20001e3c

0800b8f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b8f6:	f000 f965 	bl	800bbc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b8fa:	4b15      	ldr	r3, [pc, #84]	; (800b950 <prvCheckForValidListAndQueue+0x60>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d120      	bne.n	800b944 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b902:	4814      	ldr	r0, [pc, #80]	; (800b954 <prvCheckForValidListAndQueue+0x64>)
 800b904:	f7fd fd2c 	bl	8009360 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b908:	4813      	ldr	r0, [pc, #76]	; (800b958 <prvCheckForValidListAndQueue+0x68>)
 800b90a:	f7fd fd29 	bl	8009360 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b90e:	4b13      	ldr	r3, [pc, #76]	; (800b95c <prvCheckForValidListAndQueue+0x6c>)
 800b910:	4a10      	ldr	r2, [pc, #64]	; (800b954 <prvCheckForValidListAndQueue+0x64>)
 800b912:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b914:	4b12      	ldr	r3, [pc, #72]	; (800b960 <prvCheckForValidListAndQueue+0x70>)
 800b916:	4a10      	ldr	r2, [pc, #64]	; (800b958 <prvCheckForValidListAndQueue+0x68>)
 800b918:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b91a:	2300      	movs	r3, #0
 800b91c:	9300      	str	r3, [sp, #0]
 800b91e:	4b11      	ldr	r3, [pc, #68]	; (800b964 <prvCheckForValidListAndQueue+0x74>)
 800b920:	4a11      	ldr	r2, [pc, #68]	; (800b968 <prvCheckForValidListAndQueue+0x78>)
 800b922:	2110      	movs	r1, #16
 800b924:	200a      	movs	r0, #10
 800b926:	f7fd fe37 	bl	8009598 <xQueueGenericCreateStatic>
 800b92a:	4603      	mov	r3, r0
 800b92c:	4a08      	ldr	r2, [pc, #32]	; (800b950 <prvCheckForValidListAndQueue+0x60>)
 800b92e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b930:	4b07      	ldr	r3, [pc, #28]	; (800b950 <prvCheckForValidListAndQueue+0x60>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d005      	beq.n	800b944 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b938:	4b05      	ldr	r3, [pc, #20]	; (800b950 <prvCheckForValidListAndQueue+0x60>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	490b      	ldr	r1, [pc, #44]	; (800b96c <prvCheckForValidListAndQueue+0x7c>)
 800b93e:	4618      	mov	r0, r3
 800b940:	f7fe fb2e 	bl	8009fa0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b944:	f000 f96e 	bl	800bc24 <vPortExitCritical>
}
 800b948:	bf00      	nop
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	20001e40 	.word	0x20001e40
 800b954:	20001e10 	.word	0x20001e10
 800b958:	20001e24 	.word	0x20001e24
 800b95c:	20001e38 	.word	0x20001e38
 800b960:	20001e3c 	.word	0x20001e3c
 800b964:	20001eec 	.word	0x20001eec
 800b968:	20001e4c 	.word	0x20001e4c
 800b96c:	0800e03c 	.word	0x0800e03c

0800b970 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b970:	b480      	push	{r7}
 800b972:	b085      	sub	sp, #20
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	3b04      	subs	r3, #4
 800b980:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b988:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	3b04      	subs	r3, #4
 800b98e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	f023 0201 	bic.w	r2, r3, #1
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	3b04      	subs	r3, #4
 800b99e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b9a0:	4a0c      	ldr	r2, [pc, #48]	; (800b9d4 <pxPortInitialiseStack+0x64>)
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	3b14      	subs	r3, #20
 800b9aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	3b04      	subs	r3, #4
 800b9b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f06f 0202 	mvn.w	r2, #2
 800b9be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	3b20      	subs	r3, #32
 800b9c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3714      	adds	r7, #20
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr
 800b9d4:	0800b9d9 	.word	0x0800b9d9

0800b9d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b085      	sub	sp, #20
 800b9dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b9e2:	4b12      	ldr	r3, [pc, #72]	; (800ba2c <prvTaskExitError+0x54>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ea:	d00a      	beq.n	800ba02 <prvTaskExitError+0x2a>
	__asm volatile
 800b9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f0:	f383 8811 	msr	BASEPRI, r3
 800b9f4:	f3bf 8f6f 	isb	sy
 800b9f8:	f3bf 8f4f 	dsb	sy
 800b9fc:	60fb      	str	r3, [r7, #12]
}
 800b9fe:	bf00      	nop
 800ba00:	e7fe      	b.n	800ba00 <prvTaskExitError+0x28>
	__asm volatile
 800ba02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba06:	f383 8811 	msr	BASEPRI, r3
 800ba0a:	f3bf 8f6f 	isb	sy
 800ba0e:	f3bf 8f4f 	dsb	sy
 800ba12:	60bb      	str	r3, [r7, #8]
}
 800ba14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ba16:	bf00      	nop
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d0fc      	beq.n	800ba18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ba1e:	bf00      	nop
 800ba20:	bf00      	nop
 800ba22:	3714      	adds	r7, #20
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr
 800ba2c:	20000040 	.word	0x20000040

0800ba30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ba30:	4b07      	ldr	r3, [pc, #28]	; (800ba50 <pxCurrentTCBConst2>)
 800ba32:	6819      	ldr	r1, [r3, #0]
 800ba34:	6808      	ldr	r0, [r1, #0]
 800ba36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba3a:	f380 8809 	msr	PSP, r0
 800ba3e:	f3bf 8f6f 	isb	sy
 800ba42:	f04f 0000 	mov.w	r0, #0
 800ba46:	f380 8811 	msr	BASEPRI, r0
 800ba4a:	4770      	bx	lr
 800ba4c:	f3af 8000 	nop.w

0800ba50 <pxCurrentTCBConst2>:
 800ba50:	20001910 	.word	0x20001910
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ba54:	bf00      	nop
 800ba56:	bf00      	nop

0800ba58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ba58:	4808      	ldr	r0, [pc, #32]	; (800ba7c <prvPortStartFirstTask+0x24>)
 800ba5a:	6800      	ldr	r0, [r0, #0]
 800ba5c:	6800      	ldr	r0, [r0, #0]
 800ba5e:	f380 8808 	msr	MSP, r0
 800ba62:	f04f 0000 	mov.w	r0, #0
 800ba66:	f380 8814 	msr	CONTROL, r0
 800ba6a:	b662      	cpsie	i
 800ba6c:	b661      	cpsie	f
 800ba6e:	f3bf 8f4f 	dsb	sy
 800ba72:	f3bf 8f6f 	isb	sy
 800ba76:	df00      	svc	0
 800ba78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ba7a:	bf00      	nop
 800ba7c:	e000ed08 	.word	0xe000ed08

0800ba80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b086      	sub	sp, #24
 800ba84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ba86:	4b46      	ldr	r3, [pc, #280]	; (800bba0 <xPortStartScheduler+0x120>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4a46      	ldr	r2, [pc, #280]	; (800bba4 <xPortStartScheduler+0x124>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d10a      	bne.n	800baa6 <xPortStartScheduler+0x26>
	__asm volatile
 800ba90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba94:	f383 8811 	msr	BASEPRI, r3
 800ba98:	f3bf 8f6f 	isb	sy
 800ba9c:	f3bf 8f4f 	dsb	sy
 800baa0:	613b      	str	r3, [r7, #16]
}
 800baa2:	bf00      	nop
 800baa4:	e7fe      	b.n	800baa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800baa6:	4b3e      	ldr	r3, [pc, #248]	; (800bba0 <xPortStartScheduler+0x120>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a3f      	ldr	r2, [pc, #252]	; (800bba8 <xPortStartScheduler+0x128>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d10a      	bne.n	800bac6 <xPortStartScheduler+0x46>
	__asm volatile
 800bab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab4:	f383 8811 	msr	BASEPRI, r3
 800bab8:	f3bf 8f6f 	isb	sy
 800babc:	f3bf 8f4f 	dsb	sy
 800bac0:	60fb      	str	r3, [r7, #12]
}
 800bac2:	bf00      	nop
 800bac4:	e7fe      	b.n	800bac4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bac6:	4b39      	ldr	r3, [pc, #228]	; (800bbac <xPortStartScheduler+0x12c>)
 800bac8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	22ff      	movs	r2, #255	; 0xff
 800bad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	b2db      	uxtb	r3, r3
 800bade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bae0:	78fb      	ldrb	r3, [r7, #3]
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bae8:	b2da      	uxtb	r2, r3
 800baea:	4b31      	ldr	r3, [pc, #196]	; (800bbb0 <xPortStartScheduler+0x130>)
 800baec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800baee:	4b31      	ldr	r3, [pc, #196]	; (800bbb4 <xPortStartScheduler+0x134>)
 800baf0:	2207      	movs	r2, #7
 800baf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800baf4:	e009      	b.n	800bb0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800baf6:	4b2f      	ldr	r3, [pc, #188]	; (800bbb4 <xPortStartScheduler+0x134>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	3b01      	subs	r3, #1
 800bafc:	4a2d      	ldr	r2, [pc, #180]	; (800bbb4 <xPortStartScheduler+0x134>)
 800bafe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bb00:	78fb      	ldrb	r3, [r7, #3]
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	005b      	lsls	r3, r3, #1
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb0a:	78fb      	ldrb	r3, [r7, #3]
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb12:	2b80      	cmp	r3, #128	; 0x80
 800bb14:	d0ef      	beq.n	800baf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bb16:	4b27      	ldr	r3, [pc, #156]	; (800bbb4 <xPortStartScheduler+0x134>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f1c3 0307 	rsb	r3, r3, #7
 800bb1e:	2b04      	cmp	r3, #4
 800bb20:	d00a      	beq.n	800bb38 <xPortStartScheduler+0xb8>
	__asm volatile
 800bb22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb26:	f383 8811 	msr	BASEPRI, r3
 800bb2a:	f3bf 8f6f 	isb	sy
 800bb2e:	f3bf 8f4f 	dsb	sy
 800bb32:	60bb      	str	r3, [r7, #8]
}
 800bb34:	bf00      	nop
 800bb36:	e7fe      	b.n	800bb36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bb38:	4b1e      	ldr	r3, [pc, #120]	; (800bbb4 <xPortStartScheduler+0x134>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	021b      	lsls	r3, r3, #8
 800bb3e:	4a1d      	ldr	r2, [pc, #116]	; (800bbb4 <xPortStartScheduler+0x134>)
 800bb40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bb42:	4b1c      	ldr	r3, [pc, #112]	; (800bbb4 <xPortStartScheduler+0x134>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bb4a:	4a1a      	ldr	r2, [pc, #104]	; (800bbb4 <xPortStartScheduler+0x134>)
 800bb4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	b2da      	uxtb	r2, r3
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bb56:	4b18      	ldr	r3, [pc, #96]	; (800bbb8 <xPortStartScheduler+0x138>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a17      	ldr	r2, [pc, #92]	; (800bbb8 <xPortStartScheduler+0x138>)
 800bb5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb62:	4b15      	ldr	r3, [pc, #84]	; (800bbb8 <xPortStartScheduler+0x138>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4a14      	ldr	r2, [pc, #80]	; (800bbb8 <xPortStartScheduler+0x138>)
 800bb68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bb6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bb6e:	f000 f8dd 	bl	800bd2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bb72:	4b12      	ldr	r3, [pc, #72]	; (800bbbc <xPortStartScheduler+0x13c>)
 800bb74:	2200      	movs	r2, #0
 800bb76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bb78:	f000 f8fc 	bl	800bd74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bb7c:	4b10      	ldr	r3, [pc, #64]	; (800bbc0 <xPortStartScheduler+0x140>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a0f      	ldr	r2, [pc, #60]	; (800bbc0 <xPortStartScheduler+0x140>)
 800bb82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bb86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bb88:	f7ff ff66 	bl	800ba58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bb8c:	f7fe fe4a 	bl	800a824 <vTaskSwitchContext>
	prvTaskExitError();
 800bb90:	f7ff ff22 	bl	800b9d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bb94:	2300      	movs	r3, #0
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3718      	adds	r7, #24
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
 800bb9e:	bf00      	nop
 800bba0:	e000ed00 	.word	0xe000ed00
 800bba4:	410fc271 	.word	0x410fc271
 800bba8:	410fc270 	.word	0x410fc270
 800bbac:	e000e400 	.word	0xe000e400
 800bbb0:	20001f3c 	.word	0x20001f3c
 800bbb4:	20001f40 	.word	0x20001f40
 800bbb8:	e000ed20 	.word	0xe000ed20
 800bbbc:	20000040 	.word	0x20000040
 800bbc0:	e000ef34 	.word	0xe000ef34

0800bbc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
	__asm volatile
 800bbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbce:	f383 8811 	msr	BASEPRI, r3
 800bbd2:	f3bf 8f6f 	isb	sy
 800bbd6:	f3bf 8f4f 	dsb	sy
 800bbda:	607b      	str	r3, [r7, #4]
}
 800bbdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bbde:	4b0f      	ldr	r3, [pc, #60]	; (800bc1c <vPortEnterCritical+0x58>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	4a0d      	ldr	r2, [pc, #52]	; (800bc1c <vPortEnterCritical+0x58>)
 800bbe6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bbe8:	4b0c      	ldr	r3, [pc, #48]	; (800bc1c <vPortEnterCritical+0x58>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d10f      	bne.n	800bc10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bbf0:	4b0b      	ldr	r3, [pc, #44]	; (800bc20 <vPortEnterCritical+0x5c>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	b2db      	uxtb	r3, r3
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d00a      	beq.n	800bc10 <vPortEnterCritical+0x4c>
	__asm volatile
 800bbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfe:	f383 8811 	msr	BASEPRI, r3
 800bc02:	f3bf 8f6f 	isb	sy
 800bc06:	f3bf 8f4f 	dsb	sy
 800bc0a:	603b      	str	r3, [r7, #0]
}
 800bc0c:	bf00      	nop
 800bc0e:	e7fe      	b.n	800bc0e <vPortEnterCritical+0x4a>
	}
}
 800bc10:	bf00      	nop
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr
 800bc1c:	20000040 	.word	0x20000040
 800bc20:	e000ed04 	.word	0xe000ed04

0800bc24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bc2a:	4b12      	ldr	r3, [pc, #72]	; (800bc74 <vPortExitCritical+0x50>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d10a      	bne.n	800bc48 <vPortExitCritical+0x24>
	__asm volatile
 800bc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc36:	f383 8811 	msr	BASEPRI, r3
 800bc3a:	f3bf 8f6f 	isb	sy
 800bc3e:	f3bf 8f4f 	dsb	sy
 800bc42:	607b      	str	r3, [r7, #4]
}
 800bc44:	bf00      	nop
 800bc46:	e7fe      	b.n	800bc46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bc48:	4b0a      	ldr	r3, [pc, #40]	; (800bc74 <vPortExitCritical+0x50>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	3b01      	subs	r3, #1
 800bc4e:	4a09      	ldr	r2, [pc, #36]	; (800bc74 <vPortExitCritical+0x50>)
 800bc50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bc52:	4b08      	ldr	r3, [pc, #32]	; (800bc74 <vPortExitCritical+0x50>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d105      	bne.n	800bc66 <vPortExitCritical+0x42>
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	f383 8811 	msr	BASEPRI, r3
}
 800bc64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bc66:	bf00      	nop
 800bc68:	370c      	adds	r7, #12
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	20000040 	.word	0x20000040
	...

0800bc80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bc80:	f3ef 8009 	mrs	r0, PSP
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	4b15      	ldr	r3, [pc, #84]	; (800bce0 <pxCurrentTCBConst>)
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	f01e 0f10 	tst.w	lr, #16
 800bc90:	bf08      	it	eq
 800bc92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bc96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc9a:	6010      	str	r0, [r2, #0]
 800bc9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bca4:	f380 8811 	msr	BASEPRI, r0
 800bca8:	f3bf 8f4f 	dsb	sy
 800bcac:	f3bf 8f6f 	isb	sy
 800bcb0:	f7fe fdb8 	bl	800a824 <vTaskSwitchContext>
 800bcb4:	f04f 0000 	mov.w	r0, #0
 800bcb8:	f380 8811 	msr	BASEPRI, r0
 800bcbc:	bc09      	pop	{r0, r3}
 800bcbe:	6819      	ldr	r1, [r3, #0]
 800bcc0:	6808      	ldr	r0, [r1, #0]
 800bcc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc6:	f01e 0f10 	tst.w	lr, #16
 800bcca:	bf08      	it	eq
 800bccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bcd0:	f380 8809 	msr	PSP, r0
 800bcd4:	f3bf 8f6f 	isb	sy
 800bcd8:	4770      	bx	lr
 800bcda:	bf00      	nop
 800bcdc:	f3af 8000 	nop.w

0800bce0 <pxCurrentTCBConst>:
 800bce0:	20001910 	.word	0x20001910
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bce4:	bf00      	nop
 800bce6:	bf00      	nop

0800bce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
	__asm volatile
 800bcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf2:	f383 8811 	msr	BASEPRI, r3
 800bcf6:	f3bf 8f6f 	isb	sy
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	607b      	str	r3, [r7, #4]
}
 800bd00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bd02:	f7fe fcd5 	bl	800a6b0 <xTaskIncrementTick>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d003      	beq.n	800bd14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bd0c:	4b06      	ldr	r3, [pc, #24]	; (800bd28 <xPortSysTickHandler+0x40>)
 800bd0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd12:	601a      	str	r2, [r3, #0]
 800bd14:	2300      	movs	r3, #0
 800bd16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	f383 8811 	msr	BASEPRI, r3
}
 800bd1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bd20:	bf00      	nop
 800bd22:	3708      	adds	r7, #8
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}
 800bd28:	e000ed04 	.word	0xe000ed04

0800bd2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd30:	4b0b      	ldr	r3, [pc, #44]	; (800bd60 <vPortSetupTimerInterrupt+0x34>)
 800bd32:	2200      	movs	r2, #0
 800bd34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd36:	4b0b      	ldr	r3, [pc, #44]	; (800bd64 <vPortSetupTimerInterrupt+0x38>)
 800bd38:	2200      	movs	r2, #0
 800bd3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd3c:	4b0a      	ldr	r3, [pc, #40]	; (800bd68 <vPortSetupTimerInterrupt+0x3c>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a0a      	ldr	r2, [pc, #40]	; (800bd6c <vPortSetupTimerInterrupt+0x40>)
 800bd42:	fba2 2303 	umull	r2, r3, r2, r3
 800bd46:	099b      	lsrs	r3, r3, #6
 800bd48:	4a09      	ldr	r2, [pc, #36]	; (800bd70 <vPortSetupTimerInterrupt+0x44>)
 800bd4a:	3b01      	subs	r3, #1
 800bd4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bd4e:	4b04      	ldr	r3, [pc, #16]	; (800bd60 <vPortSetupTimerInterrupt+0x34>)
 800bd50:	2207      	movs	r2, #7
 800bd52:	601a      	str	r2, [r3, #0]
}
 800bd54:	bf00      	nop
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr
 800bd5e:	bf00      	nop
 800bd60:	e000e010 	.word	0xe000e010
 800bd64:	e000e018 	.word	0xe000e018
 800bd68:	20000000 	.word	0x20000000
 800bd6c:	10624dd3 	.word	0x10624dd3
 800bd70:	e000e014 	.word	0xe000e014

0800bd74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bd74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bd84 <vPortEnableVFP+0x10>
 800bd78:	6801      	ldr	r1, [r0, #0]
 800bd7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bd7e:	6001      	str	r1, [r0, #0]
 800bd80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bd82:	bf00      	nop
 800bd84:	e000ed88 	.word	0xe000ed88

0800bd88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bd88:	b480      	push	{r7}
 800bd8a:	b085      	sub	sp, #20
 800bd8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bd8e:	f3ef 8305 	mrs	r3, IPSR
 800bd92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2b0f      	cmp	r3, #15
 800bd98:	d914      	bls.n	800bdc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bd9a:	4a17      	ldr	r2, [pc, #92]	; (800bdf8 <vPortValidateInterruptPriority+0x70>)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	4413      	add	r3, r2
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bda4:	4b15      	ldr	r3, [pc, #84]	; (800bdfc <vPortValidateInterruptPriority+0x74>)
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	7afa      	ldrb	r2, [r7, #11]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d20a      	bcs.n	800bdc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb2:	f383 8811 	msr	BASEPRI, r3
 800bdb6:	f3bf 8f6f 	isb	sy
 800bdba:	f3bf 8f4f 	dsb	sy
 800bdbe:	607b      	str	r3, [r7, #4]
}
 800bdc0:	bf00      	nop
 800bdc2:	e7fe      	b.n	800bdc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bdc4:	4b0e      	ldr	r3, [pc, #56]	; (800be00 <vPortValidateInterruptPriority+0x78>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bdcc:	4b0d      	ldr	r3, [pc, #52]	; (800be04 <vPortValidateInterruptPriority+0x7c>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d90a      	bls.n	800bdea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bdd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd8:	f383 8811 	msr	BASEPRI, r3
 800bddc:	f3bf 8f6f 	isb	sy
 800bde0:	f3bf 8f4f 	dsb	sy
 800bde4:	603b      	str	r3, [r7, #0]
}
 800bde6:	bf00      	nop
 800bde8:	e7fe      	b.n	800bde8 <vPortValidateInterruptPriority+0x60>
	}
 800bdea:	bf00      	nop
 800bdec:	3714      	adds	r7, #20
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr
 800bdf6:	bf00      	nop
 800bdf8:	e000e3f0 	.word	0xe000e3f0
 800bdfc:	20001f3c 	.word	0x20001f3c
 800be00:	e000ed0c 	.word	0xe000ed0c
 800be04:	20001f40 	.word	0x20001f40

0800be08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b08a      	sub	sp, #40	; 0x28
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800be10:	2300      	movs	r3, #0
 800be12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800be14:	f7fe fb7e 	bl	800a514 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800be18:	4b5b      	ldr	r3, [pc, #364]	; (800bf88 <pvPortMalloc+0x180>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d101      	bne.n	800be24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800be20:	f000 f920 	bl	800c064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800be24:	4b59      	ldr	r3, [pc, #356]	; (800bf8c <pvPortMalloc+0x184>)
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	4013      	ands	r3, r2
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	f040 8093 	bne.w	800bf58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d01d      	beq.n	800be74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800be38:	2208      	movs	r2, #8
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4413      	add	r3, r2
 800be3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f003 0307 	and.w	r3, r3, #7
 800be46:	2b00      	cmp	r3, #0
 800be48:	d014      	beq.n	800be74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f023 0307 	bic.w	r3, r3, #7
 800be50:	3308      	adds	r3, #8
 800be52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f003 0307 	and.w	r3, r3, #7
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d00a      	beq.n	800be74 <pvPortMalloc+0x6c>
	__asm volatile
 800be5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be62:	f383 8811 	msr	BASEPRI, r3
 800be66:	f3bf 8f6f 	isb	sy
 800be6a:	f3bf 8f4f 	dsb	sy
 800be6e:	617b      	str	r3, [r7, #20]
}
 800be70:	bf00      	nop
 800be72:	e7fe      	b.n	800be72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d06e      	beq.n	800bf58 <pvPortMalloc+0x150>
 800be7a:	4b45      	ldr	r3, [pc, #276]	; (800bf90 <pvPortMalloc+0x188>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	429a      	cmp	r2, r3
 800be82:	d869      	bhi.n	800bf58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800be84:	4b43      	ldr	r3, [pc, #268]	; (800bf94 <pvPortMalloc+0x18c>)
 800be86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800be88:	4b42      	ldr	r3, [pc, #264]	; (800bf94 <pvPortMalloc+0x18c>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be8e:	e004      	b.n	800be9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800be90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800be94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d903      	bls.n	800beac <pvPortMalloc+0xa4>
 800bea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d1f1      	bne.n	800be90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800beac:	4b36      	ldr	r3, [pc, #216]	; (800bf88 <pvPortMalloc+0x180>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d050      	beq.n	800bf58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800beb6:	6a3b      	ldr	r3, [r7, #32]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	2208      	movs	r2, #8
 800bebc:	4413      	add	r3, r2
 800bebe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec2:	681a      	ldr	r2, [r3, #0]
 800bec4:	6a3b      	ldr	r3, [r7, #32]
 800bec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beca:	685a      	ldr	r2, [r3, #4]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	1ad2      	subs	r2, r2, r3
 800bed0:	2308      	movs	r3, #8
 800bed2:	005b      	lsls	r3, r3, #1
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d91f      	bls.n	800bf18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	4413      	add	r3, r2
 800bede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bee0:	69bb      	ldr	r3, [r7, #24]
 800bee2:	f003 0307 	and.w	r3, r3, #7
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d00a      	beq.n	800bf00 <pvPortMalloc+0xf8>
	__asm volatile
 800beea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beee:	f383 8811 	msr	BASEPRI, r3
 800bef2:	f3bf 8f6f 	isb	sy
 800bef6:	f3bf 8f4f 	dsb	sy
 800befa:	613b      	str	r3, [r7, #16]
}
 800befc:	bf00      	nop
 800befe:	e7fe      	b.n	800befe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bf00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf02:	685a      	ldr	r2, [r3, #4]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	1ad2      	subs	r2, r2, r3
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0e:	687a      	ldr	r2, [r7, #4]
 800bf10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bf12:	69b8      	ldr	r0, [r7, #24]
 800bf14:	f000 f908 	bl	800c128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bf18:	4b1d      	ldr	r3, [pc, #116]	; (800bf90 <pvPortMalloc+0x188>)
 800bf1a:	681a      	ldr	r2, [r3, #0]
 800bf1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	1ad3      	subs	r3, r2, r3
 800bf22:	4a1b      	ldr	r2, [pc, #108]	; (800bf90 <pvPortMalloc+0x188>)
 800bf24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bf26:	4b1a      	ldr	r3, [pc, #104]	; (800bf90 <pvPortMalloc+0x188>)
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	4b1b      	ldr	r3, [pc, #108]	; (800bf98 <pvPortMalloc+0x190>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d203      	bcs.n	800bf3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bf32:	4b17      	ldr	r3, [pc, #92]	; (800bf90 <pvPortMalloc+0x188>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4a18      	ldr	r2, [pc, #96]	; (800bf98 <pvPortMalloc+0x190>)
 800bf38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bf3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3c:	685a      	ldr	r2, [r3, #4]
 800bf3e:	4b13      	ldr	r3, [pc, #76]	; (800bf8c <pvPortMalloc+0x184>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	431a      	orrs	r2, r3
 800bf44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bf4e:	4b13      	ldr	r3, [pc, #76]	; (800bf9c <pvPortMalloc+0x194>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	3301      	adds	r3, #1
 800bf54:	4a11      	ldr	r2, [pc, #68]	; (800bf9c <pvPortMalloc+0x194>)
 800bf56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bf58:	f7fe faea 	bl	800a530 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	f003 0307 	and.w	r3, r3, #7
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d00a      	beq.n	800bf7c <pvPortMalloc+0x174>
	__asm volatile
 800bf66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf6a:	f383 8811 	msr	BASEPRI, r3
 800bf6e:	f3bf 8f6f 	isb	sy
 800bf72:	f3bf 8f4f 	dsb	sy
 800bf76:	60fb      	str	r3, [r7, #12]
}
 800bf78:	bf00      	nop
 800bf7a:	e7fe      	b.n	800bf7a <pvPortMalloc+0x172>
	return pvReturn;
 800bf7c:	69fb      	ldr	r3, [r7, #28]
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3728      	adds	r7, #40	; 0x28
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	200032d4 	.word	0x200032d4
 800bf8c:	200032e8 	.word	0x200032e8
 800bf90:	200032d8 	.word	0x200032d8
 800bf94:	200032cc 	.word	0x200032cc
 800bf98:	200032dc 	.word	0x200032dc
 800bf9c:	200032e0 	.word	0x200032e0

0800bfa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b086      	sub	sp, #24
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d04d      	beq.n	800c04e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bfb2:	2308      	movs	r3, #8
 800bfb4:	425b      	negs	r3, r3
 800bfb6:	697a      	ldr	r2, [r7, #20]
 800bfb8:	4413      	add	r3, r2
 800bfba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	685a      	ldr	r2, [r3, #4]
 800bfc4:	4b24      	ldr	r3, [pc, #144]	; (800c058 <vPortFree+0xb8>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4013      	ands	r3, r2
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d10a      	bne.n	800bfe4 <vPortFree+0x44>
	__asm volatile
 800bfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd2:	f383 8811 	msr	BASEPRI, r3
 800bfd6:	f3bf 8f6f 	isb	sy
 800bfda:	f3bf 8f4f 	dsb	sy
 800bfde:	60fb      	str	r3, [r7, #12]
}
 800bfe0:	bf00      	nop
 800bfe2:	e7fe      	b.n	800bfe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d00a      	beq.n	800c002 <vPortFree+0x62>
	__asm volatile
 800bfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff0:	f383 8811 	msr	BASEPRI, r3
 800bff4:	f3bf 8f6f 	isb	sy
 800bff8:	f3bf 8f4f 	dsb	sy
 800bffc:	60bb      	str	r3, [r7, #8]
}
 800bffe:	bf00      	nop
 800c000:	e7fe      	b.n	800c000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	685a      	ldr	r2, [r3, #4]
 800c006:	4b14      	ldr	r3, [pc, #80]	; (800c058 <vPortFree+0xb8>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4013      	ands	r3, r2
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d01e      	beq.n	800c04e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d11a      	bne.n	800c04e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	685a      	ldr	r2, [r3, #4]
 800c01c:	4b0e      	ldr	r3, [pc, #56]	; (800c058 <vPortFree+0xb8>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	43db      	mvns	r3, r3
 800c022:	401a      	ands	r2, r3
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c028:	f7fe fa74 	bl	800a514 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	685a      	ldr	r2, [r3, #4]
 800c030:	4b0a      	ldr	r3, [pc, #40]	; (800c05c <vPortFree+0xbc>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4413      	add	r3, r2
 800c036:	4a09      	ldr	r2, [pc, #36]	; (800c05c <vPortFree+0xbc>)
 800c038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c03a:	6938      	ldr	r0, [r7, #16]
 800c03c:	f000 f874 	bl	800c128 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c040:	4b07      	ldr	r3, [pc, #28]	; (800c060 <vPortFree+0xc0>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	3301      	adds	r3, #1
 800c046:	4a06      	ldr	r2, [pc, #24]	; (800c060 <vPortFree+0xc0>)
 800c048:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c04a:	f7fe fa71 	bl	800a530 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c04e:	bf00      	nop
 800c050:	3718      	adds	r7, #24
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	200032e8 	.word	0x200032e8
 800c05c:	200032d8 	.word	0x200032d8
 800c060:	200032e4 	.word	0x200032e4

0800c064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c064:	b480      	push	{r7}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c06a:	f241 3388 	movw	r3, #5000	; 0x1388
 800c06e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c070:	4b27      	ldr	r3, [pc, #156]	; (800c110 <prvHeapInit+0xac>)
 800c072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f003 0307 	and.w	r3, r3, #7
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d00c      	beq.n	800c098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	3307      	adds	r3, #7
 800c082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f023 0307 	bic.w	r3, r3, #7
 800c08a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c08c:	68ba      	ldr	r2, [r7, #8]
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	1ad3      	subs	r3, r2, r3
 800c092:	4a1f      	ldr	r2, [pc, #124]	; (800c110 <prvHeapInit+0xac>)
 800c094:	4413      	add	r3, r2
 800c096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c09c:	4a1d      	ldr	r2, [pc, #116]	; (800c114 <prvHeapInit+0xb0>)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c0a2:	4b1c      	ldr	r3, [pc, #112]	; (800c114 <prvHeapInit+0xb0>)
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	68ba      	ldr	r2, [r7, #8]
 800c0ac:	4413      	add	r3, r2
 800c0ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c0b0:	2208      	movs	r2, #8
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	1a9b      	subs	r3, r3, r2
 800c0b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f023 0307 	bic.w	r3, r3, #7
 800c0be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	4a15      	ldr	r2, [pc, #84]	; (800c118 <prvHeapInit+0xb4>)
 800c0c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c0c6:	4b14      	ldr	r3, [pc, #80]	; (800c118 <prvHeapInit+0xb4>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c0ce:	4b12      	ldr	r3, [pc, #72]	; (800c118 <prvHeapInit+0xb4>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	68fa      	ldr	r2, [r7, #12]
 800c0de:	1ad2      	subs	r2, r2, r3
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c0e4:	4b0c      	ldr	r3, [pc, #48]	; (800c118 <prvHeapInit+0xb4>)
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	4a0a      	ldr	r2, [pc, #40]	; (800c11c <prvHeapInit+0xb8>)
 800c0f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	4a09      	ldr	r2, [pc, #36]	; (800c120 <prvHeapInit+0xbc>)
 800c0fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c0fc:	4b09      	ldr	r3, [pc, #36]	; (800c124 <prvHeapInit+0xc0>)
 800c0fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c102:	601a      	str	r2, [r3, #0]
}
 800c104:	bf00      	nop
 800c106:	3714      	adds	r7, #20
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr
 800c110:	20001f44 	.word	0x20001f44
 800c114:	200032cc 	.word	0x200032cc
 800c118:	200032d4 	.word	0x200032d4
 800c11c:	200032dc 	.word	0x200032dc
 800c120:	200032d8 	.word	0x200032d8
 800c124:	200032e8 	.word	0x200032e8

0800c128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c128:	b480      	push	{r7}
 800c12a:	b085      	sub	sp, #20
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c130:	4b28      	ldr	r3, [pc, #160]	; (800c1d4 <prvInsertBlockIntoFreeList+0xac>)
 800c132:	60fb      	str	r3, [r7, #12]
 800c134:	e002      	b.n	800c13c <prvInsertBlockIntoFreeList+0x14>
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	60fb      	str	r3, [r7, #12]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	687a      	ldr	r2, [r7, #4]
 800c142:	429a      	cmp	r2, r3
 800c144:	d8f7      	bhi.n	800c136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	685b      	ldr	r3, [r3, #4]
 800c14e:	68ba      	ldr	r2, [r7, #8]
 800c150:	4413      	add	r3, r2
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	429a      	cmp	r2, r3
 800c156:	d108      	bne.n	800c16a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	685a      	ldr	r2, [r3, #4]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	441a      	add	r2, r3
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	68ba      	ldr	r2, [r7, #8]
 800c174:	441a      	add	r2, r3
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d118      	bne.n	800c1b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681a      	ldr	r2, [r3, #0]
 800c182:	4b15      	ldr	r3, [pc, #84]	; (800c1d8 <prvInsertBlockIntoFreeList+0xb0>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	429a      	cmp	r2, r3
 800c188:	d00d      	beq.n	800c1a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	685a      	ldr	r2, [r3, #4]
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	441a      	add	r2, r3
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	601a      	str	r2, [r3, #0]
 800c1a4:	e008      	b.n	800c1b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c1a6:	4b0c      	ldr	r3, [pc, #48]	; (800c1d8 <prvInsertBlockIntoFreeList+0xb0>)
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	601a      	str	r2, [r3, #0]
 800c1ae:	e003      	b.n	800c1b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681a      	ldr	r2, [r3, #0]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c1b8:	68fa      	ldr	r2, [r7, #12]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d002      	beq.n	800c1c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1c6:	bf00      	nop
 800c1c8:	3714      	adds	r7, #20
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d0:	4770      	bx	lr
 800c1d2:	bf00      	nop
 800c1d4:	200032cc 	.word	0x200032cc
 800c1d8:	200032d4 	.word	0x200032d4

0800c1dc <__errno>:
 800c1dc:	4b01      	ldr	r3, [pc, #4]	; (800c1e4 <__errno+0x8>)
 800c1de:	6818      	ldr	r0, [r3, #0]
 800c1e0:	4770      	bx	lr
 800c1e2:	bf00      	nop
 800c1e4:	20000044 	.word	0x20000044

0800c1e8 <std>:
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	b510      	push	{r4, lr}
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	e9c0 3300 	strd	r3, r3, [r0]
 800c1f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c1f6:	6083      	str	r3, [r0, #8]
 800c1f8:	8181      	strh	r1, [r0, #12]
 800c1fa:	6643      	str	r3, [r0, #100]	; 0x64
 800c1fc:	81c2      	strh	r2, [r0, #14]
 800c1fe:	6183      	str	r3, [r0, #24]
 800c200:	4619      	mov	r1, r3
 800c202:	2208      	movs	r2, #8
 800c204:	305c      	adds	r0, #92	; 0x5c
 800c206:	f000 f91a 	bl	800c43e <memset>
 800c20a:	4b05      	ldr	r3, [pc, #20]	; (800c220 <std+0x38>)
 800c20c:	6263      	str	r3, [r4, #36]	; 0x24
 800c20e:	4b05      	ldr	r3, [pc, #20]	; (800c224 <std+0x3c>)
 800c210:	62a3      	str	r3, [r4, #40]	; 0x28
 800c212:	4b05      	ldr	r3, [pc, #20]	; (800c228 <std+0x40>)
 800c214:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c216:	4b05      	ldr	r3, [pc, #20]	; (800c22c <std+0x44>)
 800c218:	6224      	str	r4, [r4, #32]
 800c21a:	6323      	str	r3, [r4, #48]	; 0x30
 800c21c:	bd10      	pop	{r4, pc}
 800c21e:	bf00      	nop
 800c220:	0800c7c9 	.word	0x0800c7c9
 800c224:	0800c7eb 	.word	0x0800c7eb
 800c228:	0800c823 	.word	0x0800c823
 800c22c:	0800c847 	.word	0x0800c847

0800c230 <_cleanup_r>:
 800c230:	4901      	ldr	r1, [pc, #4]	; (800c238 <_cleanup_r+0x8>)
 800c232:	f000 b8af 	b.w	800c394 <_fwalk_reent>
 800c236:	bf00      	nop
 800c238:	0800cc65 	.word	0x0800cc65

0800c23c <__sfmoreglue>:
 800c23c:	b570      	push	{r4, r5, r6, lr}
 800c23e:	2268      	movs	r2, #104	; 0x68
 800c240:	1e4d      	subs	r5, r1, #1
 800c242:	4355      	muls	r5, r2
 800c244:	460e      	mov	r6, r1
 800c246:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c24a:	f000 f921 	bl	800c490 <_malloc_r>
 800c24e:	4604      	mov	r4, r0
 800c250:	b140      	cbz	r0, 800c264 <__sfmoreglue+0x28>
 800c252:	2100      	movs	r1, #0
 800c254:	e9c0 1600 	strd	r1, r6, [r0]
 800c258:	300c      	adds	r0, #12
 800c25a:	60a0      	str	r0, [r4, #8]
 800c25c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c260:	f000 f8ed 	bl	800c43e <memset>
 800c264:	4620      	mov	r0, r4
 800c266:	bd70      	pop	{r4, r5, r6, pc}

0800c268 <__sfp_lock_acquire>:
 800c268:	4801      	ldr	r0, [pc, #4]	; (800c270 <__sfp_lock_acquire+0x8>)
 800c26a:	f000 b8d8 	b.w	800c41e <__retarget_lock_acquire_recursive>
 800c26e:	bf00      	nop
 800c270:	200032ed 	.word	0x200032ed

0800c274 <__sfp_lock_release>:
 800c274:	4801      	ldr	r0, [pc, #4]	; (800c27c <__sfp_lock_release+0x8>)
 800c276:	f000 b8d3 	b.w	800c420 <__retarget_lock_release_recursive>
 800c27a:	bf00      	nop
 800c27c:	200032ed 	.word	0x200032ed

0800c280 <__sinit_lock_acquire>:
 800c280:	4801      	ldr	r0, [pc, #4]	; (800c288 <__sinit_lock_acquire+0x8>)
 800c282:	f000 b8cc 	b.w	800c41e <__retarget_lock_acquire_recursive>
 800c286:	bf00      	nop
 800c288:	200032ee 	.word	0x200032ee

0800c28c <__sinit_lock_release>:
 800c28c:	4801      	ldr	r0, [pc, #4]	; (800c294 <__sinit_lock_release+0x8>)
 800c28e:	f000 b8c7 	b.w	800c420 <__retarget_lock_release_recursive>
 800c292:	bf00      	nop
 800c294:	200032ee 	.word	0x200032ee

0800c298 <__sinit>:
 800c298:	b510      	push	{r4, lr}
 800c29a:	4604      	mov	r4, r0
 800c29c:	f7ff fff0 	bl	800c280 <__sinit_lock_acquire>
 800c2a0:	69a3      	ldr	r3, [r4, #24]
 800c2a2:	b11b      	cbz	r3, 800c2ac <__sinit+0x14>
 800c2a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2a8:	f7ff bff0 	b.w	800c28c <__sinit_lock_release>
 800c2ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c2b0:	6523      	str	r3, [r4, #80]	; 0x50
 800c2b2:	4b13      	ldr	r3, [pc, #76]	; (800c300 <__sinit+0x68>)
 800c2b4:	4a13      	ldr	r2, [pc, #76]	; (800c304 <__sinit+0x6c>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800c2ba:	42a3      	cmp	r3, r4
 800c2bc:	bf04      	itt	eq
 800c2be:	2301      	moveq	r3, #1
 800c2c0:	61a3      	streq	r3, [r4, #24]
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	f000 f820 	bl	800c308 <__sfp>
 800c2c8:	6060      	str	r0, [r4, #4]
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	f000 f81c 	bl	800c308 <__sfp>
 800c2d0:	60a0      	str	r0, [r4, #8]
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	f000 f818 	bl	800c308 <__sfp>
 800c2d8:	2200      	movs	r2, #0
 800c2da:	60e0      	str	r0, [r4, #12]
 800c2dc:	2104      	movs	r1, #4
 800c2de:	6860      	ldr	r0, [r4, #4]
 800c2e0:	f7ff ff82 	bl	800c1e8 <std>
 800c2e4:	68a0      	ldr	r0, [r4, #8]
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	2109      	movs	r1, #9
 800c2ea:	f7ff ff7d 	bl	800c1e8 <std>
 800c2ee:	68e0      	ldr	r0, [r4, #12]
 800c2f0:	2202      	movs	r2, #2
 800c2f2:	2112      	movs	r1, #18
 800c2f4:	f7ff ff78 	bl	800c1e8 <std>
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	61a3      	str	r3, [r4, #24]
 800c2fc:	e7d2      	b.n	800c2a4 <__sinit+0xc>
 800c2fe:	bf00      	nop
 800c300:	0800e170 	.word	0x0800e170
 800c304:	0800c231 	.word	0x0800c231

0800c308 <__sfp>:
 800c308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c30a:	4607      	mov	r7, r0
 800c30c:	f7ff ffac 	bl	800c268 <__sfp_lock_acquire>
 800c310:	4b1e      	ldr	r3, [pc, #120]	; (800c38c <__sfp+0x84>)
 800c312:	681e      	ldr	r6, [r3, #0]
 800c314:	69b3      	ldr	r3, [r6, #24]
 800c316:	b913      	cbnz	r3, 800c31e <__sfp+0x16>
 800c318:	4630      	mov	r0, r6
 800c31a:	f7ff ffbd 	bl	800c298 <__sinit>
 800c31e:	3648      	adds	r6, #72	; 0x48
 800c320:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c324:	3b01      	subs	r3, #1
 800c326:	d503      	bpl.n	800c330 <__sfp+0x28>
 800c328:	6833      	ldr	r3, [r6, #0]
 800c32a:	b30b      	cbz	r3, 800c370 <__sfp+0x68>
 800c32c:	6836      	ldr	r6, [r6, #0]
 800c32e:	e7f7      	b.n	800c320 <__sfp+0x18>
 800c330:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c334:	b9d5      	cbnz	r5, 800c36c <__sfp+0x64>
 800c336:	4b16      	ldr	r3, [pc, #88]	; (800c390 <__sfp+0x88>)
 800c338:	60e3      	str	r3, [r4, #12]
 800c33a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c33e:	6665      	str	r5, [r4, #100]	; 0x64
 800c340:	f000 f86c 	bl	800c41c <__retarget_lock_init_recursive>
 800c344:	f7ff ff96 	bl	800c274 <__sfp_lock_release>
 800c348:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c34c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c350:	6025      	str	r5, [r4, #0]
 800c352:	61a5      	str	r5, [r4, #24]
 800c354:	2208      	movs	r2, #8
 800c356:	4629      	mov	r1, r5
 800c358:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c35c:	f000 f86f 	bl	800c43e <memset>
 800c360:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c364:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c368:	4620      	mov	r0, r4
 800c36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c36c:	3468      	adds	r4, #104	; 0x68
 800c36e:	e7d9      	b.n	800c324 <__sfp+0x1c>
 800c370:	2104      	movs	r1, #4
 800c372:	4638      	mov	r0, r7
 800c374:	f7ff ff62 	bl	800c23c <__sfmoreglue>
 800c378:	4604      	mov	r4, r0
 800c37a:	6030      	str	r0, [r6, #0]
 800c37c:	2800      	cmp	r0, #0
 800c37e:	d1d5      	bne.n	800c32c <__sfp+0x24>
 800c380:	f7ff ff78 	bl	800c274 <__sfp_lock_release>
 800c384:	230c      	movs	r3, #12
 800c386:	603b      	str	r3, [r7, #0]
 800c388:	e7ee      	b.n	800c368 <__sfp+0x60>
 800c38a:	bf00      	nop
 800c38c:	0800e170 	.word	0x0800e170
 800c390:	ffff0001 	.word	0xffff0001

0800c394 <_fwalk_reent>:
 800c394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c398:	4606      	mov	r6, r0
 800c39a:	4688      	mov	r8, r1
 800c39c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c3a0:	2700      	movs	r7, #0
 800c3a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c3a6:	f1b9 0901 	subs.w	r9, r9, #1
 800c3aa:	d505      	bpl.n	800c3b8 <_fwalk_reent+0x24>
 800c3ac:	6824      	ldr	r4, [r4, #0]
 800c3ae:	2c00      	cmp	r4, #0
 800c3b0:	d1f7      	bne.n	800c3a2 <_fwalk_reent+0xe>
 800c3b2:	4638      	mov	r0, r7
 800c3b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3b8:	89ab      	ldrh	r3, [r5, #12]
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d907      	bls.n	800c3ce <_fwalk_reent+0x3a>
 800c3be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	d003      	beq.n	800c3ce <_fwalk_reent+0x3a>
 800c3c6:	4629      	mov	r1, r5
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	47c0      	blx	r8
 800c3cc:	4307      	orrs	r7, r0
 800c3ce:	3568      	adds	r5, #104	; 0x68
 800c3d0:	e7e9      	b.n	800c3a6 <_fwalk_reent+0x12>
	...

0800c3d4 <__libc_init_array>:
 800c3d4:	b570      	push	{r4, r5, r6, lr}
 800c3d6:	4d0d      	ldr	r5, [pc, #52]	; (800c40c <__libc_init_array+0x38>)
 800c3d8:	4c0d      	ldr	r4, [pc, #52]	; (800c410 <__libc_init_array+0x3c>)
 800c3da:	1b64      	subs	r4, r4, r5
 800c3dc:	10a4      	asrs	r4, r4, #2
 800c3de:	2600      	movs	r6, #0
 800c3e0:	42a6      	cmp	r6, r4
 800c3e2:	d109      	bne.n	800c3f8 <__libc_init_array+0x24>
 800c3e4:	4d0b      	ldr	r5, [pc, #44]	; (800c414 <__libc_init_array+0x40>)
 800c3e6:	4c0c      	ldr	r4, [pc, #48]	; (800c418 <__libc_init_array+0x44>)
 800c3e8:	f001 fa7e 	bl	800d8e8 <_init>
 800c3ec:	1b64      	subs	r4, r4, r5
 800c3ee:	10a4      	asrs	r4, r4, #2
 800c3f0:	2600      	movs	r6, #0
 800c3f2:	42a6      	cmp	r6, r4
 800c3f4:	d105      	bne.n	800c402 <__libc_init_array+0x2e>
 800c3f6:	bd70      	pop	{r4, r5, r6, pc}
 800c3f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3fc:	4798      	blx	r3
 800c3fe:	3601      	adds	r6, #1
 800c400:	e7ee      	b.n	800c3e0 <__libc_init_array+0xc>
 800c402:	f855 3b04 	ldr.w	r3, [r5], #4
 800c406:	4798      	blx	r3
 800c408:	3601      	adds	r6, #1
 800c40a:	e7f2      	b.n	800c3f2 <__libc_init_array+0x1e>
 800c40c:	0800e260 	.word	0x0800e260
 800c410:	0800e260 	.word	0x0800e260
 800c414:	0800e260 	.word	0x0800e260
 800c418:	0800e264 	.word	0x0800e264

0800c41c <__retarget_lock_init_recursive>:
 800c41c:	4770      	bx	lr

0800c41e <__retarget_lock_acquire_recursive>:
 800c41e:	4770      	bx	lr

0800c420 <__retarget_lock_release_recursive>:
 800c420:	4770      	bx	lr

0800c422 <memcpy>:
 800c422:	440a      	add	r2, r1
 800c424:	4291      	cmp	r1, r2
 800c426:	f100 33ff 	add.w	r3, r0, #4294967295
 800c42a:	d100      	bne.n	800c42e <memcpy+0xc>
 800c42c:	4770      	bx	lr
 800c42e:	b510      	push	{r4, lr}
 800c430:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c434:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c438:	4291      	cmp	r1, r2
 800c43a:	d1f9      	bne.n	800c430 <memcpy+0xe>
 800c43c:	bd10      	pop	{r4, pc}

0800c43e <memset>:
 800c43e:	4402      	add	r2, r0
 800c440:	4603      	mov	r3, r0
 800c442:	4293      	cmp	r3, r2
 800c444:	d100      	bne.n	800c448 <memset+0xa>
 800c446:	4770      	bx	lr
 800c448:	f803 1b01 	strb.w	r1, [r3], #1
 800c44c:	e7f9      	b.n	800c442 <memset+0x4>
	...

0800c450 <sbrk_aligned>:
 800c450:	b570      	push	{r4, r5, r6, lr}
 800c452:	4e0e      	ldr	r6, [pc, #56]	; (800c48c <sbrk_aligned+0x3c>)
 800c454:	460c      	mov	r4, r1
 800c456:	6831      	ldr	r1, [r6, #0]
 800c458:	4605      	mov	r5, r0
 800c45a:	b911      	cbnz	r1, 800c462 <sbrk_aligned+0x12>
 800c45c:	f000 f984 	bl	800c768 <_sbrk_r>
 800c460:	6030      	str	r0, [r6, #0]
 800c462:	4621      	mov	r1, r4
 800c464:	4628      	mov	r0, r5
 800c466:	f000 f97f 	bl	800c768 <_sbrk_r>
 800c46a:	1c43      	adds	r3, r0, #1
 800c46c:	d00a      	beq.n	800c484 <sbrk_aligned+0x34>
 800c46e:	1cc4      	adds	r4, r0, #3
 800c470:	f024 0403 	bic.w	r4, r4, #3
 800c474:	42a0      	cmp	r0, r4
 800c476:	d007      	beq.n	800c488 <sbrk_aligned+0x38>
 800c478:	1a21      	subs	r1, r4, r0
 800c47a:	4628      	mov	r0, r5
 800c47c:	f000 f974 	bl	800c768 <_sbrk_r>
 800c480:	3001      	adds	r0, #1
 800c482:	d101      	bne.n	800c488 <sbrk_aligned+0x38>
 800c484:	f04f 34ff 	mov.w	r4, #4294967295
 800c488:	4620      	mov	r0, r4
 800c48a:	bd70      	pop	{r4, r5, r6, pc}
 800c48c:	200032f4 	.word	0x200032f4

0800c490 <_malloc_r>:
 800c490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c494:	1ccd      	adds	r5, r1, #3
 800c496:	f025 0503 	bic.w	r5, r5, #3
 800c49a:	3508      	adds	r5, #8
 800c49c:	2d0c      	cmp	r5, #12
 800c49e:	bf38      	it	cc
 800c4a0:	250c      	movcc	r5, #12
 800c4a2:	2d00      	cmp	r5, #0
 800c4a4:	4607      	mov	r7, r0
 800c4a6:	db01      	blt.n	800c4ac <_malloc_r+0x1c>
 800c4a8:	42a9      	cmp	r1, r5
 800c4aa:	d905      	bls.n	800c4b8 <_malloc_r+0x28>
 800c4ac:	230c      	movs	r3, #12
 800c4ae:	603b      	str	r3, [r7, #0]
 800c4b0:	2600      	movs	r6, #0
 800c4b2:	4630      	mov	r0, r6
 800c4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4b8:	4e2e      	ldr	r6, [pc, #184]	; (800c574 <_malloc_r+0xe4>)
 800c4ba:	f000 fca1 	bl	800ce00 <__malloc_lock>
 800c4be:	6833      	ldr	r3, [r6, #0]
 800c4c0:	461c      	mov	r4, r3
 800c4c2:	bb34      	cbnz	r4, 800c512 <_malloc_r+0x82>
 800c4c4:	4629      	mov	r1, r5
 800c4c6:	4638      	mov	r0, r7
 800c4c8:	f7ff ffc2 	bl	800c450 <sbrk_aligned>
 800c4cc:	1c43      	adds	r3, r0, #1
 800c4ce:	4604      	mov	r4, r0
 800c4d0:	d14d      	bne.n	800c56e <_malloc_r+0xde>
 800c4d2:	6834      	ldr	r4, [r6, #0]
 800c4d4:	4626      	mov	r6, r4
 800c4d6:	2e00      	cmp	r6, #0
 800c4d8:	d140      	bne.n	800c55c <_malloc_r+0xcc>
 800c4da:	6823      	ldr	r3, [r4, #0]
 800c4dc:	4631      	mov	r1, r6
 800c4de:	4638      	mov	r0, r7
 800c4e0:	eb04 0803 	add.w	r8, r4, r3
 800c4e4:	f000 f940 	bl	800c768 <_sbrk_r>
 800c4e8:	4580      	cmp	r8, r0
 800c4ea:	d13a      	bne.n	800c562 <_malloc_r+0xd2>
 800c4ec:	6821      	ldr	r1, [r4, #0]
 800c4ee:	3503      	adds	r5, #3
 800c4f0:	1a6d      	subs	r5, r5, r1
 800c4f2:	f025 0503 	bic.w	r5, r5, #3
 800c4f6:	3508      	adds	r5, #8
 800c4f8:	2d0c      	cmp	r5, #12
 800c4fa:	bf38      	it	cc
 800c4fc:	250c      	movcc	r5, #12
 800c4fe:	4629      	mov	r1, r5
 800c500:	4638      	mov	r0, r7
 800c502:	f7ff ffa5 	bl	800c450 <sbrk_aligned>
 800c506:	3001      	adds	r0, #1
 800c508:	d02b      	beq.n	800c562 <_malloc_r+0xd2>
 800c50a:	6823      	ldr	r3, [r4, #0]
 800c50c:	442b      	add	r3, r5
 800c50e:	6023      	str	r3, [r4, #0]
 800c510:	e00e      	b.n	800c530 <_malloc_r+0xa0>
 800c512:	6822      	ldr	r2, [r4, #0]
 800c514:	1b52      	subs	r2, r2, r5
 800c516:	d41e      	bmi.n	800c556 <_malloc_r+0xc6>
 800c518:	2a0b      	cmp	r2, #11
 800c51a:	d916      	bls.n	800c54a <_malloc_r+0xba>
 800c51c:	1961      	adds	r1, r4, r5
 800c51e:	42a3      	cmp	r3, r4
 800c520:	6025      	str	r5, [r4, #0]
 800c522:	bf18      	it	ne
 800c524:	6059      	strne	r1, [r3, #4]
 800c526:	6863      	ldr	r3, [r4, #4]
 800c528:	bf08      	it	eq
 800c52a:	6031      	streq	r1, [r6, #0]
 800c52c:	5162      	str	r2, [r4, r5]
 800c52e:	604b      	str	r3, [r1, #4]
 800c530:	4638      	mov	r0, r7
 800c532:	f104 060b 	add.w	r6, r4, #11
 800c536:	f000 fc69 	bl	800ce0c <__malloc_unlock>
 800c53a:	f026 0607 	bic.w	r6, r6, #7
 800c53e:	1d23      	adds	r3, r4, #4
 800c540:	1af2      	subs	r2, r6, r3
 800c542:	d0b6      	beq.n	800c4b2 <_malloc_r+0x22>
 800c544:	1b9b      	subs	r3, r3, r6
 800c546:	50a3      	str	r3, [r4, r2]
 800c548:	e7b3      	b.n	800c4b2 <_malloc_r+0x22>
 800c54a:	6862      	ldr	r2, [r4, #4]
 800c54c:	42a3      	cmp	r3, r4
 800c54e:	bf0c      	ite	eq
 800c550:	6032      	streq	r2, [r6, #0]
 800c552:	605a      	strne	r2, [r3, #4]
 800c554:	e7ec      	b.n	800c530 <_malloc_r+0xa0>
 800c556:	4623      	mov	r3, r4
 800c558:	6864      	ldr	r4, [r4, #4]
 800c55a:	e7b2      	b.n	800c4c2 <_malloc_r+0x32>
 800c55c:	4634      	mov	r4, r6
 800c55e:	6876      	ldr	r6, [r6, #4]
 800c560:	e7b9      	b.n	800c4d6 <_malloc_r+0x46>
 800c562:	230c      	movs	r3, #12
 800c564:	603b      	str	r3, [r7, #0]
 800c566:	4638      	mov	r0, r7
 800c568:	f000 fc50 	bl	800ce0c <__malloc_unlock>
 800c56c:	e7a1      	b.n	800c4b2 <_malloc_r+0x22>
 800c56e:	6025      	str	r5, [r4, #0]
 800c570:	e7de      	b.n	800c530 <_malloc_r+0xa0>
 800c572:	bf00      	nop
 800c574:	200032f0 	.word	0x200032f0

0800c578 <iprintf>:
 800c578:	b40f      	push	{r0, r1, r2, r3}
 800c57a:	4b0a      	ldr	r3, [pc, #40]	; (800c5a4 <iprintf+0x2c>)
 800c57c:	b513      	push	{r0, r1, r4, lr}
 800c57e:	681c      	ldr	r4, [r3, #0]
 800c580:	b124      	cbz	r4, 800c58c <iprintf+0x14>
 800c582:	69a3      	ldr	r3, [r4, #24]
 800c584:	b913      	cbnz	r3, 800c58c <iprintf+0x14>
 800c586:	4620      	mov	r0, r4
 800c588:	f7ff fe86 	bl	800c298 <__sinit>
 800c58c:	ab05      	add	r3, sp, #20
 800c58e:	9a04      	ldr	r2, [sp, #16]
 800c590:	68a1      	ldr	r1, [r4, #8]
 800c592:	9301      	str	r3, [sp, #4]
 800c594:	4620      	mov	r0, r4
 800c596:	f000 fe11 	bl	800d1bc <_vfiprintf_r>
 800c59a:	b002      	add	sp, #8
 800c59c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5a0:	b004      	add	sp, #16
 800c5a2:	4770      	bx	lr
 800c5a4:	20000044 	.word	0x20000044

0800c5a8 <_puts_r>:
 800c5a8:	b570      	push	{r4, r5, r6, lr}
 800c5aa:	460e      	mov	r6, r1
 800c5ac:	4605      	mov	r5, r0
 800c5ae:	b118      	cbz	r0, 800c5b8 <_puts_r+0x10>
 800c5b0:	6983      	ldr	r3, [r0, #24]
 800c5b2:	b90b      	cbnz	r3, 800c5b8 <_puts_r+0x10>
 800c5b4:	f7ff fe70 	bl	800c298 <__sinit>
 800c5b8:	69ab      	ldr	r3, [r5, #24]
 800c5ba:	68ac      	ldr	r4, [r5, #8]
 800c5bc:	b913      	cbnz	r3, 800c5c4 <_puts_r+0x1c>
 800c5be:	4628      	mov	r0, r5
 800c5c0:	f7ff fe6a 	bl	800c298 <__sinit>
 800c5c4:	4b2c      	ldr	r3, [pc, #176]	; (800c678 <_puts_r+0xd0>)
 800c5c6:	429c      	cmp	r4, r3
 800c5c8:	d120      	bne.n	800c60c <_puts_r+0x64>
 800c5ca:	686c      	ldr	r4, [r5, #4]
 800c5cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5ce:	07db      	lsls	r3, r3, #31
 800c5d0:	d405      	bmi.n	800c5de <_puts_r+0x36>
 800c5d2:	89a3      	ldrh	r3, [r4, #12]
 800c5d4:	0598      	lsls	r0, r3, #22
 800c5d6:	d402      	bmi.n	800c5de <_puts_r+0x36>
 800c5d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5da:	f7ff ff20 	bl	800c41e <__retarget_lock_acquire_recursive>
 800c5de:	89a3      	ldrh	r3, [r4, #12]
 800c5e0:	0719      	lsls	r1, r3, #28
 800c5e2:	d51d      	bpl.n	800c620 <_puts_r+0x78>
 800c5e4:	6923      	ldr	r3, [r4, #16]
 800c5e6:	b1db      	cbz	r3, 800c620 <_puts_r+0x78>
 800c5e8:	3e01      	subs	r6, #1
 800c5ea:	68a3      	ldr	r3, [r4, #8]
 800c5ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c5f0:	3b01      	subs	r3, #1
 800c5f2:	60a3      	str	r3, [r4, #8]
 800c5f4:	bb39      	cbnz	r1, 800c646 <_puts_r+0x9e>
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	da38      	bge.n	800c66c <_puts_r+0xc4>
 800c5fa:	4622      	mov	r2, r4
 800c5fc:	210a      	movs	r1, #10
 800c5fe:	4628      	mov	r0, r5
 800c600:	f000 f9aa 	bl	800c958 <__swbuf_r>
 800c604:	3001      	adds	r0, #1
 800c606:	d011      	beq.n	800c62c <_puts_r+0x84>
 800c608:	250a      	movs	r5, #10
 800c60a:	e011      	b.n	800c630 <_puts_r+0x88>
 800c60c:	4b1b      	ldr	r3, [pc, #108]	; (800c67c <_puts_r+0xd4>)
 800c60e:	429c      	cmp	r4, r3
 800c610:	d101      	bne.n	800c616 <_puts_r+0x6e>
 800c612:	68ac      	ldr	r4, [r5, #8]
 800c614:	e7da      	b.n	800c5cc <_puts_r+0x24>
 800c616:	4b1a      	ldr	r3, [pc, #104]	; (800c680 <_puts_r+0xd8>)
 800c618:	429c      	cmp	r4, r3
 800c61a:	bf08      	it	eq
 800c61c:	68ec      	ldreq	r4, [r5, #12]
 800c61e:	e7d5      	b.n	800c5cc <_puts_r+0x24>
 800c620:	4621      	mov	r1, r4
 800c622:	4628      	mov	r0, r5
 800c624:	f000 f9fc 	bl	800ca20 <__swsetup_r>
 800c628:	2800      	cmp	r0, #0
 800c62a:	d0dd      	beq.n	800c5e8 <_puts_r+0x40>
 800c62c:	f04f 35ff 	mov.w	r5, #4294967295
 800c630:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c632:	07da      	lsls	r2, r3, #31
 800c634:	d405      	bmi.n	800c642 <_puts_r+0x9a>
 800c636:	89a3      	ldrh	r3, [r4, #12]
 800c638:	059b      	lsls	r3, r3, #22
 800c63a:	d402      	bmi.n	800c642 <_puts_r+0x9a>
 800c63c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c63e:	f7ff feef 	bl	800c420 <__retarget_lock_release_recursive>
 800c642:	4628      	mov	r0, r5
 800c644:	bd70      	pop	{r4, r5, r6, pc}
 800c646:	2b00      	cmp	r3, #0
 800c648:	da04      	bge.n	800c654 <_puts_r+0xac>
 800c64a:	69a2      	ldr	r2, [r4, #24]
 800c64c:	429a      	cmp	r2, r3
 800c64e:	dc06      	bgt.n	800c65e <_puts_r+0xb6>
 800c650:	290a      	cmp	r1, #10
 800c652:	d004      	beq.n	800c65e <_puts_r+0xb6>
 800c654:	6823      	ldr	r3, [r4, #0]
 800c656:	1c5a      	adds	r2, r3, #1
 800c658:	6022      	str	r2, [r4, #0]
 800c65a:	7019      	strb	r1, [r3, #0]
 800c65c:	e7c5      	b.n	800c5ea <_puts_r+0x42>
 800c65e:	4622      	mov	r2, r4
 800c660:	4628      	mov	r0, r5
 800c662:	f000 f979 	bl	800c958 <__swbuf_r>
 800c666:	3001      	adds	r0, #1
 800c668:	d1bf      	bne.n	800c5ea <_puts_r+0x42>
 800c66a:	e7df      	b.n	800c62c <_puts_r+0x84>
 800c66c:	6823      	ldr	r3, [r4, #0]
 800c66e:	250a      	movs	r5, #10
 800c670:	1c5a      	adds	r2, r3, #1
 800c672:	6022      	str	r2, [r4, #0]
 800c674:	701d      	strb	r5, [r3, #0]
 800c676:	e7db      	b.n	800c630 <_puts_r+0x88>
 800c678:	0800e130 	.word	0x0800e130
 800c67c:	0800e150 	.word	0x0800e150
 800c680:	0800e110 	.word	0x0800e110

0800c684 <puts>:
 800c684:	4b02      	ldr	r3, [pc, #8]	; (800c690 <puts+0xc>)
 800c686:	4601      	mov	r1, r0
 800c688:	6818      	ldr	r0, [r3, #0]
 800c68a:	f7ff bf8d 	b.w	800c5a8 <_puts_r>
 800c68e:	bf00      	nop
 800c690:	20000044 	.word	0x20000044

0800c694 <cleanup_glue>:
 800c694:	b538      	push	{r3, r4, r5, lr}
 800c696:	460c      	mov	r4, r1
 800c698:	6809      	ldr	r1, [r1, #0]
 800c69a:	4605      	mov	r5, r0
 800c69c:	b109      	cbz	r1, 800c6a2 <cleanup_glue+0xe>
 800c69e:	f7ff fff9 	bl	800c694 <cleanup_glue>
 800c6a2:	4621      	mov	r1, r4
 800c6a4:	4628      	mov	r0, r5
 800c6a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6aa:	f000 bbb5 	b.w	800ce18 <_free_r>
	...

0800c6b0 <_reclaim_reent>:
 800c6b0:	4b2c      	ldr	r3, [pc, #176]	; (800c764 <_reclaim_reent+0xb4>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4283      	cmp	r3, r0
 800c6b6:	b570      	push	{r4, r5, r6, lr}
 800c6b8:	4604      	mov	r4, r0
 800c6ba:	d051      	beq.n	800c760 <_reclaim_reent+0xb0>
 800c6bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c6be:	b143      	cbz	r3, 800c6d2 <_reclaim_reent+0x22>
 800c6c0:	68db      	ldr	r3, [r3, #12]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d14a      	bne.n	800c75c <_reclaim_reent+0xac>
 800c6c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6c8:	6819      	ldr	r1, [r3, #0]
 800c6ca:	b111      	cbz	r1, 800c6d2 <_reclaim_reent+0x22>
 800c6cc:	4620      	mov	r0, r4
 800c6ce:	f000 fba3 	bl	800ce18 <_free_r>
 800c6d2:	6961      	ldr	r1, [r4, #20]
 800c6d4:	b111      	cbz	r1, 800c6dc <_reclaim_reent+0x2c>
 800c6d6:	4620      	mov	r0, r4
 800c6d8:	f000 fb9e 	bl	800ce18 <_free_r>
 800c6dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c6de:	b111      	cbz	r1, 800c6e6 <_reclaim_reent+0x36>
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f000 fb99 	bl	800ce18 <_free_r>
 800c6e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c6e8:	b111      	cbz	r1, 800c6f0 <_reclaim_reent+0x40>
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	f000 fb94 	bl	800ce18 <_free_r>
 800c6f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c6f2:	b111      	cbz	r1, 800c6fa <_reclaim_reent+0x4a>
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	f000 fb8f 	bl	800ce18 <_free_r>
 800c6fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c6fc:	b111      	cbz	r1, 800c704 <_reclaim_reent+0x54>
 800c6fe:	4620      	mov	r0, r4
 800c700:	f000 fb8a 	bl	800ce18 <_free_r>
 800c704:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c706:	b111      	cbz	r1, 800c70e <_reclaim_reent+0x5e>
 800c708:	4620      	mov	r0, r4
 800c70a:	f000 fb85 	bl	800ce18 <_free_r>
 800c70e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c710:	b111      	cbz	r1, 800c718 <_reclaim_reent+0x68>
 800c712:	4620      	mov	r0, r4
 800c714:	f000 fb80 	bl	800ce18 <_free_r>
 800c718:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c71a:	b111      	cbz	r1, 800c722 <_reclaim_reent+0x72>
 800c71c:	4620      	mov	r0, r4
 800c71e:	f000 fb7b 	bl	800ce18 <_free_r>
 800c722:	69a3      	ldr	r3, [r4, #24]
 800c724:	b1e3      	cbz	r3, 800c760 <_reclaim_reent+0xb0>
 800c726:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c728:	4620      	mov	r0, r4
 800c72a:	4798      	blx	r3
 800c72c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c72e:	b1b9      	cbz	r1, 800c760 <_reclaim_reent+0xb0>
 800c730:	4620      	mov	r0, r4
 800c732:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c736:	f7ff bfad 	b.w	800c694 <cleanup_glue>
 800c73a:	5949      	ldr	r1, [r1, r5]
 800c73c:	b941      	cbnz	r1, 800c750 <_reclaim_reent+0xa0>
 800c73e:	3504      	adds	r5, #4
 800c740:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c742:	2d80      	cmp	r5, #128	; 0x80
 800c744:	68d9      	ldr	r1, [r3, #12]
 800c746:	d1f8      	bne.n	800c73a <_reclaim_reent+0x8a>
 800c748:	4620      	mov	r0, r4
 800c74a:	f000 fb65 	bl	800ce18 <_free_r>
 800c74e:	e7ba      	b.n	800c6c6 <_reclaim_reent+0x16>
 800c750:	680e      	ldr	r6, [r1, #0]
 800c752:	4620      	mov	r0, r4
 800c754:	f000 fb60 	bl	800ce18 <_free_r>
 800c758:	4631      	mov	r1, r6
 800c75a:	e7ef      	b.n	800c73c <_reclaim_reent+0x8c>
 800c75c:	2500      	movs	r5, #0
 800c75e:	e7ef      	b.n	800c740 <_reclaim_reent+0x90>
 800c760:	bd70      	pop	{r4, r5, r6, pc}
 800c762:	bf00      	nop
 800c764:	20000044 	.word	0x20000044

0800c768 <_sbrk_r>:
 800c768:	b538      	push	{r3, r4, r5, lr}
 800c76a:	4d06      	ldr	r5, [pc, #24]	; (800c784 <_sbrk_r+0x1c>)
 800c76c:	2300      	movs	r3, #0
 800c76e:	4604      	mov	r4, r0
 800c770:	4608      	mov	r0, r1
 800c772:	602b      	str	r3, [r5, #0]
 800c774:	f7f5 f93c 	bl	80019f0 <_sbrk>
 800c778:	1c43      	adds	r3, r0, #1
 800c77a:	d102      	bne.n	800c782 <_sbrk_r+0x1a>
 800c77c:	682b      	ldr	r3, [r5, #0]
 800c77e:	b103      	cbz	r3, 800c782 <_sbrk_r+0x1a>
 800c780:	6023      	str	r3, [r4, #0]
 800c782:	bd38      	pop	{r3, r4, r5, pc}
 800c784:	200032f8 	.word	0x200032f8

0800c788 <siprintf>:
 800c788:	b40e      	push	{r1, r2, r3}
 800c78a:	b500      	push	{lr}
 800c78c:	b09c      	sub	sp, #112	; 0x70
 800c78e:	ab1d      	add	r3, sp, #116	; 0x74
 800c790:	9002      	str	r0, [sp, #8]
 800c792:	9006      	str	r0, [sp, #24]
 800c794:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c798:	4809      	ldr	r0, [pc, #36]	; (800c7c0 <siprintf+0x38>)
 800c79a:	9107      	str	r1, [sp, #28]
 800c79c:	9104      	str	r1, [sp, #16]
 800c79e:	4909      	ldr	r1, [pc, #36]	; (800c7c4 <siprintf+0x3c>)
 800c7a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7a4:	9105      	str	r1, [sp, #20]
 800c7a6:	6800      	ldr	r0, [r0, #0]
 800c7a8:	9301      	str	r3, [sp, #4]
 800c7aa:	a902      	add	r1, sp, #8
 800c7ac:	f000 fbdc 	bl	800cf68 <_svfiprintf_r>
 800c7b0:	9b02      	ldr	r3, [sp, #8]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	701a      	strb	r2, [r3, #0]
 800c7b6:	b01c      	add	sp, #112	; 0x70
 800c7b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7bc:	b003      	add	sp, #12
 800c7be:	4770      	bx	lr
 800c7c0:	20000044 	.word	0x20000044
 800c7c4:	ffff0208 	.word	0xffff0208

0800c7c8 <__sread>:
 800c7c8:	b510      	push	{r4, lr}
 800c7ca:	460c      	mov	r4, r1
 800c7cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7d0:	f000 ffb8 	bl	800d744 <_read_r>
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	bfab      	itete	ge
 800c7d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c7da:	89a3      	ldrhlt	r3, [r4, #12]
 800c7dc:	181b      	addge	r3, r3, r0
 800c7de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c7e2:	bfac      	ite	ge
 800c7e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c7e6:	81a3      	strhlt	r3, [r4, #12]
 800c7e8:	bd10      	pop	{r4, pc}

0800c7ea <__swrite>:
 800c7ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7ee:	461f      	mov	r7, r3
 800c7f0:	898b      	ldrh	r3, [r1, #12]
 800c7f2:	05db      	lsls	r3, r3, #23
 800c7f4:	4605      	mov	r5, r0
 800c7f6:	460c      	mov	r4, r1
 800c7f8:	4616      	mov	r6, r2
 800c7fa:	d505      	bpl.n	800c808 <__swrite+0x1e>
 800c7fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c800:	2302      	movs	r3, #2
 800c802:	2200      	movs	r2, #0
 800c804:	f000 fa7c 	bl	800cd00 <_lseek_r>
 800c808:	89a3      	ldrh	r3, [r4, #12]
 800c80a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c80e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c812:	81a3      	strh	r3, [r4, #12]
 800c814:	4632      	mov	r2, r6
 800c816:	463b      	mov	r3, r7
 800c818:	4628      	mov	r0, r5
 800c81a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c81e:	f000 b8ed 	b.w	800c9fc <_write_r>

0800c822 <__sseek>:
 800c822:	b510      	push	{r4, lr}
 800c824:	460c      	mov	r4, r1
 800c826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c82a:	f000 fa69 	bl	800cd00 <_lseek_r>
 800c82e:	1c43      	adds	r3, r0, #1
 800c830:	89a3      	ldrh	r3, [r4, #12]
 800c832:	bf15      	itete	ne
 800c834:	6560      	strne	r0, [r4, #84]	; 0x54
 800c836:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c83a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c83e:	81a3      	strheq	r3, [r4, #12]
 800c840:	bf18      	it	ne
 800c842:	81a3      	strhne	r3, [r4, #12]
 800c844:	bd10      	pop	{r4, pc}

0800c846 <__sclose>:
 800c846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c84a:	f000 b975 	b.w	800cb38 <_close_r>

0800c84e <strncpy>:
 800c84e:	b510      	push	{r4, lr}
 800c850:	3901      	subs	r1, #1
 800c852:	4603      	mov	r3, r0
 800c854:	b132      	cbz	r2, 800c864 <strncpy+0x16>
 800c856:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c85a:	f803 4b01 	strb.w	r4, [r3], #1
 800c85e:	3a01      	subs	r2, #1
 800c860:	2c00      	cmp	r4, #0
 800c862:	d1f7      	bne.n	800c854 <strncpy+0x6>
 800c864:	441a      	add	r2, r3
 800c866:	2100      	movs	r1, #0
 800c868:	4293      	cmp	r3, r2
 800c86a:	d100      	bne.n	800c86e <strncpy+0x20>
 800c86c:	bd10      	pop	{r4, pc}
 800c86e:	f803 1b01 	strb.w	r1, [r3], #1
 800c872:	e7f9      	b.n	800c868 <strncpy+0x1a>

0800c874 <strstr>:
 800c874:	780a      	ldrb	r2, [r1, #0]
 800c876:	b570      	push	{r4, r5, r6, lr}
 800c878:	b96a      	cbnz	r2, 800c896 <strstr+0x22>
 800c87a:	bd70      	pop	{r4, r5, r6, pc}
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d109      	bne.n	800c894 <strstr+0x20>
 800c880:	460c      	mov	r4, r1
 800c882:	4605      	mov	r5, r0
 800c884:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d0f6      	beq.n	800c87a <strstr+0x6>
 800c88c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c890:	429e      	cmp	r6, r3
 800c892:	d0f7      	beq.n	800c884 <strstr+0x10>
 800c894:	3001      	adds	r0, #1
 800c896:	7803      	ldrb	r3, [r0, #0]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d1ef      	bne.n	800c87c <strstr+0x8>
 800c89c:	4618      	mov	r0, r3
 800c89e:	e7ec      	b.n	800c87a <strstr+0x6>

0800c8a0 <strtok>:
 800c8a0:	4b16      	ldr	r3, [pc, #88]	; (800c8fc <strtok+0x5c>)
 800c8a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c8a4:	681e      	ldr	r6, [r3, #0]
 800c8a6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800c8a8:	4605      	mov	r5, r0
 800c8aa:	b9fc      	cbnz	r4, 800c8ec <strtok+0x4c>
 800c8ac:	2050      	movs	r0, #80	; 0x50
 800c8ae:	9101      	str	r1, [sp, #4]
 800c8b0:	f000 fa9e 	bl	800cdf0 <malloc>
 800c8b4:	9901      	ldr	r1, [sp, #4]
 800c8b6:	65b0      	str	r0, [r6, #88]	; 0x58
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	b920      	cbnz	r0, 800c8c6 <strtok+0x26>
 800c8bc:	4b10      	ldr	r3, [pc, #64]	; (800c900 <strtok+0x60>)
 800c8be:	4811      	ldr	r0, [pc, #68]	; (800c904 <strtok+0x64>)
 800c8c0:	2157      	movs	r1, #87	; 0x57
 800c8c2:	f000 f91b 	bl	800cafc <__assert_func>
 800c8c6:	e9c0 4400 	strd	r4, r4, [r0]
 800c8ca:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c8ce:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c8d2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c8d6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c8da:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c8de:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c8e2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c8e6:	6184      	str	r4, [r0, #24]
 800c8e8:	7704      	strb	r4, [r0, #28]
 800c8ea:	6244      	str	r4, [r0, #36]	; 0x24
 800c8ec:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	4628      	mov	r0, r5
 800c8f2:	b002      	add	sp, #8
 800c8f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c8f8:	f000 b806 	b.w	800c908 <__strtok_r>
 800c8fc:	20000044 	.word	0x20000044
 800c900:	0800e174 	.word	0x0800e174
 800c904:	0800e18b 	.word	0x0800e18b

0800c908 <__strtok_r>:
 800c908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c90a:	b908      	cbnz	r0, 800c910 <__strtok_r+0x8>
 800c90c:	6810      	ldr	r0, [r2, #0]
 800c90e:	b188      	cbz	r0, 800c934 <__strtok_r+0x2c>
 800c910:	4604      	mov	r4, r0
 800c912:	4620      	mov	r0, r4
 800c914:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c918:	460f      	mov	r7, r1
 800c91a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c91e:	b91e      	cbnz	r6, 800c928 <__strtok_r+0x20>
 800c920:	b965      	cbnz	r5, 800c93c <__strtok_r+0x34>
 800c922:	6015      	str	r5, [r2, #0]
 800c924:	4628      	mov	r0, r5
 800c926:	e005      	b.n	800c934 <__strtok_r+0x2c>
 800c928:	42b5      	cmp	r5, r6
 800c92a:	d1f6      	bne.n	800c91a <__strtok_r+0x12>
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d1f0      	bne.n	800c912 <__strtok_r+0xa>
 800c930:	6014      	str	r4, [r2, #0]
 800c932:	7003      	strb	r3, [r0, #0]
 800c934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c936:	461c      	mov	r4, r3
 800c938:	e00c      	b.n	800c954 <__strtok_r+0x4c>
 800c93a:	b915      	cbnz	r5, 800c942 <__strtok_r+0x3a>
 800c93c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c940:	460e      	mov	r6, r1
 800c942:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c946:	42ab      	cmp	r3, r5
 800c948:	d1f7      	bne.n	800c93a <__strtok_r+0x32>
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d0f3      	beq.n	800c936 <__strtok_r+0x2e>
 800c94e:	2300      	movs	r3, #0
 800c950:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c954:	6014      	str	r4, [r2, #0]
 800c956:	e7ed      	b.n	800c934 <__strtok_r+0x2c>

0800c958 <__swbuf_r>:
 800c958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c95a:	460e      	mov	r6, r1
 800c95c:	4614      	mov	r4, r2
 800c95e:	4605      	mov	r5, r0
 800c960:	b118      	cbz	r0, 800c96a <__swbuf_r+0x12>
 800c962:	6983      	ldr	r3, [r0, #24]
 800c964:	b90b      	cbnz	r3, 800c96a <__swbuf_r+0x12>
 800c966:	f7ff fc97 	bl	800c298 <__sinit>
 800c96a:	4b21      	ldr	r3, [pc, #132]	; (800c9f0 <__swbuf_r+0x98>)
 800c96c:	429c      	cmp	r4, r3
 800c96e:	d12b      	bne.n	800c9c8 <__swbuf_r+0x70>
 800c970:	686c      	ldr	r4, [r5, #4]
 800c972:	69a3      	ldr	r3, [r4, #24]
 800c974:	60a3      	str	r3, [r4, #8]
 800c976:	89a3      	ldrh	r3, [r4, #12]
 800c978:	071a      	lsls	r2, r3, #28
 800c97a:	d52f      	bpl.n	800c9dc <__swbuf_r+0x84>
 800c97c:	6923      	ldr	r3, [r4, #16]
 800c97e:	b36b      	cbz	r3, 800c9dc <__swbuf_r+0x84>
 800c980:	6923      	ldr	r3, [r4, #16]
 800c982:	6820      	ldr	r0, [r4, #0]
 800c984:	1ac0      	subs	r0, r0, r3
 800c986:	6963      	ldr	r3, [r4, #20]
 800c988:	b2f6      	uxtb	r6, r6
 800c98a:	4283      	cmp	r3, r0
 800c98c:	4637      	mov	r7, r6
 800c98e:	dc04      	bgt.n	800c99a <__swbuf_r+0x42>
 800c990:	4621      	mov	r1, r4
 800c992:	4628      	mov	r0, r5
 800c994:	f000 f966 	bl	800cc64 <_fflush_r>
 800c998:	bb30      	cbnz	r0, 800c9e8 <__swbuf_r+0x90>
 800c99a:	68a3      	ldr	r3, [r4, #8]
 800c99c:	3b01      	subs	r3, #1
 800c99e:	60a3      	str	r3, [r4, #8]
 800c9a0:	6823      	ldr	r3, [r4, #0]
 800c9a2:	1c5a      	adds	r2, r3, #1
 800c9a4:	6022      	str	r2, [r4, #0]
 800c9a6:	701e      	strb	r6, [r3, #0]
 800c9a8:	6963      	ldr	r3, [r4, #20]
 800c9aa:	3001      	adds	r0, #1
 800c9ac:	4283      	cmp	r3, r0
 800c9ae:	d004      	beq.n	800c9ba <__swbuf_r+0x62>
 800c9b0:	89a3      	ldrh	r3, [r4, #12]
 800c9b2:	07db      	lsls	r3, r3, #31
 800c9b4:	d506      	bpl.n	800c9c4 <__swbuf_r+0x6c>
 800c9b6:	2e0a      	cmp	r6, #10
 800c9b8:	d104      	bne.n	800c9c4 <__swbuf_r+0x6c>
 800c9ba:	4621      	mov	r1, r4
 800c9bc:	4628      	mov	r0, r5
 800c9be:	f000 f951 	bl	800cc64 <_fflush_r>
 800c9c2:	b988      	cbnz	r0, 800c9e8 <__swbuf_r+0x90>
 800c9c4:	4638      	mov	r0, r7
 800c9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9c8:	4b0a      	ldr	r3, [pc, #40]	; (800c9f4 <__swbuf_r+0x9c>)
 800c9ca:	429c      	cmp	r4, r3
 800c9cc:	d101      	bne.n	800c9d2 <__swbuf_r+0x7a>
 800c9ce:	68ac      	ldr	r4, [r5, #8]
 800c9d0:	e7cf      	b.n	800c972 <__swbuf_r+0x1a>
 800c9d2:	4b09      	ldr	r3, [pc, #36]	; (800c9f8 <__swbuf_r+0xa0>)
 800c9d4:	429c      	cmp	r4, r3
 800c9d6:	bf08      	it	eq
 800c9d8:	68ec      	ldreq	r4, [r5, #12]
 800c9da:	e7ca      	b.n	800c972 <__swbuf_r+0x1a>
 800c9dc:	4621      	mov	r1, r4
 800c9de:	4628      	mov	r0, r5
 800c9e0:	f000 f81e 	bl	800ca20 <__swsetup_r>
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	d0cb      	beq.n	800c980 <__swbuf_r+0x28>
 800c9e8:	f04f 37ff 	mov.w	r7, #4294967295
 800c9ec:	e7ea      	b.n	800c9c4 <__swbuf_r+0x6c>
 800c9ee:	bf00      	nop
 800c9f0:	0800e130 	.word	0x0800e130
 800c9f4:	0800e150 	.word	0x0800e150
 800c9f8:	0800e110 	.word	0x0800e110

0800c9fc <_write_r>:
 800c9fc:	b538      	push	{r3, r4, r5, lr}
 800c9fe:	4d07      	ldr	r5, [pc, #28]	; (800ca1c <_write_r+0x20>)
 800ca00:	4604      	mov	r4, r0
 800ca02:	4608      	mov	r0, r1
 800ca04:	4611      	mov	r1, r2
 800ca06:	2200      	movs	r2, #0
 800ca08:	602a      	str	r2, [r5, #0]
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	f7f4 f9c4 	bl	8000d98 <_write>
 800ca10:	1c43      	adds	r3, r0, #1
 800ca12:	d102      	bne.n	800ca1a <_write_r+0x1e>
 800ca14:	682b      	ldr	r3, [r5, #0]
 800ca16:	b103      	cbz	r3, 800ca1a <_write_r+0x1e>
 800ca18:	6023      	str	r3, [r4, #0]
 800ca1a:	bd38      	pop	{r3, r4, r5, pc}
 800ca1c:	200032f8 	.word	0x200032f8

0800ca20 <__swsetup_r>:
 800ca20:	4b32      	ldr	r3, [pc, #200]	; (800caec <__swsetup_r+0xcc>)
 800ca22:	b570      	push	{r4, r5, r6, lr}
 800ca24:	681d      	ldr	r5, [r3, #0]
 800ca26:	4606      	mov	r6, r0
 800ca28:	460c      	mov	r4, r1
 800ca2a:	b125      	cbz	r5, 800ca36 <__swsetup_r+0x16>
 800ca2c:	69ab      	ldr	r3, [r5, #24]
 800ca2e:	b913      	cbnz	r3, 800ca36 <__swsetup_r+0x16>
 800ca30:	4628      	mov	r0, r5
 800ca32:	f7ff fc31 	bl	800c298 <__sinit>
 800ca36:	4b2e      	ldr	r3, [pc, #184]	; (800caf0 <__swsetup_r+0xd0>)
 800ca38:	429c      	cmp	r4, r3
 800ca3a:	d10f      	bne.n	800ca5c <__swsetup_r+0x3c>
 800ca3c:	686c      	ldr	r4, [r5, #4]
 800ca3e:	89a3      	ldrh	r3, [r4, #12]
 800ca40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca44:	0719      	lsls	r1, r3, #28
 800ca46:	d42c      	bmi.n	800caa2 <__swsetup_r+0x82>
 800ca48:	06dd      	lsls	r5, r3, #27
 800ca4a:	d411      	bmi.n	800ca70 <__swsetup_r+0x50>
 800ca4c:	2309      	movs	r3, #9
 800ca4e:	6033      	str	r3, [r6, #0]
 800ca50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca54:	81a3      	strh	r3, [r4, #12]
 800ca56:	f04f 30ff 	mov.w	r0, #4294967295
 800ca5a:	e03e      	b.n	800cada <__swsetup_r+0xba>
 800ca5c:	4b25      	ldr	r3, [pc, #148]	; (800caf4 <__swsetup_r+0xd4>)
 800ca5e:	429c      	cmp	r4, r3
 800ca60:	d101      	bne.n	800ca66 <__swsetup_r+0x46>
 800ca62:	68ac      	ldr	r4, [r5, #8]
 800ca64:	e7eb      	b.n	800ca3e <__swsetup_r+0x1e>
 800ca66:	4b24      	ldr	r3, [pc, #144]	; (800caf8 <__swsetup_r+0xd8>)
 800ca68:	429c      	cmp	r4, r3
 800ca6a:	bf08      	it	eq
 800ca6c:	68ec      	ldreq	r4, [r5, #12]
 800ca6e:	e7e6      	b.n	800ca3e <__swsetup_r+0x1e>
 800ca70:	0758      	lsls	r0, r3, #29
 800ca72:	d512      	bpl.n	800ca9a <__swsetup_r+0x7a>
 800ca74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca76:	b141      	cbz	r1, 800ca8a <__swsetup_r+0x6a>
 800ca78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca7c:	4299      	cmp	r1, r3
 800ca7e:	d002      	beq.n	800ca86 <__swsetup_r+0x66>
 800ca80:	4630      	mov	r0, r6
 800ca82:	f000 f9c9 	bl	800ce18 <_free_r>
 800ca86:	2300      	movs	r3, #0
 800ca88:	6363      	str	r3, [r4, #52]	; 0x34
 800ca8a:	89a3      	ldrh	r3, [r4, #12]
 800ca8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca90:	81a3      	strh	r3, [r4, #12]
 800ca92:	2300      	movs	r3, #0
 800ca94:	6063      	str	r3, [r4, #4]
 800ca96:	6923      	ldr	r3, [r4, #16]
 800ca98:	6023      	str	r3, [r4, #0]
 800ca9a:	89a3      	ldrh	r3, [r4, #12]
 800ca9c:	f043 0308 	orr.w	r3, r3, #8
 800caa0:	81a3      	strh	r3, [r4, #12]
 800caa2:	6923      	ldr	r3, [r4, #16]
 800caa4:	b94b      	cbnz	r3, 800caba <__swsetup_r+0x9a>
 800caa6:	89a3      	ldrh	r3, [r4, #12]
 800caa8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800caac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cab0:	d003      	beq.n	800caba <__swsetup_r+0x9a>
 800cab2:	4621      	mov	r1, r4
 800cab4:	4630      	mov	r0, r6
 800cab6:	f000 f95b 	bl	800cd70 <__smakebuf_r>
 800caba:	89a0      	ldrh	r0, [r4, #12]
 800cabc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cac0:	f010 0301 	ands.w	r3, r0, #1
 800cac4:	d00a      	beq.n	800cadc <__swsetup_r+0xbc>
 800cac6:	2300      	movs	r3, #0
 800cac8:	60a3      	str	r3, [r4, #8]
 800caca:	6963      	ldr	r3, [r4, #20]
 800cacc:	425b      	negs	r3, r3
 800cace:	61a3      	str	r3, [r4, #24]
 800cad0:	6923      	ldr	r3, [r4, #16]
 800cad2:	b943      	cbnz	r3, 800cae6 <__swsetup_r+0xc6>
 800cad4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cad8:	d1ba      	bne.n	800ca50 <__swsetup_r+0x30>
 800cada:	bd70      	pop	{r4, r5, r6, pc}
 800cadc:	0781      	lsls	r1, r0, #30
 800cade:	bf58      	it	pl
 800cae0:	6963      	ldrpl	r3, [r4, #20]
 800cae2:	60a3      	str	r3, [r4, #8]
 800cae4:	e7f4      	b.n	800cad0 <__swsetup_r+0xb0>
 800cae6:	2000      	movs	r0, #0
 800cae8:	e7f7      	b.n	800cada <__swsetup_r+0xba>
 800caea:	bf00      	nop
 800caec:	20000044 	.word	0x20000044
 800caf0:	0800e130 	.word	0x0800e130
 800caf4:	0800e150 	.word	0x0800e150
 800caf8:	0800e110 	.word	0x0800e110

0800cafc <__assert_func>:
 800cafc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cafe:	4614      	mov	r4, r2
 800cb00:	461a      	mov	r2, r3
 800cb02:	4b09      	ldr	r3, [pc, #36]	; (800cb28 <__assert_func+0x2c>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	4605      	mov	r5, r0
 800cb08:	68d8      	ldr	r0, [r3, #12]
 800cb0a:	b14c      	cbz	r4, 800cb20 <__assert_func+0x24>
 800cb0c:	4b07      	ldr	r3, [pc, #28]	; (800cb2c <__assert_func+0x30>)
 800cb0e:	9100      	str	r1, [sp, #0]
 800cb10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb14:	4906      	ldr	r1, [pc, #24]	; (800cb30 <__assert_func+0x34>)
 800cb16:	462b      	mov	r3, r5
 800cb18:	f000 f8e0 	bl	800ccdc <fiprintf>
 800cb1c:	f000 fe24 	bl	800d768 <abort>
 800cb20:	4b04      	ldr	r3, [pc, #16]	; (800cb34 <__assert_func+0x38>)
 800cb22:	461c      	mov	r4, r3
 800cb24:	e7f3      	b.n	800cb0e <__assert_func+0x12>
 800cb26:	bf00      	nop
 800cb28:	20000044 	.word	0x20000044
 800cb2c:	0800e1e8 	.word	0x0800e1e8
 800cb30:	0800e1f5 	.word	0x0800e1f5
 800cb34:	0800e223 	.word	0x0800e223

0800cb38 <_close_r>:
 800cb38:	b538      	push	{r3, r4, r5, lr}
 800cb3a:	4d06      	ldr	r5, [pc, #24]	; (800cb54 <_close_r+0x1c>)
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	4604      	mov	r4, r0
 800cb40:	4608      	mov	r0, r1
 800cb42:	602b      	str	r3, [r5, #0]
 800cb44:	f7f4 ff1f 	bl	8001986 <_close>
 800cb48:	1c43      	adds	r3, r0, #1
 800cb4a:	d102      	bne.n	800cb52 <_close_r+0x1a>
 800cb4c:	682b      	ldr	r3, [r5, #0]
 800cb4e:	b103      	cbz	r3, 800cb52 <_close_r+0x1a>
 800cb50:	6023      	str	r3, [r4, #0]
 800cb52:	bd38      	pop	{r3, r4, r5, pc}
 800cb54:	200032f8 	.word	0x200032f8

0800cb58 <__sflush_r>:
 800cb58:	898a      	ldrh	r2, [r1, #12]
 800cb5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb5e:	4605      	mov	r5, r0
 800cb60:	0710      	lsls	r0, r2, #28
 800cb62:	460c      	mov	r4, r1
 800cb64:	d458      	bmi.n	800cc18 <__sflush_r+0xc0>
 800cb66:	684b      	ldr	r3, [r1, #4]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	dc05      	bgt.n	800cb78 <__sflush_r+0x20>
 800cb6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	dc02      	bgt.n	800cb78 <__sflush_r+0x20>
 800cb72:	2000      	movs	r0, #0
 800cb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb7a:	2e00      	cmp	r6, #0
 800cb7c:	d0f9      	beq.n	800cb72 <__sflush_r+0x1a>
 800cb7e:	2300      	movs	r3, #0
 800cb80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb84:	682f      	ldr	r7, [r5, #0]
 800cb86:	602b      	str	r3, [r5, #0]
 800cb88:	d032      	beq.n	800cbf0 <__sflush_r+0x98>
 800cb8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb8c:	89a3      	ldrh	r3, [r4, #12]
 800cb8e:	075a      	lsls	r2, r3, #29
 800cb90:	d505      	bpl.n	800cb9e <__sflush_r+0x46>
 800cb92:	6863      	ldr	r3, [r4, #4]
 800cb94:	1ac0      	subs	r0, r0, r3
 800cb96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb98:	b10b      	cbz	r3, 800cb9e <__sflush_r+0x46>
 800cb9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb9c:	1ac0      	subs	r0, r0, r3
 800cb9e:	2300      	movs	r3, #0
 800cba0:	4602      	mov	r2, r0
 800cba2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cba4:	6a21      	ldr	r1, [r4, #32]
 800cba6:	4628      	mov	r0, r5
 800cba8:	47b0      	blx	r6
 800cbaa:	1c43      	adds	r3, r0, #1
 800cbac:	89a3      	ldrh	r3, [r4, #12]
 800cbae:	d106      	bne.n	800cbbe <__sflush_r+0x66>
 800cbb0:	6829      	ldr	r1, [r5, #0]
 800cbb2:	291d      	cmp	r1, #29
 800cbb4:	d82c      	bhi.n	800cc10 <__sflush_r+0xb8>
 800cbb6:	4a2a      	ldr	r2, [pc, #168]	; (800cc60 <__sflush_r+0x108>)
 800cbb8:	40ca      	lsrs	r2, r1
 800cbba:	07d6      	lsls	r6, r2, #31
 800cbbc:	d528      	bpl.n	800cc10 <__sflush_r+0xb8>
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	6062      	str	r2, [r4, #4]
 800cbc2:	04d9      	lsls	r1, r3, #19
 800cbc4:	6922      	ldr	r2, [r4, #16]
 800cbc6:	6022      	str	r2, [r4, #0]
 800cbc8:	d504      	bpl.n	800cbd4 <__sflush_r+0x7c>
 800cbca:	1c42      	adds	r2, r0, #1
 800cbcc:	d101      	bne.n	800cbd2 <__sflush_r+0x7a>
 800cbce:	682b      	ldr	r3, [r5, #0]
 800cbd0:	b903      	cbnz	r3, 800cbd4 <__sflush_r+0x7c>
 800cbd2:	6560      	str	r0, [r4, #84]	; 0x54
 800cbd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbd6:	602f      	str	r7, [r5, #0]
 800cbd8:	2900      	cmp	r1, #0
 800cbda:	d0ca      	beq.n	800cb72 <__sflush_r+0x1a>
 800cbdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbe0:	4299      	cmp	r1, r3
 800cbe2:	d002      	beq.n	800cbea <__sflush_r+0x92>
 800cbe4:	4628      	mov	r0, r5
 800cbe6:	f000 f917 	bl	800ce18 <_free_r>
 800cbea:	2000      	movs	r0, #0
 800cbec:	6360      	str	r0, [r4, #52]	; 0x34
 800cbee:	e7c1      	b.n	800cb74 <__sflush_r+0x1c>
 800cbf0:	6a21      	ldr	r1, [r4, #32]
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	4628      	mov	r0, r5
 800cbf6:	47b0      	blx	r6
 800cbf8:	1c41      	adds	r1, r0, #1
 800cbfa:	d1c7      	bne.n	800cb8c <__sflush_r+0x34>
 800cbfc:	682b      	ldr	r3, [r5, #0]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d0c4      	beq.n	800cb8c <__sflush_r+0x34>
 800cc02:	2b1d      	cmp	r3, #29
 800cc04:	d001      	beq.n	800cc0a <__sflush_r+0xb2>
 800cc06:	2b16      	cmp	r3, #22
 800cc08:	d101      	bne.n	800cc0e <__sflush_r+0xb6>
 800cc0a:	602f      	str	r7, [r5, #0]
 800cc0c:	e7b1      	b.n	800cb72 <__sflush_r+0x1a>
 800cc0e:	89a3      	ldrh	r3, [r4, #12]
 800cc10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc14:	81a3      	strh	r3, [r4, #12]
 800cc16:	e7ad      	b.n	800cb74 <__sflush_r+0x1c>
 800cc18:	690f      	ldr	r7, [r1, #16]
 800cc1a:	2f00      	cmp	r7, #0
 800cc1c:	d0a9      	beq.n	800cb72 <__sflush_r+0x1a>
 800cc1e:	0793      	lsls	r3, r2, #30
 800cc20:	680e      	ldr	r6, [r1, #0]
 800cc22:	bf08      	it	eq
 800cc24:	694b      	ldreq	r3, [r1, #20]
 800cc26:	600f      	str	r7, [r1, #0]
 800cc28:	bf18      	it	ne
 800cc2a:	2300      	movne	r3, #0
 800cc2c:	eba6 0807 	sub.w	r8, r6, r7
 800cc30:	608b      	str	r3, [r1, #8]
 800cc32:	f1b8 0f00 	cmp.w	r8, #0
 800cc36:	dd9c      	ble.n	800cb72 <__sflush_r+0x1a>
 800cc38:	6a21      	ldr	r1, [r4, #32]
 800cc3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cc3c:	4643      	mov	r3, r8
 800cc3e:	463a      	mov	r2, r7
 800cc40:	4628      	mov	r0, r5
 800cc42:	47b0      	blx	r6
 800cc44:	2800      	cmp	r0, #0
 800cc46:	dc06      	bgt.n	800cc56 <__sflush_r+0xfe>
 800cc48:	89a3      	ldrh	r3, [r4, #12]
 800cc4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc4e:	81a3      	strh	r3, [r4, #12]
 800cc50:	f04f 30ff 	mov.w	r0, #4294967295
 800cc54:	e78e      	b.n	800cb74 <__sflush_r+0x1c>
 800cc56:	4407      	add	r7, r0
 800cc58:	eba8 0800 	sub.w	r8, r8, r0
 800cc5c:	e7e9      	b.n	800cc32 <__sflush_r+0xda>
 800cc5e:	bf00      	nop
 800cc60:	20400001 	.word	0x20400001

0800cc64 <_fflush_r>:
 800cc64:	b538      	push	{r3, r4, r5, lr}
 800cc66:	690b      	ldr	r3, [r1, #16]
 800cc68:	4605      	mov	r5, r0
 800cc6a:	460c      	mov	r4, r1
 800cc6c:	b913      	cbnz	r3, 800cc74 <_fflush_r+0x10>
 800cc6e:	2500      	movs	r5, #0
 800cc70:	4628      	mov	r0, r5
 800cc72:	bd38      	pop	{r3, r4, r5, pc}
 800cc74:	b118      	cbz	r0, 800cc7e <_fflush_r+0x1a>
 800cc76:	6983      	ldr	r3, [r0, #24]
 800cc78:	b90b      	cbnz	r3, 800cc7e <_fflush_r+0x1a>
 800cc7a:	f7ff fb0d 	bl	800c298 <__sinit>
 800cc7e:	4b14      	ldr	r3, [pc, #80]	; (800ccd0 <_fflush_r+0x6c>)
 800cc80:	429c      	cmp	r4, r3
 800cc82:	d11b      	bne.n	800ccbc <_fflush_r+0x58>
 800cc84:	686c      	ldr	r4, [r5, #4]
 800cc86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d0ef      	beq.n	800cc6e <_fflush_r+0xa>
 800cc8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc90:	07d0      	lsls	r0, r2, #31
 800cc92:	d404      	bmi.n	800cc9e <_fflush_r+0x3a>
 800cc94:	0599      	lsls	r1, r3, #22
 800cc96:	d402      	bmi.n	800cc9e <_fflush_r+0x3a>
 800cc98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc9a:	f7ff fbc0 	bl	800c41e <__retarget_lock_acquire_recursive>
 800cc9e:	4628      	mov	r0, r5
 800cca0:	4621      	mov	r1, r4
 800cca2:	f7ff ff59 	bl	800cb58 <__sflush_r>
 800cca6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cca8:	07da      	lsls	r2, r3, #31
 800ccaa:	4605      	mov	r5, r0
 800ccac:	d4e0      	bmi.n	800cc70 <_fflush_r+0xc>
 800ccae:	89a3      	ldrh	r3, [r4, #12]
 800ccb0:	059b      	lsls	r3, r3, #22
 800ccb2:	d4dd      	bmi.n	800cc70 <_fflush_r+0xc>
 800ccb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccb6:	f7ff fbb3 	bl	800c420 <__retarget_lock_release_recursive>
 800ccba:	e7d9      	b.n	800cc70 <_fflush_r+0xc>
 800ccbc:	4b05      	ldr	r3, [pc, #20]	; (800ccd4 <_fflush_r+0x70>)
 800ccbe:	429c      	cmp	r4, r3
 800ccc0:	d101      	bne.n	800ccc6 <_fflush_r+0x62>
 800ccc2:	68ac      	ldr	r4, [r5, #8]
 800ccc4:	e7df      	b.n	800cc86 <_fflush_r+0x22>
 800ccc6:	4b04      	ldr	r3, [pc, #16]	; (800ccd8 <_fflush_r+0x74>)
 800ccc8:	429c      	cmp	r4, r3
 800ccca:	bf08      	it	eq
 800cccc:	68ec      	ldreq	r4, [r5, #12]
 800ccce:	e7da      	b.n	800cc86 <_fflush_r+0x22>
 800ccd0:	0800e130 	.word	0x0800e130
 800ccd4:	0800e150 	.word	0x0800e150
 800ccd8:	0800e110 	.word	0x0800e110

0800ccdc <fiprintf>:
 800ccdc:	b40e      	push	{r1, r2, r3}
 800ccde:	b503      	push	{r0, r1, lr}
 800cce0:	4601      	mov	r1, r0
 800cce2:	ab03      	add	r3, sp, #12
 800cce4:	4805      	ldr	r0, [pc, #20]	; (800ccfc <fiprintf+0x20>)
 800cce6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccea:	6800      	ldr	r0, [r0, #0]
 800ccec:	9301      	str	r3, [sp, #4]
 800ccee:	f000 fa65 	bl	800d1bc <_vfiprintf_r>
 800ccf2:	b002      	add	sp, #8
 800ccf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccf8:	b003      	add	sp, #12
 800ccfa:	4770      	bx	lr
 800ccfc:	20000044 	.word	0x20000044

0800cd00 <_lseek_r>:
 800cd00:	b538      	push	{r3, r4, r5, lr}
 800cd02:	4d07      	ldr	r5, [pc, #28]	; (800cd20 <_lseek_r+0x20>)
 800cd04:	4604      	mov	r4, r0
 800cd06:	4608      	mov	r0, r1
 800cd08:	4611      	mov	r1, r2
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	602a      	str	r2, [r5, #0]
 800cd0e:	461a      	mov	r2, r3
 800cd10:	f7f4 fe60 	bl	80019d4 <_lseek>
 800cd14:	1c43      	adds	r3, r0, #1
 800cd16:	d102      	bne.n	800cd1e <_lseek_r+0x1e>
 800cd18:	682b      	ldr	r3, [r5, #0]
 800cd1a:	b103      	cbz	r3, 800cd1e <_lseek_r+0x1e>
 800cd1c:	6023      	str	r3, [r4, #0]
 800cd1e:	bd38      	pop	{r3, r4, r5, pc}
 800cd20:	200032f8 	.word	0x200032f8

0800cd24 <__swhatbuf_r>:
 800cd24:	b570      	push	{r4, r5, r6, lr}
 800cd26:	460e      	mov	r6, r1
 800cd28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd2c:	2900      	cmp	r1, #0
 800cd2e:	b096      	sub	sp, #88	; 0x58
 800cd30:	4614      	mov	r4, r2
 800cd32:	461d      	mov	r5, r3
 800cd34:	da08      	bge.n	800cd48 <__swhatbuf_r+0x24>
 800cd36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	602a      	str	r2, [r5, #0]
 800cd3e:	061a      	lsls	r2, r3, #24
 800cd40:	d410      	bmi.n	800cd64 <__swhatbuf_r+0x40>
 800cd42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd46:	e00e      	b.n	800cd66 <__swhatbuf_r+0x42>
 800cd48:	466a      	mov	r2, sp
 800cd4a:	f000 fd15 	bl	800d778 <_fstat_r>
 800cd4e:	2800      	cmp	r0, #0
 800cd50:	dbf1      	blt.n	800cd36 <__swhatbuf_r+0x12>
 800cd52:	9a01      	ldr	r2, [sp, #4]
 800cd54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cd58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cd5c:	425a      	negs	r2, r3
 800cd5e:	415a      	adcs	r2, r3
 800cd60:	602a      	str	r2, [r5, #0]
 800cd62:	e7ee      	b.n	800cd42 <__swhatbuf_r+0x1e>
 800cd64:	2340      	movs	r3, #64	; 0x40
 800cd66:	2000      	movs	r0, #0
 800cd68:	6023      	str	r3, [r4, #0]
 800cd6a:	b016      	add	sp, #88	; 0x58
 800cd6c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cd70 <__smakebuf_r>:
 800cd70:	898b      	ldrh	r3, [r1, #12]
 800cd72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd74:	079d      	lsls	r5, r3, #30
 800cd76:	4606      	mov	r6, r0
 800cd78:	460c      	mov	r4, r1
 800cd7a:	d507      	bpl.n	800cd8c <__smakebuf_r+0x1c>
 800cd7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd80:	6023      	str	r3, [r4, #0]
 800cd82:	6123      	str	r3, [r4, #16]
 800cd84:	2301      	movs	r3, #1
 800cd86:	6163      	str	r3, [r4, #20]
 800cd88:	b002      	add	sp, #8
 800cd8a:	bd70      	pop	{r4, r5, r6, pc}
 800cd8c:	ab01      	add	r3, sp, #4
 800cd8e:	466a      	mov	r2, sp
 800cd90:	f7ff ffc8 	bl	800cd24 <__swhatbuf_r>
 800cd94:	9900      	ldr	r1, [sp, #0]
 800cd96:	4605      	mov	r5, r0
 800cd98:	4630      	mov	r0, r6
 800cd9a:	f7ff fb79 	bl	800c490 <_malloc_r>
 800cd9e:	b948      	cbnz	r0, 800cdb4 <__smakebuf_r+0x44>
 800cda0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cda4:	059a      	lsls	r2, r3, #22
 800cda6:	d4ef      	bmi.n	800cd88 <__smakebuf_r+0x18>
 800cda8:	f023 0303 	bic.w	r3, r3, #3
 800cdac:	f043 0302 	orr.w	r3, r3, #2
 800cdb0:	81a3      	strh	r3, [r4, #12]
 800cdb2:	e7e3      	b.n	800cd7c <__smakebuf_r+0xc>
 800cdb4:	4b0d      	ldr	r3, [pc, #52]	; (800cdec <__smakebuf_r+0x7c>)
 800cdb6:	62b3      	str	r3, [r6, #40]	; 0x28
 800cdb8:	89a3      	ldrh	r3, [r4, #12]
 800cdba:	6020      	str	r0, [r4, #0]
 800cdbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdc0:	81a3      	strh	r3, [r4, #12]
 800cdc2:	9b00      	ldr	r3, [sp, #0]
 800cdc4:	6163      	str	r3, [r4, #20]
 800cdc6:	9b01      	ldr	r3, [sp, #4]
 800cdc8:	6120      	str	r0, [r4, #16]
 800cdca:	b15b      	cbz	r3, 800cde4 <__smakebuf_r+0x74>
 800cdcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdd0:	4630      	mov	r0, r6
 800cdd2:	f000 fce3 	bl	800d79c <_isatty_r>
 800cdd6:	b128      	cbz	r0, 800cde4 <__smakebuf_r+0x74>
 800cdd8:	89a3      	ldrh	r3, [r4, #12]
 800cdda:	f023 0303 	bic.w	r3, r3, #3
 800cdde:	f043 0301 	orr.w	r3, r3, #1
 800cde2:	81a3      	strh	r3, [r4, #12]
 800cde4:	89a0      	ldrh	r0, [r4, #12]
 800cde6:	4305      	orrs	r5, r0
 800cde8:	81a5      	strh	r5, [r4, #12]
 800cdea:	e7cd      	b.n	800cd88 <__smakebuf_r+0x18>
 800cdec:	0800c231 	.word	0x0800c231

0800cdf0 <malloc>:
 800cdf0:	4b02      	ldr	r3, [pc, #8]	; (800cdfc <malloc+0xc>)
 800cdf2:	4601      	mov	r1, r0
 800cdf4:	6818      	ldr	r0, [r3, #0]
 800cdf6:	f7ff bb4b 	b.w	800c490 <_malloc_r>
 800cdfa:	bf00      	nop
 800cdfc:	20000044 	.word	0x20000044

0800ce00 <__malloc_lock>:
 800ce00:	4801      	ldr	r0, [pc, #4]	; (800ce08 <__malloc_lock+0x8>)
 800ce02:	f7ff bb0c 	b.w	800c41e <__retarget_lock_acquire_recursive>
 800ce06:	bf00      	nop
 800ce08:	200032ec 	.word	0x200032ec

0800ce0c <__malloc_unlock>:
 800ce0c:	4801      	ldr	r0, [pc, #4]	; (800ce14 <__malloc_unlock+0x8>)
 800ce0e:	f7ff bb07 	b.w	800c420 <__retarget_lock_release_recursive>
 800ce12:	bf00      	nop
 800ce14:	200032ec 	.word	0x200032ec

0800ce18 <_free_r>:
 800ce18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce1a:	2900      	cmp	r1, #0
 800ce1c:	d044      	beq.n	800cea8 <_free_r+0x90>
 800ce1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce22:	9001      	str	r0, [sp, #4]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	f1a1 0404 	sub.w	r4, r1, #4
 800ce2a:	bfb8      	it	lt
 800ce2c:	18e4      	addlt	r4, r4, r3
 800ce2e:	f7ff ffe7 	bl	800ce00 <__malloc_lock>
 800ce32:	4a1e      	ldr	r2, [pc, #120]	; (800ceac <_free_r+0x94>)
 800ce34:	9801      	ldr	r0, [sp, #4]
 800ce36:	6813      	ldr	r3, [r2, #0]
 800ce38:	b933      	cbnz	r3, 800ce48 <_free_r+0x30>
 800ce3a:	6063      	str	r3, [r4, #4]
 800ce3c:	6014      	str	r4, [r2, #0]
 800ce3e:	b003      	add	sp, #12
 800ce40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce44:	f7ff bfe2 	b.w	800ce0c <__malloc_unlock>
 800ce48:	42a3      	cmp	r3, r4
 800ce4a:	d908      	bls.n	800ce5e <_free_r+0x46>
 800ce4c:	6825      	ldr	r5, [r4, #0]
 800ce4e:	1961      	adds	r1, r4, r5
 800ce50:	428b      	cmp	r3, r1
 800ce52:	bf01      	itttt	eq
 800ce54:	6819      	ldreq	r1, [r3, #0]
 800ce56:	685b      	ldreq	r3, [r3, #4]
 800ce58:	1949      	addeq	r1, r1, r5
 800ce5a:	6021      	streq	r1, [r4, #0]
 800ce5c:	e7ed      	b.n	800ce3a <_free_r+0x22>
 800ce5e:	461a      	mov	r2, r3
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	b10b      	cbz	r3, 800ce68 <_free_r+0x50>
 800ce64:	42a3      	cmp	r3, r4
 800ce66:	d9fa      	bls.n	800ce5e <_free_r+0x46>
 800ce68:	6811      	ldr	r1, [r2, #0]
 800ce6a:	1855      	adds	r5, r2, r1
 800ce6c:	42a5      	cmp	r5, r4
 800ce6e:	d10b      	bne.n	800ce88 <_free_r+0x70>
 800ce70:	6824      	ldr	r4, [r4, #0]
 800ce72:	4421      	add	r1, r4
 800ce74:	1854      	adds	r4, r2, r1
 800ce76:	42a3      	cmp	r3, r4
 800ce78:	6011      	str	r1, [r2, #0]
 800ce7a:	d1e0      	bne.n	800ce3e <_free_r+0x26>
 800ce7c:	681c      	ldr	r4, [r3, #0]
 800ce7e:	685b      	ldr	r3, [r3, #4]
 800ce80:	6053      	str	r3, [r2, #4]
 800ce82:	4421      	add	r1, r4
 800ce84:	6011      	str	r1, [r2, #0]
 800ce86:	e7da      	b.n	800ce3e <_free_r+0x26>
 800ce88:	d902      	bls.n	800ce90 <_free_r+0x78>
 800ce8a:	230c      	movs	r3, #12
 800ce8c:	6003      	str	r3, [r0, #0]
 800ce8e:	e7d6      	b.n	800ce3e <_free_r+0x26>
 800ce90:	6825      	ldr	r5, [r4, #0]
 800ce92:	1961      	adds	r1, r4, r5
 800ce94:	428b      	cmp	r3, r1
 800ce96:	bf04      	itt	eq
 800ce98:	6819      	ldreq	r1, [r3, #0]
 800ce9a:	685b      	ldreq	r3, [r3, #4]
 800ce9c:	6063      	str	r3, [r4, #4]
 800ce9e:	bf04      	itt	eq
 800cea0:	1949      	addeq	r1, r1, r5
 800cea2:	6021      	streq	r1, [r4, #0]
 800cea4:	6054      	str	r4, [r2, #4]
 800cea6:	e7ca      	b.n	800ce3e <_free_r+0x26>
 800cea8:	b003      	add	sp, #12
 800ceaa:	bd30      	pop	{r4, r5, pc}
 800ceac:	200032f0 	.word	0x200032f0

0800ceb0 <__ssputs_r>:
 800ceb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ceb4:	688e      	ldr	r6, [r1, #8]
 800ceb6:	429e      	cmp	r6, r3
 800ceb8:	4682      	mov	sl, r0
 800ceba:	460c      	mov	r4, r1
 800cebc:	4690      	mov	r8, r2
 800cebe:	461f      	mov	r7, r3
 800cec0:	d838      	bhi.n	800cf34 <__ssputs_r+0x84>
 800cec2:	898a      	ldrh	r2, [r1, #12]
 800cec4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cec8:	d032      	beq.n	800cf30 <__ssputs_r+0x80>
 800ceca:	6825      	ldr	r5, [r4, #0]
 800cecc:	6909      	ldr	r1, [r1, #16]
 800cece:	eba5 0901 	sub.w	r9, r5, r1
 800ced2:	6965      	ldr	r5, [r4, #20]
 800ced4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ced8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cedc:	3301      	adds	r3, #1
 800cede:	444b      	add	r3, r9
 800cee0:	106d      	asrs	r5, r5, #1
 800cee2:	429d      	cmp	r5, r3
 800cee4:	bf38      	it	cc
 800cee6:	461d      	movcc	r5, r3
 800cee8:	0553      	lsls	r3, r2, #21
 800ceea:	d531      	bpl.n	800cf50 <__ssputs_r+0xa0>
 800ceec:	4629      	mov	r1, r5
 800ceee:	f7ff facf 	bl	800c490 <_malloc_r>
 800cef2:	4606      	mov	r6, r0
 800cef4:	b950      	cbnz	r0, 800cf0c <__ssputs_r+0x5c>
 800cef6:	230c      	movs	r3, #12
 800cef8:	f8ca 3000 	str.w	r3, [sl]
 800cefc:	89a3      	ldrh	r3, [r4, #12]
 800cefe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf02:	81a3      	strh	r3, [r4, #12]
 800cf04:	f04f 30ff 	mov.w	r0, #4294967295
 800cf08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf0c:	6921      	ldr	r1, [r4, #16]
 800cf0e:	464a      	mov	r2, r9
 800cf10:	f7ff fa87 	bl	800c422 <memcpy>
 800cf14:	89a3      	ldrh	r3, [r4, #12]
 800cf16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf1e:	81a3      	strh	r3, [r4, #12]
 800cf20:	6126      	str	r6, [r4, #16]
 800cf22:	6165      	str	r5, [r4, #20]
 800cf24:	444e      	add	r6, r9
 800cf26:	eba5 0509 	sub.w	r5, r5, r9
 800cf2a:	6026      	str	r6, [r4, #0]
 800cf2c:	60a5      	str	r5, [r4, #8]
 800cf2e:	463e      	mov	r6, r7
 800cf30:	42be      	cmp	r6, r7
 800cf32:	d900      	bls.n	800cf36 <__ssputs_r+0x86>
 800cf34:	463e      	mov	r6, r7
 800cf36:	6820      	ldr	r0, [r4, #0]
 800cf38:	4632      	mov	r2, r6
 800cf3a:	4641      	mov	r1, r8
 800cf3c:	f000 fc3e 	bl	800d7bc <memmove>
 800cf40:	68a3      	ldr	r3, [r4, #8]
 800cf42:	1b9b      	subs	r3, r3, r6
 800cf44:	60a3      	str	r3, [r4, #8]
 800cf46:	6823      	ldr	r3, [r4, #0]
 800cf48:	4433      	add	r3, r6
 800cf4a:	6023      	str	r3, [r4, #0]
 800cf4c:	2000      	movs	r0, #0
 800cf4e:	e7db      	b.n	800cf08 <__ssputs_r+0x58>
 800cf50:	462a      	mov	r2, r5
 800cf52:	f000 fc4d 	bl	800d7f0 <_realloc_r>
 800cf56:	4606      	mov	r6, r0
 800cf58:	2800      	cmp	r0, #0
 800cf5a:	d1e1      	bne.n	800cf20 <__ssputs_r+0x70>
 800cf5c:	6921      	ldr	r1, [r4, #16]
 800cf5e:	4650      	mov	r0, sl
 800cf60:	f7ff ff5a 	bl	800ce18 <_free_r>
 800cf64:	e7c7      	b.n	800cef6 <__ssputs_r+0x46>
	...

0800cf68 <_svfiprintf_r>:
 800cf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf6c:	4698      	mov	r8, r3
 800cf6e:	898b      	ldrh	r3, [r1, #12]
 800cf70:	061b      	lsls	r3, r3, #24
 800cf72:	b09d      	sub	sp, #116	; 0x74
 800cf74:	4607      	mov	r7, r0
 800cf76:	460d      	mov	r5, r1
 800cf78:	4614      	mov	r4, r2
 800cf7a:	d50e      	bpl.n	800cf9a <_svfiprintf_r+0x32>
 800cf7c:	690b      	ldr	r3, [r1, #16]
 800cf7e:	b963      	cbnz	r3, 800cf9a <_svfiprintf_r+0x32>
 800cf80:	2140      	movs	r1, #64	; 0x40
 800cf82:	f7ff fa85 	bl	800c490 <_malloc_r>
 800cf86:	6028      	str	r0, [r5, #0]
 800cf88:	6128      	str	r0, [r5, #16]
 800cf8a:	b920      	cbnz	r0, 800cf96 <_svfiprintf_r+0x2e>
 800cf8c:	230c      	movs	r3, #12
 800cf8e:	603b      	str	r3, [r7, #0]
 800cf90:	f04f 30ff 	mov.w	r0, #4294967295
 800cf94:	e0d1      	b.n	800d13a <_svfiprintf_r+0x1d2>
 800cf96:	2340      	movs	r3, #64	; 0x40
 800cf98:	616b      	str	r3, [r5, #20]
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	9309      	str	r3, [sp, #36]	; 0x24
 800cf9e:	2320      	movs	r3, #32
 800cfa0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfa4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfa8:	2330      	movs	r3, #48	; 0x30
 800cfaa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d154 <_svfiprintf_r+0x1ec>
 800cfae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfb2:	f04f 0901 	mov.w	r9, #1
 800cfb6:	4623      	mov	r3, r4
 800cfb8:	469a      	mov	sl, r3
 800cfba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfbe:	b10a      	cbz	r2, 800cfc4 <_svfiprintf_r+0x5c>
 800cfc0:	2a25      	cmp	r2, #37	; 0x25
 800cfc2:	d1f9      	bne.n	800cfb8 <_svfiprintf_r+0x50>
 800cfc4:	ebba 0b04 	subs.w	fp, sl, r4
 800cfc8:	d00b      	beq.n	800cfe2 <_svfiprintf_r+0x7a>
 800cfca:	465b      	mov	r3, fp
 800cfcc:	4622      	mov	r2, r4
 800cfce:	4629      	mov	r1, r5
 800cfd0:	4638      	mov	r0, r7
 800cfd2:	f7ff ff6d 	bl	800ceb0 <__ssputs_r>
 800cfd6:	3001      	adds	r0, #1
 800cfd8:	f000 80aa 	beq.w	800d130 <_svfiprintf_r+0x1c8>
 800cfdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfde:	445a      	add	r2, fp
 800cfe0:	9209      	str	r2, [sp, #36]	; 0x24
 800cfe2:	f89a 3000 	ldrb.w	r3, [sl]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	f000 80a2 	beq.w	800d130 <_svfiprintf_r+0x1c8>
 800cfec:	2300      	movs	r3, #0
 800cfee:	f04f 32ff 	mov.w	r2, #4294967295
 800cff2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cff6:	f10a 0a01 	add.w	sl, sl, #1
 800cffa:	9304      	str	r3, [sp, #16]
 800cffc:	9307      	str	r3, [sp, #28]
 800cffe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d002:	931a      	str	r3, [sp, #104]	; 0x68
 800d004:	4654      	mov	r4, sl
 800d006:	2205      	movs	r2, #5
 800d008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d00c:	4851      	ldr	r0, [pc, #324]	; (800d154 <_svfiprintf_r+0x1ec>)
 800d00e:	f7f3 f8e7 	bl	80001e0 <memchr>
 800d012:	9a04      	ldr	r2, [sp, #16]
 800d014:	b9d8      	cbnz	r0, 800d04e <_svfiprintf_r+0xe6>
 800d016:	06d0      	lsls	r0, r2, #27
 800d018:	bf44      	itt	mi
 800d01a:	2320      	movmi	r3, #32
 800d01c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d020:	0711      	lsls	r1, r2, #28
 800d022:	bf44      	itt	mi
 800d024:	232b      	movmi	r3, #43	; 0x2b
 800d026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d02a:	f89a 3000 	ldrb.w	r3, [sl]
 800d02e:	2b2a      	cmp	r3, #42	; 0x2a
 800d030:	d015      	beq.n	800d05e <_svfiprintf_r+0xf6>
 800d032:	9a07      	ldr	r2, [sp, #28]
 800d034:	4654      	mov	r4, sl
 800d036:	2000      	movs	r0, #0
 800d038:	f04f 0c0a 	mov.w	ip, #10
 800d03c:	4621      	mov	r1, r4
 800d03e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d042:	3b30      	subs	r3, #48	; 0x30
 800d044:	2b09      	cmp	r3, #9
 800d046:	d94e      	bls.n	800d0e6 <_svfiprintf_r+0x17e>
 800d048:	b1b0      	cbz	r0, 800d078 <_svfiprintf_r+0x110>
 800d04a:	9207      	str	r2, [sp, #28]
 800d04c:	e014      	b.n	800d078 <_svfiprintf_r+0x110>
 800d04e:	eba0 0308 	sub.w	r3, r0, r8
 800d052:	fa09 f303 	lsl.w	r3, r9, r3
 800d056:	4313      	orrs	r3, r2
 800d058:	9304      	str	r3, [sp, #16]
 800d05a:	46a2      	mov	sl, r4
 800d05c:	e7d2      	b.n	800d004 <_svfiprintf_r+0x9c>
 800d05e:	9b03      	ldr	r3, [sp, #12]
 800d060:	1d19      	adds	r1, r3, #4
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	9103      	str	r1, [sp, #12]
 800d066:	2b00      	cmp	r3, #0
 800d068:	bfbb      	ittet	lt
 800d06a:	425b      	neglt	r3, r3
 800d06c:	f042 0202 	orrlt.w	r2, r2, #2
 800d070:	9307      	strge	r3, [sp, #28]
 800d072:	9307      	strlt	r3, [sp, #28]
 800d074:	bfb8      	it	lt
 800d076:	9204      	strlt	r2, [sp, #16]
 800d078:	7823      	ldrb	r3, [r4, #0]
 800d07a:	2b2e      	cmp	r3, #46	; 0x2e
 800d07c:	d10c      	bne.n	800d098 <_svfiprintf_r+0x130>
 800d07e:	7863      	ldrb	r3, [r4, #1]
 800d080:	2b2a      	cmp	r3, #42	; 0x2a
 800d082:	d135      	bne.n	800d0f0 <_svfiprintf_r+0x188>
 800d084:	9b03      	ldr	r3, [sp, #12]
 800d086:	1d1a      	adds	r2, r3, #4
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	9203      	str	r2, [sp, #12]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	bfb8      	it	lt
 800d090:	f04f 33ff 	movlt.w	r3, #4294967295
 800d094:	3402      	adds	r4, #2
 800d096:	9305      	str	r3, [sp, #20]
 800d098:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d164 <_svfiprintf_r+0x1fc>
 800d09c:	7821      	ldrb	r1, [r4, #0]
 800d09e:	2203      	movs	r2, #3
 800d0a0:	4650      	mov	r0, sl
 800d0a2:	f7f3 f89d 	bl	80001e0 <memchr>
 800d0a6:	b140      	cbz	r0, 800d0ba <_svfiprintf_r+0x152>
 800d0a8:	2340      	movs	r3, #64	; 0x40
 800d0aa:	eba0 000a 	sub.w	r0, r0, sl
 800d0ae:	fa03 f000 	lsl.w	r0, r3, r0
 800d0b2:	9b04      	ldr	r3, [sp, #16]
 800d0b4:	4303      	orrs	r3, r0
 800d0b6:	3401      	adds	r4, #1
 800d0b8:	9304      	str	r3, [sp, #16]
 800d0ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0be:	4826      	ldr	r0, [pc, #152]	; (800d158 <_svfiprintf_r+0x1f0>)
 800d0c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0c4:	2206      	movs	r2, #6
 800d0c6:	f7f3 f88b 	bl	80001e0 <memchr>
 800d0ca:	2800      	cmp	r0, #0
 800d0cc:	d038      	beq.n	800d140 <_svfiprintf_r+0x1d8>
 800d0ce:	4b23      	ldr	r3, [pc, #140]	; (800d15c <_svfiprintf_r+0x1f4>)
 800d0d0:	bb1b      	cbnz	r3, 800d11a <_svfiprintf_r+0x1b2>
 800d0d2:	9b03      	ldr	r3, [sp, #12]
 800d0d4:	3307      	adds	r3, #7
 800d0d6:	f023 0307 	bic.w	r3, r3, #7
 800d0da:	3308      	adds	r3, #8
 800d0dc:	9303      	str	r3, [sp, #12]
 800d0de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0e0:	4433      	add	r3, r6
 800d0e2:	9309      	str	r3, [sp, #36]	; 0x24
 800d0e4:	e767      	b.n	800cfb6 <_svfiprintf_r+0x4e>
 800d0e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0ea:	460c      	mov	r4, r1
 800d0ec:	2001      	movs	r0, #1
 800d0ee:	e7a5      	b.n	800d03c <_svfiprintf_r+0xd4>
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	3401      	adds	r4, #1
 800d0f4:	9305      	str	r3, [sp, #20]
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	f04f 0c0a 	mov.w	ip, #10
 800d0fc:	4620      	mov	r0, r4
 800d0fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d102:	3a30      	subs	r2, #48	; 0x30
 800d104:	2a09      	cmp	r2, #9
 800d106:	d903      	bls.n	800d110 <_svfiprintf_r+0x1a8>
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d0c5      	beq.n	800d098 <_svfiprintf_r+0x130>
 800d10c:	9105      	str	r1, [sp, #20]
 800d10e:	e7c3      	b.n	800d098 <_svfiprintf_r+0x130>
 800d110:	fb0c 2101 	mla	r1, ip, r1, r2
 800d114:	4604      	mov	r4, r0
 800d116:	2301      	movs	r3, #1
 800d118:	e7f0      	b.n	800d0fc <_svfiprintf_r+0x194>
 800d11a:	ab03      	add	r3, sp, #12
 800d11c:	9300      	str	r3, [sp, #0]
 800d11e:	462a      	mov	r2, r5
 800d120:	4b0f      	ldr	r3, [pc, #60]	; (800d160 <_svfiprintf_r+0x1f8>)
 800d122:	a904      	add	r1, sp, #16
 800d124:	4638      	mov	r0, r7
 800d126:	f3af 8000 	nop.w
 800d12a:	1c42      	adds	r2, r0, #1
 800d12c:	4606      	mov	r6, r0
 800d12e:	d1d6      	bne.n	800d0de <_svfiprintf_r+0x176>
 800d130:	89ab      	ldrh	r3, [r5, #12]
 800d132:	065b      	lsls	r3, r3, #25
 800d134:	f53f af2c 	bmi.w	800cf90 <_svfiprintf_r+0x28>
 800d138:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d13a:	b01d      	add	sp, #116	; 0x74
 800d13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d140:	ab03      	add	r3, sp, #12
 800d142:	9300      	str	r3, [sp, #0]
 800d144:	462a      	mov	r2, r5
 800d146:	4b06      	ldr	r3, [pc, #24]	; (800d160 <_svfiprintf_r+0x1f8>)
 800d148:	a904      	add	r1, sp, #16
 800d14a:	4638      	mov	r0, r7
 800d14c:	f000 f9d4 	bl	800d4f8 <_printf_i>
 800d150:	e7eb      	b.n	800d12a <_svfiprintf_r+0x1c2>
 800d152:	bf00      	nop
 800d154:	0800e224 	.word	0x0800e224
 800d158:	0800e22e 	.word	0x0800e22e
 800d15c:	00000000 	.word	0x00000000
 800d160:	0800ceb1 	.word	0x0800ceb1
 800d164:	0800e22a 	.word	0x0800e22a

0800d168 <__sfputc_r>:
 800d168:	6893      	ldr	r3, [r2, #8]
 800d16a:	3b01      	subs	r3, #1
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	b410      	push	{r4}
 800d170:	6093      	str	r3, [r2, #8]
 800d172:	da08      	bge.n	800d186 <__sfputc_r+0x1e>
 800d174:	6994      	ldr	r4, [r2, #24]
 800d176:	42a3      	cmp	r3, r4
 800d178:	db01      	blt.n	800d17e <__sfputc_r+0x16>
 800d17a:	290a      	cmp	r1, #10
 800d17c:	d103      	bne.n	800d186 <__sfputc_r+0x1e>
 800d17e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d182:	f7ff bbe9 	b.w	800c958 <__swbuf_r>
 800d186:	6813      	ldr	r3, [r2, #0]
 800d188:	1c58      	adds	r0, r3, #1
 800d18a:	6010      	str	r0, [r2, #0]
 800d18c:	7019      	strb	r1, [r3, #0]
 800d18e:	4608      	mov	r0, r1
 800d190:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d194:	4770      	bx	lr

0800d196 <__sfputs_r>:
 800d196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d198:	4606      	mov	r6, r0
 800d19a:	460f      	mov	r7, r1
 800d19c:	4614      	mov	r4, r2
 800d19e:	18d5      	adds	r5, r2, r3
 800d1a0:	42ac      	cmp	r4, r5
 800d1a2:	d101      	bne.n	800d1a8 <__sfputs_r+0x12>
 800d1a4:	2000      	movs	r0, #0
 800d1a6:	e007      	b.n	800d1b8 <__sfputs_r+0x22>
 800d1a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1ac:	463a      	mov	r2, r7
 800d1ae:	4630      	mov	r0, r6
 800d1b0:	f7ff ffda 	bl	800d168 <__sfputc_r>
 800d1b4:	1c43      	adds	r3, r0, #1
 800d1b6:	d1f3      	bne.n	800d1a0 <__sfputs_r+0xa>
 800d1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d1bc <_vfiprintf_r>:
 800d1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1c0:	460d      	mov	r5, r1
 800d1c2:	b09d      	sub	sp, #116	; 0x74
 800d1c4:	4614      	mov	r4, r2
 800d1c6:	4698      	mov	r8, r3
 800d1c8:	4606      	mov	r6, r0
 800d1ca:	b118      	cbz	r0, 800d1d4 <_vfiprintf_r+0x18>
 800d1cc:	6983      	ldr	r3, [r0, #24]
 800d1ce:	b90b      	cbnz	r3, 800d1d4 <_vfiprintf_r+0x18>
 800d1d0:	f7ff f862 	bl	800c298 <__sinit>
 800d1d4:	4b89      	ldr	r3, [pc, #548]	; (800d3fc <_vfiprintf_r+0x240>)
 800d1d6:	429d      	cmp	r5, r3
 800d1d8:	d11b      	bne.n	800d212 <_vfiprintf_r+0x56>
 800d1da:	6875      	ldr	r5, [r6, #4]
 800d1dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1de:	07d9      	lsls	r1, r3, #31
 800d1e0:	d405      	bmi.n	800d1ee <_vfiprintf_r+0x32>
 800d1e2:	89ab      	ldrh	r3, [r5, #12]
 800d1e4:	059a      	lsls	r2, r3, #22
 800d1e6:	d402      	bmi.n	800d1ee <_vfiprintf_r+0x32>
 800d1e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1ea:	f7ff f918 	bl	800c41e <__retarget_lock_acquire_recursive>
 800d1ee:	89ab      	ldrh	r3, [r5, #12]
 800d1f0:	071b      	lsls	r3, r3, #28
 800d1f2:	d501      	bpl.n	800d1f8 <_vfiprintf_r+0x3c>
 800d1f4:	692b      	ldr	r3, [r5, #16]
 800d1f6:	b9eb      	cbnz	r3, 800d234 <_vfiprintf_r+0x78>
 800d1f8:	4629      	mov	r1, r5
 800d1fa:	4630      	mov	r0, r6
 800d1fc:	f7ff fc10 	bl	800ca20 <__swsetup_r>
 800d200:	b1c0      	cbz	r0, 800d234 <_vfiprintf_r+0x78>
 800d202:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d204:	07dc      	lsls	r4, r3, #31
 800d206:	d50e      	bpl.n	800d226 <_vfiprintf_r+0x6a>
 800d208:	f04f 30ff 	mov.w	r0, #4294967295
 800d20c:	b01d      	add	sp, #116	; 0x74
 800d20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d212:	4b7b      	ldr	r3, [pc, #492]	; (800d400 <_vfiprintf_r+0x244>)
 800d214:	429d      	cmp	r5, r3
 800d216:	d101      	bne.n	800d21c <_vfiprintf_r+0x60>
 800d218:	68b5      	ldr	r5, [r6, #8]
 800d21a:	e7df      	b.n	800d1dc <_vfiprintf_r+0x20>
 800d21c:	4b79      	ldr	r3, [pc, #484]	; (800d404 <_vfiprintf_r+0x248>)
 800d21e:	429d      	cmp	r5, r3
 800d220:	bf08      	it	eq
 800d222:	68f5      	ldreq	r5, [r6, #12]
 800d224:	e7da      	b.n	800d1dc <_vfiprintf_r+0x20>
 800d226:	89ab      	ldrh	r3, [r5, #12]
 800d228:	0598      	lsls	r0, r3, #22
 800d22a:	d4ed      	bmi.n	800d208 <_vfiprintf_r+0x4c>
 800d22c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d22e:	f7ff f8f7 	bl	800c420 <__retarget_lock_release_recursive>
 800d232:	e7e9      	b.n	800d208 <_vfiprintf_r+0x4c>
 800d234:	2300      	movs	r3, #0
 800d236:	9309      	str	r3, [sp, #36]	; 0x24
 800d238:	2320      	movs	r3, #32
 800d23a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d23e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d242:	2330      	movs	r3, #48	; 0x30
 800d244:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d408 <_vfiprintf_r+0x24c>
 800d248:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d24c:	f04f 0901 	mov.w	r9, #1
 800d250:	4623      	mov	r3, r4
 800d252:	469a      	mov	sl, r3
 800d254:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d258:	b10a      	cbz	r2, 800d25e <_vfiprintf_r+0xa2>
 800d25a:	2a25      	cmp	r2, #37	; 0x25
 800d25c:	d1f9      	bne.n	800d252 <_vfiprintf_r+0x96>
 800d25e:	ebba 0b04 	subs.w	fp, sl, r4
 800d262:	d00b      	beq.n	800d27c <_vfiprintf_r+0xc0>
 800d264:	465b      	mov	r3, fp
 800d266:	4622      	mov	r2, r4
 800d268:	4629      	mov	r1, r5
 800d26a:	4630      	mov	r0, r6
 800d26c:	f7ff ff93 	bl	800d196 <__sfputs_r>
 800d270:	3001      	adds	r0, #1
 800d272:	f000 80aa 	beq.w	800d3ca <_vfiprintf_r+0x20e>
 800d276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d278:	445a      	add	r2, fp
 800d27a:	9209      	str	r2, [sp, #36]	; 0x24
 800d27c:	f89a 3000 	ldrb.w	r3, [sl]
 800d280:	2b00      	cmp	r3, #0
 800d282:	f000 80a2 	beq.w	800d3ca <_vfiprintf_r+0x20e>
 800d286:	2300      	movs	r3, #0
 800d288:	f04f 32ff 	mov.w	r2, #4294967295
 800d28c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d290:	f10a 0a01 	add.w	sl, sl, #1
 800d294:	9304      	str	r3, [sp, #16]
 800d296:	9307      	str	r3, [sp, #28]
 800d298:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d29c:	931a      	str	r3, [sp, #104]	; 0x68
 800d29e:	4654      	mov	r4, sl
 800d2a0:	2205      	movs	r2, #5
 800d2a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2a6:	4858      	ldr	r0, [pc, #352]	; (800d408 <_vfiprintf_r+0x24c>)
 800d2a8:	f7f2 ff9a 	bl	80001e0 <memchr>
 800d2ac:	9a04      	ldr	r2, [sp, #16]
 800d2ae:	b9d8      	cbnz	r0, 800d2e8 <_vfiprintf_r+0x12c>
 800d2b0:	06d1      	lsls	r1, r2, #27
 800d2b2:	bf44      	itt	mi
 800d2b4:	2320      	movmi	r3, #32
 800d2b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2ba:	0713      	lsls	r3, r2, #28
 800d2bc:	bf44      	itt	mi
 800d2be:	232b      	movmi	r3, #43	; 0x2b
 800d2c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2c4:	f89a 3000 	ldrb.w	r3, [sl]
 800d2c8:	2b2a      	cmp	r3, #42	; 0x2a
 800d2ca:	d015      	beq.n	800d2f8 <_vfiprintf_r+0x13c>
 800d2cc:	9a07      	ldr	r2, [sp, #28]
 800d2ce:	4654      	mov	r4, sl
 800d2d0:	2000      	movs	r0, #0
 800d2d2:	f04f 0c0a 	mov.w	ip, #10
 800d2d6:	4621      	mov	r1, r4
 800d2d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2dc:	3b30      	subs	r3, #48	; 0x30
 800d2de:	2b09      	cmp	r3, #9
 800d2e0:	d94e      	bls.n	800d380 <_vfiprintf_r+0x1c4>
 800d2e2:	b1b0      	cbz	r0, 800d312 <_vfiprintf_r+0x156>
 800d2e4:	9207      	str	r2, [sp, #28]
 800d2e6:	e014      	b.n	800d312 <_vfiprintf_r+0x156>
 800d2e8:	eba0 0308 	sub.w	r3, r0, r8
 800d2ec:	fa09 f303 	lsl.w	r3, r9, r3
 800d2f0:	4313      	orrs	r3, r2
 800d2f2:	9304      	str	r3, [sp, #16]
 800d2f4:	46a2      	mov	sl, r4
 800d2f6:	e7d2      	b.n	800d29e <_vfiprintf_r+0xe2>
 800d2f8:	9b03      	ldr	r3, [sp, #12]
 800d2fa:	1d19      	adds	r1, r3, #4
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	9103      	str	r1, [sp, #12]
 800d300:	2b00      	cmp	r3, #0
 800d302:	bfbb      	ittet	lt
 800d304:	425b      	neglt	r3, r3
 800d306:	f042 0202 	orrlt.w	r2, r2, #2
 800d30a:	9307      	strge	r3, [sp, #28]
 800d30c:	9307      	strlt	r3, [sp, #28]
 800d30e:	bfb8      	it	lt
 800d310:	9204      	strlt	r2, [sp, #16]
 800d312:	7823      	ldrb	r3, [r4, #0]
 800d314:	2b2e      	cmp	r3, #46	; 0x2e
 800d316:	d10c      	bne.n	800d332 <_vfiprintf_r+0x176>
 800d318:	7863      	ldrb	r3, [r4, #1]
 800d31a:	2b2a      	cmp	r3, #42	; 0x2a
 800d31c:	d135      	bne.n	800d38a <_vfiprintf_r+0x1ce>
 800d31e:	9b03      	ldr	r3, [sp, #12]
 800d320:	1d1a      	adds	r2, r3, #4
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	9203      	str	r2, [sp, #12]
 800d326:	2b00      	cmp	r3, #0
 800d328:	bfb8      	it	lt
 800d32a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d32e:	3402      	adds	r4, #2
 800d330:	9305      	str	r3, [sp, #20]
 800d332:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d418 <_vfiprintf_r+0x25c>
 800d336:	7821      	ldrb	r1, [r4, #0]
 800d338:	2203      	movs	r2, #3
 800d33a:	4650      	mov	r0, sl
 800d33c:	f7f2 ff50 	bl	80001e0 <memchr>
 800d340:	b140      	cbz	r0, 800d354 <_vfiprintf_r+0x198>
 800d342:	2340      	movs	r3, #64	; 0x40
 800d344:	eba0 000a 	sub.w	r0, r0, sl
 800d348:	fa03 f000 	lsl.w	r0, r3, r0
 800d34c:	9b04      	ldr	r3, [sp, #16]
 800d34e:	4303      	orrs	r3, r0
 800d350:	3401      	adds	r4, #1
 800d352:	9304      	str	r3, [sp, #16]
 800d354:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d358:	482c      	ldr	r0, [pc, #176]	; (800d40c <_vfiprintf_r+0x250>)
 800d35a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d35e:	2206      	movs	r2, #6
 800d360:	f7f2 ff3e 	bl	80001e0 <memchr>
 800d364:	2800      	cmp	r0, #0
 800d366:	d03f      	beq.n	800d3e8 <_vfiprintf_r+0x22c>
 800d368:	4b29      	ldr	r3, [pc, #164]	; (800d410 <_vfiprintf_r+0x254>)
 800d36a:	bb1b      	cbnz	r3, 800d3b4 <_vfiprintf_r+0x1f8>
 800d36c:	9b03      	ldr	r3, [sp, #12]
 800d36e:	3307      	adds	r3, #7
 800d370:	f023 0307 	bic.w	r3, r3, #7
 800d374:	3308      	adds	r3, #8
 800d376:	9303      	str	r3, [sp, #12]
 800d378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d37a:	443b      	add	r3, r7
 800d37c:	9309      	str	r3, [sp, #36]	; 0x24
 800d37e:	e767      	b.n	800d250 <_vfiprintf_r+0x94>
 800d380:	fb0c 3202 	mla	r2, ip, r2, r3
 800d384:	460c      	mov	r4, r1
 800d386:	2001      	movs	r0, #1
 800d388:	e7a5      	b.n	800d2d6 <_vfiprintf_r+0x11a>
 800d38a:	2300      	movs	r3, #0
 800d38c:	3401      	adds	r4, #1
 800d38e:	9305      	str	r3, [sp, #20]
 800d390:	4619      	mov	r1, r3
 800d392:	f04f 0c0a 	mov.w	ip, #10
 800d396:	4620      	mov	r0, r4
 800d398:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d39c:	3a30      	subs	r2, #48	; 0x30
 800d39e:	2a09      	cmp	r2, #9
 800d3a0:	d903      	bls.n	800d3aa <_vfiprintf_r+0x1ee>
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d0c5      	beq.n	800d332 <_vfiprintf_r+0x176>
 800d3a6:	9105      	str	r1, [sp, #20]
 800d3a8:	e7c3      	b.n	800d332 <_vfiprintf_r+0x176>
 800d3aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3ae:	4604      	mov	r4, r0
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	e7f0      	b.n	800d396 <_vfiprintf_r+0x1da>
 800d3b4:	ab03      	add	r3, sp, #12
 800d3b6:	9300      	str	r3, [sp, #0]
 800d3b8:	462a      	mov	r2, r5
 800d3ba:	4b16      	ldr	r3, [pc, #88]	; (800d414 <_vfiprintf_r+0x258>)
 800d3bc:	a904      	add	r1, sp, #16
 800d3be:	4630      	mov	r0, r6
 800d3c0:	f3af 8000 	nop.w
 800d3c4:	4607      	mov	r7, r0
 800d3c6:	1c78      	adds	r0, r7, #1
 800d3c8:	d1d6      	bne.n	800d378 <_vfiprintf_r+0x1bc>
 800d3ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3cc:	07d9      	lsls	r1, r3, #31
 800d3ce:	d405      	bmi.n	800d3dc <_vfiprintf_r+0x220>
 800d3d0:	89ab      	ldrh	r3, [r5, #12]
 800d3d2:	059a      	lsls	r2, r3, #22
 800d3d4:	d402      	bmi.n	800d3dc <_vfiprintf_r+0x220>
 800d3d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3d8:	f7ff f822 	bl	800c420 <__retarget_lock_release_recursive>
 800d3dc:	89ab      	ldrh	r3, [r5, #12]
 800d3de:	065b      	lsls	r3, r3, #25
 800d3e0:	f53f af12 	bmi.w	800d208 <_vfiprintf_r+0x4c>
 800d3e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3e6:	e711      	b.n	800d20c <_vfiprintf_r+0x50>
 800d3e8:	ab03      	add	r3, sp, #12
 800d3ea:	9300      	str	r3, [sp, #0]
 800d3ec:	462a      	mov	r2, r5
 800d3ee:	4b09      	ldr	r3, [pc, #36]	; (800d414 <_vfiprintf_r+0x258>)
 800d3f0:	a904      	add	r1, sp, #16
 800d3f2:	4630      	mov	r0, r6
 800d3f4:	f000 f880 	bl	800d4f8 <_printf_i>
 800d3f8:	e7e4      	b.n	800d3c4 <_vfiprintf_r+0x208>
 800d3fa:	bf00      	nop
 800d3fc:	0800e130 	.word	0x0800e130
 800d400:	0800e150 	.word	0x0800e150
 800d404:	0800e110 	.word	0x0800e110
 800d408:	0800e224 	.word	0x0800e224
 800d40c:	0800e22e 	.word	0x0800e22e
 800d410:	00000000 	.word	0x00000000
 800d414:	0800d197 	.word	0x0800d197
 800d418:	0800e22a 	.word	0x0800e22a

0800d41c <_printf_common>:
 800d41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d420:	4616      	mov	r6, r2
 800d422:	4699      	mov	r9, r3
 800d424:	688a      	ldr	r2, [r1, #8]
 800d426:	690b      	ldr	r3, [r1, #16]
 800d428:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d42c:	4293      	cmp	r3, r2
 800d42e:	bfb8      	it	lt
 800d430:	4613      	movlt	r3, r2
 800d432:	6033      	str	r3, [r6, #0]
 800d434:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d438:	4607      	mov	r7, r0
 800d43a:	460c      	mov	r4, r1
 800d43c:	b10a      	cbz	r2, 800d442 <_printf_common+0x26>
 800d43e:	3301      	adds	r3, #1
 800d440:	6033      	str	r3, [r6, #0]
 800d442:	6823      	ldr	r3, [r4, #0]
 800d444:	0699      	lsls	r1, r3, #26
 800d446:	bf42      	ittt	mi
 800d448:	6833      	ldrmi	r3, [r6, #0]
 800d44a:	3302      	addmi	r3, #2
 800d44c:	6033      	strmi	r3, [r6, #0]
 800d44e:	6825      	ldr	r5, [r4, #0]
 800d450:	f015 0506 	ands.w	r5, r5, #6
 800d454:	d106      	bne.n	800d464 <_printf_common+0x48>
 800d456:	f104 0a19 	add.w	sl, r4, #25
 800d45a:	68e3      	ldr	r3, [r4, #12]
 800d45c:	6832      	ldr	r2, [r6, #0]
 800d45e:	1a9b      	subs	r3, r3, r2
 800d460:	42ab      	cmp	r3, r5
 800d462:	dc26      	bgt.n	800d4b2 <_printf_common+0x96>
 800d464:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d468:	1e13      	subs	r3, r2, #0
 800d46a:	6822      	ldr	r2, [r4, #0]
 800d46c:	bf18      	it	ne
 800d46e:	2301      	movne	r3, #1
 800d470:	0692      	lsls	r2, r2, #26
 800d472:	d42b      	bmi.n	800d4cc <_printf_common+0xb0>
 800d474:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d478:	4649      	mov	r1, r9
 800d47a:	4638      	mov	r0, r7
 800d47c:	47c0      	blx	r8
 800d47e:	3001      	adds	r0, #1
 800d480:	d01e      	beq.n	800d4c0 <_printf_common+0xa4>
 800d482:	6823      	ldr	r3, [r4, #0]
 800d484:	68e5      	ldr	r5, [r4, #12]
 800d486:	6832      	ldr	r2, [r6, #0]
 800d488:	f003 0306 	and.w	r3, r3, #6
 800d48c:	2b04      	cmp	r3, #4
 800d48e:	bf08      	it	eq
 800d490:	1aad      	subeq	r5, r5, r2
 800d492:	68a3      	ldr	r3, [r4, #8]
 800d494:	6922      	ldr	r2, [r4, #16]
 800d496:	bf0c      	ite	eq
 800d498:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d49c:	2500      	movne	r5, #0
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	bfc4      	itt	gt
 800d4a2:	1a9b      	subgt	r3, r3, r2
 800d4a4:	18ed      	addgt	r5, r5, r3
 800d4a6:	2600      	movs	r6, #0
 800d4a8:	341a      	adds	r4, #26
 800d4aa:	42b5      	cmp	r5, r6
 800d4ac:	d11a      	bne.n	800d4e4 <_printf_common+0xc8>
 800d4ae:	2000      	movs	r0, #0
 800d4b0:	e008      	b.n	800d4c4 <_printf_common+0xa8>
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	4652      	mov	r2, sl
 800d4b6:	4649      	mov	r1, r9
 800d4b8:	4638      	mov	r0, r7
 800d4ba:	47c0      	blx	r8
 800d4bc:	3001      	adds	r0, #1
 800d4be:	d103      	bne.n	800d4c8 <_printf_common+0xac>
 800d4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4c8:	3501      	adds	r5, #1
 800d4ca:	e7c6      	b.n	800d45a <_printf_common+0x3e>
 800d4cc:	18e1      	adds	r1, r4, r3
 800d4ce:	1c5a      	adds	r2, r3, #1
 800d4d0:	2030      	movs	r0, #48	; 0x30
 800d4d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d4d6:	4422      	add	r2, r4
 800d4d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d4dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d4e0:	3302      	adds	r3, #2
 800d4e2:	e7c7      	b.n	800d474 <_printf_common+0x58>
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	4622      	mov	r2, r4
 800d4e8:	4649      	mov	r1, r9
 800d4ea:	4638      	mov	r0, r7
 800d4ec:	47c0      	blx	r8
 800d4ee:	3001      	adds	r0, #1
 800d4f0:	d0e6      	beq.n	800d4c0 <_printf_common+0xa4>
 800d4f2:	3601      	adds	r6, #1
 800d4f4:	e7d9      	b.n	800d4aa <_printf_common+0x8e>
	...

0800d4f8 <_printf_i>:
 800d4f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d4fc:	7e0f      	ldrb	r7, [r1, #24]
 800d4fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d500:	2f78      	cmp	r7, #120	; 0x78
 800d502:	4691      	mov	r9, r2
 800d504:	4680      	mov	r8, r0
 800d506:	460c      	mov	r4, r1
 800d508:	469a      	mov	sl, r3
 800d50a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d50e:	d807      	bhi.n	800d520 <_printf_i+0x28>
 800d510:	2f62      	cmp	r7, #98	; 0x62
 800d512:	d80a      	bhi.n	800d52a <_printf_i+0x32>
 800d514:	2f00      	cmp	r7, #0
 800d516:	f000 80d8 	beq.w	800d6ca <_printf_i+0x1d2>
 800d51a:	2f58      	cmp	r7, #88	; 0x58
 800d51c:	f000 80a3 	beq.w	800d666 <_printf_i+0x16e>
 800d520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d524:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d528:	e03a      	b.n	800d5a0 <_printf_i+0xa8>
 800d52a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d52e:	2b15      	cmp	r3, #21
 800d530:	d8f6      	bhi.n	800d520 <_printf_i+0x28>
 800d532:	a101      	add	r1, pc, #4	; (adr r1, 800d538 <_printf_i+0x40>)
 800d534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d538:	0800d591 	.word	0x0800d591
 800d53c:	0800d5a5 	.word	0x0800d5a5
 800d540:	0800d521 	.word	0x0800d521
 800d544:	0800d521 	.word	0x0800d521
 800d548:	0800d521 	.word	0x0800d521
 800d54c:	0800d521 	.word	0x0800d521
 800d550:	0800d5a5 	.word	0x0800d5a5
 800d554:	0800d521 	.word	0x0800d521
 800d558:	0800d521 	.word	0x0800d521
 800d55c:	0800d521 	.word	0x0800d521
 800d560:	0800d521 	.word	0x0800d521
 800d564:	0800d6b1 	.word	0x0800d6b1
 800d568:	0800d5d5 	.word	0x0800d5d5
 800d56c:	0800d693 	.word	0x0800d693
 800d570:	0800d521 	.word	0x0800d521
 800d574:	0800d521 	.word	0x0800d521
 800d578:	0800d6d3 	.word	0x0800d6d3
 800d57c:	0800d521 	.word	0x0800d521
 800d580:	0800d5d5 	.word	0x0800d5d5
 800d584:	0800d521 	.word	0x0800d521
 800d588:	0800d521 	.word	0x0800d521
 800d58c:	0800d69b 	.word	0x0800d69b
 800d590:	682b      	ldr	r3, [r5, #0]
 800d592:	1d1a      	adds	r2, r3, #4
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	602a      	str	r2, [r5, #0]
 800d598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d59c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	e0a3      	b.n	800d6ec <_printf_i+0x1f4>
 800d5a4:	6820      	ldr	r0, [r4, #0]
 800d5a6:	6829      	ldr	r1, [r5, #0]
 800d5a8:	0606      	lsls	r6, r0, #24
 800d5aa:	f101 0304 	add.w	r3, r1, #4
 800d5ae:	d50a      	bpl.n	800d5c6 <_printf_i+0xce>
 800d5b0:	680e      	ldr	r6, [r1, #0]
 800d5b2:	602b      	str	r3, [r5, #0]
 800d5b4:	2e00      	cmp	r6, #0
 800d5b6:	da03      	bge.n	800d5c0 <_printf_i+0xc8>
 800d5b8:	232d      	movs	r3, #45	; 0x2d
 800d5ba:	4276      	negs	r6, r6
 800d5bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5c0:	485e      	ldr	r0, [pc, #376]	; (800d73c <_printf_i+0x244>)
 800d5c2:	230a      	movs	r3, #10
 800d5c4:	e019      	b.n	800d5fa <_printf_i+0x102>
 800d5c6:	680e      	ldr	r6, [r1, #0]
 800d5c8:	602b      	str	r3, [r5, #0]
 800d5ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d5ce:	bf18      	it	ne
 800d5d0:	b236      	sxthne	r6, r6
 800d5d2:	e7ef      	b.n	800d5b4 <_printf_i+0xbc>
 800d5d4:	682b      	ldr	r3, [r5, #0]
 800d5d6:	6820      	ldr	r0, [r4, #0]
 800d5d8:	1d19      	adds	r1, r3, #4
 800d5da:	6029      	str	r1, [r5, #0]
 800d5dc:	0601      	lsls	r1, r0, #24
 800d5de:	d501      	bpl.n	800d5e4 <_printf_i+0xec>
 800d5e0:	681e      	ldr	r6, [r3, #0]
 800d5e2:	e002      	b.n	800d5ea <_printf_i+0xf2>
 800d5e4:	0646      	lsls	r6, r0, #25
 800d5e6:	d5fb      	bpl.n	800d5e0 <_printf_i+0xe8>
 800d5e8:	881e      	ldrh	r6, [r3, #0]
 800d5ea:	4854      	ldr	r0, [pc, #336]	; (800d73c <_printf_i+0x244>)
 800d5ec:	2f6f      	cmp	r7, #111	; 0x6f
 800d5ee:	bf0c      	ite	eq
 800d5f0:	2308      	moveq	r3, #8
 800d5f2:	230a      	movne	r3, #10
 800d5f4:	2100      	movs	r1, #0
 800d5f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d5fa:	6865      	ldr	r5, [r4, #4]
 800d5fc:	60a5      	str	r5, [r4, #8]
 800d5fe:	2d00      	cmp	r5, #0
 800d600:	bfa2      	ittt	ge
 800d602:	6821      	ldrge	r1, [r4, #0]
 800d604:	f021 0104 	bicge.w	r1, r1, #4
 800d608:	6021      	strge	r1, [r4, #0]
 800d60a:	b90e      	cbnz	r6, 800d610 <_printf_i+0x118>
 800d60c:	2d00      	cmp	r5, #0
 800d60e:	d04d      	beq.n	800d6ac <_printf_i+0x1b4>
 800d610:	4615      	mov	r5, r2
 800d612:	fbb6 f1f3 	udiv	r1, r6, r3
 800d616:	fb03 6711 	mls	r7, r3, r1, r6
 800d61a:	5dc7      	ldrb	r7, [r0, r7]
 800d61c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d620:	4637      	mov	r7, r6
 800d622:	42bb      	cmp	r3, r7
 800d624:	460e      	mov	r6, r1
 800d626:	d9f4      	bls.n	800d612 <_printf_i+0x11a>
 800d628:	2b08      	cmp	r3, #8
 800d62a:	d10b      	bne.n	800d644 <_printf_i+0x14c>
 800d62c:	6823      	ldr	r3, [r4, #0]
 800d62e:	07de      	lsls	r6, r3, #31
 800d630:	d508      	bpl.n	800d644 <_printf_i+0x14c>
 800d632:	6923      	ldr	r3, [r4, #16]
 800d634:	6861      	ldr	r1, [r4, #4]
 800d636:	4299      	cmp	r1, r3
 800d638:	bfde      	ittt	le
 800d63a:	2330      	movle	r3, #48	; 0x30
 800d63c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d640:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d644:	1b52      	subs	r2, r2, r5
 800d646:	6122      	str	r2, [r4, #16]
 800d648:	f8cd a000 	str.w	sl, [sp]
 800d64c:	464b      	mov	r3, r9
 800d64e:	aa03      	add	r2, sp, #12
 800d650:	4621      	mov	r1, r4
 800d652:	4640      	mov	r0, r8
 800d654:	f7ff fee2 	bl	800d41c <_printf_common>
 800d658:	3001      	adds	r0, #1
 800d65a:	d14c      	bne.n	800d6f6 <_printf_i+0x1fe>
 800d65c:	f04f 30ff 	mov.w	r0, #4294967295
 800d660:	b004      	add	sp, #16
 800d662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d666:	4835      	ldr	r0, [pc, #212]	; (800d73c <_printf_i+0x244>)
 800d668:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d66c:	6829      	ldr	r1, [r5, #0]
 800d66e:	6823      	ldr	r3, [r4, #0]
 800d670:	f851 6b04 	ldr.w	r6, [r1], #4
 800d674:	6029      	str	r1, [r5, #0]
 800d676:	061d      	lsls	r5, r3, #24
 800d678:	d514      	bpl.n	800d6a4 <_printf_i+0x1ac>
 800d67a:	07df      	lsls	r7, r3, #31
 800d67c:	bf44      	itt	mi
 800d67e:	f043 0320 	orrmi.w	r3, r3, #32
 800d682:	6023      	strmi	r3, [r4, #0]
 800d684:	b91e      	cbnz	r6, 800d68e <_printf_i+0x196>
 800d686:	6823      	ldr	r3, [r4, #0]
 800d688:	f023 0320 	bic.w	r3, r3, #32
 800d68c:	6023      	str	r3, [r4, #0]
 800d68e:	2310      	movs	r3, #16
 800d690:	e7b0      	b.n	800d5f4 <_printf_i+0xfc>
 800d692:	6823      	ldr	r3, [r4, #0]
 800d694:	f043 0320 	orr.w	r3, r3, #32
 800d698:	6023      	str	r3, [r4, #0]
 800d69a:	2378      	movs	r3, #120	; 0x78
 800d69c:	4828      	ldr	r0, [pc, #160]	; (800d740 <_printf_i+0x248>)
 800d69e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d6a2:	e7e3      	b.n	800d66c <_printf_i+0x174>
 800d6a4:	0659      	lsls	r1, r3, #25
 800d6a6:	bf48      	it	mi
 800d6a8:	b2b6      	uxthmi	r6, r6
 800d6aa:	e7e6      	b.n	800d67a <_printf_i+0x182>
 800d6ac:	4615      	mov	r5, r2
 800d6ae:	e7bb      	b.n	800d628 <_printf_i+0x130>
 800d6b0:	682b      	ldr	r3, [r5, #0]
 800d6b2:	6826      	ldr	r6, [r4, #0]
 800d6b4:	6961      	ldr	r1, [r4, #20]
 800d6b6:	1d18      	adds	r0, r3, #4
 800d6b8:	6028      	str	r0, [r5, #0]
 800d6ba:	0635      	lsls	r5, r6, #24
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	d501      	bpl.n	800d6c4 <_printf_i+0x1cc>
 800d6c0:	6019      	str	r1, [r3, #0]
 800d6c2:	e002      	b.n	800d6ca <_printf_i+0x1d2>
 800d6c4:	0670      	lsls	r0, r6, #25
 800d6c6:	d5fb      	bpl.n	800d6c0 <_printf_i+0x1c8>
 800d6c8:	8019      	strh	r1, [r3, #0]
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	6123      	str	r3, [r4, #16]
 800d6ce:	4615      	mov	r5, r2
 800d6d0:	e7ba      	b.n	800d648 <_printf_i+0x150>
 800d6d2:	682b      	ldr	r3, [r5, #0]
 800d6d4:	1d1a      	adds	r2, r3, #4
 800d6d6:	602a      	str	r2, [r5, #0]
 800d6d8:	681d      	ldr	r5, [r3, #0]
 800d6da:	6862      	ldr	r2, [r4, #4]
 800d6dc:	2100      	movs	r1, #0
 800d6de:	4628      	mov	r0, r5
 800d6e0:	f7f2 fd7e 	bl	80001e0 <memchr>
 800d6e4:	b108      	cbz	r0, 800d6ea <_printf_i+0x1f2>
 800d6e6:	1b40      	subs	r0, r0, r5
 800d6e8:	6060      	str	r0, [r4, #4]
 800d6ea:	6863      	ldr	r3, [r4, #4]
 800d6ec:	6123      	str	r3, [r4, #16]
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d6f4:	e7a8      	b.n	800d648 <_printf_i+0x150>
 800d6f6:	6923      	ldr	r3, [r4, #16]
 800d6f8:	462a      	mov	r2, r5
 800d6fa:	4649      	mov	r1, r9
 800d6fc:	4640      	mov	r0, r8
 800d6fe:	47d0      	blx	sl
 800d700:	3001      	adds	r0, #1
 800d702:	d0ab      	beq.n	800d65c <_printf_i+0x164>
 800d704:	6823      	ldr	r3, [r4, #0]
 800d706:	079b      	lsls	r3, r3, #30
 800d708:	d413      	bmi.n	800d732 <_printf_i+0x23a>
 800d70a:	68e0      	ldr	r0, [r4, #12]
 800d70c:	9b03      	ldr	r3, [sp, #12]
 800d70e:	4298      	cmp	r0, r3
 800d710:	bfb8      	it	lt
 800d712:	4618      	movlt	r0, r3
 800d714:	e7a4      	b.n	800d660 <_printf_i+0x168>
 800d716:	2301      	movs	r3, #1
 800d718:	4632      	mov	r2, r6
 800d71a:	4649      	mov	r1, r9
 800d71c:	4640      	mov	r0, r8
 800d71e:	47d0      	blx	sl
 800d720:	3001      	adds	r0, #1
 800d722:	d09b      	beq.n	800d65c <_printf_i+0x164>
 800d724:	3501      	adds	r5, #1
 800d726:	68e3      	ldr	r3, [r4, #12]
 800d728:	9903      	ldr	r1, [sp, #12]
 800d72a:	1a5b      	subs	r3, r3, r1
 800d72c:	42ab      	cmp	r3, r5
 800d72e:	dcf2      	bgt.n	800d716 <_printf_i+0x21e>
 800d730:	e7eb      	b.n	800d70a <_printf_i+0x212>
 800d732:	2500      	movs	r5, #0
 800d734:	f104 0619 	add.w	r6, r4, #25
 800d738:	e7f5      	b.n	800d726 <_printf_i+0x22e>
 800d73a:	bf00      	nop
 800d73c:	0800e235 	.word	0x0800e235
 800d740:	0800e246 	.word	0x0800e246

0800d744 <_read_r>:
 800d744:	b538      	push	{r3, r4, r5, lr}
 800d746:	4d07      	ldr	r5, [pc, #28]	; (800d764 <_read_r+0x20>)
 800d748:	4604      	mov	r4, r0
 800d74a:	4608      	mov	r0, r1
 800d74c:	4611      	mov	r1, r2
 800d74e:	2200      	movs	r2, #0
 800d750:	602a      	str	r2, [r5, #0]
 800d752:	461a      	mov	r2, r3
 800d754:	f7f4 f8fa 	bl	800194c <_read>
 800d758:	1c43      	adds	r3, r0, #1
 800d75a:	d102      	bne.n	800d762 <_read_r+0x1e>
 800d75c:	682b      	ldr	r3, [r5, #0]
 800d75e:	b103      	cbz	r3, 800d762 <_read_r+0x1e>
 800d760:	6023      	str	r3, [r4, #0]
 800d762:	bd38      	pop	{r3, r4, r5, pc}
 800d764:	200032f8 	.word	0x200032f8

0800d768 <abort>:
 800d768:	b508      	push	{r3, lr}
 800d76a:	2006      	movs	r0, #6
 800d76c:	f000 f898 	bl	800d8a0 <raise>
 800d770:	2001      	movs	r0, #1
 800d772:	f7f4 f8e1 	bl	8001938 <_exit>
	...

0800d778 <_fstat_r>:
 800d778:	b538      	push	{r3, r4, r5, lr}
 800d77a:	4d07      	ldr	r5, [pc, #28]	; (800d798 <_fstat_r+0x20>)
 800d77c:	2300      	movs	r3, #0
 800d77e:	4604      	mov	r4, r0
 800d780:	4608      	mov	r0, r1
 800d782:	4611      	mov	r1, r2
 800d784:	602b      	str	r3, [r5, #0]
 800d786:	f7f4 f90a 	bl	800199e <_fstat>
 800d78a:	1c43      	adds	r3, r0, #1
 800d78c:	d102      	bne.n	800d794 <_fstat_r+0x1c>
 800d78e:	682b      	ldr	r3, [r5, #0]
 800d790:	b103      	cbz	r3, 800d794 <_fstat_r+0x1c>
 800d792:	6023      	str	r3, [r4, #0]
 800d794:	bd38      	pop	{r3, r4, r5, pc}
 800d796:	bf00      	nop
 800d798:	200032f8 	.word	0x200032f8

0800d79c <_isatty_r>:
 800d79c:	b538      	push	{r3, r4, r5, lr}
 800d79e:	4d06      	ldr	r5, [pc, #24]	; (800d7b8 <_isatty_r+0x1c>)
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	4604      	mov	r4, r0
 800d7a4:	4608      	mov	r0, r1
 800d7a6:	602b      	str	r3, [r5, #0]
 800d7a8:	f7f4 f909 	bl	80019be <_isatty>
 800d7ac:	1c43      	adds	r3, r0, #1
 800d7ae:	d102      	bne.n	800d7b6 <_isatty_r+0x1a>
 800d7b0:	682b      	ldr	r3, [r5, #0]
 800d7b2:	b103      	cbz	r3, 800d7b6 <_isatty_r+0x1a>
 800d7b4:	6023      	str	r3, [r4, #0]
 800d7b6:	bd38      	pop	{r3, r4, r5, pc}
 800d7b8:	200032f8 	.word	0x200032f8

0800d7bc <memmove>:
 800d7bc:	4288      	cmp	r0, r1
 800d7be:	b510      	push	{r4, lr}
 800d7c0:	eb01 0402 	add.w	r4, r1, r2
 800d7c4:	d902      	bls.n	800d7cc <memmove+0x10>
 800d7c6:	4284      	cmp	r4, r0
 800d7c8:	4623      	mov	r3, r4
 800d7ca:	d807      	bhi.n	800d7dc <memmove+0x20>
 800d7cc:	1e43      	subs	r3, r0, #1
 800d7ce:	42a1      	cmp	r1, r4
 800d7d0:	d008      	beq.n	800d7e4 <memmove+0x28>
 800d7d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d7da:	e7f8      	b.n	800d7ce <memmove+0x12>
 800d7dc:	4402      	add	r2, r0
 800d7de:	4601      	mov	r1, r0
 800d7e0:	428a      	cmp	r2, r1
 800d7e2:	d100      	bne.n	800d7e6 <memmove+0x2a>
 800d7e4:	bd10      	pop	{r4, pc}
 800d7e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d7ee:	e7f7      	b.n	800d7e0 <memmove+0x24>

0800d7f0 <_realloc_r>:
 800d7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7f4:	4680      	mov	r8, r0
 800d7f6:	4614      	mov	r4, r2
 800d7f8:	460e      	mov	r6, r1
 800d7fa:	b921      	cbnz	r1, 800d806 <_realloc_r+0x16>
 800d7fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d800:	4611      	mov	r1, r2
 800d802:	f7fe be45 	b.w	800c490 <_malloc_r>
 800d806:	b92a      	cbnz	r2, 800d814 <_realloc_r+0x24>
 800d808:	f7ff fb06 	bl	800ce18 <_free_r>
 800d80c:	4625      	mov	r5, r4
 800d80e:	4628      	mov	r0, r5
 800d810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d814:	f000 f860 	bl	800d8d8 <_malloc_usable_size_r>
 800d818:	4284      	cmp	r4, r0
 800d81a:	4607      	mov	r7, r0
 800d81c:	d802      	bhi.n	800d824 <_realloc_r+0x34>
 800d81e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d822:	d812      	bhi.n	800d84a <_realloc_r+0x5a>
 800d824:	4621      	mov	r1, r4
 800d826:	4640      	mov	r0, r8
 800d828:	f7fe fe32 	bl	800c490 <_malloc_r>
 800d82c:	4605      	mov	r5, r0
 800d82e:	2800      	cmp	r0, #0
 800d830:	d0ed      	beq.n	800d80e <_realloc_r+0x1e>
 800d832:	42bc      	cmp	r4, r7
 800d834:	4622      	mov	r2, r4
 800d836:	4631      	mov	r1, r6
 800d838:	bf28      	it	cs
 800d83a:	463a      	movcs	r2, r7
 800d83c:	f7fe fdf1 	bl	800c422 <memcpy>
 800d840:	4631      	mov	r1, r6
 800d842:	4640      	mov	r0, r8
 800d844:	f7ff fae8 	bl	800ce18 <_free_r>
 800d848:	e7e1      	b.n	800d80e <_realloc_r+0x1e>
 800d84a:	4635      	mov	r5, r6
 800d84c:	e7df      	b.n	800d80e <_realloc_r+0x1e>

0800d84e <_raise_r>:
 800d84e:	291f      	cmp	r1, #31
 800d850:	b538      	push	{r3, r4, r5, lr}
 800d852:	4604      	mov	r4, r0
 800d854:	460d      	mov	r5, r1
 800d856:	d904      	bls.n	800d862 <_raise_r+0x14>
 800d858:	2316      	movs	r3, #22
 800d85a:	6003      	str	r3, [r0, #0]
 800d85c:	f04f 30ff 	mov.w	r0, #4294967295
 800d860:	bd38      	pop	{r3, r4, r5, pc}
 800d862:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d864:	b112      	cbz	r2, 800d86c <_raise_r+0x1e>
 800d866:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d86a:	b94b      	cbnz	r3, 800d880 <_raise_r+0x32>
 800d86c:	4620      	mov	r0, r4
 800d86e:	f000 f831 	bl	800d8d4 <_getpid_r>
 800d872:	462a      	mov	r2, r5
 800d874:	4601      	mov	r1, r0
 800d876:	4620      	mov	r0, r4
 800d878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d87c:	f000 b818 	b.w	800d8b0 <_kill_r>
 800d880:	2b01      	cmp	r3, #1
 800d882:	d00a      	beq.n	800d89a <_raise_r+0x4c>
 800d884:	1c59      	adds	r1, r3, #1
 800d886:	d103      	bne.n	800d890 <_raise_r+0x42>
 800d888:	2316      	movs	r3, #22
 800d88a:	6003      	str	r3, [r0, #0]
 800d88c:	2001      	movs	r0, #1
 800d88e:	e7e7      	b.n	800d860 <_raise_r+0x12>
 800d890:	2400      	movs	r4, #0
 800d892:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d896:	4628      	mov	r0, r5
 800d898:	4798      	blx	r3
 800d89a:	2000      	movs	r0, #0
 800d89c:	e7e0      	b.n	800d860 <_raise_r+0x12>
	...

0800d8a0 <raise>:
 800d8a0:	4b02      	ldr	r3, [pc, #8]	; (800d8ac <raise+0xc>)
 800d8a2:	4601      	mov	r1, r0
 800d8a4:	6818      	ldr	r0, [r3, #0]
 800d8a6:	f7ff bfd2 	b.w	800d84e <_raise_r>
 800d8aa:	bf00      	nop
 800d8ac:	20000044 	.word	0x20000044

0800d8b0 <_kill_r>:
 800d8b0:	b538      	push	{r3, r4, r5, lr}
 800d8b2:	4d07      	ldr	r5, [pc, #28]	; (800d8d0 <_kill_r+0x20>)
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	4604      	mov	r4, r0
 800d8b8:	4608      	mov	r0, r1
 800d8ba:	4611      	mov	r1, r2
 800d8bc:	602b      	str	r3, [r5, #0]
 800d8be:	f7f4 f82b 	bl	8001918 <_kill>
 800d8c2:	1c43      	adds	r3, r0, #1
 800d8c4:	d102      	bne.n	800d8cc <_kill_r+0x1c>
 800d8c6:	682b      	ldr	r3, [r5, #0]
 800d8c8:	b103      	cbz	r3, 800d8cc <_kill_r+0x1c>
 800d8ca:	6023      	str	r3, [r4, #0]
 800d8cc:	bd38      	pop	{r3, r4, r5, pc}
 800d8ce:	bf00      	nop
 800d8d0:	200032f8 	.word	0x200032f8

0800d8d4 <_getpid_r>:
 800d8d4:	f7f4 b818 	b.w	8001908 <_getpid>

0800d8d8 <_malloc_usable_size_r>:
 800d8d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8dc:	1f18      	subs	r0, r3, #4
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	bfbc      	itt	lt
 800d8e2:	580b      	ldrlt	r3, [r1, r0]
 800d8e4:	18c0      	addlt	r0, r0, r3
 800d8e6:	4770      	bx	lr

0800d8e8 <_init>:
 800d8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ea:	bf00      	nop
 800d8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8ee:	bc08      	pop	{r3}
 800d8f0:	469e      	mov	lr, r3
 800d8f2:	4770      	bx	lr

0800d8f4 <_fini>:
 800d8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8f6:	bf00      	nop
 800d8f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8fa:	bc08      	pop	{r3}
 800d8fc:	469e      	mov	lr, r3
 800d8fe:	4770      	bx	lr
