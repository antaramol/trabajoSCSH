
nodo_acelerometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015f20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002188  080160b0  080160b0  000260b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018238  08018238  00030224  2**0
                  CONTENTS
  4 .ARM          00000008  08018238  08018238  00028238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018240  08018240  00030224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018240  08018240  00028240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018244  08018244  00028244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  08018248  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e70  20000224  0801846c  00030224  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005094  0801846c  00035094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
 12 .debug_info   000396a8  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006dfc  00000000  00000000  000698fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002fb0  00000000  00000000  000706f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002d18  00000000  00000000  000736a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000098ec  00000000  00000000  000763c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034a3f  00000000  00000000  0007fcac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117d79  00000000  00000000  000b46eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cc464  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000dffc  00000000  00000000  001cc4b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000224 	.word	0x20000224
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016098 	.word	0x08016098

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000228 	.word	0x20000228
 80001cc:	08016098 	.word	0x08016098

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000eb4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000eb8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d013      	beq.n	8000eec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ec4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ec8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ecc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d00b      	beq.n	8000eec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ed4:	e000      	b.n	8000ed8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ed6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ed8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d0f9      	beq.n	8000ed6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ee2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000eec:	687b      	ldr	r3, [r7, #4]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <configureTimerForRunTimeStats>:
void temporizador_func(void *argument);
void clientMQTT_func(void *argument);

/* USER CODE BEGIN PFP */
volatile unsigned long ulHighFrequencyTimerTicks;
void configureTimerForRunTimeStats(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	ulHighFrequencyTimerTicks = 0;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <configureTimerForRunTimeStats+0x14>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7);
 8000f06:	4803      	ldr	r0, [pc, #12]	; (8000f14 <configureTimerForRunTimeStats+0x18>)
 8000f08:	f007 fa62 	bl	80083d0 <HAL_TIM_Base_Start_IT>
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000930 	.word	0x20000930
 8000f14:	20000390 	.word	0x20000390

08000f18 <getRunTimeCounterValue>:
unsigned long getRunTimeCounterValue(void) {
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <getRunTimeCounterValue+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]

}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000930 	.word	0x20000930

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f34:	f002 fab7 	bl	80034a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f38:	f000 f8ac 	bl	8001094 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3c:	f000 fb0a 	bl	8001554 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000f40:	f000 f90c 	bl	800115c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000f44:	f000 f942 	bl	80011cc <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000f48:	f000 f97e 	bl	8001248 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000f4c:	f000 fa00 	bl	8001350 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000f50:	f000 fa72 	bl	8001438 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f54:	f000 faa0 	bl	8001498 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f58:	f000 face 	bl	80014f8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8000f5c:	f000 fa36 	bl	80013cc <MX_TIM7_Init>
  MX_RTC_Init();
 8000f60:	f000 f998 	bl	8001294 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  status_acc = BSP_ACCELERO_Init_INT();
 8000f64:	f000 fcb4 	bl	80018d0 <BSP_ACCELERO_Init_INT>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4b2d      	ldr	r3, [pc, #180]	; (8001024 <main+0xf4>)
 8000f6e:	701a      	strb	r2, [r3, #0]
  if (status_acc == ACCELERO_OK){
 8000f70:	4b2c      	ldr	r3, [pc, #176]	; (8001024 <main+0xf4>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d102      	bne.n	8000f7e <main+0x4e>
	  printf("Acelerometro inicializado\r\n");
 8000f78:	482b      	ldr	r0, [pc, #172]	; (8001028 <main+0xf8>)
 8000f7a:	f013 f829 	bl	8013fd0 <puts>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f7e:	f00e fd59 	bl	800fa34 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of print_queue */
  print_queueHandle = osMessageQueueNew (2, sizeof(uintptr_t), &print_queue_attributes);
 8000f82:	4a2a      	ldr	r2, [pc, #168]	; (800102c <main+0xfc>)
 8000f84:	2104      	movs	r1, #4
 8000f86:	2002      	movs	r0, #2
 8000f88:	f00e ff1a 	bl	800fdc0 <osMessageQueueNew>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4a28      	ldr	r2, [pc, #160]	; (8001030 <main+0x100>)
 8000f90:	6013      	str	r3, [r2, #0]

  /* creation of receive_queue */
  receive_queueHandle = osMessageQueueNew (3, sizeof(uint8_t), &receive_queue_attributes);
 8000f92:	4a28      	ldr	r2, [pc, #160]	; (8001034 <main+0x104>)
 8000f94:	2101      	movs	r1, #1
 8000f96:	2003      	movs	r0, #3
 8000f98:	f00e ff12 	bl	800fdc0 <osMessageQueueNew>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4a26      	ldr	r2, [pc, #152]	; (8001038 <main+0x108>)
 8000fa0:	6013      	str	r3, [r2, #0]

  /* creation of publish_queue */
  publish_queueHandle = osMessageQueueNew (5, sizeof(uintptr_t), &publish_queue_attributes);
 8000fa2:	4a26      	ldr	r2, [pc, #152]	; (800103c <main+0x10c>)
 8000fa4:	2104      	movs	r1, #4
 8000fa6:	2005      	movs	r0, #5
 8000fa8:	f00e ff0a 	bl	800fdc0 <osMessageQueueNew>
 8000fac:	4603      	mov	r3, r0
 8000fae:	4a24      	ldr	r2, [pc, #144]	; (8001040 <main+0x110>)
 8000fb0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of config_task */
  config_taskHandle = osThreadNew(config_task_func, NULL, &config_task_attributes);
 8000fb2:	4a24      	ldr	r2, [pc, #144]	; (8001044 <main+0x114>)
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4824      	ldr	r0, [pc, #144]	; (8001048 <main+0x118>)
 8000fb8:	f00e fd86 	bl	800fac8 <osThreadNew>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	4a23      	ldr	r2, [pc, #140]	; (800104c <main+0x11c>)
 8000fc0:	6013      	str	r3, [r2, #0]

  /* creation of readAccel */
  readAccelHandle = osThreadNew(readAccel_func, NULL, &readAccel_attributes);
 8000fc2:	4a23      	ldr	r2, [pc, #140]	; (8001050 <main+0x120>)
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4823      	ldr	r0, [pc, #140]	; (8001054 <main+0x124>)
 8000fc8:	f00e fd7e 	bl	800fac8 <osThreadNew>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	4a22      	ldr	r2, [pc, #136]	; (8001058 <main+0x128>)
 8000fd0:	6013      	str	r3, [r2, #0]

  /* creation of printTask */
  printTaskHandle = osThreadNew(printTask_func, NULL, &printTask_attributes);
 8000fd2:	4a22      	ldr	r2, [pc, #136]	; (800105c <main+0x12c>)
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4822      	ldr	r0, [pc, #136]	; (8001060 <main+0x130>)
 8000fd8:	f00e fd76 	bl	800fac8 <osThreadNew>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	4a21      	ldr	r2, [pc, #132]	; (8001064 <main+0x134>)
 8000fe0:	6013      	str	r3, [r2, #0]

  /* creation of tarea_UART */
  tarea_UARTHandle = osThreadNew(tarea_UART_func, NULL, &tarea_UART_attributes);
 8000fe2:	4a21      	ldr	r2, [pc, #132]	; (8001068 <main+0x138>)
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4821      	ldr	r0, [pc, #132]	; (800106c <main+0x13c>)
 8000fe8:	f00e fd6e 	bl	800fac8 <osThreadNew>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4a20      	ldr	r2, [pc, #128]	; (8001070 <main+0x140>)
 8000ff0:	6013      	str	r3, [r2, #0]

  /* creation of temporizador */
  temporizadorHandle = osThreadNew(temporizador_func, NULL, &temporizador_attributes);
 8000ff2:	4a20      	ldr	r2, [pc, #128]	; (8001074 <main+0x144>)
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4820      	ldr	r0, [pc, #128]	; (8001078 <main+0x148>)
 8000ff8:	f00e fd66 	bl	800fac8 <osThreadNew>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	4a1f      	ldr	r2, [pc, #124]	; (800107c <main+0x14c>)
 8001000:	6013      	str	r3, [r2, #0]

  /* creation of clientMQTT */
  clientMQTTHandle = osThreadNew(clientMQTT_func, NULL, &clientMQTT_attributes);
 8001002:	4a1f      	ldr	r2, [pc, #124]	; (8001080 <main+0x150>)
 8001004:	2100      	movs	r1, #0
 8001006:	481f      	ldr	r0, [pc, #124]	; (8001084 <main+0x154>)
 8001008:	f00e fd5e 	bl	800fac8 <osThreadNew>
 800100c:	4603      	mov	r3, r0
 800100e:	4a1e      	ldr	r2, [pc, #120]	; (8001088 <main+0x158>)
 8001010:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_UART_Receive_IT(&huart1,&rec_data,1);
 8001012:	2201      	movs	r2, #1
 8001014:	491d      	ldr	r1, [pc, #116]	; (800108c <main+0x15c>)
 8001016:	481e      	ldr	r0, [pc, #120]	; (8001090 <main+0x160>)
 8001018:	f007 fdb4 	bl	8008b84 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800101c:	f00e fd2e 	bl	800fa7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001020:	e7fe      	b.n	8001020 <main+0xf0>
 8001022:	bf00      	nop
 8001024:	20000928 	.word	0x20000928
 8001028:	08016190 	.word	0x08016190
 800102c:	08017a94 	.word	0x08017a94
 8001030:	20000904 	.word	0x20000904
 8001034:	08017aac 	.word	0x08017aac
 8001038:	20000908 	.word	0x20000908
 800103c:	08017ac4 	.word	0x08017ac4
 8001040:	2000090c 	.word	0x2000090c
 8001044:	080179bc 	.word	0x080179bc
 8001048:	08001b2d 	.word	0x08001b2d
 800104c:	200008ec 	.word	0x200008ec
 8001050:	080179e0 	.word	0x080179e0
 8001054:	08002201 	.word	0x08002201
 8001058:	200008f0 	.word	0x200008f0
 800105c:	08017a04 	.word	0x08017a04
 8001060:	08002439 	.word	0x08002439
 8001064:	200008f4 	.word	0x200008f4
 8001068:	08017a28 	.word	0x08017a28
 800106c:	080024a1 	.word	0x080024a1
 8001070:	200008f8 	.word	0x200008f8
 8001074:	08017a4c 	.word	0x08017a4c
 8001078:	080024f1 	.word	0x080024f1
 800107c:	200008fc 	.word	0x200008fc
 8001080:	08017a70 	.word	0x08017a70
 8001084:	0800252d 	.word	0x0800252d
 8001088:	20000900 	.word	0x20000900
 800108c:	20000934 	.word	0x20000934
 8001090:	200003dc 	.word	0x200003dc

08001094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b096      	sub	sp, #88	; 0x58
 8001098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	2244      	movs	r2, #68	; 0x44
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f012 f8ad 	bl	8013202 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a8:	463b      	mov	r3, r7
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010ba:	f003 fedd 	bl	8004e78 <HAL_PWREx_ControlVoltageScaling>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010c4:	f001 facc 	bl	8002660 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010c8:	f003 feb8 	bl	8004e3c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <SystemClock_Config+0xc4>)
 80010ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010d2:	4a21      	ldr	r2, [pc, #132]	; (8001158 <SystemClock_Config+0xc4>)
 80010d4:	f023 0318 	bic.w	r3, r3, #24
 80010d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80010dc:	231c      	movs	r3, #28
 80010de:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010e0:	2301      	movs	r3, #1
 80010e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010e4:	2301      	movs	r3, #1
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010e8:	2301      	movs	r3, #1
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010f0:	2360      	movs	r3, #96	; 0x60
 80010f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f4:	2302      	movs	r3, #2
 80010f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010f8:	2301      	movs	r3, #1
 80010fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001100:	2328      	movs	r3, #40	; 0x28
 8001102:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001104:	2307      	movs	r3, #7
 8001106:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001108:	2302      	movs	r3, #2
 800110a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800110c:	2302      	movs	r3, #2
 800110e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4618      	mov	r0, r3
 8001116:	f003 ffd1 	bl	80050bc <HAL_RCC_OscConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001120:	f001 fa9e 	bl	8002660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001124:	230f      	movs	r3, #15
 8001126:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001128:	2303      	movs	r3, #3
 800112a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001138:	463b      	mov	r3, r7
 800113a:	2104      	movs	r1, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f004 fba5 	bl	800588c <HAL_RCC_ClockConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001148:	f001 fa8a 	bl	8002660 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800114c:	f005 f8c0 	bl	80062d0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001150:	bf00      	nop
 8001152:	3758      	adds	r7, #88	; 0x58
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40021000 	.word	0x40021000

0800115c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001160:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <MX_DFSDM1_Init+0x68>)
 8001162:	4a19      	ldr	r2, [pc, #100]	; (80011c8 <MX_DFSDM1_Init+0x6c>)
 8001164:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <MX_DFSDM1_Init+0x68>)
 8001168:	2201      	movs	r2, #1
 800116a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800116c:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <MX_DFSDM1_Init+0x68>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <MX_DFSDM1_Init+0x68>)
 8001174:	2202      	movs	r2, #2
 8001176:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <MX_DFSDM1_Init+0x68>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_DFSDM1_Init+0x68>)
 8001180:	2200      	movs	r2, #0
 8001182:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <MX_DFSDM1_Init+0x68>)
 8001186:	f44f 7280 	mov.w	r2, #256	; 0x100
 800118a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800118c:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <MX_DFSDM1_Init+0x68>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_DFSDM1_Init+0x68>)
 8001194:	2204      	movs	r2, #4
 8001196:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001198:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <MX_DFSDM1_Init+0x68>)
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_DFSDM1_Init+0x68>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <MX_DFSDM1_Init+0x68>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <MX_DFSDM1_Init+0x68>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <MX_DFSDM1_Init+0x68>)
 80011b2:	f002 fae9 	bl	8003788 <HAL_DFSDM_ChannelInit>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80011bc:	f001 fa50 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000240 	.word	0x20000240
 80011c8:	40016020 	.word	0x40016020

080011cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <MX_I2C2_Init+0x74>)
 80011d2:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <MX_I2C2_Init+0x78>)
 80011d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80011d6:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MX_I2C2_Init+0x74>)
 80011d8:	f640 6214 	movw	r2, #3604	; 0xe14
 80011dc:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80011de:	4b18      	ldr	r3, [pc, #96]	; (8001240 <MX_I2C2_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e4:	4b16      	ldr	r3, [pc, #88]	; (8001240 <MX_I2C2_Init+0x74>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <MX_I2C2_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <MX_I2C2_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <MX_I2C2_Init+0x74>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fc:	4b10      	ldr	r3, [pc, #64]	; (8001240 <MX_I2C2_Init+0x74>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_I2C2_Init+0x74>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <MX_I2C2_Init+0x74>)
 800120a:	f002 ff2f 	bl	800406c <HAL_I2C_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001214:	f001 fa24 	bl	8002660 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001218:	2100      	movs	r1, #0
 800121a:	4809      	ldr	r0, [pc, #36]	; (8001240 <MX_I2C2_Init+0x74>)
 800121c:	f003 fc2e 	bl	8004a7c <HAL_I2CEx_ConfigAnalogFilter>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001226:	f001 fa1b 	bl	8002660 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800122a:	2100      	movs	r1, #0
 800122c:	4804      	ldr	r0, [pc, #16]	; (8001240 <MX_I2C2_Init+0x74>)
 800122e:	f003 fc70 	bl	8004b12 <HAL_I2CEx_ConfigDigitalFilter>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001238:	f001 fa12 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000278 	.word	0x20000278
 8001244:	40005800 	.word	0x40005800

08001248 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_QUADSPI_Init+0x44>)
 800124e:	4a10      	ldr	r2, [pc, #64]	; (8001290 <MX_QUADSPI_Init+0x48>)
 8001250:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <MX_QUADSPI_Init+0x44>)
 8001254:	2202      	movs	r2, #2
 8001256:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <MX_QUADSPI_Init+0x44>)
 800125a:	2204      	movs	r2, #4
 800125c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <MX_QUADSPI_Init+0x44>)
 8001260:	2210      	movs	r2, #16
 8001262:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <MX_QUADSPI_Init+0x44>)
 8001266:	2217      	movs	r2, #23
 8001268:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <MX_QUADSPI_Init+0x44>)
 800126c:	2200      	movs	r2, #0
 800126e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <MX_QUADSPI_Init+0x44>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_QUADSPI_Init+0x44>)
 8001278:	f003 fe64 	bl	8004f44 <HAL_QSPI_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001282:	f001 f9ed 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200002c4 	.word	0x200002c4
 8001290:	a0001000 	.word	0xa0001000

08001294 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80012a8:	2300      	movs	r3, #0
 80012aa:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012ac:	4b26      	ldr	r3, [pc, #152]	; (8001348 <MX_RTC_Init+0xb4>)
 80012ae:	4a27      	ldr	r2, [pc, #156]	; (800134c <MX_RTC_Init+0xb8>)
 80012b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012b2:	4b25      	ldr	r3, [pc, #148]	; (8001348 <MX_RTC_Init+0xb4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80012b8:	4b23      	ldr	r3, [pc, #140]	; (8001348 <MX_RTC_Init+0xb4>)
 80012ba:	227f      	movs	r2, #127	; 0x7f
 80012bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 999;
 80012be:	4b22      	ldr	r3, [pc, #136]	; (8001348 <MX_RTC_Init+0xb4>)
 80012c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012c4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <MX_RTC_Init+0xb4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80012cc:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <MX_RTC_Init+0xb4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012d2:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <MX_RTC_Init+0xb4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <MX_RTC_Init+0xb4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012de:	481a      	ldr	r0, [pc, #104]	; (8001348 <MX_RTC_Init+0xb4>)
 80012e0:	f005 f9d8 	bl	8006694 <HAL_RTC_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80012ea:	f001 f9b9 	bl	8002660 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 80012ee:	230d      	movs	r3, #13
 80012f0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 1;
 80012f2:	2301      	movs	r3, #1
 80012f4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2200      	movs	r2, #0
 8001306:	4619      	mov	r1, r3
 8001308:	480f      	ldr	r0, [pc, #60]	; (8001348 <MX_RTC_Init+0xb4>)
 800130a:	f005 fa3e 	bl	800678a <HAL_RTC_SetTime>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001314:	f001 f9a4 	bl	8002660 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001318:	2301      	movs	r3, #1
 800131a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800131c:	2301      	movs	r3, #1
 800131e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001320:	2301      	movs	r3, #1
 8001322:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001328:	463b      	mov	r3, r7
 800132a:	2200      	movs	r2, #0
 800132c:	4619      	mov	r1, r3
 800132e:	4806      	ldr	r0, [pc, #24]	; (8001348 <MX_RTC_Init+0xb4>)
 8001330:	f005 fb24 	bl	800697c <HAL_RTC_SetDate>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800133a:	f001 f991 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000308 	.word	0x20000308
 800134c:	40002800 	.word	0x40002800

08001350 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_SPI3_Init+0x74>)
 8001356:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <MX_SPI3_Init+0x78>)
 8001358:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <MX_SPI3_Init+0x74>)
 800135c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001360:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_SPI3_Init+0x74>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001368:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <MX_SPI3_Init+0x74>)
 800136a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800136e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <MX_SPI3_Init+0x74>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <MX_SPI3_Init+0x74>)
 8001378:	2200      	movs	r2, #0
 800137a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_SPI3_Init+0x74>)
 800137e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001382:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_SPI3_Init+0x74>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_SPI3_Init+0x74>)
 800138c:	2200      	movs	r2, #0
 800138e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_SPI3_Init+0x74>)
 8001392:	2200      	movs	r2, #0
 8001394:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <MX_SPI3_Init+0x74>)
 8001398:	2200      	movs	r2, #0
 800139a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_SPI3_Init+0x74>)
 800139e:	2207      	movs	r2, #7
 80013a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <MX_SPI3_Init+0x74>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_SPI3_Init+0x74>)
 80013aa:	2208      	movs	r2, #8
 80013ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_SPI3_Init+0x74>)
 80013b0:	f005 fc8a 	bl	8006cc8 <HAL_SPI_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80013ba:	f001 f951 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	2000032c 	.word	0x2000032c
 80013c8:	40003c00 	.word	0x40003c00

080013cc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <MX_TIM7_Init+0x64>)
 80013de:	4a15      	ldr	r2, [pc, #84]	; (8001434 <MX_TIM7_Init+0x68>)
 80013e0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80013e2:	4b13      	ldr	r3, [pc, #76]	; (8001430 <MX_TIM7_Init+0x64>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <MX_TIM7_Init+0x64>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 799;
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <MX_TIM7_Init+0x64>)
 80013f0:	f240 321f 	movw	r2, #799	; 0x31f
 80013f4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <MX_TIM7_Init+0x64>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80013fc:	480c      	ldr	r0, [pc, #48]	; (8001430 <MX_TIM7_Init+0x64>)
 80013fe:	f006 ff90 	bl	8008322 <HAL_TIM_Base_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001408:	f001 f92a 	bl	8002660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	4619      	mov	r1, r3
 8001418:	4805      	ldr	r0, [pc, #20]	; (8001430 <MX_TIM7_Init+0x64>)
 800141a:	f007 fa2b 	bl	8008874 <HAL_TIMEx_MasterConfigSynchronization>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001424:	f001 f91c 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000390 	.word	0x20000390
 8001434:	40001400 	.word	0x40001400

08001438 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <MX_USART1_UART_Init+0x58>)
 800143e:	4a15      	ldr	r2, [pc, #84]	; (8001494 <MX_USART1_UART_Init+0x5c>)
 8001440:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <MX_USART1_UART_Init+0x58>)
 8001444:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001448:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_USART1_UART_Init+0x58>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MX_USART1_UART_Init+0x58>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <MX_USART1_UART_Init+0x58>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_USART1_UART_Init+0x58>)
 800145e:	220c      	movs	r2, #12
 8001460:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <MX_USART1_UART_Init+0x58>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_USART1_UART_Init+0x58>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <MX_USART1_UART_Init+0x58>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <MX_USART1_UART_Init+0x58>)
 8001476:	2200      	movs	r2, #0
 8001478:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <MX_USART1_UART_Init+0x58>)
 800147c:	f007 faa0 	bl	80089c0 <HAL_UART_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001486:	f001 f8eb 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200003dc 	.word	0x200003dc
 8001494:	40013800 	.word	0x40013800

08001498 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <MX_USART3_UART_Init+0x58>)
 800149e:	4a15      	ldr	r2, [pc, #84]	; (80014f4 <MX_USART3_UART_Init+0x5c>)
 80014a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <MX_USART3_UART_Init+0x58>)
 80014a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <MX_USART3_UART_Init+0x58>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <MX_USART3_UART_Init+0x58>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <MX_USART3_UART_Init+0x58>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <MX_USART3_UART_Init+0x58>)
 80014be:	220c      	movs	r2, #12
 80014c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <MX_USART3_UART_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <MX_USART3_UART_Init+0x58>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <MX_USART3_UART_Init+0x58>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <MX_USART3_UART_Init+0x58>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014da:	4805      	ldr	r0, [pc, #20]	; (80014f0 <MX_USART3_UART_Init+0x58>)
 80014dc:	f007 fa70 	bl	80089c0 <HAL_UART_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80014e6:	f001 f8bb 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000460 	.word	0x20000460
 80014f4:	40004800 	.word	0x40004800

080014f8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001502:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001506:	2206      	movs	r2, #6
 8001508:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800150c:	2202      	movs	r2, #2
 800150e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001512:	2202      	movs	r2, #2
 8001514:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001518:	2200      	movs	r2, #0
 800151a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800151e:	2200      	movs	r2, #0
 8001520:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800152a:	2200      	movs	r2, #0
 800152c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001530:	2200      	movs	r2, #0
 8001532:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001536:	2200      	movs	r2, #0
 8001538:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800153a:	4805      	ldr	r0, [pc, #20]	; (8001550 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800153c:	f003 fb35 	bl	8004baa <HAL_PCD_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001546:	f001 f88b 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200004e4 	.word	0x200004e4

08001554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800156a:	4bbb      	ldr	r3, [pc, #748]	; (8001858 <MX_GPIO_Init+0x304>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156e:	4aba      	ldr	r2, [pc, #744]	; (8001858 <MX_GPIO_Init+0x304>)
 8001570:	f043 0310 	orr.w	r3, r3, #16
 8001574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001576:	4bb8      	ldr	r3, [pc, #736]	; (8001858 <MX_GPIO_Init+0x304>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	f003 0310 	and.w	r3, r3, #16
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001582:	4bb5      	ldr	r3, [pc, #724]	; (8001858 <MX_GPIO_Init+0x304>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	4ab4      	ldr	r2, [pc, #720]	; (8001858 <MX_GPIO_Init+0x304>)
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800158e:	4bb2      	ldr	r3, [pc, #712]	; (8001858 <MX_GPIO_Init+0x304>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	4baf      	ldr	r3, [pc, #700]	; (8001858 <MX_GPIO_Init+0x304>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159e:	4aae      	ldr	r2, [pc, #696]	; (8001858 <MX_GPIO_Init+0x304>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a6:	4bac      	ldr	r3, [pc, #688]	; (8001858 <MX_GPIO_Init+0x304>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	4ba9      	ldr	r3, [pc, #676]	; (8001858 <MX_GPIO_Init+0x304>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	4aa8      	ldr	r2, [pc, #672]	; (8001858 <MX_GPIO_Init+0x304>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015be:	4ba6      	ldr	r3, [pc, #664]	; (8001858 <MX_GPIO_Init+0x304>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ca:	4ba3      	ldr	r3, [pc, #652]	; (8001858 <MX_GPIO_Init+0x304>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	4aa2      	ldr	r2, [pc, #648]	; (8001858 <MX_GPIO_Init+0x304>)
 80015d0:	f043 0308 	orr.w	r3, r3, #8
 80015d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d6:	4ba0      	ldr	r3, [pc, #640]	; (8001858 <MX_GPIO_Init+0x304>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80015e2:	2200      	movs	r2, #0
 80015e4:	f44f 718a 	mov.w	r1, #276	; 0x114
 80015e8:	489c      	ldr	r0, [pc, #624]	; (800185c <MX_GPIO_Init+0x308>)
 80015ea:	f002 fd0f 	bl	800400c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LED1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	f248 1124 	movw	r1, #33060	; 0x8124
 80015f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f8:	f002 fd08 	bl	800400c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80015fc:	2200      	movs	r2, #0
 80015fe:	f24f 0114 	movw	r1, #61460	; 0xf014
 8001602:	4897      	ldr	r0, [pc, #604]	; (8001860 <MX_GPIO_Init+0x30c>)
 8001604:	f002 fd02 	bl	800400c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	f241 0181 	movw	r1, #4225	; 0x1081
 800160e:	4895      	ldr	r0, [pc, #596]	; (8001864 <MX_GPIO_Init+0x310>)
 8001610:	f002 fcfc 	bl	800400c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001614:	2201      	movs	r2, #1
 8001616:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800161a:	4892      	ldr	r0, [pc, #584]	; (8001864 <MX_GPIO_Init+0x310>)
 800161c:	f002 fcf6 	bl	800400c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001626:	4890      	ldr	r0, [pc, #576]	; (8001868 <MX_GPIO_Init+0x314>)
 8001628:	f002 fcf0 	bl	800400c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800162c:	2201      	movs	r2, #1
 800162e:	2101      	movs	r1, #1
 8001630:	488a      	ldr	r0, [pc, #552]	; (800185c <MX_GPIO_Init+0x308>)
 8001632:	f002 fceb 	bl	800400c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001636:	f240 1315 	movw	r3, #277	; 0x115
 800163a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	4883      	ldr	r0, [pc, #524]	; (800185c <MX_GPIO_Init+0x308>)
 8001650:	f002 fa26 	bl	8003aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001654:	236a      	movs	r3, #106	; 0x6a
 8001656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001658:	4b84      	ldr	r3, [pc, #528]	; (800186c <MX_GPIO_Init+0x318>)
 800165a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	487d      	ldr	r0, [pc, #500]	; (800185c <MX_GPIO_Init+0x308>)
 8001668:	f002 fa1a 	bl	8003aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOTON_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BOTON_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800166c:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001672:	4b7e      	ldr	r3, [pc, #504]	; (800186c <MX_GPIO_Init+0x318>)
 8001674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	4879      	ldr	r0, [pc, #484]	; (8001868 <MX_GPIO_Init+0x314>)
 8001682:	f002 fa0d 	bl	8003aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001686:	233f      	movs	r3, #63	; 0x3f
 8001688:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800168a:	230b      	movs	r3, #11
 800168c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	4873      	ldr	r0, [pc, #460]	; (8001868 <MX_GPIO_Init+0x314>)
 800169a:	f002 fa01 	bl	8003aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800169e:	2303      	movs	r3, #3
 80016a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80016ae:	2308      	movs	r3, #8
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016bc:	f002 f9f0 	bl	8003aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin LED1_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|LED1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80016c0:	f248 1324 	movw	r3, #33060	; 0x8124
 80016c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016dc:	f002 f9e0 	bl	8003aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80016e0:	2308      	movs	r3, #8
 80016e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016f0:	2301      	movs	r3, #1
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	4619      	mov	r1, r3
 80016fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fe:	f002 f9cf 	bl	8003aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001702:	2310      	movs	r3, #16
 8001704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001706:	230b      	movs	r3, #11
 8001708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001718:	f002 f9c2 	bl	8003aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800171c:	23c0      	movs	r3, #192	; 0xc0
 800171e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800172c:	2305      	movs	r3, #5
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173a:	f002 f9b1 	bl	8003aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800173e:	2301      	movs	r3, #1
 8001740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001742:	4b4a      	ldr	r3, [pc, #296]	; (800186c <MX_GPIO_Init+0x318>)
 8001744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	4843      	ldr	r0, [pc, #268]	; (8001860 <MX_GPIO_Init+0x30c>)
 8001752:	f002 f9a5 	bl	8003aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001756:	2302      	movs	r3, #2
 8001758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800175a:	230b      	movs	r3, #11
 800175c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	483d      	ldr	r0, [pc, #244]	; (8001860 <MX_GPIO_Init+0x30c>)
 800176a:	f002 f999 	bl	8003aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800176e:	f24f 0314 	movw	r3, #61460	; 0xf014
 8001772:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001774:	2301      	movs	r3, #1
 8001776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	4619      	mov	r1, r3
 8001786:	4836      	ldr	r0, [pc, #216]	; (8001860 <MX_GPIO_Init+0x30c>)
 8001788:	f002 f98a 	bl	8003aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 800178c:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001790:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001792:	4b36      	ldr	r3, [pc, #216]	; (800186c <MX_GPIO_Init+0x318>)
 8001794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	4619      	mov	r1, r3
 80017a0:	4830      	ldr	r0, [pc, #192]	; (8001864 <MX_GPIO_Init+0x310>)
 80017a2:	f002 f97d 	bl	8003aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80017a6:	f243 0381 	movw	r3, #12417	; 0x3081
 80017aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ac:	2301      	movs	r3, #1
 80017ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4619      	mov	r1, r3
 80017be:	4829      	ldr	r0, [pc, #164]	; (8001864 <MX_GPIO_Init+0x310>)
 80017c0:	f002 f96e 	bl	8003aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80017c4:	f44f 7310 	mov.w	r3, #576	; 0x240
 80017c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ca:	2301      	movs	r3, #1
 80017cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4619      	mov	r1, r3
 80017dc:	4822      	ldr	r0, [pc, #136]	; (8001868 <MX_GPIO_Init+0x314>)
 80017de:	f002 f95f 	bl	8003aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80017e2:	2302      	movs	r3, #2
 80017e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ee:	2303      	movs	r3, #3
 80017f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017f2:	2305      	movs	r3, #5
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	4819      	ldr	r0, [pc, #100]	; (8001864 <MX_GPIO_Init+0x310>)
 80017fe:	f002 f94f 	bl	8003aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001802:	2378      	movs	r3, #120	; 0x78
 8001804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001812:	2307      	movs	r3, #7
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4619      	mov	r1, r3
 800181c:	4811      	ldr	r0, [pc, #68]	; (8001864 <MX_GPIO_Init+0x310>)
 800181e:	f002 f93f 	bl	8003aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001822:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001828:	2312      	movs	r3, #18
 800182a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001830:	2303      	movs	r3, #3
 8001832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001834:	2304      	movs	r3, #4
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	4619      	mov	r1, r3
 800183e:	4808      	ldr	r0, [pc, #32]	; (8001860 <MX_GPIO_Init+0x30c>)
 8001840:	f002 f92e 	bl	8003aa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001844:	2200      	movs	r2, #0
 8001846:	2105      	movs	r1, #5
 8001848:	2007      	movs	r0, #7
 800184a:	f001 ff65 	bl	8003718 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800184e:	2007      	movs	r0, #7
 8001850:	f001 ff7e 	bl	8003750 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001854:	2200      	movs	r2, #0
 8001856:	e00b      	b.n	8001870 <MX_GPIO_Init+0x31c>
 8001858:	40021000 	.word	0x40021000
 800185c:	48001000 	.word	0x48001000
 8001860:	48000400 	.word	0x48000400
 8001864:	48000c00 	.word	0x48000c00
 8001868:	48000800 	.word	0x48000800
 800186c:	10110000 	.word	0x10110000
 8001870:	2105      	movs	r1, #5
 8001872:	2017      	movs	r0, #23
 8001874:	f001 ff50 	bl	8003718 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001878:	2017      	movs	r0, #23
 800187a:	f001 ff69 	bl	8003750 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2105      	movs	r1, #5
 8001882:	2028      	movs	r0, #40	; 0x28
 8001884:	f001 ff48 	bl	8003718 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001888:	2028      	movs	r0, #40	; 0x28
 800188a:	f001 ff61 	bl	8003750 <HAL_NVIC_EnableIRQ>

}
 800188e:	bf00      	nop
 8001890:	3728      	adds	r7, #40	; 0x28
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop

08001898 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	e009      	b.n	80018be <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	60ba      	str	r2, [r7, #8]
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fafa 	bl	8000eac <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	3301      	adds	r3, #1
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	dbf1      	blt.n	80018aa <_write+0x12>
	}
	return len;
 80018c6:	687b      	ldr	r3, [r7, #4]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <BSP_ACCELERO_Init_INT>:

ACCELERO_StatusTypeDef BSP_ACCELERO_Init_INT(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
	ACCELERO_StatusTypeDef ret;
	ret = BSP_ACCELERO_Init();
 80018d6:	f008 fd5f 	bl	800a398 <BSP_ACCELERO_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
	if (ret == ACCELERO_OK)
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d12f      	bne.n	8001944 <BSP_ACCELERO_Init_INT+0x74>
	{
		/* Initialize interruption*/
		uint8_t tmp;
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G);
 80018e4:	210b      	movs	r1, #11
 80018e6:	20d4      	movs	r0, #212	; 0xd4
 80018e8:	f008 fd1a 	bl	800a320 <SENSOR_IO_Read>
 80018ec:	4603      	mov	r3, r0
 80018ee:	71bb      	strb	r3, [r7, #6]
		tmp |=0b10000000;
 80018f0:	79bb      	ldrb	r3, [r7, #6]
 80018f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018f6:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G, tmp);
 80018f8:	79bb      	ldrb	r3, [r7, #6]
 80018fa:	461a      	mov	r2, r3
 80018fc:	210b      	movs	r1, #11
 80018fe:	20d4      	movs	r0, #212	; 0xd4
 8001900:	f008 fcf4 	bl	800a2ec <SENSOR_IO_Write>
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL);
 8001904:	210d      	movs	r1, #13
 8001906:	20d4      	movs	r0, #212	; 0xd4
 8001908:	f008 fd0a 	bl	800a320 <SENSOR_IO_Read>
 800190c:	4603      	mov	r3, r0
 800190e:	71bb      	strb	r3, [r7, #6]
		tmp |=0b00000001;
 8001910:	79bb      	ldrb	r3, [r7, #6]
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, tmp);
 8001918:	79bb      	ldrb	r3, [r7, #6]
 800191a:	461a      	mov	r2, r3
 800191c:	210d      	movs	r1, #13
 800191e:	20d4      	movs	r0, #212	; 0xd4
 8001920:	f008 fce4 	bl	800a2ec <SENSOR_IO_Write>
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG);
 8001924:	211a      	movs	r1, #26
 8001926:	20d4      	movs	r0, #212	; 0xd4
 8001928:	f008 fcfa 	bl	800a320 <SENSOR_IO_Read>
 800192c:	4603      	mov	r3, r0
 800192e:	71bb      	strb	r3, [r7, #6]
		tmp |=0b10000000;
 8001930:	79bb      	ldrb	r3, [r7, #6]
 8001932:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001936:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG, tmp);
 8001938:	79bb      	ldrb	r3, [r7, #6]
 800193a:	461a      	mov	r2, r3
 800193c:	211a      	movs	r1, #26
 800193e:	20d4      	movs	r0, #212	; 0xd4
 8001940:	f008 fcd4 	bl	800a2ec <SENSOR_IO_Write>
	}
	return ret;
 8001944:	79fb      	ldrb	r3, [r7, #7]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

	static osStatus_t estado;
	if (huart == &huart1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a0c      	ldr	r2, [pc, #48]	; (800198c <HAL_UART_RxCpltCallback+0x3c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d110      	bne.n	8001982 <HAL_UART_RxCpltCallback+0x32>
	{
		HAL_UART_Receive_IT(&huart1,&rec_data,1);
 8001960:	2201      	movs	r2, #1
 8001962:	490b      	ldr	r1, [pc, #44]	; (8001990 <HAL_UART_RxCpltCallback+0x40>)
 8001964:	4809      	ldr	r0, [pc, #36]	; (800198c <HAL_UART_RxCpltCallback+0x3c>)
 8001966:	f007 f90d 	bl	8008b84 <HAL_UART_Receive_IT>
		printf("Recibido: %d\r\n",rec_data);
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_UART_RxCpltCallback+0x40>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	4619      	mov	r1, r3
 8001970:	4808      	ldr	r0, [pc, #32]	; (8001994 <HAL_UART_RxCpltCallback+0x44>)
 8001972:	f012 faa7 	bl	8013ec4 <iprintf>
		osThreadFlagsSet(tarea_UARTHandle,0x0002U);
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <HAL_UART_RxCpltCallback+0x48>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2102      	movs	r1, #2
 800197c:	4618      	mov	r0, r3
 800197e:	f00e f935 	bl	800fbec <osThreadFlagsSet>
			printf("Estado: ok\r\n");
		else
			printf("Algo no va bien\r\n");
			*/
	}
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200003dc 	.word	0x200003dc
 8001990:	20000934 	.word	0x20000934
 8001994:	080161ac 	.word	0x080161ac
 8001998:	200008f8 	.word	0x200008f8

0800199c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019ac:	d00e      	beq.n	80019cc <HAL_GPIO_EXTI_Callback+0x30>
 80019ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019b2:	dc18      	bgt.n	80019e6 <HAL_GPIO_EXTI_Callback+0x4a>
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d013      	beq.n	80019e0 <HAL_GPIO_EXTI_Callback+0x44>
 80019b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019bc:	d113      	bne.n	80019e6 <HAL_GPIO_EXTI_Callback+0x4a>
	{
		case (LSM6DSL_INT1_EXTI11_Pin):
		{
			osThreadFlagsSet(readAccelHandle,0x0001U);
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <HAL_GPIO_EXTI_Callback+0x54>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2101      	movs	r1, #1
 80019c4:	4618      	mov	r0, r3
 80019c6:	f00e f911 	bl	800fbec <osThreadFlagsSet>
			break;
 80019ca:	e00d      	b.n	80019e8 <HAL_GPIO_EXTI_Callback+0x4c>
		}
		case(BOTON_Pin):
		{
			printf("Ha pulsado el boton\r\n");
 80019cc:	4809      	ldr	r0, [pc, #36]	; (80019f4 <HAL_GPIO_EXTI_Callback+0x58>)
 80019ce:	f012 faff 	bl	8013fd0 <puts>
			osThreadFlagsSet(readAccelHandle,0x0002U);
 80019d2:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <HAL_GPIO_EXTI_Callback+0x54>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2102      	movs	r1, #2
 80019d8:	4618      	mov	r0, r3
 80019da:	f00e f907 	bl	800fbec <osThreadFlagsSet>
			break;
 80019de:	e003      	b.n	80019e8 <HAL_GPIO_EXTI_Callback+0x4c>
		}
		case (GPIO_PIN_1):
		{
			SPI_WIFI_ISR();
 80019e0:	f00a f946 	bl	800bc70 <SPI_WIFI_ISR>
			break;
 80019e4:	e000      	b.n	80019e8 <HAL_GPIO_EXTI_Callback+0x4c>
		}
		default:
		{
		  break;
 80019e6:	bf00      	nop
		}
	}
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	200008f0 	.word	0x200008f0
 80019f4:	080161bc 	.word	0x080161bc

080019f8 <wifi_start>:

static int wifi_start(void)
{
 80019f8:	b5b0      	push	{r4, r5, r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];
  printf("wifistart\r\n");
 80019fe:	481d      	ldr	r0, [pc, #116]	; (8001a74 <wifi_start+0x7c>)
 8001a00:	f012 fae6 	bl	8013fd0 <puts>
 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 8001a04:	f00a f944 	bl	800bc90 <WIFI_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d129      	bne.n	8001a62 <wifi_start+0x6a>
  {
	printf("xddddddd\r\n");
 8001a0e:	481a      	ldr	r0, [pc, #104]	; (8001a78 <wifi_start+0x80>)
 8001a10:	f012 fade 	bl	8013fd0 <puts>
    printf(("ES-WIFI Initialized.\r\n"));
 8001a14:	4819      	ldr	r0, [pc, #100]	; (8001a7c <wifi_start+0x84>)
 8001a16:	f012 fadb 	bl	8013fd0 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f00a f985 	bl	800bd2c <WIFI_GetMAC_Address>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d116      	bne.n	8001a56 <wifi_start+0x5e>
    {
      printf("MAC asignada\r\n");
 8001a28:	4815      	ldr	r0, [pc, #84]	; (8001a80 <wifi_start+0x88>)
 8001a2a:	f012 fad1 	bl	8013fd0 <puts>
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
               MAC_Addr[0],
 8001a2e:	783b      	ldrb	r3, [r7, #0]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001a30:	4618      	mov	r0, r3
               MAC_Addr[1],
 8001a32:	787b      	ldrb	r3, [r7, #1]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001a34:	461c      	mov	r4, r3
               MAC_Addr[2],
 8001a36:	78bb      	ldrb	r3, [r7, #2]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001a38:	461d      	mov	r5, r3
               MAC_Addr[3],
 8001a3a:	78fb      	ldrb	r3, [r7, #3]
               MAC_Addr[4],
 8001a3c:	793a      	ldrb	r2, [r7, #4]
               MAC_Addr[5]);
 8001a3e:	7979      	ldrb	r1, [r7, #5]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001a40:	9102      	str	r1, [sp, #8]
 8001a42:	9201      	str	r2, [sp, #4]
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	462b      	mov	r3, r5
 8001a48:	4622      	mov	r2, r4
 8001a4a:	4601      	mov	r1, r0
 8001a4c:	480d      	ldr	r0, [pc, #52]	; (8001a84 <wifi_start+0x8c>)
 8001a4e:	f012 fa39 	bl	8013ec4 <iprintf>
  else
  {
	printf("Errorfifi\r\n");
    return -1;
  }
  return 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	e00a      	b.n	8001a6c <wifi_start+0x74>
      printf("> ERROR : CANNOT get MAC address\r\n");
 8001a56:	480c      	ldr	r0, [pc, #48]	; (8001a88 <wifi_start+0x90>)
 8001a58:	f012 faba 	bl	8013fd0 <puts>
      return -1;
 8001a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a60:	e004      	b.n	8001a6c <wifi_start+0x74>
	printf("Errorfifi\r\n");
 8001a62:	480a      	ldr	r0, [pc, #40]	; (8001a8c <wifi_start+0x94>)
 8001a64:	f012 fab4 	bl	8013fd0 <puts>
    return -1;
 8001a68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bdb0      	pop	{r4, r5, r7, pc}
 8001a74:	080161d4 	.word	0x080161d4
 8001a78:	080161e0 	.word	0x080161e0
 8001a7c:	080161ec 	.word	0x080161ec
 8001a80:	08016204 	.word	0x08016204
 8001a84:	08016214 	.word	0x08016214
 8001a88:	08016254 	.word	0x08016254
 8001a8c:	08016278 	.word	0x08016278

08001a90 <wifi_connect>:

int wifi_connect(char* SSID, char* PASSWORD)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af02      	add	r7, sp, #8
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]

  wifi_start();
 8001a9a:	f7ff ffad 	bl	80019f8 <wifi_start>

  printf("Connecting to %s\r\n",SSID);
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	4818      	ldr	r0, [pc, #96]	; (8001b04 <wifi_connect+0x74>)
 8001aa2:	f012 fa0f 	bl	8013ec4 <iprintf>
  if( WIFI_Connect(SSID, PASSWORD, WIFISECURITY) == WIFI_STATUS_OK)
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	6839      	ldr	r1, [r7, #0]
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f00a f91c 	bl	800bce8 <WIFI_Connect>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d11d      	bne.n	8001af2 <wifi_connect+0x62>
  {
    if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8001ab6:	4814      	ldr	r0, [pc, #80]	; (8001b08 <wifi_connect+0x78>)
 8001ab8:	f00a f94e 	bl	800bd58 <WIFI_GetIP_Address>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d111      	bne.n	8001ae6 <wifi_connect+0x56>
    {
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
               IP_Addr[0],
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <wifi_connect+0x78>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 8001ac6:	4619      	mov	r1, r3
               IP_Addr[1],
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <wifi_connect+0x78>)
 8001aca:	785b      	ldrb	r3, [r3, #1]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 8001acc:	461a      	mov	r2, r3
               IP_Addr[2],
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <wifi_connect+0x78>)
 8001ad0:	789b      	ldrb	r3, [r3, #2]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 8001ad2:	4618      	mov	r0, r3
               IP_Addr[3]);
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <wifi_connect+0x78>)
 8001ad6:	78db      	ldrb	r3, [r3, #3]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	4603      	mov	r3, r0
 8001adc:	480b      	ldr	r0, [pc, #44]	; (8001b0c <wifi_connect+0x7c>)
 8001ade:	f012 f9f1 	bl	8013ec4 <iprintf>
  else
  {
		 printf("ERROR : es-wifi module NOT connected\n");
     return -1;
  }
  return 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e00a      	b.n	8001afc <wifi_connect+0x6c>
		  printf(" ERROR : es-wifi module CANNOT get IP address\r\n");
 8001ae6:	480a      	ldr	r0, [pc, #40]	; (8001b10 <wifi_connect+0x80>)
 8001ae8:	f012 fa72 	bl	8013fd0 <puts>
      return -1;
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295
 8001af0:	e004      	b.n	8001afc <wifi_connect+0x6c>
		 printf("ERROR : es-wifi module NOT connected\n");
 8001af2:	4808      	ldr	r0, [pc, #32]	; (8001b14 <wifi_connect+0x84>)
 8001af4:	f012 fa6c 	bl	8013fd0 <puts>
     return -1;
 8001af8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	08016284 	.word	0x08016284
 8001b08:	2000092c 	.word	0x2000092c
 8001b0c:	08016298 	.word	0x08016298
 8001b10:	080162d4 	.word	0x080162d4
 8001b14:	08016304 	.word	0x08016304

08001b18 <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8001b1c:	4802      	ldr	r0, [pc, #8]	; (8001b28 <SPI3_IRQHandler+0x10>)
 8001b1e:	f005 fecf 	bl	80078c0 <HAL_SPI_IRQHandler>
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000df8 	.word	0x20000df8

08001b2c <config_task_func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_config_task_func */
void config_task_func(void *argument)
{
 8001b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b30:	b0b2      	sub	sp, #200	; 0xc8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN 5 */
	uint8_t recibido[20];
	//uint32_t flag_rec;
	osStatus_t estado;
	uint32_t return_wait = 0U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	uint16_t num_usuario;
	uint8_t to_change[6];
	const char* msg_hora_ok = "\r\nHora cambiada correctamente\r\n";
 8001b3c:	4b94      	ldr	r3, [pc, #592]	; (8001d90 <config_task_func+0x264>)
 8001b3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const char* msg_fecha_ok = "Fecha cambiada correctamente\r\n";
 8001b42:	4b94      	ldr	r3, [pc, #592]	; (8001d94 <config_task_func+0x268>)
 8001b44:	67fb      	str	r3, [r7, #124]	; 0x7c
	const char* msg_error = "\r\nERROR: Valor no válido\r\n";
 8001b46:	4b94      	ldr	r3, [pc, #592]	; (8001d98 <config_task_func+0x26c>)
 8001b48:	67bb      	str	r3, [r7, #120]	; 0x78
	const char* msg_rtc1 = "\r\n\r\n========================\r\n"
 8001b4a:	4b94      	ldr	r3, [pc, #592]	; (8001d9c <config_task_func+0x270>)
 8001b4c:	677b      	str	r3, [r7, #116]	; 0x74
	"| Configurar rtc |\r\n"
	"========================\r\n\r\n";
	const char* msg[6] = {
 8001b4e:	4b94      	ldr	r3, [pc, #592]	; (8001da0 <config_task_func+0x274>)
 8001b50:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8001b54:	461d      	mov	r5, r3
 8001b56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b5a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b5e:	e884 0003 	stmia.w	r4, {r0, r1}
	"Hora (0-23): ", "\r\nMinuto (0-59): ","\r\nSegundo (0-59): ","\r\nDía (1-31): ","\r\nMes (1-12): ",
	"\r\nAño (0-99): "};
	uint8_t limit[6][2] = {{0,23},{0,59},{0,59},{1,31},{1,12},{0,99}};
 8001b62:	4a90      	ldr	r2, [pc, #576]	; (8001da4 <config_task_func+0x278>)
 8001b64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b68:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//uint8_t *toChange[6] = {&GetTime.Hours, &GetTime.Minutes, &GetTime.Seconds, &GetDate.Date,&GetDate.Month, &GetDate.Year};


	printf("Empieza el bucle\r\n");
 8001b6e:	488e      	ldr	r0, [pc, #568]	; (8001da8 <config_task_func+0x27c>)
 8001b70:	f012 fa2e 	bl	8013fd0 <puts>
	estado = osMessageQueuePut(print_queueHandle, &msg_rtc1, 0, pdMS_TO_TICKS(500));
 8001b74:	4b8d      	ldr	r3, [pc, #564]	; (8001dac <config_task_func+0x280>)
 8001b76:	6818      	ldr	r0, [r3, #0]
 8001b78:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001b7c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b80:	2200      	movs	r2, #0
 8001b82:	f00e f991 	bl	800fea8 <osMessageQueuePut>
 8001b86:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
	int i,j,m = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	for (i=0;i<6;){
 8001b90:	2300      	movs	r3, #0
 8001b92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001b96:	e12e      	b.n	8001df6 <config_task_func+0x2ca>
		estado = osMessageQueuePut(print_queueHandle, &msg[i], 0, pdMS_TO_TICKS(500));
 8001b98:	4b84      	ldr	r3, [pc, #528]	; (8001dac <config_task_func+0x280>)
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ba0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	18d1      	adds	r1, r2, r3
 8001ba8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001bac:	2200      	movs	r2, #0
 8001bae:	f00e f97b 	bl	800fea8 <osMessageQueuePut>
 8001bb2:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
		printf("Esperando a que ser reciba el dato\r\n");
 8001bb6:	487e      	ldr	r0, [pc, #504]	; (8001db0 <config_task_func+0x284>)
 8001bb8:	f012 fa0a 	bl	8013fd0 <puts>

		for (j=0;j<3;){
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001bc2:	e03d      	b.n	8001c40 <config_task_func+0x114>
			estado = osMessageQueueGet(receive_queueHandle, &recibido[j], NULL, osWaitForever);
 8001bc4:	4b7b      	ldr	r3, [pc, #492]	; (8001db4 <config_task_func+0x288>)
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001bcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bd0:	18d1      	adds	r1, r2, r3
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f00e f9c6 	bl	800ff68 <osMessageQueueGet>
 8001bdc:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
			printf("De la cola: %c\r\n",recibido[j]);
 8001be0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001be4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001be8:	4413      	add	r3, r2
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	4872      	ldr	r0, [pc, #456]	; (8001db8 <config_task_func+0x28c>)
 8001bf0:	f012 f968 	bl	8013ec4 <iprintf>
			if(recibido[j]==13){
 8001bf4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001bf8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bfc:	4413      	add	r3, r2
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b0d      	cmp	r3, #13
 8001c02:	d103      	bne.n	8001c0c <config_task_func+0xe0>
				printf("Ha pulsado intro\r\n");
 8001c04:	486d      	ldr	r0, [pc, #436]	; (8001dbc <config_task_func+0x290>)
 8001c06:	f012 f9e3 	bl	8013fd0 <puts>
				break;
 8001c0a:	e01d      	b.n	8001c48 <config_task_func+0x11c>
			}
			if (recibido[j]==127){
 8001c0c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001c10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c14:	4413      	add	r3, r2
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b7f      	cmp	r3, #127	; 0x7f
 8001c1a:	d10c      	bne.n	8001c36 <config_task_func+0x10a>
				printf("Ha pulsado borrar\r\n");
 8001c1c:	4868      	ldr	r0, [pc, #416]	; (8001dc0 <config_task_func+0x294>)
 8001c1e:	f012 f9d7 	bl	8013fd0 <puts>
				if (j>0) j--;
 8001c22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	dd0a      	ble.n	8001c40 <config_task_func+0x114>
 8001c2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c34:	e004      	b.n	8001c40 <config_task_func+0x114>
			}else{
				j++;
 8001c36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		for (j=0;j<3;){
 8001c40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	ddbd      	ble.n	8001bc4 <config_task_func+0x98>
			}
		}
		printf("%d\r\n",j);
 8001c48:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001c4c:	485d      	ldr	r0, [pc, #372]	; (8001dc4 <config_task_func+0x298>)
 8001c4e:	f012 f939 	bl	8013ec4 <iprintf>
		switch(j){
 8001c52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d849      	bhi.n	8001cee <config_task_func+0x1c2>
 8001c5a:	a201      	add	r2, pc, #4	; (adr r2, 8001c60 <config_task_func+0x134>)
 8001c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c60:	08001c71 	.word	0x08001c71
 8001c64:	08001c79 	.word	0x08001c79
 8001c68:	08001c87 	.word	0x08001c87
 8001c6c:	08001cab 	.word	0x08001cab
		case 0:
			num_usuario=0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
			break;
 8001c76:	e03a      	b.n	8001cee <config_task_func+0x1c2>
		case 1:
			num_usuario = recibido[0]-48;
 8001c78:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3b30      	subs	r3, #48	; 0x30
 8001c80:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
			//i++;
			break;
 8001c84:	e033      	b.n	8001cee <config_task_func+0x1c2>
		case 2:
			num_usuario = 10*(recibido[0]-48)+recibido[1]-48;
 8001c86:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001c8a:	3b30      	subs	r3, #48	; 0x30
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	461a      	mov	r2, r3
 8001c90:	0092      	lsls	r2, r2, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	3b30      	subs	r3, #48	; 0x30
 8001ca4:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
			//i++;
			break;
 8001ca8:	e021      	b.n	8001cee <config_task_func+0x1c2>
		case 3:
			num_usuario = 100*(recibido[0]-48)+10*(recibido[1]-48)+recibido[2]-48;
 8001caa:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001cae:	3b30      	subs	r3, #48	; 0x30
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	0092      	lsls	r2, r2, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	461a      	mov	r2, r3
 8001cba:	0091      	lsls	r1, r2, #2
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8001cca:	3b30      	subs	r3, #48	; 0x30
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	4619      	mov	r1, r3
 8001cd0:	0089      	lsls	r1, r1, #2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	4413      	add	r3, r2
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	3b30      	subs	r3, #48	; 0x30
 8001ce8:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
			break;
 8001cec:	bf00      	nop
		}
		printf("Numero: %d\r\n",num_usuario);
 8001cee:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4834      	ldr	r0, [pc, #208]	; (8001dc8 <config_task_func+0x29c>)
 8001cf6:	f012 f8e5 	bl	8013ec4 <iprintf>
		printf("Rango: %d-%d\r\n",limit[i][0],limit[i][1]);
 8001cfa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	33b8      	adds	r3, #184	; 0xb8
 8001d02:	f107 0210 	add.w	r2, r7, #16
 8001d06:	4413      	add	r3, r2
 8001d08:	f813 3c78 	ldrb.w	r3, [r3, #-120]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	33b8      	adds	r3, #184	; 0xb8
 8001d16:	f107 0210 	add.w	r2, r7, #16
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f813 3c77 	ldrb.w	r3, [r3, #-119]
 8001d20:	461a      	mov	r2, r3
 8001d22:	482a      	ldr	r0, [pc, #168]	; (8001dcc <config_task_func+0x2a0>)
 8001d24:	f012 f8ce 	bl	8013ec4 <iprintf>
		if (num_usuario<limit[i][0] || num_usuario>limit[i][1]){
 8001d28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	33b8      	adds	r3, #184	; 0xb8
 8001d30:	f107 0210 	add.w	r2, r7, #16
 8001d34:	4413      	add	r3, r2
 8001d36:	f813 3c78 	ldrb.w	r3, [r3, #-120]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d30d      	bcc.n	8001d60 <config_task_func+0x234>
 8001d44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	33b8      	adds	r3, #184	; 0xb8
 8001d4c:	f107 0210 	add.w	r2, r7, #16
 8001d50:	4413      	add	r3, r2
 8001d52:	f813 3c77 	ldrb.w	r3, [r3, #-119]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d93b      	bls.n	8001dd8 <config_task_func+0x2ac>
			estado = osMessageQueuePut(print_queueHandle, &msg_error, 0, pdMS_TO_TICKS(500));
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <config_task_func+0x280>)
 8001d62:	6818      	ldr	r0, [r3, #0]
 8001d64:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001d68:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f00e f89b 	bl	800fea8 <osMessageQueuePut>
 8001d72:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
			if (estado == osOK)
 8001d76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d103      	bne.n	8001d86 <config_task_func+0x25a>
				printf("Enviado valor erroneo\r\n");
 8001d7e:	4814      	ldr	r0, [pc, #80]	; (8001dd0 <config_task_func+0x2a4>)
 8001d80:	f012 f926 	bl	8013fd0 <puts>
 8001d84:	e037      	b.n	8001df6 <config_task_func+0x2ca>
			else
				printf("Algo no va bien\r\n");
 8001d86:	4813      	ldr	r0, [pc, #76]	; (8001dd4 <config_task_func+0x2a8>)
 8001d88:	f012 f922 	bl	8013fd0 <puts>
			if (estado == osOK)
 8001d8c:	e033      	b.n	8001df6 <config_task_func+0x2ca>
 8001d8e:	bf00      	nop
 8001d90:	0801632c 	.word	0x0801632c
 8001d94:	0801634c 	.word	0x0801634c
 8001d98:	0801636c 	.word	0x0801636c
 8001d9c:	08016388 	.word	0x08016388
 8001da0:	080165a8 	.word	0x080165a8
 8001da4:	080165c0 	.word	0x080165c0
 8001da8:	080163d8 	.word	0x080163d8
 8001dac:	20000904 	.word	0x20000904
 8001db0:	080163ec 	.word	0x080163ec
 8001db4:	20000908 	.word	0x20000908
 8001db8:	08016410 	.word	0x08016410
 8001dbc:	08016424 	.word	0x08016424
 8001dc0:	08016438 	.word	0x08016438
 8001dc4:	0801644c 	.word	0x0801644c
 8001dc8:	08016454 	.word	0x08016454
 8001dcc:	08016464 	.word	0x08016464
 8001dd0:	08016474 	.word	0x08016474
 8001dd4:	0801648c 	.word	0x0801648c
		}else{
			to_change[i]=num_usuario;
 8001dd8:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8001ddc:	b2d9      	uxtb	r1, r3
 8001dde:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001de2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001de6:	4413      	add	r3, r2
 8001de8:	460a      	mov	r2, r1
 8001dea:	701a      	strb	r2, [r3, #0]
			i++;
 8001dec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001df0:	3301      	adds	r3, #1
 8001df2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	for (i=0;i<6;){
 8001df6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001dfa:	2b05      	cmp	r3, #5
 8001dfc:	f77f aecc 	ble.w	8001b98 <config_task_func+0x6c>
		}

	}

	RTC_TimeTypeDef sTime = {0};
 8001e00:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8001e10:	2300      	movs	r3, #0
 8001e12:	63bb      	str	r3, [r7, #56]	; 0x38

	sTime.Hours = to_change[0];
 8001e14:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8001e18:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	sTime.Minutes = to_change[1];
 8001e1c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001e20:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	sTime.Seconds = to_change[2];
 8001e24:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001e28:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001e2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e30:	2200      	movs	r2, #0
 8001e32:	4619      	mov	r1, r3
 8001e34:	48ba      	ldr	r0, [pc, #744]	; (8002120 <config_task_func+0x5f4>)
 8001e36:	f004 fca8 	bl	800678a <HAL_RTC_SetTime>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <config_task_func+0x318>
	  {
	    Error_Handler();
 8001e40:	f000 fc0e 	bl	8002660 <Error_Handler>
	  }

	osMessageQueuePut(print_queueHandle, &msg_hora_ok, 0, pdMS_TO_TICKS(500));
 8001e44:	4bb7      	ldr	r3, [pc, #732]	; (8002124 <config_task_func+0x5f8>)
 8001e46:	6818      	ldr	r0, [r3, #0]
 8001e48:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001e4c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e50:	2200      	movs	r2, #0
 8001e52:	f00e f829 	bl	800fea8 <osMessageQueuePut>

	sDate.Date = to_change[3];
 8001e56:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001e5a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	sDate.Month = to_change[4];
 8001e5e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8001e62:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	sDate.Year = to_change[5];
 8001e66:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8001e6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	printf("Anio: %d\r\n",to_change[5]);
 8001e6e:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8001e72:	4619      	mov	r1, r3
 8001e74:	48ac      	ldr	r0, [pc, #688]	; (8002128 <config_task_func+0x5fc>)
 8001e76:	f012 f825 	bl	8013ec4 <iprintf>
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001e7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e7e:	2200      	movs	r2, #0
 8001e80:	4619      	mov	r1, r3
 8001e82:	48a7      	ldr	r0, [pc, #668]	; (8002120 <config_task_func+0x5f4>)
 8001e84:	f004 fd7a 	bl	800697c <HAL_RTC_SetDate>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <config_task_func+0x366>
	{
		Error_Handler();
 8001e8e:	f000 fbe7 	bl	8002660 <Error_Handler>
	}

	osMessageQueuePut(print_queueHandle, &msg_fecha_ok, 0, pdMS_TO_TICKS(500));
 8001e92:	4ba4      	ldr	r3, [pc, #656]	; (8002124 <config_task_func+0x5f8>)
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8001e9a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f00e f802 	bl	800fea8 <osMessageQueuePut>

	const char* msg_wifi_conf_init = "\r\nInicio de configuración del WiFi\r\n";
 8001ea4:	4ba1      	ldr	r3, [pc, #644]	; (800212c <config_task_func+0x600>)
 8001ea6:	637b      	str	r3, [r7, #52]	; 0x34
	const char* msg_wifi_connect_init = "\r\nConectando al WiFi\r\n";
 8001ea8:	4ba1      	ldr	r3, [pc, #644]	; (8002130 <config_task_func+0x604>)
 8001eaa:	633b      	str	r3, [r7, #48]	; 0x30
	const char* msg_wifi_connect_error = "No se ha podido conectar, vuelva a introducir los datos\r\n";
 8001eac:	4ba1      	ldr	r3, [pc, #644]	; (8002134 <config_task_func+0x608>)
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
	const char* msg_wifi_connect_success = "CONECTADO\r\n\r\n";
 8001eb0:	4ba1      	ldr	r3, [pc, #644]	; (8002138 <config_task_func+0x60c>)
 8001eb2:	62bb      	str	r3, [r7, #40]	; 0x28
	const char* msg_too_many_characters = "\r\nHas introducido demasiados caracteres, prueba de nuevo\r\n";
 8001eb4:	4ba1      	ldr	r3, [pc, #644]	; (800213c <config_task_func+0x610>)
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
	const char* msg_introduce_ssid = "Introduce el ssid: ";
 8001eb8:	4ba1      	ldr	r3, [pc, #644]	; (8002140 <config_task_func+0x614>)
 8001eba:	623b      	str	r3, [r7, #32]
	const char* msg_introduce_psswrd = "\r\nIntroduce la contraseña: ";
 8001ebc:	4ba1      	ldr	r3, [pc, #644]	; (8002144 <config_task_func+0x618>)
 8001ebe:	61fb      	str	r3, [r7, #28]

//	char ssid[MAX_LEN_SSID];
//	char psswrd[MAX_LEN_PSSWRD];


	osMessageQueuePut(print_queueHandle, &msg_wifi_conf_init, 0, pdMS_TO_TICKS(500));
 8001ec0:	4b98      	ldr	r3, [pc, #608]	; (8002124 <config_task_func+0x5f8>)
 8001ec2:	6818      	ldr	r0, [r3, #0]
 8001ec4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001ec8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f00d ffeb 	bl	800fea8 <osMessageQueuePut>

	//bucle de conexión
	while (1){

		//configuracion ssid
		osMessageQueuePut(print_queueHandle, &msg_introduce_ssid, 0, pdMS_TO_TICKS(500));
 8001ed2:	4b94      	ldr	r3, [pc, #592]	; (8002124 <config_task_func+0x5f8>)
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	f107 0120 	add.w	r1, r7, #32
 8001eda:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f00d ffe2 	bl	800fea8 <osMessageQueuePut>
		for (j=0; j<MAX_LEN_SSID ; ){
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001eea:	e03d      	b.n	8001f68 <config_task_func+0x43c>
			estado = osMessageQueueGet(receive_queueHandle, &recibido[j], NULL, osWaitForever);
 8001eec:	4b96      	ldr	r3, [pc, #600]	; (8002148 <config_task_func+0x61c>)
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001ef4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ef8:	18d1      	adds	r1, r2, r3
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
 8001efe:	2200      	movs	r2, #0
 8001f00:	f00e f832 	bl	800ff68 <osMessageQueueGet>
 8001f04:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
			printf("De la cola: %c\r\n",recibido[j]);
 8001f08:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001f0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f10:	4413      	add	r3, r2
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	4619      	mov	r1, r3
 8001f16:	488d      	ldr	r0, [pc, #564]	; (800214c <config_task_func+0x620>)
 8001f18:	f011 ffd4 	bl	8013ec4 <iprintf>
			if(recibido[j]==13){
 8001f1c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001f20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f24:	4413      	add	r3, r2
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b0d      	cmp	r3, #13
 8001f2a:	d103      	bne.n	8001f34 <config_task_func+0x408>
				printf("Ha pulsado intro\r\n");
 8001f2c:	4888      	ldr	r0, [pc, #544]	; (8002150 <config_task_func+0x624>)
 8001f2e:	f012 f84f 	bl	8013fd0 <puts>
				break;
 8001f32:	e01d      	b.n	8001f70 <config_task_func+0x444>
			}
			if (recibido[j]==127){
 8001f34:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001f38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f3c:	4413      	add	r3, r2
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b7f      	cmp	r3, #127	; 0x7f
 8001f42:	d10c      	bne.n	8001f5e <config_task_func+0x432>
				printf("Ha pulsado borrar\r\n");
 8001f44:	4883      	ldr	r0, [pc, #524]	; (8002154 <config_task_func+0x628>)
 8001f46:	f012 f843 	bl	8013fd0 <puts>
				if (j>0) j--;
 8001f4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	dd0a      	ble.n	8001f68 <config_task_func+0x43c>
 8001f52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f56:	3b01      	subs	r3, #1
 8001f58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f5c:	e004      	b.n	8001f68 <config_task_func+0x43c>
			}else{
				j++;
 8001f5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f62:	3301      	adds	r3, #1
 8001f64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		for (j=0; j<MAX_LEN_SSID ; ){
 8001f68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f6c:	2b09      	cmp	r3, #9
 8001f6e:	ddbd      	ble.n	8001eec <config_task_func+0x3c0>
			}
		}
		if (j==MAX_LEN_SSID){
 8001f70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f74:	2b0a      	cmp	r3, #10
 8001f76:	d109      	bne.n	8001f8c <config_task_func+0x460>
			osMessageQueuePut(print_queueHandle, &msg_too_many_characters, 0, pdMS_TO_TICKS(500));
 8001f78:	4b6a      	ldr	r3, [pc, #424]	; (8002124 <config_task_func+0x5f8>)
 8001f7a:	6818      	ldr	r0, [r3, #0]
 8001f7c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001f80:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f84:	2200      	movs	r2, #0
 8001f86:	f00d ff8f 	bl	800fea8 <osMessageQueuePut>
 8001f8a:	e7a2      	b.n	8001ed2 <config_task_func+0x3a6>
		}else{
 8001f8c:	466b      	mov	r3, sp
 8001f8e:	461d      	mov	r5, r3
//			printf("Guardamos el ssid\r\n");
			char ssid[j];
 8001f90:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001f94:	1e4b      	subs	r3, r1, #1
 8001f96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001f9a:	460a      	mov	r2, r1
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	4690      	mov	r8, r2
 8001fa0:	4699      	mov	r9, r3
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	f04f 0300 	mov.w	r3, #0
 8001faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fb6:	460a      	mov	r2, r1
 8001fb8:	2300      	movs	r3, #0
 8001fba:	4692      	mov	sl, r2
 8001fbc:	469b      	mov	fp, r3
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	f04f 0300 	mov.w	r3, #0
 8001fc6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001fca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001fce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	3307      	adds	r3, #7
 8001fd6:	08db      	lsrs	r3, r3, #3
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	ebad 0d03 	sub.w	sp, sp, r3
 8001fde:	466b      	mov	r3, sp
 8001fe0:	3300      	adds	r3, #0
 8001fe2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
//			printf("j: %d\r\n",j);
			for (m=0 ; m<j ; m++){
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001fec:	e011      	b.n	8002012 <config_task_func+0x4e6>
//				printf("m: %d\r\n",m);
//				printf("caracter: %c\r\n",recibido[m]);
				ssid[m] = recibido[m];
 8001fee:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001ff2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ff6:	4413      	add	r3, r2
 8001ff8:	7819      	ldrb	r1, [r3, #0]
 8001ffa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001ffe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002002:	4413      	add	r3, r2
 8002004:	460a      	mov	r2, r1
 8002006:	701a      	strb	r2, [r3, #0]
			for (m=0 ; m<j ; m++){
 8002008:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800200c:	3301      	adds	r3, #1
 800200e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002012:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002016:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800201a:	429a      	cmp	r2, r3
 800201c:	dbe7      	blt.n	8001fee <config_task_func+0x4c2>
//			printf("ssid: %s\r\n",ssid);
//			printf("longitud del ssid: %d\r\n",strlen(ssid));


			//configuracion contraseña
			osMessageQueuePut(print_queueHandle, &msg_introduce_psswrd, 0, pdMS_TO_TICKS(500));
 800201e:	4b41      	ldr	r3, [pc, #260]	; (8002124 <config_task_func+0x5f8>)
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	f107 011c 	add.w	r1, r7, #28
 8002026:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800202a:	2200      	movs	r2, #0
 800202c:	f00d ff3c 	bl	800fea8 <osMessageQueuePut>

			for (j=0; j<MAX_LEN_PSSWRD ; ){
 8002030:	2300      	movs	r3, #0
 8002032:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002036:	e02c      	b.n	8002092 <config_task_func+0x566>
				estado = osMessageQueueGet(receive_queueHandle, &recibido[j], NULL, osWaitForever);
 8002038:	4b43      	ldr	r3, [pc, #268]	; (8002148 <config_task_func+0x61c>)
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002040:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002044:	18d1      	adds	r1, r2, r3
 8002046:	f04f 33ff 	mov.w	r3, #4294967295
 800204a:	2200      	movs	r2, #0
 800204c:	f00d ff8c 	bl	800ff68 <osMessageQueueGet>
 8002050:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
//				printf("De la cola: %c\r\n",recibido[j]);
				if(recibido[j]==13){
 8002054:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002058:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800205c:	4413      	add	r3, r2
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b0d      	cmp	r3, #13
 8002062:	d01b      	beq.n	800209c <config_task_func+0x570>
//					printf("Ha pulsado intro\r\n");
					break;
				}
				if (recibido[j]==127){
 8002064:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002068:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800206c:	4413      	add	r3, r2
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b7f      	cmp	r3, #127	; 0x7f
 8002072:	d109      	bne.n	8002088 <config_task_func+0x55c>
//					printf("Ha pulsado borrar\r\n");
					if (j>0) j--;
 8002074:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002078:	2b00      	cmp	r3, #0
 800207a:	dd0a      	ble.n	8002092 <config_task_func+0x566>
 800207c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002080:	3b01      	subs	r3, #1
 8002082:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002086:	e004      	b.n	8002092 <config_task_func+0x566>
				}else{
					j++;
 8002088:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800208c:	3301      	adds	r3, #1
 800208e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			for (j=0; j<MAX_LEN_PSSWRD ; ){
 8002092:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002096:	2b13      	cmp	r3, #19
 8002098:	ddce      	ble.n	8002038 <config_task_func+0x50c>
 800209a:	e000      	b.n	800209e <config_task_func+0x572>
					break;
 800209c:	bf00      	nop
				}
			}
			if (j==MAX_LEN_PSSWRD){
 800209e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020a2:	2b14      	cmp	r3, #20
 80020a4:	d109      	bne.n	80020ba <config_task_func+0x58e>
				osMessageQueuePut(print_queueHandle, &msg_too_many_characters, 0, pdMS_TO_TICKS(500));
 80020a6:	4b1f      	ldr	r3, [pc, #124]	; (8002124 <config_task_func+0x5f8>)
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80020ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80020b2:	2200      	movs	r2, #0
 80020b4:	f00d fef8 	bl	800fea8 <osMessageQueuePut>
 80020b8:	e096      	b.n	80021e8 <config_task_func+0x6bc>
			}else{
 80020ba:	466b      	mov	r3, sp
 80020bc:	461c      	mov	r4, r3
//				printf("Guardamos el psswrd\r\n");
				char psswrd[j];
 80020be:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80020c2:	1e4b      	subs	r3, r1, #1
 80020c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80020c8:	460a      	mov	r2, r1
 80020ca:	2300      	movs	r3, #0
 80020cc:	60ba      	str	r2, [r7, #8]
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	00c3      	lsls	r3, r0, #3
 80020dc:	68b8      	ldr	r0, [r7, #8]
 80020de:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80020e2:	68b8      	ldr	r0, [r7, #8]
 80020e4:	00c2      	lsls	r2, r0, #3
 80020e6:	460a      	mov	r2, r1
 80020e8:	2300      	movs	r3, #0
 80020ea:	603a      	str	r2, [r7, #0]
 80020ec:	607b      	str	r3, [r7, #4]
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	f04f 0300 	mov.w	r3, #0
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	00c3      	lsls	r3, r0, #3
 80020fa:	6838      	ldr	r0, [r7, #0]
 80020fc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002100:	6838      	ldr	r0, [r7, #0]
 8002102:	00c2      	lsls	r2, r0, #3
 8002104:	460b      	mov	r3, r1
 8002106:	3307      	adds	r3, #7
 8002108:	08db      	lsrs	r3, r3, #3
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	ebad 0d03 	sub.w	sp, sp, r3
 8002110:	466b      	mov	r3, sp
 8002112:	3300      	adds	r3, #0
 8002114:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
//				printf("j: %d\r\n",j);
				for (m=0 ; m<j ; m++){
 8002118:	2300      	movs	r3, #0
 800211a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800211e:	e02d      	b.n	800217c <config_task_func+0x650>
 8002120:	20000308 	.word	0x20000308
 8002124:	20000904 	.word	0x20000904
 8002128:	080164a0 	.word	0x080164a0
 800212c:	080164ac 	.word	0x080164ac
 8002130:	080164d4 	.word	0x080164d4
 8002134:	080164ec 	.word	0x080164ec
 8002138:	08016528 	.word	0x08016528
 800213c:	08016538 	.word	0x08016538
 8002140:	08016574 	.word	0x08016574
 8002144:	08016588 	.word	0x08016588
 8002148:	20000908 	.word	0x20000908
 800214c:	08016410 	.word	0x08016410
 8002150:	08016424 	.word	0x08016424
 8002154:	08016438 	.word	0x08016438
//					printf("m: %d\r\n",m);
//					printf("caracter: %c\r\n",recibido[m]);
					psswrd[m] = recibido[m];
 8002158:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800215c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002160:	4413      	add	r3, r2
 8002162:	7819      	ldrb	r1, [r3, #0]
 8002164:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002168:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800216c:	4413      	add	r3, r2
 800216e:	460a      	mov	r2, r1
 8002170:	701a      	strb	r2, [r3, #0]
				for (m=0 ; m<j ; m++){
 8002172:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002176:	3301      	adds	r3, #1
 8002178:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800217c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002180:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002184:	429a      	cmp	r2, r3
 8002186:	dbe7      	blt.n	8002158 <config_task_func+0x62c>

				//datos_wifi[i] = recibido[0];
//				printf("psswrd: %s\r\n",psswrd);
//				printf("longitud del psswrd: %d\r\n",strlen(psswrd));

				osMessageQueuePut(print_queueHandle, &msg_wifi_connect_init, 0, pdMS_TO_TICKS(500));
 8002188:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <config_task_func+0x6cc>)
 800218a:	6818      	ldr	r0, [r3, #0]
 800218c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002190:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002194:	2200      	movs	r2, #0
 8002196:	f00d fe87 	bl	800fea8 <osMessageQueuePut>

				if (wifi_connect(ssid,psswrd) != 0){
 800219a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800219e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80021a2:	f7ff fc75 	bl	8001a90 <wifi_connect>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00a      	beq.n	80021c2 <config_task_func+0x696>
					osMessageQueuePut(print_queueHandle, &msg_wifi_connect_error, 0, pdMS_TO_TICKS(500));
 80021ac:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <config_task_func+0x6cc>)
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80021b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80021b8:	2200      	movs	r2, #0
 80021ba:	f00d fe75 	bl	800fea8 <osMessageQueuePut>
 80021be:	46a5      	mov	sp, r4
 80021c0:	e012      	b.n	80021e8 <config_task_func+0x6bc>
				}
				else{
					break;
 80021c2:	bf00      	nop
 80021c4:	46a5      	mov	sp, r4
 80021c6:	46ad      	mov	sp, r5
		}


	}

	osMessageQueuePut(print_queueHandle, &msg_wifi_connect_success, 0, pdMS_TO_TICKS(500));
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <config_task_func+0x6cc>)
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80021d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80021d4:	2200      	movs	r2, #0
 80021d6:	f00d fe67 	bl	800fea8 <osMessageQueuePut>


	osThreadFlagsSet(clientMQTTHandle,0x0001U);
 80021da:	4b08      	ldr	r3, [pc, #32]	; (80021fc <config_task_func+0x6d0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2101      	movs	r1, #1
 80021e0:	4618      	mov	r0, r3
 80021e2:	f00d fd03 	bl	800fbec <osThreadFlagsSet>
 80021e6:	e001      	b.n	80021ec <config_task_func+0x6c0>
 80021e8:	46ad      	mov	sp, r5
		osMessageQueuePut(print_queueHandle, &msg_introduce_ssid, 0, pdMS_TO_TICKS(500));
 80021ea:	e672      	b.n	8001ed2 <config_task_func+0x3a6>

  /* Infinite loop */
  for(;;)
  {

	  osDelay(pdMS_TO_TICKS(1000));
 80021ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021f0:	f00d fdcb 	bl	800fd8a <osDelay>
 80021f4:	e7fa      	b.n	80021ec <config_task_func+0x6c0>
 80021f6:	bf00      	nop
 80021f8:	20000904 	.word	0x20000904
 80021fc:	20000900 	.word	0x20000900

08002200 <readAccel_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readAccel_func */
void readAccel_func(void *argument)
{
 8002200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002202:	b0b5      	sub	sp, #212	; 0xd4
 8002204:	af0a      	add	r7, sp, #40	; 0x28
 8002206:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN readAccel_func */
	osStatus_t estado;
  //char mensaje[]  = "Hola mundo\r\n";
	char mensaje[100];
	char *p_mensaje = mensaje;
 8002208:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800220c:	627b      	str	r3, [r7, #36]	; 0x24

	//uint32_t nticks = 0;
	int16_t DataXYZ[3];
	int16_t *pDataXYZ = DataXYZ;
 800220e:	f107 031c 	add.w	r3, r7, #28
 8002212:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0


	uint8_t horas,minutos,segundos,dia,mes,anio = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	uint16_t milisegundos = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
	uint32_t return_wait = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	uint16_t iter; // Se usa para iterar en 64 o 1024 aceleraciones
	uint16_t max_iter;

	printf("ReadAccel task esperando\r\n");
 8002228:	4872      	ldr	r0, [pc, #456]	; (80023f4 <readAccel_func+0x1f4>)
 800222a:	f011 fed1 	bl	8013fd0 <puts>
	// Esperamos que el usuario configure el RTC y que el acelerometro este activo
	return_wait = osThreadFlagsWait(0x0008U, osFlagsWaitAll, osWaitForever);
 800222e:	f04f 32ff 	mov.w	r2, #4294967295
 8002232:	2101      	movs	r1, #1
 8002234:	2008      	movs	r0, #8
 8002236:	f00d fd27 	bl	800fc88 <osThreadFlagsWait>
 800223a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

	//Activamos el temporizador
	osThreadFlagsSet(temporizadorHandle,0x0001U);
 800223e:	4b6e      	ldr	r3, [pc, #440]	; (80023f8 <readAccel_func+0x1f8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2101      	movs	r1, #1
 8002244:	4618      	mov	r0, r3
 8002246:	f00d fcd1 	bl	800fbec <osThreadFlagsSet>


	printf("ReadAccel task se inicia\r\n");
 800224a:	486c      	ldr	r0, [pc, #432]	; (80023fc <readAccel_func+0x1fc>)
 800224c:	f011 fec0 	bl	8013fd0 <puts>
	if (return_wait == osFlagsErrorTimeout)
	  printf("Tiempo agotadoM\r\n");
	else if(return_wait == 0x0001U)
	  printf("Recibido notificacion\r\n");
	  */
	const char* msg_read_normal = "\r\nLectura en modo normal\r\n";
 8002250:	4b6b      	ldr	r3, [pc, #428]	; (8002400 <readAccel_func+0x200>)
 8002252:	61bb      	str	r3, [r7, #24]
	const char* msg_read_continuous = "\r\nLectura en modo continuo\r\n";
 8002254:	4b6b      	ldr	r3, [pc, #428]	; (8002404 <readAccel_func+0x204>)
 8002256:	617b      	str	r3, [r7, #20]


	/* Infinite loop */
	for(;;)
	{
		return_wait = osThreadFlagsWait(0x0006U, osFlagsWaitAny, osWaitForever); //espera media hora o que alguien pulse el boton
 8002258:	f04f 32ff 	mov.w	r2, #4294967295
 800225c:	2100      	movs	r1, #0
 800225e:	2006      	movs	r0, #6
 8002260:	f00d fd12 	bl	800fc88 <osThreadFlagsWait>
 8002264:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
		if(return_wait == osFlagsErrorTimeout){
 8002268:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800226c:	f113 0f02 	cmn.w	r3, #2
 8002270:	d103      	bne.n	800227a <readAccel_func+0x7a>
			printf("Ha pasado media hora\r\n");
 8002272:	4865      	ldr	r0, [pc, #404]	; (8002408 <readAccel_func+0x208>)
 8002274:	f011 feac 	bl	8013fd0 <puts>
 8002278:	e006      	b.n	8002288 <readAccel_func+0x88>
		}
		else {
			printf("El usuario quiere enviar aceleraciones, modo continuo = %d\r\n",modo_continuo);
 800227a:	4b64      	ldr	r3, [pc, #400]	; (800240c <readAccel_func+0x20c>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	4619      	mov	r1, r3
 8002282:	4863      	ldr	r0, [pc, #396]	; (8002410 <readAccel_func+0x210>)
 8002284:	f011 fe1e 	bl	8013ec4 <iprintf>
		}

		if (modo_continuo){
 8002288:	4b60      	ldr	r3, [pc, #384]	; (800240c <readAccel_func+0x20c>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00d      	beq.n	80022ae <readAccel_func+0xae>
			max_iter = MUESTRAS_CONTINUO;
 8002292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002296:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
			osMessageQueuePut(print_queueHandle, &msg_read_continuous, 0, pdMS_TO_TICKS(500));
 800229a:	4b5e      	ldr	r3, [pc, #376]	; (8002414 <readAccel_func+0x214>)
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	f107 0114 	add.w	r1, r7, #20
 80022a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80022a6:	2200      	movs	r2, #0
 80022a8:	f00d fdfe 	bl	800fea8 <osMessageQueuePut>
 80022ac:	e00b      	b.n	80022c6 <readAccel_func+0xc6>
			//osThreadFlagsSet(sendMQTTHandle,MODO_CONTINUO);
		}else{
			max_iter = MUESTRAS_NORMAL;
 80022ae:	2340      	movs	r3, #64	; 0x40
 80022b0:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
			osMessageQueuePut(print_queueHandle, &msg_read_normal, 0, pdMS_TO_TICKS(500));
 80022b4:	4b57      	ldr	r3, [pc, #348]	; (8002414 <readAccel_func+0x214>)
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	f107 0118 	add.w	r1, r7, #24
 80022bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80022c0:	2200      	movs	r2, #0
 80022c2:	f00d fdf1 	bl	800fea8 <osMessageQueuePut>
			//osThreadFlagsSet(sendMQTTHandle,MODO_NORMAL);
		}

		for (iter=0 ; iter<max_iter ; iter++){
 80022c6:	2300      	movs	r3, #0
 80022c8:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80022cc:	e087      	b.n	80023de <readAccel_func+0x1de>
			BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 80022ce:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80022d2:	f008 f89f 	bl	800a414 <BSP_ACCELERO_AccGetXYZ>
			//printf("Tick: %ld	Eje x: %d	Eje y: %d	Eje z: %d\r\n",nticks,DataXYZ[0],DataXYZ[1],DataXYZ[2]);

			//printf("Lectura accel realizada\r\n");
			HAL_RTC_GetTime(&hrtc, &GetTime, RTC_FORMAT_BIN);
 80022d6:	2200      	movs	r2, #0
 80022d8:	494f      	ldr	r1, [pc, #316]	; (8002418 <readAccel_func+0x218>)
 80022da:	4850      	ldr	r0, [pc, #320]	; (800241c <readAccel_func+0x21c>)
 80022dc:	f004 faf2 	bl	80068c4 <HAL_RTC_GetTime>
			horas = GetTime.Hours;
 80022e0:	4b4d      	ldr	r3, [pc, #308]	; (8002418 <readAccel_func+0x218>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			minutos = GetTime.Minutes;
 80022e8:	4b4b      	ldr	r3, [pc, #300]	; (8002418 <readAccel_func+0x218>)
 80022ea:	785b      	ldrb	r3, [r3, #1]
 80022ec:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			segundos = GetTime.Seconds;
 80022f0:	4b49      	ldr	r3, [pc, #292]	; (8002418 <readAccel_func+0x218>)
 80022f2:	789b      	ldrb	r3, [r3, #2]
 80022f4:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
			milisegundos = (uint16_t)1000*((float)(GetTime.SecondFraction-GetTime.SubSeconds)) / ((float)(GetTime.SecondFraction+1));
 80022f8:	4b47      	ldr	r3, [pc, #284]	; (8002418 <readAccel_func+0x218>)
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	4b46      	ldr	r3, [pc, #280]	; (8002418 <readAccel_func+0x218>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	ee07 3a90 	vmov	s15, r3
 8002306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800230a:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002420 <readAccel_func+0x220>
 800230e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002312:	4b41      	ldr	r3, [pc, #260]	; (8002418 <readAccel_func+0x218>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	3301      	adds	r3, #1
 8002318:	ee07 3a90 	vmov	s15, r3
 800231c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002320:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002328:	ee17 3a90 	vmov	r3, s15
 800232c:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c

			HAL_RTC_GetDate(&hrtc, &GetDate, RTC_FORMAT_BIN);
 8002330:	2200      	movs	r2, #0
 8002332:	493c      	ldr	r1, [pc, #240]	; (8002424 <readAccel_func+0x224>)
 8002334:	4839      	ldr	r0, [pc, #228]	; (800241c <readAccel_func+0x21c>)
 8002336:	f004 fba8 	bl	8006a8a <HAL_RTC_GetDate>
			anio = GetDate.Year;
 800233a:	4b3a      	ldr	r3, [pc, #232]	; (8002424 <readAccel_func+0x224>)
 800233c:	78db      	ldrb	r3, [r3, #3]
 800233e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			dia = GetDate.Date;
 8002342:	4b38      	ldr	r3, [pc, #224]	; (8002424 <readAccel_func+0x224>)
 8002344:	789b      	ldrb	r3, [r3, #2]
 8002346:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			mes = GetDate.Month;
 800234a:	4b36      	ldr	r3, [pc, #216]	; (8002424 <readAccel_func+0x224>)
 800234c:	785b      	ldrb	r3, [r3, #1]
 800234e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93


			//printf("Anio: %d\r\n",anio);
			//printf("Lectura fecha realizada\r\n");
			//printf("fecha: %d/%d/%d hora: %d:%d:%d temp: %d.%02d grados\r\n",dia,mes,anio,horas,minutos,segundos,tmpInt1,tmpInt2);
			snprintf(mensaje,100,"%d/%d/%d %d:%d:%d:%d %d,%d,%d,%d",dia,mes,anio+2000,horas,minutos,segundos,milisegundos,DataXYZ[0],DataXYZ[1],DataXYZ[2],max_iter);
 8002352:	f897 e094 	ldrb.w	lr, [r7, #148]	; 0x94
 8002356:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800235a:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 800235e:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 8002362:	f897 1097 	ldrb.w	r1, [r7, #151]	; 0x97
 8002366:	f897 0096 	ldrb.w	r0, [r7, #150]	; 0x96
 800236a:	f897 4095 	ldrb.w	r4, [r7, #149]	; 0x95
 800236e:	f8b7 509c 	ldrh.w	r5, [r7, #156]	; 0x9c
 8002372:	f9b7 601c 	ldrsh.w	r6, [r7, #28]
 8002376:	60be      	str	r6, [r7, #8]
 8002378:	f9b7 601e 	ldrsh.w	r6, [r7, #30]
 800237c:	607e      	str	r6, [r7, #4]
 800237e:	f9b7 6020 	ldrsh.w	r6, [r7, #32]
 8002382:	603e      	str	r6, [r7, #0]
 8002384:	f8b7 60a4 	ldrh.w	r6, [r7, #164]	; 0xa4
 8002388:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800238c:	9609      	str	r6, [sp, #36]	; 0x24
 800238e:	683e      	ldr	r6, [r7, #0]
 8002390:	9608      	str	r6, [sp, #32]
 8002392:	687e      	ldr	r6, [r7, #4]
 8002394:	9607      	str	r6, [sp, #28]
 8002396:	68be      	ldr	r6, [r7, #8]
 8002398:	9606      	str	r6, [sp, #24]
 800239a:	9505      	str	r5, [sp, #20]
 800239c:	9404      	str	r4, [sp, #16]
 800239e:	9003      	str	r0, [sp, #12]
 80023a0:	9102      	str	r1, [sp, #8]
 80023a2:	9201      	str	r2, [sp, #4]
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	4673      	mov	r3, lr
 80023a8:	4a1f      	ldr	r2, [pc, #124]	; (8002428 <readAccel_func+0x228>)
 80023aa:	2164      	movs	r1, #100	; 0x64
 80023ac:	4660      	mov	r0, ip
 80023ae:	f011 fe91 	bl	80140d4 <sniprintf>
//			snprintf(mensaje,100,"%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n",dia,mes,anio+2000,horas,minutos,segundos,DataXYZ[0],DataXYZ[1],DataXYZ[2]);

			printf("iter: %d\r\n",iter);
 80023b2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80023b6:	4619      	mov	r1, r3
 80023b8:	481c      	ldr	r0, [pc, #112]	; (800242c <readAccel_func+0x22c>)
 80023ba:	f011 fd83 	bl	8013ec4 <iprintf>


			//printf("MENSAJE: %s\r\n",mensaje);
			estado = osMessageQueuePut(publish_queueHandle, &p_mensaje, 0, pdMS_TO_TICKS(500));
 80023be:	4b1c      	ldr	r3, [pc, #112]	; (8002430 <readAccel_func+0x230>)
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80023c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80023ca:	2200      	movs	r2, #0
 80023cc:	f00d fd6c 	bl	800fea8 <osMessageQueuePut>
 80023d0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		for (iter=0 ; iter<max_iter ; iter++){
 80023d4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80023d8:	3301      	adds	r3, #1
 80023da:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80023de:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80023e2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80023e6:	429a      	cmp	r2, r3
 80023e8:	f4ff af71 	bcc.w	80022ce <readAccel_func+0xce>
				printf("Timeout agotado 1\r\n");
			}*/

		}

		printf("Se han leido todas las aceleraciones, esperamos media hora o hasta que alguien pulse el boton\r\n");
 80023ec:	4811      	ldr	r0, [pc, #68]	; (8002434 <readAccel_func+0x234>)
 80023ee:	f011 fdef 	bl	8013fd0 <puts>
		return_wait = osThreadFlagsWait(0x0006U, osFlagsWaitAny, osWaitForever); //espera media hora o que alguien pulse el boton
 80023f2:	e731      	b.n	8002258 <readAccel_func+0x58>
 80023f4:	080165cc 	.word	0x080165cc
 80023f8:	200008fc 	.word	0x200008fc
 80023fc:	080165e8 	.word	0x080165e8
 8002400:	08016604 	.word	0x08016604
 8002404:	08016620 	.word	0x08016620
 8002408:	08016640 	.word	0x08016640
 800240c:	20000935 	.word	0x20000935
 8002410:	08016658 	.word	0x08016658
 8002414:	20000904 	.word	0x20000904
 8002418:	20000914 	.word	0x20000914
 800241c:	20000308 	.word	0x20000308
 8002420:	447a0000 	.word	0x447a0000
 8002424:	20000910 	.word	0x20000910
 8002428:	08016698 	.word	0x08016698
 800242c:	080166bc 	.word	0x080166bc
 8002430:	2000090c 	.word	0x2000090c
 8002434:	080166c8 	.word	0x080166c8

08002438 <printTask_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_printTask_func */
void printTask_func(void *argument)
{
 8002438:	b590      	push	{r4, r7, lr}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
	uintptr_t mensaje;
	osStatus_t estado;
  /* Infinite loop */
  for(;;)
  {
	  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 8002440:	4b13      	ldr	r3, [pc, #76]	; (8002490 <printTask_func+0x58>)
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	f107 0108 	add.w	r1, r7, #8
 8002448:	f04f 33ff 	mov.w	r3, #4294967295
 800244c:	2200      	movs	r2, #0
 800244e:	f00d fd8b 	bl	800ff68 <osMessageQueueGet>
 8002452:	60f8      	str	r0, [r7, #12]
	  //printf("Se ha recibido algo en print task\r\n");
	  //printf("Mensaje print task: %s\r\n",mensaje);
	  //printf("Longitud: %d",strlen((char*)mensaje));
	  if (estado == osOK)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10d      	bne.n	8002476 <printTask_func+0x3e>
	  {
		  //printf("%s",(char*)mensaje);
		  HAL_UART_Transmit(&huart1, (uint8_t*)mensaje, strlen(mensaje),10);
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	461c      	mov	r4, r3
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	4618      	mov	r0, r3
 8002462:	f7fd feb5 	bl	80001d0 <strlen>
 8002466:	4603      	mov	r3, r0
 8002468:	b29a      	uxth	r2, r3
 800246a:	230a      	movs	r3, #10
 800246c:	4621      	mov	r1, r4
 800246e:	4809      	ldr	r0, [pc, #36]	; (8002494 <printTask_func+0x5c>)
 8002470:	f006 faf4 	bl	8008a5c <HAL_UART_Transmit>
 8002474:	e7e4      	b.n	8002440 <printTask_func+0x8>
	  }
	  else if (estado == osErrorTimeout)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f113 0f02 	cmn.w	r3, #2
 800247c:	d103      	bne.n	8002486 <printTask_func+0x4e>
	  {
		  printf("Timeout printTask\r\n");
 800247e:	4806      	ldr	r0, [pc, #24]	; (8002498 <printTask_func+0x60>)
 8002480:	f011 fda6 	bl	8013fd0 <puts>
 8002484:	e7dc      	b.n	8002440 <printTask_func+0x8>
	  }
	  else
	  {
		  printf("Error en la tarea print\r\n");
 8002486:	4805      	ldr	r0, [pc, #20]	; (800249c <printTask_func+0x64>)
 8002488:	f011 fda2 	bl	8013fd0 <puts>
	  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 800248c:	e7d8      	b.n	8002440 <printTask_func+0x8>
 800248e:	bf00      	nop
 8002490:	20000904 	.word	0x20000904
 8002494:	200003dc 	.word	0x200003dc
 8002498:	08016728 	.word	0x08016728
 800249c:	0801673c 	.word	0x0801673c

080024a0 <tarea_UART_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tarea_UART_func */
void tarea_UART_func(void *argument)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tarea_UART_func */
	osStatus_t estado;
	uint32_t return_wait = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  return_wait = osThreadFlagsWait(0x0002U, osFlagsWaitAny, osWaitForever);
 80024ac:	f04f 32ff 	mov.w	r2, #4294967295
 80024b0:	2100      	movs	r1, #0
 80024b2:	2002      	movs	r0, #2
 80024b4:	f00d fbe8 	bl	800fc88 <osThreadFlagsWait>
 80024b8:	60f8      	str	r0, [r7, #12]
	  estado = osMessageQueuePut(receive_queueHandle, &rec_data,0,pdMS_TO_TICKS(200));
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <tarea_UART_func+0x40>)
 80024bc:	6818      	ldr	r0, [r3, #0]
 80024be:	23c8      	movs	r3, #200	; 0xc8
 80024c0:	2200      	movs	r2, #0
 80024c2:	4908      	ldr	r1, [pc, #32]	; (80024e4 <tarea_UART_func+0x44>)
 80024c4:	f00d fcf0 	bl	800fea8 <osMessageQueuePut>
 80024c8:	60b8      	str	r0, [r7, #8]
	  if (estado == osOK)
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d103      	bne.n	80024d8 <tarea_UART_func+0x38>
		  printf("Estado: ok\r\n");
 80024d0:	4805      	ldr	r0, [pc, #20]	; (80024e8 <tarea_UART_func+0x48>)
 80024d2:	f011 fd7d 	bl	8013fd0 <puts>
 80024d6:	e7e9      	b.n	80024ac <tarea_UART_func+0xc>
	  else
		  printf("Algo no va bien\r\n");
 80024d8:	4804      	ldr	r0, [pc, #16]	; (80024ec <tarea_UART_func+0x4c>)
 80024da:	f011 fd79 	bl	8013fd0 <puts>
	  return_wait = osThreadFlagsWait(0x0002U, osFlagsWaitAny, osWaitForever);
 80024de:	e7e5      	b.n	80024ac <tarea_UART_func+0xc>
 80024e0:	20000908 	.word	0x20000908
 80024e4:	20000934 	.word	0x20000934
 80024e8:	08016758 	.word	0x08016758
 80024ec:	0801648c 	.word	0x0801648c

080024f0 <temporizador_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_temporizador_func */
void temporizador_func(void *argument)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temporizador_func */
	osThreadFlagsWait(0x0001U, osFlagsWaitAll, osWaitForever);
 80024f8:	f04f 32ff 	mov.w	r2, #4294967295
 80024fc:	2101      	movs	r1, #1
 80024fe:	2001      	movs	r0, #1
 8002500:	f00d fbc2 	bl	800fc88 <osThreadFlagsWait>
	printf("Temporizador activado\r\n");
 8002504:	4806      	ldr	r0, [pc, #24]	; (8002520 <temporizador_func+0x30>)
 8002506:	f011 fd63 	bl	8013fd0 <puts>
  /* Infinite loop */
  for(;;)
  {
    osDelay(pdMS_TO_TICKS(1800000)); //Periodo en ms con el que se mandan las aceleraciones
 800250a:	4806      	ldr	r0, [pc, #24]	; (8002524 <temporizador_func+0x34>)
 800250c:	f00d fc3d 	bl	800fd8a <osDelay>
    osThreadFlagsSet(readAccelHandle,0x0004U);
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <temporizador_func+0x38>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2104      	movs	r1, #4
 8002516:	4618      	mov	r0, r3
 8002518:	f00d fb68 	bl	800fbec <osThreadFlagsSet>
    osDelay(pdMS_TO_TICKS(1800000)); //Periodo en ms con el que se mandan las aceleraciones
 800251c:	e7f5      	b.n	800250a <temporizador_func+0x1a>
 800251e:	bf00      	nop
 8002520:	08016764 	.word	0x08016764
 8002524:	001b7740 	.word	0x001b7740
 8002528:	200008f0 	.word	0x200008f0

0800252c <clientMQTT_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_clientMQTT_func */
void clientMQTT_func(void *argument)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b0a2      	sub	sp, #136	; 0x88
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN clientMQTT_func */
	uint32_t return_wait = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint16_t max_iter;

	char payLoad[16];


	osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 800253a:	f04f 32ff 	mov.w	r2, #4294967295
 800253e:	2100      	movs	r1, #0
 8002540:	2001      	movs	r0, #1
 8002542:	f00d fba1 	bl	800fc88 <osThreadFlagsWait>

	const uint32_t ulMaxPublishCount = 5UL;
 8002546:	2305      	movs	r3, #5
 8002548:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	NetworkContext_t xNetworkContext = { 0 };
 800254c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
	MQTTStatus_t xMQTTStatus;
	TransportStatus_t xNetworkStatus;

	/* Attempt to connect to the MQTT broker. The socket is returned in
	* the network context structure. */
	xNetworkStatus = prvConnectToServer( &xNetworkContext, SOCKET );
 8002556:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800255a:	2100      	movs	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f000 f885 	bl	800266c <prvConnectToServer>
 8002562:	4603      	mov	r3, r0
 8002564:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	printf("Mitad de la definicion mqtt\r\n");
 8002568:	482b      	ldr	r0, [pc, #172]	; (8002618 <clientMQTT_func+0xec>)
 800256a:	f011 fd31 	bl	8013fd0 <puts>
	configASSERT( xNetworkStatus == PLAINTEXT_TRANSPORT_SUCCESS );
 800256e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002572:	2b01      	cmp	r3, #1
 8002574:	d00a      	beq.n	800258c <clientMQTT_func+0x60>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800257a:	f383 8811 	msr	BASEPRI, r3
 800257e:	f3bf 8f6f 	isb	sy
 8002582:	f3bf 8f4f 	dsb	sy
 8002586:	677b      	str	r3, [r7, #116]	; 0x74
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002588:	bf00      	nop
 800258a:	e7fe      	b.n	800258a <clientMQTT_func+0x5e>
	//LOG(("Trying to create an MQTT connection\n"));
	prvCreateMQTTConnectionWithBroker( &xMQTTContext, &xNetworkContext );
 800258c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002590:	f107 0308 	add.w	r3, r7, #8
 8002594:	4611      	mov	r1, r2
 8002596:	4618      	mov	r0, r3
 8002598:	f000 f8b4 	bl	8002704 <prvCreateMQTTConnectionWithBroker>
	prvMQTTSubscribeToTopic(&xMQTTContext,pcTempTopic2);
 800259c:	f107 0308 	add.w	r3, r7, #8
 80025a0:	491e      	ldr	r1, [pc, #120]	; (800261c <clientMQTT_func+0xf0>)
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 f958 	bl	8002858 <prvMQTTSubscribeToTopic>
	printf("Contexto mqtt inicializado\r\n");
 80025a8:	481d      	ldr	r0, [pc, #116]	; (8002620 <clientMQTT_func+0xf4>)
 80025aa:	f011 fd11 	bl	8013fd0 <puts>

	osThreadFlagsSet(readAccelHandle,0x0008U);
 80025ae:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <clientMQTT_func+0xf8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2108      	movs	r1, #8
 80025b4:	4618      	mov	r0, r3
 80025b6:	f00d fb19 	bl	800fbec <osThreadFlagsSet>


  /* Infinite loop */
	for(;;)
	{
		estado = osMessageQueueGet(publish_queueHandle, &mensaje, NULL, pdMS_TO_TICKS(5000)); //Minimo la mitad de tiempo de lo que tarda en actualizar el valor el otro nodo
 80025ba:	4b1b      	ldr	r3, [pc, #108]	; (8002628 <clientMQTT_func+0xfc>)
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80025c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80025c6:	2200      	movs	r2, #0
 80025c8:	f00d fcce 	bl	800ff68 <osMessageQueueGet>
 80025cc:	67b8      	str	r0, [r7, #120]	; 0x78

		 if (estado == osOK)
 80025ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10f      	bne.n	80025f4 <clientMQTT_func+0xc8>
		 {
		  //printf("Publicamos: %s",(char*)mensaje);
			 sprintf(payLoad,"%s",mensaje);
 80025d4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80025d6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80025da:	4914      	ldr	r1, [pc, #80]	; (800262c <clientMQTT_func+0x100>)
 80025dc:	4618      	mov	r0, r3
 80025de:	f011 fdad 	bl	801413c <siprintf>
			 prvMQTTPublishToTopic(&xMQTTContext,pcTempTopic,payLoad);
 80025e2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80025e6:	f107 0308 	add.w	r3, r7, #8
 80025ea:	4911      	ldr	r1, [pc, #68]	; (8002630 <clientMQTT_func+0x104>)
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 f905 	bl	80027fc <prvMQTTPublishToTopic>
 80025f2:	e7e2      	b.n	80025ba <clientMQTT_func+0x8e>
		 }
		 else if (estado == osErrorTimeout)
 80025f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025f6:	f113 0f02 	cmn.w	r3, #2
 80025fa:	d108      	bne.n	800260e <clientMQTT_func+0xe2>
		 {
			 printf("Procesamos subscripcion\r\n");
 80025fc:	480d      	ldr	r0, [pc, #52]	; (8002634 <clientMQTT_func+0x108>)
 80025fe:	f011 fce7 	bl	8013fd0 <puts>
			 MQTT_ProcessLoop(&xMQTTContext);
 8002602:	f107 0308 	add.w	r3, r7, #8
 8002606:	4618      	mov	r0, r3
 8002608:	f00b f9ad 	bl	800d966 <MQTT_ProcessLoop>
 800260c:	e7d5      	b.n	80025ba <clientMQTT_func+0x8e>
		 }
		 else
		 {
			 printf("Error en la tarea sendMQTT\r\n");
 800260e:	480a      	ldr	r0, [pc, #40]	; (8002638 <clientMQTT_func+0x10c>)
 8002610:	f011 fcde 	bl	8013fd0 <puts>
		estado = osMessageQueueGet(publish_queueHandle, &mensaje, NULL, pdMS_TO_TICKS(5000)); //Minimo la mitad de tiempo de lo que tarda en actualizar el valor el otro nodo
 8002614:	e7d1      	b.n	80025ba <clientMQTT_func+0x8e>
 8002616:	bf00      	nop
 8002618:	0801677c 	.word	0x0801677c
 800261c:	0801679c 	.word	0x0801679c
 8002620:	080167b8 	.word	0x080167b8
 8002624:	200008f0 	.word	0x200008f0
 8002628:	2000090c 	.word	0x2000090c
 800262c:	080167d4 	.word	0x080167d4
 8002630:	080167d8 	.word	0x080167d8
 8002634:	080167f0 	.word	0x080167f0
 8002638:	0801680c 	.word	0x0801680c

0800263c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a04      	ldr	r2, [pc, #16]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d101      	bne.n	8002652 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800264e:	f000 ff43 	bl	80034d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40001000 	.word	0x40001000

08002660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002664:	b672      	cpsid	i
}
 8002666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002668:	e7fe      	b.n	8002668 <Error_Handler+0x8>
	...

0800266c <prvConnectToServer>:
 */
static uint32_t ulGlobalEntryTimeMs;


TransportStatus_t prvConnectToServer( NetworkContext_t * pxNetworkContext, uint8_t socket )
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af02      	add	r7, sp, #8
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	70fb      	strb	r3, [r7, #3]
   TransportStatus_t xNetworkStatus;
   uint8_t ret;
   uint8_t ipaddr[4]=MQTT_BROKER_ENDPOINT_IP;
 8002678:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <prvConnectToServer+0x84>)
 800267a:	60bb      	str	r3, [r7, #8]

    /* Attempt to connect to MQTT broker. */
    do
    {
        /* Establish a TCP connection with the MQTT broker. */
        LOG( ( "Create a TCP connection to %s:%d.\n",
 800267c:	f240 725b 	movw	r2, #1883	; 0x75b
 8002680:	491c      	ldr	r1, [pc, #112]	; (80026f4 <prvConnectToServer+0x88>)
 8002682:	481d      	ldr	r0, [pc, #116]	; (80026f8 <prvConnectToServer+0x8c>)
 8002684:	f011 fc1e 	bl	8013ec4 <iprintf>
                   MQTT_BROKER_ENDPOINT,
                   MQTT_BROKER_PORT ) );
        ret=WIFI_OpenClientConnection(socket, WIFI_TCP_PROTOCOL, "mqtt", ipaddr , MQTT_BROKER_PORT, 0);
 8002688:	78f8      	ldrb	r0, [r7, #3]
 800268a:	f107 0308 	add.w	r3, r7, #8
 800268e:	2200      	movs	r2, #0
 8002690:	9201      	str	r2, [sp, #4]
 8002692:	f240 725b 	movw	r2, #1883	; 0x75b
 8002696:	9200      	str	r2, [sp, #0]
 8002698:	4a18      	ldr	r2, [pc, #96]	; (80026fc <prvConnectToServer+0x90>)
 800269a:	2100      	movs	r1, #0
 800269c:	f009 fb78 	bl	800bd90 <WIFI_OpenClientConnection>
 80026a0:	4603      	mov	r3, r0
 80026a2:	73bb      	strb	r3, [r7, #14]
		if(ret!=WIFI_STATUS_OK) {
 80026a4:	7bbb      	ldrb	r3, [r7, #14]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d009      	beq.n	80026be <prvConnectToServer+0x52>
			LOG(("Error in opening MQTT connection: %d\n",ret));
 80026aa:	7bbb      	ldrb	r3, [r7, #14]
 80026ac:	4619      	mov	r1, r3
 80026ae:	4814      	ldr	r0, [pc, #80]	; (8002700 <prvConnectToServer+0x94>)
 80026b0:	f011 fc08 	bl	8013ec4 <iprintf>
			osDelay(pdMS_TO_TICKS(10000));
 80026b4:	f242 7010 	movw	r0, #10000	; 0x2710
 80026b8:	f00d fb67 	bl	800fd8a <osDelay>
 80026bc:	e00f      	b.n	80026de <prvConnectToServer+0x72>
		} else {
	        pxNetworkContext->socket = socket;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	78fa      	ldrb	r2, [r7, #3]
 80026c2:	701a      	strb	r2, [r3, #0]
	        pxNetworkContext->socket_open=1;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	705a      	strb	r2, [r3, #1]
	        memcpy(pxNetworkContext->ipaddr,ipaddr,4*sizeof(uint8_t));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3302      	adds	r3, #2
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	601a      	str	r2, [r3, #0]
	        pxNetworkContext->remote_port=MQTT_BROKER_PORT;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f240 725b 	movw	r2, #1883	; 0x75b
 80026d8:	80da      	strh	r2, [r3, #6]
	        xNetworkStatus = PLAINTEXT_TRANSPORT_SUCCESS;
 80026da:	2301      	movs	r3, #1
 80026dc:	73fb      	strb	r3, [r7, #15]
		}


    } while( ( xNetworkStatus != PLAINTEXT_TRANSPORT_SUCCESS ) );
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d1cb      	bne.n	800267c <prvConnectToServer+0x10>

    return PLAINTEXT_TRANSPORT_SUCCESS;
 80026e4:	2301      	movs	r3, #1
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	5e5d795b 	.word	0x5e5d795b
 80026f4:	08016840 	.word	0x08016840
 80026f8:	08016854 	.word	0x08016854
 80026fc:	08016878 	.word	0x08016878
 8002700:	08016880 	.word	0x08016880

08002704 <prvCreateMQTTConnectionWithBroker>:

void prvCreateMQTTConnectionWithBroker( MQTTContext_t * pxMQTTContext,
                                               NetworkContext_t * pxNetworkContext )
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b094      	sub	sp, #80	; 0x50
 8002708:	af02      	add	r7, sp, #8
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
    MQTTConnectInfo_t xConnectInfo;
    bool xSessionPresent;
    TransportInterface_t xTransport;

    /* Fill in Transport Interface send and receive function pointers. */
    init_transport_from_socket( pxNetworkContext->socket, 1,
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	7818      	ldrb	r0, [r3, #0]
 8002712:	f107 030c 	add.w	r3, r7, #12
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	2101      	movs	r1, #1
 800271a:	f00d f921 	bl	800f960 <init_transport_from_socket>
                                     pxNetworkContext,
                                     &xTransport );
    /* Initialize MQTT library. */
    xResult = MQTT_Init( pxMQTTContext,
 800271e:	f107 010c 	add.w	r1, r7, #12
 8002722:	4b30      	ldr	r3, [pc, #192]	; (80027e4 <prvCreateMQTTConnectionWithBroker+0xe0>)
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	4b30      	ldr	r3, [pc, #192]	; (80027e8 <prvCreateMQTTConnectionWithBroker+0xe4>)
 8002728:	4a30      	ldr	r2, [pc, #192]	; (80027ec <prvCreateMQTTConnectionWithBroker+0xe8>)
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f00a ff4e 	bl	800d5cc <MQTT_Init>
 8002730:	4603      	mov	r3, r0
 8002732:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                         &xTransport,
                         prvGetTimeMs,
                         prvEventCallback,
                         &xBuffer );

    configASSERT( xResult == MQTTSuccess );
 8002736:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <prvCreateMQTTConnectionWithBroker+0x50>
	__asm volatile
 800273e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002742:	f383 8811 	msr	BASEPRI, r3
 8002746:	f3bf 8f6f 	isb	sy
 800274a:	f3bf 8f4f 	dsb	sy
 800274e:	643b      	str	r3, [r7, #64]	; 0x40
}
 8002750:	bf00      	nop
 8002752:	e7fe      	b.n	8002752 <prvCreateMQTTConnectionWithBroker+0x4e>
    LOG(("MQTT initialized\n"));
 8002754:	4826      	ldr	r0, [pc, #152]	; (80027f0 <prvCreateMQTTConnectionWithBroker+0xec>)
 8002756:	f011 fc3b 	bl	8013fd0 <puts>

    /* Many fields not used in this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xConnectInfo, 0x00, sizeof( xConnectInfo ) );
 800275a:	f107 0320 	add.w	r3, r7, #32
 800275e:	221c      	movs	r2, #28
 8002760:	2100      	movs	r1, #0
 8002762:	4618      	mov	r0, r3
 8002764:	f010 fd4d 	bl	8013202 <memset>

    /* Start with a clean session i.e. direct the MQTT broker to discard any
     * previous session data. Also, establishing a connection with clean
     * session will ensure that the broker does not store any data when this
     * client gets disconnected. */
    xConnectInfo.cleanSession = true;
 8002768:	2301      	movs	r3, #1
 800276a:	f887 3020 	strb.w	r3, [r7, #32]

    /* The client identifier is used to uniquely identify this MQTT client to
     * the MQTT broker. In a production device the identifier can be something
     * unique, such as a device serial number. */
    xConnectInfo.pClientIdentifier = MQTTCLIENT_IDENTIFIER;
 800276e:	4b21      	ldr	r3, [pc, #132]	; (80027f4 <prvCreateMQTTConnectionWithBroker+0xf0>)
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
    xConnectInfo.clientIdentifierLength = ( uint16_t ) strlen(
 8002772:	230f      	movs	r3, #15
 8002774:	853b      	strh	r3, [r7, #40]	; 0x28
                                                  MQTTCLIENT_IDENTIFIER );
    xConnectInfo.pUserName=mqttUserName;
 8002776:	2300      	movs	r3, #0
 8002778:	62fb      	str	r3, [r7, #44]	; 0x2c
    xConnectInfo.userNameLength=strlen(mqttUserName);
 800277a:	2000      	movs	r0, #0
 800277c:	f7fd fd28 	bl	80001d0 <strlen>
 8002780:	4603      	mov	r3, r0
 8002782:	b29b      	uxth	r3, r3
 8002784:	863b      	strh	r3, [r7, #48]	; 0x30
    xConnectInfo.pPassword=mqttPass;
 8002786:	2300      	movs	r3, #0
 8002788:	637b      	str	r3, [r7, #52]	; 0x34
    xConnectInfo.passwordLength=strlen(mqttPass);
 800278a:	2000      	movs	r0, #0
 800278c:	f7fd fd20 	bl	80001d0 <strlen>
 8002790:	4603      	mov	r3, r0
 8002792:	b29b      	uxth	r3, r3
 8002794:	873b      	strh	r3, [r7, #56]	; 0x38

    /* Set MQTT keep-alive period. It is the responsibility of the application
     * to ensure that the interval between Control Packets being sent does not
     * exceed the Keep Alive value.  In the absence of sending any other
     * Control Packets, the Client MUST send a PINGREQ Packet. */
    xConnectInfo.keepAliveSeconds = 60U;;
 8002796:	233c      	movs	r3, #60	; 0x3c
 8002798:	847b      	strh	r3, [r7, #34]	; 0x22

    /* Send MQTT CONNECT packet to broker. LWT is not used in this demo, so it
     * is passed as NULL. */
    xResult = MQTT_Connect( pxMQTTContext,
 800279a:	f107 0120 	add.w	r1, r7, #32
 800279e:	f107 031f 	add.w	r3, r7, #31
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027a8:	2200      	movs	r2, #0
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f00a ff63 	bl	800d676 <MQTT_Connect>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            &xConnectInfo,
                            NULL,
                            1000U,
                            &xSessionPresent );
    configASSERT( xResult == MQTTSuccess );
 80027b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00a      	beq.n	80027d4 <prvCreateMQTTConnectionWithBroker+0xd0>
	__asm volatile
 80027be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c2:	f383 8811 	msr	BASEPRI, r3
 80027c6:	f3bf 8f6f 	isb	sy
 80027ca:	f3bf 8f4f 	dsb	sy
 80027ce:	63fb      	str	r3, [r7, #60]	; 0x3c
}
 80027d0:	bf00      	nop
 80027d2:	e7fe      	b.n	80027d2 <prvCreateMQTTConnectionWithBroker+0xce>
    LOG(("MQTT connected to broker\n"));
 80027d4:	4808      	ldr	r0, [pc, #32]	; (80027f8 <prvCreateMQTTConnectionWithBroker+0xf4>)
 80027d6:	f011 fbfb 	bl	8013fd0 <puts>

}
 80027da:	bf00      	nop
 80027dc:	3748      	adds	r7, #72	; 0x48
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000000 	.word	0x20000000
 80027e8:	08002a29 	.word	0x08002a29
 80027ec:	080029f9 	.word	0x080029f9
 80027f0:	080168a8 	.word	0x080168a8
 80027f4:	080168bc 	.word	0x080168bc
 80027f8:	080168cc 	.word	0x080168cc

080027fc <prvMQTTPublishToTopic>:

void prvMQTTPublishToTopic( MQTTContext_t * pxMQTTContext, char * topic, void * payload )
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	; 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
    MQTTStatus_t xResult;
    MQTTPublishInfo_t xMQTTPublishInfo;

    /* Some fields are not used by this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xMQTTPublishInfo, 0x00, sizeof(
 8002808:	f107 0310 	add.w	r3, r7, #16
 800280c:	2214      	movs	r2, #20
 800280e:	2100      	movs	r1, #0
 8002810:	4618      	mov	r0, r3
 8002812:	f010 fcf6 	bl	8013202 <memset>
                                                        xMQTTPublishInfo ) );

    /* This demo uses QoS0. */
    xMQTTPublishInfo.qos = MQTTQoS0;
 8002816:	2300      	movs	r3, #0
 8002818:	743b      	strb	r3, [r7, #16]
    xMQTTPublishInfo.retain = false;
 800281a:	2300      	movs	r3, #0
 800281c:	747b      	strb	r3, [r7, #17]
    xMQTTPublishInfo.pTopicName = topic;
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	617b      	str	r3, [r7, #20]
    xMQTTPublishInfo.topicNameLength = ( uint16_t ) strlen( topic );
 8002822:	68b8      	ldr	r0, [r7, #8]
 8002824:	f7fd fcd4 	bl	80001d0 <strlen>
 8002828:	4603      	mov	r3, r0
 800282a:	b29b      	uxth	r3, r3
 800282c:	833b      	strh	r3, [r7, #24]
    xMQTTPublishInfo.pPayload = payload;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	61fb      	str	r3, [r7, #28]
    xMQTTPublishInfo.payloadLength = strlen( payload );
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7fd fccc 	bl	80001d0 <strlen>
 8002838:	4603      	mov	r3, r0
 800283a:	623b      	str	r3, [r7, #32]

    /* Send PUBLISH packet. Packet ID is not used for a QoS0 publish. */
    xResult = MQTT_Publish( pxMQTTContext, &xMQTTPublishInfo, 0U );
 800283c:	f107 0310 	add.w	r3, r7, #16
 8002840:	2200      	movs	r2, #0
 8002842:	4619      	mov	r1, r3
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f00a ffc1 	bl	800d7cc <MQTT_Publish>
 800284a:	4603      	mov	r3, r0
 800284c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    //if(xResult==MQTTSuccess) LOG(("Published to topic %s: %s\n",topic,payload));
    //configASSERT( xResult == MQTTSuccess );
}
 8002850:	bf00      	nop
 8002852:	3728      	adds	r7, #40	; 0x28
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <prvMQTTSubscribeToTopic>:

void prvMQTTSubscribeToTopic( MQTTContext_t * pxMQTTContext, char * topic )
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
    MQTTStatus_t xResult = MQTTSuccess;
 8002862:	2300      	movs	r3, #0
 8002864:	75fb      	strb	r3, [r7, #23]
    MQTTSubscribeInfo_t xMQTTSubscription[ TOPIC_COUNT ];
    bool xFailedSubscribeToTopic = false;
 8002866:	2300      	movs	r3, #0
 8002868:	75bb      	strb	r3, [r7, #22]

    /* Some fields not used by this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xMQTTSubscription, 0x00, sizeof( xMQTTSubscription ) );
 800286a:	f107 0308 	add.w	r3, r7, #8
 800286e:	220c      	movs	r2, #12
 8002870:	2100      	movs	r1, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f010 fcc5 	bl	8013202 <memset>

    /* Each packet requires a unique ID. */
    usSubscribePacketIdentifier = MQTT_GetPacketId( pxMQTTContext );
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f00b f894 	bl	800d9a6 <MQTT_GetPacketId>
 800287e:	4603      	mov	r3, r0
 8002880:	461a      	mov	r2, r3
 8002882:	4b1e      	ldr	r3, [pc, #120]	; (80028fc <prvMQTTSubscribeToTopic+0xa4>)
 8002884:	801a      	strh	r2, [r3, #0]

    /* Subscribe to the pcExampleTopic topic filter. This example subscribes
     * to only one topic and uses QoS0. */
    xMQTTSubscription[ 0 ].qos = MQTTQoS0;
 8002886:	2300      	movs	r3, #0
 8002888:	723b      	strb	r3, [r7, #8]
    xMQTTSubscription[ 0 ].pTopicFilter = topic;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	60fb      	str	r3, [r7, #12]
    xMQTTSubscription[ 0 ].topicFilterLength = strlen( topic );
 800288e:	6838      	ldr	r0, [r7, #0]
 8002890:	f7fd fc9e 	bl	80001d0 <strlen>
 8002894:	4603      	mov	r3, r0
 8002896:	b29b      	uxth	r3, r3
 8002898:	823b      	strh	r3, [r7, #16]
    do
    {
        /* The client is already connected to the broker. Subscribe to the topic
         * as specified in pcExampleTopic by sending a subscribe packet then
         * waiting for a subscribe acknowledgment (SUBACK). */
        xResult = MQTT_Subscribe( pxMQTTContext,
 800289a:	4b18      	ldr	r3, [pc, #96]	; (80028fc <prvMQTTSubscribeToTopic+0xa4>)
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	f107 0108 	add.w	r1, r7, #8
 80028a2:	2201      	movs	r2, #1
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f00a ff5e 	bl	800d766 <MQTT_Subscribe>
 80028aa:	4603      	mov	r3, r0
 80028ac:	75fb      	strb	r3, [r7, #23]
                                  xMQTTSubscription,
                                  1, /* Only subscribing to one topic. */
                                  usSubscribePacketIdentifier );
        if(xResult==MQTTSuccess) LOG(("Subscription to %s, result: %d, success\n",topic,xResult));
 80028ae:	7dfb      	ldrb	r3, [r7, #23]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d106      	bne.n	80028c2 <prvMQTTSubscribeToTopic+0x6a>
 80028b4:	7dfb      	ldrb	r3, [r7, #23]
 80028b6:	461a      	mov	r2, r3
 80028b8:	6839      	ldr	r1, [r7, #0]
 80028ba:	4811      	ldr	r0, [pc, #68]	; (8002900 <prvMQTTSubscribeToTopic+0xa8>)
 80028bc:	f011 fb02 	bl	8013ec4 <iprintf>
 80028c0:	e005      	b.n	80028ce <prvMQTTSubscribeToTopic+0x76>
        else LOG(("Subscription to %s, result: %d, failed\n",topic,xResult));
 80028c2:	7dfb      	ldrb	r3, [r7, #23]
 80028c4:	461a      	mov	r2, r3
 80028c6:	6839      	ldr	r1, [r7, #0]
 80028c8:	480e      	ldr	r0, [pc, #56]	; (8002904 <prvMQTTSubscribeToTopic+0xac>)
 80028ca:	f011 fafb 	bl	8013ec4 <iprintf>
         * packet.  This demo uses the generic packet processing function
         * everywhere to highlight this fact. Note there is a separate demo that
         * shows how to use coreMQTT in a thread safe way – in which case the
         * MQTT protocol runs in the background and this call is not required. */
        /* For version 1.1.0: xResult = MQTT_ProcessLoop( pxMQTTContext, 1000 ); */
        xResult = MQTT_ProcessLoop( pxMQTTContext );
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f00b f849 	bl	800d966 <MQTT_ProcessLoop>
 80028d4:	4603      	mov	r3, r0
 80028d6:	75fb      	strb	r3, [r7, #23]
        //configASSERT( xResult == MQTTSuccess );

        /* Reset flag before checking suback responses. */
        xFailedSubscribeToTopic = false;
 80028d8:	2300      	movs	r3, #0
 80028da:	75bb      	strb	r3, [r7, #22]
         * #xTopicFilterContext is updated in the event callback (shown in a
         * code block below) to reflect the status of the SUBACK sent by the
         * broker. It represents either the QoS level granted by the server upon
         * subscription, or acknowledgment of server rejection of the
         * subscription request. */
        if( xTopicFilterContext[0].xSubAckStatus == MQTTSubAckFailure )
 80028dc:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <prvMQTTSubscribeToTopic+0xb0>)
 80028de:	791b      	ldrb	r3, [r3, #4]
 80028e0:	2b80      	cmp	r3, #128	; 0x80
 80028e2:	d102      	bne.n	80028ea <prvMQTTSubscribeToTopic+0x92>
        {
            xFailedSubscribeToTopic = true;
 80028e4:	2301      	movs	r3, #1
 80028e6:	75bb      	strb	r3, [r7, #22]
            break;
 80028e8:	e003      	b.n	80028f2 <prvMQTTSubscribeToTopic+0x9a>
        }

    } while( xFailedSubscribeToTopic == true  );
 80028ea:	7dbb      	ldrb	r3, [r7, #22]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1d4      	bne.n	800289a <prvMQTTSubscribeToTopic+0x42>
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000d20 	.word	0x20000d20
 8002900:	080168e8 	.word	0x080168e8
 8002904:	08016914 	.word	0x08016914
 8002908:	20000008 	.word	0x20000008

0800290c <prvMQTTProcessIncomingPublish>:

void prvMQTTProcessIncomingPublish( MQTTPublishInfo_t *pxPublishInfo )
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b0c2      	sub	sp, #264	; 0x108
 8002910:	af00      	add	r7, sp, #0
 8002912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002916:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800291a:	6018      	str	r0, [r3, #0]
	char buffer1[128];
	char buffer2[128];
    const char * pTopicName;

	// pPayload no termina en \0, hay que copiarlo en un buffer para imprimirlo. Lo mismo con pTopicName
	memcpy(buffer1,pxPublishInfo->pPayload,min(127,pxPublishInfo->payloadLength));
 800291c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002920:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68d9      	ldr	r1, [r3, #12]
 8002928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800292c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	2b7f      	cmp	r3, #127	; 0x7f
 8002936:	bf28      	it	cs
 8002938:	237f      	movcs	r3, #127	; 0x7f
 800293a:	461a      	mov	r2, r3
 800293c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002940:	4618      	mov	r0, r3
 8002942:	f010 fc36 	bl	80131b2 <memcpy>
	buffer1[min(1023,pxPublishInfo->payloadLength)]='\0';
 8002946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800294a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002956:	4293      	cmp	r3, r2
 8002958:	bf28      	it	cs
 800295a:	4613      	movcs	r3, r2
 800295c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002960:	443b      	add	r3, r7
 8002962:	2200      	movs	r2, #0
 8002964:	f803 2c80 	strb.w	r2, [r3, #-128]
	memcpy(buffer2,pxPublishInfo->pTopicName,min(127,pxPublishInfo->topicNameLength));
 8002968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800296c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6859      	ldr	r1, [r3, #4]
 8002974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002978:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	891b      	ldrh	r3, [r3, #8]
 8002980:	2b7f      	cmp	r3, #127	; 0x7f
 8002982:	bf28      	it	cs
 8002984:	237f      	movcs	r3, #127	; 0x7f
 8002986:	b29b      	uxth	r3, r3
 8002988:	461a      	mov	r2, r3
 800298a:	f107 0308 	add.w	r3, r7, #8
 800298e:	4618      	mov	r0, r3
 8002990:	f010 fc0f 	bl	80131b2 <memcpy>
	buffer2[min(1023,pxPublishInfo->topicNameLength)]='\0';
 8002994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002998:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	891b      	ldrh	r3, [r3, #8]
 80029a0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80029a4:	4293      	cmp	r3, r2
 80029a6:	bf28      	it	cs
 80029a8:	4613      	movcs	r3, r2
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80029b2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80029b6:	2100      	movs	r1, #0
 80029b8:	5499      	strb	r1, [r3, r2]

	printf("Topic \"%s\": publicado \"%s\"\n",buffer2,buffer1);
 80029ba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80029be:	f107 0308 	add.w	r3, r7, #8
 80029c2:	4619      	mov	r1, r3
 80029c4:	480a      	ldr	r0, [pc, #40]	; (80029f0 <prvMQTTProcessIncomingPublish+0xe4>)
 80029c6:	f011 fa7d 	bl	8013ec4 <iprintf>

  // Actuar localmente sobre los LEDs o alguna otra cosa
	if(buffer1[0]=='1') modo_continuo = true;
 80029ca:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80029ce:	2b31      	cmp	r3, #49	; 0x31
 80029d0:	d102      	bne.n	80029d8 <prvMQTTProcessIncomingPublish+0xcc>
 80029d2:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <prvMQTTProcessIncomingPublish+0xe8>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	701a      	strb	r2, [r3, #0]
	if(buffer1[0]=='0') modo_continuo = false;
 80029d8:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80029dc:	2b30      	cmp	r3, #48	; 0x30
 80029de:	d102      	bne.n	80029e6 <prvMQTTProcessIncomingPublish+0xda>
 80029e0:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <prvMQTTProcessIncomingPublish+0xe8>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]

}
 80029e6:	bf00      	nop
 80029e8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	0801693c 	.word	0x0801693c
 80029f4:	20000935 	.word	0x20000935

080029f8 <prvGetTimeMs>:

uint32_t prvGetTimeMs( void )
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
#define MILLISECONDS_PER_TICK                             ( 1000 / configTICK_RATE_HZ )
    TickType_t xTickCount = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	607b      	str	r3, [r7, #4]
    uint32_t ulTimeMs = 0UL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	603b      	str	r3, [r7, #0]

    /* Get the current tick count. */
    xTickCount = xTaskGetTickCount();
 8002a06:	f00e fca9 	bl	801135c <xTaskGetTickCount>
 8002a0a:	6078      	str	r0, [r7, #4]

    /* Convert the ticks to milliseconds. */
    ulTimeMs = ( uint32_t ) xTickCount * MILLISECONDS_PER_TICK;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	603b      	str	r3, [r7, #0]

    /* Reduce ulGlobalEntryTimeMs from obtained time so as to always return the
     * elapsed time in the application. */
    ulTimeMs = ( uint32_t ) ( ulTimeMs - ulGlobalEntryTimeMs );
 8002a10:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <prvGetTimeMs+0x2c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	603b      	str	r3, [r7, #0]

    return ulTimeMs;
 8002a1a:	683b      	ldr	r3, [r7, #0]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000d24 	.word	0x20000d24

08002a28 <prvEventCallback>:

void prvEventCallback( MQTTContext_t * pxMQTTContext,
                              MQTTPacketInfo_t * pxPacketInfo,
                              MQTTDeserializedInfo_t * pxDeserializedInfo )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
    /* The MQTT context is not used for this demo. */
    ( void ) pxMQTTContext;

    if( ( pxPacketInfo->type & 0xF0U ) == MQTT_PACKET_TYPE_PUBLISH )
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a3c:	2b30      	cmp	r3, #48	; 0x30
 8002a3e:	d104      	bne.n	8002a4a <prvEventCallback+0x22>
    {
    	// procesar un paquete PUBLISH recibido,
    	//por ejemplo llamando a la función prvMQTTProcessIncomingPublish, que hay que desarrollar
      prvMQTTProcessIncomingPublish( pxDeserializedInfo->pPublishInfo );
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff ff61 	bl	800290c <prvMQTTProcessIncomingPublish>
    {
       // también se podría hacer algo con otros paquetes si fuera necesario
    	 //prvMQTTProcessResponse( pxPacketInfo, pxDeserializedInfo->packetIdentifier );
    }

}
 8002a4a:	bf00      	nop
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a5a:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <HAL_MspInit+0x4c>)
 8002a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a5e:	4a10      	ldr	r2, [pc, #64]	; (8002aa0 <HAL_MspInit+0x4c>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6613      	str	r3, [r2, #96]	; 0x60
 8002a66:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <HAL_MspInit+0x4c>)
 8002a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	607b      	str	r3, [r7, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a72:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_MspInit+0x4c>)
 8002a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a76:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <HAL_MspInit+0x4c>)
 8002a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a7e:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <HAL_MspInit+0x4c>)
 8002a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	210f      	movs	r1, #15
 8002a8e:	f06f 0001 	mvn.w	r0, #1
 8002a92:	f000 fe41 	bl	8003718 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000

08002aa4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b0ac      	sub	sp, #176	; 0xb0
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	2288      	movs	r2, #136	; 0x88
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f010 fb9c 	bl	8013202 <memset>
  if(DFSDM1_Init == 0)
 8002aca:	4b25      	ldr	r3, [pc, #148]	; (8002b60 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d142      	bne.n	8002b58 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002ad2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ad6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ade:	f107 0314 	add.w	r3, r7, #20
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f003 f90a 	bl	8005cfc <HAL_RCCEx_PeriphCLKConfig>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8002aee:	f7ff fdb7 	bl	8002660 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002af2:	4b1c      	ldr	r3, [pc, #112]	; (8002b64 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af6:	4a1b      	ldr	r2, [pc, #108]	; (8002b64 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002af8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002afc:	6613      	str	r3, [r2, #96]	; 0x60
 8002afe:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b0a:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0e:	4a15      	ldr	r2, [pc, #84]	; (8002b64 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002b10:	f043 0310 	orr.w	r3, r3, #16
 8002b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b16:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002b22:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002b26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b36:	2300      	movs	r3, #0
 8002b38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002b3c:	2306      	movs	r3, #6
 8002b3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b42:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b46:	4619      	mov	r1, r3
 8002b48:	4807      	ldr	r0, [pc, #28]	; (8002b68 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8002b4a:	f000 ffa9 	bl	8003aa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002b4e:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	3301      	adds	r3, #1
 8002b54:	4a02      	ldr	r2, [pc, #8]	; (8002b60 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002b56:	6013      	str	r3, [r2, #0]
  }

}
 8002b58:	bf00      	nop
 8002b5a:	37b0      	adds	r7, #176	; 0xb0
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20000d28 	.word	0x20000d28
 8002b64:	40021000 	.word	0x40021000
 8002b68:	48001000 	.word	0x48001000

08002b6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b0ac      	sub	sp, #176	; 0xb0
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b84:	f107 0314 	add.w	r3, r7, #20
 8002b88:	2288      	movs	r2, #136	; 0x88
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f010 fb38 	bl	8013202 <memset>
  if(hi2c->Instance==I2C2)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a21      	ldr	r2, [pc, #132]	; (8002c1c <HAL_I2C_MspInit+0xb0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d13b      	bne.n	8002c14 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002b9c:	2380      	movs	r3, #128	; 0x80
 8002b9e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f003 f8a7 	bl	8005cfc <HAL_RCCEx_PeriphCLKConfig>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002bb4:	f7ff fd54 	bl	8002660 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb8:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <HAL_I2C_MspInit+0xb4>)
 8002bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bbc:	4a18      	ldr	r2, [pc, #96]	; (8002c20 <HAL_I2C_MspInit+0xb4>)
 8002bbe:	f043 0302 	orr.w	r3, r3, #2
 8002bc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bc4:	4b16      	ldr	r3, [pc, #88]	; (8002c20 <HAL_I2C_MspInit+0xb4>)
 8002bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002bd0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002bd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bd8:	2312      	movs	r3, #18
 8002bda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bde:	2301      	movs	r3, #1
 8002be0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be4:	2303      	movs	r3, #3
 8002be6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002bea:	2304      	movs	r3, #4
 8002bec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	480b      	ldr	r0, [pc, #44]	; (8002c24 <HAL_I2C_MspInit+0xb8>)
 8002bf8:	f000 ff52 	bl	8003aa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002bfc:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <HAL_I2C_MspInit+0xb4>)
 8002bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c00:	4a07      	ldr	r2, [pc, #28]	; (8002c20 <HAL_I2C_MspInit+0xb4>)
 8002c02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c06:	6593      	str	r3, [r2, #88]	; 0x58
 8002c08:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <HAL_I2C_MspInit+0xb4>)
 8002c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002c14:	bf00      	nop
 8002c16:	37b0      	adds	r7, #176	; 0xb0
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40005800 	.word	0x40005800
 8002c20:	40021000 	.word	0x40021000
 8002c24:	48000400 	.word	0x48000400

08002c28 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0b      	ldr	r2, [pc, #44]	; (8002c64 <HAL_I2C_MspDeInit+0x3c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d10f      	bne.n	8002c5a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002c3a:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <HAL_I2C_MspDeInit+0x40>)
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3e:	4a0a      	ldr	r2, [pc, #40]	; (8002c68 <HAL_I2C_MspDeInit+0x40>)
 8002c40:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002c44:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8002c46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c4a:	4808      	ldr	r0, [pc, #32]	; (8002c6c <HAL_I2C_MspDeInit+0x44>)
 8002c4c:	f001 f8d2 	bl	8003df4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8002c50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c54:	4805      	ldr	r0, [pc, #20]	; (8002c6c <HAL_I2C_MspDeInit+0x44>)
 8002c56:	f001 f8cd 	bl	8003df4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40005800 	.word	0x40005800
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	48000400 	.word	0x48000400

08002c70 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08a      	sub	sp, #40	; 0x28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c78:	f107 0314 	add.w	r3, r7, #20
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a17      	ldr	r2, [pc, #92]	; (8002cec <HAL_QSPI_MspInit+0x7c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d128      	bne.n	8002ce4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002c92:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <HAL_QSPI_MspInit+0x80>)
 8002c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c96:	4a16      	ldr	r2, [pc, #88]	; (8002cf0 <HAL_QSPI_MspInit+0x80>)
 8002c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9c:	6513      	str	r3, [r2, #80]	; 0x50
 8002c9e:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <HAL_QSPI_MspInit+0x80>)
 8002ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca6:	613b      	str	r3, [r7, #16]
 8002ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <HAL_QSPI_MspInit+0x80>)
 8002cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cae:	4a10      	ldr	r2, [pc, #64]	; (8002cf0 <HAL_QSPI_MspInit+0x80>)
 8002cb0:	f043 0310 	orr.w	r3, r3, #16
 8002cb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cb6:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <HAL_QSPI_MspInit+0x80>)
 8002cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cba:	f003 0310 	and.w	r3, r3, #16
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002cc2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002cc6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002cd4:	230a      	movs	r3, #10
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cd8:	f107 0314 	add.w	r3, r7, #20
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4805      	ldr	r0, [pc, #20]	; (8002cf4 <HAL_QSPI_MspInit+0x84>)
 8002ce0:	f000 fede 	bl	8003aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002ce4:	bf00      	nop
 8002ce6:	3728      	adds	r7, #40	; 0x28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	a0001000 	.word	0xa0001000
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	48001000 	.word	0x48001000

08002cf8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b0a4      	sub	sp, #144	; 0x90
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d00:	f107 0308 	add.w	r3, r7, #8
 8002d04:	2288      	movs	r2, #136	; 0x88
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f010 fa7a 	bl	8013202 <memset>
  if(hrtc->Instance==RTC)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a10      	ldr	r2, [pc, #64]	; (8002d54 <HAL_RTC_MspInit+0x5c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d118      	bne.n	8002d4a <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002d18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d1c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002d1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d26:	f107 0308 	add.w	r3, r7, #8
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f002 ffe6 	bl	8005cfc <HAL_RCCEx_PeriphCLKConfig>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002d36:	f7ff fc93 	bl	8002660 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d3a:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <HAL_RTC_MspInit+0x60>)
 8002d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d40:	4a05      	ldr	r2, [pc, #20]	; (8002d58 <HAL_RTC_MspInit+0x60>)
 8002d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002d4a:	bf00      	nop
 8002d4c:	3790      	adds	r7, #144	; 0x90
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40002800 	.word	0x40002800
 8002d58:	40021000 	.word	0x40021000

08002d5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08a      	sub	sp, #40	; 0x28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d64:	f107 0314 	add.w	r3, r7, #20
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	60da      	str	r2, [r3, #12]
 8002d72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a1b      	ldr	r2, [pc, #108]	; (8002de8 <HAL_SPI_MspInit+0x8c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d130      	bne.n	8002de0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002d7e:	4b1b      	ldr	r3, [pc, #108]	; (8002dec <HAL_SPI_MspInit+0x90>)
 8002d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d82:	4a1a      	ldr	r2, [pc, #104]	; (8002dec <HAL_SPI_MspInit+0x90>)
 8002d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d88:	6593      	str	r3, [r2, #88]	; 0x58
 8002d8a:	4b18      	ldr	r3, [pc, #96]	; (8002dec <HAL_SPI_MspInit+0x90>)
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d96:	4b15      	ldr	r3, [pc, #84]	; (8002dec <HAL_SPI_MspInit+0x90>)
 8002d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9a:	4a14      	ldr	r2, [pc, #80]	; (8002dec <HAL_SPI_MspInit+0x90>)
 8002d9c:	f043 0304 	orr.w	r3, r3, #4
 8002da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002da2:	4b12      	ldr	r3, [pc, #72]	; (8002dec <HAL_SPI_MspInit+0x90>)
 8002da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002dae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db4:	2302      	movs	r3, #2
 8002db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002dc0:	2306      	movs	r3, #6
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dc4:	f107 0314 	add.w	r3, r7, #20
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4809      	ldr	r0, [pc, #36]	; (8002df0 <HAL_SPI_MspInit+0x94>)
 8002dcc:	f000 fe68 	bl	8003aa0 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2105      	movs	r1, #5
 8002dd4:	2033      	movs	r0, #51	; 0x33
 8002dd6:	f000 fc9f 	bl	8003718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002dda:	2033      	movs	r0, #51	; 0x33
 8002ddc:	f000 fcb8 	bl	8003750 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002de0:	bf00      	nop
 8002de2:	3728      	adds	r7, #40	; 0x28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40003c00 	.word	0x40003c00
 8002dec:	40021000 	.word	0x40021000
 8002df0:	48000800 	.word	0x48000800

08002df4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <HAL_SPI_MspDeInit+0x38>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d10d      	bne.n	8002e22 <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8002e06:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <HAL_SPI_MspDeInit+0x3c>)
 8002e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0a:	4a09      	ldr	r2, [pc, #36]	; (8002e30 <HAL_SPI_MspDeInit+0x3c>)
 8002e0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002e10:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8002e12:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002e16:	4807      	ldr	r0, [pc, #28]	; (8002e34 <HAL_SPI_MspDeInit+0x40>)
 8002e18:	f000 ffec 	bl	8003df4 <HAL_GPIO_DeInit>

    /* SPI3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
 8002e1c:	2033      	movs	r0, #51	; 0x33
 8002e1e:	f000 fca5 	bl	800376c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40003c00 	.word	0x40003c00
 8002e30:	40021000 	.word	0x40021000
 8002e34:	48000800 	.word	0x48000800

08002e38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a0d      	ldr	r2, [pc, #52]	; (8002e7c <HAL_TIM_Base_MspInit+0x44>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d113      	bne.n	8002e72 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002e4a:	4b0d      	ldr	r3, [pc, #52]	; (8002e80 <HAL_TIM_Base_MspInit+0x48>)
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4e:	4a0c      	ldr	r2, [pc, #48]	; (8002e80 <HAL_TIM_Base_MspInit+0x48>)
 8002e50:	f043 0320 	orr.w	r3, r3, #32
 8002e54:	6593      	str	r3, [r2, #88]	; 0x58
 8002e56:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <HAL_TIM_Base_MspInit+0x48>)
 8002e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5a:	f003 0320 	and.w	r3, r3, #32
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002e62:	2200      	movs	r2, #0
 8002e64:	2105      	movs	r1, #5
 8002e66:	2037      	movs	r0, #55	; 0x37
 8002e68:	f000 fc56 	bl	8003718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002e6c:	2037      	movs	r0, #55	; 0x37
 8002e6e:	f000 fc6f 	bl	8003750 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002e72:	bf00      	nop
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40001400 	.word	0x40001400
 8002e80:	40021000 	.word	0x40021000

08002e84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b0ae      	sub	sp, #184	; 0xb8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	60da      	str	r2, [r3, #12]
 8002e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e9c:	f107 031c 	add.w	r3, r7, #28
 8002ea0:	2288      	movs	r2, #136	; 0x88
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f010 f9ac 	bl	8013202 <memset>
  if(huart->Instance==USART1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a46      	ldr	r2, [pc, #280]	; (8002fc8 <HAL_UART_MspInit+0x144>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d143      	bne.n	8002f3c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ebc:	f107 031c 	add.w	r3, r7, #28
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f002 ff1b 	bl	8005cfc <HAL_RCCEx_PeriphCLKConfig>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ecc:	f7ff fbc8 	bl	8002660 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ed0:	4b3e      	ldr	r3, [pc, #248]	; (8002fcc <HAL_UART_MspInit+0x148>)
 8002ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed4:	4a3d      	ldr	r2, [pc, #244]	; (8002fcc <HAL_UART_MspInit+0x148>)
 8002ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eda:	6613      	str	r3, [r2, #96]	; 0x60
 8002edc:	4b3b      	ldr	r3, [pc, #236]	; (8002fcc <HAL_UART_MspInit+0x148>)
 8002ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee4:	61bb      	str	r3, [r7, #24]
 8002ee6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee8:	4b38      	ldr	r3, [pc, #224]	; (8002fcc <HAL_UART_MspInit+0x148>)
 8002eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eec:	4a37      	ldr	r2, [pc, #220]	; (8002fcc <HAL_UART_MspInit+0x148>)
 8002eee:	f043 0302 	orr.w	r3, r3, #2
 8002ef2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ef4:	4b35      	ldr	r3, [pc, #212]	; (8002fcc <HAL_UART_MspInit+0x148>)
 8002ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002f00:	23c0      	movs	r3, #192	; 0xc0
 8002f02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	2302      	movs	r3, #2
 8002f08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f12:	2303      	movs	r3, #3
 8002f14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f18:	2307      	movs	r3, #7
 8002f1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f22:	4619      	mov	r1, r3
 8002f24:	482a      	ldr	r0, [pc, #168]	; (8002fd0 <HAL_UART_MspInit+0x14c>)
 8002f26:	f000 fdbb 	bl	8003aa0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2105      	movs	r1, #5
 8002f2e:	2025      	movs	r0, #37	; 0x25
 8002f30:	f000 fbf2 	bl	8003718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f34:	2025      	movs	r0, #37	; 0x25
 8002f36:	f000 fc0b 	bl	8003750 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f3a:	e040      	b.n	8002fbe <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART3)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a24      	ldr	r2, [pc, #144]	; (8002fd4 <HAL_UART_MspInit+0x150>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d13b      	bne.n	8002fbe <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002f46:	2304      	movs	r3, #4
 8002f48:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f4e:	f107 031c 	add.w	r3, r7, #28
 8002f52:	4618      	mov	r0, r3
 8002f54:	f002 fed2 	bl	8005cfc <HAL_RCCEx_PeriphCLKConfig>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_UART_MspInit+0xde>
      Error_Handler();
 8002f5e:	f7ff fb7f 	bl	8002660 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f62:	4b1a      	ldr	r3, [pc, #104]	; (8002fcc <HAL_UART_MspInit+0x148>)
 8002f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f66:	4a19      	ldr	r2, [pc, #100]	; (8002fcc <HAL_UART_MspInit+0x148>)
 8002f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f6c:	6593      	str	r3, [r2, #88]	; 0x58
 8002f6e:	4b17      	ldr	r3, [pc, #92]	; (8002fcc <HAL_UART_MspInit+0x148>)
 8002f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f7a:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <HAL_UART_MspInit+0x148>)
 8002f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7e:	4a13      	ldr	r2, [pc, #76]	; (8002fcc <HAL_UART_MspInit+0x148>)
 8002f80:	f043 0308 	orr.w	r3, r3, #8
 8002f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f86:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <HAL_UART_MspInit+0x148>)
 8002f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002f92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fac:	2307      	movs	r3, #7
 8002fae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fb2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4807      	ldr	r0, [pc, #28]	; (8002fd8 <HAL_UART_MspInit+0x154>)
 8002fba:	f000 fd71 	bl	8003aa0 <HAL_GPIO_Init>
}
 8002fbe:	bf00      	nop
 8002fc0:	37b8      	adds	r7, #184	; 0xb8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40013800 	.word	0x40013800
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	48000400 	.word	0x48000400
 8002fd4:	40004800 	.word	0x40004800
 8002fd8:	48000c00 	.word	0x48000c00

08002fdc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b0ac      	sub	sp, #176	; 0xb0
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	60da      	str	r2, [r3, #12]
 8002ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ff4:	f107 0314 	add.w	r3, r7, #20
 8002ff8:	2288      	movs	r2, #136	; 0x88
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f010 f900 	bl	8013202 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800300a:	d17c      	bne.n	8003106 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800300c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003010:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003012:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003016:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800301a:	2301      	movs	r3, #1
 800301c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800301e:	2301      	movs	r3, #1
 8003020:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8003022:	2318      	movs	r3, #24
 8003024:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003026:	2307      	movs	r3, #7
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800302a:	2302      	movs	r3, #2
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800302e:	2302      	movs	r3, #2
 8003030:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8003032:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003036:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003038:	f107 0314 	add.w	r3, r7, #20
 800303c:	4618      	mov	r0, r3
 800303e:	f002 fe5d 	bl	8005cfc <HAL_RCCEx_PeriphCLKConfig>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8003048:	f7ff fb0a 	bl	8002660 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800304c:	4b30      	ldr	r3, [pc, #192]	; (8003110 <HAL_PCD_MspInit+0x134>)
 800304e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003050:	4a2f      	ldr	r2, [pc, #188]	; (8003110 <HAL_PCD_MspInit+0x134>)
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003058:	4b2d      	ldr	r3, [pc, #180]	; (8003110 <HAL_PCD_MspInit+0x134>)
 800305a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	613b      	str	r3, [r7, #16]
 8003062:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8003064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003068:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800306c:	2300      	movs	r3, #0
 800306e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003072:	2300      	movs	r3, #0
 8003074:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003078:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800307c:	4619      	mov	r1, r3
 800307e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003082:	f000 fd0d 	bl	8003aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8003086:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800308a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308e:	2302      	movs	r3, #2
 8003090:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003094:	2300      	movs	r3, #0
 8003096:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800309a:	2303      	movs	r3, #3
 800309c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80030a0:	230a      	movs	r3, #10
 80030a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80030aa:	4619      	mov	r1, r3
 80030ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030b0:	f000 fcf6 	bl	8003aa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80030b4:	4b16      	ldr	r3, [pc, #88]	; (8003110 <HAL_PCD_MspInit+0x134>)
 80030b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b8:	4a15      	ldr	r2, [pc, #84]	; (8003110 <HAL_PCD_MspInit+0x134>)
 80030ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030c0:	4b13      	ldr	r3, [pc, #76]	; (8003110 <HAL_PCD_MspInit+0x134>)
 80030c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030cc:	4b10      	ldr	r3, [pc, #64]	; (8003110 <HAL_PCD_MspInit+0x134>)
 80030ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d114      	bne.n	8003102 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d8:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <HAL_PCD_MspInit+0x134>)
 80030da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030dc:	4a0c      	ldr	r2, [pc, #48]	; (8003110 <HAL_PCD_MspInit+0x134>)
 80030de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e2:	6593      	str	r3, [r2, #88]	; 0x58
 80030e4:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <HAL_PCD_MspInit+0x134>)
 80030e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80030f0:	f001 ff18 	bl	8004f24 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f4:	4b06      	ldr	r3, [pc, #24]	; (8003110 <HAL_PCD_MspInit+0x134>)
 80030f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f8:	4a05      	ldr	r2, [pc, #20]	; (8003110 <HAL_PCD_MspInit+0x134>)
 80030fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fe:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003100:	e001      	b.n	8003106 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8003102:	f001 ff0f 	bl	8004f24 <HAL_PWREx_EnableVddUSB>
}
 8003106:	bf00      	nop
 8003108:	37b0      	adds	r7, #176	; 0xb0
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40021000 	.word	0x40021000

08003114 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08e      	sub	sp, #56	; 0x38
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800311c:	2300      	movs	r3, #0
 800311e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003122:	4b34      	ldr	r3, [pc, #208]	; (80031f4 <HAL_InitTick+0xe0>)
 8003124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003126:	4a33      	ldr	r2, [pc, #204]	; (80031f4 <HAL_InitTick+0xe0>)
 8003128:	f043 0310 	orr.w	r3, r3, #16
 800312c:	6593      	str	r3, [r2, #88]	; 0x58
 800312e:	4b31      	ldr	r3, [pc, #196]	; (80031f4 <HAL_InitTick+0xe0>)
 8003130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800313a:	f107 0210 	add.w	r2, r7, #16
 800313e:	f107 0314 	add.w	r3, r7, #20
 8003142:	4611      	mov	r1, r2
 8003144:	4618      	mov	r0, r3
 8003146:	f002 fd47 	bl	8005bd8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800314e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003150:	2b00      	cmp	r3, #0
 8003152:	d103      	bne.n	800315c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003154:	f002 fd14 	bl	8005b80 <HAL_RCC_GetPCLK1Freq>
 8003158:	6378      	str	r0, [r7, #52]	; 0x34
 800315a:	e004      	b.n	8003166 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800315c:	f002 fd10 	bl	8005b80 <HAL_RCC_GetPCLK1Freq>
 8003160:	4603      	mov	r3, r0
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003168:	4a23      	ldr	r2, [pc, #140]	; (80031f8 <HAL_InitTick+0xe4>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	0c9b      	lsrs	r3, r3, #18
 8003170:	3b01      	subs	r3, #1
 8003172:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003174:	4b21      	ldr	r3, [pc, #132]	; (80031fc <HAL_InitTick+0xe8>)
 8003176:	4a22      	ldr	r2, [pc, #136]	; (8003200 <HAL_InitTick+0xec>)
 8003178:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800317a:	4b20      	ldr	r3, [pc, #128]	; (80031fc <HAL_InitTick+0xe8>)
 800317c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003180:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003182:	4a1e      	ldr	r2, [pc, #120]	; (80031fc <HAL_InitTick+0xe8>)
 8003184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003186:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003188:	4b1c      	ldr	r3, [pc, #112]	; (80031fc <HAL_InitTick+0xe8>)
 800318a:	2200      	movs	r2, #0
 800318c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800318e:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <HAL_InitTick+0xe8>)
 8003190:	2200      	movs	r2, #0
 8003192:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003194:	4b19      	ldr	r3, [pc, #100]	; (80031fc <HAL_InitTick+0xe8>)
 8003196:	2200      	movs	r2, #0
 8003198:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800319a:	4818      	ldr	r0, [pc, #96]	; (80031fc <HAL_InitTick+0xe8>)
 800319c:	f005 f8c1 	bl	8008322 <HAL_TIM_Base_Init>
 80031a0:	4603      	mov	r3, r0
 80031a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80031a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d11b      	bne.n	80031e6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80031ae:	4813      	ldr	r0, [pc, #76]	; (80031fc <HAL_InitTick+0xe8>)
 80031b0:	f005 f90e 	bl	80083d0 <HAL_TIM_Base_Start_IT>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80031ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d111      	bne.n	80031e6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80031c2:	2036      	movs	r0, #54	; 0x36
 80031c4:	f000 fac4 	bl	8003750 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b0f      	cmp	r3, #15
 80031cc:	d808      	bhi.n	80031e0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80031ce:	2200      	movs	r2, #0
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	2036      	movs	r0, #54	; 0x36
 80031d4:	f000 faa0 	bl	8003718 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031d8:	4a0a      	ldr	r2, [pc, #40]	; (8003204 <HAL_InitTick+0xf0>)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	e002      	b.n	80031e6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80031e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3738      	adds	r7, #56	; 0x38
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40021000 	.word	0x40021000
 80031f8:	431bde83 	.word	0x431bde83
 80031fc:	20000d2c 	.word	0x20000d2c
 8003200:	40001000 	.word	0x40001000
 8003204:	20000014 	.word	0x20000014

08003208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800320c:	e7fe      	b.n	800320c <NMI_Handler+0x4>

0800320e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800320e:	b480      	push	{r7}
 8003210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003212:	e7fe      	b.n	8003212 <HardFault_Handler+0x4>

08003214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003218:	e7fe      	b.n	8003218 <MemManage_Handler+0x4>

0800321a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800321a:	b480      	push	{r7}
 800321c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800321e:	e7fe      	b.n	800321e <BusFault_Handler+0x4>

08003220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003224:	e7fe      	b.n	8003224 <UsageFault_Handler+0x4>

08003226 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003226:	b480      	push	{r7}
 8003228:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800322a:	bf00      	nop
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ISM43362_DRDY_EXTI1_Pin);
 8003238:	2002      	movs	r0, #2
 800323a:	f000 feff 	bl	800403c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}

08003242 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8003246:	2020      	movs	r0, #32
 8003248:	f000 fef8 	bl	800403c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800324c:	2040      	movs	r0, #64	; 0x40
 800324e:	f000 fef5 	bl	800403c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8003252:	2080      	movs	r0, #128	; 0x80
 8003254:	f000 fef2 	bl	800403c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8003258:	f44f 7080 	mov.w	r0, #256	; 0x100
 800325c:	f000 feee 	bl	800403c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003260:	bf00      	nop
 8003262:	bd80      	pop	{r7, pc}

08003264 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003268:	4802      	ldr	r0, [pc, #8]	; (8003274 <USART1_IRQHandler+0x10>)
 800326a:	f005 fccf 	bl	8008c0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800326e:	bf00      	nop
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	200003dc 	.word	0x200003dc

08003278 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800327c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003280:	f000 fedc 	bl	800403c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8003284:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003288:	f000 fed8 	bl	800403c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BOTON_Pin);
 800328c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003290:	f000 fed4 	bl	800403c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8003294:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003298:	f000 fed0 	bl	800403c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800329c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80032a0:	f000 fecc 	bl	800403c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80032a4:	bf00      	nop
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80032ac:	4802      	ldr	r0, [pc, #8]	; (80032b8 <TIM6_DAC_IRQHandler+0x10>)
 80032ae:	f005 f8ff 	bl	80084b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000d2c 	.word	0x20000d2c

080032bc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
  ulHighFrequencyTimerTicks++;
 80032c0:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <TIM7_IRQHandler+0x18>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3301      	adds	r3, #1
 80032c6:	4a03      	ldr	r2, [pc, #12]	; (80032d4 <TIM7_IRQHandler+0x18>)
 80032c8:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80032ca:	4803      	ldr	r0, [pc, #12]	; (80032d8 <TIM7_IRQHandler+0x1c>)
 80032cc:	f005 f8f0 	bl	80084b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80032d0:	bf00      	nop
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	20000930 	.word	0x20000930
 80032d8:	20000390 	.word	0x20000390

080032dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return 1;
 80032e0:	2301      	movs	r3, #1
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <_kill>:

int _kill(int pid, int sig)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032f6:	f00f fe17 	bl	8012f28 <__errno>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2216      	movs	r2, #22
 80032fe:	601a      	str	r2, [r3, #0]
  return -1;
 8003300:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <_exit>:

void _exit (int status)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003314:	f04f 31ff 	mov.w	r1, #4294967295
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff ffe7 	bl	80032ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800331e:	e7fe      	b.n	800331e <_exit+0x12>

08003320 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	e00a      	b.n	8003348 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003332:	f3af 8000 	nop.w
 8003336:	4601      	mov	r1, r0
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	60ba      	str	r2, [r7, #8]
 800333e:	b2ca      	uxtb	r2, r1
 8003340:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	3301      	adds	r3, #1
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	429a      	cmp	r2, r3
 800334e:	dbf0      	blt.n	8003332 <_read+0x12>
  }

  return len;
 8003350:	687b      	ldr	r3, [r7, #4]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <_close>:
  }
  return len;
}

int _close(int file)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003362:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003382:	605a      	str	r2, [r3, #4]
  return 0;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <_isatty>:

int _isatty(int file)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800339a:	2301      	movs	r3, #1
}
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
	...

080033c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033cc:	4a14      	ldr	r2, [pc, #80]	; (8003420 <_sbrk+0x5c>)
 80033ce:	4b15      	ldr	r3, [pc, #84]	; (8003424 <_sbrk+0x60>)
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033d8:	4b13      	ldr	r3, [pc, #76]	; (8003428 <_sbrk+0x64>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d102      	bne.n	80033e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033e0:	4b11      	ldr	r3, [pc, #68]	; (8003428 <_sbrk+0x64>)
 80033e2:	4a12      	ldr	r2, [pc, #72]	; (800342c <_sbrk+0x68>)
 80033e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033e6:	4b10      	ldr	r3, [pc, #64]	; (8003428 <_sbrk+0x64>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d207      	bcs.n	8003404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033f4:	f00f fd98 	bl	8012f28 <__errno>
 80033f8:	4603      	mov	r3, r0
 80033fa:	220c      	movs	r2, #12
 80033fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003402:	e009      	b.n	8003418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003404:	4b08      	ldr	r3, [pc, #32]	; (8003428 <_sbrk+0x64>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800340a:	4b07      	ldr	r3, [pc, #28]	; (8003428 <_sbrk+0x64>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4413      	add	r3, r2
 8003412:	4a05      	ldr	r2, [pc, #20]	; (8003428 <_sbrk+0x64>)
 8003414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003416:	68fb      	ldr	r3, [r7, #12]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20018000 	.word	0x20018000
 8003424:	00000400 	.word	0x00000400
 8003428:	20000d78 	.word	0x20000d78
 800342c:	20005098 	.word	0x20005098

08003430 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003434:	4b06      	ldr	r3, [pc, #24]	; (8003450 <SystemInit+0x20>)
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343a:	4a05      	ldr	r2, [pc, #20]	; (8003450 <SystemInit+0x20>)
 800343c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003444:	bf00      	nop
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	e000ed00 	.word	0xe000ed00

08003454 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800348c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003458:	f7ff ffea 	bl	8003430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800345c:	480c      	ldr	r0, [pc, #48]	; (8003490 <LoopForever+0x6>)
  ldr r1, =_edata
 800345e:	490d      	ldr	r1, [pc, #52]	; (8003494 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003460:	4a0d      	ldr	r2, [pc, #52]	; (8003498 <LoopForever+0xe>)
  movs r3, #0
 8003462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003464:	e002      	b.n	800346c <LoopCopyDataInit>

08003466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800346a:	3304      	adds	r3, #4

0800346c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800346c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800346e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003470:	d3f9      	bcc.n	8003466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003472:	4a0a      	ldr	r2, [pc, #40]	; (800349c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003474:	4c0a      	ldr	r4, [pc, #40]	; (80034a0 <LoopForever+0x16>)
  movs r3, #0
 8003476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003478:	e001      	b.n	800347e <LoopFillZerobss>

0800347a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800347a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800347c:	3204      	adds	r2, #4

0800347e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800347e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003480:	d3fb      	bcc.n	800347a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003482:	f00f fe5f 	bl	8013144 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003486:	f7fd fd53 	bl	8000f30 <main>

0800348a <LoopForever>:

LoopForever:
    b LoopForever
 800348a:	e7fe      	b.n	800348a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800348c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003494:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8003498:	08018248 	.word	0x08018248
  ldr r2, =_sbss
 800349c:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 80034a0:	20005094 	.word	0x20005094

080034a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80034a4:	e7fe      	b.n	80034a4 <ADC1_2_IRQHandler>

080034a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80034ac:	2300      	movs	r3, #0
 80034ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034b0:	2003      	movs	r0, #3
 80034b2:	f000 f926 	bl	8003702 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034b6:	200f      	movs	r0, #15
 80034b8:	f7ff fe2c 	bl	8003114 <HAL_InitTick>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	71fb      	strb	r3, [r7, #7]
 80034c6:	e001      	b.n	80034cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80034c8:	f7ff fac4 	bl	8002a54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80034cc:	79fb      	ldrb	r3, [r7, #7]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034dc:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <HAL_IncTick+0x20>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	4b06      	ldr	r3, [pc, #24]	; (80034fc <HAL_IncTick+0x24>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4413      	add	r3, r2
 80034e8:	4a04      	ldr	r2, [pc, #16]	; (80034fc <HAL_IncTick+0x24>)
 80034ea:	6013      	str	r3, [r2, #0]
}
 80034ec:	bf00      	nop
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	20000018 	.word	0x20000018
 80034fc:	20000d7c 	.word	0x20000d7c

08003500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  return uwTick;
 8003504:	4b03      	ldr	r3, [pc, #12]	; (8003514 <HAL_GetTick+0x14>)
 8003506:	681b      	ldr	r3, [r3, #0]
}
 8003508:	4618      	mov	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	20000d7c 	.word	0x20000d7c

08003518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003520:	f7ff ffee 	bl	8003500 <HAL_GetTick>
 8003524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003530:	d005      	beq.n	800353e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003532:	4b0a      	ldr	r3, [pc, #40]	; (800355c <HAL_Delay+0x44>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4413      	add	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800353e:	bf00      	nop
 8003540:	f7ff ffde 	bl	8003500 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	429a      	cmp	r2, r3
 800354e:	d8f7      	bhi.n	8003540 <HAL_Delay+0x28>
  {
  }
}
 8003550:	bf00      	nop
 8003552:	bf00      	nop
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000018 	.word	0x20000018

08003560 <__NVIC_SetPriorityGrouping>:
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003570:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800357c:	4013      	ands	r3, r2
 800357e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800358c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003592:	4a04      	ldr	r2, [pc, #16]	; (80035a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	60d3      	str	r3, [r2, #12]
}
 8003598:	bf00      	nop
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	e000ed00 	.word	0xe000ed00

080035a8 <__NVIC_GetPriorityGrouping>:
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035ac:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <__NVIC_GetPriorityGrouping+0x18>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	0a1b      	lsrs	r3, r3, #8
 80035b2:	f003 0307 	and.w	r3, r3, #7
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	e000ed00 	.word	0xe000ed00

080035c4 <__NVIC_EnableIRQ>:
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	db0b      	blt.n	80035ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	f003 021f 	and.w	r2, r3, #31
 80035dc:	4907      	ldr	r1, [pc, #28]	; (80035fc <__NVIC_EnableIRQ+0x38>)
 80035de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	2001      	movs	r0, #1
 80035e6:	fa00 f202 	lsl.w	r2, r0, r2
 80035ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	e000e100 	.word	0xe000e100

08003600 <__NVIC_DisableIRQ>:
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800360a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360e:	2b00      	cmp	r3, #0
 8003610:	db12      	blt.n	8003638 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	f003 021f 	and.w	r2, r3, #31
 8003618:	490a      	ldr	r1, [pc, #40]	; (8003644 <__NVIC_DisableIRQ+0x44>)
 800361a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	2001      	movs	r0, #1
 8003622:	fa00 f202 	lsl.w	r2, r0, r2
 8003626:	3320      	adds	r3, #32
 8003628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800362c:	f3bf 8f4f 	dsb	sy
}
 8003630:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003632:	f3bf 8f6f 	isb	sy
}
 8003636:	bf00      	nop
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	e000e100 	.word	0xe000e100

08003648 <__NVIC_SetPriority>:
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	6039      	str	r1, [r7, #0]
 8003652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003658:	2b00      	cmp	r3, #0
 800365a:	db0a      	blt.n	8003672 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	b2da      	uxtb	r2, r3
 8003660:	490c      	ldr	r1, [pc, #48]	; (8003694 <__NVIC_SetPriority+0x4c>)
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	0112      	lsls	r2, r2, #4
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	440b      	add	r3, r1
 800366c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003670:	e00a      	b.n	8003688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	b2da      	uxtb	r2, r3
 8003676:	4908      	ldr	r1, [pc, #32]	; (8003698 <__NVIC_SetPriority+0x50>)
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	3b04      	subs	r3, #4
 8003680:	0112      	lsls	r2, r2, #4
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	440b      	add	r3, r1
 8003686:	761a      	strb	r2, [r3, #24]
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	e000e100 	.word	0xe000e100
 8003698:	e000ed00 	.word	0xe000ed00

0800369c <NVIC_EncodePriority>:
{
 800369c:	b480      	push	{r7}
 800369e:	b089      	sub	sp, #36	; 0x24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f1c3 0307 	rsb	r3, r3, #7
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	bf28      	it	cs
 80036ba:	2304      	movcs	r3, #4
 80036bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	3304      	adds	r3, #4
 80036c2:	2b06      	cmp	r3, #6
 80036c4:	d902      	bls.n	80036cc <NVIC_EncodePriority+0x30>
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	3b03      	subs	r3, #3
 80036ca:	e000      	b.n	80036ce <NVIC_EncodePriority+0x32>
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d0:	f04f 32ff 	mov.w	r2, #4294967295
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43da      	mvns	r2, r3
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	401a      	ands	r2, r3
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036e4:	f04f 31ff 	mov.w	r1, #4294967295
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	fa01 f303 	lsl.w	r3, r1, r3
 80036ee:	43d9      	mvns	r1, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f4:	4313      	orrs	r3, r2
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3724      	adds	r7, #36	; 0x24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff ff28 	bl	8003560 <__NVIC_SetPriorityGrouping>
}
 8003710:	bf00      	nop
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800372a:	f7ff ff3d 	bl	80035a8 <__NVIC_GetPriorityGrouping>
 800372e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	6978      	ldr	r0, [r7, #20]
 8003736:	f7ff ffb1 	bl	800369c <NVIC_EncodePriority>
 800373a:	4602      	mov	r2, r0
 800373c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003740:	4611      	mov	r1, r2
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff ff80 	bl	8003648 <__NVIC_SetPriority>
}
 8003748:	bf00      	nop
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800375a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff ff30 	bl	80035c4 <__NVIC_EnableIRQ>
}
 8003764:	bf00      	nop
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff ff40 	bl	8003600 <__NVIC_DisableIRQ>
}
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e0ac      	b.n	80038f4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 f8b2 	bl	8003908 <DFSDM_GetChannelFromInstance>
 80037a4:	4603      	mov	r3, r0
 80037a6:	4a55      	ldr	r2, [pc, #340]	; (80038fc <HAL_DFSDM_ChannelInit+0x174>)
 80037a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e09f      	b.n	80038f4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff f975 	bl	8002aa4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80037ba:	4b51      	ldr	r3, [pc, #324]	; (8003900 <HAL_DFSDM_ChannelInit+0x178>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3301      	adds	r3, #1
 80037c0:	4a4f      	ldr	r2, [pc, #316]	; (8003900 <HAL_DFSDM_ChannelInit+0x178>)
 80037c2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80037c4:	4b4e      	ldr	r3, [pc, #312]	; (8003900 <HAL_DFSDM_ChannelInit+0x178>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d125      	bne.n	8003818 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80037cc:	4b4d      	ldr	r3, [pc, #308]	; (8003904 <HAL_DFSDM_ChannelInit+0x17c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a4c      	ldr	r2, [pc, #304]	; (8003904 <HAL_DFSDM_ChannelInit+0x17c>)
 80037d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037d6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80037d8:	4b4a      	ldr	r3, [pc, #296]	; (8003904 <HAL_DFSDM_ChannelInit+0x17c>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	4948      	ldr	r1, [pc, #288]	; (8003904 <HAL_DFSDM_ChannelInit+0x17c>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80037e6:	4b47      	ldr	r3, [pc, #284]	; (8003904 <HAL_DFSDM_ChannelInit+0x17c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a46      	ldr	r2, [pc, #280]	; (8003904 <HAL_DFSDM_ChannelInit+0x17c>)
 80037ec:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80037f0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	791b      	ldrb	r3, [r3, #4]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d108      	bne.n	800380c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80037fa:	4b42      	ldr	r3, [pc, #264]	; (8003904 <HAL_DFSDM_ChannelInit+0x17c>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	3b01      	subs	r3, #1
 8003804:	041b      	lsls	r3, r3, #16
 8003806:	493f      	ldr	r1, [pc, #252]	; (8003904 <HAL_DFSDM_ChannelInit+0x17c>)
 8003808:	4313      	orrs	r3, r2
 800380a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800380c:	4b3d      	ldr	r3, [pc, #244]	; (8003904 <HAL_DFSDM_ChannelInit+0x17c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a3c      	ldr	r2, [pc, #240]	; (8003904 <HAL_DFSDM_ChannelInit+0x17c>)
 8003812:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003816:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003826:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6819      	ldr	r1, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003836:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800383c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 020f 	bic.w	r2, r2, #15
 8003854:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6819      	ldr	r1, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800387c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6899      	ldr	r1, [r3, #8]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	3b01      	subs	r3, #1
 800388e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f002 0207 	and.w	r2, r2, #7
 80038a8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6859      	ldr	r1, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80038bc:	431a      	orrs	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038d4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 f810 	bl	8003908 <DFSDM_GetChannelFromInstance>
 80038e8:	4602      	mov	r2, r0
 80038ea:	4904      	ldr	r1, [pc, #16]	; (80038fc <HAL_DFSDM_ChannelInit+0x174>)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20000d84 	.word	0x20000d84
 8003900:	20000d80 	.word	0x20000d80
 8003904:	40016000 	.word	0x40016000

08003908 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a1c      	ldr	r2, [pc, #112]	; (8003984 <DFSDM_GetChannelFromInstance+0x7c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d102      	bne.n	800391e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	e02b      	b.n	8003976 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a19      	ldr	r2, [pc, #100]	; (8003988 <DFSDM_GetChannelFromInstance+0x80>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d102      	bne.n	800392c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003926:	2301      	movs	r3, #1
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	e024      	b.n	8003976 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a17      	ldr	r2, [pc, #92]	; (800398c <DFSDM_GetChannelFromInstance+0x84>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d102      	bne.n	800393a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003934:	2302      	movs	r3, #2
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	e01d      	b.n	8003976 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a14      	ldr	r2, [pc, #80]	; (8003990 <DFSDM_GetChannelFromInstance+0x88>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d102      	bne.n	8003948 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003942:	2304      	movs	r3, #4
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	e016      	b.n	8003976 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a12      	ldr	r2, [pc, #72]	; (8003994 <DFSDM_GetChannelFromInstance+0x8c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d102      	bne.n	8003956 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003950:	2305      	movs	r3, #5
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	e00f      	b.n	8003976 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a0f      	ldr	r2, [pc, #60]	; (8003998 <DFSDM_GetChannelFromInstance+0x90>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d102      	bne.n	8003964 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800395e:	2306      	movs	r3, #6
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	e008      	b.n	8003976 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a0d      	ldr	r2, [pc, #52]	; (800399c <DFSDM_GetChannelFromInstance+0x94>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d102      	bne.n	8003972 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800396c:	2307      	movs	r3, #7
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	e001      	b.n	8003976 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003972:	2303      	movs	r3, #3
 8003974:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003976:	68fb      	ldr	r3, [r7, #12]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	40016000 	.word	0x40016000
 8003988:	40016020 	.word	0x40016020
 800398c:	40016040 	.word	0x40016040
 8003990:	40016080 	.word	0x40016080
 8003994:	400160a0 	.word	0x400160a0
 8003998:	400160c0 	.word	0x400160c0
 800399c:	400160e0 	.word	0x400160e0

080039a0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d008      	beq.n	80039ca <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2204      	movs	r2, #4
 80039bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e022      	b.n	8003a10 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 020e 	bic.w	r2, r2, #14
 80039d8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0201 	bic.w	r2, r2, #1
 80039e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ee:	f003 021c 	and.w	r2, r3, #28
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	2101      	movs	r1, #1
 80039f8:	fa01 f202 	lsl.w	r2, r1, r2
 80039fc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d005      	beq.n	8003a40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2204      	movs	r2, #4
 8003a38:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
 8003a3e:	e029      	b.n	8003a94 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 020e 	bic.w	r2, r2, #14
 8003a4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0201 	bic.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a64:	f003 021c 	and.w	r2, r3, #28
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a72:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	4798      	blx	r3
    }
  }
  return status;
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aae:	e17f      	b.n	8003db0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8003abc:	4013      	ands	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 8171 	beq.w	8003daa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d00b      	beq.n	8003ae8 <HAL_GPIO_Init+0x48>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d007      	beq.n	8003ae8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003adc:	2b11      	cmp	r3, #17
 8003ade:	d003      	beq.n	8003ae8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b12      	cmp	r3, #18
 8003ae6:	d130      	bne.n	8003b4a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	2203      	movs	r2, #3
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	43db      	mvns	r3, r3
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4013      	ands	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b1e:	2201      	movs	r2, #1
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	43db      	mvns	r3, r3
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	091b      	lsrs	r3, r3, #4
 8003b34:	f003 0201 	and.w	r2, r3, #1
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d118      	bne.n	8003b88 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	43db      	mvns	r3, r3
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	08db      	lsrs	r3, r3, #3
 8003b72:	f003 0201 	and.w	r2, r3, #1
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	2203      	movs	r2, #3
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d003      	beq.n	8003bc8 <HAL_GPIO_Init+0x128>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b12      	cmp	r3, #18
 8003bc6:	d123      	bne.n	8003c10 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	08da      	lsrs	r2, r3, #3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3208      	adds	r2, #8
 8003bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	220f      	movs	r2, #15
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	43db      	mvns	r3, r3
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	4013      	ands	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	08da      	lsrs	r2, r3, #3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3208      	adds	r2, #8
 8003c0a:	6939      	ldr	r1, [r7, #16]
 8003c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	2203      	movs	r2, #3
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	43db      	mvns	r3, r3
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4013      	ands	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 0203 	and.w	r2, r3, #3
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80ac 	beq.w	8003daa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c52:	4b5f      	ldr	r3, [pc, #380]	; (8003dd0 <HAL_GPIO_Init+0x330>)
 8003c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c56:	4a5e      	ldr	r2, [pc, #376]	; (8003dd0 <HAL_GPIO_Init+0x330>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	6613      	str	r3, [r2, #96]	; 0x60
 8003c5e:	4b5c      	ldr	r3, [pc, #368]	; (8003dd0 <HAL_GPIO_Init+0x330>)
 8003c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	60bb      	str	r3, [r7, #8]
 8003c68:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c6a:	4a5a      	ldr	r2, [pc, #360]	; (8003dd4 <HAL_GPIO_Init+0x334>)
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	089b      	lsrs	r3, r3, #2
 8003c70:	3302      	adds	r3, #2
 8003c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c76:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	220f      	movs	r2, #15
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43db      	mvns	r3, r3
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c94:	d025      	beq.n	8003ce2 <HAL_GPIO_Init+0x242>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a4f      	ldr	r2, [pc, #316]	; (8003dd8 <HAL_GPIO_Init+0x338>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d01f      	beq.n	8003cde <HAL_GPIO_Init+0x23e>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a4e      	ldr	r2, [pc, #312]	; (8003ddc <HAL_GPIO_Init+0x33c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d019      	beq.n	8003cda <HAL_GPIO_Init+0x23a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a4d      	ldr	r2, [pc, #308]	; (8003de0 <HAL_GPIO_Init+0x340>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d013      	beq.n	8003cd6 <HAL_GPIO_Init+0x236>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a4c      	ldr	r2, [pc, #304]	; (8003de4 <HAL_GPIO_Init+0x344>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00d      	beq.n	8003cd2 <HAL_GPIO_Init+0x232>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a4b      	ldr	r2, [pc, #300]	; (8003de8 <HAL_GPIO_Init+0x348>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d007      	beq.n	8003cce <HAL_GPIO_Init+0x22e>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a4a      	ldr	r2, [pc, #296]	; (8003dec <HAL_GPIO_Init+0x34c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d101      	bne.n	8003cca <HAL_GPIO_Init+0x22a>
 8003cc6:	2306      	movs	r3, #6
 8003cc8:	e00c      	b.n	8003ce4 <HAL_GPIO_Init+0x244>
 8003cca:	2307      	movs	r3, #7
 8003ccc:	e00a      	b.n	8003ce4 <HAL_GPIO_Init+0x244>
 8003cce:	2305      	movs	r3, #5
 8003cd0:	e008      	b.n	8003ce4 <HAL_GPIO_Init+0x244>
 8003cd2:	2304      	movs	r3, #4
 8003cd4:	e006      	b.n	8003ce4 <HAL_GPIO_Init+0x244>
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e004      	b.n	8003ce4 <HAL_GPIO_Init+0x244>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e002      	b.n	8003ce4 <HAL_GPIO_Init+0x244>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <HAL_GPIO_Init+0x244>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	f002 0203 	and.w	r2, r2, #3
 8003cea:	0092      	lsls	r2, r2, #2
 8003cec:	4093      	lsls	r3, r2
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003cf4:	4937      	ldr	r1, [pc, #220]	; (8003dd4 <HAL_GPIO_Init+0x334>)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	089b      	lsrs	r3, r3, #2
 8003cfa:	3302      	adds	r3, #2
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003d02:	4b3b      	ldr	r3, [pc, #236]	; (8003df0 <HAL_GPIO_Init+0x350>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d26:	4a32      	ldr	r2, [pc, #200]	; (8003df0 <HAL_GPIO_Init+0x350>)
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003d2c:	4b30      	ldr	r3, [pc, #192]	; (8003df0 <HAL_GPIO_Init+0x350>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	43db      	mvns	r3, r3
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d50:	4a27      	ldr	r2, [pc, #156]	; (8003df0 <HAL_GPIO_Init+0x350>)
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d56:	4b26      	ldr	r3, [pc, #152]	; (8003df0 <HAL_GPIO_Init+0x350>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4013      	ands	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d7a:	4a1d      	ldr	r2, [pc, #116]	; (8003df0 <HAL_GPIO_Init+0x350>)
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d80:	4b1b      	ldr	r3, [pc, #108]	; (8003df0 <HAL_GPIO_Init+0x350>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003da4:	4a12      	ldr	r2, [pc, #72]	; (8003df0 <HAL_GPIO_Init+0x350>)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	3301      	adds	r3, #1
 8003dae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f47f ae78 	bne.w	8003ab0 <HAL_GPIO_Init+0x10>
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	bf00      	nop
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40010000 	.word	0x40010000
 8003dd8:	48000400 	.word	0x48000400
 8003ddc:	48000800 	.word	0x48000800
 8003de0:	48000c00 	.word	0x48000c00
 8003de4:	48001000 	.word	0x48001000
 8003de8:	48001400 	.word	0x48001400
 8003dec:	48001800 	.word	0x48001800
 8003df0:	40010400 	.word	0x40010400

08003df4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003e02:	e0cd      	b.n	8003fa0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003e04:	2201      	movs	r2, #1
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 80c0 	beq.w	8003f9a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003e1a:	4a68      	ldr	r2, [pc, #416]	; (8003fbc <HAL_GPIO_DeInit+0x1c8>)
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	089b      	lsrs	r3, r3, #2
 8003e20:	3302      	adds	r3, #2
 8003e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e26:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	220f      	movs	r2, #15
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e42:	d025      	beq.n	8003e90 <HAL_GPIO_DeInit+0x9c>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a5e      	ldr	r2, [pc, #376]	; (8003fc0 <HAL_GPIO_DeInit+0x1cc>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d01f      	beq.n	8003e8c <HAL_GPIO_DeInit+0x98>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a5d      	ldr	r2, [pc, #372]	; (8003fc4 <HAL_GPIO_DeInit+0x1d0>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d019      	beq.n	8003e88 <HAL_GPIO_DeInit+0x94>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a5c      	ldr	r2, [pc, #368]	; (8003fc8 <HAL_GPIO_DeInit+0x1d4>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d013      	beq.n	8003e84 <HAL_GPIO_DeInit+0x90>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a5b      	ldr	r2, [pc, #364]	; (8003fcc <HAL_GPIO_DeInit+0x1d8>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d00d      	beq.n	8003e80 <HAL_GPIO_DeInit+0x8c>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a5a      	ldr	r2, [pc, #360]	; (8003fd0 <HAL_GPIO_DeInit+0x1dc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d007      	beq.n	8003e7c <HAL_GPIO_DeInit+0x88>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a59      	ldr	r2, [pc, #356]	; (8003fd4 <HAL_GPIO_DeInit+0x1e0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d101      	bne.n	8003e78 <HAL_GPIO_DeInit+0x84>
 8003e74:	2306      	movs	r3, #6
 8003e76:	e00c      	b.n	8003e92 <HAL_GPIO_DeInit+0x9e>
 8003e78:	2307      	movs	r3, #7
 8003e7a:	e00a      	b.n	8003e92 <HAL_GPIO_DeInit+0x9e>
 8003e7c:	2305      	movs	r3, #5
 8003e7e:	e008      	b.n	8003e92 <HAL_GPIO_DeInit+0x9e>
 8003e80:	2304      	movs	r3, #4
 8003e82:	e006      	b.n	8003e92 <HAL_GPIO_DeInit+0x9e>
 8003e84:	2303      	movs	r3, #3
 8003e86:	e004      	b.n	8003e92 <HAL_GPIO_DeInit+0x9e>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e002      	b.n	8003e92 <HAL_GPIO_DeInit+0x9e>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e000      	b.n	8003e92 <HAL_GPIO_DeInit+0x9e>
 8003e90:	2300      	movs	r3, #0
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	f002 0203 	and.w	r2, r2, #3
 8003e98:	0092      	lsls	r2, r2, #2
 8003e9a:	4093      	lsls	r3, r2
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d132      	bne.n	8003f08 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003ea2:	4b4d      	ldr	r3, [pc, #308]	; (8003fd8 <HAL_GPIO_DeInit+0x1e4>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	494b      	ldr	r1, [pc, #300]	; (8003fd8 <HAL_GPIO_DeInit+0x1e4>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003eb0:	4b49      	ldr	r3, [pc, #292]	; (8003fd8 <HAL_GPIO_DeInit+0x1e4>)
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	4947      	ldr	r1, [pc, #284]	; (8003fd8 <HAL_GPIO_DeInit+0x1e4>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003ebe:	4b46      	ldr	r3, [pc, #280]	; (8003fd8 <HAL_GPIO_DeInit+0x1e4>)
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	4944      	ldr	r1, [pc, #272]	; (8003fd8 <HAL_GPIO_DeInit+0x1e4>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003ecc:	4b42      	ldr	r3, [pc, #264]	; (8003fd8 <HAL_GPIO_DeInit+0x1e4>)
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	4940      	ldr	r1, [pc, #256]	; (8003fd8 <HAL_GPIO_DeInit+0x1e4>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f003 0303 	and.w	r3, r3, #3
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	220f      	movs	r2, #15
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003eea:	4a34      	ldr	r2, [pc, #208]	; (8003fbc <HAL_GPIO_DeInit+0x1c8>)
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	089b      	lsrs	r3, r3, #2
 8003ef0:	3302      	adds	r3, #2
 8003ef2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	43da      	mvns	r2, r3
 8003efa:	4830      	ldr	r0, [pc, #192]	; (8003fbc <HAL_GPIO_DeInit+0x1c8>)
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	089b      	lsrs	r3, r3, #2
 8003f00:	400a      	ands	r2, r1
 8003f02:	3302      	adds	r3, #2
 8003f04:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	2103      	movs	r1, #3
 8003f12:	fa01 f303 	lsl.w	r3, r1, r3
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	08da      	lsrs	r2, r3, #3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3208      	adds	r2, #8
 8003f24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	220f      	movs	r2, #15
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	43db      	mvns	r3, r3
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	08d2      	lsrs	r2, r2, #3
 8003f3c:	4019      	ands	r1, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3208      	adds	r2, #8
 8003f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	2103      	movs	r1, #3
 8003f50:	fa01 f303 	lsl.w	r3, r1, r3
 8003f54:	43db      	mvns	r3, r3
 8003f56:	401a      	ands	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	2101      	movs	r1, #1
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	fa01 f303 	lsl.w	r3, r1, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	401a      	ands	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68da      	ldr	r2, [r3, #12]
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	2103      	movs	r1, #3
 8003f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	401a      	ands	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f92:	43db      	mvns	r3, r3
 8003f94:	401a      	ands	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f47f af2b 	bne.w	8003e04 <HAL_GPIO_DeInit+0x10>
  }
}
 8003fae:	bf00      	nop
 8003fb0:	bf00      	nop
 8003fb2:	371c      	adds	r7, #28
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	40010000 	.word	0x40010000
 8003fc0:	48000400 	.word	0x48000400
 8003fc4:	48000800 	.word	0x48000800
 8003fc8:	48000c00 	.word	0x48000c00
 8003fcc:	48001000 	.word	0x48001000
 8003fd0:	48001400 	.word	0x48001400
 8003fd4:	48001800 	.word	0x48001800
 8003fd8:	40010400 	.word	0x40010400

08003fdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	887b      	ldrh	r3, [r7, #2]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	73fb      	strb	r3, [r7, #15]
 8003ff8:	e001      	b.n	8003ffe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	807b      	strh	r3, [r7, #2]
 8004018:	4613      	mov	r3, r2
 800401a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800401c:	787b      	ldrb	r3, [r7, #1]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004022:	887a      	ldrh	r2, [r7, #2]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004028:	e002      	b.n	8004030 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800402a:	887a      	ldrh	r2, [r7, #2]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	4603      	mov	r3, r0
 8004044:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004046:	4b08      	ldr	r3, [pc, #32]	; (8004068 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004048:	695a      	ldr	r2, [r3, #20]
 800404a:	88fb      	ldrh	r3, [r7, #6]
 800404c:	4013      	ands	r3, r2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d006      	beq.n	8004060 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004052:	4a05      	ldr	r2, [pc, #20]	; (8004068 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004054:	88fb      	ldrh	r3, [r7, #6]
 8004056:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004058:	88fb      	ldrh	r3, [r7, #6]
 800405a:	4618      	mov	r0, r3
 800405c:	f7fd fc9e 	bl	800199c <HAL_GPIO_EXTI_Callback>
  }
}
 8004060:	bf00      	nop
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40010400 	.word	0x40010400

0800406c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e081      	b.n	8004182 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d106      	bne.n	8004098 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fe fd6a 	bl	8002b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2224      	movs	r2, #36	; 0x24
 800409c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0201 	bic.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d107      	bne.n	80040e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040e2:	609a      	str	r2, [r3, #8]
 80040e4:	e006      	b.n	80040f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80040f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d104      	bne.n	8004106 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004104:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6812      	ldr	r2, [r2, #0]
 8004110:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004118:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004128:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691a      	ldr	r2, [r3, #16]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	ea42 0103 	orr.w	r1, r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	021a      	lsls	r2, r3, #8
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69d9      	ldr	r1, [r3, #28]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a1a      	ldr	r2, [r3, #32]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0201 	orr.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b082      	sub	sp, #8
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e021      	b.n	80041e0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2224      	movs	r2, #36	; 0x24
 80041a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0201 	bic.w	r2, r2, #1
 80041b2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7fe fd37 	bl	8002c28 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b088      	sub	sp, #32
 80041ec:	af02      	add	r7, sp, #8
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	4608      	mov	r0, r1
 80041f2:	4611      	mov	r1, r2
 80041f4:	461a      	mov	r2, r3
 80041f6:	4603      	mov	r3, r0
 80041f8:	817b      	strh	r3, [r7, #10]
 80041fa:	460b      	mov	r3, r1
 80041fc:	813b      	strh	r3, [r7, #8]
 80041fe:	4613      	mov	r3, r2
 8004200:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b20      	cmp	r3, #32
 800420c:	f040 80f9 	bne.w	8004402 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <HAL_I2C_Mem_Write+0x34>
 8004216:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004218:	2b00      	cmp	r3, #0
 800421a:	d105      	bne.n	8004228 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004222:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e0ed      	b.n	8004404 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_I2C_Mem_Write+0x4e>
 8004232:	2302      	movs	r3, #2
 8004234:	e0e6      	b.n	8004404 <HAL_I2C_Mem_Write+0x21c>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800423e:	f7ff f95f 	bl	8003500 <HAL_GetTick>
 8004242:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	2319      	movs	r3, #25
 800424a:	2201      	movs	r2, #1
 800424c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 fac3 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e0d1      	b.n	8004404 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2221      	movs	r2, #33	; 0x21
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2240      	movs	r2, #64	; 0x40
 800426c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a3a      	ldr	r2, [r7, #32]
 800427a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004280:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004288:	88f8      	ldrh	r0, [r7, #6]
 800428a:	893a      	ldrh	r2, [r7, #8]
 800428c:	8979      	ldrh	r1, [r7, #10]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	9301      	str	r3, [sp, #4]
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	4603      	mov	r3, r0
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f9d3 	bl	8004644 <I2C_RequestMemoryWrite>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e0a9      	b.n	8004404 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2bff      	cmp	r3, #255	; 0xff
 80042b8:	d90e      	bls.n	80042d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	22ff      	movs	r2, #255	; 0xff
 80042be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	8979      	ldrh	r1, [r7, #10]
 80042c8:	2300      	movs	r3, #0
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 fba5 	bl	8004a20 <I2C_TransferConfig>
 80042d6:	e00f      	b.n	80042f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	8979      	ldrh	r1, [r7, #10]
 80042ea:	2300      	movs	r3, #0
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 fb94 	bl	8004a20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 faad 	bl	800485c <I2C_WaitOnTXISFlagUntilTimeout>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e07b      	b.n	8004404 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	781a      	ldrb	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d034      	beq.n	80043b0 <HAL_I2C_Mem_Write+0x1c8>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434a:	2b00      	cmp	r3, #0
 800434c:	d130      	bne.n	80043b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004354:	2200      	movs	r2, #0
 8004356:	2180      	movs	r1, #128	; 0x80
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 fa3f 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e04d      	b.n	8004404 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436c:	b29b      	uxth	r3, r3
 800436e:	2bff      	cmp	r3, #255	; 0xff
 8004370:	d90e      	bls.n	8004390 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	22ff      	movs	r2, #255	; 0xff
 8004376:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437c:	b2da      	uxtb	r2, r3
 800437e:	8979      	ldrh	r1, [r7, #10]
 8004380:	2300      	movs	r3, #0
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 fb49 	bl	8004a20 <I2C_TransferConfig>
 800438e:	e00f      	b.n	80043b0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	8979      	ldrh	r1, [r7, #10]
 80043a2:	2300      	movs	r3, #0
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 fb38 	bl	8004a20 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d19e      	bne.n	80042f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 fa8c 	bl	80048dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e01a      	b.n	8004404 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2220      	movs	r2, #32
 80043d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6859      	ldr	r1, [r3, #4]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	4b0a      	ldr	r3, [pc, #40]	; (800440c <HAL_I2C_Mem_Write+0x224>)
 80043e2:	400b      	ands	r3, r1
 80043e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	e000      	b.n	8004404 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004402:	2302      	movs	r3, #2
  }
}
 8004404:	4618      	mov	r0, r3
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	fe00e800 	.word	0xfe00e800

08004410 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af02      	add	r7, sp, #8
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	4608      	mov	r0, r1
 800441a:	4611      	mov	r1, r2
 800441c:	461a      	mov	r2, r3
 800441e:	4603      	mov	r3, r0
 8004420:	817b      	strh	r3, [r7, #10]
 8004422:	460b      	mov	r3, r1
 8004424:	813b      	strh	r3, [r7, #8]
 8004426:	4613      	mov	r3, r2
 8004428:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b20      	cmp	r3, #32
 8004434:	f040 80fd 	bne.w	8004632 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <HAL_I2C_Mem_Read+0x34>
 800443e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004440:	2b00      	cmp	r3, #0
 8004442:	d105      	bne.n	8004450 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800444a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e0f1      	b.n	8004634 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_I2C_Mem_Read+0x4e>
 800445a:	2302      	movs	r3, #2
 800445c:	e0ea      	b.n	8004634 <HAL_I2C_Mem_Read+0x224>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004466:	f7ff f84b 	bl	8003500 <HAL_GetTick>
 800446a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	2319      	movs	r3, #25
 8004472:	2201      	movs	r2, #1
 8004474:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 f9af 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e0d5      	b.n	8004634 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2222      	movs	r2, #34	; 0x22
 800448c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2240      	movs	r2, #64	; 0x40
 8004494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a3a      	ldr	r2, [r7, #32]
 80044a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044b0:	88f8      	ldrh	r0, [r7, #6]
 80044b2:	893a      	ldrh	r2, [r7, #8]
 80044b4:	8979      	ldrh	r1, [r7, #10]
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	9301      	str	r3, [sp, #4]
 80044ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	4603      	mov	r3, r0
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 f913 	bl	80046ec <I2C_RequestMemoryRead>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0ad      	b.n	8004634 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2bff      	cmp	r3, #255	; 0xff
 80044e0:	d90e      	bls.n	8004500 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	22ff      	movs	r2, #255	; 0xff
 80044e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	8979      	ldrh	r1, [r7, #10]
 80044f0:	4b52      	ldr	r3, [pc, #328]	; (800463c <HAL_I2C_Mem_Read+0x22c>)
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 fa91 	bl	8004a20 <I2C_TransferConfig>
 80044fe:	e00f      	b.n	8004520 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004504:	b29a      	uxth	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450e:	b2da      	uxtb	r2, r3
 8004510:	8979      	ldrh	r1, [r7, #10]
 8004512:	4b4a      	ldr	r3, [pc, #296]	; (800463c <HAL_I2C_Mem_Read+0x22c>)
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 fa80 	bl	8004a20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004526:	2200      	movs	r2, #0
 8004528:	2104      	movs	r1, #4
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 f956 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e07c      	b.n	8004634 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004562:	b29b      	uxth	r3, r3
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d034      	beq.n	80045e0 <HAL_I2C_Mem_Read+0x1d0>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800457a:	2b00      	cmp	r3, #0
 800457c:	d130      	bne.n	80045e0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004584:	2200      	movs	r2, #0
 8004586:	2180      	movs	r1, #128	; 0x80
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f927 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e04d      	b.n	8004634 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459c:	b29b      	uxth	r3, r3
 800459e:	2bff      	cmp	r3, #255	; 0xff
 80045a0:	d90e      	bls.n	80045c0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	22ff      	movs	r2, #255	; 0xff
 80045a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	8979      	ldrh	r1, [r7, #10]
 80045b0:	2300      	movs	r3, #0
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 fa31 	bl	8004a20 <I2C_TransferConfig>
 80045be:	e00f      	b.n	80045e0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	8979      	ldrh	r1, [r7, #10]
 80045d2:	2300      	movs	r3, #0
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 fa20 	bl	8004a20 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d19a      	bne.n	8004520 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 f974 	bl	80048dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e01a      	b.n	8004634 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2220      	movs	r2, #32
 8004604:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6859      	ldr	r1, [r3, #4]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <HAL_I2C_Mem_Read+0x230>)
 8004612:	400b      	ands	r3, r1
 8004614:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	e000      	b.n	8004634 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004632:	2302      	movs	r3, #2
  }
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	80002400 	.word	0x80002400
 8004640:	fe00e800 	.word	0xfe00e800

08004644 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af02      	add	r7, sp, #8
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	4608      	mov	r0, r1
 800464e:	4611      	mov	r1, r2
 8004650:	461a      	mov	r2, r3
 8004652:	4603      	mov	r3, r0
 8004654:	817b      	strh	r3, [r7, #10]
 8004656:	460b      	mov	r3, r1
 8004658:	813b      	strh	r3, [r7, #8]
 800465a:	4613      	mov	r3, r2
 800465c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800465e:	88fb      	ldrh	r3, [r7, #6]
 8004660:	b2da      	uxtb	r2, r3
 8004662:	8979      	ldrh	r1, [r7, #10]
 8004664:	4b20      	ldr	r3, [pc, #128]	; (80046e8 <I2C_RequestMemoryWrite+0xa4>)
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 f9d7 	bl	8004a20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004672:	69fa      	ldr	r2, [r7, #28]
 8004674:	69b9      	ldr	r1, [r7, #24]
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 f8f0 	bl	800485c <I2C_WaitOnTXISFlagUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e02c      	b.n	80046e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004686:	88fb      	ldrh	r3, [r7, #6]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d105      	bne.n	8004698 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800468c:	893b      	ldrh	r3, [r7, #8]
 800468e:	b2da      	uxtb	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	629a      	str	r2, [r3, #40]	; 0x28
 8004696:	e015      	b.n	80046c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004698:	893b      	ldrh	r3, [r7, #8]
 800469a:	0a1b      	lsrs	r3, r3, #8
 800469c:	b29b      	uxth	r3, r3
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	69b9      	ldr	r1, [r7, #24]
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 f8d6 	bl	800485c <I2C_WaitOnTXISFlagUntilTimeout>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e012      	b.n	80046e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046ba:	893b      	ldrh	r3, [r7, #8]
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	2200      	movs	r2, #0
 80046cc:	2180      	movs	r1, #128	; 0x80
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f884 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	80002000 	.word	0x80002000

080046ec <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	4608      	mov	r0, r1
 80046f6:	4611      	mov	r1, r2
 80046f8:	461a      	mov	r2, r3
 80046fa:	4603      	mov	r3, r0
 80046fc:	817b      	strh	r3, [r7, #10]
 80046fe:	460b      	mov	r3, r1
 8004700:	813b      	strh	r3, [r7, #8]
 8004702:	4613      	mov	r3, r2
 8004704:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004706:	88fb      	ldrh	r3, [r7, #6]
 8004708:	b2da      	uxtb	r2, r3
 800470a:	8979      	ldrh	r1, [r7, #10]
 800470c:	4b20      	ldr	r3, [pc, #128]	; (8004790 <I2C_RequestMemoryRead+0xa4>)
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	2300      	movs	r3, #0
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 f984 	bl	8004a20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	69b9      	ldr	r1, [r7, #24]
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 f89d 	bl	800485c <I2C_WaitOnTXISFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e02c      	b.n	8004786 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800472c:	88fb      	ldrh	r3, [r7, #6]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d105      	bne.n	800473e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004732:	893b      	ldrh	r3, [r7, #8]
 8004734:	b2da      	uxtb	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	629a      	str	r2, [r3, #40]	; 0x28
 800473c:	e015      	b.n	800476a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800473e:	893b      	ldrh	r3, [r7, #8]
 8004740:	0a1b      	lsrs	r3, r3, #8
 8004742:	b29b      	uxth	r3, r3
 8004744:	b2da      	uxtb	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800474c:	69fa      	ldr	r2, [r7, #28]
 800474e:	69b9      	ldr	r1, [r7, #24]
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 f883 	bl	800485c <I2C_WaitOnTXISFlagUntilTimeout>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e012      	b.n	8004786 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004760:	893b      	ldrh	r3, [r7, #8]
 8004762:	b2da      	uxtb	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	2200      	movs	r2, #0
 8004772:	2140      	movs	r1, #64	; 0x40
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f831 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e000      	b.n	8004786 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	80002000 	.word	0x80002000

08004794 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d103      	bne.n	80047b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2200      	movs	r2, #0
 80047b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d007      	beq.n	80047d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699a      	ldr	r2, [r3, #24]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0201 	orr.w	r2, r2, #1
 80047ce:	619a      	str	r2, [r3, #24]
  }
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	4613      	mov	r3, r2
 80047ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ec:	e022      	b.n	8004834 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f4:	d01e      	beq.n	8004834 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f6:	f7fe fe83 	bl	8003500 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	429a      	cmp	r2, r3
 8004804:	d302      	bcc.n	800480c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d113      	bne.n	8004834 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004810:	f043 0220 	orr.w	r2, r3, #32
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2220      	movs	r2, #32
 800481c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e00f      	b.n	8004854 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699a      	ldr	r2, [r3, #24]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	4013      	ands	r3, r2
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	429a      	cmp	r2, r3
 8004842:	bf0c      	ite	eq
 8004844:	2301      	moveq	r3, #1
 8004846:	2300      	movne	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	461a      	mov	r2, r3
 800484c:	79fb      	ldrb	r3, [r7, #7]
 800484e:	429a      	cmp	r2, r3
 8004850:	d0cd      	beq.n	80047ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004868:	e02c      	b.n	80048c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	68b9      	ldr	r1, [r7, #8]
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 f870 	bl	8004954 <I2C_IsAcknowledgeFailed>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e02a      	b.n	80048d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004884:	d01e      	beq.n	80048c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004886:	f7fe fe3b 	bl	8003500 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	429a      	cmp	r2, r3
 8004894:	d302      	bcc.n	800489c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d113      	bne.n	80048c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a0:	f043 0220 	orr.w	r2, r3, #32
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e007      	b.n	80048d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d1cb      	bne.n	800486a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048e8:	e028      	b.n	800493c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	68b9      	ldr	r1, [r7, #8]
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f830 	bl	8004954 <I2C_IsAcknowledgeFailed>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e026      	b.n	800494c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048fe:	f7fe fdff 	bl	8003500 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	429a      	cmp	r2, r3
 800490c:	d302      	bcc.n	8004914 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d113      	bne.n	800493c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004918:	f043 0220 	orr.w	r2, r3, #32
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e007      	b.n	800494c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	f003 0320 	and.w	r3, r3, #32
 8004946:	2b20      	cmp	r3, #32
 8004948:	d1cf      	bne.n	80048ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	2b10      	cmp	r3, #16
 800496c:	d151      	bne.n	8004a12 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800496e:	e022      	b.n	80049b6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004976:	d01e      	beq.n	80049b6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004978:	f7fe fdc2 	bl	8003500 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	429a      	cmp	r2, r3
 8004986:	d302      	bcc.n	800498e <I2C_IsAcknowledgeFailed+0x3a>
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d113      	bne.n	80049b6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004992:	f043 0220 	orr.w	r2, r3, #32
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2220      	movs	r2, #32
 800499e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e02e      	b.n	8004a14 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	f003 0320 	and.w	r3, r3, #32
 80049c0:	2b20      	cmp	r3, #32
 80049c2:	d1d5      	bne.n	8004970 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2210      	movs	r2, #16
 80049ca:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2220      	movs	r2, #32
 80049d2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f7ff fedd 	bl	8004794 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6859      	ldr	r1, [r3, #4]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	4b0d      	ldr	r3, [pc, #52]	; (8004a1c <I2C_IsAcknowledgeFailed+0xc8>)
 80049e6:	400b      	ands	r3, r1
 80049e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ee:	f043 0204 	orr.w	r2, r3, #4
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2220      	movs	r2, #32
 80049fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e000      	b.n	8004a14 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	fe00e800 	.word	0xfe00e800

08004a20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	607b      	str	r3, [r7, #4]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	817b      	strh	r3, [r7, #10]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	0d5b      	lsrs	r3, r3, #21
 8004a3c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004a40:	4b0d      	ldr	r3, [pc, #52]	; (8004a78 <I2C_TransferConfig+0x58>)
 8004a42:	430b      	orrs	r3, r1
 8004a44:	43db      	mvns	r3, r3
 8004a46:	ea02 0103 	and.w	r1, r2, r3
 8004a4a:	897b      	ldrh	r3, [r7, #10]
 8004a4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a50:	7a7b      	ldrb	r3, [r7, #9]
 8004a52:	041b      	lsls	r3, r3, #16
 8004a54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	431a      	orrs	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004a6a:	bf00      	nop
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	03ff63ff 	.word	0x03ff63ff

08004a7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b20      	cmp	r3, #32
 8004a90:	d138      	bne.n	8004b04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e032      	b.n	8004b06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2224      	movs	r2, #36	; 0x24
 8004aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0201 	bic.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ace:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6819      	ldr	r1, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0201 	orr.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b00:	2300      	movs	r3, #0
 8004b02:	e000      	b.n	8004b06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b04:	2302      	movs	r3, #2
  }
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b20      	cmp	r3, #32
 8004b26:	d139      	bne.n	8004b9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b32:	2302      	movs	r3, #2
 8004b34:	e033      	b.n	8004b9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2224      	movs	r2, #36	; 0x24
 8004b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0201 	bic.w	r2, r2, #1
 8004b54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	021b      	lsls	r3, r3, #8
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0201 	orr.w	r2, r2, #1
 8004b86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	e000      	b.n	8004b9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b9c:	2302      	movs	r3, #2
  }
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004baa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bac:	b08f      	sub	sp, #60	; 0x3c
 8004bae:	af0a      	add	r7, sp, #40	; 0x28
 8004bb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e116      	b.n	8004dea <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d106      	bne.n	8004bdc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7fe fa00 	bl	8002fdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2203      	movs	r2, #3
 8004be0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d102      	bne.n	8004bf6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f005 f83e 	bl	8009c7c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	603b      	str	r3, [r7, #0]
 8004c06:	687e      	ldr	r6, [r7, #4]
 8004c08:	466d      	mov	r5, sp
 8004c0a:	f106 0410 	add.w	r4, r6, #16
 8004c0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c1e:	1d33      	adds	r3, r6, #4
 8004c20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c22:	6838      	ldr	r0, [r7, #0]
 8004c24:	f004 fffe 	bl	8009c24 <USB_CoreInit>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d005      	beq.n	8004c3a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2202      	movs	r2, #2
 8004c32:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e0d7      	b.n	8004dea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2100      	movs	r1, #0
 8004c40:	4618      	mov	r0, r3
 8004c42:	f005 f82c 	bl	8009c9e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c46:	2300      	movs	r3, #0
 8004c48:	73fb      	strb	r3, [r7, #15]
 8004c4a:	e04a      	b.n	8004ce2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c4c:	7bfa      	ldrb	r2, [r7, #15]
 8004c4e:	6879      	ldr	r1, [r7, #4]
 8004c50:	4613      	mov	r3, r2
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	1a9b      	subs	r3, r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	440b      	add	r3, r1
 8004c5a:	333d      	adds	r3, #61	; 0x3d
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c60:	7bfa      	ldrb	r2, [r7, #15]
 8004c62:	6879      	ldr	r1, [r7, #4]
 8004c64:	4613      	mov	r3, r2
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	1a9b      	subs	r3, r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	333c      	adds	r3, #60	; 0x3c
 8004c70:	7bfa      	ldrb	r2, [r7, #15]
 8004c72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c74:	7bfa      	ldrb	r2, [r7, #15]
 8004c76:	7bfb      	ldrb	r3, [r7, #15]
 8004c78:	b298      	uxth	r0, r3
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	1a9b      	subs	r3, r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	3342      	adds	r3, #66	; 0x42
 8004c88:	4602      	mov	r2, r0
 8004c8a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c8c:	7bfa      	ldrb	r2, [r7, #15]
 8004c8e:	6879      	ldr	r1, [r7, #4]
 8004c90:	4613      	mov	r3, r2
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	1a9b      	subs	r3, r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	333f      	adds	r3, #63	; 0x3f
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ca0:	7bfa      	ldrb	r2, [r7, #15]
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	3344      	adds	r3, #68	; 0x44
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004cb4:	7bfa      	ldrb	r2, [r7, #15]
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	1a9b      	subs	r3, r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	3348      	adds	r3, #72	; 0x48
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004cc8:	7bfa      	ldrb	r2, [r7, #15]
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	1a9b      	subs	r3, r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	440b      	add	r3, r1
 8004cd6:	3350      	adds	r3, #80	; 0x50
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	73fb      	strb	r3, [r7, #15]
 8004ce2:	7bfa      	ldrb	r2, [r7, #15]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d3af      	bcc.n	8004c4c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cec:	2300      	movs	r3, #0
 8004cee:	73fb      	strb	r3, [r7, #15]
 8004cf0:	e044      	b.n	8004d7c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004cf2:	7bfa      	ldrb	r2, [r7, #15]
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	1a9b      	subs	r3, r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	440b      	add	r3, r1
 8004d00:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004d04:	2200      	movs	r2, #0
 8004d06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004d08:	7bfa      	ldrb	r2, [r7, #15]
 8004d0a:	6879      	ldr	r1, [r7, #4]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	1a9b      	subs	r3, r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004d1a:	7bfa      	ldrb	r2, [r7, #15]
 8004d1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d1e:	7bfa      	ldrb	r2, [r7, #15]
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004d30:	2200      	movs	r2, #0
 8004d32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d34:	7bfa      	ldrb	r2, [r7, #15]
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	1a9b      	subs	r3, r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d4a:	7bfa      	ldrb	r2, [r7, #15]
 8004d4c:	6879      	ldr	r1, [r7, #4]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	00db      	lsls	r3, r3, #3
 8004d52:	1a9b      	subs	r3, r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	440b      	add	r3, r1
 8004d58:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d60:	7bfa      	ldrb	r2, [r7, #15]
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	4613      	mov	r3, r2
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	1a9b      	subs	r3, r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	73fb      	strb	r3, [r7, #15]
 8004d7c:	7bfa      	ldrb	r2, [r7, #15]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d3b5      	bcc.n	8004cf2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	603b      	str	r3, [r7, #0]
 8004d8c:	687e      	ldr	r6, [r7, #4]
 8004d8e:	466d      	mov	r5, sp
 8004d90:	f106 0410 	add.w	r4, r6, #16
 8004d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004da0:	e885 0003 	stmia.w	r5, {r0, r1}
 8004da4:	1d33      	adds	r3, r6, #4
 8004da6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004da8:	6838      	ldr	r0, [r7, #0]
 8004daa:	f004 ffa3 	bl	8009cf4 <USB_DevInit>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d005      	beq.n	8004dc0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e014      	b.n	8004dea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d102      	bne.n	8004dde <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f80a 	bl	8004df2 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f005 f933 	bl	800a04e <USB_DevDisconnect>

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004df2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b085      	sub	sp, #20
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e24:	f043 0303 	orr.w	r3, r3, #3
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
	...

08004e3c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e40:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a04      	ldr	r2, [pc, #16]	; (8004e58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e4a:	6013      	str	r3, [r2, #0]
}
 8004e4c:	bf00      	nop
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40007000 	.word	0x40007000

08004e5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004e60:	4b04      	ldr	r3, [pc, #16]	; (8004e74 <HAL_PWREx_GetVoltageRange+0x18>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40007000 	.word	0x40007000

08004e78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e86:	d130      	bne.n	8004eea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e88:	4b23      	ldr	r3, [pc, #140]	; (8004f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e94:	d038      	beq.n	8004f08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e96:	4b20      	ldr	r3, [pc, #128]	; (8004f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e9e:	4a1e      	ldr	r2, [pc, #120]	; (8004f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ea0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ea4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ea6:	4b1d      	ldr	r3, [pc, #116]	; (8004f1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2232      	movs	r2, #50	; 0x32
 8004eac:	fb02 f303 	mul.w	r3, r2, r3
 8004eb0:	4a1b      	ldr	r2, [pc, #108]	; (8004f20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb6:	0c9b      	lsrs	r3, r3, #18
 8004eb8:	3301      	adds	r3, #1
 8004eba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ebc:	e002      	b.n	8004ec4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ec4:	4b14      	ldr	r3, [pc, #80]	; (8004f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed0:	d102      	bne.n	8004ed8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1f2      	bne.n	8004ebe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ed8:	4b0f      	ldr	r3, [pc, #60]	; (8004f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee4:	d110      	bne.n	8004f08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e00f      	b.n	8004f0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004eea:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef6:	d007      	beq.n	8004f08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ef8:	4b07      	ldr	r3, [pc, #28]	; (8004f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f00:	4a05      	ldr	r2, [pc, #20]	; (8004f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40007000 	.word	0x40007000
 8004f1c:	20000010 	.word	0x20000010
 8004f20:	431bde83 	.word	0x431bde83

08004f24 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004f28:	4b05      	ldr	r3, [pc, #20]	; (8004f40 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	4a04      	ldr	r2, [pc, #16]	; (8004f40 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004f2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f32:	6053      	str	r3, [r2, #4]
}
 8004f34:	bf00      	nop
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40007000 	.word	0x40007000

08004f44 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af02      	add	r7, sp, #8
 8004f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004f4c:	f7fe fad8 	bl	8003500 <HAL_GetTick>
 8004f50:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e063      	b.n	8005024 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10b      	bne.n	8004f80 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f7fd fe7d 	bl	8002c70 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004f76:	f241 3188 	movw	r1, #5000	; 0x1388
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f858 	bl	8005030 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	021a      	lsls	r2, r3, #8
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2120      	movs	r1, #32
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f850 	bl	800504c <QSPI_WaitFlagStateUntilTimeout>
 8004fac:	4603      	mov	r3, r0
 8004fae:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004fb0:	7afb      	ldrb	r3, [r7, #11]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d131      	bne.n	800501a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004fc0:	f023 0310 	bic.w	r3, r3, #16
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6852      	ldr	r2, [r2, #4]
 8004fc8:	0611      	lsls	r1, r2, #24
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	68d2      	ldr	r2, [r2, #12]
 8004fce:	4311      	orrs	r1, r2
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6812      	ldr	r2, [r2, #0]
 8004fd4:	430b      	orrs	r3, r1
 8004fd6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	4b13      	ldr	r3, [pc, #76]	; (800502c <HAL_QSPI_Init+0xe8>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	6912      	ldr	r2, [r2, #16]
 8004fe6:	0411      	lsls	r1, r2, #16
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6952      	ldr	r2, [r2, #20]
 8004fec:	4311      	orrs	r1, r2
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	6992      	ldr	r2, [r2, #24]
 8004ff2:	4311      	orrs	r1, r2
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6812      	ldr	r2, [r2, #0]
 8004ff8:	430b      	orrs	r3, r1
 8004ffa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0201 	orr.w	r2, r2, #1
 800500a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005022:	7afb      	ldrb	r3, [r7, #11]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	ffe0f8fe 	.word	0xffe0f8fe

08005030 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	603b      	str	r3, [r7, #0]
 8005058:	4613      	mov	r3, r2
 800505a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800505c:	e01a      	b.n	8005094 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005064:	d016      	beq.n	8005094 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005066:	f7fe fa4b 	bl	8003500 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	429a      	cmp	r2, r3
 8005074:	d302      	bcc.n	800507c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10b      	bne.n	8005094 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2204      	movs	r2, #4
 8005080:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005088:	f043 0201 	orr.w	r2, r3, #1
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e00e      	b.n	80050b2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	4013      	ands	r3, r2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	bf14      	ite	ne
 80050a2:	2301      	movne	r3, #1
 80050a4:	2300      	moveq	r3, #0
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	461a      	mov	r2, r3
 80050aa:	79fb      	ldrb	r3, [r7, #7]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d1d6      	bne.n	800505e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
	...

080050bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b088      	sub	sp, #32
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e3d8      	b.n	8005880 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ce:	4b97      	ldr	r3, [pc, #604]	; (800532c <HAL_RCC_OscConfig+0x270>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 030c 	and.w	r3, r3, #12
 80050d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050d8:	4b94      	ldr	r3, [pc, #592]	; (800532c <HAL_RCC_OscConfig+0x270>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f003 0303 	and.w	r3, r3, #3
 80050e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0310 	and.w	r3, r3, #16
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 80e4 	beq.w	80052b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d007      	beq.n	8005106 <HAL_RCC_OscConfig+0x4a>
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	2b0c      	cmp	r3, #12
 80050fa:	f040 808b 	bne.w	8005214 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	2b01      	cmp	r3, #1
 8005102:	f040 8087 	bne.w	8005214 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005106:	4b89      	ldr	r3, [pc, #548]	; (800532c <HAL_RCC_OscConfig+0x270>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d005      	beq.n	800511e <HAL_RCC_OscConfig+0x62>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e3b0      	b.n	8005880 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1a      	ldr	r2, [r3, #32]
 8005122:	4b82      	ldr	r3, [pc, #520]	; (800532c <HAL_RCC_OscConfig+0x270>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d004      	beq.n	8005138 <HAL_RCC_OscConfig+0x7c>
 800512e:	4b7f      	ldr	r3, [pc, #508]	; (800532c <HAL_RCC_OscConfig+0x270>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005136:	e005      	b.n	8005144 <HAL_RCC_OscConfig+0x88>
 8005138:	4b7c      	ldr	r3, [pc, #496]	; (800532c <HAL_RCC_OscConfig+0x270>)
 800513a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800513e:	091b      	lsrs	r3, r3, #4
 8005140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005144:	4293      	cmp	r3, r2
 8005146:	d223      	bcs.n	8005190 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	4618      	mov	r0, r3
 800514e:	f000 fd75 	bl	8005c3c <RCC_SetFlashLatencyFromMSIRange>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e391      	b.n	8005880 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800515c:	4b73      	ldr	r3, [pc, #460]	; (800532c <HAL_RCC_OscConfig+0x270>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a72      	ldr	r2, [pc, #456]	; (800532c <HAL_RCC_OscConfig+0x270>)
 8005162:	f043 0308 	orr.w	r3, r3, #8
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	4b70      	ldr	r3, [pc, #448]	; (800532c <HAL_RCC_OscConfig+0x270>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	496d      	ldr	r1, [pc, #436]	; (800532c <HAL_RCC_OscConfig+0x270>)
 8005176:	4313      	orrs	r3, r2
 8005178:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800517a:	4b6c      	ldr	r3, [pc, #432]	; (800532c <HAL_RCC_OscConfig+0x270>)
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	021b      	lsls	r3, r3, #8
 8005188:	4968      	ldr	r1, [pc, #416]	; (800532c <HAL_RCC_OscConfig+0x270>)
 800518a:	4313      	orrs	r3, r2
 800518c:	604b      	str	r3, [r1, #4]
 800518e:	e025      	b.n	80051dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005190:	4b66      	ldr	r3, [pc, #408]	; (800532c <HAL_RCC_OscConfig+0x270>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a65      	ldr	r2, [pc, #404]	; (800532c <HAL_RCC_OscConfig+0x270>)
 8005196:	f043 0308 	orr.w	r3, r3, #8
 800519a:	6013      	str	r3, [r2, #0]
 800519c:	4b63      	ldr	r3, [pc, #396]	; (800532c <HAL_RCC_OscConfig+0x270>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	4960      	ldr	r1, [pc, #384]	; (800532c <HAL_RCC_OscConfig+0x270>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051ae:	4b5f      	ldr	r3, [pc, #380]	; (800532c <HAL_RCC_OscConfig+0x270>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	021b      	lsls	r3, r3, #8
 80051bc:	495b      	ldr	r1, [pc, #364]	; (800532c <HAL_RCC_OscConfig+0x270>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d109      	bne.n	80051dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f000 fd35 	bl	8005c3c <RCC_SetFlashLatencyFromMSIRange>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e351      	b.n	8005880 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051dc:	f000 fc38 	bl	8005a50 <HAL_RCC_GetSysClockFreq>
 80051e0:	4602      	mov	r2, r0
 80051e2:	4b52      	ldr	r3, [pc, #328]	; (800532c <HAL_RCC_OscConfig+0x270>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	091b      	lsrs	r3, r3, #4
 80051e8:	f003 030f 	and.w	r3, r3, #15
 80051ec:	4950      	ldr	r1, [pc, #320]	; (8005330 <HAL_RCC_OscConfig+0x274>)
 80051ee:	5ccb      	ldrb	r3, [r1, r3]
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	fa22 f303 	lsr.w	r3, r2, r3
 80051f8:	4a4e      	ldr	r2, [pc, #312]	; (8005334 <HAL_RCC_OscConfig+0x278>)
 80051fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80051fc:	4b4e      	ldr	r3, [pc, #312]	; (8005338 <HAL_RCC_OscConfig+0x27c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f7fd ff87 	bl	8003114 <HAL_InitTick>
 8005206:	4603      	mov	r3, r0
 8005208:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800520a:	7bfb      	ldrb	r3, [r7, #15]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d052      	beq.n	80052b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005210:	7bfb      	ldrb	r3, [r7, #15]
 8005212:	e335      	b.n	8005880 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d032      	beq.n	8005282 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800521c:	4b43      	ldr	r3, [pc, #268]	; (800532c <HAL_RCC_OscConfig+0x270>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a42      	ldr	r2, [pc, #264]	; (800532c <HAL_RCC_OscConfig+0x270>)
 8005222:	f043 0301 	orr.w	r3, r3, #1
 8005226:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005228:	f7fe f96a 	bl	8003500 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005230:	f7fe f966 	bl	8003500 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e31e      	b.n	8005880 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005242:	4b3a      	ldr	r3, [pc, #232]	; (800532c <HAL_RCC_OscConfig+0x270>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0f0      	beq.n	8005230 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800524e:	4b37      	ldr	r3, [pc, #220]	; (800532c <HAL_RCC_OscConfig+0x270>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a36      	ldr	r2, [pc, #216]	; (800532c <HAL_RCC_OscConfig+0x270>)
 8005254:	f043 0308 	orr.w	r3, r3, #8
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	4b34      	ldr	r3, [pc, #208]	; (800532c <HAL_RCC_OscConfig+0x270>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	4931      	ldr	r1, [pc, #196]	; (800532c <HAL_RCC_OscConfig+0x270>)
 8005268:	4313      	orrs	r3, r2
 800526a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800526c:	4b2f      	ldr	r3, [pc, #188]	; (800532c <HAL_RCC_OscConfig+0x270>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	021b      	lsls	r3, r3, #8
 800527a:	492c      	ldr	r1, [pc, #176]	; (800532c <HAL_RCC_OscConfig+0x270>)
 800527c:	4313      	orrs	r3, r2
 800527e:	604b      	str	r3, [r1, #4]
 8005280:	e01a      	b.n	80052b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005282:	4b2a      	ldr	r3, [pc, #168]	; (800532c <HAL_RCC_OscConfig+0x270>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a29      	ldr	r2, [pc, #164]	; (800532c <HAL_RCC_OscConfig+0x270>)
 8005288:	f023 0301 	bic.w	r3, r3, #1
 800528c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800528e:	f7fe f937 	bl	8003500 <HAL_GetTick>
 8005292:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005294:	e008      	b.n	80052a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005296:	f7fe f933 	bl	8003500 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e2eb      	b.n	8005880 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052a8:	4b20      	ldr	r3, [pc, #128]	; (800532c <HAL_RCC_OscConfig+0x270>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1f0      	bne.n	8005296 <HAL_RCC_OscConfig+0x1da>
 80052b4:	e000      	b.n	80052b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d074      	beq.n	80053ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	2b08      	cmp	r3, #8
 80052c8:	d005      	beq.n	80052d6 <HAL_RCC_OscConfig+0x21a>
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	2b0c      	cmp	r3, #12
 80052ce:	d10e      	bne.n	80052ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	d10b      	bne.n	80052ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d6:	4b15      	ldr	r3, [pc, #84]	; (800532c <HAL_RCC_OscConfig+0x270>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d064      	beq.n	80053ac <HAL_RCC_OscConfig+0x2f0>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d160      	bne.n	80053ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e2c8      	b.n	8005880 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f6:	d106      	bne.n	8005306 <HAL_RCC_OscConfig+0x24a>
 80052f8:	4b0c      	ldr	r3, [pc, #48]	; (800532c <HAL_RCC_OscConfig+0x270>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a0b      	ldr	r2, [pc, #44]	; (800532c <HAL_RCC_OscConfig+0x270>)
 80052fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005302:	6013      	str	r3, [r2, #0]
 8005304:	e026      	b.n	8005354 <HAL_RCC_OscConfig+0x298>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800530e:	d115      	bne.n	800533c <HAL_RCC_OscConfig+0x280>
 8005310:	4b06      	ldr	r3, [pc, #24]	; (800532c <HAL_RCC_OscConfig+0x270>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a05      	ldr	r2, [pc, #20]	; (800532c <HAL_RCC_OscConfig+0x270>)
 8005316:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	4b03      	ldr	r3, [pc, #12]	; (800532c <HAL_RCC_OscConfig+0x270>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a02      	ldr	r2, [pc, #8]	; (800532c <HAL_RCC_OscConfig+0x270>)
 8005322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	e014      	b.n	8005354 <HAL_RCC_OscConfig+0x298>
 800532a:	bf00      	nop
 800532c:	40021000 	.word	0x40021000
 8005330:	08017adc 	.word	0x08017adc
 8005334:	20000010 	.word	0x20000010
 8005338:	20000014 	.word	0x20000014
 800533c:	4ba0      	ldr	r3, [pc, #640]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a9f      	ldr	r2, [pc, #636]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 8005342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	4b9d      	ldr	r3, [pc, #628]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a9c      	ldr	r2, [pc, #624]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 800534e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d013      	beq.n	8005384 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535c:	f7fe f8d0 	bl	8003500 <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005364:	f7fe f8cc 	bl	8003500 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b64      	cmp	r3, #100	; 0x64
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e284      	b.n	8005880 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005376:	4b92      	ldr	r3, [pc, #584]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0f0      	beq.n	8005364 <HAL_RCC_OscConfig+0x2a8>
 8005382:	e014      	b.n	80053ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005384:	f7fe f8bc 	bl	8003500 <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800538c:	f7fe f8b8 	bl	8003500 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b64      	cmp	r3, #100	; 0x64
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e270      	b.n	8005880 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800539e:	4b88      	ldr	r3, [pc, #544]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1f0      	bne.n	800538c <HAL_RCC_OscConfig+0x2d0>
 80053aa:	e000      	b.n	80053ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d060      	beq.n	800547c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	2b04      	cmp	r3, #4
 80053be:	d005      	beq.n	80053cc <HAL_RCC_OscConfig+0x310>
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	2b0c      	cmp	r3, #12
 80053c4:	d119      	bne.n	80053fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d116      	bne.n	80053fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053cc:	4b7c      	ldr	r3, [pc, #496]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d005      	beq.n	80053e4 <HAL_RCC_OscConfig+0x328>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e24d      	b.n	8005880 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e4:	4b76      	ldr	r3, [pc, #472]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	061b      	lsls	r3, r3, #24
 80053f2:	4973      	ldr	r1, [pc, #460]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053f8:	e040      	b.n	800547c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d023      	beq.n	800544a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005402:	4b6f      	ldr	r3, [pc, #444]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a6e      	ldr	r2, [pc, #440]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 8005408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800540c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540e:	f7fe f877 	bl	8003500 <HAL_GetTick>
 8005412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005414:	e008      	b.n	8005428 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005416:	f7fe f873 	bl	8003500 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d901      	bls.n	8005428 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e22b      	b.n	8005880 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005428:	4b65      	ldr	r3, [pc, #404]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0f0      	beq.n	8005416 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005434:	4b62      	ldr	r3, [pc, #392]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	061b      	lsls	r3, r3, #24
 8005442:	495f      	ldr	r1, [pc, #380]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 8005444:	4313      	orrs	r3, r2
 8005446:	604b      	str	r3, [r1, #4]
 8005448:	e018      	b.n	800547c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800544a:	4b5d      	ldr	r3, [pc, #372]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a5c      	ldr	r2, [pc, #368]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 8005450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005456:	f7fe f853 	bl	8003500 <HAL_GetTick>
 800545a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800545c:	e008      	b.n	8005470 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800545e:	f7fe f84f 	bl	8003500 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d901      	bls.n	8005470 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e207      	b.n	8005880 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005470:	4b53      	ldr	r3, [pc, #332]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1f0      	bne.n	800545e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0308 	and.w	r3, r3, #8
 8005484:	2b00      	cmp	r3, #0
 8005486:	d03c      	beq.n	8005502 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d01c      	beq.n	80054ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005490:	4b4b      	ldr	r3, [pc, #300]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 8005492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005496:	4a4a      	ldr	r2, [pc, #296]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 8005498:	f043 0301 	orr.w	r3, r3, #1
 800549c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a0:	f7fe f82e 	bl	8003500 <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054a8:	f7fe f82a 	bl	8003500 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e1e2      	b.n	8005880 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054ba:	4b41      	ldr	r3, [pc, #260]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 80054bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d0ef      	beq.n	80054a8 <HAL_RCC_OscConfig+0x3ec>
 80054c8:	e01b      	b.n	8005502 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054ca:	4b3d      	ldr	r3, [pc, #244]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 80054cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054d0:	4a3b      	ldr	r2, [pc, #236]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 80054d2:	f023 0301 	bic.w	r3, r3, #1
 80054d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054da:	f7fe f811 	bl	8003500 <HAL_GetTick>
 80054de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054e0:	e008      	b.n	80054f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054e2:	f7fe f80d 	bl	8003500 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e1c5      	b.n	8005880 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054f4:	4b32      	ldr	r3, [pc, #200]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 80054f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1ef      	bne.n	80054e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0304 	and.w	r3, r3, #4
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 80a6 	beq.w	800565c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005510:	2300      	movs	r3, #0
 8005512:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005514:	4b2a      	ldr	r3, [pc, #168]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 8005516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10d      	bne.n	800553c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005520:	4b27      	ldr	r3, [pc, #156]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 8005522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005524:	4a26      	ldr	r2, [pc, #152]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 8005526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800552a:	6593      	str	r3, [r2, #88]	; 0x58
 800552c:	4b24      	ldr	r3, [pc, #144]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 800552e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005534:	60bb      	str	r3, [r7, #8]
 8005536:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005538:	2301      	movs	r3, #1
 800553a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800553c:	4b21      	ldr	r3, [pc, #132]	; (80055c4 <HAL_RCC_OscConfig+0x508>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005544:	2b00      	cmp	r3, #0
 8005546:	d118      	bne.n	800557a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005548:	4b1e      	ldr	r3, [pc, #120]	; (80055c4 <HAL_RCC_OscConfig+0x508>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a1d      	ldr	r2, [pc, #116]	; (80055c4 <HAL_RCC_OscConfig+0x508>)
 800554e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005552:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005554:	f7fd ffd4 	bl	8003500 <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800555c:	f7fd ffd0 	bl	8003500 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b02      	cmp	r3, #2
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e188      	b.n	8005880 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800556e:	4b15      	ldr	r3, [pc, #84]	; (80055c4 <HAL_RCC_OscConfig+0x508>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0f0      	beq.n	800555c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d108      	bne.n	8005594 <HAL_RCC_OscConfig+0x4d8>
 8005582:	4b0f      	ldr	r3, [pc, #60]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 8005584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005588:	4a0d      	ldr	r2, [pc, #52]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 800558a:	f043 0301 	orr.w	r3, r3, #1
 800558e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005592:	e029      	b.n	80055e8 <HAL_RCC_OscConfig+0x52c>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	2b05      	cmp	r3, #5
 800559a:	d115      	bne.n	80055c8 <HAL_RCC_OscConfig+0x50c>
 800559c:	4b08      	ldr	r3, [pc, #32]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 800559e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a2:	4a07      	ldr	r2, [pc, #28]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 80055a4:	f043 0304 	orr.w	r3, r3, #4
 80055a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055ac:	4b04      	ldr	r3, [pc, #16]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 80055ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b2:	4a03      	ldr	r2, [pc, #12]	; (80055c0 <HAL_RCC_OscConfig+0x504>)
 80055b4:	f043 0301 	orr.w	r3, r3, #1
 80055b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055bc:	e014      	b.n	80055e8 <HAL_RCC_OscConfig+0x52c>
 80055be:	bf00      	nop
 80055c0:	40021000 	.word	0x40021000
 80055c4:	40007000 	.word	0x40007000
 80055c8:	4b91      	ldr	r3, [pc, #580]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 80055ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ce:	4a90      	ldr	r2, [pc, #576]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 80055d0:	f023 0301 	bic.w	r3, r3, #1
 80055d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055d8:	4b8d      	ldr	r3, [pc, #564]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 80055da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055de:	4a8c      	ldr	r2, [pc, #560]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 80055e0:	f023 0304 	bic.w	r3, r3, #4
 80055e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d016      	beq.n	800561e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f0:	f7fd ff86 	bl	8003500 <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055f6:	e00a      	b.n	800560e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055f8:	f7fd ff82 	bl	8003500 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	f241 3288 	movw	r2, #5000	; 0x1388
 8005606:	4293      	cmp	r3, r2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e138      	b.n	8005880 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800560e:	4b80      	ldr	r3, [pc, #512]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 8005610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0ed      	beq.n	80055f8 <HAL_RCC_OscConfig+0x53c>
 800561c:	e015      	b.n	800564a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800561e:	f7fd ff6f 	bl	8003500 <HAL_GetTick>
 8005622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005624:	e00a      	b.n	800563c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005626:	f7fd ff6b 	bl	8003500 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	f241 3288 	movw	r2, #5000	; 0x1388
 8005634:	4293      	cmp	r3, r2
 8005636:	d901      	bls.n	800563c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e121      	b.n	8005880 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800563c:	4b74      	ldr	r3, [pc, #464]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 800563e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1ed      	bne.n	8005626 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800564a:	7ffb      	ldrb	r3, [r7, #31]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d105      	bne.n	800565c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005650:	4b6f      	ldr	r3, [pc, #444]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 8005652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005654:	4a6e      	ldr	r2, [pc, #440]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 8005656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800565a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 810c 	beq.w	800587e <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566a:	2b02      	cmp	r3, #2
 800566c:	f040 80d4 	bne.w	8005818 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005670:	4b67      	ldr	r3, [pc, #412]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f003 0203 	and.w	r2, r3, #3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005680:	429a      	cmp	r2, r3
 8005682:	d130      	bne.n	80056e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568e:	3b01      	subs	r3, #1
 8005690:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005692:	429a      	cmp	r2, r3
 8005694:	d127      	bne.n	80056e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d11f      	bne.n	80056e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056b0:	2a07      	cmp	r2, #7
 80056b2:	bf14      	ite	ne
 80056b4:	2201      	movne	r2, #1
 80056b6:	2200      	moveq	r2, #0
 80056b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d113      	bne.n	80056e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c8:	085b      	lsrs	r3, r3, #1
 80056ca:	3b01      	subs	r3, #1
 80056cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d109      	bne.n	80056e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056dc:	085b      	lsrs	r3, r3, #1
 80056de:	3b01      	subs	r3, #1
 80056e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d06e      	beq.n	80057c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	2b0c      	cmp	r3, #12
 80056ea:	d069      	beq.n	80057c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80056ec:	4b48      	ldr	r3, [pc, #288]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d105      	bne.n	8005704 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80056f8:	4b45      	ldr	r3, [pc, #276]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e0bb      	b.n	8005880 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005708:	4b41      	ldr	r3, [pc, #260]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a40      	ldr	r2, [pc, #256]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 800570e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005712:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005714:	f7fd fef4 	bl	8003500 <HAL_GetTick>
 8005718:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800571a:	e008      	b.n	800572e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800571c:	f7fd fef0 	bl	8003500 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d901      	bls.n	800572e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e0a8      	b.n	8005880 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800572e:	4b38      	ldr	r3, [pc, #224]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1f0      	bne.n	800571c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800573a:	4b35      	ldr	r3, [pc, #212]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	4b35      	ldr	r3, [pc, #212]	; (8005814 <HAL_RCC_OscConfig+0x758>)
 8005740:	4013      	ands	r3, r2
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800574a:	3a01      	subs	r2, #1
 800574c:	0112      	lsls	r2, r2, #4
 800574e:	4311      	orrs	r1, r2
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005754:	0212      	lsls	r2, r2, #8
 8005756:	4311      	orrs	r1, r2
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800575c:	0852      	lsrs	r2, r2, #1
 800575e:	3a01      	subs	r2, #1
 8005760:	0552      	lsls	r2, r2, #21
 8005762:	4311      	orrs	r1, r2
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005768:	0852      	lsrs	r2, r2, #1
 800576a:	3a01      	subs	r2, #1
 800576c:	0652      	lsls	r2, r2, #25
 800576e:	4311      	orrs	r1, r2
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005774:	0912      	lsrs	r2, r2, #4
 8005776:	0452      	lsls	r2, r2, #17
 8005778:	430a      	orrs	r2, r1
 800577a:	4925      	ldr	r1, [pc, #148]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 800577c:	4313      	orrs	r3, r2
 800577e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005780:	4b23      	ldr	r3, [pc, #140]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a22      	ldr	r2, [pc, #136]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 8005786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800578a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800578c:	4b20      	ldr	r3, [pc, #128]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	4a1f      	ldr	r2, [pc, #124]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 8005792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005796:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005798:	f7fd feb2 	bl	8003500 <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057a0:	f7fd feae 	bl	8003500 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e066      	b.n	8005880 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057b2:	4b17      	ldr	r3, [pc, #92]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0f0      	beq.n	80057a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057be:	e05e      	b.n	800587e <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e05d      	b.n	8005880 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057c4:	4b12      	ldr	r3, [pc, #72]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d156      	bne.n	800587e <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80057d0:	4b0f      	ldr	r3, [pc, #60]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a0e      	ldr	r2, [pc, #56]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 80057d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057dc:	4b0c      	ldr	r3, [pc, #48]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	4a0b      	ldr	r2, [pc, #44]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 80057e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80057e8:	f7fd fe8a 	bl	8003500 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f0:	f7fd fe86 	bl	8003500 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e03e      	b.n	8005880 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005802:	4b03      	ldr	r3, [pc, #12]	; (8005810 <HAL_RCC_OscConfig+0x754>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0f0      	beq.n	80057f0 <HAL_RCC_OscConfig+0x734>
 800580e:	e036      	b.n	800587e <HAL_RCC_OscConfig+0x7c2>
 8005810:	40021000 	.word	0x40021000
 8005814:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	2b0c      	cmp	r3, #12
 800581c:	d02d      	beq.n	800587a <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800581e:	4b1a      	ldr	r3, [pc, #104]	; (8005888 <HAL_RCC_OscConfig+0x7cc>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a19      	ldr	r2, [pc, #100]	; (8005888 <HAL_RCC_OscConfig+0x7cc>)
 8005824:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005828:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800582a:	4b17      	ldr	r3, [pc, #92]	; (8005888 <HAL_RCC_OscConfig+0x7cc>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d105      	bne.n	8005842 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005836:	4b14      	ldr	r3, [pc, #80]	; (8005888 <HAL_RCC_OscConfig+0x7cc>)
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	4a13      	ldr	r2, [pc, #76]	; (8005888 <HAL_RCC_OscConfig+0x7cc>)
 800583c:	f023 0303 	bic.w	r3, r3, #3
 8005840:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005842:	4b11      	ldr	r3, [pc, #68]	; (8005888 <HAL_RCC_OscConfig+0x7cc>)
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	4a10      	ldr	r2, [pc, #64]	; (8005888 <HAL_RCC_OscConfig+0x7cc>)
 8005848:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800584c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005850:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005852:	f7fd fe55 	bl	8003500 <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005858:	e008      	b.n	800586c <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800585a:	f7fd fe51 	bl	8003500 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d901      	bls.n	800586c <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e009      	b.n	8005880 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800586c:	4b06      	ldr	r3, [pc, #24]	; (8005888 <HAL_RCC_OscConfig+0x7cc>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1f0      	bne.n	800585a <HAL_RCC_OscConfig+0x79e>
 8005878:	e001      	b.n	800587e <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e000      	b.n	8005880 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3720      	adds	r7, #32
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40021000 	.word	0x40021000

0800588c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e0c8      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058a0:	4b66      	ldr	r3, [pc, #408]	; (8005a3c <HAL_RCC_ClockConfig+0x1b0>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d910      	bls.n	80058d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ae:	4b63      	ldr	r3, [pc, #396]	; (8005a3c <HAL_RCC_ClockConfig+0x1b0>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f023 0207 	bic.w	r2, r3, #7
 80058b6:	4961      	ldr	r1, [pc, #388]	; (8005a3c <HAL_RCC_ClockConfig+0x1b0>)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058be:	4b5f      	ldr	r3, [pc, #380]	; (8005a3c <HAL_RCC_ClockConfig+0x1b0>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d001      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e0b0      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d04c      	beq.n	8005976 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	d107      	bne.n	80058f4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058e4:	4b56      	ldr	r3, [pc, #344]	; (8005a40 <HAL_RCC_ClockConfig+0x1b4>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d121      	bne.n	8005934 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e09e      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d107      	bne.n	800590c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058fc:	4b50      	ldr	r3, [pc, #320]	; (8005a40 <HAL_RCC_ClockConfig+0x1b4>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d115      	bne.n	8005934 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e092      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d107      	bne.n	8005924 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005914:	4b4a      	ldr	r3, [pc, #296]	; (8005a40 <HAL_RCC_ClockConfig+0x1b4>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d109      	bne.n	8005934 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e086      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005924:	4b46      	ldr	r3, [pc, #280]	; (8005a40 <HAL_RCC_ClockConfig+0x1b4>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e07e      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005934:	4b42      	ldr	r3, [pc, #264]	; (8005a40 <HAL_RCC_ClockConfig+0x1b4>)
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f023 0203 	bic.w	r2, r3, #3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	493f      	ldr	r1, [pc, #252]	; (8005a40 <HAL_RCC_ClockConfig+0x1b4>)
 8005942:	4313      	orrs	r3, r2
 8005944:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005946:	f7fd fddb 	bl	8003500 <HAL_GetTick>
 800594a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800594c:	e00a      	b.n	8005964 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800594e:	f7fd fdd7 	bl	8003500 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	f241 3288 	movw	r2, #5000	; 0x1388
 800595c:	4293      	cmp	r3, r2
 800595e:	d901      	bls.n	8005964 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e066      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005964:	4b36      	ldr	r3, [pc, #216]	; (8005a40 <HAL_RCC_ClockConfig+0x1b4>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 020c 	and.w	r2, r3, #12
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	429a      	cmp	r2, r3
 8005974:	d1eb      	bne.n	800594e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d008      	beq.n	8005994 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005982:	4b2f      	ldr	r3, [pc, #188]	; (8005a40 <HAL_RCC_ClockConfig+0x1b4>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	492c      	ldr	r1, [pc, #176]	; (8005a40 <HAL_RCC_ClockConfig+0x1b4>)
 8005990:	4313      	orrs	r3, r2
 8005992:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005994:	4b29      	ldr	r3, [pc, #164]	; (8005a3c <HAL_RCC_ClockConfig+0x1b0>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d210      	bcs.n	80059c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059a2:	4b26      	ldr	r3, [pc, #152]	; (8005a3c <HAL_RCC_ClockConfig+0x1b0>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f023 0207 	bic.w	r2, r3, #7
 80059aa:	4924      	ldr	r1, [pc, #144]	; (8005a3c <HAL_RCC_ClockConfig+0x1b0>)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b2:	4b22      	ldr	r3, [pc, #136]	; (8005a3c <HAL_RCC_ClockConfig+0x1b0>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d001      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e036      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d008      	beq.n	80059e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059d0:	4b1b      	ldr	r3, [pc, #108]	; (8005a40 <HAL_RCC_ClockConfig+0x1b4>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	4918      	ldr	r1, [pc, #96]	; (8005a40 <HAL_RCC_ClockConfig+0x1b4>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0308 	and.w	r3, r3, #8
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d009      	beq.n	8005a02 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059ee:	4b14      	ldr	r3, [pc, #80]	; (8005a40 <HAL_RCC_ClockConfig+0x1b4>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	00db      	lsls	r3, r3, #3
 80059fc:	4910      	ldr	r1, [pc, #64]	; (8005a40 <HAL_RCC_ClockConfig+0x1b4>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a02:	f000 f825 	bl	8005a50 <HAL_RCC_GetSysClockFreq>
 8005a06:	4602      	mov	r2, r0
 8005a08:	4b0d      	ldr	r3, [pc, #52]	; (8005a40 <HAL_RCC_ClockConfig+0x1b4>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	091b      	lsrs	r3, r3, #4
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	490c      	ldr	r1, [pc, #48]	; (8005a44 <HAL_RCC_ClockConfig+0x1b8>)
 8005a14:	5ccb      	ldrb	r3, [r1, r3]
 8005a16:	f003 031f 	and.w	r3, r3, #31
 8005a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a1e:	4a0a      	ldr	r2, [pc, #40]	; (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 8005a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a22:	4b0a      	ldr	r3, [pc, #40]	; (8005a4c <HAL_RCC_ClockConfig+0x1c0>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fd fb74 	bl	8003114 <HAL_InitTick>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005a30:	7afb      	ldrb	r3, [r7, #11]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	40022000 	.word	0x40022000
 8005a40:	40021000 	.word	0x40021000
 8005a44:	08017adc 	.word	0x08017adc
 8005a48:	20000010 	.word	0x20000010
 8005a4c:	20000014 	.word	0x20000014

08005a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b089      	sub	sp, #36	; 0x24
 8005a54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	61fb      	str	r3, [r7, #28]
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a5e:	4b3e      	ldr	r3, [pc, #248]	; (8005b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f003 030c 	and.w	r3, r3, #12
 8005a66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a68:	4b3b      	ldr	r3, [pc, #236]	; (8005b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f003 0303 	and.w	r3, r3, #3
 8005a70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d005      	beq.n	8005a84 <HAL_RCC_GetSysClockFreq+0x34>
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	2b0c      	cmp	r3, #12
 8005a7c:	d121      	bne.n	8005ac2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d11e      	bne.n	8005ac2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005a84:	4b34      	ldr	r3, [pc, #208]	; (8005b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0308 	and.w	r3, r3, #8
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d107      	bne.n	8005aa0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005a90:	4b31      	ldr	r3, [pc, #196]	; (8005b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a96:	0a1b      	lsrs	r3, r3, #8
 8005a98:	f003 030f 	and.w	r3, r3, #15
 8005a9c:	61fb      	str	r3, [r7, #28]
 8005a9e:	e005      	b.n	8005aac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005aa0:	4b2d      	ldr	r3, [pc, #180]	; (8005b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	091b      	lsrs	r3, r3, #4
 8005aa6:	f003 030f 	and.w	r3, r3, #15
 8005aaa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005aac:	4a2b      	ldr	r2, [pc, #172]	; (8005b5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ab4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10d      	bne.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ac0:	e00a      	b.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	2b04      	cmp	r3, #4
 8005ac6:	d102      	bne.n	8005ace <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ac8:	4b25      	ldr	r3, [pc, #148]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x110>)
 8005aca:	61bb      	str	r3, [r7, #24]
 8005acc:	e004      	b.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d101      	bne.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ad4:	4b23      	ldr	r3, [pc, #140]	; (8005b64 <HAL_RCC_GetSysClockFreq+0x114>)
 8005ad6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	2b0c      	cmp	r3, #12
 8005adc:	d134      	bne.n	8005b48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ade:	4b1e      	ldr	r3, [pc, #120]	; (8005b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f003 0303 	and.w	r3, r3, #3
 8005ae6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d003      	beq.n	8005af6 <HAL_RCC_GetSysClockFreq+0xa6>
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	d003      	beq.n	8005afc <HAL_RCC_GetSysClockFreq+0xac>
 8005af4:	e005      	b.n	8005b02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005af6:	4b1a      	ldr	r3, [pc, #104]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x110>)
 8005af8:	617b      	str	r3, [r7, #20]
      break;
 8005afa:	e005      	b.n	8005b08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005afc:	4b19      	ldr	r3, [pc, #100]	; (8005b64 <HAL_RCC_GetSysClockFreq+0x114>)
 8005afe:	617b      	str	r3, [r7, #20]
      break;
 8005b00:	e002      	b.n	8005b08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	617b      	str	r3, [r7, #20]
      break;
 8005b06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b08:	4b13      	ldr	r3, [pc, #76]	; (8005b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	091b      	lsrs	r3, r3, #4
 8005b0e:	f003 0307 	and.w	r3, r3, #7
 8005b12:	3301      	adds	r3, #1
 8005b14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005b16:	4b10      	ldr	r3, [pc, #64]	; (8005b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	0a1b      	lsrs	r3, r3, #8
 8005b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	fb03 f202 	mul.w	r2, r3, r2
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b2e:	4b0a      	ldr	r3, [pc, #40]	; (8005b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	0e5b      	lsrs	r3, r3, #25
 8005b34:	f003 0303 	and.w	r3, r3, #3
 8005b38:	3301      	adds	r3, #1
 8005b3a:	005b      	lsls	r3, r3, #1
 8005b3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005b48:	69bb      	ldr	r3, [r7, #24]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3724      	adds	r7, #36	; 0x24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	08017af4 	.word	0x08017af4
 8005b60:	00f42400 	.word	0x00f42400
 8005b64:	007a1200 	.word	0x007a1200

08005b68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b6c:	4b03      	ldr	r3, [pc, #12]	; (8005b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	20000010 	.word	0x20000010

08005b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b84:	f7ff fff0 	bl	8005b68 <HAL_RCC_GetHCLKFreq>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	0a1b      	lsrs	r3, r3, #8
 8005b90:	f003 0307 	and.w	r3, r3, #7
 8005b94:	4904      	ldr	r1, [pc, #16]	; (8005ba8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b96:	5ccb      	ldrb	r3, [r1, r3]
 8005b98:	f003 031f 	and.w	r3, r3, #31
 8005b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	40021000 	.word	0x40021000
 8005ba8:	08017aec 	.word	0x08017aec

08005bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005bb0:	f7ff ffda 	bl	8005b68 <HAL_RCC_GetHCLKFreq>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	4b06      	ldr	r3, [pc, #24]	; (8005bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	0adb      	lsrs	r3, r3, #11
 8005bbc:	f003 0307 	and.w	r3, r3, #7
 8005bc0:	4904      	ldr	r1, [pc, #16]	; (8005bd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005bc2:	5ccb      	ldrb	r3, [r1, r3]
 8005bc4:	f003 031f 	and.w	r3, r3, #31
 8005bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	40021000 	.word	0x40021000
 8005bd4:	08017aec 	.word	0x08017aec

08005bd8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	220f      	movs	r2, #15
 8005be6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005be8:	4b12      	ldr	r3, [pc, #72]	; (8005c34 <HAL_RCC_GetClockConfig+0x5c>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f003 0203 	and.w	r2, r3, #3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005bf4:	4b0f      	ldr	r3, [pc, #60]	; (8005c34 <HAL_RCC_GetClockConfig+0x5c>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005c00:	4b0c      	ldr	r3, [pc, #48]	; (8005c34 <HAL_RCC_GetClockConfig+0x5c>)
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005c0c:	4b09      	ldr	r3, [pc, #36]	; (8005c34 <HAL_RCC_GetClockConfig+0x5c>)
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	08db      	lsrs	r3, r3, #3
 8005c12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005c1a:	4b07      	ldr	r3, [pc, #28]	; (8005c38 <HAL_RCC_GetClockConfig+0x60>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0207 	and.w	r2, r3, #7
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	601a      	str	r2, [r3, #0]
}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	40021000 	.word	0x40021000
 8005c38:	40022000 	.word	0x40022000

08005c3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005c44:	2300      	movs	r3, #0
 8005c46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c48:	4b2a      	ldr	r3, [pc, #168]	; (8005cf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005c54:	f7ff f902 	bl	8004e5c <HAL_PWREx_GetVoltageRange>
 8005c58:	6178      	str	r0, [r7, #20]
 8005c5a:	e014      	b.n	8005c86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c5c:	4b25      	ldr	r3, [pc, #148]	; (8005cf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c60:	4a24      	ldr	r2, [pc, #144]	; (8005cf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c66:	6593      	str	r3, [r2, #88]	; 0x58
 8005c68:	4b22      	ldr	r3, [pc, #136]	; (8005cf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005c74:	f7ff f8f2 	bl	8004e5c <HAL_PWREx_GetVoltageRange>
 8005c78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005c7a:	4b1e      	ldr	r3, [pc, #120]	; (8005cf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c7e:	4a1d      	ldr	r2, [pc, #116]	; (8005cf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c8c:	d10b      	bne.n	8005ca6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b80      	cmp	r3, #128	; 0x80
 8005c92:	d919      	bls.n	8005cc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2ba0      	cmp	r3, #160	; 0xa0
 8005c98:	d902      	bls.n	8005ca0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	613b      	str	r3, [r7, #16]
 8005c9e:	e013      	b.n	8005cc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	613b      	str	r3, [r7, #16]
 8005ca4:	e010      	b.n	8005cc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2b80      	cmp	r3, #128	; 0x80
 8005caa:	d902      	bls.n	8005cb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005cac:	2303      	movs	r3, #3
 8005cae:	613b      	str	r3, [r7, #16]
 8005cb0:	e00a      	b.n	8005cc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b80      	cmp	r3, #128	; 0x80
 8005cb6:	d102      	bne.n	8005cbe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005cb8:	2302      	movs	r3, #2
 8005cba:	613b      	str	r3, [r7, #16]
 8005cbc:	e004      	b.n	8005cc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b70      	cmp	r3, #112	; 0x70
 8005cc2:	d101      	bne.n	8005cc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005cc8:	4b0b      	ldr	r3, [pc, #44]	; (8005cf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f023 0207 	bic.w	r2, r3, #7
 8005cd0:	4909      	ldr	r1, [pc, #36]	; (8005cf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005cd8:	4b07      	ldr	r3, [pc, #28]	; (8005cf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0307 	and.w	r3, r3, #7
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d001      	beq.n	8005cea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e000      	b.n	8005cec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3718      	adds	r7, #24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	40022000 	.word	0x40022000

08005cfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d04:	2300      	movs	r3, #0
 8005d06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d08:	2300      	movs	r3, #0
 8005d0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d041      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005d20:	d02a      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005d22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005d26:	d824      	bhi.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005d28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d2c:	d008      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005d2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d32:	d81e      	bhi.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00a      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005d38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d3c:	d010      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005d3e:	e018      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d40:	4b86      	ldr	r3, [pc, #536]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	4a85      	ldr	r2, [pc, #532]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d4a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d4c:	e015      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3304      	adds	r3, #4
 8005d52:	2100      	movs	r1, #0
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 facb 	bl	80062f0 <RCCEx_PLLSAI1_Config>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d5e:	e00c      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3320      	adds	r3, #32
 8005d64:	2100      	movs	r1, #0
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 fbb6 	bl	80064d8 <RCCEx_PLLSAI2_Config>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d70:	e003      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	74fb      	strb	r3, [r7, #19]
      break;
 8005d76:	e000      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005d78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d7a:	7cfb      	ldrb	r3, [r7, #19]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10b      	bne.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d80:	4b76      	ldr	r3, [pc, #472]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d8e:	4973      	ldr	r1, [pc, #460]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005d96:	e001      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d98:	7cfb      	ldrb	r3, [r7, #19]
 8005d9a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d041      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005db0:	d02a      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005db2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005db6:	d824      	bhi.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005db8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dbc:	d008      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005dbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dc2:	d81e      	bhi.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00a      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dcc:	d010      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005dce:	e018      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005dd0:	4b62      	ldr	r3, [pc, #392]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	4a61      	ldr	r2, [pc, #388]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dda:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ddc:	e015      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	3304      	adds	r3, #4
 8005de2:	2100      	movs	r1, #0
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 fa83 	bl	80062f0 <RCCEx_PLLSAI1_Config>
 8005dea:	4603      	mov	r3, r0
 8005dec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005dee:	e00c      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3320      	adds	r3, #32
 8005df4:	2100      	movs	r1, #0
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 fb6e 	bl	80064d8 <RCCEx_PLLSAI2_Config>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e00:	e003      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	74fb      	strb	r3, [r7, #19]
      break;
 8005e06:	e000      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e0a:	7cfb      	ldrb	r3, [r7, #19]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10b      	bne.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e10:	4b52      	ldr	r3, [pc, #328]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e1e:	494f      	ldr	r1, [pc, #316]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005e26:	e001      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e28:	7cfb      	ldrb	r3, [r7, #19]
 8005e2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 80a0 	beq.w	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e3e:	4b47      	ldr	r3, [pc, #284]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e000      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005e4e:	2300      	movs	r3, #0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00d      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e54:	4b41      	ldr	r3, [pc, #260]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e58:	4a40      	ldr	r2, [pc, #256]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e5e:	6593      	str	r3, [r2, #88]	; 0x58
 8005e60:	4b3e      	ldr	r3, [pc, #248]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e68:	60bb      	str	r3, [r7, #8]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e70:	4b3b      	ldr	r3, [pc, #236]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a3a      	ldr	r2, [pc, #232]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e7c:	f7fd fb40 	bl	8003500 <HAL_GetTick>
 8005e80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e82:	e009      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e84:	f7fd fb3c 	bl	8003500 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d902      	bls.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	74fb      	strb	r3, [r7, #19]
        break;
 8005e96:	e005      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e98:	4b31      	ldr	r3, [pc, #196]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d0ef      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005ea4:	7cfb      	ldrb	r3, [r7, #19]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d15c      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005eaa:	4b2c      	ldr	r3, [pc, #176]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eb4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d01f      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d019      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ec8:	4b24      	ldr	r3, [pc, #144]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ed2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ed4:	4b21      	ldr	r3, [pc, #132]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eda:	4a20      	ldr	r2, [pc, #128]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ee0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ee4:	4b1d      	ldr	r3, [pc, #116]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eea:	4a1c      	ldr	r2, [pc, #112]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ef4:	4a19      	ldr	r2, [pc, #100]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d016      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f06:	f7fd fafb 	bl	8003500 <HAL_GetTick>
 8005f0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f0c:	e00b      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f0e:	f7fd faf7 	bl	8003500 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d902      	bls.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	74fb      	strb	r3, [r7, #19]
            break;
 8005f24:	e006      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f26:	4b0d      	ldr	r3, [pc, #52]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d0ec      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005f34:	7cfb      	ldrb	r3, [r7, #19]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10c      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f3a:	4b08      	ldr	r3, [pc, #32]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f4a:	4904      	ldr	r1, [pc, #16]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005f52:	e009      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f54:	7cfb      	ldrb	r3, [r7, #19]
 8005f56:	74bb      	strb	r3, [r7, #18]
 8005f58:	e006      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005f5a:	bf00      	nop
 8005f5c:	40021000 	.word	0x40021000
 8005f60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f64:	7cfb      	ldrb	r3, [r7, #19]
 8005f66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f68:	7c7b      	ldrb	r3, [r7, #17]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d105      	bne.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f6e:	4b9e      	ldr	r3, [pc, #632]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f72:	4a9d      	ldr	r2, [pc, #628]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f86:	4b98      	ldr	r3, [pc, #608]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f8c:	f023 0203 	bic.w	r2, r3, #3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f94:	4994      	ldr	r1, [pc, #592]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00a      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fa8:	4b8f      	ldr	r3, [pc, #572]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fae:	f023 020c 	bic.w	r2, r3, #12
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb6:	498c      	ldr	r1, [pc, #560]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0304 	and.w	r3, r3, #4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00a      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005fca:	4b87      	ldr	r3, [pc, #540]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd8:	4983      	ldr	r1, [pc, #524]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0308 	and.w	r3, r3, #8
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00a      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005fec:	4b7e      	ldr	r3, [pc, #504]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffa:	497b      	ldr	r1, [pc, #492]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0310 	and.w	r3, r3, #16
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00a      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800600e:	4b76      	ldr	r3, [pc, #472]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006014:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800601c:	4972      	ldr	r1, [pc, #456]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800601e:	4313      	orrs	r3, r2
 8006020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0320 	and.w	r3, r3, #32
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00a      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006030:	4b6d      	ldr	r3, [pc, #436]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006036:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800603e:	496a      	ldr	r1, [pc, #424]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006040:	4313      	orrs	r3, r2
 8006042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00a      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006052:	4b65      	ldr	r3, [pc, #404]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006058:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006060:	4961      	ldr	r1, [pc, #388]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006062:	4313      	orrs	r3, r2
 8006064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00a      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006074:	4b5c      	ldr	r3, [pc, #368]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800607a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006082:	4959      	ldr	r1, [pc, #356]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006084:	4313      	orrs	r3, r2
 8006086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00a      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006096:	4b54      	ldr	r3, [pc, #336]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800609c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a4:	4950      	ldr	r1, [pc, #320]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00a      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060b8:	4b4b      	ldr	r3, [pc, #300]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c6:	4948      	ldr	r1, [pc, #288]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00a      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060da:	4b43      	ldr	r3, [pc, #268]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e8:	493f      	ldr	r1, [pc, #252]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d028      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060fc:	4b3a      	ldr	r3, [pc, #232]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006102:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800610a:	4937      	ldr	r1, [pc, #220]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800610c:	4313      	orrs	r3, r2
 800610e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006116:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800611a:	d106      	bne.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800611c:	4b32      	ldr	r3, [pc, #200]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	4a31      	ldr	r2, [pc, #196]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006122:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006126:	60d3      	str	r3, [r2, #12]
 8006128:	e011      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800612e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006132:	d10c      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	3304      	adds	r3, #4
 8006138:	2101      	movs	r1, #1
 800613a:	4618      	mov	r0, r3
 800613c:	f000 f8d8 	bl	80062f0 <RCCEx_PLLSAI1_Config>
 8006140:	4603      	mov	r3, r0
 8006142:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006144:	7cfb      	ldrb	r3, [r7, #19]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800614a:	7cfb      	ldrb	r3, [r7, #19]
 800614c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d028      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800615a:	4b23      	ldr	r3, [pc, #140]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800615c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006160:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006168:	491f      	ldr	r1, [pc, #124]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800616a:	4313      	orrs	r3, r2
 800616c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006174:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006178:	d106      	bne.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800617a:	4b1b      	ldr	r3, [pc, #108]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	4a1a      	ldr	r2, [pc, #104]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006180:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006184:	60d3      	str	r3, [r2, #12]
 8006186:	e011      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006190:	d10c      	bne.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	3304      	adds	r3, #4
 8006196:	2101      	movs	r1, #1
 8006198:	4618      	mov	r0, r3
 800619a:	f000 f8a9 	bl	80062f0 <RCCEx_PLLSAI1_Config>
 800619e:	4603      	mov	r3, r0
 80061a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061a2:	7cfb      	ldrb	r3, [r7, #19]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80061a8:	7cfb      	ldrb	r3, [r7, #19]
 80061aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d02b      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061b8:	4b0b      	ldr	r3, [pc, #44]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061c6:	4908      	ldr	r1, [pc, #32]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061d6:	d109      	bne.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061d8:	4b03      	ldr	r3, [pc, #12]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	4a02      	ldr	r2, [pc, #8]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061e2:	60d3      	str	r3, [r2, #12]
 80061e4:	e014      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80061e6:	bf00      	nop
 80061e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061f4:	d10c      	bne.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	3304      	adds	r3, #4
 80061fa:	2101      	movs	r1, #1
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 f877 	bl	80062f0 <RCCEx_PLLSAI1_Config>
 8006202:	4603      	mov	r3, r0
 8006204:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006206:	7cfb      	ldrb	r3, [r7, #19]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800620c:	7cfb      	ldrb	r3, [r7, #19]
 800620e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d02f      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800621c:	4b2b      	ldr	r3, [pc, #172]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800621e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006222:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800622a:	4928      	ldr	r1, [pc, #160]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800622c:	4313      	orrs	r3, r2
 800622e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006236:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800623a:	d10d      	bne.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3304      	adds	r3, #4
 8006240:	2102      	movs	r1, #2
 8006242:	4618      	mov	r0, r3
 8006244:	f000 f854 	bl	80062f0 <RCCEx_PLLSAI1_Config>
 8006248:	4603      	mov	r3, r0
 800624a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800624c:	7cfb      	ldrb	r3, [r7, #19]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d014      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006252:	7cfb      	ldrb	r3, [r7, #19]
 8006254:	74bb      	strb	r3, [r7, #18]
 8006256:	e011      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800625c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006260:	d10c      	bne.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	3320      	adds	r3, #32
 8006266:	2102      	movs	r1, #2
 8006268:	4618      	mov	r0, r3
 800626a:	f000 f935 	bl	80064d8 <RCCEx_PLLSAI2_Config>
 800626e:	4603      	mov	r3, r0
 8006270:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006272:	7cfb      	ldrb	r3, [r7, #19]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006278:	7cfb      	ldrb	r3, [r7, #19]
 800627a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00a      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006288:	4b10      	ldr	r3, [pc, #64]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800628a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006296:	490d      	ldr	r1, [pc, #52]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006298:	4313      	orrs	r3, r2
 800629a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00b      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80062aa:	4b08      	ldr	r3, [pc, #32]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80062ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062ba:	4904      	ldr	r1, [pc, #16]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80062c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	40021000 	.word	0x40021000

080062d0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80062d4:	4b05      	ldr	r3, [pc, #20]	; (80062ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a04      	ldr	r2, [pc, #16]	; (80062ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80062da:	f043 0304 	orr.w	r3, r3, #4
 80062de:	6013      	str	r3, [r2, #0]
}
 80062e0:	bf00      	nop
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	40021000 	.word	0x40021000

080062f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80062fe:	4b75      	ldr	r3, [pc, #468]	; (80064d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	f003 0303 	and.w	r3, r3, #3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d018      	beq.n	800633c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800630a:	4b72      	ldr	r3, [pc, #456]	; (80064d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	f003 0203 	and.w	r2, r3, #3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	429a      	cmp	r2, r3
 8006318:	d10d      	bne.n	8006336 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
       ||
 800631e:	2b00      	cmp	r3, #0
 8006320:	d009      	beq.n	8006336 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006322:	4b6c      	ldr	r3, [pc, #432]	; (80064d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	091b      	lsrs	r3, r3, #4
 8006328:	f003 0307 	and.w	r3, r3, #7
 800632c:	1c5a      	adds	r2, r3, #1
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
       ||
 8006332:	429a      	cmp	r2, r3
 8006334:	d047      	beq.n	80063c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	73fb      	strb	r3, [r7, #15]
 800633a:	e044      	b.n	80063c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b03      	cmp	r3, #3
 8006342:	d018      	beq.n	8006376 <RCCEx_PLLSAI1_Config+0x86>
 8006344:	2b03      	cmp	r3, #3
 8006346:	d825      	bhi.n	8006394 <RCCEx_PLLSAI1_Config+0xa4>
 8006348:	2b01      	cmp	r3, #1
 800634a:	d002      	beq.n	8006352 <RCCEx_PLLSAI1_Config+0x62>
 800634c:	2b02      	cmp	r3, #2
 800634e:	d009      	beq.n	8006364 <RCCEx_PLLSAI1_Config+0x74>
 8006350:	e020      	b.n	8006394 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006352:	4b60      	ldr	r3, [pc, #384]	; (80064d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d11d      	bne.n	800639a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006362:	e01a      	b.n	800639a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006364:	4b5b      	ldr	r3, [pc, #364]	; (80064d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800636c:	2b00      	cmp	r3, #0
 800636e:	d116      	bne.n	800639e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006374:	e013      	b.n	800639e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006376:	4b57      	ldr	r3, [pc, #348]	; (80064d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10f      	bne.n	80063a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006382:	4b54      	ldr	r3, [pc, #336]	; (80064d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d109      	bne.n	80063a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006392:	e006      	b.n	80063a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	73fb      	strb	r3, [r7, #15]
      break;
 8006398:	e004      	b.n	80063a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800639a:	bf00      	nop
 800639c:	e002      	b.n	80063a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800639e:	bf00      	nop
 80063a0:	e000      	b.n	80063a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80063a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10d      	bne.n	80063c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80063aa:	4b4a      	ldr	r3, [pc, #296]	; (80064d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6819      	ldr	r1, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	011b      	lsls	r3, r3, #4
 80063be:	430b      	orrs	r3, r1
 80063c0:	4944      	ldr	r1, [pc, #272]	; (80064d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d17d      	bne.n	80064c8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80063cc:	4b41      	ldr	r3, [pc, #260]	; (80064d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a40      	ldr	r2, [pc, #256]	; (80064d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063d8:	f7fd f892 	bl	8003500 <HAL_GetTick>
 80063dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80063de:	e009      	b.n	80063f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063e0:	f7fd f88e 	bl	8003500 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d902      	bls.n	80063f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	73fb      	strb	r3, [r7, #15]
        break;
 80063f2:	e005      	b.n	8006400 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80063f4:	4b37      	ldr	r3, [pc, #220]	; (80064d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1ef      	bne.n	80063e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006400:	7bfb      	ldrb	r3, [r7, #15]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d160      	bne.n	80064c8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d111      	bne.n	8006430 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800640c:	4b31      	ldr	r3, [pc, #196]	; (80064d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6892      	ldr	r2, [r2, #8]
 800641c:	0211      	lsls	r1, r2, #8
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	68d2      	ldr	r2, [r2, #12]
 8006422:	0912      	lsrs	r2, r2, #4
 8006424:	0452      	lsls	r2, r2, #17
 8006426:	430a      	orrs	r2, r1
 8006428:	492a      	ldr	r1, [pc, #168]	; (80064d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800642a:	4313      	orrs	r3, r2
 800642c:	610b      	str	r3, [r1, #16]
 800642e:	e027      	b.n	8006480 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d112      	bne.n	800645c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006436:	4b27      	ldr	r3, [pc, #156]	; (80064d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800643e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	6892      	ldr	r2, [r2, #8]
 8006446:	0211      	lsls	r1, r2, #8
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	6912      	ldr	r2, [r2, #16]
 800644c:	0852      	lsrs	r2, r2, #1
 800644e:	3a01      	subs	r2, #1
 8006450:	0552      	lsls	r2, r2, #21
 8006452:	430a      	orrs	r2, r1
 8006454:	491f      	ldr	r1, [pc, #124]	; (80064d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006456:	4313      	orrs	r3, r2
 8006458:	610b      	str	r3, [r1, #16]
 800645a:	e011      	b.n	8006480 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800645c:	4b1d      	ldr	r3, [pc, #116]	; (80064d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006464:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	6892      	ldr	r2, [r2, #8]
 800646c:	0211      	lsls	r1, r2, #8
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6952      	ldr	r2, [r2, #20]
 8006472:	0852      	lsrs	r2, r2, #1
 8006474:	3a01      	subs	r2, #1
 8006476:	0652      	lsls	r2, r2, #25
 8006478:	430a      	orrs	r2, r1
 800647a:	4916      	ldr	r1, [pc, #88]	; (80064d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800647c:	4313      	orrs	r3, r2
 800647e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006480:	4b14      	ldr	r3, [pc, #80]	; (80064d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a13      	ldr	r2, [pc, #76]	; (80064d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006486:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800648a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800648c:	f7fd f838 	bl	8003500 <HAL_GetTick>
 8006490:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006492:	e009      	b.n	80064a8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006494:	f7fd f834 	bl	8003500 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d902      	bls.n	80064a8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	73fb      	strb	r3, [r7, #15]
          break;
 80064a6:	e005      	b.n	80064b4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80064a8:	4b0a      	ldr	r3, [pc, #40]	; (80064d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d0ef      	beq.n	8006494 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d106      	bne.n	80064c8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80064ba:	4b06      	ldr	r3, [pc, #24]	; (80064d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064bc:	691a      	ldr	r2, [r3, #16]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	4904      	ldr	r1, [pc, #16]	; (80064d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	40021000 	.word	0x40021000

080064d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80064e6:	4b6a      	ldr	r3, [pc, #424]	; (8006690 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	f003 0303 	and.w	r3, r3, #3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d018      	beq.n	8006524 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80064f2:	4b67      	ldr	r3, [pc, #412]	; (8006690 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	f003 0203 	and.w	r2, r3, #3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d10d      	bne.n	800651e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
       ||
 8006506:	2b00      	cmp	r3, #0
 8006508:	d009      	beq.n	800651e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800650a:	4b61      	ldr	r3, [pc, #388]	; (8006690 <RCCEx_PLLSAI2_Config+0x1b8>)
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	091b      	lsrs	r3, r3, #4
 8006510:	f003 0307 	and.w	r3, r3, #7
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
       ||
 800651a:	429a      	cmp	r2, r3
 800651c:	d047      	beq.n	80065ae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	73fb      	strb	r3, [r7, #15]
 8006522:	e044      	b.n	80065ae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b03      	cmp	r3, #3
 800652a:	d018      	beq.n	800655e <RCCEx_PLLSAI2_Config+0x86>
 800652c:	2b03      	cmp	r3, #3
 800652e:	d825      	bhi.n	800657c <RCCEx_PLLSAI2_Config+0xa4>
 8006530:	2b01      	cmp	r3, #1
 8006532:	d002      	beq.n	800653a <RCCEx_PLLSAI2_Config+0x62>
 8006534:	2b02      	cmp	r3, #2
 8006536:	d009      	beq.n	800654c <RCCEx_PLLSAI2_Config+0x74>
 8006538:	e020      	b.n	800657c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800653a:	4b55      	ldr	r3, [pc, #340]	; (8006690 <RCCEx_PLLSAI2_Config+0x1b8>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d11d      	bne.n	8006582 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800654a:	e01a      	b.n	8006582 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800654c:	4b50      	ldr	r3, [pc, #320]	; (8006690 <RCCEx_PLLSAI2_Config+0x1b8>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006554:	2b00      	cmp	r3, #0
 8006556:	d116      	bne.n	8006586 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800655c:	e013      	b.n	8006586 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800655e:	4b4c      	ldr	r3, [pc, #304]	; (8006690 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10f      	bne.n	800658a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800656a:	4b49      	ldr	r3, [pc, #292]	; (8006690 <RCCEx_PLLSAI2_Config+0x1b8>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d109      	bne.n	800658a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800657a:	e006      	b.n	800658a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	73fb      	strb	r3, [r7, #15]
      break;
 8006580:	e004      	b.n	800658c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006582:	bf00      	nop
 8006584:	e002      	b.n	800658c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006586:	bf00      	nop
 8006588:	e000      	b.n	800658c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800658a:	bf00      	nop
    }

    if(status == HAL_OK)
 800658c:	7bfb      	ldrb	r3, [r7, #15]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10d      	bne.n	80065ae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006592:	4b3f      	ldr	r3, [pc, #252]	; (8006690 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6819      	ldr	r1, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	3b01      	subs	r3, #1
 80065a4:	011b      	lsls	r3, r3, #4
 80065a6:	430b      	orrs	r3, r1
 80065a8:	4939      	ldr	r1, [pc, #228]	; (8006690 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d167      	bne.n	8006684 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80065b4:	4b36      	ldr	r3, [pc, #216]	; (8006690 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a35      	ldr	r2, [pc, #212]	; (8006690 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065c0:	f7fc ff9e 	bl	8003500 <HAL_GetTick>
 80065c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80065c6:	e009      	b.n	80065dc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80065c8:	f7fc ff9a 	bl	8003500 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d902      	bls.n	80065dc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	73fb      	strb	r3, [r7, #15]
        break;
 80065da:	e005      	b.n	80065e8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80065dc:	4b2c      	ldr	r3, [pc, #176]	; (8006690 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1ef      	bne.n	80065c8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d14a      	bne.n	8006684 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d111      	bne.n	8006618 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80065f4:	4b26      	ldr	r3, [pc, #152]	; (8006690 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80065fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	6892      	ldr	r2, [r2, #8]
 8006604:	0211      	lsls	r1, r2, #8
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	68d2      	ldr	r2, [r2, #12]
 800660a:	0912      	lsrs	r2, r2, #4
 800660c:	0452      	lsls	r2, r2, #17
 800660e:	430a      	orrs	r2, r1
 8006610:	491f      	ldr	r1, [pc, #124]	; (8006690 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006612:	4313      	orrs	r3, r2
 8006614:	614b      	str	r3, [r1, #20]
 8006616:	e011      	b.n	800663c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006618:	4b1d      	ldr	r3, [pc, #116]	; (8006690 <RCCEx_PLLSAI2_Config+0x1b8>)
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006620:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6892      	ldr	r2, [r2, #8]
 8006628:	0211      	lsls	r1, r2, #8
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	6912      	ldr	r2, [r2, #16]
 800662e:	0852      	lsrs	r2, r2, #1
 8006630:	3a01      	subs	r2, #1
 8006632:	0652      	lsls	r2, r2, #25
 8006634:	430a      	orrs	r2, r1
 8006636:	4916      	ldr	r1, [pc, #88]	; (8006690 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006638:	4313      	orrs	r3, r2
 800663a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800663c:	4b14      	ldr	r3, [pc, #80]	; (8006690 <RCCEx_PLLSAI2_Config+0x1b8>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a13      	ldr	r2, [pc, #76]	; (8006690 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006646:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006648:	f7fc ff5a 	bl	8003500 <HAL_GetTick>
 800664c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800664e:	e009      	b.n	8006664 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006650:	f7fc ff56 	bl	8003500 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	2b02      	cmp	r3, #2
 800665c:	d902      	bls.n	8006664 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	73fb      	strb	r3, [r7, #15]
          break;
 8006662:	e005      	b.n	8006670 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006664:	4b0a      	ldr	r3, [pc, #40]	; (8006690 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d0ef      	beq.n	8006650 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006670:	7bfb      	ldrb	r3, [r7, #15]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d106      	bne.n	8006684 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006676:	4b06      	ldr	r3, [pc, #24]	; (8006690 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006678:	695a      	ldr	r2, [r3, #20]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	4904      	ldr	r1, [pc, #16]	; (8006690 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006680:	4313      	orrs	r3, r2
 8006682:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006684:	7bfb      	ldrb	r3, [r7, #15]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	40021000 	.word	0x40021000

08006694 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d06c      	beq.n	8006780 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d106      	bne.n	80066c0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7fc fb1c 	bl	8002cf8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2202      	movs	r2, #2
 80066c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	22ca      	movs	r2, #202	; 0xca
 80066ce:	625a      	str	r2, [r3, #36]	; 0x24
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2253      	movs	r2, #83	; 0x53
 80066d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fa49 	bl	8006b70 <RTC_EnterInitMode>
 80066de:	4603      	mov	r3, r0
 80066e0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80066e2:	7bfb      	ldrb	r3, [r7, #15]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d14b      	bne.n	8006780 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	6812      	ldr	r2, [r2, #0]
 80066f2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066fa:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6899      	ldr	r1, [r3, #8]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	431a      	orrs	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	431a      	orrs	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	68d2      	ldr	r2, [r2, #12]
 8006722:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6919      	ldr	r1, [r3, #16]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	041a      	lsls	r2, r3, #16
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	430a      	orrs	r2, r1
 8006736:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 fa4d 	bl	8006bd8 <RTC_ExitInitMode>
 800673e:	4603      	mov	r3, r0
 8006740:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006742:	7bfb      	ldrb	r3, [r7, #15]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d11b      	bne.n	8006780 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f022 0203 	bic.w	r2, r2, #3
 8006756:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	69da      	ldr	r2, [r3, #28]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	431a      	orrs	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	22ff      	movs	r2, #255	; 0xff
 8006776:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8006780:	7bfb      	ldrb	r3, [r7, #15]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800678a:	b590      	push	{r4, r7, lr}
 800678c:	b087      	sub	sp, #28
 800678e:	af00      	add	r7, sp, #0
 8006790:	60f8      	str	r0, [r7, #12]
 8006792:	60b9      	str	r1, [r7, #8]
 8006794:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f893 3020 	ldrb.w	r3, [r3, #32]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d101      	bne.n	80067a4 <HAL_RTC_SetTime+0x1a>
 80067a0:	2302      	movs	r3, #2
 80067a2:	e08b      	b.n	80068bc <HAL_RTC_SetTime+0x132>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2202      	movs	r2, #2
 80067b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	22ca      	movs	r2, #202	; 0xca
 80067ba:	625a      	str	r2, [r3, #36]	; 0x24
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2253      	movs	r2, #83	; 0x53
 80067c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 f9d3 	bl	8006b70 <RTC_EnterInitMode>
 80067ca:	4603      	mov	r3, r0
 80067cc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80067ce:	7cfb      	ldrb	r3, [r7, #19]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d163      	bne.n	800689c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d126      	bne.n	8006828 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d102      	bne.n	80067ee <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2200      	movs	r2, #0
 80067ec:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 fa2e 	bl	8006c54 <RTC_ByteToBcd2>
 80067f8:	4603      	mov	r3, r0
 80067fa:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	785b      	ldrb	r3, [r3, #1]
 8006800:	4618      	mov	r0, r3
 8006802:	f000 fa27 	bl	8006c54 <RTC_ByteToBcd2>
 8006806:	4603      	mov	r3, r0
 8006808:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800680a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	789b      	ldrb	r3, [r3, #2]
 8006810:	4618      	mov	r0, r3
 8006812:	f000 fa1f 	bl	8006c54 <RTC_ByteToBcd2>
 8006816:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006818:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	78db      	ldrb	r3, [r3, #3]
 8006820:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006822:	4313      	orrs	r3, r2
 8006824:	617b      	str	r3, [r7, #20]
 8006826:	e018      	b.n	800685a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006832:	2b00      	cmp	r3, #0
 8006834:	d102      	bne.n	800683c <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2200      	movs	r2, #0
 800683a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	785b      	ldrb	r3, [r3, #1]
 8006846:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006848:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800684e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	78db      	ldrb	r3, [r3, #3]
 8006854:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006856:	4313      	orrs	r3, r2
 8006858:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006864:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006868:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006878:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	6899      	ldr	r1, [r3, #8]
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	68da      	ldr	r2, [r3, #12]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	431a      	orrs	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f000 f9a0 	bl	8006bd8 <RTC_ExitInitMode>
 8006898:	4603      	mov	r3, r0
 800689a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	22ff      	movs	r2, #255	; 0xff
 80068a2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80068a4:	7cfb      	ldrb	r3, [r7, #19]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d103      	bne.n	80068b2 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80068ba:	7cfb      	ldrb	r3, [r7, #19]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	371c      	adds	r7, #28
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd90      	pop	{r4, r7, pc}

080068c4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80068f2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80068f6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	0c1b      	lsrs	r3, r3, #16
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006902:	b2da      	uxtb	r2, r3
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	0a1b      	lsrs	r3, r3, #8
 800690c:	b2db      	uxtb	r3, r3
 800690e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006912:	b2da      	uxtb	r2, r3
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	b2db      	uxtb	r3, r3
 800691c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006920:	b2da      	uxtb	r2, r3
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	0d9b      	lsrs	r3, r3, #22
 800692a:	b2db      	uxtb	r3, r3
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	b2da      	uxtb	r2, r3
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d11a      	bne.n	8006972 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	4618      	mov	r0, r3
 8006942:	f000 f9a7 	bl	8006c94 <RTC_Bcd2ToByte>
 8006946:	4603      	mov	r3, r0
 8006948:	461a      	mov	r2, r3
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	785b      	ldrb	r3, [r3, #1]
 8006952:	4618      	mov	r0, r3
 8006954:	f000 f99e 	bl	8006c94 <RTC_Bcd2ToByte>
 8006958:	4603      	mov	r3, r0
 800695a:	461a      	mov	r2, r3
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	789b      	ldrb	r3, [r3, #2]
 8006964:	4618      	mov	r0, r3
 8006966:	f000 f995 	bl	8006c94 <RTC_Bcd2ToByte>
 800696a:	4603      	mov	r3, r0
 800696c:	461a      	mov	r2, r3
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3718      	adds	r7, #24
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800697c:	b590      	push	{r4, r7, lr}
 800697e:	b087      	sub	sp, #28
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d101      	bne.n	8006996 <HAL_RTC_SetDate+0x1a>
 8006992:	2302      	movs	r3, #2
 8006994:	e075      	b.n	8006a82 <HAL_RTC_SetDate+0x106>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2202      	movs	r2, #2
 80069a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10e      	bne.n	80069ca <HAL_RTC_SetDate+0x4e>
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	785b      	ldrb	r3, [r3, #1]
 80069b0:	f003 0310 	and.w	r3, r3, #16
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d008      	beq.n	80069ca <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	785b      	ldrb	r3, [r3, #1]
 80069bc:	f023 0310 	bic.w	r3, r3, #16
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	330a      	adds	r3, #10
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d11c      	bne.n	8006a0a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	78db      	ldrb	r3, [r3, #3]
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 f93d 	bl	8006c54 <RTC_ByteToBcd2>
 80069da:	4603      	mov	r3, r0
 80069dc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	785b      	ldrb	r3, [r3, #1]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 f936 	bl	8006c54 <RTC_ByteToBcd2>
 80069e8:	4603      	mov	r3, r0
 80069ea:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80069ec:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	789b      	ldrb	r3, [r3, #2]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 f92e 	bl	8006c54 <RTC_ByteToBcd2>
 80069f8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80069fa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006a04:	4313      	orrs	r3, r2
 8006a06:	617b      	str	r3, [r7, #20]
 8006a08:	e00e      	b.n	8006a28 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	78db      	ldrb	r3, [r3, #3]
 8006a0e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	785b      	ldrb	r3, [r3, #1]
 8006a14:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006a16:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006a1c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006a24:	4313      	orrs	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	22ca      	movs	r2, #202	; 0xca
 8006a2e:	625a      	str	r2, [r3, #36]	; 0x24
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2253      	movs	r2, #83	; 0x53
 8006a36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f000 f899 	bl	8006b70 <RTC_EnterInitMode>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006a42:	7cfb      	ldrb	r3, [r7, #19]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10c      	bne.n	8006a62 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006a52:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006a56:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f000 f8bd 	bl	8006bd8 <RTC_ExitInitMode>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	22ff      	movs	r2, #255	; 0xff
 8006a68:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006a6a:	7cfb      	ldrb	r3, [r7, #19]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d103      	bne.n	8006a78 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006a80:	7cfb      	ldrb	r3, [r7, #19]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	371c      	adds	r7, #28
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd90      	pop	{r4, r7, pc}

08006a8a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b086      	sub	sp, #24
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	60f8      	str	r0, [r7, #12]
 8006a92:	60b9      	str	r1, [r7, #8]
 8006a94:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006aa0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006aa4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	0c1b      	lsrs	r3, r3, #16
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	0a1b      	lsrs	r3, r3, #8
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	f003 031f 	and.w	r3, r3, #31
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	0b5b      	lsrs	r3, r3, #13
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	f003 0307 	and.w	r3, r3, #7
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d11a      	bne.n	8006b1a <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	78db      	ldrb	r3, [r3, #3]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f000 f8d3 	bl	8006c94 <RTC_Bcd2ToByte>
 8006aee:	4603      	mov	r3, r0
 8006af0:	461a      	mov	r2, r3
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	785b      	ldrb	r3, [r3, #1]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 f8ca 	bl	8006c94 <RTC_Bcd2ToByte>
 8006b00:	4603      	mov	r3, r0
 8006b02:	461a      	mov	r2, r3
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	789b      	ldrb	r3, [r3, #2]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 f8c1 	bl	8006c94 <RTC_Bcd2ToByte>
 8006b12:	4603      	mov	r3, r0
 8006b14:	461a      	mov	r2, r3
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68da      	ldr	r2, [r3, #12]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b3a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8006b3c:	f7fc fce0 	bl	8003500 <HAL_GetTick>
 8006b40:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006b42:	e009      	b.n	8006b58 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b44:	f7fc fcdc 	bl	8003500 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b52:	d901      	bls.n	8006b58 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e007      	b.n	8006b68 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	f003 0320 	and.w	r3, r3, #32
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d0ee      	beq.n	8006b44 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d120      	bne.n	8006bcc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b92:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006b94:	f7fc fcb4 	bl	8003500 <HAL_GetTick>
 8006b98:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006b9a:	e00d      	b.n	8006bb8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006b9c:	f7fc fcb0 	bl	8003500 <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006baa:	d905      	bls.n	8006bb8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2203      	movs	r2, #3
 8006bb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d102      	bne.n	8006bcc <RTC_EnterInitMode+0x5c>
 8006bc6:	7bfb      	ldrb	r3, [r7, #15]
 8006bc8:	2b03      	cmp	r3, #3
 8006bca:	d1e7      	bne.n	8006b9c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
	...

08006bd8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006be0:	2300      	movs	r3, #0
 8006be2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006be4:	4b1a      	ldr	r3, [pc, #104]	; (8006c50 <RTC_ExitInitMode+0x78>)
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	4a19      	ldr	r2, [pc, #100]	; (8006c50 <RTC_ExitInitMode+0x78>)
 8006bea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bee:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006bf0:	4b17      	ldr	r3, [pc, #92]	; (8006c50 <RTC_ExitInitMode+0x78>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f003 0320 	and.w	r3, r3, #32
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10c      	bne.n	8006c16 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7ff ff91 	bl	8006b24 <HAL_RTC_WaitForSynchro>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d01e      	beq.n	8006c46 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2203      	movs	r2, #3
 8006c0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	73fb      	strb	r3, [r7, #15]
 8006c14:	e017      	b.n	8006c46 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006c16:	4b0e      	ldr	r3, [pc, #56]	; (8006c50 <RTC_ExitInitMode+0x78>)
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	4a0d      	ldr	r2, [pc, #52]	; (8006c50 <RTC_ExitInitMode+0x78>)
 8006c1c:	f023 0320 	bic.w	r3, r3, #32
 8006c20:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7ff ff7e 	bl	8006b24 <HAL_RTC_WaitForSynchro>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d005      	beq.n	8006c3a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2203      	movs	r2, #3
 8006c32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006c3a:	4b05      	ldr	r3, [pc, #20]	; (8006c50 <RTC_ExitInitMode+0x78>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	4a04      	ldr	r2, [pc, #16]	; (8006c50 <RTC_ExitInitMode+0x78>)
 8006c40:	f043 0320 	orr.w	r3, r3, #32
 8006c44:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	40002800 	.word	0x40002800

08006c54 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8006c62:	79fb      	ldrb	r3, [r7, #7]
 8006c64:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8006c66:	e005      	b.n	8006c74 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8006c6e:	7afb      	ldrb	r3, [r7, #11]
 8006c70:	3b0a      	subs	r3, #10
 8006c72:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006c74:	7afb      	ldrb	r3, [r7, #11]
 8006c76:	2b09      	cmp	r3, #9
 8006c78:	d8f6      	bhi.n	8006c68 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	011b      	lsls	r3, r3, #4
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	7afb      	ldrb	r3, [r7, #11]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	b2db      	uxtb	r3, r3
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8006c9e:	79fb      	ldrb	r3, [r7, #7]
 8006ca0:	091b      	lsrs	r3, r3, #4
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	0092      	lsls	r2, r2, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	005b      	lsls	r3, r3, #1
 8006cac:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8006cae:	79fb      	ldrb	r3, [r7, #7]
 8006cb0:	f003 030f 	and.w	r3, r3, #15
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	7bfb      	ldrb	r3, [r7, #15]
 8006cb8:	4413      	add	r3, r2
 8006cba:	b2db      	uxtb	r3, r3
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e095      	b.n	8006e06 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d108      	bne.n	8006cf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cea:	d009      	beq.n	8006d00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	61da      	str	r2, [r3, #28]
 8006cf2:	e005      	b.n	8006d00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d106      	bne.n	8006d20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7fc f81e 	bl	8002d5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2202      	movs	r2, #2
 8006d24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d40:	d902      	bls.n	8006d48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d42:	2300      	movs	r3, #0
 8006d44:	60fb      	str	r3, [r7, #12]
 8006d46:	e002      	b.n	8006d4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006d56:	d007      	beq.n	8006d68 <HAL_SPI_Init+0xa0>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d60:	d002      	beq.n	8006d68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006d78:	431a      	orrs	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	f003 0302 	and.w	r3, r3, #2
 8006d82:	431a      	orrs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d96:	431a      	orrs	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	69db      	ldr	r3, [r3, #28]
 8006d9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006da0:	431a      	orrs	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006daa:	ea42 0103 	orr.w	r1, r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	0c1b      	lsrs	r3, r3, #16
 8006dc4:	f003 0204 	and.w	r2, r3, #4
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dcc:	f003 0310 	and.w	r3, r3, #16
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd6:	f003 0308 	and.w	r3, r3, #8
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006de4:	ea42 0103 	orr.w	r1, r2, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	430a      	orrs	r2, r1
 8006df4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b082      	sub	sp, #8
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e01a      	b.n	8006e56 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2202      	movs	r2, #2
 8006e24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e36:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7fb ffdb 	bl	8002df4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b088      	sub	sp, #32
 8006e62:	af02      	add	r7, sp, #8
 8006e64:	60f8      	str	r0, [r7, #12]
 8006e66:	60b9      	str	r1, [r7, #8]
 8006e68:	603b      	str	r3, [r7, #0]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e7a:	d112      	bne.n	8006ea2 <HAL_SPI_Receive+0x44>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10e      	bne.n	8006ea2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2204      	movs	r2, #4
 8006e88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006e8c:	88fa      	ldrh	r2, [r7, #6]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	4613      	mov	r3, r2
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	68b9      	ldr	r1, [r7, #8]
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f000 f910 	bl	80070be <HAL_SPI_TransmitReceive>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	e109      	b.n	80070b6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d101      	bne.n	8006eb0 <HAL_SPI_Receive+0x52>
 8006eac:	2302      	movs	r3, #2
 8006eae:	e102      	b.n	80070b6 <HAL_SPI_Receive+0x258>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006eb8:	f7fc fb22 	bl	8003500 <HAL_GetTick>
 8006ebc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d002      	beq.n	8006ed0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006eca:	2302      	movs	r3, #2
 8006ecc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ece:	e0e9      	b.n	80070a4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d002      	beq.n	8006edc <HAL_SPI_Receive+0x7e>
 8006ed6:	88fb      	ldrh	r3, [r7, #6]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d102      	bne.n	8006ee2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ee0:	e0e0      	b.n	80070a4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2204      	movs	r2, #4
 8006ee6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	88fa      	ldrh	r2, [r7, #6]
 8006efa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	88fa      	ldrh	r2, [r7, #6]
 8006f02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f2c:	d908      	bls.n	8006f40 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f3c:	605a      	str	r2, [r3, #4]
 8006f3e:	e007      	b.n	8006f50 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685a      	ldr	r2, [r3, #4]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f4e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f58:	d10f      	bne.n	8006f7a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f78:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f84:	2b40      	cmp	r3, #64	; 0x40
 8006f86:	d007      	beq.n	8006f98 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f96:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006fa0:	d867      	bhi.n	8007072 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006fa2:	e030      	b.n	8007006 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d117      	bne.n	8006fe2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f103 020c 	add.w	r2, r3, #12
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbe:	7812      	ldrb	r2, [r2, #0]
 8006fc0:	b2d2      	uxtb	r2, r2
 8006fc2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc8:	1c5a      	adds	r2, r3, #1
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006fe0:	e011      	b.n	8007006 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fe2:	f7fc fa8d 	bl	8003500 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d803      	bhi.n	8006ffa <HAL_SPI_Receive+0x19c>
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff8:	d102      	bne.n	8007000 <HAL_SPI_Receive+0x1a2>
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d102      	bne.n	8007006 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007004:	e04e      	b.n	80070a4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800700c:	b29b      	uxth	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1c8      	bne.n	8006fa4 <HAL_SPI_Receive+0x146>
 8007012:	e034      	b.n	800707e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b01      	cmp	r3, #1
 8007020:	d115      	bne.n	800704e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68da      	ldr	r2, [r3, #12]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702c:	b292      	uxth	r2, r2
 800702e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007034:	1c9a      	adds	r2, r3, #2
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007040:	b29b      	uxth	r3, r3
 8007042:	3b01      	subs	r3, #1
 8007044:	b29a      	uxth	r2, r3
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800704c:	e011      	b.n	8007072 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800704e:	f7fc fa57 	bl	8003500 <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	683a      	ldr	r2, [r7, #0]
 800705a:	429a      	cmp	r2, r3
 800705c:	d803      	bhi.n	8007066 <HAL_SPI_Receive+0x208>
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007064:	d102      	bne.n	800706c <HAL_SPI_Receive+0x20e>
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d102      	bne.n	8007072 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007070:	e018      	b.n	80070a4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007078:	b29b      	uxth	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1ca      	bne.n	8007014 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f000 fffe 	bl	8008084 <SPI_EndRxTransaction>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d002      	beq.n	8007094 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2220      	movs	r2, #32
 8007092:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007098:	2b00      	cmp	r3, #0
 800709a:	d002      	beq.n	80070a2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	75fb      	strb	r3, [r7, #23]
 80070a0:	e000      	b.n	80070a4 <HAL_SPI_Receive+0x246>
  }

error :
 80070a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80070b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3718      	adds	r7, #24
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b08a      	sub	sp, #40	; 0x28
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	60f8      	str	r0, [r7, #12]
 80070c6:	60b9      	str	r1, [r7, #8]
 80070c8:	607a      	str	r2, [r7, #4]
 80070ca:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80070cc:	2301      	movs	r3, #1
 80070ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d101      	bne.n	80070e4 <HAL_SPI_TransmitReceive+0x26>
 80070e0:	2302      	movs	r3, #2
 80070e2:	e1fb      	b.n	80074dc <HAL_SPI_TransmitReceive+0x41e>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070ec:	f7fc fa08 	bl	8003500 <HAL_GetTick>
 80070f0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80070f8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007100:	887b      	ldrh	r3, [r7, #2]
 8007102:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007104:	887b      	ldrh	r3, [r7, #2]
 8007106:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007108:	7efb      	ldrb	r3, [r7, #27]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d00e      	beq.n	800712c <HAL_SPI_TransmitReceive+0x6e>
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007114:	d106      	bne.n	8007124 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d102      	bne.n	8007124 <HAL_SPI_TransmitReceive+0x66>
 800711e:	7efb      	ldrb	r3, [r7, #27]
 8007120:	2b04      	cmp	r3, #4
 8007122:	d003      	beq.n	800712c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007124:	2302      	movs	r3, #2
 8007126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800712a:	e1cd      	b.n	80074c8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d005      	beq.n	800713e <HAL_SPI_TransmitReceive+0x80>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <HAL_SPI_TransmitReceive+0x80>
 8007138:	887b      	ldrh	r3, [r7, #2]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d103      	bne.n	8007146 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007144:	e1c0      	b.n	80074c8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b04      	cmp	r3, #4
 8007150:	d003      	beq.n	800715a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2205      	movs	r2, #5
 8007156:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	887a      	ldrh	r2, [r7, #2]
 800716a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	887a      	ldrh	r2, [r7, #2]
 8007172:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	887a      	ldrh	r2, [r7, #2]
 8007180:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	887a      	ldrh	r2, [r7, #2]
 8007186:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800719c:	d802      	bhi.n	80071a4 <HAL_SPI_TransmitReceive+0xe6>
 800719e:	8a3b      	ldrh	r3, [r7, #16]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d908      	bls.n	80071b6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	685a      	ldr	r2, [r3, #4]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80071b2:	605a      	str	r2, [r3, #4]
 80071b4:	e007      	b.n	80071c6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80071c4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d0:	2b40      	cmp	r3, #64	; 0x40
 80071d2:	d007      	beq.n	80071e4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071ec:	d97c      	bls.n	80072e8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d002      	beq.n	80071fc <HAL_SPI_TransmitReceive+0x13e>
 80071f6:	8a7b      	ldrh	r3, [r7, #18]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d169      	bne.n	80072d0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007200:	881a      	ldrh	r2, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720c:	1c9a      	adds	r2, r3, #2
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007216:	b29b      	uxth	r3, r3
 8007218:	3b01      	subs	r3, #1
 800721a:	b29a      	uxth	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007220:	e056      	b.n	80072d0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	2b02      	cmp	r3, #2
 800722e:	d11b      	bne.n	8007268 <HAL_SPI_TransmitReceive+0x1aa>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007234:	b29b      	uxth	r3, r3
 8007236:	2b00      	cmp	r3, #0
 8007238:	d016      	beq.n	8007268 <HAL_SPI_TransmitReceive+0x1aa>
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	2b01      	cmp	r3, #1
 800723e:	d113      	bne.n	8007268 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007244:	881a      	ldrh	r2, [r3, #0]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007250:	1c9a      	adds	r2, r3, #2
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800725a:	b29b      	uxth	r3, r3
 800725c:	3b01      	subs	r3, #1
 800725e:	b29a      	uxth	r2, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b01      	cmp	r3, #1
 8007274:	d11c      	bne.n	80072b0 <HAL_SPI_TransmitReceive+0x1f2>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800727c:	b29b      	uxth	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	d016      	beq.n	80072b0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68da      	ldr	r2, [r3, #12]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728c:	b292      	uxth	r2, r2
 800728e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007294:	1c9a      	adds	r2, r3, #2
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	3b01      	subs	r3, #1
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072ac:	2301      	movs	r3, #1
 80072ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80072b0:	f7fc f926 	bl	8003500 <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072bc:	429a      	cmp	r2, r3
 80072be:	d807      	bhi.n	80072d0 <HAL_SPI_TransmitReceive+0x212>
 80072c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c6:	d003      	beq.n	80072d0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80072ce:	e0fb      	b.n	80074c8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1a3      	bne.n	8007222 <HAL_SPI_TransmitReceive+0x164>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d19d      	bne.n	8007222 <HAL_SPI_TransmitReceive+0x164>
 80072e6:	e0df      	b.n	80074a8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d003      	beq.n	80072f8 <HAL_SPI_TransmitReceive+0x23a>
 80072f0:	8a7b      	ldrh	r3, [r7, #18]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	f040 80cb 	bne.w	800748e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d912      	bls.n	8007328 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007306:	881a      	ldrh	r2, [r3, #0]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007312:	1c9a      	adds	r2, r3, #2
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800731c:	b29b      	uxth	r3, r3
 800731e:	3b02      	subs	r3, #2
 8007320:	b29a      	uxth	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007326:	e0b2      	b.n	800748e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	330c      	adds	r3, #12
 8007332:	7812      	ldrb	r2, [r2, #0]
 8007334:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733a:	1c5a      	adds	r2, r3, #1
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007344:	b29b      	uxth	r3, r3
 8007346:	3b01      	subs	r3, #1
 8007348:	b29a      	uxth	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800734e:	e09e      	b.n	800748e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b02      	cmp	r3, #2
 800735c:	d134      	bne.n	80073c8 <HAL_SPI_TransmitReceive+0x30a>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007362:	b29b      	uxth	r3, r3
 8007364:	2b00      	cmp	r3, #0
 8007366:	d02f      	beq.n	80073c8 <HAL_SPI_TransmitReceive+0x30a>
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	2b01      	cmp	r3, #1
 800736c:	d12c      	bne.n	80073c8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007372:	b29b      	uxth	r3, r3
 8007374:	2b01      	cmp	r3, #1
 8007376:	d912      	bls.n	800739e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737c:	881a      	ldrh	r2, [r3, #0]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007388:	1c9a      	adds	r2, r3, #2
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007392:	b29b      	uxth	r3, r3
 8007394:	3b02      	subs	r3, #2
 8007396:	b29a      	uxth	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800739c:	e012      	b.n	80073c4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	330c      	adds	r3, #12
 80073a8:	7812      	ldrb	r2, [r2, #0]
 80073aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b0:	1c5a      	adds	r2, r3, #1
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	3b01      	subs	r3, #1
 80073be:	b29a      	uxth	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d148      	bne.n	8007468 <HAL_SPI_TransmitReceive+0x3aa>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d042      	beq.n	8007468 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d923      	bls.n	8007436 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68da      	ldr	r2, [r3, #12]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f8:	b292      	uxth	r2, r2
 80073fa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007400:	1c9a      	adds	r2, r3, #2
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800740c:	b29b      	uxth	r3, r3
 800740e:	3b02      	subs	r3, #2
 8007410:	b29a      	uxth	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800741e:	b29b      	uxth	r3, r3
 8007420:	2b01      	cmp	r3, #1
 8007422:	d81f      	bhi.n	8007464 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007432:	605a      	str	r2, [r3, #4]
 8007434:	e016      	b.n	8007464 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f103 020c 	add.w	r2, r3, #12
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007442:	7812      	ldrb	r2, [r2, #0]
 8007444:	b2d2      	uxtb	r2, r2
 8007446:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744c:	1c5a      	adds	r2, r3, #1
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007458:	b29b      	uxth	r3, r3
 800745a:	3b01      	subs	r3, #1
 800745c:	b29a      	uxth	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007464:	2301      	movs	r3, #1
 8007466:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007468:	f7fc f84a 	bl	8003500 <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007474:	429a      	cmp	r2, r3
 8007476:	d803      	bhi.n	8007480 <HAL_SPI_TransmitReceive+0x3c2>
 8007478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747e:	d102      	bne.n	8007486 <HAL_SPI_TransmitReceive+0x3c8>
 8007480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007482:	2b00      	cmp	r3, #0
 8007484:	d103      	bne.n	800748e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800748c:	e01c      	b.n	80074c8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007492:	b29b      	uxth	r3, r3
 8007494:	2b00      	cmp	r3, #0
 8007496:	f47f af5b 	bne.w	8007350 <HAL_SPI_TransmitReceive+0x292>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f47f af54 	bne.w	8007350 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074a8:	69fa      	ldr	r2, [r7, #28]
 80074aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f000 fe41 	bl	8008134 <SPI_EndRxTxTransaction>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d006      	beq.n	80074c6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2220      	movs	r2, #32
 80074c2:	661a      	str	r2, [r3, #96]	; 0x60
 80074c4:	e000      	b.n	80074c8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80074c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80074d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3728      	adds	r7, #40	; 0x28
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b087      	sub	sp, #28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	4613      	mov	r3, r2
 80074f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80074f2:	2300      	movs	r3, #0
 80074f4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d101      	bne.n	8007504 <HAL_SPI_Transmit_IT+0x20>
 8007500:	2302      	movs	r3, #2
 8007502:	e072      	b.n	80075ea <HAL_SPI_Transmit_IT+0x106>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <HAL_SPI_Transmit_IT+0x34>
 8007512:	88fb      	ldrh	r3, [r7, #6]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d102      	bne.n	800751e <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800751c:	e060      	b.n	80075e0 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b01      	cmp	r3, #1
 8007528:	d002      	beq.n	8007530 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800752a:	2302      	movs	r3, #2
 800752c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800752e:	e057      	b.n	80075e0 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2203      	movs	r2, #3
 8007534:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	88fa      	ldrh	r2, [r7, #6]
 8007548:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	88fa      	ldrh	r2, [r7, #6]
 800754e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007574:	d903      	bls.n	800757e <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	4a1f      	ldr	r2, [pc, #124]	; (80075f8 <HAL_SPI_Transmit_IT+0x114>)
 800757a:	651a      	str	r2, [r3, #80]	; 0x50
 800757c:	e002      	b.n	8007584 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	4a1e      	ldr	r2, [pc, #120]	; (80075fc <HAL_SPI_Transmit_IT+0x118>)
 8007582:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800758c:	d10f      	bne.n	80075ae <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800759c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	685a      	ldr	r2, [r3, #4]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80075bc:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c8:	2b40      	cmp	r3, #64	; 0x40
 80075ca:	d008      	beq.n	80075de <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	e000      	b.n	80075e0 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 80075de:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80075e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	371c      	adds	r7, #28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	08007e0b 	.word	0x08007e0b
 80075fc:	08007dc5 	.word	0x08007dc5

08007600 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	4613      	mov	r3, r2
 800760c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800760e:	2300      	movs	r3, #0
 8007610:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d110      	bne.n	800763c <HAL_SPI_Receive_IT+0x3c>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007622:	d10b      	bne.n	800763c <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2204      	movs	r2, #4
 8007628:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800762c:	88fb      	ldrh	r3, [r7, #6]
 800762e:	68ba      	ldr	r2, [r7, #8]
 8007630:	68b9      	ldr	r1, [r7, #8]
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f000 f894 	bl	8007760 <HAL_SPI_TransmitReceive_IT>
 8007638:	4603      	mov	r3, r0
 800763a:	e089      	b.n	8007750 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007642:	2b01      	cmp	r3, #1
 8007644:	d101      	bne.n	800764a <HAL_SPI_Receive_IT+0x4a>
 8007646:	2302      	movs	r3, #2
 8007648:	e082      	b.n	8007750 <HAL_SPI_Receive_IT+0x150>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b01      	cmp	r3, #1
 800765c:	d002      	beq.n	8007664 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800765e:	2302      	movs	r3, #2
 8007660:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007662:	e070      	b.n	8007746 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d002      	beq.n	8007670 <HAL_SPI_Receive_IT+0x70>
 800766a:	88fb      	ldrh	r3, [r7, #6]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d102      	bne.n	8007676 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007674:	e067      	b.n	8007746 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2204      	movs	r2, #4
 800767a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	88fa      	ldrh	r2, [r7, #6]
 800768e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	88fa      	ldrh	r2, [r7, #6]
 8007696:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80076ba:	d90b      	bls.n	80076d4 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	685a      	ldr	r2, [r3, #4]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076ca:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4a22      	ldr	r2, [pc, #136]	; (8007758 <HAL_SPI_Receive_IT+0x158>)
 80076d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80076d2:	e00a      	b.n	80076ea <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076e2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	4a1d      	ldr	r2, [pc, #116]	; (800775c <HAL_SPI_Receive_IT+0x15c>)
 80076e8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076f2:	d10f      	bne.n	8007714 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007702:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007712:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	685a      	ldr	r2, [r3, #4]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007722:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800772e:	2b40      	cmp	r3, #64	; 0x40
 8007730:	d008      	beq.n	8007744 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007740:	601a      	str	r2, [r3, #0]
 8007742:	e000      	b.n	8007746 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8007744:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800774e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3718      	adds	r7, #24
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	08007d79 	.word	0x08007d79
 800775c:	08007d29 	.word	0x08007d29

08007760 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8007760:	b480      	push	{r7}
 8007762:	b087      	sub	sp, #28
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
 800776c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007778:	2b01      	cmp	r3, #1
 800777a:	d101      	bne.n	8007780 <HAL_SPI_TransmitReceive_IT+0x20>
 800777c:	2302      	movs	r3, #2
 800777e:	e091      	b.n	80078a4 <HAL_SPI_TransmitReceive_IT+0x144>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800778e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007796:	7dbb      	ldrb	r3, [r7, #22]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d00d      	beq.n	80077b8 <HAL_SPI_TransmitReceive_IT+0x58>
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077a2:	d106      	bne.n	80077b2 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d102      	bne.n	80077b2 <HAL_SPI_TransmitReceive_IT+0x52>
 80077ac:	7dbb      	ldrb	r3, [r7, #22]
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	d002      	beq.n	80077b8 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80077b2:	2302      	movs	r3, #2
 80077b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077b6:	e070      	b.n	800789a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d005      	beq.n	80077ca <HAL_SPI_TransmitReceive_IT+0x6a>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d002      	beq.n	80077ca <HAL_SPI_TransmitReceive_IT+0x6a>
 80077c4:	887b      	ldrh	r3, [r7, #2]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d102      	bne.n	80077d0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077ce:	e064      	b.n	800789a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b04      	cmp	r3, #4
 80077da:	d003      	beq.n	80077e4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2205      	movs	r2, #5
 80077e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	887a      	ldrh	r2, [r7, #2]
 80077f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	887a      	ldrh	r2, [r7, #2]
 80077fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	887a      	ldrh	r2, [r7, #2]
 8007806:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	887a      	ldrh	r2, [r7, #2]
 800780e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800781a:	d906      	bls.n	800782a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	4a24      	ldr	r2, [pc, #144]	; (80078b0 <HAL_SPI_TransmitReceive_IT+0x150>)
 8007820:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	4a23      	ldr	r2, [pc, #140]	; (80078b4 <HAL_SPI_TransmitReceive_IT+0x154>)
 8007826:	651a      	str	r2, [r3, #80]	; 0x50
 8007828:	e005      	b.n	8007836 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	4a22      	ldr	r2, [pc, #136]	; (80078b8 <HAL_SPI_TransmitReceive_IT+0x158>)
 800782e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4a22      	ldr	r2, [pc, #136]	; (80078bc <HAL_SPI_TransmitReceive_IT+0x15c>)
 8007834:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800783e:	d802      	bhi.n	8007846 <HAL_SPI_TransmitReceive_IT+0xe6>
 8007840:	887b      	ldrh	r3, [r7, #2]
 8007842:	2b01      	cmp	r3, #1
 8007844:	d908      	bls.n	8007858 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	685a      	ldr	r2, [r3, #4]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007854:	605a      	str	r2, [r3, #4]
 8007856:	e007      	b.n	8007868 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	685a      	ldr	r2, [r3, #4]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007866:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	685a      	ldr	r2, [r3, #4]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8007876:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007882:	2b40      	cmp	r3, #64	; 0x40
 8007884:	d008      	beq.n	8007898 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007894:	601a      	str	r2, [r3, #0]
 8007896:	e000      	b.n	800789a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8007898:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80078a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	371c      	adds	r7, #28
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	08007c63 	.word	0x08007c63
 80078b4:	08007cc9 	.word	0x08007cc9
 80078b8:	08007b13 	.word	0x08007b13
 80078bc:	08007bd1 	.word	0x08007bd1

080078c0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b088      	sub	sp, #32
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	099b      	lsrs	r3, r3, #6
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d10f      	bne.n	8007904 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00a      	beq.n	8007904 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	099b      	lsrs	r3, r3, #6
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d004      	beq.n	8007904 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	4798      	blx	r3
    return;
 8007902:	e0d7      	b.n	8007ab4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	085b      	lsrs	r3, r3, #1
 8007908:	f003 0301 	and.w	r3, r3, #1
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00a      	beq.n	8007926 <HAL_SPI_IRQHandler+0x66>
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	09db      	lsrs	r3, r3, #7
 8007914:	f003 0301 	and.w	r3, r3, #1
 8007918:	2b00      	cmp	r3, #0
 800791a:	d004      	beq.n	8007926 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	4798      	blx	r3
    return;
 8007924:	e0c6      	b.n	8007ab4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	095b      	lsrs	r3, r3, #5
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10c      	bne.n	800794c <HAL_SPI_IRQHandler+0x8c>
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	099b      	lsrs	r3, r3, #6
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	2b00      	cmp	r3, #0
 800793c:	d106      	bne.n	800794c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	0a1b      	lsrs	r3, r3, #8
 8007942:	f003 0301 	and.w	r3, r3, #1
 8007946:	2b00      	cmp	r3, #0
 8007948:	f000 80b4 	beq.w	8007ab4 <HAL_SPI_IRQHandler+0x1f4>
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	095b      	lsrs	r3, r3, #5
 8007950:	f003 0301 	and.w	r3, r3, #1
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 80ad 	beq.w	8007ab4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	099b      	lsrs	r3, r3, #6
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	2b00      	cmp	r3, #0
 8007964:	d023      	beq.n	80079ae <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b03      	cmp	r3, #3
 8007970:	d011      	beq.n	8007996 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007976:	f043 0204 	orr.w	r2, r3, #4
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800797e:	2300      	movs	r3, #0
 8007980:	617b      	str	r3, [r7, #20]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	617b      	str	r3, [r7, #20]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	617b      	str	r3, [r7, #20]
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	e00b      	b.n	80079ae <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007996:	2300      	movs	r3, #0
 8007998:	613b      	str	r3, [r7, #16]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	613b      	str	r3, [r7, #16]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	613b      	str	r3, [r7, #16]
 80079aa:	693b      	ldr	r3, [r7, #16]
        return;
 80079ac:	e082      	b.n	8007ab4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	095b      	lsrs	r3, r3, #5
 80079b2:	f003 0301 	and.w	r3, r3, #1
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d014      	beq.n	80079e4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079be:	f043 0201 	orr.w	r2, r3, #1
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80079c6:	2300      	movs	r3, #0
 80079c8:	60fb      	str	r3, [r7, #12]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	60fb      	str	r3, [r7, #12]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079e0:	601a      	str	r2, [r3, #0]
 80079e2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	0a1b      	lsrs	r3, r3, #8
 80079e8:	f003 0301 	and.w	r3, r3, #1
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00c      	beq.n	8007a0a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079f4:	f043 0208 	orr.w	r2, r3, #8
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80079fc:	2300      	movs	r3, #0
 80079fe:	60bb      	str	r3, [r7, #8]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	60bb      	str	r3, [r7, #8]
 8007a08:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d04f      	beq.n	8007ab2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	685a      	ldr	r2, [r3, #4]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a20:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	f003 0302 	and.w	r3, r3, #2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d104      	bne.n	8007a3e <HAL_SPI_IRQHandler+0x17e>
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	f003 0301 	and.w	r3, r3, #1
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d034      	beq.n	8007aa8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	685a      	ldr	r2, [r3, #4]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f022 0203 	bic.w	r2, r2, #3
 8007a4c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d011      	beq.n	8007a7a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a5a:	4a18      	ldr	r2, [pc, #96]	; (8007abc <HAL_SPI_IRQHandler+0x1fc>)
 8007a5c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fb ffda 	bl	8003a1c <HAL_DMA_Abort_IT>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d005      	beq.n	8007a7a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d016      	beq.n	8007ab0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a86:	4a0d      	ldr	r2, [pc, #52]	; (8007abc <HAL_SPI_IRQHandler+0x1fc>)
 8007a88:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fb ffc4 	bl	8003a1c <HAL_DMA_Abort_IT>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00a      	beq.n	8007ab0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007aa6:	e003      	b.n	8007ab0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f813 	bl	8007ad4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007aae:	e000      	b.n	8007ab2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007ab0:	bf00      	nop
    return;
 8007ab2:	bf00      	nop
  }
}
 8007ab4:	3720      	adds	r7, #32
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	08007ae9 	.word	0x08007ae9

08007ac0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f7ff ffe5 	bl	8007ad4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007b0a:	bf00      	nop
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b082      	sub	sp, #8
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d923      	bls.n	8007b6e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68da      	ldr	r2, [r3, #12]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b30:	b292      	uxth	r2, r2
 8007b32:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b38:	1c9a      	adds	r2, r3, #2
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	3b02      	subs	r3, #2
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d11f      	bne.n	8007b9c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b6a:	605a      	str	r2, [r3, #4]
 8007b6c:	e016      	b.n	8007b9c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f103 020c 	add.w	r2, r3, #12
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7a:	7812      	ldrb	r2, [r2, #0]
 8007b7c:	b2d2      	uxtb	r2, r2
 8007b7e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b84:	1c5a      	adds	r2, r3, #1
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	3b01      	subs	r3, #1
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10f      	bne.n	8007bc8 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	685a      	ldr	r2, [r3, #4]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007bb6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d102      	bne.n	8007bc8 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fafc 	bl	80081c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007bc8:	bf00      	nop
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d912      	bls.n	8007c08 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be6:	881a      	ldrh	r2, [r3, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf2:	1c9a      	adds	r2, r3, #2
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	3b02      	subs	r3, #2
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c06:	e012      	b.n	8007c2e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	330c      	adds	r3, #12
 8007c12:	7812      	ldrb	r2, [r2, #0]
 8007c14:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1a:	1c5a      	adds	r2, r3, #1
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	3b01      	subs	r3, #1
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d110      	bne.n	8007c5a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c46:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d102      	bne.n	8007c5a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fab3 	bl	80081c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007c5a:	bf00      	nop
 8007c5c:	3708      	adds	r7, #8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b082      	sub	sp, #8
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68da      	ldr	r2, [r3, #12]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c74:	b292      	uxth	r2, r2
 8007c76:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7c:	1c9a      	adds	r2, r3, #2
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10f      	bne.n	8007cc0 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685a      	ldr	r2, [r3, #4]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cae:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d102      	bne.n	8007cc0 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fa80 	bl	80081c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007cc0:	bf00      	nop
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd4:	881a      	ldrh	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce0:	1c9a      	adds	r2, r3, #2
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	3b01      	subs	r3, #1
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d110      	bne.n	8007d20 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d0c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d102      	bne.n	8007d20 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fa50 	bl	80081c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007d20:	bf00      	nop
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f103 020c 	add.w	r2, r3, #12
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3c:	7812      	ldrb	r2, [r2, #0]
 8007d3e:	b2d2      	uxtb	r2, r2
 8007d40:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	3b01      	subs	r3, #1
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d102      	bne.n	8007d70 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fa6a 	bl	8008244 <SPI_CloseRx_ISR>
  }
}
 8007d70:	bf00      	nop
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8a:	b292      	uxth	r2, r2
 8007d8c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d92:	1c9a      	adds	r2, r3, #2
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	3b01      	subs	r3, #1
 8007da2:	b29a      	uxth	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d102      	bne.n	8007dbc <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fa44 	bl	8008244 <SPI_CloseRx_ISR>
  }
}
 8007dbc:	bf00      	nop
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	330c      	adds	r3, #12
 8007dd6:	7812      	ldrb	r2, [r2, #0]
 8007dd8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dde:	1c5a      	adds	r2, r3, #1
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	3b01      	subs	r3, #1
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d102      	bne.n	8007e02 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fa51 	bl	80082a4 <SPI_CloseTx_ISR>
  }
}
 8007e02:	bf00      	nop
 8007e04:	3708      	adds	r7, #8
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b082      	sub	sp, #8
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e16:	881a      	ldrh	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e22:	1c9a      	adds	r2, r3, #2
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d102      	bne.n	8007e46 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fa2f 	bl	80082a4 <SPI_CloseTx_ISR>
  }
}
 8007e46:	bf00      	nop
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
	...

08007e50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b088      	sub	sp, #32
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	603b      	str	r3, [r7, #0]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e60:	f7fb fb4e 	bl	8003500 <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e68:	1a9b      	subs	r3, r3, r2
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e70:	f7fb fb46 	bl	8003500 <HAL_GetTick>
 8007e74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e76:	4b39      	ldr	r3, [pc, #228]	; (8007f5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	015b      	lsls	r3, r3, #5
 8007e7c:	0d1b      	lsrs	r3, r3, #20
 8007e7e:	69fa      	ldr	r2, [r7, #28]
 8007e80:	fb02 f303 	mul.w	r3, r2, r3
 8007e84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e86:	e054      	b.n	8007f32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e8e:	d050      	beq.n	8007f32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e90:	f7fb fb36 	bl	8003500 <HAL_GetTick>
 8007e94:	4602      	mov	r2, r0
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	69fa      	ldr	r2, [r7, #28]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d902      	bls.n	8007ea6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d13d      	bne.n	8007f22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007eb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ebe:	d111      	bne.n	8007ee4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ec8:	d004      	beq.n	8007ed4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ed2:	d107      	bne.n	8007ee4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ee2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eec:	d10f      	bne.n	8007f0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007efc:	601a      	str	r2, [r3, #0]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e017      	b.n	8007f52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	689a      	ldr	r2, [r3, #8]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	bf0c      	ite	eq
 8007f42:	2301      	moveq	r3, #1
 8007f44:	2300      	movne	r3, #0
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	461a      	mov	r2, r3
 8007f4a:	79fb      	ldrb	r3, [r7, #7]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d19b      	bne.n	8007e88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3720      	adds	r7, #32
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	20000010 	.word	0x20000010

08007f60 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b088      	sub	sp, #32
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
 8007f6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007f6e:	f7fb fac7 	bl	8003500 <HAL_GetTick>
 8007f72:	4602      	mov	r2, r0
 8007f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f76:	1a9b      	subs	r3, r3, r2
 8007f78:	683a      	ldr	r2, [r7, #0]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f7e:	f7fb fabf 	bl	8003500 <HAL_GetTick>
 8007f82:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007f84:	4b3e      	ldr	r3, [pc, #248]	; (8008080 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	4413      	add	r3, r2
 8007f8e:	00da      	lsls	r2, r3, #3
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	0d1b      	lsrs	r3, r3, #20
 8007f94:	69fa      	ldr	r2, [r7, #28]
 8007f96:	fb02 f303 	mul.w	r3, r2, r3
 8007f9a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8007f9c:	e062      	b.n	8008064 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007fa4:	d109      	bne.n	8007fba <SPI_WaitFifoStateUntilTimeout+0x5a>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d106      	bne.n	8007fba <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	330c      	adds	r3, #12
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8007fb8:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc0:	d050      	beq.n	8008064 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007fc2:	f7fb fa9d 	bl	8003500 <HAL_GetTick>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	69fa      	ldr	r2, [r7, #28]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d902      	bls.n	8007fd8 <SPI_WaitFifoStateUntilTimeout+0x78>
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d13d      	bne.n	8008054 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	685a      	ldr	r2, [r3, #4]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007fe6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ff0:	d111      	bne.n	8008016 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ffa:	d004      	beq.n	8008006 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008004:	d107      	bne.n	8008016 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008014:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800801e:	d10f      	bne.n	8008040 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800802e:	601a      	str	r2, [r3, #0]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800803e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008050:	2303      	movs	r3, #3
 8008052:	e010      	b.n	8008076 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d101      	bne.n	800805e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800805a:	2300      	movs	r3, #0
 800805c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	3b01      	subs	r3, #1
 8008062:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	689a      	ldr	r2, [r3, #8]
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	4013      	ands	r3, r2
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	429a      	cmp	r2, r3
 8008072:	d194      	bne.n	8007f9e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3720      	adds	r7, #32
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	20000010 	.word	0x20000010

08008084 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b086      	sub	sp, #24
 8008088:	af02      	add	r7, sp, #8
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008098:	d111      	bne.n	80080be <SPI_EndRxTransaction+0x3a>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080a2:	d004      	beq.n	80080ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080ac:	d107      	bne.n	80080be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080bc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	2200      	movs	r2, #0
 80080c6:	2180      	movs	r1, #128	; 0x80
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f7ff fec1 	bl	8007e50 <SPI_WaitFlagStateUntilTimeout>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d007      	beq.n	80080e4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080d8:	f043 0220 	orr.w	r2, r3, #32
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e023      	b.n	800812c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080ec:	d11d      	bne.n	800812a <SPI_EndRxTransaction+0xa6>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080f6:	d004      	beq.n	8008102 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008100:	d113      	bne.n	800812a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	2200      	movs	r2, #0
 800810a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f7ff ff26 	bl	8007f60 <SPI_WaitFifoStateUntilTimeout>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d007      	beq.n	800812a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800811e:	f043 0220 	orr.w	r2, r3, #32
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e000      	b.n	800812c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b086      	sub	sp, #24
 8008138:	af02      	add	r7, sp, #8
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	2200      	movs	r2, #0
 8008148:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f7ff ff07 	bl	8007f60 <SPI_WaitFifoStateUntilTimeout>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d007      	beq.n	8008168 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800815c:	f043 0220 	orr.w	r2, r3, #32
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e027      	b.n	80081b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	2200      	movs	r2, #0
 8008170:	2180      	movs	r1, #128	; 0x80
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f7ff fe6c 	bl	8007e50 <SPI_WaitFlagStateUntilTimeout>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d007      	beq.n	800818e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008182:	f043 0220 	orr.w	r2, r3, #32
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800818a:	2303      	movs	r3, #3
 800818c:	e014      	b.n	80081b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	2200      	movs	r2, #0
 8008196:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f7ff fee0 	bl	8007f60 <SPI_WaitFifoStateUntilTimeout>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d007      	beq.n	80081b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081aa:	f043 0220 	orr.w	r2, r3, #32
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e000      	b.n	80081b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081c8:	f7fb f99a 	bl	8003500 <HAL_GetTick>
 80081cc:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f022 0220 	bic.w	r2, r2, #32
 80081dc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	2164      	movs	r1, #100	; 0x64
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f7ff ffa6 	bl	8008134 <SPI_EndRxTxTransaction>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d005      	beq.n	80081fa <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081f2:	f043 0220 	orr.w	r2, r3, #32
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d115      	bne.n	800822e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b04      	cmp	r3, #4
 800820c:	d107      	bne.n	800821e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2201      	movs	r2, #1
 8008212:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f003 fd02 	bl	800bc20 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800821c:	e00e      	b.n	800823c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2201      	movs	r2, #1
 8008222:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7ff fc4a 	bl	8007ac0 <HAL_SPI_TxRxCpltCallback>
}
 800822c:	e006      	b.n	800823c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2201      	movs	r2, #1
 8008232:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7ff fc4c 	bl	8007ad4 <HAL_SPI_ErrorCallback>
}
 800823c:	bf00      	nop
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	685a      	ldr	r2, [r3, #4]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800825a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800825c:	f7fb f950 	bl	8003500 <HAL_GetTick>
 8008260:	4603      	mov	r3, r0
 8008262:	461a      	mov	r2, r3
 8008264:	2164      	movs	r1, #100	; 0x64
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f7ff ff0c 	bl	8008084 <SPI_EndRxTransaction>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d005      	beq.n	800827e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008276:	f043 0220 	orr.w	r2, r3, #32
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800828a:	2b00      	cmp	r3, #0
 800828c:	d103      	bne.n	8008296 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f003 fcc6 	bl	800bc20 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008294:	e002      	b.n	800829c <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f7ff fc1c 	bl	8007ad4 <HAL_SPI_ErrorCallback>
}
 800829c:	bf00      	nop
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082ac:	f7fb f928 	bl	8003500 <HAL_GetTick>
 80082b0:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	685a      	ldr	r2, [r3, #4]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80082c0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	2164      	movs	r1, #100	; 0x64
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f7ff ff34 	bl	8008134 <SPI_EndRxTxTransaction>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d005      	beq.n	80082de <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082d6:	f043 0220 	orr.w	r2, r3, #32
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10a      	bne.n	80082fc <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082e6:	2300      	movs	r3, #0
 80082e8:	60bb      	str	r3, [r7, #8]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	60bb      	str	r3, [r7, #8]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	60bb      	str	r3, [r7, #8]
 80082fa:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008308:	2b00      	cmp	r3, #0
 800830a:	d003      	beq.n	8008314 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f7ff fbe1 	bl	8007ad4 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8008312:	e002      	b.n	800831a <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f003 fc97 	bl	800bc48 <HAL_SPI_TxCpltCallback>
}
 800831a:	bf00      	nop
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b082      	sub	sp, #8
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d101      	bne.n	8008334 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	e049      	b.n	80083c8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b00      	cmp	r3, #0
 800833e:	d106      	bne.n	800834e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7fa fd75 	bl	8002e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2202      	movs	r2, #2
 8008352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	3304      	adds	r3, #4
 800835e:	4619      	mov	r1, r3
 8008360:	4610      	mov	r0, r2
 8008362:	f000 f9ed 	bl	8008740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2201      	movs	r2, #1
 800836a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2201      	movs	r2, #1
 8008372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2201      	movs	r2, #1
 800837a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2201      	movs	r2, #1
 8008382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2201      	movs	r2, #1
 800838a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2201      	movs	r2, #1
 8008392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2201      	movs	r2, #1
 800839a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2201      	movs	r2, #1
 80083a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2201      	movs	r2, #1
 80083aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d001      	beq.n	80083e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e04f      	b.n	8008488 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2202      	movs	r2, #2
 80083ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68da      	ldr	r2, [r3, #12]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f042 0201 	orr.w	r2, r2, #1
 80083fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a23      	ldr	r2, [pc, #140]	; (8008494 <HAL_TIM_Base_Start_IT+0xc4>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d01d      	beq.n	8008446 <HAL_TIM_Base_Start_IT+0x76>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008412:	d018      	beq.n	8008446 <HAL_TIM_Base_Start_IT+0x76>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a1f      	ldr	r2, [pc, #124]	; (8008498 <HAL_TIM_Base_Start_IT+0xc8>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d013      	beq.n	8008446 <HAL_TIM_Base_Start_IT+0x76>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a1e      	ldr	r2, [pc, #120]	; (800849c <HAL_TIM_Base_Start_IT+0xcc>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d00e      	beq.n	8008446 <HAL_TIM_Base_Start_IT+0x76>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a1c      	ldr	r2, [pc, #112]	; (80084a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d009      	beq.n	8008446 <HAL_TIM_Base_Start_IT+0x76>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a1b      	ldr	r2, [pc, #108]	; (80084a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d004      	beq.n	8008446 <HAL_TIM_Base_Start_IT+0x76>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a19      	ldr	r2, [pc, #100]	; (80084a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d115      	bne.n	8008472 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	689a      	ldr	r2, [r3, #8]
 800844c:	4b17      	ldr	r3, [pc, #92]	; (80084ac <HAL_TIM_Base_Start_IT+0xdc>)
 800844e:	4013      	ands	r3, r2
 8008450:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2b06      	cmp	r3, #6
 8008456:	d015      	beq.n	8008484 <HAL_TIM_Base_Start_IT+0xb4>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800845e:	d011      	beq.n	8008484 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f042 0201 	orr.w	r2, r2, #1
 800846e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008470:	e008      	b.n	8008484 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f042 0201 	orr.w	r2, r2, #1
 8008480:	601a      	str	r2, [r3, #0]
 8008482:	e000      	b.n	8008486 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008484:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3714      	adds	r7, #20
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr
 8008494:	40012c00 	.word	0x40012c00
 8008498:	40000400 	.word	0x40000400
 800849c:	40000800 	.word	0x40000800
 80084a0:	40000c00 	.word	0x40000c00
 80084a4:	40013400 	.word	0x40013400
 80084a8:	40014000 	.word	0x40014000
 80084ac:	00010007 	.word	0x00010007

080084b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	f003 0302 	and.w	r3, r3, #2
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d122      	bne.n	800850c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	f003 0302 	and.w	r3, r3, #2
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d11b      	bne.n	800850c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f06f 0202 	mvn.w	r2, #2
 80084dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2201      	movs	r2, #1
 80084e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	f003 0303 	and.w	r3, r3, #3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d003      	beq.n	80084fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f905 	bl	8008702 <HAL_TIM_IC_CaptureCallback>
 80084f8:	e005      	b.n	8008506 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f8f7 	bl	80086ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f908 	bl	8008716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	f003 0304 	and.w	r3, r3, #4
 8008516:	2b04      	cmp	r3, #4
 8008518:	d122      	bne.n	8008560 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	f003 0304 	and.w	r3, r3, #4
 8008524:	2b04      	cmp	r3, #4
 8008526:	d11b      	bne.n	8008560 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f06f 0204 	mvn.w	r2, #4
 8008530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2202      	movs	r2, #2
 8008536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	699b      	ldr	r3, [r3, #24]
 800853e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008542:	2b00      	cmp	r3, #0
 8008544:	d003      	beq.n	800854e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f8db 	bl	8008702 <HAL_TIM_IC_CaptureCallback>
 800854c:	e005      	b.n	800855a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f8cd 	bl	80086ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f8de 	bl	8008716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	f003 0308 	and.w	r3, r3, #8
 800856a:	2b08      	cmp	r3, #8
 800856c:	d122      	bne.n	80085b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	f003 0308 	and.w	r3, r3, #8
 8008578:	2b08      	cmp	r3, #8
 800857a:	d11b      	bne.n	80085b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f06f 0208 	mvn.w	r2, #8
 8008584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2204      	movs	r2, #4
 800858a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	69db      	ldr	r3, [r3, #28]
 8008592:	f003 0303 	and.w	r3, r3, #3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d003      	beq.n	80085a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f8b1 	bl	8008702 <HAL_TIM_IC_CaptureCallback>
 80085a0:	e005      	b.n	80085ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f8a3 	bl	80086ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 f8b4 	bl	8008716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	f003 0310 	and.w	r3, r3, #16
 80085be:	2b10      	cmp	r3, #16
 80085c0:	d122      	bne.n	8008608 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	f003 0310 	and.w	r3, r3, #16
 80085cc:	2b10      	cmp	r3, #16
 80085ce:	d11b      	bne.n	8008608 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f06f 0210 	mvn.w	r2, #16
 80085d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2208      	movs	r2, #8
 80085de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	69db      	ldr	r3, [r3, #28]
 80085e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d003      	beq.n	80085f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f887 	bl	8008702 <HAL_TIM_IC_CaptureCallback>
 80085f4:	e005      	b.n	8008602 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 f879 	bl	80086ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 f88a 	bl	8008716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	f003 0301 	and.w	r3, r3, #1
 8008612:	2b01      	cmp	r3, #1
 8008614:	d10e      	bne.n	8008634 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	f003 0301 	and.w	r3, r3, #1
 8008620:	2b01      	cmp	r3, #1
 8008622:	d107      	bne.n	8008634 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f06f 0201 	mvn.w	r2, #1
 800862c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7fa f804 	bl	800263c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800863e:	2b80      	cmp	r3, #128	; 0x80
 8008640:	d10e      	bne.n	8008660 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800864c:	2b80      	cmp	r3, #128	; 0x80
 800864e:	d107      	bne.n	8008660 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f99c 	bl	8008998 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800866a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800866e:	d10e      	bne.n	800868e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800867a:	2b80      	cmp	r3, #128	; 0x80
 800867c:	d107      	bne.n	800868e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 f98f 	bl	80089ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008698:	2b40      	cmp	r3, #64	; 0x40
 800869a:	d10e      	bne.n	80086ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a6:	2b40      	cmp	r3, #64	; 0x40
 80086a8:	d107      	bne.n	80086ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80086b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f838 	bl	800872a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	f003 0320 	and.w	r3, r3, #32
 80086c4:	2b20      	cmp	r3, #32
 80086c6:	d10e      	bne.n	80086e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	f003 0320 	and.w	r3, r3, #32
 80086d2:	2b20      	cmp	r3, #32
 80086d4:	d107      	bne.n	80086e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f06f 0220 	mvn.w	r2, #32
 80086de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f94f 	bl	8008984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086e6:	bf00      	nop
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b083      	sub	sp, #12
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086f6:	bf00      	nop
 80086f8:	370c      	adds	r7, #12
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008702:	b480      	push	{r7}
 8008704:	b083      	sub	sp, #12
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800870a:	bf00      	nop
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008716:	b480      	push	{r7}
 8008718:	b083      	sub	sp, #12
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800871e:	bf00      	nop
 8008720:	370c      	adds	r7, #12
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr

0800872a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800872a:	b480      	push	{r7}
 800872c:	b083      	sub	sp, #12
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008732:	bf00      	nop
 8008734:	370c      	adds	r7, #12
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
	...

08008740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a40      	ldr	r2, [pc, #256]	; (8008854 <TIM_Base_SetConfig+0x114>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d013      	beq.n	8008780 <TIM_Base_SetConfig+0x40>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800875e:	d00f      	beq.n	8008780 <TIM_Base_SetConfig+0x40>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a3d      	ldr	r2, [pc, #244]	; (8008858 <TIM_Base_SetConfig+0x118>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d00b      	beq.n	8008780 <TIM_Base_SetConfig+0x40>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a3c      	ldr	r2, [pc, #240]	; (800885c <TIM_Base_SetConfig+0x11c>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d007      	beq.n	8008780 <TIM_Base_SetConfig+0x40>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a3b      	ldr	r2, [pc, #236]	; (8008860 <TIM_Base_SetConfig+0x120>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d003      	beq.n	8008780 <TIM_Base_SetConfig+0x40>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a3a      	ldr	r2, [pc, #232]	; (8008864 <TIM_Base_SetConfig+0x124>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d108      	bne.n	8008792 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	4313      	orrs	r3, r2
 8008790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a2f      	ldr	r2, [pc, #188]	; (8008854 <TIM_Base_SetConfig+0x114>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d01f      	beq.n	80087da <TIM_Base_SetConfig+0x9a>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087a0:	d01b      	beq.n	80087da <TIM_Base_SetConfig+0x9a>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a2c      	ldr	r2, [pc, #176]	; (8008858 <TIM_Base_SetConfig+0x118>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d017      	beq.n	80087da <TIM_Base_SetConfig+0x9a>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a2b      	ldr	r2, [pc, #172]	; (800885c <TIM_Base_SetConfig+0x11c>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d013      	beq.n	80087da <TIM_Base_SetConfig+0x9a>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a2a      	ldr	r2, [pc, #168]	; (8008860 <TIM_Base_SetConfig+0x120>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d00f      	beq.n	80087da <TIM_Base_SetConfig+0x9a>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a29      	ldr	r2, [pc, #164]	; (8008864 <TIM_Base_SetConfig+0x124>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d00b      	beq.n	80087da <TIM_Base_SetConfig+0x9a>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a28      	ldr	r2, [pc, #160]	; (8008868 <TIM_Base_SetConfig+0x128>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d007      	beq.n	80087da <TIM_Base_SetConfig+0x9a>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a27      	ldr	r2, [pc, #156]	; (800886c <TIM_Base_SetConfig+0x12c>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d003      	beq.n	80087da <TIM_Base_SetConfig+0x9a>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a26      	ldr	r2, [pc, #152]	; (8008870 <TIM_Base_SetConfig+0x130>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d108      	bne.n	80087ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	689a      	ldr	r2, [r3, #8]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a10      	ldr	r2, [pc, #64]	; (8008854 <TIM_Base_SetConfig+0x114>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d00f      	beq.n	8008838 <TIM_Base_SetConfig+0xf8>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a12      	ldr	r2, [pc, #72]	; (8008864 <TIM_Base_SetConfig+0x124>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d00b      	beq.n	8008838 <TIM_Base_SetConfig+0xf8>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a11      	ldr	r2, [pc, #68]	; (8008868 <TIM_Base_SetConfig+0x128>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d007      	beq.n	8008838 <TIM_Base_SetConfig+0xf8>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a10      	ldr	r2, [pc, #64]	; (800886c <TIM_Base_SetConfig+0x12c>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d003      	beq.n	8008838 <TIM_Base_SetConfig+0xf8>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a0f      	ldr	r2, [pc, #60]	; (8008870 <TIM_Base_SetConfig+0x130>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d103      	bne.n	8008840 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	691a      	ldr	r2, [r3, #16]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	615a      	str	r2, [r3, #20]
}
 8008846:	bf00      	nop
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	40012c00 	.word	0x40012c00
 8008858:	40000400 	.word	0x40000400
 800885c:	40000800 	.word	0x40000800
 8008860:	40000c00 	.word	0x40000c00
 8008864:	40013400 	.word	0x40013400
 8008868:	40014000 	.word	0x40014000
 800886c:	40014400 	.word	0x40014400
 8008870:	40014800 	.word	0x40014800

08008874 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008884:	2b01      	cmp	r3, #1
 8008886:	d101      	bne.n	800888c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008888:	2302      	movs	r3, #2
 800888a:	e068      	b.n	800895e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2202      	movs	r2, #2
 8008898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a2e      	ldr	r2, [pc, #184]	; (800896c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d004      	beq.n	80088c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a2d      	ldr	r2, [pc, #180]	; (8008970 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d108      	bne.n	80088d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80088c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a1e      	ldr	r2, [pc, #120]	; (800896c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d01d      	beq.n	8008932 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088fe:	d018      	beq.n	8008932 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a1b      	ldr	r2, [pc, #108]	; (8008974 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d013      	beq.n	8008932 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a1a      	ldr	r2, [pc, #104]	; (8008978 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d00e      	beq.n	8008932 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a18      	ldr	r2, [pc, #96]	; (800897c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d009      	beq.n	8008932 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a13      	ldr	r2, [pc, #76]	; (8008970 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d004      	beq.n	8008932 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a14      	ldr	r2, [pc, #80]	; (8008980 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d10c      	bne.n	800894c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	68ba      	ldr	r2, [r7, #8]
 8008940:	4313      	orrs	r3, r2
 8008942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3714      	adds	r7, #20
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	40012c00 	.word	0x40012c00
 8008970:	40013400 	.word	0x40013400
 8008974:	40000400 	.word	0x40000400
 8008978:	40000800 	.word	0x40000800
 800897c:	40000c00 	.word	0x40000c00
 8008980:	40014000 	.word	0x40014000

08008984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d101      	bne.n	80089d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e040      	b.n	8008a54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d106      	bne.n	80089e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f7fa fa4e 	bl	8002e84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2224      	movs	r2, #36	; 0x24
 80089ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f022 0201 	bic.w	r2, r2, #1
 80089fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 fb26 	bl	8009050 <UART_SetConfig>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d101      	bne.n	8008a0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e022      	b.n	8008a54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d002      	beq.n	8008a1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 fdd4 	bl	80095c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	685a      	ldr	r2, [r3, #4]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	689a      	ldr	r2, [r3, #8]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f042 0201 	orr.w	r2, r2, #1
 8008a4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fe5b 	bl	8009708 <UART_CheckIdleState>
 8008a52:	4603      	mov	r3, r0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b08a      	sub	sp, #40	; 0x28
 8008a60:	af02      	add	r7, sp, #8
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	603b      	str	r3, [r7, #0]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a70:	2b20      	cmp	r3, #32
 8008a72:	f040 8082 	bne.w	8008b7a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d002      	beq.n	8008a82 <HAL_UART_Transmit+0x26>
 8008a7c:	88fb      	ldrh	r3, [r7, #6]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d101      	bne.n	8008a86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e07a      	b.n	8008b7c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d101      	bne.n	8008a94 <HAL_UART_Transmit+0x38>
 8008a90:	2302      	movs	r3, #2
 8008a92:	e073      	b.n	8008b7c <HAL_UART_Transmit+0x120>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2221      	movs	r2, #33	; 0x21
 8008aa8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008aaa:	f7fa fd29 	bl	8003500 <HAL_GetTick>
 8008aae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	88fa      	ldrh	r2, [r7, #6]
 8008ab4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	88fa      	ldrh	r2, [r7, #6]
 8008abc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ac8:	d108      	bne.n	8008adc <HAL_UART_Transmit+0x80>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d104      	bne.n	8008adc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	61bb      	str	r3, [r7, #24]
 8008ada:	e003      	b.n	8008ae4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008aec:	e02d      	b.n	8008b4a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	9300      	str	r3, [sp, #0]
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	2200      	movs	r2, #0
 8008af6:	2180      	movs	r1, #128	; 0x80
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f000 fe4e 	bl	800979a <UART_WaitOnFlagUntilTimeout>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d001      	beq.n	8008b08 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008b04:	2303      	movs	r3, #3
 8008b06:	e039      	b.n	8008b7c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10b      	bne.n	8008b26 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	881a      	ldrh	r2, [r3, #0]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b1a:	b292      	uxth	r2, r2
 8008b1c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	3302      	adds	r3, #2
 8008b22:	61bb      	str	r3, [r7, #24]
 8008b24:	e008      	b.n	8008b38 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	781a      	ldrb	r2, [r3, #0]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	b292      	uxth	r2, r2
 8008b30:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	3301      	adds	r3, #1
 8008b36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	3b01      	subs	r3, #1
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d1cb      	bne.n	8008aee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	2140      	movs	r1, #64	; 0x40
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f000 fe1a 	bl	800979a <UART_WaitOnFlagUntilTimeout>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d001      	beq.n	8008b70 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e005      	b.n	8008b7c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2220      	movs	r2, #32
 8008b74:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008b76:	2300      	movs	r3, #0
 8008b78:	e000      	b.n	8008b7c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008b7a:	2302      	movs	r3, #2
  }
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3720      	adds	r7, #32
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	4613      	mov	r3, r2
 8008b90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b96:	2b20      	cmp	r3, #32
 8008b98:	d131      	bne.n	8008bfe <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d002      	beq.n	8008ba6 <HAL_UART_Receive_IT+0x22>
 8008ba0:	88fb      	ldrh	r3, [r7, #6]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e02a      	b.n	8008c00 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d101      	bne.n	8008bb8 <HAL_UART_Receive_IT+0x34>
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	e023      	b.n	8008c00 <HAL_UART_Receive_IT+0x7c>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a0f      	ldr	r2, [pc, #60]	; (8008c08 <HAL_UART_Receive_IT+0x84>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d00e      	beq.n	8008bee <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d007      	beq.n	8008bee <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008bec:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8008bee:	88fb      	ldrh	r3, [r7, #6]
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	68b9      	ldr	r1, [r7, #8]
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f000 fe4d 	bl	8009894 <UART_Start_Receive_IT>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	e000      	b.n	8008c00 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8008bfe:	2302      	movs	r3, #2
  }
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	40008000 	.word	0x40008000

08008c0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b088      	sub	sp, #32
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	69db      	ldr	r3, [r3, #28]
 8008c1a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008c2c:	69fa      	ldr	r2, [r7, #28]
 8008c2e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008c32:	4013      	ands	r3, r2
 8008c34:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d113      	bne.n	8008c64 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	f003 0320 	and.w	r3, r3, #32
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00e      	beq.n	8008c64 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	f003 0320 	and.w	r3, r3, #32
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d009      	beq.n	8008c64 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f000 81cf 	beq.w	8008ff8 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	4798      	blx	r3
      }
      return;
 8008c62:	e1c9      	b.n	8008ff8 <HAL_UART_IRQHandler+0x3ec>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	f000 80e8 	beq.w	8008e3c <HAL_UART_IRQHandler+0x230>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d105      	bne.n	8008c82 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008c76:	69ba      	ldr	r2, [r7, #24]
 8008c78:	4b6e      	ldr	r3, [pc, #440]	; (8008e34 <HAL_UART_IRQHandler+0x228>)
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f000 80dd 	beq.w	8008e3c <HAL_UART_IRQHandler+0x230>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	f003 0301 	and.w	r3, r3, #1
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d010      	beq.n	8008cae <HAL_UART_IRQHandler+0xa2>
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00b      	beq.n	8008cae <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ca4:	f043 0201 	orr.w	r2, r3, #1
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	f003 0302 	and.w	r3, r3, #2
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d010      	beq.n	8008cda <HAL_UART_IRQHandler+0xce>
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	f003 0301 	and.w	r3, r3, #1
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00b      	beq.n	8008cda <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cd0:	f043 0204 	orr.w	r2, r3, #4
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	f003 0304 	and.w	r3, r3, #4
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d010      	beq.n	8008d06 <HAL_UART_IRQHandler+0xfa>
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00b      	beq.n	8008d06 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2204      	movs	r2, #4
 8008cf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cfc:	f043 0202 	orr.w	r2, r3, #2
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	f003 0308 	and.w	r3, r3, #8
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d015      	beq.n	8008d3c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	f003 0320 	and.w	r3, r3, #32
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d104      	bne.n	8008d24 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00b      	beq.n	8008d3c <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2208      	movs	r2, #8
 8008d2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d32:	f043 0208 	orr.w	r2, r3, #8
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d011      	beq.n	8008d6a <HAL_UART_IRQHandler+0x15e>
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00c      	beq.n	8008d6a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d60:	f043 0220 	orr.w	r2, r3, #32
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f000 8143 	beq.w	8008ffc <HAL_UART_IRQHandler+0x3f0>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	f003 0320 	and.w	r3, r3, #32
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00c      	beq.n	8008d9a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	f003 0320 	and.w	r3, r3, #32
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d007      	beq.n	8008d9a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d003      	beq.n	8008d9a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008da0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dac:	2b40      	cmp	r3, #64	; 0x40
 8008dae:	d004      	beq.n	8008dba <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d031      	beq.n	8008e1e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fdf2 	bl	80099a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dca:	2b40      	cmp	r3, #64	; 0x40
 8008dcc:	d123      	bne.n	8008e16 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	689a      	ldr	r2, [r3, #8]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ddc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d013      	beq.n	8008e0e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dea:	4a13      	ldr	r2, [pc, #76]	; (8008e38 <HAL_UART_IRQHandler+0x22c>)
 8008dec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fa fe12 	bl	8003a1c <HAL_DMA_Abort_IT>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d017      	beq.n	8008e2e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008e08:	4610      	mov	r0, r2
 8008e0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e0c:	e00f      	b.n	8008e2e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f908 	bl	8009024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e14:	e00b      	b.n	8008e2e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f904 	bl	8009024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e1c:	e007      	b.n	8008e2e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f900 	bl	8009024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008e2c:	e0e6      	b.n	8008ffc <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e2e:	bf00      	nop
    return;
 8008e30:	e0e4      	b.n	8008ffc <HAL_UART_IRQHandler+0x3f0>
 8008e32:	bf00      	nop
 8008e34:	04000120 	.word	0x04000120
 8008e38:	08009a03 	.word	0x08009a03

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	f040 80a5 	bne.w	8008f90 <HAL_UART_IRQHandler+0x384>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	f003 0310 	and.w	r3, r3, #16
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f000 809f 	beq.w	8008f90 <HAL_UART_IRQHandler+0x384>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	f003 0310 	and.w	r3, r3, #16
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f000 8099 	beq.w	8008f90 <HAL_UART_IRQHandler+0x384>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2210      	movs	r2, #16
 8008e64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e70:	2b40      	cmp	r3, #64	; 0x40
 8008e72:	d154      	bne.n	8008f1e <HAL_UART_IRQHandler+0x312>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8008e7e:	893b      	ldrh	r3, [r7, #8]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f000 80bd 	beq.w	8009000 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008e8c:	893a      	ldrh	r2, [r7, #8]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	f080 80b6 	bcs.w	8009000 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	893a      	ldrh	r2, [r7, #8]
 8008e98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 0320 	and.w	r3, r3, #32
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d12a      	bne.n	8008f02 <HAL_UART_IRQHandler+0x2f6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008eba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	689a      	ldr	r2, [r3, #8]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f022 0201 	bic.w	r2, r2, #1
 8008eca:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	689a      	ldr	r2, [r3, #8]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008eda:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2220      	movs	r2, #32
 8008ee0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f022 0210 	bic.w	r2, r2, #16
 8008ef6:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7fa fd4f 	bl	80039a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	4619      	mov	r1, r3
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f88e 	bl	8009038 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008f1c:	e070      	b.n	8009000 <HAL_UART_IRQHandler+0x3f4>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	1ad3      	subs	r3, r2, r3
 8008f2e:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d063      	beq.n	8009004 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 8008f3c:	897b      	ldrh	r3, [r7, #10]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d060      	beq.n	8009004 <HAL_UART_IRQHandler+0x3f8>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008f50:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	689a      	ldr	r2, [r3, #8]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f022 0201 	bic.w	r2, r2, #1
 8008f60:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2220      	movs	r2, #32
 8008f66:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f022 0210 	bic.w	r2, r2, #16
 8008f82:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f84:	897b      	ldrh	r3, [r7, #10]
 8008f86:	4619      	mov	r1, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f855 	bl	8009038 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008f8e:	e039      	b.n	8009004 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00d      	beq.n	8008fb6 <HAL_UART_IRQHandler+0x3aa>
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d008      	beq.n	8008fb6 <HAL_UART_IRQHandler+0x3aa>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008fac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fe2e 	bl	8009c10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008fb4:	e029      	b.n	800900a <HAL_UART_IRQHandler+0x3fe>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00d      	beq.n	8008fdc <HAL_UART_IRQHandler+0x3d0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d008      	beq.n	8008fdc <HAL_UART_IRQHandler+0x3d0>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d01a      	beq.n	8009008 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	4798      	blx	r3
    }
    return;
 8008fda:	e015      	b.n	8009008 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d011      	beq.n	800900a <HAL_UART_IRQHandler+0x3fe>
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00c      	beq.n	800900a <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fd1c 	bl	8009a2e <UART_EndTransmit_IT>
    return;
 8008ff6:	e008      	b.n	800900a <HAL_UART_IRQHandler+0x3fe>
      return;
 8008ff8:	bf00      	nop
 8008ffa:	e006      	b.n	800900a <HAL_UART_IRQHandler+0x3fe>
    return;
 8008ffc:	bf00      	nop
 8008ffe:	e004      	b.n	800900a <HAL_UART_IRQHandler+0x3fe>
      return;
 8009000:	bf00      	nop
 8009002:	e002      	b.n	800900a <HAL_UART_IRQHandler+0x3fe>
      return;
 8009004:	bf00      	nop
 8009006:	e000      	b.n	800900a <HAL_UART_IRQHandler+0x3fe>
    return;
 8009008:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800900a:	3720      	adds	r7, #32
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800902c:	bf00      	nop
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	460b      	mov	r3, r1
 8009042:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009044:	bf00      	nop
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009054:	b08a      	sub	sp, #40	; 0x28
 8009056:	af00      	add	r7, sp, #0
 8009058:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800905a:	2300      	movs	r3, #0
 800905c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	689a      	ldr	r2, [r3, #8]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	431a      	orrs	r2, r3
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	431a      	orrs	r2, r3
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	69db      	ldr	r3, [r3, #28]
 8009074:	4313      	orrs	r3, r2
 8009076:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	4ba4      	ldr	r3, [pc, #656]	; (8009310 <UART_SetConfig+0x2c0>)
 8009080:	4013      	ands	r3, r2
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	6812      	ldr	r2, [r2, #0]
 8009086:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009088:	430b      	orrs	r3, r1
 800908a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	68da      	ldr	r2, [r3, #12]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	430a      	orrs	r2, r1
 80090a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	699b      	ldr	r3, [r3, #24]
 80090a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a99      	ldr	r2, [pc, #612]	; (8009314 <UART_SetConfig+0x2c4>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d004      	beq.n	80090bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	6a1b      	ldr	r3, [r3, #32]
 80090b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090b8:	4313      	orrs	r3, r2
 80090ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090cc:	430a      	orrs	r2, r1
 80090ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a90      	ldr	r2, [pc, #576]	; (8009318 <UART_SetConfig+0x2c8>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d126      	bne.n	8009128 <UART_SetConfig+0xd8>
 80090da:	4b90      	ldr	r3, [pc, #576]	; (800931c <UART_SetConfig+0x2cc>)
 80090dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090e0:	f003 0303 	and.w	r3, r3, #3
 80090e4:	2b03      	cmp	r3, #3
 80090e6:	d81b      	bhi.n	8009120 <UART_SetConfig+0xd0>
 80090e8:	a201      	add	r2, pc, #4	; (adr r2, 80090f0 <UART_SetConfig+0xa0>)
 80090ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ee:	bf00      	nop
 80090f0:	08009101 	.word	0x08009101
 80090f4:	08009111 	.word	0x08009111
 80090f8:	08009109 	.word	0x08009109
 80090fc:	08009119 	.word	0x08009119
 8009100:	2301      	movs	r3, #1
 8009102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009106:	e116      	b.n	8009336 <UART_SetConfig+0x2e6>
 8009108:	2302      	movs	r3, #2
 800910a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800910e:	e112      	b.n	8009336 <UART_SetConfig+0x2e6>
 8009110:	2304      	movs	r3, #4
 8009112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009116:	e10e      	b.n	8009336 <UART_SetConfig+0x2e6>
 8009118:	2308      	movs	r3, #8
 800911a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800911e:	e10a      	b.n	8009336 <UART_SetConfig+0x2e6>
 8009120:	2310      	movs	r3, #16
 8009122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009126:	e106      	b.n	8009336 <UART_SetConfig+0x2e6>
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a7c      	ldr	r2, [pc, #496]	; (8009320 <UART_SetConfig+0x2d0>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d138      	bne.n	80091a4 <UART_SetConfig+0x154>
 8009132:	4b7a      	ldr	r3, [pc, #488]	; (800931c <UART_SetConfig+0x2cc>)
 8009134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009138:	f003 030c 	and.w	r3, r3, #12
 800913c:	2b0c      	cmp	r3, #12
 800913e:	d82d      	bhi.n	800919c <UART_SetConfig+0x14c>
 8009140:	a201      	add	r2, pc, #4	; (adr r2, 8009148 <UART_SetConfig+0xf8>)
 8009142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009146:	bf00      	nop
 8009148:	0800917d 	.word	0x0800917d
 800914c:	0800919d 	.word	0x0800919d
 8009150:	0800919d 	.word	0x0800919d
 8009154:	0800919d 	.word	0x0800919d
 8009158:	0800918d 	.word	0x0800918d
 800915c:	0800919d 	.word	0x0800919d
 8009160:	0800919d 	.word	0x0800919d
 8009164:	0800919d 	.word	0x0800919d
 8009168:	08009185 	.word	0x08009185
 800916c:	0800919d 	.word	0x0800919d
 8009170:	0800919d 	.word	0x0800919d
 8009174:	0800919d 	.word	0x0800919d
 8009178:	08009195 	.word	0x08009195
 800917c:	2300      	movs	r3, #0
 800917e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009182:	e0d8      	b.n	8009336 <UART_SetConfig+0x2e6>
 8009184:	2302      	movs	r3, #2
 8009186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800918a:	e0d4      	b.n	8009336 <UART_SetConfig+0x2e6>
 800918c:	2304      	movs	r3, #4
 800918e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009192:	e0d0      	b.n	8009336 <UART_SetConfig+0x2e6>
 8009194:	2308      	movs	r3, #8
 8009196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800919a:	e0cc      	b.n	8009336 <UART_SetConfig+0x2e6>
 800919c:	2310      	movs	r3, #16
 800919e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091a2:	e0c8      	b.n	8009336 <UART_SetConfig+0x2e6>
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a5e      	ldr	r2, [pc, #376]	; (8009324 <UART_SetConfig+0x2d4>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d125      	bne.n	80091fa <UART_SetConfig+0x1aa>
 80091ae:	4b5b      	ldr	r3, [pc, #364]	; (800931c <UART_SetConfig+0x2cc>)
 80091b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80091b8:	2b30      	cmp	r3, #48	; 0x30
 80091ba:	d016      	beq.n	80091ea <UART_SetConfig+0x19a>
 80091bc:	2b30      	cmp	r3, #48	; 0x30
 80091be:	d818      	bhi.n	80091f2 <UART_SetConfig+0x1a2>
 80091c0:	2b20      	cmp	r3, #32
 80091c2:	d00a      	beq.n	80091da <UART_SetConfig+0x18a>
 80091c4:	2b20      	cmp	r3, #32
 80091c6:	d814      	bhi.n	80091f2 <UART_SetConfig+0x1a2>
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d002      	beq.n	80091d2 <UART_SetConfig+0x182>
 80091cc:	2b10      	cmp	r3, #16
 80091ce:	d008      	beq.n	80091e2 <UART_SetConfig+0x192>
 80091d0:	e00f      	b.n	80091f2 <UART_SetConfig+0x1a2>
 80091d2:	2300      	movs	r3, #0
 80091d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091d8:	e0ad      	b.n	8009336 <UART_SetConfig+0x2e6>
 80091da:	2302      	movs	r3, #2
 80091dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091e0:	e0a9      	b.n	8009336 <UART_SetConfig+0x2e6>
 80091e2:	2304      	movs	r3, #4
 80091e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091e8:	e0a5      	b.n	8009336 <UART_SetConfig+0x2e6>
 80091ea:	2308      	movs	r3, #8
 80091ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091f0:	e0a1      	b.n	8009336 <UART_SetConfig+0x2e6>
 80091f2:	2310      	movs	r3, #16
 80091f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091f8:	e09d      	b.n	8009336 <UART_SetConfig+0x2e6>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a4a      	ldr	r2, [pc, #296]	; (8009328 <UART_SetConfig+0x2d8>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d125      	bne.n	8009250 <UART_SetConfig+0x200>
 8009204:	4b45      	ldr	r3, [pc, #276]	; (800931c <UART_SetConfig+0x2cc>)
 8009206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800920a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800920e:	2bc0      	cmp	r3, #192	; 0xc0
 8009210:	d016      	beq.n	8009240 <UART_SetConfig+0x1f0>
 8009212:	2bc0      	cmp	r3, #192	; 0xc0
 8009214:	d818      	bhi.n	8009248 <UART_SetConfig+0x1f8>
 8009216:	2b80      	cmp	r3, #128	; 0x80
 8009218:	d00a      	beq.n	8009230 <UART_SetConfig+0x1e0>
 800921a:	2b80      	cmp	r3, #128	; 0x80
 800921c:	d814      	bhi.n	8009248 <UART_SetConfig+0x1f8>
 800921e:	2b00      	cmp	r3, #0
 8009220:	d002      	beq.n	8009228 <UART_SetConfig+0x1d8>
 8009222:	2b40      	cmp	r3, #64	; 0x40
 8009224:	d008      	beq.n	8009238 <UART_SetConfig+0x1e8>
 8009226:	e00f      	b.n	8009248 <UART_SetConfig+0x1f8>
 8009228:	2300      	movs	r3, #0
 800922a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800922e:	e082      	b.n	8009336 <UART_SetConfig+0x2e6>
 8009230:	2302      	movs	r3, #2
 8009232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009236:	e07e      	b.n	8009336 <UART_SetConfig+0x2e6>
 8009238:	2304      	movs	r3, #4
 800923a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800923e:	e07a      	b.n	8009336 <UART_SetConfig+0x2e6>
 8009240:	2308      	movs	r3, #8
 8009242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009246:	e076      	b.n	8009336 <UART_SetConfig+0x2e6>
 8009248:	2310      	movs	r3, #16
 800924a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800924e:	e072      	b.n	8009336 <UART_SetConfig+0x2e6>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a35      	ldr	r2, [pc, #212]	; (800932c <UART_SetConfig+0x2dc>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d12a      	bne.n	80092b0 <UART_SetConfig+0x260>
 800925a:	4b30      	ldr	r3, [pc, #192]	; (800931c <UART_SetConfig+0x2cc>)
 800925c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009264:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009268:	d01a      	beq.n	80092a0 <UART_SetConfig+0x250>
 800926a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800926e:	d81b      	bhi.n	80092a8 <UART_SetConfig+0x258>
 8009270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009274:	d00c      	beq.n	8009290 <UART_SetConfig+0x240>
 8009276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800927a:	d815      	bhi.n	80092a8 <UART_SetConfig+0x258>
 800927c:	2b00      	cmp	r3, #0
 800927e:	d003      	beq.n	8009288 <UART_SetConfig+0x238>
 8009280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009284:	d008      	beq.n	8009298 <UART_SetConfig+0x248>
 8009286:	e00f      	b.n	80092a8 <UART_SetConfig+0x258>
 8009288:	2300      	movs	r3, #0
 800928a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800928e:	e052      	b.n	8009336 <UART_SetConfig+0x2e6>
 8009290:	2302      	movs	r3, #2
 8009292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009296:	e04e      	b.n	8009336 <UART_SetConfig+0x2e6>
 8009298:	2304      	movs	r3, #4
 800929a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800929e:	e04a      	b.n	8009336 <UART_SetConfig+0x2e6>
 80092a0:	2308      	movs	r3, #8
 80092a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092a6:	e046      	b.n	8009336 <UART_SetConfig+0x2e6>
 80092a8:	2310      	movs	r3, #16
 80092aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092ae:	e042      	b.n	8009336 <UART_SetConfig+0x2e6>
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a17      	ldr	r2, [pc, #92]	; (8009314 <UART_SetConfig+0x2c4>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d13a      	bne.n	8009330 <UART_SetConfig+0x2e0>
 80092ba:	4b18      	ldr	r3, [pc, #96]	; (800931c <UART_SetConfig+0x2cc>)
 80092bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80092c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80092c8:	d01a      	beq.n	8009300 <UART_SetConfig+0x2b0>
 80092ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80092ce:	d81b      	bhi.n	8009308 <UART_SetConfig+0x2b8>
 80092d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092d4:	d00c      	beq.n	80092f0 <UART_SetConfig+0x2a0>
 80092d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092da:	d815      	bhi.n	8009308 <UART_SetConfig+0x2b8>
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d003      	beq.n	80092e8 <UART_SetConfig+0x298>
 80092e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092e4:	d008      	beq.n	80092f8 <UART_SetConfig+0x2a8>
 80092e6:	e00f      	b.n	8009308 <UART_SetConfig+0x2b8>
 80092e8:	2300      	movs	r3, #0
 80092ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092ee:	e022      	b.n	8009336 <UART_SetConfig+0x2e6>
 80092f0:	2302      	movs	r3, #2
 80092f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092f6:	e01e      	b.n	8009336 <UART_SetConfig+0x2e6>
 80092f8:	2304      	movs	r3, #4
 80092fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092fe:	e01a      	b.n	8009336 <UART_SetConfig+0x2e6>
 8009300:	2308      	movs	r3, #8
 8009302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009306:	e016      	b.n	8009336 <UART_SetConfig+0x2e6>
 8009308:	2310      	movs	r3, #16
 800930a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800930e:	e012      	b.n	8009336 <UART_SetConfig+0x2e6>
 8009310:	efff69f3 	.word	0xefff69f3
 8009314:	40008000 	.word	0x40008000
 8009318:	40013800 	.word	0x40013800
 800931c:	40021000 	.word	0x40021000
 8009320:	40004400 	.word	0x40004400
 8009324:	40004800 	.word	0x40004800
 8009328:	40004c00 	.word	0x40004c00
 800932c:	40005000 	.word	0x40005000
 8009330:	2310      	movs	r3, #16
 8009332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4aa0      	ldr	r2, [pc, #640]	; (80095bc <UART_SetConfig+0x56c>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d17a      	bne.n	8009436 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009340:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009344:	2b08      	cmp	r3, #8
 8009346:	d824      	bhi.n	8009392 <UART_SetConfig+0x342>
 8009348:	a201      	add	r2, pc, #4	; (adr r2, 8009350 <UART_SetConfig+0x300>)
 800934a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934e:	bf00      	nop
 8009350:	08009375 	.word	0x08009375
 8009354:	08009393 	.word	0x08009393
 8009358:	0800937d 	.word	0x0800937d
 800935c:	08009393 	.word	0x08009393
 8009360:	08009383 	.word	0x08009383
 8009364:	08009393 	.word	0x08009393
 8009368:	08009393 	.word	0x08009393
 800936c:	08009393 	.word	0x08009393
 8009370:	0800938b 	.word	0x0800938b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009374:	f7fc fc04 	bl	8005b80 <HAL_RCC_GetPCLK1Freq>
 8009378:	61f8      	str	r0, [r7, #28]
        break;
 800937a:	e010      	b.n	800939e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800937c:	4b90      	ldr	r3, [pc, #576]	; (80095c0 <UART_SetConfig+0x570>)
 800937e:	61fb      	str	r3, [r7, #28]
        break;
 8009380:	e00d      	b.n	800939e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009382:	f7fc fb65 	bl	8005a50 <HAL_RCC_GetSysClockFreq>
 8009386:	61f8      	str	r0, [r7, #28]
        break;
 8009388:	e009      	b.n	800939e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800938a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800938e:	61fb      	str	r3, [r7, #28]
        break;
 8009390:	e005      	b.n	800939e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009392:	2300      	movs	r3, #0
 8009394:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800939c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f000 80fd 	beq.w	80095a0 <UART_SetConfig+0x550>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	685a      	ldr	r2, [r3, #4]
 80093aa:	4613      	mov	r3, r2
 80093ac:	005b      	lsls	r3, r3, #1
 80093ae:	4413      	add	r3, r2
 80093b0:	69fa      	ldr	r2, [r7, #28]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d305      	bcc.n	80093c2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80093bc:	69fa      	ldr	r2, [r7, #28]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d903      	bls.n	80093ca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80093c8:	e0ea      	b.n	80095a0 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	2200      	movs	r2, #0
 80093ce:	461c      	mov	r4, r3
 80093d0:	4615      	mov	r5, r2
 80093d2:	f04f 0200 	mov.w	r2, #0
 80093d6:	f04f 0300 	mov.w	r3, #0
 80093da:	022b      	lsls	r3, r5, #8
 80093dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80093e0:	0222      	lsls	r2, r4, #8
 80093e2:	68f9      	ldr	r1, [r7, #12]
 80093e4:	6849      	ldr	r1, [r1, #4]
 80093e6:	0849      	lsrs	r1, r1, #1
 80093e8:	2000      	movs	r0, #0
 80093ea:	4688      	mov	r8, r1
 80093ec:	4681      	mov	r9, r0
 80093ee:	eb12 0a08 	adds.w	sl, r2, r8
 80093f2:	eb43 0b09 	adc.w	fp, r3, r9
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	603b      	str	r3, [r7, #0]
 80093fe:	607a      	str	r2, [r7, #4]
 8009400:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009404:	4650      	mov	r0, sl
 8009406:	4659      	mov	r1, fp
 8009408:	f7f7 fbce 	bl	8000ba8 <__aeabi_uldivmod>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	4613      	mov	r3, r2
 8009412:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800941a:	d308      	bcc.n	800942e <UART_SetConfig+0x3de>
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009422:	d204      	bcs.n	800942e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	69ba      	ldr	r2, [r7, #24]
 800942a:	60da      	str	r2, [r3, #12]
 800942c:	e0b8      	b.n	80095a0 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009434:	e0b4      	b.n	80095a0 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	69db      	ldr	r3, [r3, #28]
 800943a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800943e:	d15f      	bne.n	8009500 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 8009440:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009444:	2b08      	cmp	r3, #8
 8009446:	d828      	bhi.n	800949a <UART_SetConfig+0x44a>
 8009448:	a201      	add	r2, pc, #4	; (adr r2, 8009450 <UART_SetConfig+0x400>)
 800944a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944e:	bf00      	nop
 8009450:	08009475 	.word	0x08009475
 8009454:	0800947d 	.word	0x0800947d
 8009458:	08009485 	.word	0x08009485
 800945c:	0800949b 	.word	0x0800949b
 8009460:	0800948b 	.word	0x0800948b
 8009464:	0800949b 	.word	0x0800949b
 8009468:	0800949b 	.word	0x0800949b
 800946c:	0800949b 	.word	0x0800949b
 8009470:	08009493 	.word	0x08009493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009474:	f7fc fb84 	bl	8005b80 <HAL_RCC_GetPCLK1Freq>
 8009478:	61f8      	str	r0, [r7, #28]
        break;
 800947a:	e014      	b.n	80094a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800947c:	f7fc fb96 	bl	8005bac <HAL_RCC_GetPCLK2Freq>
 8009480:	61f8      	str	r0, [r7, #28]
        break;
 8009482:	e010      	b.n	80094a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009484:	4b4e      	ldr	r3, [pc, #312]	; (80095c0 <UART_SetConfig+0x570>)
 8009486:	61fb      	str	r3, [r7, #28]
        break;
 8009488:	e00d      	b.n	80094a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800948a:	f7fc fae1 	bl	8005a50 <HAL_RCC_GetSysClockFreq>
 800948e:	61f8      	str	r0, [r7, #28]
        break;
 8009490:	e009      	b.n	80094a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009496:	61fb      	str	r3, [r7, #28]
        break;
 8009498:	e005      	b.n	80094a6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800949a:	2300      	movs	r3, #0
 800949c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80094a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d079      	beq.n	80095a0 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	005a      	lsls	r2, r3, #1
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	085b      	lsrs	r3, r3, #1
 80094b6:	441a      	add	r2, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	2b0f      	cmp	r3, #15
 80094c8:	d916      	bls.n	80094f8 <UART_SetConfig+0x4a8>
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094d0:	d212      	bcs.n	80094f8 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	f023 030f 	bic.w	r3, r3, #15
 80094da:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	085b      	lsrs	r3, r3, #1
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	f003 0307 	and.w	r3, r3, #7
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	8afb      	ldrh	r3, [r7, #22]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	8afa      	ldrh	r2, [r7, #22]
 80094f4:	60da      	str	r2, [r3, #12]
 80094f6:	e053      	b.n	80095a0 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80094fe:	e04f      	b.n	80095a0 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009500:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009504:	2b08      	cmp	r3, #8
 8009506:	d828      	bhi.n	800955a <UART_SetConfig+0x50a>
 8009508:	a201      	add	r2, pc, #4	; (adr r2, 8009510 <UART_SetConfig+0x4c0>)
 800950a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800950e:	bf00      	nop
 8009510:	08009535 	.word	0x08009535
 8009514:	0800953d 	.word	0x0800953d
 8009518:	08009545 	.word	0x08009545
 800951c:	0800955b 	.word	0x0800955b
 8009520:	0800954b 	.word	0x0800954b
 8009524:	0800955b 	.word	0x0800955b
 8009528:	0800955b 	.word	0x0800955b
 800952c:	0800955b 	.word	0x0800955b
 8009530:	08009553 	.word	0x08009553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009534:	f7fc fb24 	bl	8005b80 <HAL_RCC_GetPCLK1Freq>
 8009538:	61f8      	str	r0, [r7, #28]
        break;
 800953a:	e014      	b.n	8009566 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800953c:	f7fc fb36 	bl	8005bac <HAL_RCC_GetPCLK2Freq>
 8009540:	61f8      	str	r0, [r7, #28]
        break;
 8009542:	e010      	b.n	8009566 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009544:	4b1e      	ldr	r3, [pc, #120]	; (80095c0 <UART_SetConfig+0x570>)
 8009546:	61fb      	str	r3, [r7, #28]
        break;
 8009548:	e00d      	b.n	8009566 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800954a:	f7fc fa81 	bl	8005a50 <HAL_RCC_GetSysClockFreq>
 800954e:	61f8      	str	r0, [r7, #28]
        break;
 8009550:	e009      	b.n	8009566 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009556:	61fb      	str	r3, [r7, #28]
        break;
 8009558:	e005      	b.n	8009566 <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 800955a:	2300      	movs	r3, #0
 800955c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009564:	bf00      	nop
    }

    if (pclk != 0U)
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d019      	beq.n	80095a0 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	085a      	lsrs	r2, r3, #1
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	441a      	add	r2, r3
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	fbb2 f3f3 	udiv	r3, r2, r3
 800957e:	b29b      	uxth	r3, r3
 8009580:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	2b0f      	cmp	r3, #15
 8009586:	d908      	bls.n	800959a <UART_SetConfig+0x54a>
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800958e:	d204      	bcs.n	800959a <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	69ba      	ldr	r2, [r7, #24]
 8009596:	60da      	str	r2, [r3, #12]
 8009598:	e002      	b.n	80095a0 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2200      	movs	r2, #0
 80095a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2200      	movs	r2, #0
 80095aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80095ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3728      	adds	r7, #40	; 0x28
 80095b4:	46bd      	mov	sp, r7
 80095b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095ba:	bf00      	nop
 80095bc:	40008000 	.word	0x40008000
 80095c0:	00f42400 	.word	0x00f42400

080095c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d0:	f003 0301 	and.w	r3, r3, #1
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00a      	beq.n	80095ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	430a      	orrs	r2, r1
 80095ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f2:	f003 0302 	and.w	r3, r3, #2
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00a      	beq.n	8009610 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	430a      	orrs	r2, r1
 800960e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009614:	f003 0304 	and.w	r3, r3, #4
 8009618:	2b00      	cmp	r3, #0
 800961a:	d00a      	beq.n	8009632 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	430a      	orrs	r2, r1
 8009630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009636:	f003 0308 	and.w	r3, r3, #8
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00a      	beq.n	8009654 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	430a      	orrs	r2, r1
 8009652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009658:	f003 0310 	and.w	r3, r3, #16
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00a      	beq.n	8009676 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	430a      	orrs	r2, r1
 8009674:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967a:	f003 0320 	and.w	r3, r3, #32
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00a      	beq.n	8009698 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	430a      	orrs	r2, r1
 8009696:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d01a      	beq.n	80096da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	430a      	orrs	r2, r1
 80096b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096c2:	d10a      	bne.n	80096da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	430a      	orrs	r2, r1
 80096d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00a      	beq.n	80096fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	430a      	orrs	r2, r1
 80096fa:	605a      	str	r2, [r3, #4]
  }
}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b086      	sub	sp, #24
 800970c:	af02      	add	r7, sp, #8
 800970e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009718:	f7f9 fef2 	bl	8003500 <HAL_GetTick>
 800971c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f003 0308 	and.w	r3, r3, #8
 8009728:	2b08      	cmp	r3, #8
 800972a:	d10e      	bne.n	800974a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800972c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2200      	movs	r2, #0
 8009736:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 f82d 	bl	800979a <UART_WaitOnFlagUntilTimeout>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d001      	beq.n	800974a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009746:	2303      	movs	r3, #3
 8009748:	e023      	b.n	8009792 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f003 0304 	and.w	r3, r3, #4
 8009754:	2b04      	cmp	r3, #4
 8009756:	d10e      	bne.n	8009776 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009758:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f817 	bl	800979a <UART_WaitOnFlagUntilTimeout>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d001      	beq.n	8009776 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009772:	2303      	movs	r3, #3
 8009774:	e00d      	b.n	8009792 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2220      	movs	r2, #32
 800977a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2220      	movs	r2, #32
 8009780:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b084      	sub	sp, #16
 800979e:	af00      	add	r7, sp, #0
 80097a0:	60f8      	str	r0, [r7, #12]
 80097a2:	60b9      	str	r1, [r7, #8]
 80097a4:	603b      	str	r3, [r7, #0]
 80097a6:	4613      	mov	r3, r2
 80097a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097aa:	e05e      	b.n	800986a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097ac:	69bb      	ldr	r3, [r7, #24]
 80097ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097b2:	d05a      	beq.n	800986a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097b4:	f7f9 fea4 	bl	8003500 <HAL_GetTick>
 80097b8:	4602      	mov	r2, r0
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	1ad3      	subs	r3, r2, r3
 80097be:	69ba      	ldr	r2, [r7, #24]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d302      	bcc.n	80097ca <UART_WaitOnFlagUntilTimeout+0x30>
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d11b      	bne.n	8009802 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80097d8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	689a      	ldr	r2, [r3, #8]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f022 0201 	bic.w	r2, r2, #1
 80097e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2220      	movs	r2, #32
 80097ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2220      	movs	r2, #32
 80097f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80097fe:	2303      	movs	r3, #3
 8009800:	e043      	b.n	800988a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 0304 	and.w	r3, r3, #4
 800980c:	2b00      	cmp	r3, #0
 800980e:	d02c      	beq.n	800986a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	69db      	ldr	r3, [r3, #28]
 8009816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800981a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800981e:	d124      	bne.n	800986a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009828:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009838:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	689a      	ldr	r2, [r3, #8]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f022 0201 	bic.w	r2, r2, #1
 8009848:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2220      	movs	r2, #32
 800984e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2220      	movs	r2, #32
 8009854:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2220      	movs	r2, #32
 800985a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009866:	2303      	movs	r3, #3
 8009868:	e00f      	b.n	800988a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	69da      	ldr	r2, [r3, #28]
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	4013      	ands	r3, r2
 8009874:	68ba      	ldr	r2, [r7, #8]
 8009876:	429a      	cmp	r2, r3
 8009878:	bf0c      	ite	eq
 800987a:	2301      	moveq	r3, #1
 800987c:	2300      	movne	r3, #0
 800987e:	b2db      	uxtb	r3, r3
 8009880:	461a      	mov	r2, r3
 8009882:	79fb      	ldrb	r3, [r7, #7]
 8009884:	429a      	cmp	r2, r3
 8009886:	d091      	beq.n	80097ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
	...

08009894 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	4613      	mov	r3, r2
 80098a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	88fa      	ldrh	r2, [r7, #6]
 80098ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	88fa      	ldrh	r2, [r7, #6]
 80098b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2200      	movs	r2, #0
 80098bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098c6:	d10e      	bne.n	80098e6 <UART_Start_Receive_IT+0x52>
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d105      	bne.n	80098dc <UART_Start_Receive_IT+0x48>
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80098d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80098da:	e02d      	b.n	8009938 <UART_Start_Receive_IT+0xa4>
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	22ff      	movs	r2, #255	; 0xff
 80098e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80098e4:	e028      	b.n	8009938 <UART_Start_Receive_IT+0xa4>
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10d      	bne.n	800990a <UART_Start_Receive_IT+0x76>
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d104      	bne.n	8009900 <UART_Start_Receive_IT+0x6c>
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	22ff      	movs	r2, #255	; 0xff
 80098fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80098fe:	e01b      	b.n	8009938 <UART_Start_Receive_IT+0xa4>
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	227f      	movs	r2, #127	; 0x7f
 8009904:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009908:	e016      	b.n	8009938 <UART_Start_Receive_IT+0xa4>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009912:	d10d      	bne.n	8009930 <UART_Start_Receive_IT+0x9c>
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d104      	bne.n	8009926 <UART_Start_Receive_IT+0x92>
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	227f      	movs	r2, #127	; 0x7f
 8009920:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009924:	e008      	b.n	8009938 <UART_Start_Receive_IT+0xa4>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	223f      	movs	r2, #63	; 0x3f
 800992a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800992e:	e003      	b.n	8009938 <UART_Start_Receive_IT+0xa4>
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2200      	movs	r2, #0
 800993c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2222      	movs	r2, #34	; 0x22
 8009944:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	689a      	ldr	r2, [r3, #8]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f042 0201 	orr.w	r2, r2, #1
 8009954:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800995e:	d107      	bne.n	8009970 <UART_Start_Receive_IT+0xdc>
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d103      	bne.n	8009970 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	4a0c      	ldr	r2, [pc, #48]	; (800999c <UART_Start_Receive_IT+0x108>)
 800996c:	665a      	str	r2, [r3, #100]	; 0x64
 800996e:	e002      	b.n	8009976 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	4a0b      	ldr	r2, [pc, #44]	; (80099a0 <UART_Start_Receive_IT+0x10c>)
 8009974:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2200      	movs	r2, #0
 800997a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800998c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800998e:	2300      	movs	r3, #0
}
 8009990:	4618      	mov	r0, r3
 8009992:	3714      	adds	r7, #20
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr
 800999c:	08009b39 	.word	0x08009b39
 80099a0:	08009a61 	.word	0x08009a61

080099a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80099ba:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	689a      	ldr	r2, [r3, #8]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f022 0201 	bic.w	r2, r2, #1
 80099ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d107      	bne.n	80099e4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f022 0210 	bic.w	r2, r2, #16
 80099e2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2220      	movs	r2, #32
 80099e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80099f6:	bf00      	nop
 80099f8:	370c      	adds	r7, #12
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr

08009a02 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b084      	sub	sp, #16
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f7ff faff 	bl	8009024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a26:	bf00      	nop
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b082      	sub	sp, #8
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a44:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2220      	movs	r2, #32
 8009a4a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f7ff fadc 	bl	8009010 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a58:	bf00      	nop
 8009a5a:	3708      	adds	r7, #8
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a6e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a74:	2b22      	cmp	r3, #34	; 0x22
 8009a76:	d151      	bne.n	8009b1c <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009a7e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009a80:	89bb      	ldrh	r3, [r7, #12]
 8009a82:	b2d9      	uxtb	r1, r3
 8009a84:	89fb      	ldrh	r3, [r7, #14]
 8009a86:	b2da      	uxtb	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a8c:	400a      	ands	r2, r1
 8009a8e:	b2d2      	uxtb	r2, r2
 8009a90:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a96:	1c5a      	adds	r2, r3, #1
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d13a      	bne.n	8009b30 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009ac8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	689a      	ldr	r2, [r3, #8]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f022 0201 	bic.w	r2, r2, #1
 8009ad8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2220      	movs	r2, #32
 8009ade:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d10f      	bne.n	8009b0e <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f022 0210 	bic.w	r2, r2, #16
 8009afc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009b04:	4619      	mov	r1, r3
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f7ff fa96 	bl	8009038 <HAL_UARTEx_RxEventCallback>
 8009b0c:	e002      	b.n	8009b14 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7f7 ff1e 	bl	8001950 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b1a:	e009      	b.n	8009b30 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	8b1b      	ldrh	r3, [r3, #24]
 8009b22:	b29a      	uxth	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f042 0208 	orr.w	r2, r2, #8
 8009b2c:	b292      	uxth	r2, r2
 8009b2e:	831a      	strh	r2, [r3, #24]
}
 8009b30:	bf00      	nop
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b46:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b4c:	2b22      	cmp	r3, #34	; 0x22
 8009b4e:	d151      	bne.n	8009bf4 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009b56:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b5c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8009b5e:	89ba      	ldrh	r2, [r7, #12]
 8009b60:	89fb      	ldrh	r3, [r7, #14]
 8009b62:	4013      	ands	r3, r2
 8009b64:	b29a      	uxth	r2, r3
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b6e:	1c9a      	adds	r2, r3, #2
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d13a      	bne.n	8009c08 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009ba0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	689a      	ldr	r2, [r3, #8]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f022 0201 	bic.w	r2, r2, #1
 8009bb0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2220      	movs	r2, #32
 8009bb6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d10f      	bne.n	8009be6 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f022 0210 	bic.w	r2, r2, #16
 8009bd4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7ff fa2a 	bl	8009038 <HAL_UARTEx_RxEventCallback>
 8009be4:	e002      	b.n	8009bec <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f7f7 feb2 	bl	8001950 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009bf2:	e009      	b.n	8009c08 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	8b1b      	ldrh	r3, [r3, #24]
 8009bfa:	b29a      	uxth	r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f042 0208 	orr.w	r2, r2, #8
 8009c04:	b292      	uxth	r2, r2
 8009c06:	831a      	strh	r2, [r3, #24]
}
 8009c08:	bf00      	nop
 8009c0a:	3710      	adds	r7, #16
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009c18:	bf00      	nop
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c24:	b084      	sub	sp, #16
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b084      	sub	sp, #16
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
 8009c2e:	f107 001c 	add.w	r0, r7, #28
 8009c32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 fa24 	bl	800a090 <USB_CoreReset>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d106      	bne.n	8009c60 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	639a      	str	r2, [r3, #56]	; 0x38
 8009c5e:	e005      	b.n	8009c6c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8009c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c78:	b004      	add	sp, #16
 8009c7a:	4770      	bx	lr

08009c7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	f023 0201 	bic.w	r2, r3, #1
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	370c      	adds	r7, #12
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr

08009c9e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b082      	sub	sp, #8
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	68db      	ldr	r3, [r3, #12]
 8009cae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009cb6:	78fb      	ldrb	r3, [r7, #3]
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d106      	bne.n	8009cca <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	68db      	ldr	r3, [r3, #12]
 8009cc0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	60da      	str	r2, [r3, #12]
 8009cc8:	e00b      	b.n	8009ce2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009cca:	78fb      	ldrb	r3, [r7, #3]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d106      	bne.n	8009cde <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	60da      	str	r2, [r3, #12]
 8009cdc:	e001      	b.n	8009ce2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e003      	b.n	8009cea <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009ce2:	2032      	movs	r0, #50	; 0x32
 8009ce4:	f7f9 fc18 	bl	8003518 <HAL_Delay>

  return HAL_OK;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3708      	adds	r7, #8
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
	...

08009cf4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009cf4:	b084      	sub	sp, #16
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b086      	sub	sp, #24
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
 8009cfe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009d02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009d06:	2300      	movs	r3, #0
 8009d08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009d0e:	2300      	movs	r3, #0
 8009d10:	613b      	str	r3, [r7, #16]
 8009d12:	e009      	b.n	8009d28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	3340      	adds	r3, #64	; 0x40
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	4413      	add	r3, r2
 8009d1e:	2200      	movs	r2, #0
 8009d20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	3301      	adds	r3, #1
 8009d26:	613b      	str	r3, [r7, #16]
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	2b0e      	cmp	r3, #14
 8009d2c:	d9f2      	bls.n	8009d14 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d11c      	bne.n	8009d6e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	68fa      	ldr	r2, [r7, #12]
 8009d3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d42:	f043 0302 	orr.w	r3, r3, #2
 8009d46:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d4c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	601a      	str	r2, [r3, #0]
 8009d6c:	e005      	b.n	8009d7a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d80:	461a      	mov	r2, r3
 8009d82:	2300      	movs	r3, #0
 8009d84:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d94:	461a      	mov	r2, r3
 8009d96:	680b      	ldr	r3, [r1, #0]
 8009d98:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009d9a:	2103      	movs	r1, #3
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 f93d 	bl	800a01c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009da2:	2110      	movs	r1, #16
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 f8f1 	bl	8009f8c <USB_FlushTxFifo>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d001      	beq.n	8009db4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8009db0:	2301      	movs	r3, #1
 8009db2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 f90f 	bl	8009fd8 <USB_FlushRxFifo>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d001      	beq.n	8009dc4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dca:	461a      	mov	r2, r3
 8009dcc:	2300      	movs	r3, #0
 8009dce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	2300      	movs	r3, #0
 8009dda:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009de2:	461a      	mov	r2, r3
 8009de4:	2300      	movs	r3, #0
 8009de6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009de8:	2300      	movs	r3, #0
 8009dea:	613b      	str	r3, [r7, #16]
 8009dec:	e043      	b.n	8009e76 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	015a      	lsls	r2, r3, #5
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	4413      	add	r3, r2
 8009df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e04:	d118      	bne.n	8009e38 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10a      	bne.n	8009e22 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	015a      	lsls	r2, r3, #5
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	4413      	add	r3, r2
 8009e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e18:	461a      	mov	r2, r3
 8009e1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009e1e:	6013      	str	r3, [r2, #0]
 8009e20:	e013      	b.n	8009e4a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	015a      	lsls	r2, r3, #5
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	4413      	add	r3, r2
 8009e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e2e:	461a      	mov	r2, r3
 8009e30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009e34:	6013      	str	r3, [r2, #0]
 8009e36:	e008      	b.n	8009e4a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	015a      	lsls	r2, r3, #5
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	4413      	add	r3, r2
 8009e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e44:	461a      	mov	r2, r3
 8009e46:	2300      	movs	r3, #0
 8009e48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	015a      	lsls	r2, r3, #5
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	4413      	add	r3, r2
 8009e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e56:	461a      	mov	r2, r3
 8009e58:	2300      	movs	r3, #0
 8009e5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	015a      	lsls	r2, r3, #5
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	4413      	add	r3, r2
 8009e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e68:	461a      	mov	r2, r3
 8009e6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009e6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	3301      	adds	r3, #1
 8009e74:	613b      	str	r3, [r7, #16]
 8009e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e78:	693a      	ldr	r2, [r7, #16]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d3b7      	bcc.n	8009dee <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e7e:	2300      	movs	r3, #0
 8009e80:	613b      	str	r3, [r7, #16]
 8009e82:	e043      	b.n	8009f0c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	015a      	lsls	r2, r3, #5
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e9a:	d118      	bne.n	8009ece <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d10a      	bne.n	8009eb8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	015a      	lsls	r2, r3, #5
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eae:	461a      	mov	r2, r3
 8009eb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009eb4:	6013      	str	r3, [r2, #0]
 8009eb6:	e013      	b.n	8009ee0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	015a      	lsls	r2, r3, #5
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	4413      	add	r3, r2
 8009ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009eca:	6013      	str	r3, [r2, #0]
 8009ecc:	e008      	b.n	8009ee0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	015a      	lsls	r2, r3, #5
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eda:	461a      	mov	r2, r3
 8009edc:	2300      	movs	r3, #0
 8009ede:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	015a      	lsls	r2, r3, #5
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eec:	461a      	mov	r2, r3
 8009eee:	2300      	movs	r3, #0
 8009ef0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	015a      	lsls	r2, r3, #5
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	4413      	add	r3, r2
 8009efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009efe:	461a      	mov	r2, r3
 8009f00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009f04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	3301      	adds	r3, #1
 8009f0a:	613b      	str	r3, [r7, #16]
 8009f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0e:	693a      	ldr	r2, [r7, #16]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d3b7      	bcc.n	8009e84 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f1a:	691b      	ldr	r3, [r3, #16]
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f26:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009f34:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	699b      	ldr	r3, [r3, #24]
 8009f3a:	f043 0210 	orr.w	r2, r3, #16
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	699a      	ldr	r2, [r3, #24]
 8009f46:	4b10      	ldr	r3, [pc, #64]	; (8009f88 <USB_DevInit+0x294>)
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d005      	beq.n	8009f60 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	699b      	ldr	r3, [r3, #24]
 8009f58:	f043 0208 	orr.w	r2, r3, #8
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d107      	bne.n	8009f76 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	699b      	ldr	r3, [r3, #24]
 8009f6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f6e:	f043 0304 	orr.w	r3, r3, #4
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3718      	adds	r7, #24
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f82:	b004      	add	sp, #16
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	803c3800 	.word	0x803c3800

08009f8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b085      	sub	sp, #20
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009f96:	2300      	movs	r3, #0
 8009f98:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	019b      	lsls	r3, r3, #6
 8009f9e:	f043 0220 	orr.w	r2, r3, #32
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	60fb      	str	r3, [r7, #12]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	4a09      	ldr	r2, [pc, #36]	; (8009fd4 <USB_FlushTxFifo+0x48>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d901      	bls.n	8009fb8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	e006      	b.n	8009fc6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	691b      	ldr	r3, [r3, #16]
 8009fbc:	f003 0320 	and.w	r3, r3, #32
 8009fc0:	2b20      	cmp	r3, #32
 8009fc2:	d0f0      	beq.n	8009fa6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3714      	adds	r7, #20
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	00030d40 	.word	0x00030d40

08009fd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2210      	movs	r2, #16
 8009fe8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	3301      	adds	r3, #1
 8009fee:	60fb      	str	r3, [r7, #12]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	4a09      	ldr	r2, [pc, #36]	; (800a018 <USB_FlushRxFifo+0x40>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d901      	bls.n	8009ffc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	e006      	b.n	800a00a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	f003 0310 	and.w	r3, r3, #16
 800a004:	2b10      	cmp	r3, #16
 800a006:	d0f0      	beq.n	8009fea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3714      	adds	r7, #20
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop
 800a018:	00030d40 	.word	0x00030d40

0800a01c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b085      	sub	sp, #20
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	460b      	mov	r3, r1
 800a026:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	78fb      	ldrb	r3, [r7, #3]
 800a036:	68f9      	ldr	r1, [r7, #12]
 800a038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a03c:	4313      	orrs	r3, r2
 800a03e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3714      	adds	r7, #20
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr

0800a04e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a04e:	b480      	push	{r7}
 800a050:	b085      	sub	sp, #20
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	68fa      	ldr	r2, [r7, #12]
 800a064:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a068:	f023 0303 	bic.w	r3, r3, #3
 800a06c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a07c:	f043 0302 	orr.w	r3, r3, #2
 800a080:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a082:	2300      	movs	r3, #0
}
 800a084:	4618      	mov	r0, r3
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a098:	2300      	movs	r3, #0
 800a09a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	60fb      	str	r3, [r7, #12]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	4a13      	ldr	r2, [pc, #76]	; (800a0f4 <USB_CoreReset+0x64>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d901      	bls.n	800a0ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	e01b      	b.n	800a0e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	daf2      	bge.n	800a09c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	f043 0201 	orr.w	r2, r3, #1
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	60fb      	str	r3, [r7, #12]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	4a09      	ldr	r2, [pc, #36]	; (800a0f4 <USB_CoreReset+0x64>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d901      	bls.n	800a0d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a0d4:	2303      	movs	r3, #3
 800a0d6:	e006      	b.n	800a0e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	691b      	ldr	r3, [r3, #16]
 800a0dc:	f003 0301 	and.w	r3, r3, #1
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d0f0      	beq.n	800a0c6 <USB_CoreReset+0x36>

  return HAL_OK;
 800a0e4:	2300      	movs	r3, #0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3714      	adds	r7, #20
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr
 800a0f2:	bf00      	nop
 800a0f4:	00030d40 	.word	0x00030d40

0800a0f8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b08a      	sub	sp, #40	; 0x28
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800a100:	4b27      	ldr	r3, [pc, #156]	; (800a1a0 <I2Cx_MspInit+0xa8>)
 800a102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a104:	4a26      	ldr	r2, [pc, #152]	; (800a1a0 <I2Cx_MspInit+0xa8>)
 800a106:	f043 0302 	orr.w	r3, r3, #2
 800a10a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a10c:	4b24      	ldr	r3, [pc, #144]	; (800a1a0 <I2Cx_MspInit+0xa8>)
 800a10e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a110:	f003 0302 	and.w	r3, r3, #2
 800a114:	613b      	str	r3, [r7, #16]
 800a116:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800a118:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a11c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800a11e:	2312      	movs	r3, #18
 800a120:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800a122:	2301      	movs	r3, #1
 800a124:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a126:	2303      	movs	r3, #3
 800a128:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800a12a:	2304      	movs	r3, #4
 800a12c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800a12e:	f107 0314 	add.w	r3, r7, #20
 800a132:	4619      	mov	r1, r3
 800a134:	481b      	ldr	r0, [pc, #108]	; (800a1a4 <I2Cx_MspInit+0xac>)
 800a136:	f7f9 fcb3 	bl	8003aa0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800a13a:	f107 0314 	add.w	r3, r7, #20
 800a13e:	4619      	mov	r1, r3
 800a140:	4818      	ldr	r0, [pc, #96]	; (800a1a4 <I2Cx_MspInit+0xac>)
 800a142:	f7f9 fcad 	bl	8003aa0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800a146:	4b16      	ldr	r3, [pc, #88]	; (800a1a0 <I2Cx_MspInit+0xa8>)
 800a148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a14a:	4a15      	ldr	r2, [pc, #84]	; (800a1a0 <I2Cx_MspInit+0xa8>)
 800a14c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a150:	6593      	str	r3, [r2, #88]	; 0x58
 800a152:	4b13      	ldr	r3, [pc, #76]	; (800a1a0 <I2Cx_MspInit+0xa8>)
 800a154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a15a:	60fb      	str	r3, [r7, #12]
 800a15c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800a15e:	4b10      	ldr	r3, [pc, #64]	; (800a1a0 <I2Cx_MspInit+0xa8>)
 800a160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a162:	4a0f      	ldr	r2, [pc, #60]	; (800a1a0 <I2Cx_MspInit+0xa8>)
 800a164:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a168:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800a16a:	4b0d      	ldr	r3, [pc, #52]	; (800a1a0 <I2Cx_MspInit+0xa8>)
 800a16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a16e:	4a0c      	ldr	r2, [pc, #48]	; (800a1a0 <I2Cx_MspInit+0xa8>)
 800a170:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a174:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800a176:	2200      	movs	r2, #0
 800a178:	210f      	movs	r1, #15
 800a17a:	2021      	movs	r0, #33	; 0x21
 800a17c:	f7f9 facc 	bl	8003718 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800a180:	2021      	movs	r0, #33	; 0x21
 800a182:	f7f9 fae5 	bl	8003750 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800a186:	2200      	movs	r2, #0
 800a188:	210f      	movs	r1, #15
 800a18a:	2022      	movs	r0, #34	; 0x22
 800a18c:	f7f9 fac4 	bl	8003718 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800a190:	2022      	movs	r0, #34	; 0x22
 800a192:	f7f9 fadd 	bl	8003750 <HAL_NVIC_EnableIRQ>
}
 800a196:	bf00      	nop
 800a198:	3728      	adds	r7, #40	; 0x28
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	40021000 	.word	0x40021000
 800a1a4:	48000400 	.word	0x48000400

0800a1a8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	4a12      	ldr	r2, [pc, #72]	; (800a1fc <I2Cx_Init+0x54>)
 800a1b4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4a11      	ldr	r2, [pc, #68]	; (800a200 <I2Cx_Init+0x58>)
 800a1ba:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f7ff ff89 	bl	800a0f8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f7f9 ff40 	bl	800406c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f7fa fc44 	bl	8004a7c <HAL_I2CEx_ConfigAnalogFilter>
}
 800a1f4:	bf00      	nop
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	40005800 	.word	0x40005800
 800a200:	00702681 	.word	0x00702681

0800a204 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b08a      	sub	sp, #40	; 0x28
 800a208:	af04      	add	r7, sp, #16
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	4608      	mov	r0, r1
 800a20e:	4611      	mov	r1, r2
 800a210:	461a      	mov	r2, r3
 800a212:	4603      	mov	r3, r0
 800a214:	72fb      	strb	r3, [r7, #11]
 800a216:	460b      	mov	r3, r1
 800a218:	813b      	strh	r3, [r7, #8]
 800a21a:	4613      	mov	r3, r2
 800a21c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a21e:	2300      	movs	r3, #0
 800a220:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800a222:	7afb      	ldrb	r3, [r7, #11]
 800a224:	b299      	uxth	r1, r3
 800a226:	88f8      	ldrh	r0, [r7, #6]
 800a228:	893a      	ldrh	r2, [r7, #8]
 800a22a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a22e:	9302      	str	r3, [sp, #8]
 800a230:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a232:	9301      	str	r3, [sp, #4]
 800a234:	6a3b      	ldr	r3, [r7, #32]
 800a236:	9300      	str	r3, [sp, #0]
 800a238:	4603      	mov	r3, r0
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f7fa f8e8 	bl	8004410 <HAL_I2C_Mem_Read>
 800a240:	4603      	mov	r3, r0
 800a242:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800a244:	7dfb      	ldrb	r3, [r7, #23]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d004      	beq.n	800a254 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800a24a:	7afb      	ldrb	r3, [r7, #11]
 800a24c:	4619      	mov	r1, r3
 800a24e:	68f8      	ldr	r0, [r7, #12]
 800a250:	f000 f832 	bl	800a2b8 <I2Cx_Error>
  }
  return status;
 800a254:	7dfb      	ldrb	r3, [r7, #23]
}
 800a256:	4618      	mov	r0, r3
 800a258:	3718      	adds	r7, #24
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b08a      	sub	sp, #40	; 0x28
 800a262:	af04      	add	r7, sp, #16
 800a264:	60f8      	str	r0, [r7, #12]
 800a266:	4608      	mov	r0, r1
 800a268:	4611      	mov	r1, r2
 800a26a:	461a      	mov	r2, r3
 800a26c:	4603      	mov	r3, r0
 800a26e:	72fb      	strb	r3, [r7, #11]
 800a270:	460b      	mov	r3, r1
 800a272:	813b      	strh	r3, [r7, #8]
 800a274:	4613      	mov	r3, r2
 800a276:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a278:	2300      	movs	r3, #0
 800a27a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800a27c:	7afb      	ldrb	r3, [r7, #11]
 800a27e:	b299      	uxth	r1, r3
 800a280:	88f8      	ldrh	r0, [r7, #6]
 800a282:	893a      	ldrh	r2, [r7, #8]
 800a284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a288:	9302      	str	r3, [sp, #8]
 800a28a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a28c:	9301      	str	r3, [sp, #4]
 800a28e:	6a3b      	ldr	r3, [r7, #32]
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	4603      	mov	r3, r0
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	f7f9 ffa7 	bl	80041e8 <HAL_I2C_Mem_Write>
 800a29a:	4603      	mov	r3, r0
 800a29c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800a29e:	7dfb      	ldrb	r3, [r7, #23]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d004      	beq.n	800a2ae <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800a2a4:	7afb      	ldrb	r3, [r7, #11]
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f000 f805 	bl	800a2b8 <I2Cx_Error>
  }
  return status;
 800a2ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3718      	adds	r7, #24
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f7f9 ff60 	bl	800418a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f7ff ff6c 	bl	800a1a8 <I2Cx_Init>
}
 800a2d0:	bf00      	nop
 800a2d2:	3708      	adds	r7, #8
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800a2dc:	4802      	ldr	r0, [pc, #8]	; (800a2e8 <SENSOR_IO_Init+0x10>)
 800a2de:	f7ff ff63 	bl	800a1a8 <I2Cx_Init>
}
 800a2e2:	bf00      	nop
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	20000da4 	.word	0x20000da4

0800a2ec <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af02      	add	r7, sp, #8
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	71fb      	strb	r3, [r7, #7]
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	71bb      	strb	r3, [r7, #6]
 800a2fa:	4613      	mov	r3, r2
 800a2fc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800a2fe:	79bb      	ldrb	r3, [r7, #6]
 800a300:	b29a      	uxth	r2, r3
 800a302:	79f9      	ldrb	r1, [r7, #7]
 800a304:	2301      	movs	r3, #1
 800a306:	9301      	str	r3, [sp, #4]
 800a308:	1d7b      	adds	r3, r7, #5
 800a30a:	9300      	str	r3, [sp, #0]
 800a30c:	2301      	movs	r3, #1
 800a30e:	4803      	ldr	r0, [pc, #12]	; (800a31c <SENSOR_IO_Write+0x30>)
 800a310:	f7ff ffa5 	bl	800a25e <I2Cx_WriteMultiple>
}
 800a314:	bf00      	nop
 800a316:	3708      	adds	r7, #8
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	20000da4 	.word	0x20000da4

0800a320 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b086      	sub	sp, #24
 800a324:	af02      	add	r7, sp, #8
 800a326:	4603      	mov	r3, r0
 800a328:	460a      	mov	r2, r1
 800a32a:	71fb      	strb	r3, [r7, #7]
 800a32c:	4613      	mov	r3, r2
 800a32e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800a330:	2300      	movs	r3, #0
 800a332:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800a334:	79bb      	ldrb	r3, [r7, #6]
 800a336:	b29a      	uxth	r2, r3
 800a338:	79f9      	ldrb	r1, [r7, #7]
 800a33a:	2301      	movs	r3, #1
 800a33c:	9301      	str	r3, [sp, #4]
 800a33e:	f107 030f 	add.w	r3, r7, #15
 800a342:	9300      	str	r3, [sp, #0]
 800a344:	2301      	movs	r3, #1
 800a346:	4804      	ldr	r0, [pc, #16]	; (800a358 <SENSOR_IO_Read+0x38>)
 800a348:	f7ff ff5c 	bl	800a204 <I2Cx_ReadMultiple>

  return read_value;
 800a34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	20000da4 	.word	0x20000da4

0800a35c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af02      	add	r7, sp, #8
 800a362:	603a      	str	r2, [r7, #0]
 800a364:	461a      	mov	r2, r3
 800a366:	4603      	mov	r3, r0
 800a368:	71fb      	strb	r3, [r7, #7]
 800a36a:	460b      	mov	r3, r1
 800a36c:	71bb      	strb	r3, [r7, #6]
 800a36e:	4613      	mov	r3, r2
 800a370:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800a372:	79bb      	ldrb	r3, [r7, #6]
 800a374:	b29a      	uxth	r2, r3
 800a376:	79f9      	ldrb	r1, [r7, #7]
 800a378:	88bb      	ldrh	r3, [r7, #4]
 800a37a:	9301      	str	r3, [sp, #4]
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	2301      	movs	r3, #1
 800a382:	4804      	ldr	r0, [pc, #16]	; (800a394 <SENSOR_IO_ReadMultiple+0x38>)
 800a384:	f7ff ff3e 	bl	800a204 <I2Cx_ReadMultiple>
 800a388:	4603      	mov	r3, r0
 800a38a:	b29b      	uxth	r3, r3
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	20000da4 	.word	0x20000da4

0800a398 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800a3a6:	4b19      	ldr	r3, [pc, #100]	; (800a40c <BSP_ACCELERO_Init+0x74>)
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	4798      	blx	r3
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b6a      	cmp	r3, #106	; 0x6a
 800a3b0:	d002      	beq.n	800a3b8 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	73fb      	strb	r3, [r7, #15]
 800a3b6:	e024      	b.n	800a402 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800a3b8:	4b15      	ldr	r3, [pc, #84]	; (800a410 <BSP_ACCELERO_Init+0x78>)
 800a3ba:	4a14      	ldr	r2, [pc, #80]	; (800a40c <BSP_ACCELERO_Init+0x74>)
 800a3bc:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800a3be:	2330      	movs	r3, #48	; 0x30
 800a3c0:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800a3ca:	2340      	movs	r3, #64	; 0x40
 800a3cc:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800a3d6:	797a      	ldrb	r2, [r7, #5]
 800a3d8:	7abb      	ldrb	r3, [r7, #10]
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800a3e0:	7a3b      	ldrb	r3, [r7, #8]
 800a3e2:	f043 0304 	orr.w	r3, r3, #4
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	021b      	lsls	r3, r3, #8
 800a3ea:	b21a      	sxth	r2, r3
 800a3ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	b21b      	sxth	r3, r3
 800a3f4:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800a3f6:	4b06      	ldr	r3, [pc, #24]	; (800a410 <BSP_ACCELERO_Init+0x78>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	89ba      	ldrh	r2, [r7, #12]
 800a3fe:	4610      	mov	r0, r2
 800a400:	4798      	blx	r3
  }  

  return ret;
 800a402:	7bfb      	ldrb	r3, [r7, #15]
}
 800a404:	4618      	mov	r0, r3
 800a406:	3710      	adds	r7, #16
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	2000001c 	.word	0x2000001c
 800a410:	20000df0 	.word	0x20000df0

0800a414 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 800a41c:	4b08      	ldr	r3, [pc, #32]	; (800a440 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d009      	beq.n	800a438 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800a424:	4b06      	ldr	r3, [pc, #24]	; (800a440 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d004      	beq.n	800a438 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800a42e:	4b04      	ldr	r3, [pc, #16]	; (800a440 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	4798      	blx	r3
    }
  }
}
 800a438:	bf00      	nop
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	20000df0 	.word	0x20000df0

0800a444 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	4603      	mov	r3, r0
 800a44c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800a44e:	2300      	movs	r3, #0
 800a450:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800a452:	2110      	movs	r1, #16
 800a454:	20d4      	movs	r0, #212	; 0xd4
 800a456:	f7ff ff63 	bl	800a320 <SENSOR_IO_Read>
 800a45a:	4603      	mov	r3, r0
 800a45c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800a45e:	88fb      	ldrh	r3, [r7, #6]
 800a460:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800a462:	7bbb      	ldrb	r3, [r7, #14]
 800a464:	f003 0303 	and.w	r3, r3, #3
 800a468:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800a46a:	7bba      	ldrb	r2, [r7, #14]
 800a46c:	7bfb      	ldrb	r3, [r7, #15]
 800a46e:	4313      	orrs	r3, r2
 800a470:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800a472:	7bbb      	ldrb	r3, [r7, #14]
 800a474:	461a      	mov	r2, r3
 800a476:	2110      	movs	r1, #16
 800a478:	20d4      	movs	r0, #212	; 0xd4
 800a47a:	f7ff ff37 	bl	800a2ec <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800a47e:	2112      	movs	r1, #18
 800a480:	20d4      	movs	r0, #212	; 0xd4
 800a482:	f7ff ff4d 	bl	800a320 <SENSOR_IO_Read>
 800a486:	4603      	mov	r3, r0
 800a488:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800a48a:	88fb      	ldrh	r3, [r7, #6]
 800a48c:	0a1b      	lsrs	r3, r3, #8
 800a48e:	b29b      	uxth	r3, r3
 800a490:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800a492:	7bbb      	ldrb	r3, [r7, #14]
 800a494:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800a498:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800a49a:	7bba      	ldrb	r2, [r7, #14]
 800a49c:	7bfb      	ldrb	r3, [r7, #15]
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800a4a2:	7bbb      	ldrb	r3, [r7, #14]
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	2112      	movs	r1, #18
 800a4a8:	20d4      	movs	r0, #212	; 0xd4
 800a4aa:	f7ff ff1f 	bl	800a2ec <SENSOR_IO_Write>
}
 800a4ae:	bf00      	nop
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b082      	sub	sp, #8
 800a4ba:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800a4c0:	2110      	movs	r1, #16
 800a4c2:	20d4      	movs	r0, #212	; 0xd4
 800a4c4:	f7ff ff2c 	bl	800a320 <SENSOR_IO_Read>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800a4cc:	79fb      	ldrb	r3, [r7, #7]
 800a4ce:	f003 030f 	and.w	r3, r3, #15
 800a4d2:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800a4d4:	79fb      	ldrb	r3, [r7, #7]
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	2110      	movs	r1, #16
 800a4da:	20d4      	movs	r0, #212	; 0xd4
 800a4dc:	f7ff ff06 	bl	800a2ec <SENSOR_IO_Write>
}
 800a4e0:	bf00      	nop
 800a4e2:	3708      	adds	r7, #8
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800a4ec:	f7ff fef4 	bl	800a2d8 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800a4f0:	210f      	movs	r1, #15
 800a4f2:	20d4      	movs	r0, #212	; 0xd4
 800a4f4:	f7ff ff14 	bl	800a320 <SENSOR_IO_Read>
 800a4f8:	4603      	mov	r3, r0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b084      	sub	sp, #16
 800a502:	af00      	add	r7, sp, #0
 800a504:	4603      	mov	r3, r0
 800a506:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800a508:	2300      	movs	r3, #0
 800a50a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800a50c:	2115      	movs	r1, #21
 800a50e:	20d4      	movs	r0, #212	; 0xd4
 800a510:	f7ff ff06 	bl	800a320 <SENSOR_IO_Read>
 800a514:	4603      	mov	r3, r0
 800a516:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800a518:	7bfb      	ldrb	r3, [r7, #15]
 800a51a:	f023 0310 	bic.w	r3, r3, #16
 800a51e:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800a520:	88fb      	ldrh	r3, [r7, #6]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d003      	beq.n	800a52e <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800a526:	7bfb      	ldrb	r3, [r7, #15]
 800a528:	f043 0310 	orr.w	r3, r3, #16
 800a52c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800a52e:	7bfb      	ldrb	r3, [r7, #15]
 800a530:	461a      	mov	r2, r3
 800a532:	2115      	movs	r1, #21
 800a534:	20d4      	movs	r0, #212	; 0xd4
 800a536:	f7ff fed9 	bl	800a2ec <SENSOR_IO_Write>
}
 800a53a:	bf00      	nop
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
	...

0800a544 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b088      	sub	sp, #32
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800a54c:	2300      	movs	r3, #0
 800a54e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800a550:	2300      	movs	r3, #0
 800a552:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800a554:	f04f 0300 	mov.w	r3, #0
 800a558:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800a55a:	2110      	movs	r1, #16
 800a55c:	20d4      	movs	r0, #212	; 0xd4
 800a55e:	f7ff fedf 	bl	800a320 <SENSOR_IO_Read>
 800a562:	4603      	mov	r3, r0
 800a564:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800a566:	f107 0208 	add.w	r2, r7, #8
 800a56a:	2306      	movs	r3, #6
 800a56c:	2128      	movs	r1, #40	; 0x28
 800a56e:	20d4      	movs	r0, #212	; 0xd4
 800a570:	f7ff fef4 	bl	800a35c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800a574:	2300      	movs	r3, #0
 800a576:	77fb      	strb	r3, [r7, #31]
 800a578:	e01c      	b.n	800a5b4 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800a57a:	7ffb      	ldrb	r3, [r7, #31]
 800a57c:	005b      	lsls	r3, r3, #1
 800a57e:	3301      	adds	r3, #1
 800a580:	3320      	adds	r3, #32
 800a582:	443b      	add	r3, r7
 800a584:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800a588:	b29b      	uxth	r3, r3
 800a58a:	021b      	lsls	r3, r3, #8
 800a58c:	b29a      	uxth	r2, r3
 800a58e:	7ffb      	ldrb	r3, [r7, #31]
 800a590:	005b      	lsls	r3, r3, #1
 800a592:	3320      	adds	r3, #32
 800a594:	443b      	add	r3, r7
 800a596:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	4413      	add	r3, r2
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	7ffb      	ldrb	r3, [r7, #31]
 800a5a2:	b212      	sxth	r2, r2
 800a5a4:	005b      	lsls	r3, r3, #1
 800a5a6:	3320      	adds	r3, #32
 800a5a8:	443b      	add	r3, r7
 800a5aa:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800a5ae:	7ffb      	ldrb	r3, [r7, #31]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	77fb      	strb	r3, [r7, #31]
 800a5b4:	7ffb      	ldrb	r3, [r7, #31]
 800a5b6:	2b02      	cmp	r3, #2
 800a5b8:	d9df      	bls.n	800a57a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800a5ba:	7dfb      	ldrb	r3, [r7, #23]
 800a5bc:	f003 030c 	and.w	r3, r3, #12
 800a5c0:	2b0c      	cmp	r3, #12
 800a5c2:	d829      	bhi.n	800a618 <LSM6DSL_AccReadXYZ+0xd4>
 800a5c4:	a201      	add	r2, pc, #4	; (adr r2, 800a5cc <LSM6DSL_AccReadXYZ+0x88>)
 800a5c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ca:	bf00      	nop
 800a5cc:	0800a601 	.word	0x0800a601
 800a5d0:	0800a619 	.word	0x0800a619
 800a5d4:	0800a619 	.word	0x0800a619
 800a5d8:	0800a619 	.word	0x0800a619
 800a5dc:	0800a613 	.word	0x0800a613
 800a5e0:	0800a619 	.word	0x0800a619
 800a5e4:	0800a619 	.word	0x0800a619
 800a5e8:	0800a619 	.word	0x0800a619
 800a5ec:	0800a607 	.word	0x0800a607
 800a5f0:	0800a619 	.word	0x0800a619
 800a5f4:	0800a619 	.word	0x0800a619
 800a5f8:	0800a619 	.word	0x0800a619
 800a5fc:	0800a60d 	.word	0x0800a60d
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800a600:	4b18      	ldr	r3, [pc, #96]	; (800a664 <LSM6DSL_AccReadXYZ+0x120>)
 800a602:	61bb      	str	r3, [r7, #24]
    break;
 800a604:	e008      	b.n	800a618 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800a606:	4b18      	ldr	r3, [pc, #96]	; (800a668 <LSM6DSL_AccReadXYZ+0x124>)
 800a608:	61bb      	str	r3, [r7, #24]
    break;
 800a60a:	e005      	b.n	800a618 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 800a60c:	4b17      	ldr	r3, [pc, #92]	; (800a66c <LSM6DSL_AccReadXYZ+0x128>)
 800a60e:	61bb      	str	r3, [r7, #24]
    break;
 800a610:	e002      	b.n	800a618 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800a612:	4b17      	ldr	r3, [pc, #92]	; (800a670 <LSM6DSL_AccReadXYZ+0x12c>)
 800a614:	61bb      	str	r3, [r7, #24]
    break;    
 800a616:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800a618:	2300      	movs	r3, #0
 800a61a:	77fb      	strb	r3, [r7, #31]
 800a61c:	e01a      	b.n	800a654 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800a61e:	7ffb      	ldrb	r3, [r7, #31]
 800a620:	005b      	lsls	r3, r3, #1
 800a622:	3320      	adds	r3, #32
 800a624:	443b      	add	r3, r7
 800a626:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800a62a:	ee07 3a90 	vmov	s15, r3
 800a62e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a632:	edd7 7a06 	vldr	s15, [r7, #24]
 800a636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a63a:	7ffb      	ldrb	r3, [r7, #31]
 800a63c:	005b      	lsls	r3, r3, #1
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	4413      	add	r3, r2
 800a642:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a646:	ee17 2a90 	vmov	r2, s15
 800a64a:	b212      	sxth	r2, r2
 800a64c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800a64e:	7ffb      	ldrb	r3, [r7, #31]
 800a650:	3301      	adds	r3, #1
 800a652:	77fb      	strb	r3, [r7, #31]
 800a654:	7ffb      	ldrb	r3, [r7, #31]
 800a656:	2b02      	cmp	r3, #2
 800a658:	d9e1      	bls.n	800a61e <LSM6DSL_AccReadXYZ+0xda>
  }
}
 800a65a:	bf00      	nop
 800a65c:	bf00      	nop
 800a65e:	3720      	adds	r7, #32
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}
 800a664:	3d79db23 	.word	0x3d79db23
 800a668:	3df9db23 	.word	0x3df9db23
 800a66c:	3e79db23 	.word	0x3e79db23
 800a670:	3ef9db23 	.word	0x3ef9db23

0800a674 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	4603      	mov	r3, r0
 800a67c:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 800a67e:	79fb      	ldrb	r3, [r7, #7]
 800a680:	2b2f      	cmp	r3, #47	; 0x2f
 800a682:	d906      	bls.n	800a692 <Hex2Num+0x1e>
 800a684:	79fb      	ldrb	r3, [r7, #7]
 800a686:	2b39      	cmp	r3, #57	; 0x39
 800a688:	d803      	bhi.n	800a692 <Hex2Num+0x1e>
        return a - '0';
 800a68a:	79fb      	ldrb	r3, [r7, #7]
 800a68c:	3b30      	subs	r3, #48	; 0x30
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	e014      	b.n	800a6bc <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 800a692:	79fb      	ldrb	r3, [r7, #7]
 800a694:	2b60      	cmp	r3, #96	; 0x60
 800a696:	d906      	bls.n	800a6a6 <Hex2Num+0x32>
 800a698:	79fb      	ldrb	r3, [r7, #7]
 800a69a:	2b66      	cmp	r3, #102	; 0x66
 800a69c:	d803      	bhi.n	800a6a6 <Hex2Num+0x32>
        return (a - 'a') + 10;
 800a69e:	79fb      	ldrb	r3, [r7, #7]
 800a6a0:	3b57      	subs	r3, #87	; 0x57
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	e00a      	b.n	800a6bc <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 800a6a6:	79fb      	ldrb	r3, [r7, #7]
 800a6a8:	2b40      	cmp	r3, #64	; 0x40
 800a6aa:	d906      	bls.n	800a6ba <Hex2Num+0x46>
 800a6ac:	79fb      	ldrb	r3, [r7, #7]
 800a6ae:	2b46      	cmp	r3, #70	; 0x46
 800a6b0:	d803      	bhi.n	800a6ba <Hex2Num+0x46>
        return (a - 'A') + 10;
 800a6b2:	79fb      	ldrb	r3, [r7, #7]
 800a6b4:	3b37      	subs	r3, #55	; 0x37
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	e000      	b.n	800a6bc <Hex2Num+0x48>
    }

    return 0;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 800a6da:	e012      	b.n	800a702 <ParseHexNumber+0x3a>
        sum <<= 4;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	011b      	lsls	r3, r3, #4
 800a6e0:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7ff ffc4 	bl	800a674 <Hex2Num>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	60fb      	str	r3, [r7, #12]
        ptr++;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	607b      	str	r3, [r7, #4]
        i++;
 800a6fc:	7afb      	ldrb	r3, [r7, #11]
 800a6fe:	3301      	adds	r3, #1
 800a700:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	2b2f      	cmp	r3, #47	; 0x2f
 800a708:	d903      	bls.n	800a712 <ParseHexNumber+0x4a>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	2b39      	cmp	r3, #57	; 0x39
 800a710:	d9e4      	bls.n	800a6dc <ParseHexNumber+0x14>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	2b60      	cmp	r3, #96	; 0x60
 800a718:	d903      	bls.n	800a722 <ParseHexNumber+0x5a>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	2b66      	cmp	r3, #102	; 0x66
 800a720:	d9dc      	bls.n	800a6dc <ParseHexNumber+0x14>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	2b40      	cmp	r3, #64	; 0x40
 800a728:	d903      	bls.n	800a732 <ParseHexNumber+0x6a>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	2b46      	cmp	r3, #70	; 0x46
 800a730:	d9d4      	bls.n	800a6dc <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d002      	beq.n	800a73e <ParseHexNumber+0x76>
        *cnt = i;
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	7afa      	ldrb	r2, [r7, #11]
 800a73c:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 800a73e:	68fb      	ldr	r3, [r7, #12]
}
 800a740:	4618      	mov	r0, r3
 800a742:	3710      	adds	r7, #16
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 800a748:	b480      	push	{r7}
 800a74a:	b085      	sub	sp, #20
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 800a752:	2300      	movs	r3, #0
 800a754:	73fb      	strb	r3, [r7, #15]
 800a756:	2300      	movs	r3, #0
 800a758:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 800a75a:	2300      	movs	r3, #0
 800a75c:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	2b2d      	cmp	r3, #45	; 0x2d
 800a764:	d119      	bne.n	800a79a <ParseNumber+0x52>
        minus = 1;
 800a766:	2301      	movs	r3, #1
 800a768:	73fb      	strb	r3, [r7, #15]
        ptr++;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	3301      	adds	r3, #1
 800a76e:	607b      	str	r3, [r7, #4]
        i++;
 800a770:	7bbb      	ldrb	r3, [r7, #14]
 800a772:	3301      	adds	r3, #1
 800a774:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 800a776:	e010      	b.n	800a79a <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 800a778:	68ba      	ldr	r2, [r7, #8]
 800a77a:	4613      	mov	r3, r2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	4413      	add	r3, r2
 800a780:	005b      	lsls	r3, r3, #1
 800a782:	461a      	mov	r2, r3
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	3b30      	subs	r3, #48	; 0x30
 800a78a:	4413      	add	r3, r2
 800a78c:	60bb      	str	r3, [r7, #8]
        ptr++;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	3301      	adds	r3, #1
 800a792:	607b      	str	r3, [r7, #4]
        i++;
 800a794:	7bbb      	ldrb	r3, [r7, #14]
 800a796:	3301      	adds	r3, #1
 800a798:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	2b2f      	cmp	r3, #47	; 0x2f
 800a7a0:	d903      	bls.n	800a7aa <ParseNumber+0x62>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	2b39      	cmp	r3, #57	; 0x39
 800a7a8:	d9e6      	bls.n	800a778 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d002      	beq.n	800a7b6 <ParseNumber+0x6e>
        *cnt = i;
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	7bba      	ldrb	r2, [r7, #14]
 800a7b4:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 800a7b6:	7bfb      	ldrb	r3, [r7, #15]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d002      	beq.n	800a7c2 <ParseNumber+0x7a>
        return 0 - sum;
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	425b      	negs	r3, r3
 800a7c0:	e000      	b.n	800a7c4 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 800a7c2:	68bb      	ldr	r3, [r7, #8]
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3714      	adds	r7, #20
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 800a7de:	e019      	b.n	800a814 <ParseMAC+0x44>
    hexcnt = 1;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	2b3a      	cmp	r3, #58	; 0x3a
 800a7ea:	d00e      	beq.n	800a80a <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 800a7ec:	f107 030e 	add.w	r3, r7, #14
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f7ff ff68 	bl	800a6c8 <ParseHexNumber>
 800a7f8:	4601      	mov	r1, r0
 800a7fa:	7bfb      	ldrb	r3, [r7, #15]
 800a7fc:	1c5a      	adds	r2, r3, #1
 800a7fe:	73fa      	strb	r2, [r7, #15]
 800a800:	461a      	mov	r2, r3
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	4413      	add	r3, r2
 800a806:	b2ca      	uxtb	r2, r1
 800a808:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 800a80a:	7bbb      	ldrb	r3, [r7, #14]
 800a80c:	461a      	mov	r2, r3
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	4413      	add	r3, r2
 800a812:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d1e1      	bne.n	800a7e0 <ParseMAC+0x10>
  }
}
 800a81c:	bf00      	nop
 800a81e:	bf00      	nop
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b084      	sub	sp, #16
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
 800a82e:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 800a830:	2300      	movs	r3, #0
 800a832:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 800a834:	e019      	b.n	800a86a <ParseIP+0x44>
    hexcnt = 1;
 800a836:	2301      	movs	r3, #1
 800a838:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	2b2e      	cmp	r3, #46	; 0x2e
 800a840:	d00e      	beq.n	800a860 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 800a842:	f107 030e 	add.w	r3, r7, #14
 800a846:	4619      	mov	r1, r3
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f7ff ff7d 	bl	800a748 <ParseNumber>
 800a84e:	4601      	mov	r1, r0
 800a850:	7bfb      	ldrb	r3, [r7, #15]
 800a852:	1c5a      	adds	r2, r3, #1
 800a854:	73fa      	strb	r2, [r7, #15]
 800a856:	461a      	mov	r2, r3
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	4413      	add	r3, r2
 800a85c:	b2ca      	uxtb	r2, r1
 800a85e:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 800a860:	7bbb      	ldrb	r3, [r7, #14]
 800a862:	461a      	mov	r2, r3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	4413      	add	r3, r2
 800a868:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d1e1      	bne.n	800a836 <ParseIP+0x10>
  }
}
 800a872:	bf00      	nop
 800a874:	bf00      	nop
 800a876:	3710      	adds	r7, #16
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 800a886:	2300      	movs	r3, #0
 800a888:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	3302      	adds	r3, #2
 800a88e:	4934      	ldr	r1, [pc, #208]	; (800a960 <AT_ParseInfo+0xe4>)
 800a890:	4618      	mov	r0, r3
 800a892:	f009 fcdf 	bl	8014254 <strtok>
 800a896:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 800a898:	e05a      	b.n	800a950 <AT_ParseInfo+0xd4>
    switch (num++) {
 800a89a:	7afb      	ldrb	r3, [r7, #11]
 800a89c:	1c5a      	adds	r2, r3, #1
 800a89e:	72fa      	strb	r2, [r7, #11]
 800a8a0:	2b06      	cmp	r3, #6
 800a8a2:	d84f      	bhi.n	800a944 <AT_ParseInfo+0xc8>
 800a8a4:	a201      	add	r2, pc, #4	; (adr r2, 800a8ac <AT_ParseInfo+0x30>)
 800a8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8aa:	bf00      	nop
 800a8ac:	0800a8c9 	.word	0x0800a8c9
 800a8b0:	0800a8d7 	.word	0x0800a8d7
 800a8b4:	0800a8e7 	.word	0x0800a8e7
 800a8b8:	0800a8f7 	.word	0x0800a8f7
 800a8bc:	0800a907 	.word	0x0800a907
 800a8c0:	0800a917 	.word	0x0800a917
 800a8c4:	0800a92b 	.word	0x0800a92b
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2220      	movs	r2, #32
 800a8cc:	68f9      	ldr	r1, [r7, #12]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f009 fc97 	bl	8014202 <strncpy>
      break;
 800a8d4:	e037      	b.n	800a946 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	3320      	adds	r3, #32
 800a8da:	2218      	movs	r2, #24
 800a8dc:	68f9      	ldr	r1, [r7, #12]
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f009 fc8f 	bl	8014202 <strncpy>
      break;
 800a8e4:	e02f      	b.n	800a946 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	3338      	adds	r3, #56	; 0x38
 800a8ea:	2210      	movs	r2, #16
 800a8ec:	68f9      	ldr	r1, [r7, #12]
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f009 fc87 	bl	8014202 <strncpy>
      break;
 800a8f4:	e027      	b.n	800a946 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	3348      	adds	r3, #72	; 0x48
 800a8fa:	2210      	movs	r2, #16
 800a8fc:	68f9      	ldr	r1, [r7, #12]
 800a8fe:	4618      	mov	r0, r3
 800a900:	f009 fc7f 	bl	8014202 <strncpy>
      break;
 800a904:	e01f      	b.n	800a946 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	3358      	adds	r3, #88	; 0x58
 800a90a:	2210      	movs	r2, #16
 800a90c:	68f9      	ldr	r1, [r7, #12]
 800a90e:	4618      	mov	r0, r3
 800a910:	f009 fc77 	bl	8014202 <strncpy>
      break;
 800a914:	e017      	b.n	800a946 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 800a916:	2100      	movs	r1, #0
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f7ff ff15 	bl	800a748 <ParseNumber>
 800a91e:	4603      	mov	r3, r0
 800a920:	461a      	mov	r2, r3
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 800a928:	e00d      	b.n	800a946 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 800a92a:	490e      	ldr	r1, [pc, #56]	; (800a964 <AT_ParseInfo+0xe8>)
 800a92c:	68f8      	ldr	r0, [r7, #12]
 800a92e:	f009 fc91 	bl	8014254 <strtok>
 800a932:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	3368      	adds	r3, #104	; 0x68
 800a938:	2220      	movs	r2, #32
 800a93a:	68f9      	ldr	r1, [r7, #12]
 800a93c:	4618      	mov	r0, r3
 800a93e:	f009 fc60 	bl	8014202 <strncpy>
      break;
 800a942:	e000      	b.n	800a946 <AT_ParseInfo+0xca>

    default: break;
 800a944:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800a946:	4906      	ldr	r1, [pc, #24]	; (800a960 <AT_ParseInfo+0xe4>)
 800a948:	2000      	movs	r0, #0
 800a94a:	f009 fc83 	bl	8014254 <strtok>
 800a94e:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d1a1      	bne.n	800a89a <AT_ParseInfo+0x1e>
  }
}
 800a956:	bf00      	nop
 800a958:	bf00      	nop
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	08016a44 	.word	0x08016a44
 800a964:	08016a48 	.word	0x08016a48

0800a968 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800a972:	2300      	movs	r3, #0
 800a974:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	3302      	adds	r3, #2
 800a97a:	4952      	ldr	r1, [pc, #328]	; (800aac4 <AT_ParseConnSettings+0x15c>)
 800a97c:	4618      	mov	r0, r3
 800a97e:	f009 fc69 	bl	8014254 <strtok>
 800a982:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 800a984:	e095      	b.n	800aab2 <AT_ParseConnSettings+0x14a>
    switch (num++) {
 800a986:	7bfb      	ldrb	r3, [r7, #15]
 800a988:	1c5a      	adds	r2, r3, #1
 800a98a:	73fa      	strb	r2, [r7, #15]
 800a98c:	2b0b      	cmp	r3, #11
 800a98e:	d87f      	bhi.n	800aa90 <AT_ParseConnSettings+0x128>
 800a990:	a201      	add	r2, pc, #4	; (adr r2, 800a998 <AT_ParseConnSettings+0x30>)
 800a992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a996:	bf00      	nop
 800a998:	0800a9c9 	.word	0x0800a9c9
 800a99c:	0800a9d7 	.word	0x0800a9d7
 800a9a0:	0800a9e7 	.word	0x0800a9e7
 800a9a4:	0800a9fb 	.word	0x0800a9fb
 800a9a8:	0800aa0f 	.word	0x0800aa0f
 800a9ac:	0800aa23 	.word	0x0800aa23
 800a9b0:	0800aa31 	.word	0x0800aa31
 800a9b4:	0800aa3f 	.word	0x0800aa3f
 800a9b8:	0800aa4d 	.word	0x0800aa4d
 800a9bc:	0800aa5b 	.word	0x0800aa5b
 800a9c0:	0800aa69 	.word	0x0800aa69
 800a9c4:	0800aa7d 	.word	0x0800aa7d
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	2221      	movs	r2, #33	; 0x21
 800a9cc:	68b9      	ldr	r1, [r7, #8]
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f009 fc17 	bl	8014202 <strncpy>
      break;
 800a9d4:	e05d      	b.n	800aa92 <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	3321      	adds	r3, #33	; 0x21
 800a9da:	2221      	movs	r2, #33	; 0x21
 800a9dc:	68b9      	ldr	r1, [r7, #8]
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f009 fc0f 	bl	8014202 <strncpy>
      break;
 800a9e4:	e055      	b.n	800aa92 <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	68b8      	ldr	r0, [r7, #8]
 800a9ea:	f7ff fead 	bl	800a748 <ParseNumber>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	b2da      	uxtb	r2, r3
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 800a9f8:	e04b      	b.n	800aa92 <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 800a9fa:	2100      	movs	r1, #0
 800a9fc:	68b8      	ldr	r0, [r7, #8]
 800a9fe:	f7ff fea3 	bl	800a748 <ParseNumber>
 800aa02:	4603      	mov	r3, r0
 800aa04:	b2da      	uxtb	r2, r3
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 800aa0c:	e041      	b.n	800aa92 <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 800aa0e:	2100      	movs	r1, #0
 800aa10:	68b8      	ldr	r0, [r7, #8]
 800aa12:	f7ff fe99 	bl	800a748 <ParseNumber>
 800aa16:	4603      	mov	r3, r0
 800aa18:	b2da      	uxtb	r2, r3
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 800aa20:	e037      	b.n	800aa92 <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	3348      	adds	r3, #72	; 0x48
 800aa26:	4619      	mov	r1, r3
 800aa28:	68b8      	ldr	r0, [r7, #8]
 800aa2a:	f7ff fefc 	bl	800a826 <ParseIP>
      break;
 800aa2e:	e030      	b.n	800aa92 <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	334c      	adds	r3, #76	; 0x4c
 800aa34:	4619      	mov	r1, r3
 800aa36:	68b8      	ldr	r0, [r7, #8]
 800aa38:	f7ff fef5 	bl	800a826 <ParseIP>
      break;
 800aa3c:	e029      	b.n	800aa92 <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	3350      	adds	r3, #80	; 0x50
 800aa42:	4619      	mov	r1, r3
 800aa44:	68b8      	ldr	r0, [r7, #8]
 800aa46:	f7ff feee 	bl	800a826 <ParseIP>
      break;
 800aa4a:	e022      	b.n	800aa92 <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	3354      	adds	r3, #84	; 0x54
 800aa50:	4619      	mov	r1, r3
 800aa52:	68b8      	ldr	r0, [r7, #8]
 800aa54:	f7ff fee7 	bl	800a826 <ParseIP>
      break;
 800aa58:	e01b      	b.n	800aa92 <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	3358      	adds	r3, #88	; 0x58
 800aa5e:	4619      	mov	r1, r3
 800aa60:	68b8      	ldr	r0, [r7, #8]
 800aa62:	f7ff fee0 	bl	800a826 <ParseIP>
      break;
 800aa66:	e014      	b.n	800aa92 <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 800aa68:	2100      	movs	r1, #0
 800aa6a:	68b8      	ldr	r0, [r7, #8]
 800aa6c:	f7ff fe6c 	bl	800a748 <ParseNumber>
 800aa70:	4603      	mov	r3, r0
 800aa72:	b2da      	uxtb	r2, r3
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 800aa7a:	e00a      	b.n	800aa92 <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 800aa7c:	2100      	movs	r1, #0
 800aa7e:	68b8      	ldr	r0, [r7, #8]
 800aa80:	f7ff fe62 	bl	800a748 <ParseNumber>
 800aa84:	4603      	mov	r3, r0
 800aa86:	b2da      	uxtb	r2, r3
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 800aa8e:	e000      	b.n	800aa92 <AT_ParseConnSettings+0x12a>

    default:
      break;
 800aa90:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800aa92:	490c      	ldr	r1, [pc, #48]	; (800aac4 <AT_ParseConnSettings+0x15c>)
 800aa94:	2000      	movs	r0, #0
 800aa96:	f009 fbdd 	bl	8014254 <strtok>
 800aa9a:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d007      	beq.n	800aab2 <AT_ParseConnSettings+0x14a>
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	3b01      	subs	r3, #1
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	2b2c      	cmp	r3, #44	; 0x2c
 800aaaa:	d102      	bne.n	800aab2 <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 800aaac:	7bfb      	ldrb	r3, [r7, #15]
 800aaae:	3301      	adds	r3, #1
 800aab0:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f47f af66 	bne.w	800a986 <AT_ParseConnSettings+0x1e>
    }
  }
}
 800aaba:	bf00      	nop
 800aabc:	bf00      	nop
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	08016a44 	.word	0x08016a44

0800aac8 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	3302      	adds	r3, #2
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	2b31      	cmp	r3, #49	; 0x31
 800aada:	bf0c      	ite	eq
 800aadc:	2301      	moveq	r3, #1
 800aade:	2300      	movne	r3, #0
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	461a      	mov	r2, r3
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	701a      	strb	r2, [r3, #0]
}
 800aae8:	bf00      	nop
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 800aaf4:	b590      	push	{r4, r7, lr}
 800aaf6:	b087      	sub	sp, #28
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	607a      	str	r2, [r7, #4]
  int ret = 0;
 800ab00:	2300      	movs	r3, #0
 800ab02:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 800ab04:	2300      	movs	r3, #0
 800ab06:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800ab0e:	68b8      	ldr	r0, [r7, #8]
 800ab10:	f7f5 fb5e 	bl	80001d0 <strlen>
 800ab14:	4603      	mov	r3, r0
 800ab16:	b299      	uxth	r1, r3
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800ab1e:	461a      	mov	r2, r3
 800ab20:	68b8      	ldr	r0, [r7, #8]
 800ab22:	47a0      	blx	r4
 800ab24:	4603      	mov	r3, r0
 800ab26:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	dd3e      	ble.n	800abac <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800ab3a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	4798      	blx	r3
 800ab42:	4603      	mov	r3, r0
 800ab44:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 800ab46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	dd27      	ble.n	800ab9e <AT_ExecuteCommand+0xaa>
 800ab4e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ab52:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ab56:	dc22      	bgt.n	800ab9e <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 800ab58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ab5c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ab60:	d105      	bne.n	800ab6e <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 800ab62:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	3b01      	subs	r3, #1
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 800ab6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	4413      	add	r3, r2
 800ab76:	2200      	movs	r2, #0
 800ab78:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 800ab7a:	490f      	ldr	r1, [pc, #60]	; (800abb8 <AT_ExecuteCommand+0xc4>)
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f009 fb53 	bl	8014228 <strstr>
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d001      	beq.n	800ab8c <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	e010      	b.n	800abae <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 800ab8c:	490b      	ldr	r1, [pc, #44]	; (800abbc <AT_ExecuteCommand+0xc8>)
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f009 fb4a 	bl	8014228 <strstr>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d001      	beq.n	800ab9e <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800ab9a:	2305      	movs	r3, #5
 800ab9c:	e007      	b.n	800abae <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800ab9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800aba2:	f113 0f04 	cmn.w	r3, #4
 800aba6:	d101      	bne.n	800abac <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 800aba8:	2306      	movs	r3, #6
 800abaa:	e000      	b.n	800abae <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 800abac:	2304      	movs	r3, #4
}
 800abae:	4618      	mov	r0, r3
 800abb0:	371c      	adds	r7, #28
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd90      	pop	{r4, r7, pc}
 800abb6:	bf00      	nop
 800abb8:	08016a58 	.word	0x08016a58
 800abbc:	08016a64 	.word	0x08016a64

0800abc0 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
 800abcc:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 800abce:	2300      	movs	r3, #0
 800abd0:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 800abd2:	2300      	movs	r3, #0
 800abd4:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 800abd6:	2300      	movs	r3, #0
 800abd8:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 800abda:	68b8      	ldr	r0, [r7, #8]
 800abdc:	f7f5 faf8 	bl	80001d0 <strlen>
 800abe0:	4603      	mov	r3, r0
 800abe2:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 800abe4:	8a7b      	ldrh	r3, [r7, #18]
 800abe6:	f003 0301 	and.w	r3, r3, #1
 800abea:	2b00      	cmp	r3, #0
 800abec:	d001      	beq.n	800abf2 <AT_RequestSendData+0x32>
 800abee:	2302      	movs	r3, #2
 800abf0:	e053      	b.n	800ac9a <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800abf8:	68fa      	ldr	r2, [r7, #12]
 800abfa:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800abfe:	8a79      	ldrh	r1, [r7, #18]
 800ac00:	68b8      	ldr	r0, [r7, #8]
 800ac02:	4798      	blx	r3
 800ac04:	4603      	mov	r3, r0
 800ac06:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 800ac08:	8a3a      	ldrh	r2, [r7, #16]
 800ac0a:	8a7b      	ldrh	r3, [r7, #18]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d143      	bne.n	800ac98 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800ac1c:	8879      	ldrh	r1, [r7, #2]
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	4798      	blx	r3
 800ac22:	4603      	mov	r3, r0
 800ac24:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 800ac26:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ac2a:	887b      	ldrh	r3, [r7, #2]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d131      	bne.n	800ac94 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800ac36:	68fa      	ldr	r2, [r7, #12]
 800ac38:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800ac3c:	2100      	movs	r1, #0
 800ac3e:	6a38      	ldr	r0, [r7, #32]
 800ac40:	4798      	blx	r3
 800ac42:	4603      	mov	r3, r0
 800ac44:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 800ac46:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	dd19      	ble.n	800ac82 <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 800ac4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ac52:	6a3a      	ldr	r2, [r7, #32]
 800ac54:	4413      	add	r3, r2
 800ac56:	2200      	movs	r2, #0
 800ac58:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 800ac5a:	4912      	ldr	r1, [pc, #72]	; (800aca4 <AT_RequestSendData+0xe4>)
 800ac5c:	6a38      	ldr	r0, [r7, #32]
 800ac5e:	f009 fae3 	bl	8014228 <strstr>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d001      	beq.n	800ac6c <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	e016      	b.n	800ac9a <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 800ac6c:	490e      	ldr	r1, [pc, #56]	; (800aca8 <AT_RequestSendData+0xe8>)
 800ac6e:	6a38      	ldr	r0, [r7, #32]
 800ac70:	f009 fada 	bl	8014228 <strstr>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d001      	beq.n	800ac7e <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800ac7a:	2305      	movs	r3, #5
 800ac7c:	e00d      	b.n	800ac9a <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 800ac7e:	2302      	movs	r3, #2
 800ac80:	e00b      	b.n	800ac9a <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800ac82:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ac86:	f113 0f04 	cmn.w	r3, #4
 800ac8a:	d101      	bne.n	800ac90 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 800ac8c:	2306      	movs	r3, #6
 800ac8e:	e004      	b.n	800ac9a <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 800ac90:	2302      	movs	r3, #2
 800ac92:	e002      	b.n	800ac9a <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 800ac94:	2302      	movs	r3, #2
 800ac96:	e000      	b.n	800ac9a <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 800ac98:	2304      	movs	r3, #4
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3718      	adds	r7, #24
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	08016a58 	.word	0x08016a58
 800aca8:	08016a64 	.word	0x08016a64

0800acac <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 800acac:	b590      	push	{r4, r7, lr}
 800acae:	b087      	sub	sp, #28
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	60b9      	str	r1, [r7, #8]
 800acb6:	607a      	str	r2, [r7, #4]
 800acb8:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800acc0:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800acc8:	68b8      	ldr	r0, [r7, #8]
 800acca:	f7f5 fa81 	bl	80001d0 <strlen>
 800acce:	4603      	mov	r3, r0
 800acd0:	b299      	uxth	r1, r3
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800acd8:	461a      	mov	r2, r3
 800acda:	68b8      	ldr	r0, [r7, #8]
 800acdc:	47a0      	blx	r4
 800acde:	4603      	mov	r3, r0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	dd6f      	ble.n	800adc4 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800acea:	68fa      	ldr	r2, [r7, #12]
 800acec:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800acf0:	2100      	movs	r1, #0
 800acf2:	6938      	ldr	r0, [r7, #16]
 800acf4:	4798      	blx	r3
 800acf6:	4603      	mov	r3, r0
 800acf8:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	2b0d      	cmp	r3, #13
 800ad00:	d104      	bne.n	800ad0c <AT_RequestReceiveData+0x60>
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	3301      	adds	r3, #1
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	2b0a      	cmp	r3, #10
 800ad0a:	d001      	beq.n	800ad10 <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 800ad0c:	2304      	movs	r3, #4
 800ad0e:	e05a      	b.n	800adc6 <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	3b02      	subs	r3, #2
 800ad14:	617b      	str	r3, [r7, #20]
    p+=2;
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	3302      	adds	r3, #2
 800ad1a:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	2b07      	cmp	r3, #7
 800ad20:	d94a      	bls.n	800adb8 <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 800ad22:	e002      	b.n	800ad2a <AT_RequestReceiveData+0x7e>
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	3b01      	subs	r3, #1
 800ad28:	617b      	str	r3, [r7, #20]
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d006      	beq.n	800ad3e <AT_RequestReceiveData+0x92>
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	3b01      	subs	r3, #1
 800ad34:	693a      	ldr	r2, [r7, #16]
 800ad36:	4413      	add	r3, r2
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	2b15      	cmp	r3, #21
 800ad3c:	d0f2      	beq.n	800ad24 <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	693a      	ldr	r2, [r7, #16]
 800ad42:	4413      	add	r3, r2
 800ad44:	2200      	movs	r2, #0
 800ad46:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	3b08      	subs	r3, #8
 800ad4c:	693a      	ldr	r2, [r7, #16]
 800ad4e:	4413      	add	r3, r2
 800ad50:	491f      	ldr	r1, [pc, #124]	; (800add0 <AT_RequestReceiveData+0x124>)
 800ad52:	4618      	mov	r0, r3
 800ad54:	f009 fa68 	bl	8014228 <strstr>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d016      	beq.n	800ad8c <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	3b08      	subs	r3, #8
 800ad64:	b29a      	uxth	r2, r3
 800ad66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad68:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 800ad6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6c:	881b      	ldrh	r3, [r3, #0]
 800ad6e:	887a      	ldrh	r2, [r7, #2]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d202      	bcs.n	800ad7a <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 800ad74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad76:	887a      	ldrh	r2, [r7, #2]
 800ad78:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 800ad7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad7c:	881b      	ldrh	r3, [r3, #0]
 800ad7e:	461a      	mov	r2, r3
 800ad80:	6939      	ldr	r1, [r7, #16]
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f008 fa15 	bl	80131b2 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	e01c      	b.n	800adc6 <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	3b04      	subs	r3, #4
 800ad90:	693a      	ldr	r2, [r7, #16]
 800ad92:	4413      	add	r3, r2
 800ad94:	2204      	movs	r2, #4
 800ad96:	490f      	ldr	r1, [pc, #60]	; (800add4 <AT_RequestReceiveData+0x128>)
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f008 f9fa 	bl	8013192 <memcmp>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d104      	bne.n	800adae <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 800ada4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada6:	2200      	movs	r2, #0
 800ada8:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800adaa:	2305      	movs	r3, #5
 800adac:	e00b      	b.n	800adc6 <AT_RequestReceiveData+0x11a>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 800adae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb0:	2200      	movs	r2, #0
 800adb2:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800adb4:	2305      	movs	r3, #5
 800adb6:	e006      	b.n	800adc6 <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	f113 0f04 	cmn.w	r3, #4
 800adbe:	d101      	bne.n	800adc4 <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 800adc0:	2306      	movs	r3, #6
 800adc2:	e000      	b.n	800adc6 <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 800adc4:	2304      	movs	r3, #4
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	371c      	adds	r7, #28
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd90      	pop	{r4, r7, pc}
 800adce:	bf00      	nop
 800add0:	08016a58 	.word	0x08016a58
 800add4:	08016a6c 	.word	0x08016a6c

0800add8 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800ade0:	2302      	movs	r3, #2
 800ade2:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f247 5230 	movw	r2, #30000	; 0x7530
 800adea:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800adf4:	2000      	movs	r0, #0
 800adf6:	4798      	blx	r3
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d113      	bne.n	800ae26 <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ae04:	461a      	mov	r2, r3
 800ae06:	490a      	ldr	r1, [pc, #40]	; (800ae30 <ES_WIFI_Init+0x58>)
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f7ff fe73 	bl	800aaf4 <AT_ExecuteCommand>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 800ae12:	7bfb      	ldrb	r3, [r7, #15]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d106      	bne.n	800ae26 <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ae1e:	4619      	mov	r1, r3
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f7ff fd2b 	bl	800a87c <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 800ae26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3710      	adds	r7, #16
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}
 800ae30:	08016a74 	.word	0x08016a74

0800ae34 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b085      	sub	sp, #20
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	607a      	str	r2, [r7, #4]
 800ae40:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00b      	beq.n	800ae60 <ES_WIFI_RegisterBusIO+0x2c>
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d008      	beq.n	800ae60 <ES_WIFI_RegisterBusIO+0x2c>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d005      	beq.n	800ae60 <ES_WIFI_RegisterBusIO+0x2c>
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d002      	beq.n	800ae60 <ES_WIFI_RegisterBusIO+0x2c>
 800ae5a:	69fb      	ldr	r3, [r7, #28]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d101      	bne.n	800ae64 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 800ae60:	2302      	movs	r3, #2
 800ae62:	e014      	b.n	800ae8e <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	68ba      	ldr	r2, [r7, #8]
 800ae68:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	69ba      	ldr	r2, [r7, #24]
 800ae78:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	69fa      	ldr	r2, [r7, #28]
 800ae80:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	683a      	ldr	r2, [r7, #0]
 800ae88:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 800ae8c:	2300      	movs	r3, #0
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3714      	adds	r7, #20
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
	...

0800ae9c <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b086      	sub	sp, #24
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	607a      	str	r2, [r7, #4]
 800aea8:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800aeb0:	68ba      	ldr	r2, [r7, #8]
 800aeb2:	4932      	ldr	r1, [pc, #200]	; (800af7c <ES_WIFI_Connect+0xe0>)
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f009 f941 	bl	801413c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800aec6:	461a      	mov	r2, r3
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f7ff fe13 	bl	800aaf4 <AT_ExecuteCommand>
 800aece:	4603      	mov	r3, r0
 800aed0:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800aed2:	7dfb      	ldrb	r3, [r7, #23]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d14b      	bne.n	800af70 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	4927      	ldr	r1, [pc, #156]	; (800af80 <ES_WIFI_Connect+0xe4>)
 800aee2:	4618      	mov	r0, r3
 800aee4:	f009 f92a 	bl	801413c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800aef4:	461a      	mov	r2, r3
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f7ff fdfc 	bl	800aaf4 <AT_ExecuteCommand>
 800aefc:	4603      	mov	r3, r0
 800aefe:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 800af00:	7dfb      	ldrb	r3, [r7, #23]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d134      	bne.n	800af70 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	78fa      	ldrb	r2, [r7, #3]
 800af0a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800af14:	78fa      	ldrb	r2, [r7, #3]
 800af16:	491b      	ldr	r1, [pc, #108]	; (800af84 <ES_WIFI_Connect+0xe8>)
 800af18:	4618      	mov	r0, r3
 800af1a:	f009 f90f 	bl	801413c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800af2a:	461a      	mov	r2, r3
 800af2c:	68f8      	ldr	r0, [r7, #12]
 800af2e:	f7ff fde1 	bl	800aaf4 <AT_ExecuteCommand>
 800af32:	4603      	mov	r3, r0
 800af34:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800af36:	7dfb      	ldrb	r3, [r7, #23]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d119      	bne.n	800af70 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800af42:	4911      	ldr	r1, [pc, #68]	; (800af88 <ES_WIFI_Connect+0xec>)
 800af44:	4618      	mov	r0, r3
 800af46:	f009 f8f9 	bl	801413c <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800af56:	461a      	mov	r2, r3
 800af58:	68f8      	ldr	r0, [r7, #12]
 800af5a:	f7ff fdcb 	bl	800aaf4 <AT_ExecuteCommand>
 800af5e:	4603      	mov	r3, r0
 800af60:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 800af62:	7dfb      	ldrb	r3, [r7, #23]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d103      	bne.n	800af70 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 800af70:	7dfb      	ldrb	r3, [r7, #23]
}
 800af72:	4618      	mov	r0, r3
 800af74:	3718      	adds	r7, #24
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	08016a8c 	.word	0x08016a8c
 800af80:	08016a94 	.word	0x08016a94
 800af84:	08016a9c 	.word	0x08016a9c
 800af88:	08016aa4 	.word	0x08016aa4

0800af8c <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800af9a:	4911      	ldr	r1, [pc, #68]	; (800afe0 <ES_WIFI_IsConnected+0x54>)
 800af9c:	4618      	mov	r0, r3
 800af9e:	f009 f8cd 	bl	801413c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800afae:	461a      	mov	r2, r3
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f7ff fd9f 	bl	800aaf4 <AT_ExecuteCommand>
 800afb6:	4603      	mov	r3, r0
 800afb8:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800afba:	7bfb      	ldrb	r3, [r7, #15]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d108      	bne.n	800afd2 <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	33d2      	adds	r3, #210	; 0xd2
 800afca:	4619      	mov	r1, r3
 800afcc:	4610      	mov	r0, r2
 800afce:	f7ff fd7b 	bl	800aac8 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3710      	adds	r7, #16
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	08016aa8 	.word	0x08016aa8

0800afe4 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800aff2:	4910      	ldr	r1, [pc, #64]	; (800b034 <ES_WIFI_GetNetworkSettings+0x50>)
 800aff4:	4618      	mov	r0, r3
 800aff6:	f009 f8a1 	bl	801413c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b006:	461a      	mov	r2, r3
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f7ff fd73 	bl	800aaf4 <AT_ExecuteCommand>
 800b00e:	4603      	mov	r3, r0
 800b010:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800b012:	7bfb      	ldrb	r3, [r7, #15]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d108      	bne.n	800b02a <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	338d      	adds	r3, #141	; 0x8d
 800b022:	4619      	mov	r1, r3
 800b024:	4610      	mov	r0, r2
 800b026:	f7ff fc9f 	bl	800a968 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 800b02a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3710      	adds	r7, #16
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}
 800b034:	08016ab0 	.word	0x08016ab0

0800b038 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b048:	4912      	ldr	r1, [pc, #72]	; (800b094 <ES_WIFI_GetMACAddress+0x5c>)
 800b04a:	4618      	mov	r0, r3
 800b04c:	f009 f876 	bl	801413c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b05c:	461a      	mov	r2, r3
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f7ff fd48 	bl	800aaf4 <AT_ExecuteCommand>
 800b064:	4603      	mov	r3, r0
 800b066:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800b068:	7bfb      	ldrb	r3, [r7, #15]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d10c      	bne.n	800b088 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b074:	3302      	adds	r3, #2
 800b076:	4908      	ldr	r1, [pc, #32]	; (800b098 <ES_WIFI_GetMACAddress+0x60>)
 800b078:	4618      	mov	r0, r3
 800b07a:	f009 f8eb 	bl	8014254 <strtok>
 800b07e:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 800b080:	6839      	ldr	r1, [r7, #0]
 800b082:	68b8      	ldr	r0, [r7, #8]
 800b084:	f7ff fba4 	bl	800a7d0 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 800b088:	7bfb      	ldrb	r3, [r7, #15]
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	08016b00 	.word	0x08016b00
 800b098:	08016b04 	.word	0x08016b04

0800b09c <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 800b09c:	b590      	push	{r4, r7, lr}
 800b09e:	b087      	sub	sp, #28
 800b0a0:	af02      	add	r7, sp, #8
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d003      	beq.n	800b0ba <ES_WIFI_StartClientConnection+0x1e>
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	2b03      	cmp	r3, #3
 800b0b8:	d105      	bne.n	800b0c6 <ES_WIFI_StartClientConnection+0x2a>
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	885b      	ldrh	r3, [r3, #2]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d101      	bne.n	800b0c6 <ES_WIFI_StartClientConnection+0x2a>
 800b0c2:	2302      	movs	r3, #2
 800b0c4:	e0c1      	b.n	800b24a <ES_WIFI_StartClientConnection+0x1ae>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	785b      	ldrb	r3, [r3, #1]
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	4960      	ldr	r1, [pc, #384]	; (800b254 <ES_WIFI_StartClientConnection+0x1b8>)
 800b0d4:	f009 f832 	bl	801413c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f7ff fd04 	bl	800aaf4 <AT_ExecuteCommand>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 800b0f0:	7bfb      	ldrb	r3, [r7, #15]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d114      	bne.n	800b120 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	461a      	mov	r2, r3
 800b102:	4955      	ldr	r1, [pc, #340]	; (800b258 <ES_WIFI_StartClientConnection+0x1bc>)
 800b104:	f009 f81a 	bl	801413c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b114:	461a      	mov	r2, r3
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f7ff fcec 	bl	800aaf4 <AT_ExecuteCommand>
 800b11c:	4603      	mov	r3, r0
 800b11e:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800b120:	7bfb      	ldrb	r3, [r7, #15]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d114      	bne.n	800b150 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	889b      	ldrh	r3, [r3, #4]
 800b130:	461a      	mov	r2, r3
 800b132:	494a      	ldr	r1, [pc, #296]	; (800b25c <ES_WIFI_StartClientConnection+0x1c0>)
 800b134:	f009 f802 	bl	801413c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b144:	461a      	mov	r2, r3
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f7ff fcd4 	bl	800aaf4 <AT_ExecuteCommand>
 800b14c:	4603      	mov	r3, r0
 800b14e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 800b150:	7bfb      	ldrb	r3, [r7, #15]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d11c      	bne.n	800b190 <ES_WIFI_StartClientConnection+0xf4>
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d003      	beq.n	800b166 <ES_WIFI_StartClientConnection+0xca>
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	2b03      	cmp	r3, #3
 800b164:	d114      	bne.n	800b190 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	885b      	ldrh	r3, [r3, #2]
 800b170:	461a      	mov	r2, r3
 800b172:	493b      	ldr	r1, [pc, #236]	; (800b260 <ES_WIFI_StartClientConnection+0x1c4>)
 800b174:	f008 ffe2 	bl	801413c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b184:	461a      	mov	r2, r3
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f7ff fcb4 	bl	800aaf4 <AT_ExecuteCommand>
 800b18c:	4603      	mov	r3, r0
 800b18e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 800b190:	7bfb      	ldrb	r3, [r7, #15]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d128      	bne.n	800b1e8 <ES_WIFI_StartClientConnection+0x14c>
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d003      	beq.n	800b1a6 <ES_WIFI_StartClientConnection+0x10a>
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	2b03      	cmp	r3, #3
 800b1a4:	d120      	bne.n	800b1e8 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	799b      	ldrb	r3, [r3, #6]
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	79db      	ldrb	r3, [r3, #7]
 800b1b6:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800b1bc:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800b1c2:	9301      	str	r3, [sp, #4]
 800b1c4:	9200      	str	r2, [sp, #0]
 800b1c6:	4623      	mov	r3, r4
 800b1c8:	460a      	mov	r2, r1
 800b1ca:	4926      	ldr	r1, [pc, #152]	; (800b264 <ES_WIFI_StartClientConnection+0x1c8>)
 800b1cc:	f008 ffb6 	bl	801413c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b1dc:	461a      	mov	r2, r3
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f7ff fc88 	bl	800aaf4 <AT_ExecuteCommand>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 800b1e8:	7bfb      	ldrb	r3, [r7, #15]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d116      	bne.n	800b21c <ES_WIFI_StartClientConnection+0x180>
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	2b03      	cmp	r3, #3
 800b1f4:	d112      	bne.n	800b21c <ES_WIFI_StartClientConnection+0x180>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b1fc:	491a      	ldr	r1, [pc, #104]	; (800b268 <ES_WIFI_StartClientConnection+0x1cc>)
 800b1fe:	4618      	mov	r0, r3
 800b200:	f008 ff9c 	bl	801413c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b210:	461a      	mov	r2, r3
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f7ff fc6e 	bl	800aaf4 <AT_ExecuteCommand>
 800b218:	4603      	mov	r3, r0
 800b21a:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800b21c:	7bfb      	ldrb	r3, [r7, #15]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d112      	bne.n	800b248 <ES_WIFI_StartClientConnection+0x1ac>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b228:	4910      	ldr	r1, [pc, #64]	; (800b26c <ES_WIFI_StartClientConnection+0x1d0>)
 800b22a:	4618      	mov	r0, r3
 800b22c:	f008 ff86 	bl	801413c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b23c:	461a      	mov	r2, r3
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f7ff fc58 	bl	800aaf4 <AT_ExecuteCommand>
 800b244:	4603      	mov	r3, r0
 800b246:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 800b248:	7bfb      	ldrb	r3, [r7, #15]
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3714      	adds	r7, #20
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd90      	pop	{r4, r7, pc}
 800b252:	bf00      	nop
 800b254:	08016b68 	.word	0x08016b68
 800b258:	08016b70 	.word	0x08016b70
 800b25c:	08016b78 	.word	0x08016b78
 800b260:	08016b80 	.word	0x08016b80
 800b264:	08016b88 	.word	0x08016b88
 800b268:	08016b98 	.word	0x08016b98
 800b26c:	08016ba0 	.word	0x08016ba0

0800b270 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b088      	sub	sp, #32
 800b274:	af02      	add	r7, sp, #8
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	607a      	str	r2, [r7, #4]
 800b27a:	461a      	mov	r2, r3
 800b27c:	460b      	mov	r3, r1
 800b27e:	72fb      	strb	r3, [r7, #11]
 800b280:	4613      	mov	r3, r2
 800b282:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800b284:	2302      	movs	r3, #2
 800b286:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800b288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d102      	bne.n	800b294 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 800b28e:	2301      	movs	r3, #1
 800b290:	617b      	str	r3, [r7, #20]
 800b292:	e001      	b.n	800b298 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800b294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b296:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 800b298:	893b      	ldrh	r3, [r7, #8]
 800b29a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800b29e:	d302      	bcc.n	800b2a6 <ES_WIFI_SendData+0x36>
 800b2a0:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800b2a4:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 800b2a6:	6a3b      	ldr	r3, [r7, #32]
 800b2a8:	893a      	ldrh	r2, [r7, #8]
 800b2aa:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b2b2:	7afa      	ldrb	r2, [r7, #11]
 800b2b4:	4942      	ldr	r1, [pc, #264]	; (800b3c0 <ES_WIFI_SendData+0x150>)
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f008 ff40 	bl	801413c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	68f8      	ldr	r0, [r7, #12]
 800b2cc:	f7ff fc12 	bl	800aaf4 <AT_ExecuteCommand>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 800b2d4:	7cfb      	ldrb	r3, [r7, #19]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d15e      	bne.n	800b398 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b2e0:	697a      	ldr	r2, [r7, #20]
 800b2e2:	4938      	ldr	r1, [pc, #224]	; (800b3c4 <ES_WIFI_SendData+0x154>)
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f008 ff29 	bl	801413c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	68f8      	ldr	r0, [r7, #12]
 800b2fa:	f7ff fbfb 	bl	800aaf4 <AT_ExecuteCommand>
 800b2fe:	4603      	mov	r3, r0
 800b300:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800b302:	7cfb      	ldrb	r3, [r7, #19]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d13d      	bne.n	800b384 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b30e:	893a      	ldrh	r2, [r7, #8]
 800b310:	492d      	ldr	r1, [pc, #180]	; (800b3c8 <ES_WIFI_SendData+0x158>)
 800b312:	4618      	mov	r0, r3
 800b314:	f008 ff12 	bl	801413c <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b324:	893a      	ldrh	r2, [r7, #8]
 800b326:	9300      	str	r3, [sp, #0]
 800b328:	4613      	mov	r3, r2
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	68f8      	ldr	r0, [r7, #12]
 800b32e:	f7ff fc47 	bl	800abc0 <AT_RequestSendData>
 800b332:	4603      	mov	r3, r0
 800b334:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 800b336:	7cfb      	ldrb	r3, [r7, #19]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d119      	bne.n	800b370 <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b342:	4922      	ldr	r1, [pc, #136]	; (800b3cc <ES_WIFI_SendData+0x15c>)
 800b344:	4618      	mov	r0, r3
 800b346:	f008 ff6f 	bl	8014228 <strstr>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d02c      	beq.n	800b3aa <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 800b350:	f640 0267 	movw	r2, #2151	; 0x867
 800b354:	491e      	ldr	r1, [pc, #120]	; (800b3d0 <ES_WIFI_SendData+0x160>)
 800b356:	481f      	ldr	r0, [pc, #124]	; (800b3d4 <ES_WIFI_SendData+0x164>)
 800b358:	f008 fdb4 	bl	8013ec4 <iprintf>
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b362:	4619      	mov	r1, r3
 800b364:	481c      	ldr	r0, [pc, #112]	; (800b3d8 <ES_WIFI_SendData+0x168>)
 800b366:	f008 fdad 	bl	8013ec4 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 800b36a:	2302      	movs	r3, #2
 800b36c:	74fb      	strb	r3, [r7, #19]
 800b36e:	e01c      	b.n	800b3aa <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 800b370:	f640 026d 	movw	r2, #2157	; 0x86d
 800b374:	4916      	ldr	r1, [pc, #88]	; (800b3d0 <ES_WIFI_SendData+0x160>)
 800b376:	4817      	ldr	r0, [pc, #92]	; (800b3d4 <ES_WIFI_SendData+0x164>)
 800b378:	f008 fda4 	bl	8013ec4 <iprintf>
 800b37c:	4817      	ldr	r0, [pc, #92]	; (800b3dc <ES_WIFI_SendData+0x16c>)
 800b37e:	f008 fe27 	bl	8013fd0 <puts>
 800b382:	e012      	b.n	800b3aa <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 800b384:	f640 0272 	movw	r2, #2162	; 0x872
 800b388:	4911      	ldr	r1, [pc, #68]	; (800b3d0 <ES_WIFI_SendData+0x160>)
 800b38a:	4812      	ldr	r0, [pc, #72]	; (800b3d4 <ES_WIFI_SendData+0x164>)
 800b38c:	f008 fd9a 	bl	8013ec4 <iprintf>
 800b390:	4813      	ldr	r0, [pc, #76]	; (800b3e0 <ES_WIFI_SendData+0x170>)
 800b392:	f008 fe1d 	bl	8013fd0 <puts>
 800b396:	e008      	b.n	800b3aa <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 800b398:	f640 0277 	movw	r2, #2167	; 0x877
 800b39c:	490c      	ldr	r1, [pc, #48]	; (800b3d0 <ES_WIFI_SendData+0x160>)
 800b39e:	480d      	ldr	r0, [pc, #52]	; (800b3d4 <ES_WIFI_SendData+0x164>)
 800b3a0:	f008 fd90 	bl	8013ec4 <iprintf>
 800b3a4:	480f      	ldr	r0, [pc, #60]	; (800b3e4 <ES_WIFI_SendData+0x174>)
 800b3a6:	f008 fe13 	bl	8013fd0 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 800b3aa:	7cfb      	ldrb	r3, [r7, #19]
 800b3ac:	2b02      	cmp	r3, #2
 800b3ae:	d102      	bne.n	800b3b6 <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 800b3b0:	6a3b      	ldr	r3, [r7, #32]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 800b3b6:	7cfb      	ldrb	r3, [r7, #19]
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3718      	adds	r7, #24
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	08016b68 	.word	0x08016b68
 800b3c4:	08016d2c 	.word	0x08016d2c
 800b3c8:	08016d34 	.word	0x08016d34
 800b3cc:	08016d40 	.word	0x08016d40
 800b3d0:	08016bf8 	.word	0x08016bf8
 800b3d4:	08016c20 	.word	0x08016c20
 800b3d8:	08016d48 	.word	0x08016d48
 800b3dc:	08016d64 	.word	0x08016d64
 800b3e0:	08016d80 	.word	0x08016d80
 800b3e4:	08016d94 	.word	0x08016d94

0800b3e8 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b088      	sub	sp, #32
 800b3ec:	af02      	add	r7, sp, #8
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	607a      	str	r2, [r7, #4]
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	72fb      	strb	r3, [r7, #11]
 800b3f8:	4613      	mov	r3, r2
 800b3fa:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800b3fc:	2302      	movs	r3, #2
 800b3fe:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800b400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b402:	2b00      	cmp	r3, #0
 800b404:	d102      	bne.n	800b40c <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 800b406:	2301      	movs	r3, #1
 800b408:	617b      	str	r3, [r7, #20]
 800b40a:	e001      	b.n	800b410 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800b40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b40e:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 800b410:	893b      	ldrh	r3, [r7, #8]
 800b412:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800b416:	f200 808b 	bhi.w	800b530 <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b420:	7afa      	ldrb	r2, [r7, #11]
 800b422:	4946      	ldr	r1, [pc, #280]	; (800b53c <ES_WIFI_ReceiveData+0x154>)
 800b424:	4618      	mov	r0, r3
 800b426:	f008 fe89 	bl	801413c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b436:	461a      	mov	r2, r3
 800b438:	68f8      	ldr	r0, [r7, #12]
 800b43a:	f7ff fb5b 	bl	800aaf4 <AT_ExecuteCommand>
 800b43e:	4603      	mov	r3, r0
 800b440:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800b442:	7cfb      	ldrb	r3, [r7, #19]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d165      	bne.n	800b514 <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b44e:	893a      	ldrh	r2, [r7, #8]
 800b450:	493b      	ldr	r1, [pc, #236]	; (800b540 <ES_WIFI_ReceiveData+0x158>)
 800b452:	4618      	mov	r0, r3
 800b454:	f008 fe72 	bl	801413c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b464:	461a      	mov	r2, r3
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f7ff fb44 	bl	800aaf4 <AT_ExecuteCommand>
 800b46c:	4603      	mov	r3, r0
 800b46e:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 800b470:	7cfb      	ldrb	r3, [r7, #19]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d141      	bne.n	800b4fa <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b47c:	697a      	ldr	r2, [r7, #20]
 800b47e:	4931      	ldr	r1, [pc, #196]	; (800b544 <ES_WIFI_ReceiveData+0x15c>)
 800b480:	4618      	mov	r0, r3
 800b482:	f008 fe5b 	bl	801413c <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b492:	461a      	mov	r2, r3
 800b494:	68f8      	ldr	r0, [r7, #12]
 800b496:	f7ff fb2d 	bl	800aaf4 <AT_ExecuteCommand>
 800b49a:	4603      	mov	r3, r0
 800b49c:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 800b49e:	7cfb      	ldrb	r3, [r7, #19]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d120      	bne.n	800b4e6 <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b4aa:	4927      	ldr	r1, [pc, #156]	; (800b548 <ES_WIFI_ReceiveData+0x160>)
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f008 fe45 	bl	801413c <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b4b8:	893a      	ldrh	r2, [r7, #8]
 800b4ba:	6a3b      	ldr	r3, [r7, #32]
 800b4bc:	9300      	str	r3, [sp, #0]
 800b4be:	4613      	mov	r3, r2
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	68f8      	ldr	r0, [r7, #12]
 800b4c4:	f7ff fbf2 	bl	800acac <AT_RequestReceiveData>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 800b4cc:	7cfb      	ldrb	r3, [r7, #19]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d02e      	beq.n	800b530 <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 800b4d2:	f640 1208 	movw	r2, #2312	; 0x908
 800b4d6:	491d      	ldr	r1, [pc, #116]	; (800b54c <ES_WIFI_ReceiveData+0x164>)
 800b4d8:	481d      	ldr	r0, [pc, #116]	; (800b550 <ES_WIFI_ReceiveData+0x168>)
 800b4da:	f008 fcf3 	bl	8013ec4 <iprintf>
 800b4de:	481d      	ldr	r0, [pc, #116]	; (800b554 <ES_WIFI_ReceiveData+0x16c>)
 800b4e0:	f008 fd76 	bl	8013fd0 <puts>
 800b4e4:	e024      	b.n	800b530 <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 800b4e6:	f640 120d 	movw	r2, #2317	; 0x90d
 800b4ea:	4918      	ldr	r1, [pc, #96]	; (800b54c <ES_WIFI_ReceiveData+0x164>)
 800b4ec:	4818      	ldr	r0, [pc, #96]	; (800b550 <ES_WIFI_ReceiveData+0x168>)
 800b4ee:	f008 fce9 	bl	8013ec4 <iprintf>
 800b4f2:	4819      	ldr	r0, [pc, #100]	; (800b558 <ES_WIFI_ReceiveData+0x170>)
 800b4f4:	f008 fd6c 	bl	8013fd0 <puts>
 800b4f8:	e01a      	b.n	800b530 <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
 800b4fa:	f640 1212 	movw	r2, #2322	; 0x912
 800b4fe:	4913      	ldr	r1, [pc, #76]	; (800b54c <ES_WIFI_ReceiveData+0x164>)
 800b500:	4813      	ldr	r0, [pc, #76]	; (800b550 <ES_WIFI_ReceiveData+0x168>)
 800b502:	f008 fcdf 	bl	8013ec4 <iprintf>
 800b506:	4815      	ldr	r0, [pc, #84]	; (800b55c <ES_WIFI_ReceiveData+0x174>)
 800b508:	f008 fd62 	bl	8013fd0 <puts>
        *Receivedlen = 0;
 800b50c:	6a3b      	ldr	r3, [r7, #32]
 800b50e:	2200      	movs	r2, #0
 800b510:	801a      	strh	r2, [r3, #0]
 800b512:	e00d      	b.n	800b530 <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
 800b514:	f640 1218 	movw	r2, #2328	; 0x918
 800b518:	490c      	ldr	r1, [pc, #48]	; (800b54c <ES_WIFI_ReceiveData+0x164>)
 800b51a:	480d      	ldr	r0, [pc, #52]	; (800b550 <ES_WIFI_ReceiveData+0x168>)
 800b51c:	f008 fcd2 	bl	8013ec4 <iprintf>
 800b520:	480f      	ldr	r0, [pc, #60]	; (800b560 <ES_WIFI_ReceiveData+0x178>)
 800b522:	f008 fd55 	bl	8013fd0 <puts>
      issue15++;
 800b526:	4b0f      	ldr	r3, [pc, #60]	; (800b564 <ES_WIFI_ReceiveData+0x17c>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	3301      	adds	r3, #1
 800b52c:	4a0d      	ldr	r2, [pc, #52]	; (800b564 <ES_WIFI_ReceiveData+0x17c>)
 800b52e:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 800b530:	7cfb      	ldrb	r3, [r7, #19]
}
 800b532:	4618      	mov	r0, r3
 800b534:	3718      	adds	r7, #24
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	08016b68 	.word	0x08016b68
 800b540:	08016db8 	.word	0x08016db8
 800b544:	08016dc0 	.word	0x08016dc0
 800b548:	08016dc8 	.word	0x08016dc8
 800b54c:	08016bf8 	.word	0x08016bf8
 800b550:	08016c20 	.word	0x08016c20
 800b554:	08016dcc 	.word	0x08016dcc
 800b558:	08016dec 	.word	0x08016dec
 800b55c:	08016e04 	.word	0x08016e04
 800b560:	08016e24 	.word	0x08016e24
 800b564:	20000df4 	.word	0x20000df4

0800b568 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b08c      	sub	sp, #48	; 0x30
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 800b570:	4b56      	ldr	r3, [pc, #344]	; (800b6cc <SPI_WIFI_MspInit+0x164>)
 800b572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b574:	4a55      	ldr	r2, [pc, #340]	; (800b6cc <SPI_WIFI_MspInit+0x164>)
 800b576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b57a:	6593      	str	r3, [r2, #88]	; 0x58
 800b57c:	4b53      	ldr	r3, [pc, #332]	; (800b6cc <SPI_WIFI_MspInit+0x164>)
 800b57e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b584:	61bb      	str	r3, [r7, #24]
 800b586:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b588:	4b50      	ldr	r3, [pc, #320]	; (800b6cc <SPI_WIFI_MspInit+0x164>)
 800b58a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b58c:	4a4f      	ldr	r2, [pc, #316]	; (800b6cc <SPI_WIFI_MspInit+0x164>)
 800b58e:	f043 0302 	orr.w	r3, r3, #2
 800b592:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b594:	4b4d      	ldr	r3, [pc, #308]	; (800b6cc <SPI_WIFI_MspInit+0x164>)
 800b596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b598:	f003 0302 	and.w	r3, r3, #2
 800b59c:	617b      	str	r3, [r7, #20]
 800b59e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b5a0:	4b4a      	ldr	r3, [pc, #296]	; (800b6cc <SPI_WIFI_MspInit+0x164>)
 800b5a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5a4:	4a49      	ldr	r2, [pc, #292]	; (800b6cc <SPI_WIFI_MspInit+0x164>)
 800b5a6:	f043 0304 	orr.w	r3, r3, #4
 800b5aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b5ac:	4b47      	ldr	r3, [pc, #284]	; (800b6cc <SPI_WIFI_MspInit+0x164>)
 800b5ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5b0:	f003 0304 	and.w	r3, r3, #4
 800b5b4:	613b      	str	r3, [r7, #16]
 800b5b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b5b8:	4b44      	ldr	r3, [pc, #272]	; (800b6cc <SPI_WIFI_MspInit+0x164>)
 800b5ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5bc:	4a43      	ldr	r2, [pc, #268]	; (800b6cc <SPI_WIFI_MspInit+0x164>)
 800b5be:	f043 0310 	orr.w	r3, r3, #16
 800b5c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b5c4:	4b41      	ldr	r3, [pc, #260]	; (800b6cc <SPI_WIFI_MspInit+0x164>)
 800b5c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5c8:	f003 0310 	and.w	r3, r3, #16
 800b5cc:	60fb      	str	r3, [r7, #12]
 800b5ce:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b5d6:	483e      	ldr	r0, [pc, #248]	; (800b6d0 <SPI_WIFI_MspInit+0x168>)
 800b5d8:	f7f8 fd18 	bl	800400c <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 800b5dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b5e0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800b5ee:	f107 031c 	add.w	r3, r7, #28
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	4836      	ldr	r0, [pc, #216]	; (800b6d0 <SPI_WIFI_MspInit+0x168>)
 800b5f6:	f7f8 fa53 	bl	8003aa0 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800b5fa:	2302      	movs	r3, #2
 800b5fc:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800b5fe:	4b35      	ldr	r3, [pc, #212]	; (800b6d4 <SPI_WIFI_MspInit+0x16c>)
 800b600:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800b602:	2300      	movs	r3, #0
 800b604:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800b606:	2300      	movs	r3, #0
 800b608:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800b60a:	f107 031c 	add.w	r3, r7, #28
 800b60e:	4619      	mov	r1, r3
 800b610:	4831      	ldr	r0, [pc, #196]	; (800b6d8 <SPI_WIFI_MspInit+0x170>)
 800b612:	f7f8 fa45 	bl	8003aa0 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 800b616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b61a:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800b61c:	2301      	movs	r3, #1
 800b61e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800b620:	2300      	movs	r3, #0
 800b622:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800b624:	2300      	movs	r3, #0
 800b626:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 800b628:	2300      	movs	r3, #0
 800b62a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800b62c:	f107 031c 	add.w	r3, r7, #28
 800b630:	4619      	mov	r1, r3
 800b632:	4829      	ldr	r0, [pc, #164]	; (800b6d8 <SPI_WIFI_MspInit+0x170>)
 800b634:	f7f8 fa34 	bl	8003aa0 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 800b638:	2201      	movs	r2, #1
 800b63a:	2101      	movs	r1, #1
 800b63c:	4826      	ldr	r0, [pc, #152]	; (800b6d8 <SPI_WIFI_MspInit+0x170>)
 800b63e:	f7f8 fce5 	bl	800400c <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 800b642:	2301      	movs	r3, #1
 800b644:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800b646:	2301      	movs	r3, #1
 800b648:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800b64a:	2300      	movs	r3, #0
 800b64c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800b64e:	2301      	movs	r3, #1
 800b650:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 800b652:	f107 031c 	add.w	r3, r7, #28
 800b656:	4619      	mov	r1, r3
 800b658:	481f      	ldr	r0, [pc, #124]	; (800b6d8 <SPI_WIFI_MspInit+0x170>)
 800b65a:	f7f8 fa21 	bl	8003aa0 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 800b65e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b662:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800b664:	2302      	movs	r3, #2
 800b666:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800b668:	2300      	movs	r3, #0
 800b66a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800b66c:	2301      	movs	r3, #1
 800b66e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800b670:	2306      	movs	r3, #6
 800b672:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800b674:	f107 031c 	add.w	r3, r7, #28
 800b678:	4619      	mov	r1, r3
 800b67a:	4818      	ldr	r0, [pc, #96]	; (800b6dc <SPI_WIFI_MspInit+0x174>)
 800b67c:	f7f8 fa10 	bl	8003aa0 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 800b680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b684:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800b686:	2302      	movs	r3, #2
 800b688:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800b68a:	2300      	movs	r3, #0
 800b68c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800b68e:	2301      	movs	r3, #1
 800b690:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800b692:	2306      	movs	r3, #6
 800b694:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800b696:	f107 031c 	add.w	r3, r7, #28
 800b69a:	4619      	mov	r1, r3
 800b69c:	480f      	ldr	r0, [pc, #60]	; (800b6dc <SPI_WIFI_MspInit+0x174>)
 800b69e:	f7f8 f9ff 	bl	8003aa0 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 800b6a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b6a6:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800b6a8:	2302      	movs	r3, #2
 800b6aa:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800b6b4:	2306      	movs	r3, #6
 800b6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800b6b8:	f107 031c 	add.w	r3, r7, #28
 800b6bc:	4619      	mov	r1, r3
 800b6be:	4807      	ldr	r0, [pc, #28]	; (800b6dc <SPI_WIFI_MspInit+0x174>)
 800b6c0:	f7f8 f9ee 	bl	8003aa0 <HAL_GPIO_Init>
}
 800b6c4:	bf00      	nop
 800b6c6:	3730      	adds	r7, #48	; 0x30
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	40021000 	.word	0x40021000
 800b6d0:	48000400 	.word	0x48000400
 800b6d4:	10110000 	.word	0x10110000
 800b6d8:	48001000 	.word	0x48001000
 800b6dc:	48000800 	.word	0x48000800

0800b6e0 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 800b6ee:	88fb      	ldrh	r3, [r7, #6]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d145      	bne.n	800b780 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 800b6f4:	4b27      	ldr	r3, [pc, #156]	; (800b794 <SPI_WIFI_Init+0xb4>)
 800b6f6:	4a28      	ldr	r2, [pc, #160]	; (800b798 <SPI_WIFI_Init+0xb8>)
 800b6f8:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 800b6fa:	4826      	ldr	r0, [pc, #152]	; (800b794 <SPI_WIFI_Init+0xb4>)
 800b6fc:	f7ff ff34 	bl	800b568 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 800b700:	4b24      	ldr	r3, [pc, #144]	; (800b794 <SPI_WIFI_Init+0xb4>)
 800b702:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b706:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 800b708:	4b22      	ldr	r3, [pc, #136]	; (800b794 <SPI_WIFI_Init+0xb4>)
 800b70a:	2200      	movs	r2, #0
 800b70c:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800b70e:	4b21      	ldr	r3, [pc, #132]	; (800b794 <SPI_WIFI_Init+0xb4>)
 800b710:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800b714:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800b716:	4b1f      	ldr	r3, [pc, #124]	; (800b794 <SPI_WIFI_Init+0xb4>)
 800b718:	2200      	movs	r2, #0
 800b71a:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 800b71c:	4b1d      	ldr	r3, [pc, #116]	; (800b794 <SPI_WIFI_Init+0xb4>)
 800b71e:	2200      	movs	r2, #0
 800b720:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 800b722:	4b1c      	ldr	r3, [pc, #112]	; (800b794 <SPI_WIFI_Init+0xb4>)
 800b724:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b728:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 800b72a:	4b1a      	ldr	r3, [pc, #104]	; (800b794 <SPI_WIFI_Init+0xb4>)
 800b72c:	2210      	movs	r2, #16
 800b72e:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800b730:	4b18      	ldr	r3, [pc, #96]	; (800b794 <SPI_WIFI_Init+0xb4>)
 800b732:	2200      	movs	r2, #0
 800b734:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 800b736:	4b17      	ldr	r3, [pc, #92]	; (800b794 <SPI_WIFI_Init+0xb4>)
 800b738:	2200      	movs	r2, #0
 800b73a:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 800b73c:	4b15      	ldr	r3, [pc, #84]	; (800b794 <SPI_WIFI_Init+0xb4>)
 800b73e:	2200      	movs	r2, #0
 800b740:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 800b742:	4b14      	ldr	r3, [pc, #80]	; (800b794 <SPI_WIFI_Init+0xb4>)
 800b744:	2200      	movs	r2, #0
 800b746:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 800b748:	4812      	ldr	r0, [pc, #72]	; (800b794 <SPI_WIFI_Init+0xb4>)
 800b74a:	f7fb fabd 	bl	8006cc8 <HAL_SPI_Init>
 800b74e:	4603      	mov	r3, r0
 800b750:	2b00      	cmp	r3, #0
 800b752:	d002      	beq.n	800b75a <SPI_WIFI_Init+0x7a>
    {
      return -1;
 800b754:	f04f 33ff 	mov.w	r3, #4294967295
 800b758:	e018      	b.n	800b78c <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 800b75a:	2200      	movs	r2, #0
 800b75c:	2100      	movs	r1, #0
 800b75e:	2007      	movs	r0, #7
 800b760:	f7f7 ffda 	bl	8003718 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 800b764:	2007      	movs	r0, #7
 800b766:	f7f7 fff3 	bl	8003750 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 800b76a:	2200      	movs	r2, #0
 800b76c:	2100      	movs	r1, #0
 800b76e:	2033      	movs	r0, #51	; 0x33
 800b770:	f7f7 ffd2 	bl	8003718 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 800b774:	2033      	movs	r0, #51	; 0x33
 800b776:	f7f7 ffeb 	bl	8003750 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 800b77a:	200a      	movs	r0, #10
 800b77c:	f000 f9fe 	bl	800bb7c <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 800b780:	f000 f80c 	bl	800b79c <SPI_WIFI_ResetModule>
 800b784:	4603      	mov	r3, r0
 800b786:	73fb      	strb	r3, [r7, #15]

  return rc;
 800b788:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3710      	adds	r7, #16
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}
 800b794:	20000df8 	.word	0x20000df8
 800b798:	40003c00 	.word	0x40003c00

0800b79c <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800b7a2:	f7f7 fead 	bl	8003500 <HAL_GetTick>
 800b7a6:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b7b2:	4830      	ldr	r0, [pc, #192]	; (800b874 <SPI_WIFI_ResetModule+0xd8>)
 800b7b4:	f7f8 fc2a 	bl	800400c <HAL_GPIO_WritePin>
 800b7b8:	200a      	movs	r0, #10
 800b7ba:	f7f7 fead 	bl	8003518 <HAL_Delay>
 800b7be:	2201      	movs	r2, #1
 800b7c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b7c4:	482b      	ldr	r0, [pc, #172]	; (800b874 <SPI_WIFI_ResetModule+0xd8>)
 800b7c6:	f7f8 fc21 	bl	800400c <HAL_GPIO_WritePin>
 800b7ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b7ce:	f7f7 fea3 	bl	8003518 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	2101      	movs	r1, #1
 800b7d6:	4827      	ldr	r0, [pc, #156]	; (800b874 <SPI_WIFI_ResetModule+0xd8>)
 800b7d8:	f7f8 fc18 	bl	800400c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800b7dc:	200f      	movs	r0, #15
 800b7de:	f000 f9cd 	bl	800bb7c <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 800b7e2:	e020      	b.n	800b826 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 800b7e4:	7bfb      	ldrb	r3, [r7, #15]
 800b7e6:	463a      	mov	r2, r7
 800b7e8:	18d1      	adds	r1, r2, r3
 800b7ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	4821      	ldr	r0, [pc, #132]	; (800b878 <SPI_WIFI_ResetModule+0xdc>)
 800b7f2:	f7fb fb34 	bl	8006e5e <HAL_SPI_Receive>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	71fb      	strb	r3, [r7, #7]
    count += 2;
 800b7fa:	7bfb      	ldrb	r3, [r7, #15]
 800b7fc:	3302      	adds	r3, #2
 800b7fe:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 800b800:	f7f7 fe7e 	bl	8003500 <HAL_GetTick>
 800b804:	4602      	mov	r2, r0
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	1ad3      	subs	r3, r2, r3
 800b80a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b80e:	d202      	bcs.n	800b816 <SPI_WIFI_ResetModule+0x7a>
 800b810:	79fb      	ldrb	r3, [r7, #7]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d007      	beq.n	800b826 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 800b816:	2201      	movs	r2, #1
 800b818:	2101      	movs	r1, #1
 800b81a:	4816      	ldr	r0, [pc, #88]	; (800b874 <SPI_WIFI_ResetModule+0xd8>)
 800b81c:	f7f8 fbf6 	bl	800400c <HAL_GPIO_WritePin>
      return -1;
 800b820:	f04f 33ff 	mov.w	r3, #4294967295
 800b824:	e021      	b.n	800b86a <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 800b826:	2102      	movs	r1, #2
 800b828:	4812      	ldr	r0, [pc, #72]	; (800b874 <SPI_WIFI_ResetModule+0xd8>)
 800b82a:	f7f8 fbd7 	bl	8003fdc <HAL_GPIO_ReadPin>
 800b82e:	4603      	mov	r3, r0
 800b830:	2b01      	cmp	r3, #1
 800b832:	d0d7      	beq.n	800b7e4 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 800b834:	2201      	movs	r2, #1
 800b836:	2101      	movs	r1, #1
 800b838:	480e      	ldr	r0, [pc, #56]	; (800b874 <SPI_WIFI_ResetModule+0xd8>)
 800b83a:	f7f8 fbe7 	bl	800400c <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800b83e:	783b      	ldrb	r3, [r7, #0]
 800b840:	2b15      	cmp	r3, #21
 800b842:	d10e      	bne.n	800b862 <SPI_WIFI_ResetModule+0xc6>
 800b844:	787b      	ldrb	r3, [r7, #1]
 800b846:	2b15      	cmp	r3, #21
 800b848:	d10b      	bne.n	800b862 <SPI_WIFI_ResetModule+0xc6>
 800b84a:	78bb      	ldrb	r3, [r7, #2]
 800b84c:	2b0d      	cmp	r3, #13
 800b84e:	d108      	bne.n	800b862 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800b850:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800b852:	2b0a      	cmp	r3, #10
 800b854:	d105      	bne.n	800b862 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800b856:	793b      	ldrb	r3, [r7, #4]
 800b858:	2b3e      	cmp	r3, #62	; 0x3e
 800b85a:	d102      	bne.n	800b862 <SPI_WIFI_ResetModule+0xc6>
 800b85c:	797b      	ldrb	r3, [r7, #5]
 800b85e:	2b20      	cmp	r3, #32
 800b860:	d002      	beq.n	800b868 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 800b862:	f04f 33ff 	mov.w	r3, #4294967295
 800b866:	e000      	b.n	800b86a <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 800b868:	2300      	movs	r3, #0
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	48001000 	.word	0x48001000
 800b878:	20000df8 	.word	0x20000df8

0800b87c <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 800b880:	4802      	ldr	r0, [pc, #8]	; (800b88c <SPI_WIFI_DeInit+0x10>)
 800b882:	f7fb fac4 	bl	8006e0e <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 800b886:	2300      	movs	r3, #0
}
 800b888:	4618      	mov	r0, r3
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	20000df8 	.word	0x20000df8

0800b890 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 800b898:	f7f7 fe32 	bl	8003500 <HAL_GetTick>
 800b89c:	4603      	mov	r3, r0
 800b89e:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 800b8a0:	e00a      	b.n	800b8b8 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800b8a2:	f7f7 fe2d 	bl	8003500 <HAL_GetTick>
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	1ad2      	subs	r2, r2, r3
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d902      	bls.n	800b8b8 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800b8b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b8b6:	e007      	b.n	800b8c8 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 800b8b8:	2102      	movs	r1, #2
 800b8ba:	4805      	ldr	r0, [pc, #20]	; (800b8d0 <wait_cmddata_rdy_high+0x40>)
 800b8bc:	f7f8 fb8e 	bl	8003fdc <HAL_GPIO_ReadPin>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d1ed      	bne.n	800b8a2 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800b8c6:	2300      	movs	r3, #0
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3710      	adds	r7, #16
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}
 800b8d0:	48001000 	.word	0x48001000

0800b8d4 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800b8dc:	f7f7 fe10 	bl	8003500 <HAL_GetTick>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 800b8e4:	e00a      	b.n	800b8fc <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800b8e6:	f7f7 fe0b 	bl	8003500 <HAL_GetTick>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	1ad2      	subs	r2, r2, r3
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d902      	bls.n	800b8fc <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800b8f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b8fa:	e004      	b.n	800b906 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 800b8fc:	4b04      	ldr	r3, [pc, #16]	; (800b910 <wait_cmddata_rdy_rising_event+0x3c>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2b01      	cmp	r3, #1
 800b902:	d0f0      	beq.n	800b8e6 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 800b904:	2300      	movs	r3, #0
#endif
}
 800b906:	4618      	mov	r0, r3
 800b908:	3710      	adds	r7, #16
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	bf00      	nop
 800b910:	20000e64 	.word	0x20000e64

0800b914 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800b91c:	f7f7 fdf0 	bl	8003500 <HAL_GetTick>
 800b920:	4603      	mov	r3, r0
 800b922:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 800b924:	e00a      	b.n	800b93c <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800b926:	f7f7 fdeb 	bl	8003500 <HAL_GetTick>
 800b92a:	4602      	mov	r2, r0
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	1ad2      	subs	r2, r2, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	429a      	cmp	r2, r3
 800b934:	d902      	bls.n	800b93c <wait_spi_rx_event+0x28>
    {
      return -1;
 800b936:	f04f 33ff 	mov.w	r3, #4294967295
 800b93a:	e004      	b.n	800b946 <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 800b93c:	4b04      	ldr	r3, [pc, #16]	; (800b950 <wait_spi_rx_event+0x3c>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2b01      	cmp	r3, #1
 800b942:	d0f0      	beq.n	800b926 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 800b944:	2300      	movs	r3, #0
#endif
}
 800b946:	4618      	mov	r0, r3
 800b948:	3710      	adds	r7, #16
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	20000e5c 	.word	0x20000e5c

0800b954 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800b95c:	f7f7 fdd0 	bl	8003500 <HAL_GetTick>
 800b960:	4603      	mov	r3, r0
 800b962:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 800b964:	e00a      	b.n	800b97c <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800b966:	f7f7 fdcb 	bl	8003500 <HAL_GetTick>
 800b96a:	4602      	mov	r2, r0
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	1ad2      	subs	r2, r2, r3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	429a      	cmp	r2, r3
 800b974:	d902      	bls.n	800b97c <wait_spi_tx_event+0x28>
    {
      return -1;
 800b976:	f04f 33ff 	mov.w	r3, #4294967295
 800b97a:	e004      	b.n	800b986 <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 800b97c:	4b04      	ldr	r3, [pc, #16]	; (800b990 <wait_spi_tx_event+0x3c>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2b01      	cmp	r3, #1
 800b982:	d0f0      	beq.n	800b966 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 800b984:	2300      	movs	r3, #0
#endif
}
 800b986:	4618      	mov	r0, r3
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	20000e60 	.word	0x20000e60

0800b994 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b086      	sub	sp, #24
 800b998:	af00      	add	r7, sp, #0
 800b99a:	60f8      	str	r0, [r7, #12]
 800b99c:	460b      	mov	r3, r1
 800b99e:	607a      	str	r2, [r7, #4]
 800b9a0:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	2101      	movs	r1, #1
 800b9aa:	4834      	ldr	r0, [pc, #208]	; (800ba7c <SPI_WIFI_ReceiveData+0xe8>)
 800b9ac:	f7f8 fb2e 	bl	800400c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 800b9b0:	2003      	movs	r0, #3
 800b9b2:	f000 f8e3 	bl	800bb7c <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7ff ff8b 	bl	800b8d4 <wait_cmddata_rdy_rising_event>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	da02      	bge.n	800b9ca <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 800b9c4:	f06f 0302 	mvn.w	r3, #2
 800b9c8:	e054      	b.n	800ba74 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	2101      	movs	r1, #1
 800b9ce:	482b      	ldr	r0, [pc, #172]	; (800ba7c <SPI_WIFI_ReceiveData+0xe8>)
 800b9d0:	f7f8 fb1c 	bl	800400c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800b9d4:	200f      	movs	r0, #15
 800b9d6:	f000 f8d1 	bl	800bb7c <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 800b9da:	e03d      	b.n	800ba58 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 800b9dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b9e0:	897b      	ldrh	r3, [r7, #10]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	db02      	blt.n	800b9ec <SPI_WIFI_ReceiveData+0x58>
 800b9e6:	897b      	ldrh	r3, [r7, #10]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d13c      	bne.n	800ba66 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 800b9ec:	4b24      	ldr	r3, [pc, #144]	; (800ba80 <SPI_WIFI_ReceiveData+0xec>)
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800b9f2:	f107 0314 	add.w	r3, r7, #20
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	4822      	ldr	r0, [pc, #136]	; (800ba84 <SPI_WIFI_ReceiveData+0xf0>)
 800b9fc:	f7fb fe00 	bl	8007600 <HAL_SPI_Receive_IT>
 800ba00:	4603      	mov	r3, r0
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d007      	beq.n	800ba16 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800ba06:	2201      	movs	r2, #1
 800ba08:	2101      	movs	r1, #1
 800ba0a:	481c      	ldr	r0, [pc, #112]	; (800ba7c <SPI_WIFI_ReceiveData+0xe8>)
 800ba0c:	f7f8 fafe 	bl	800400c <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 800ba10:	f04f 33ff 	mov.w	r3, #4294967295
 800ba14:	e02e      	b.n	800ba74 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f7ff ff7b 	bl	800b914 <wait_spi_rx_event>

      pData[0] = tmp[0];
 800ba1e:	7d3a      	ldrb	r2, [r7, #20]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	3301      	adds	r3, #1
 800ba28:	7d7a      	ldrb	r2, [r7, #21]
 800ba2a:	701a      	strb	r2, [r3, #0]
      length += 2;
 800ba2c:	8afb      	ldrh	r3, [r7, #22]
 800ba2e:	3302      	adds	r3, #2
 800ba30:	b29b      	uxth	r3, r3
 800ba32:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	3302      	adds	r3, #2
 800ba38:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 800ba3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ba3e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ba42:	db09      	blt.n	800ba58 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 800ba44:	2201      	movs	r2, #1
 800ba46:	2101      	movs	r1, #1
 800ba48:	480c      	ldr	r0, [pc, #48]	; (800ba7c <SPI_WIFI_ReceiveData+0xe8>)
 800ba4a:	f7f8 fadf 	bl	800400c <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 800ba4e:	f7ff fea5 	bl	800b79c <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800ba52:	f06f 0303 	mvn.w	r3, #3
 800ba56:	e00d      	b.n	800ba74 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 800ba58:	2102      	movs	r1, #2
 800ba5a:	4808      	ldr	r0, [pc, #32]	; (800ba7c <SPI_WIFI_ReceiveData+0xe8>)
 800ba5c:	f7f8 fabe 	bl	8003fdc <HAL_GPIO_ReadPin>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d0ba      	beq.n	800b9dc <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 800ba66:	2201      	movs	r2, #1
 800ba68:	2101      	movs	r1, #1
 800ba6a:	4804      	ldr	r0, [pc, #16]	; (800ba7c <SPI_WIFI_ReceiveData+0xe8>)
 800ba6c:	f7f8 face 	bl	800400c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 800ba70:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3718      	adds	r7, #24
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	48001000 	.word	0x48001000
 800ba80:	20000e5c 	.word	0x20000e5c
 800ba84:	20000df8 	.word	0x20000df8

0800ba88 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b086      	sub	sp, #24
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	460b      	mov	r3, r1
 800ba92:	607a      	str	r2, [r7, #4]
 800ba94:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7ff fef9 	bl	800b890 <wait_cmddata_rdy_high>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	da02      	bge.n	800baaa <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 800baa4:	f04f 33ff 	mov.w	r3, #4294967295
 800baa8:	e04f      	b.n	800bb4a <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 800baaa:	4b2a      	ldr	r3, [pc, #168]	; (800bb54 <SPI_WIFI_SendData+0xcc>)
 800baac:	2201      	movs	r2, #1
 800baae:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800bab0:	2200      	movs	r2, #0
 800bab2:	2101      	movs	r1, #1
 800bab4:	4828      	ldr	r0, [pc, #160]	; (800bb58 <SPI_WIFI_SendData+0xd0>)
 800bab6:	f7f8 faa9 	bl	800400c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800baba:	200f      	movs	r0, #15
 800babc:	f000 f85e 	bl	800bb7c <SPI_WIFI_DelayUs>
  if (len > 1)
 800bac0:	897b      	ldrh	r3, [r7, #10]
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	d919      	bls.n	800bafa <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 800bac6:	4b25      	ldr	r3, [pc, #148]	; (800bb5c <SPI_WIFI_SendData+0xd4>)
 800bac8:	2201      	movs	r2, #1
 800baca:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 800bacc:	897b      	ldrh	r3, [r7, #10]
 800bace:	085b      	lsrs	r3, r3, #1
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	461a      	mov	r2, r3
 800bad4:	68f9      	ldr	r1, [r7, #12]
 800bad6:	4822      	ldr	r0, [pc, #136]	; (800bb60 <SPI_WIFI_SendData+0xd8>)
 800bad8:	f7fb fd04 	bl	80074e4 <HAL_SPI_Transmit_IT>
 800badc:	4603      	mov	r3, r0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d007      	beq.n	800baf2 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800bae2:	2201      	movs	r2, #1
 800bae4:	2101      	movs	r1, #1
 800bae6:	481c      	ldr	r0, [pc, #112]	; (800bb58 <SPI_WIFI_SendData+0xd0>)
 800bae8:	f7f8 fa90 	bl	800400c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800baec:	f04f 33ff 	mov.w	r3, #4294967295
 800baf0:	e02b      	b.n	800bb4a <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7ff ff2d 	bl	800b954 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 800bafa:	897b      	ldrh	r3, [r7, #10]
 800bafc:	f003 0301 	and.w	r3, r3, #1
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d020      	beq.n	800bb46 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 800bb04:	897b      	ldrh	r3, [r7, #10]
 800bb06:	3b01      	subs	r3, #1
 800bb08:	68fa      	ldr	r2, [r7, #12]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 800bb10:	230a      	movs	r3, #10
 800bb12:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 800bb14:	4b11      	ldr	r3, [pc, #68]	; (800bb5c <SPI_WIFI_SendData+0xd4>)
 800bb16:	2201      	movs	r2, #1
 800bb18:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800bb1a:	f107 0314 	add.w	r3, r7, #20
 800bb1e:	2201      	movs	r2, #1
 800bb20:	4619      	mov	r1, r3
 800bb22:	480f      	ldr	r0, [pc, #60]	; (800bb60 <SPI_WIFI_SendData+0xd8>)
 800bb24:	f7fb fcde 	bl	80074e4 <HAL_SPI_Transmit_IT>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d007      	beq.n	800bb3e <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 800bb2e:	2201      	movs	r2, #1
 800bb30:	2101      	movs	r1, #1
 800bb32:	4809      	ldr	r0, [pc, #36]	; (800bb58 <SPI_WIFI_SendData+0xd0>)
 800bb34:	f7f8 fa6a 	bl	800400c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800bb38:	f04f 33ff 	mov.w	r3, #4294967295
 800bb3c:	e005      	b.n	800bb4a <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	4618      	mov	r0, r3
 800bb42:	f7ff ff07 	bl	800b954 <wait_spi_tx_event>
    
  }
  return len;
 800bb46:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3718      	adds	r7, #24
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	20000e64 	.word	0x20000e64
 800bb58:	48001000 	.word	0x48001000
 800bb5c:	20000e60 	.word	0x20000e60
 800bb60:	20000df8 	.word	0x20000df8

0800bb64 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f7f7 fcd3 	bl	8003518 <HAL_Delay>
}
 800bb72:	bf00      	nop
 800bb74:	3708      	adds	r7, #8
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
	...

0800bb7c <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b086      	sub	sp, #24
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 800bb84:	2300      	movs	r3, #0
 800bb86:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 800bb8c:	4b20      	ldr	r3, [pc, #128]	; (800bc10 <SPI_WIFI_DelayUs+0x94>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d122      	bne.n	800bbda <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 800bb94:	4b1f      	ldr	r3, [pc, #124]	; (800bc14 <SPI_WIFI_DelayUs+0x98>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4a1f      	ldr	r2, [pc, #124]	; (800bc18 <SPI_WIFI_DelayUs+0x9c>)
 800bb9a:	fba2 2303 	umull	r2, r3, r2, r3
 800bb9e:	099b      	lsrs	r3, r3, #6
 800bba0:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 800bba2:	2300      	movs	r3, #0
 800bba4:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 800bbaa:	f7f7 fca9 	bl	8003500 <HAL_GetTick>
 800bbae:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 800bbb0:	e002      	b.n	800bbb8 <SPI_WIFI_DelayUs+0x3c>
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	3b01      	subs	r3, #1
 800bbb6:	60bb      	str	r3, [r7, #8]
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d1f9      	bne.n	800bbb2 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 800bbbe:	f7f7 fc9f 	bl	8003500 <HAL_GetTick>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	1ad3      	subs	r3, r2, r3
 800bbc8:	4a11      	ldr	r2, [pc, #68]	; (800bc10 <SPI_WIFI_DelayUs+0x94>)
 800bbca:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 800bbcc:	4b10      	ldr	r3, [pc, #64]	; (800bc10 <SPI_WIFI_DelayUs+0x94>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d102      	bne.n	800bbda <SPI_WIFI_DelayUs+0x5e>
 800bbd4:	4b0e      	ldr	r3, [pc, #56]	; (800bc10 <SPI_WIFI_DelayUs+0x94>)
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 800bbda:	4b0e      	ldr	r3, [pc, #56]	; (800bc14 <SPI_WIFI_DelayUs+0x98>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4a0f      	ldr	r2, [pc, #60]	; (800bc1c <SPI_WIFI_DelayUs+0xa0>)
 800bbe0:	fba2 2303 	umull	r2, r3, r2, r3
 800bbe4:	0c9a      	lsrs	r2, r3, #18
 800bbe6:	4b0a      	ldr	r3, [pc, #40]	; (800bc10 <SPI_WIFI_DelayUs+0x94>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbee:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	697a      	ldr	r2, [r7, #20]
 800bbf4:	fb02 f303 	mul.w	r3, r2, r3
 800bbf8:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 800bbfa:	e002      	b.n	800bc02 <SPI_WIFI_DelayUs+0x86>
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	60bb      	str	r3, [r7, #8]
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d1f9      	bne.n	800bbfc <SPI_WIFI_DelayUs+0x80>
  return;
 800bc08:	bf00      	nop
}
 800bc0a:	3718      	adds	r7, #24
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	20000e68 	.word	0x20000e68
 800bc14:	20000010 	.word	0x20000010
 800bc18:	10624dd3 	.word	0x10624dd3
 800bc1c:	431bde83 	.word	0x431bde83

0800bc20 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 800bc28:	4b06      	ldr	r3, [pc, #24]	; (800bc44 <HAL_SPI_RxCpltCallback+0x24>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d002      	beq.n	800bc36 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 800bc30:	4b04      	ldr	r3, [pc, #16]	; (800bc44 <HAL_SPI_RxCpltCallback+0x24>)
 800bc32:	2200      	movs	r2, #0
 800bc34:	601a      	str	r2, [r3, #0]
  }
}
 800bc36:	bf00      	nop
 800bc38:	370c      	adds	r7, #12
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr
 800bc42:	bf00      	nop
 800bc44:	20000e5c 	.word	0x20000e5c

0800bc48 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b083      	sub	sp, #12
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 800bc50:	4b06      	ldr	r3, [pc, #24]	; (800bc6c <HAL_SPI_TxCpltCallback+0x24>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d002      	beq.n	800bc5e <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 800bc58:	4b04      	ldr	r3, [pc, #16]	; (800bc6c <HAL_SPI_TxCpltCallback+0x24>)
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	601a      	str	r2, [r3, #0]
  }
}
 800bc5e:	bf00      	nop
 800bc60:	370c      	adds	r7, #12
 800bc62:	46bd      	mov	sp, r7
 800bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc68:	4770      	bx	lr
 800bc6a:	bf00      	nop
 800bc6c:	20000e60 	.word	0x20000e60

0800bc70 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 800bc70:	b480      	push	{r7}
 800bc72:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 800bc74:	4b05      	ldr	r3, [pc, #20]	; (800bc8c <SPI_WIFI_ISR+0x1c>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d102      	bne.n	800bc82 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 800bc7c:	4b03      	ldr	r3, [pc, #12]	; (800bc8c <SPI_WIFI_ISR+0x1c>)
 800bc7e:	2200      	movs	r2, #0
 800bc80:	601a      	str	r2, [r3, #0]
   }
}
 800bc82:	bf00      	nop
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr
 800bc8c:	20000e64 	.word	0x20000e64

0800bc90 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b084      	sub	sp, #16
 800bc94:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800bc96:	2301      	movs	r3, #1
 800bc98:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800bc9a:	4b0d      	ldr	r3, [pc, #52]	; (800bcd0 <WIFI_Init+0x40>)
 800bc9c:	9301      	str	r3, [sp, #4]
 800bc9e:	4b0d      	ldr	r3, [pc, #52]	; (800bcd4 <WIFI_Init+0x44>)
 800bca0:	9300      	str	r3, [sp, #0]
 800bca2:	4b0d      	ldr	r3, [pc, #52]	; (800bcd8 <WIFI_Init+0x48>)
 800bca4:	4a0d      	ldr	r2, [pc, #52]	; (800bcdc <WIFI_Init+0x4c>)
 800bca6:	490e      	ldr	r1, [pc, #56]	; (800bce0 <WIFI_Init+0x50>)
 800bca8:	480e      	ldr	r0, [pc, #56]	; (800bce4 <WIFI_Init+0x54>)
 800bcaa:	f7ff f8c3 	bl	800ae34 <ES_WIFI_RegisterBusIO>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d107      	bne.n	800bcc4 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800bcb4:	480b      	ldr	r0, [pc, #44]	; (800bce4 <WIFI_Init+0x54>)
 800bcb6:	f7ff f88f 	bl	800add8 <ES_WIFI_Init>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d101      	bne.n	800bcc4 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 800bcc4:	79fb      	ldrb	r3, [r7, #7]
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3708      	adds	r7, #8
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
 800bcce:	bf00      	nop
 800bcd0:	0800b995 	.word	0x0800b995
 800bcd4:	0800ba89 	.word	0x0800ba89
 800bcd8:	0800bb65 	.word	0x0800bb65
 800bcdc:	0800b87d 	.word	0x0800b87d
 800bce0:	0800b6e1 	.word	0x0800b6e1
 800bce4:	20000e6c 	.word	0x20000e6c

0800bce8 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b086      	sub	sp, #24
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800bcfa:	79fb      	ldrb	r3, [r7, #7]
 800bcfc:	68ba      	ldr	r2, [r7, #8]
 800bcfe:	68f9      	ldr	r1, [r7, #12]
 800bd00:	4809      	ldr	r0, [pc, #36]	; (800bd28 <WIFI_Connect+0x40>)
 800bd02:	f7ff f8cb 	bl	800ae9c <ES_WIFI_Connect>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d107      	bne.n	800bd1c <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800bd0c:	4806      	ldr	r0, [pc, #24]	; (800bd28 <WIFI_Connect+0x40>)
 800bd0e:	f7ff f969 	bl	800afe4 <ES_WIFI_GetNetworkSettings>
 800bd12:	4603      	mov	r3, r0
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d101      	bne.n	800bd1c <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 800bd1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3718      	adds	r7, #24
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	bf00      	nop
 800bd28:	20000e6c 	.word	0x20000e6c

0800bd2c <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800bd34:	2301      	movs	r3, #1
 800bd36:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 800bd38:	6879      	ldr	r1, [r7, #4]
 800bd3a:	4806      	ldr	r0, [pc, #24]	; (800bd54 <WIFI_GetMAC_Address+0x28>)
 800bd3c:	f7ff f97c 	bl	800b038 <ES_WIFI_GetMACAddress>
 800bd40:	4603      	mov	r3, r0
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d101      	bne.n	800bd4a <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800bd46:	2300      	movs	r3, #0
 800bd48:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800bd4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3710      	adds	r7, #16
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}
 800bd54:	20000e6c 	.word	0x20000e6c

0800bd58 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800bd60:	2301      	movs	r3, #1
 800bd62:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 800bd64:	4809      	ldr	r0, [pc, #36]	; (800bd8c <WIFI_GetIP_Address+0x34>)
 800bd66:	f7ff f911 	bl	800af8c <ES_WIFI_IsConnected>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d107      	bne.n	800bd80 <WIFI_GetIP_Address+0x28>
 800bd70:	4b06      	ldr	r3, [pc, #24]	; (800bd8c <WIFI_GetIP_Address+0x34>)
 800bd72:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 800bd76:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800bd80:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3710      	adds	r7, #16
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	20000e6c 	.word	0x20000e6c

0800bd90 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b08a      	sub	sp, #40	; 0x28
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	607a      	str	r2, [r7, #4]
 800bd9a:	603b      	str	r3, [r7, #0]
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800bda0:	2301      	movs	r3, #1
 800bda2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	b2db      	uxtb	r3, r3
 800bdaa:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 800bdac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bdae:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 800bdb0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bdb2:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800bdb4:	7afb      	ldrb	r3, [r7, #11]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	bf14      	ite	ne
 800bdba:	2301      	movne	r3, #1
 800bdbc:	2300      	moveq	r3, #0
 800bdbe:	b2db      	uxtb	r3, r3
 800bdc0:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	785b      	ldrb	r3, [r3, #1]
 800bdcc:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	789b      	ldrb	r3, [r3, #2]
 800bdd2:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	78db      	ldrb	r3, [r3, #3]
 800bdd8:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800bdda:	f107 0310 	add.w	r3, r7, #16
 800bdde:	4619      	mov	r1, r3
 800bde0:	4807      	ldr	r0, [pc, #28]	; (800be00 <WIFI_OpenClientConnection+0x70>)
 800bde2:	f7ff f95b 	bl	800b09c <ES_WIFI_StartClientConnection>
 800bde6:	4603      	mov	r3, r0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d102      	bne.n	800bdf2 <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 800bdec:	2300      	movs	r3, #0
 800bdee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800bdf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3728      	adds	r7, #40	; 0x28
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	20000e6c 	.word	0x20000e6c

0800be04 <sendMessageVector>:
/*-----------------------------------------------------------*/

static int32_t sendMessageVector( MQTTContext_t * pContext,
                                  TransportOutVector_t * pIoVec,
                                  size_t ioVecCount )
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b08a      	sub	sp, #40	; 0x28
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	607a      	str	r2, [r7, #4]
    int32_t sendResult;
    uint32_t timeoutMs;
    TransportOutVector_t * pIoVectIterator;
    size_t vectorsToBeSent = ioVecCount;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	61fb      	str	r3, [r7, #28]
    size_t bytesToSend = 0U;
 800be14:	2300      	movs	r3, #0
 800be16:	61bb      	str	r3, [r7, #24]
    int32_t bytesSentOrError = 0;
 800be18:	2300      	movs	r3, #0
 800be1a:	617b      	str	r3, [r7, #20]

    assert( pContext != NULL );
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d106      	bne.n	800be30 <sendMessageVector+0x2c>
 800be22:	4b64      	ldr	r3, [pc, #400]	; (800bfb4 <sendMessageVector+0x1b0>)
 800be24:	4a64      	ldr	r2, [pc, #400]	; (800bfb8 <sendMessageVector+0x1b4>)
 800be26:	f240 21f2 	movw	r1, #754	; 0x2f2
 800be2a:	4864      	ldr	r0, [pc, #400]	; (800bfbc <sendMessageVector+0x1b8>)
 800be2c:	f007 f85e 	bl	8012eec <__assert_func>
    assert( pIoVec != NULL );
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d106      	bne.n	800be44 <sendMessageVector+0x40>
 800be36:	4b62      	ldr	r3, [pc, #392]	; (800bfc0 <sendMessageVector+0x1bc>)
 800be38:	4a5f      	ldr	r2, [pc, #380]	; (800bfb8 <sendMessageVector+0x1b4>)
 800be3a:	f240 21f3 	movw	r1, #755	; 0x2f3
 800be3e:	485f      	ldr	r0, [pc, #380]	; (800bfbc <sendMessageVector+0x1b8>)
 800be40:	f007 f854 	bl	8012eec <__assert_func>
    assert( pContext->getTime != NULL );
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d106      	bne.n	800be5a <sendMessageVector+0x56>
 800be4c:	4b5d      	ldr	r3, [pc, #372]	; (800bfc4 <sendMessageVector+0x1c0>)
 800be4e:	4a5a      	ldr	r2, [pc, #360]	; (800bfb8 <sendMessageVector+0x1b4>)
 800be50:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 800be54:	4859      	ldr	r0, [pc, #356]	; (800bfbc <sendMessageVector+0x1b8>)
 800be56:	f007 f849 	bl	8012eec <__assert_func>
    /* Send must always be defined */
    assert( pContext->transportInterface.send != NULL );
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	695b      	ldr	r3, [r3, #20]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d106      	bne.n	800be70 <sendMessageVector+0x6c>
 800be62:	4b59      	ldr	r3, [pc, #356]	; (800bfc8 <sendMessageVector+0x1c4>)
 800be64:	4a54      	ldr	r2, [pc, #336]	; (800bfb8 <sendMessageVector+0x1b4>)
 800be66:	f240 21f6 	movw	r1, #758	; 0x2f6
 800be6a:	4854      	ldr	r0, [pc, #336]	; (800bfbc <sendMessageVector+0x1b8>)
 800be6c:	f007 f83e 	bl	8012eec <__assert_func>

    /* Count the total number of bytes to be sent as outlined in the vector. */
    for( pIoVectIterator = pIoVec; pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ); pIoVectIterator++ )
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	623b      	str	r3, [r7, #32]
 800be74:	e007      	b.n	800be86 <sendMessageVector+0x82>
    {
        bytesToSend += pIoVectIterator->iov_len;
 800be76:	6a3b      	ldr	r3, [r7, #32]
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	69ba      	ldr	r2, [r7, #24]
 800be7c:	4413      	add	r3, r2
 800be7e:	61bb      	str	r3, [r7, #24]
    for( pIoVectIterator = pIoVec; pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ); pIoVectIterator++ )
 800be80:	6a3b      	ldr	r3, [r7, #32]
 800be82:	3308      	adds	r3, #8
 800be84:	623b      	str	r3, [r7, #32]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800be8c:	3b01      	subs	r3, #1
 800be8e:	00db      	lsls	r3, r3, #3
 800be90:	68ba      	ldr	r2, [r7, #8]
 800be92:	4413      	add	r3, r2
 800be94:	6a3a      	ldr	r2, [r7, #32]
 800be96:	429a      	cmp	r2, r3
 800be98:	d9ed      	bls.n	800be76 <sendMessageVector+0x72>
    }

    /* Reset the iterator to point to the first entry in the array. */
    pIoVectIterator = pIoVec;
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	623b      	str	r3, [r7, #32]

    /* Set the timeout. */
    timeoutMs = pContext->getTime() + MQTT_SEND_TIMEOUT_MS;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea2:	4798      	blx	r3
 800bea4:	4603      	mov	r3, r0
 800bea6:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800beaa:	3320      	adds	r3, #32
 800beac:	613b      	str	r3, [r7, #16]

    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800beae:	e073      	b.n	800bf98 <sendMessageVector+0x194>
    {
        if( pContext->transportInterface.writev != NULL )
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	699b      	ldr	r3, [r3, #24]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d008      	beq.n	800beca <sendMessageVector+0xc6>
        {
            sendResult = pContext->transportInterface.writev( pContext->transportInterface.pNetworkContext,
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	699b      	ldr	r3, [r3, #24]
 800bebc:	68fa      	ldr	r2, [r7, #12]
 800bebe:	69d0      	ldr	r0, [r2, #28]
 800bec0:	69fa      	ldr	r2, [r7, #28]
 800bec2:	6a39      	ldr	r1, [r7, #32]
 800bec4:	4798      	blx	r3
 800bec6:	6278      	str	r0, [r7, #36]	; 0x24
 800bec8:	e009      	b.n	800bede <sendMessageVector+0xda>
                                                              pIoVectIterator,
                                                              vectorsToBeSent );
        }
        else
        {
            sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	695b      	ldr	r3, [r3, #20]
 800bece:	68fa      	ldr	r2, [r7, #12]
 800bed0:	69d0      	ldr	r0, [r2, #28]
 800bed2:	6a3a      	ldr	r2, [r7, #32]
 800bed4:	6811      	ldr	r1, [r2, #0]
 800bed6:	6a3a      	ldr	r2, [r7, #32]
 800bed8:	6852      	ldr	r2, [r2, #4]
 800beda:	4798      	blx	r3
 800bedc:	6278      	str	r0, [r7, #36]	; 0x24
                                                            pIoVectIterator->iov_base,
                                                            pIoVectIterator->iov_len );
        }

        if( sendResult > 0 )
 800bede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	dd17      	ble.n	800bf14 <sendMessageVector+0x110>
        {
            /* It is a bug in the application's transport send implementation if
             * more bytes than expected are sent. */
            assert( sendResult <= ( ( int32_t ) bytesToSend - bytesSentOrError ) );
 800bee4:	69ba      	ldr	r2, [r7, #24]
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	1ad3      	subs	r3, r2, r3
 800beea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beec:	429a      	cmp	r2, r3
 800beee:	dd06      	ble.n	800befe <sendMessageVector+0xfa>
 800bef0:	4b36      	ldr	r3, [pc, #216]	; (800bfcc <sendMessageVector+0x1c8>)
 800bef2:	4a31      	ldr	r2, [pc, #196]	; (800bfb8 <sendMessageVector+0x1b4>)
 800bef4:	f240 3117 	movw	r1, #791	; 0x317
 800bef8:	4830      	ldr	r0, [pc, #192]	; (800bfbc <sendMessageVector+0x1b8>)
 800befa:	f006 fff7 	bl	8012eec <__assert_func>

            bytesSentOrError += sendResult;
 800befe:	697a      	ldr	r2, [r7, #20]
 800bf00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf02:	4413      	add	r3, r2
 800bf04:	617b      	str	r3, [r7, #20]

            /* Set last transmission time. */
            pContext->lastPacketTxTime = pContext->getTime();
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf0a:	4798      	blx	r3
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	635a      	str	r2, [r3, #52]	; 0x34
 800bf12:	e004      	b.n	800bf1e <sendMessageVector+0x11a>

            LogDebug( ( "sendMessageVector: Bytes Sent=%ld, Bytes Remaining=%lu",
                        ( long int ) sendResult,
                        ( unsigned long ) ( bytesToSend - ( size_t ) bytesSentOrError ) ) );
        }
        else if( sendResult < 0 )
 800bf14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	da01      	bge.n	800bf1e <sendMessageVector+0x11a>
        {
            bytesSentOrError = sendResult;
 800bf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1c:	617b      	str	r3, [r7, #20]
        {
            /* MISRA Empty body */
        }

        /* Check for timeout. */
        if( pContext->getTime() >= timeoutMs )
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf22:	4798      	blx	r3
 800bf24:	4602      	mov	r2, r0
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d93d      	bls.n	800bfa8 <sendMessageVector+0x1a4>
            LogError( ( "sendMessageVector: Unable to send packet: Timed out." ) );
            break;
        }

        /* Update the send pointer to the correct vector and offset. */
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800bf2c:	e00b      	b.n	800bf46 <sendMessageVector+0x142>
               ( sendResult >= ( int32_t ) pIoVectIterator->iov_len ) )
        {
            sendResult -= ( int32_t ) pIoVectIterator->iov_len;
 800bf2e:	6a3b      	ldr	r3, [r7, #32]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	461a      	mov	r2, r3
 800bf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf36:	1a9b      	subs	r3, r3, r2
 800bf38:	627b      	str	r3, [r7, #36]	; 0x24
            pIoVectIterator++;
 800bf3a:	6a3b      	ldr	r3, [r7, #32]
 800bf3c:	3308      	adds	r3, #8
 800bf3e:	623b      	str	r3, [r7, #32]
            /* Update the number of vector which are yet to be sent. */
            vectorsToBeSent--;
 800bf40:	69fb      	ldr	r3, [r7, #28]
 800bf42:	3b01      	subs	r3, #1
 800bf44:	61fb      	str	r3, [r7, #28]
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800bf4c:	3b01      	subs	r3, #1
 800bf4e:	00db      	lsls	r3, r3, #3
 800bf50:	68ba      	ldr	r2, [r7, #8]
 800bf52:	4413      	add	r3, r2
 800bf54:	6a3a      	ldr	r2, [r7, #32]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d805      	bhi.n	800bf66 <sendMessageVector+0x162>
               ( sendResult >= ( int32_t ) pIoVectIterator->iov_len ) )
 800bf5a:	6a3b      	ldr	r3, [r7, #32]
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	461a      	mov	r2, r3
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800bf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf62:	4293      	cmp	r3, r2
 800bf64:	dae3      	bge.n	800bf2e <sendMessageVector+0x12a>
        }

        /* Some of the bytes from this vector were sent as well, update the length
         * and the pointer to data in this vector. */
        if( ( sendResult > 0 ) &&
 800bf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	dd15      	ble.n	800bf98 <sendMessageVector+0x194>
            ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) )
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800bf72:	3b01      	subs	r3, #1
 800bf74:	00db      	lsls	r3, r3, #3
 800bf76:	68ba      	ldr	r2, [r7, #8]
 800bf78:	4413      	add	r3, r2
        if( ( sendResult > 0 ) &&
 800bf7a:	6a3a      	ldr	r2, [r7, #32]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d80b      	bhi.n	800bf98 <sendMessageVector+0x194>
        {
            pIoVectIterator->iov_base = ( const void * ) &( ( ( const uint8_t * ) pIoVectIterator->iov_base )[ sendResult ] );
 800bf80:	6a3b      	ldr	r3, [r7, #32]
 800bf82:	681a      	ldr	r2, [r3, #0]
 800bf84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf86:	441a      	add	r2, r3
 800bf88:	6a3b      	ldr	r3, [r7, #32]
 800bf8a:	601a      	str	r2, [r3, #0]
            pIoVectIterator->iov_len -= ( size_t ) sendResult;
 800bf8c:	6a3b      	ldr	r3, [r7, #32]
 800bf8e:	685a      	ldr	r2, [r3, #4]
 800bf90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf92:	1ad2      	subs	r2, r2, r3
 800bf94:	6a3b      	ldr	r3, [r7, #32]
 800bf96:	605a      	str	r2, [r3, #4]
    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	697a      	ldr	r2, [r7, #20]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	da04      	bge.n	800bfaa <sendMessageVector+0x1a6>
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	da84      	bge.n	800beb0 <sendMessageVector+0xac>
 800bfa6:	e000      	b.n	800bfaa <sendMessageVector+0x1a6>
            break;
 800bfa8:	bf00      	nop
        }
    }

    return bytesSentOrError;
 800bfaa:	697b      	ldr	r3, [r7, #20]
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3728      	adds	r7, #40	; 0x28
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	08016fcc 	.word	0x08016fcc
 800bfb8:	08017b24 	.word	0x08017b24
 800bfbc:	08016ef0 	.word	0x08016ef0
 800bfc0:	08016fe0 	.word	0x08016fe0
 800bfc4:	08016ff0 	.word	0x08016ff0
 800bfc8:	0801700c 	.word	0x0801700c
 800bfcc:	08017038 	.word	0x08017038

0800bfd0 <sendBuffer>:

static int32_t sendBuffer( MQTTContext_t * pContext,
                           const uint8_t * pBufferToSend,
                           size_t bytesToSend )
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b088      	sub	sp, #32
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	60f8      	str	r0, [r7, #12]
 800bfd8:	60b9      	str	r1, [r7, #8]
 800bfda:	607a      	str	r2, [r7, #4]
    int32_t sendResult;
    uint32_t timeoutMs;
    int32_t bytesSentOrError = 0;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	61fb      	str	r3, [r7, #28]
    const uint8_t * pIndex = pBufferToSend;
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	61bb      	str	r3, [r7, #24]

    assert( pContext != NULL );
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d106      	bne.n	800bff8 <sendBuffer+0x28>
 800bfea:	4b39      	ldr	r3, [pc, #228]	; (800c0d0 <sendBuffer+0x100>)
 800bfec:	4a39      	ldr	r2, [pc, #228]	; (800c0d4 <sendBuffer+0x104>)
 800bfee:	f240 3153 	movw	r1, #851	; 0x353
 800bff2:	4839      	ldr	r0, [pc, #228]	; (800c0d8 <sendBuffer+0x108>)
 800bff4:	f006 ff7a 	bl	8012eec <__assert_func>
    assert( pContext->getTime != NULL );
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d106      	bne.n	800c00e <sendBuffer+0x3e>
 800c000:	4b36      	ldr	r3, [pc, #216]	; (800c0dc <sendBuffer+0x10c>)
 800c002:	4a34      	ldr	r2, [pc, #208]	; (800c0d4 <sendBuffer+0x104>)
 800c004:	f44f 7155 	mov.w	r1, #852	; 0x354
 800c008:	4833      	ldr	r0, [pc, #204]	; (800c0d8 <sendBuffer+0x108>)
 800c00a:	f006 ff6f 	bl	8012eec <__assert_func>
    assert( pContext->transportInterface.send != NULL );
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	695b      	ldr	r3, [r3, #20]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d106      	bne.n	800c024 <sendBuffer+0x54>
 800c016:	4b32      	ldr	r3, [pc, #200]	; (800c0e0 <sendBuffer+0x110>)
 800c018:	4a2e      	ldr	r2, [pc, #184]	; (800c0d4 <sendBuffer+0x104>)
 800c01a:	f240 3155 	movw	r1, #853	; 0x355
 800c01e:	482e      	ldr	r0, [pc, #184]	; (800c0d8 <sendBuffer+0x108>)
 800c020:	f006 ff64 	bl	8012eec <__assert_func>
    assert( pIndex != NULL );
 800c024:	69bb      	ldr	r3, [r7, #24]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d106      	bne.n	800c038 <sendBuffer+0x68>
 800c02a:	4b2e      	ldr	r3, [pc, #184]	; (800c0e4 <sendBuffer+0x114>)
 800c02c:	4a29      	ldr	r2, [pc, #164]	; (800c0d4 <sendBuffer+0x104>)
 800c02e:	f240 3156 	movw	r1, #854	; 0x356
 800c032:	4829      	ldr	r0, [pc, #164]	; (800c0d8 <sendBuffer+0x108>)
 800c034:	f006 ff5a 	bl	8012eec <__assert_func>

    /* Set the timeout. */
    timeoutMs = pContext->getTime() + MQTT_SEND_TIMEOUT_MS;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c03c:	4798      	blx	r3
 800c03e:	4603      	mov	r3, r0
 800c040:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800c044:	3320      	adds	r3, #32
 800c046:	617b      	str	r3, [r7, #20]

    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800c048:	e034      	b.n	800c0b4 <sendBuffer+0xe4>
    {
        sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	695b      	ldr	r3, [r3, #20]
 800c04e:	68fa      	ldr	r2, [r7, #12]
 800c050:	69d0      	ldr	r0, [r2, #28]
                                                        pIndex,
                                                        bytesToSend - ( size_t ) bytesSentOrError );
 800c052:	69fa      	ldr	r2, [r7, #28]
        sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800c054:	6879      	ldr	r1, [r7, #4]
 800c056:	1a8a      	subs	r2, r1, r2
 800c058:	69b9      	ldr	r1, [r7, #24]
 800c05a:	4798      	blx	r3
 800c05c:	6138      	str	r0, [r7, #16]

        if( sendResult > 0 )
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	2b00      	cmp	r3, #0
 800c062:	dd1b      	ble.n	800c09c <sendBuffer+0xcc>
        {
            /* It is a bug in the application's transport send implementation if
             * more bytes than expected are sent. */
            assert( sendResult <= ( ( int32_t ) bytesToSend - bytesSentOrError ) );
 800c064:	687a      	ldr	r2, [r7, #4]
 800c066:	69fb      	ldr	r3, [r7, #28]
 800c068:	1ad3      	subs	r3, r2, r3
 800c06a:	693a      	ldr	r2, [r7, #16]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	dd06      	ble.n	800c07e <sendBuffer+0xae>
 800c070:	4b1d      	ldr	r3, [pc, #116]	; (800c0e8 <sendBuffer+0x118>)
 800c072:	4a18      	ldr	r2, [pc, #96]	; (800c0d4 <sendBuffer+0x104>)
 800c074:	f240 3165 	movw	r1, #869	; 0x365
 800c078:	4817      	ldr	r0, [pc, #92]	; (800c0d8 <sendBuffer+0x108>)
 800c07a:	f006 ff37 	bl	8012eec <__assert_func>

            bytesSentOrError += sendResult;
 800c07e:	69fa      	ldr	r2, [r7, #28]
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	4413      	add	r3, r2
 800c084:	61fb      	str	r3, [r7, #28]
            pIndex = &pIndex[ sendResult ];
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	69ba      	ldr	r2, [r7, #24]
 800c08a:	4413      	add	r3, r2
 800c08c:	61bb      	str	r3, [r7, #24]

            /* Set last transmission time. */
            pContext->lastPacketTxTime = pContext->getTime();
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c092:	4798      	blx	r3
 800c094:	4602      	mov	r2, r0
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	635a      	str	r2, [r3, #52]	; 0x34
 800c09a:	e004      	b.n	800c0a6 <sendBuffer+0xd6>

            LogDebug( ( "sendBuffer: Bytes Sent=%ld, Bytes Remaining=%lu",
                        ( long int ) sendResult,
                        ( unsigned long ) ( bytesToSend - ( size_t ) bytesSentOrError ) ) );
        }
        else if( sendResult < 0 )
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	da01      	bge.n	800c0a6 <sendBuffer+0xd6>
        {
            bytesSentOrError = sendResult;
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	61fb      	str	r3, [r7, #28]
        {
            /* MISRA Empty body */
        }

        /* Check for timeout. */
        if( pContext->getTime() >= timeoutMs )
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0aa:	4798      	blx	r3
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	d907      	bls.n	800c0c4 <sendBuffer+0xf4>
    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	69fa      	ldr	r2, [r7, #28]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	da04      	bge.n	800c0c6 <sendBuffer+0xf6>
 800c0bc:	69fb      	ldr	r3, [r7, #28]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	dac3      	bge.n	800c04a <sendBuffer+0x7a>
 800c0c2:	e000      	b.n	800c0c6 <sendBuffer+0xf6>
        {
            LogError( ( "sendBuffer: Unable to send packet: Timed out." ) );
            break;
 800c0c4:	bf00      	nop
        }
    }

    return bytesSentOrError;
 800c0c6:	69fb      	ldr	r3, [r7, #28]
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3720      	adds	r7, #32
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	08016fcc 	.word	0x08016fcc
 800c0d4:	08017b38 	.word	0x08017b38
 800c0d8:	08016ef0 	.word	0x08016ef0
 800c0dc:	08016ff0 	.word	0x08016ff0
 800c0e0:	0801700c 	.word	0x0801700c
 800c0e4:	08017078 	.word	0x08017078
 800c0e8:	08017038 	.word	0x08017038

0800c0ec <calculateElapsedTime>:

/*-----------------------------------------------------------*/

static uint32_t calculateElapsedTime( uint32_t later,
                                      uint32_t start )
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b083      	sub	sp, #12
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	6039      	str	r1, [r7, #0]
    return later - start;
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	1ad3      	subs	r3, r2, r3
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	370c      	adds	r7, #12
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr

0800c108 <getAckFromPacketType>:

/*-----------------------------------------------------------*/

static MQTTPubAckType_t getAckFromPacketType( uint8_t packetType )
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	4603      	mov	r3, r0
 800c110:	71fb      	strb	r3, [r7, #7]
    MQTTPubAckType_t ackType = MQTTPuback;
 800c112:	2300      	movs	r3, #0
 800c114:	73fb      	strb	r3, [r7, #15]

    switch( packetType )
 800c116:	79fb      	ldrb	r3, [r7, #7]
 800c118:	2b62      	cmp	r3, #98	; 0x62
 800c11a:	d00c      	beq.n	800c136 <getAckFromPacketType+0x2e>
 800c11c:	2b62      	cmp	r3, #98	; 0x62
 800c11e:	dc0d      	bgt.n	800c13c <getAckFromPacketType+0x34>
 800c120:	2b40      	cmp	r3, #64	; 0x40
 800c122:	d002      	beq.n	800c12a <getAckFromPacketType+0x22>
 800c124:	2b50      	cmp	r3, #80	; 0x50
 800c126:	d003      	beq.n	800c130 <getAckFromPacketType+0x28>
 800c128:	e008      	b.n	800c13c <getAckFromPacketType+0x34>
    {
        case MQTT_PACKET_TYPE_PUBACK:
            ackType = MQTTPuback;
 800c12a:	2300      	movs	r3, #0
 800c12c:	73fb      	strb	r3, [r7, #15]
            break;
 800c12e:	e012      	b.n	800c156 <getAckFromPacketType+0x4e>

        case MQTT_PACKET_TYPE_PUBREC:
            ackType = MQTTPubrec;
 800c130:	2301      	movs	r3, #1
 800c132:	73fb      	strb	r3, [r7, #15]
            break;
 800c134:	e00f      	b.n	800c156 <getAckFromPacketType+0x4e>

        case MQTT_PACKET_TYPE_PUBREL:
            ackType = MQTTPubrel;
 800c136:	2302      	movs	r3, #2
 800c138:	73fb      	strb	r3, [r7, #15]
            break;
 800c13a:	e00c      	b.n	800c156 <getAckFromPacketType+0x4e>
        case MQTT_PACKET_TYPE_PUBCOMP:
        default:

            /* This function is only called after checking the type is one of
             * the above four values, so packet type must be PUBCOMP here. */
            assert( packetType == MQTT_PACKET_TYPE_PUBCOMP );
 800c13c:	79fb      	ldrb	r3, [r7, #7]
 800c13e:	2b70      	cmp	r3, #112	; 0x70
 800c140:	d006      	beq.n	800c150 <getAckFromPacketType+0x48>
 800c142:	4b07      	ldr	r3, [pc, #28]	; (800c160 <getAckFromPacketType+0x58>)
 800c144:	4a07      	ldr	r2, [pc, #28]	; (800c164 <getAckFromPacketType+0x5c>)
 800c146:	f240 31a7 	movw	r1, #935	; 0x3a7
 800c14a:	4807      	ldr	r0, [pc, #28]	; (800c168 <getAckFromPacketType+0x60>)
 800c14c:	f006 fece 	bl	8012eec <__assert_func>
            ackType = MQTTPubcomp;
 800c150:	2303      	movs	r3, #3
 800c152:	73fb      	strb	r3, [r7, #15]
            break;
 800c154:	bf00      	nop
    }

    return ackType;
 800c156:	7bfb      	ldrb	r3, [r7, #15]
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3710      	adds	r7, #16
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}
 800c160:	08017088 	.word	0x08017088
 800c164:	08017b44 	.word	0x08017b44
 800c168:	08016ef0 	.word	0x08016ef0

0800c16c <recvExact>:

/*-----------------------------------------------------------*/

static int32_t recvExact( const MQTTContext_t * pContext,
                          size_t bytesToRecv )
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b08c      	sub	sp, #48	; 0x30
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
    uint8_t * pIndex = NULL;
 800c176:	2300      	movs	r3, #0
 800c178:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t bytesRemaining = bytesToRecv;
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t totalBytesRecvd = 0, bytesRecvd;
 800c17e:	2300      	movs	r3, #0
 800c180:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t lastDataRecvTimeMs = 0U, timeSinceLastRecvMs = 0U;
 800c182:	2300      	movs	r3, #0
 800c184:	623b      	str	r3, [r7, #32]
 800c186:	2300      	movs	r3, #0
 800c188:	61bb      	str	r3, [r7, #24]
    TransportRecv_t recvFunc = NULL;
 800c18a:	2300      	movs	r3, #0
 800c18c:	617b      	str	r3, [r7, #20]
    MQTTGetCurrentTimeFunc_t getTimeStampMs = NULL;
 800c18e:	2300      	movs	r3, #0
 800c190:	613b      	str	r3, [r7, #16]
    bool receiveError = false;
 800c192:	2300      	movs	r3, #0
 800c194:	77fb      	strb	r3, [r7, #31]

    assert( pContext != NULL );
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d106      	bne.n	800c1aa <recvExact+0x3e>
 800c19c:	4b44      	ldr	r3, [pc, #272]	; (800c2b0 <recvExact+0x144>)
 800c19e:	4a45      	ldr	r2, [pc, #276]	; (800c2b4 <recvExact+0x148>)
 800c1a0:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 800c1a4:	4844      	ldr	r0, [pc, #272]	; (800c2b8 <recvExact+0x14c>)
 800c1a6:	f006 fea1 	bl	8012eec <__assert_func>
    assert( bytesToRecv <= pContext->networkBuffer.size );
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ae:	683a      	ldr	r2, [r7, #0]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d906      	bls.n	800c1c2 <recvExact+0x56>
 800c1b4:	4b41      	ldr	r3, [pc, #260]	; (800c2bc <recvExact+0x150>)
 800c1b6:	4a3f      	ldr	r2, [pc, #252]	; (800c2b4 <recvExact+0x148>)
 800c1b8:	f240 31bd 	movw	r1, #957	; 0x3bd
 800c1bc:	483e      	ldr	r0, [pc, #248]	; (800c2b8 <recvExact+0x14c>)
 800c1be:	f006 fe95 	bl	8012eec <__assert_func>
    assert( pContext->getTime != NULL );
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d106      	bne.n	800c1d8 <recvExact+0x6c>
 800c1ca:	4b3d      	ldr	r3, [pc, #244]	; (800c2c0 <recvExact+0x154>)
 800c1cc:	4a39      	ldr	r2, [pc, #228]	; (800c2b4 <recvExact+0x148>)
 800c1ce:	f240 31be 	movw	r1, #958	; 0x3be
 800c1d2:	4839      	ldr	r0, [pc, #228]	; (800c2b8 <recvExact+0x14c>)
 800c1d4:	f006 fe8a 	bl	8012eec <__assert_func>
    assert( pContext->transportInterface.recv != NULL );
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	691b      	ldr	r3, [r3, #16]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d106      	bne.n	800c1ee <recvExact+0x82>
 800c1e0:	4b38      	ldr	r3, [pc, #224]	; (800c2c4 <recvExact+0x158>)
 800c1e2:	4a34      	ldr	r2, [pc, #208]	; (800c2b4 <recvExact+0x148>)
 800c1e4:	f240 31bf 	movw	r1, #959	; 0x3bf
 800c1e8:	4833      	ldr	r0, [pc, #204]	; (800c2b8 <recvExact+0x14c>)
 800c1ea:	f006 fe7f 	bl	8012eec <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6a1b      	ldr	r3, [r3, #32]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d106      	bne.n	800c204 <recvExact+0x98>
 800c1f6:	4b34      	ldr	r3, [pc, #208]	; (800c2c8 <recvExact+0x15c>)
 800c1f8:	4a2e      	ldr	r2, [pc, #184]	; (800c2b4 <recvExact+0x148>)
 800c1fa:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800c1fe:	482e      	ldr	r0, [pc, #184]	; (800c2b8 <recvExact+0x14c>)
 800c200:	f006 fe74 	bl	8012eec <__assert_func>

    pIndex = pContext->networkBuffer.pBuffer;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6a1b      	ldr	r3, [r3, #32]
 800c208:	62fb      	str	r3, [r7, #44]	; 0x2c
    recvFunc = pContext->transportInterface.recv;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	691b      	ldr	r3, [r3, #16]
 800c20e:	617b      	str	r3, [r7, #20]
    getTimeStampMs = pContext->getTime;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c214:	613b      	str	r3, [r7, #16]

    /* Part of the MQTT packet has been read before calling this function. */
    lastDataRecvTimeMs = getTimeStampMs();
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	4798      	blx	r3
 800c21a:	6238      	str	r0, [r7, #32]

    while( ( bytesRemaining > 0U ) && ( receiveError == false ) )
 800c21c:	e039      	b.n	800c292 <recvExact+0x126>
    {
        bytesRecvd = recvFunc( pContext->transportInterface.pNetworkContext,
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	69d8      	ldr	r0, [r3, #28]
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c226:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c228:	4798      	blx	r3
 800c22a:	60f8      	str	r0, [r7, #12]
                               pIndex,
                               bytesRemaining );

        if( bytesRecvd < 0 )
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	da04      	bge.n	800c23c <recvExact+0xd0>
        {
            LogError( ( "Network error while receiving packet: ReturnCode=%ld.",
                        ( long int ) bytesRecvd ) );
            totalBytesRecvd = bytesRecvd;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	627b      	str	r3, [r7, #36]	; 0x24
            receiveError = true;
 800c236:	2301      	movs	r3, #1
 800c238:	77fb      	strb	r3, [r7, #31]
 800c23a:	e02a      	b.n	800c292 <recvExact+0x126>
        }
        else if( bytesRecvd > 0 )
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	dd1a      	ble.n	800c278 <recvExact+0x10c>
        {
            /* Reset the starting time as we have received some data from the network. */
            lastDataRecvTimeMs = getTimeStampMs();
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	4798      	blx	r3
 800c246:	6238      	str	r0, [r7, #32]
            /* It is a bug in the application's transport receive implementation
             * if more bytes than expected are received. To avoid a possible
             * overflow in converting bytesRemaining from unsigned to signed,
             * this assert must exist after the check for bytesRecvd being
             * negative. */
            assert( ( size_t ) bytesRecvd <= bytesRemaining );
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d206      	bcs.n	800c25e <recvExact+0xf2>
 800c250:	4b1e      	ldr	r3, [pc, #120]	; (800c2cc <recvExact+0x160>)
 800c252:	4a18      	ldr	r2, [pc, #96]	; (800c2b4 <recvExact+0x148>)
 800c254:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 800c258:	4817      	ldr	r0, [pc, #92]	; (800c2b8 <recvExact+0x14c>)
 800c25a:	f006 fe47 	bl	8012eec <__assert_func>

            bytesRemaining -= ( size_t ) bytesRecvd;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c262:	1ad3      	subs	r3, r2, r3
 800c264:	62bb      	str	r3, [r7, #40]	; 0x28
            totalBytesRecvd += ( int32_t ) bytesRecvd;
 800c266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	4413      	add	r3, r2
 800c26c:	627b      	str	r3, [r7, #36]	; 0x24
            /* Increment the index. */
            pIndex = &pIndex[ bytesRecvd ];
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c272:	4413      	add	r3, r2
 800c274:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c276:	e00c      	b.n	800c292 <recvExact+0x126>
                        ( long int ) totalBytesRecvd ) );
        }
        else
        {
            /* No bytes were read from the network. */
            timeSinceLastRecvMs = calculateElapsedTime( getTimeStampMs(), lastDataRecvTimeMs );
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	4798      	blx	r3
 800c27c:	4603      	mov	r3, r0
 800c27e:	6a39      	ldr	r1, [r7, #32]
 800c280:	4618      	mov	r0, r3
 800c282:	f7ff ff33 	bl	800c0ec <calculateElapsedTime>
 800c286:	61b8      	str	r0, [r7, #24]

            /* Check for timeout if we have been waiting to receive any byte on the network. */
            if( timeSinceLastRecvMs >= MQTT_RECV_POLLING_TIMEOUT_MS )
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	2b09      	cmp	r3, #9
 800c28c:	d901      	bls.n	800c292 <recvExact+0x126>
            {
                LogError( ( "Unable to receive packet: Timed out in transport recv." ) );
                receiveError = true;
 800c28e:	2301      	movs	r3, #1
 800c290:	77fb      	strb	r3, [r7, #31]
    while( ( bytesRemaining > 0U ) && ( receiveError == false ) )
 800c292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c294:	2b00      	cmp	r3, #0
 800c296:	d005      	beq.n	800c2a4 <recvExact+0x138>
 800c298:	7ffb      	ldrb	r3, [r7, #31]
 800c29a:	f083 0301 	eor.w	r3, r3, #1
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d1bc      	bne.n	800c21e <recvExact+0xb2>
            }
        }
    }

    return totalBytesRecvd;
 800c2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3730      	adds	r7, #48	; 0x30
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	08016fcc 	.word	0x08016fcc
 800c2b4:	08017b5c 	.word	0x08017b5c
 800c2b8:	08016ef0 	.word	0x08016ef0
 800c2bc:	080170b0 	.word	0x080170b0
 800c2c0:	08016ff0 	.word	0x08016ff0
 800c2c4:	080170dc 	.word	0x080170dc
 800c2c8:	08017108 	.word	0x08017108
 800c2cc:	08017130 	.word	0x08017130

0800c2d0 <discardPacket>:
/*-----------------------------------------------------------*/

static MQTTStatus_t discardPacket( const MQTTContext_t * pContext,
                                   size_t remainingLength,
                                   uint32_t timeoutMs )
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b08c      	sub	sp, #48	; 0x30
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTRecvFailed;
 800c2dc:	2304      	movs	r3, #4
 800c2de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int32_t bytesReceived = 0;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	61fb      	str	r3, [r7, #28]
    size_t bytesToReceive = 0U;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t totalBytesReceived = 0U;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t entryTimeMs = 0U;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	61bb      	str	r3, [r7, #24]
    uint32_t elapsedTimeMs = 0U;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	617b      	str	r3, [r7, #20]
    MQTTGetCurrentTimeFunc_t getTimeStampMs = NULL;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	613b      	str	r3, [r7, #16]
    bool receiveError = false;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    assert( pContext != NULL );
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d106      	bne.n	800c314 <discardPacket+0x44>
 800c306:	4b2f      	ldr	r3, [pc, #188]	; (800c3c4 <discardPacket+0xf4>)
 800c308:	4a2f      	ldr	r2, [pc, #188]	; (800c3c8 <discardPacket+0xf8>)
 800c30a:	f240 410b 	movw	r1, #1035	; 0x40b
 800c30e:	482f      	ldr	r0, [pc, #188]	; (800c3cc <discardPacket+0xfc>)
 800c310:	f006 fdec 	bl	8012eec <__assert_func>
    assert( pContext->getTime != NULL );
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d106      	bne.n	800c32a <discardPacket+0x5a>
 800c31c:	4b2c      	ldr	r3, [pc, #176]	; (800c3d0 <discardPacket+0x100>)
 800c31e:	4a2a      	ldr	r2, [pc, #168]	; (800c3c8 <discardPacket+0xf8>)
 800c320:	f240 410c 	movw	r1, #1036	; 0x40c
 800c324:	4829      	ldr	r0, [pc, #164]	; (800c3cc <discardPacket+0xfc>)
 800c326:	f006 fde1 	bl	8012eec <__assert_func>

    bytesToReceive = pContext->networkBuffer.size;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c32e:	62bb      	str	r3, [r7, #40]	; 0x28
    getTimeStampMs = pContext->getTime;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c334:	613b      	str	r3, [r7, #16]

    entryTimeMs = getTimeStampMs();
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	4798      	blx	r3
 800c33a:	61b8      	str	r0, [r7, #24]

    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800c33c:	e029      	b.n	800c392 <discardPacket+0xc2>
    {
        if( ( remainingLength - totalBytesReceived ) < bytesToReceive )
 800c33e:	68ba      	ldr	r2, [r7, #8]
 800c340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c342:	1ad3      	subs	r3, r2, r3
 800c344:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c346:	429a      	cmp	r2, r3
 800c348:	d903      	bls.n	800c352 <discardPacket+0x82>
        {
            bytesToReceive = remainingLength - totalBytesReceived;
 800c34a:	68ba      	ldr	r2, [r7, #8]
 800c34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34e:	1ad3      	subs	r3, r2, r3
 800c350:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        bytesReceived = recvExact( pContext, bytesToReceive );
 800c352:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c354:	68f8      	ldr	r0, [r7, #12]
 800c356:	f7ff ff09 	bl	800c16c <recvExact>
 800c35a:	61f8      	str	r0, [r7, #28]

        if( bytesReceived != ( int32_t ) bytesToReceive )
 800c35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c35e:	69fa      	ldr	r2, [r7, #28]
 800c360:	429a      	cmp	r2, r3
 800c362:	d003      	beq.n	800c36c <discardPacket+0x9c>
        {
            LogError( ( "Receive error while discarding packet."
                        "ReceivedBytes=%ld, ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            receiveError = true;
 800c364:	2301      	movs	r3, #1
 800c366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c36a:	e012      	b.n	800c392 <discardPacket+0xc2>
        }
        else
        {
            totalBytesReceived += ( uint32_t ) bytesReceived;
 800c36c:	69fb      	ldr	r3, [r7, #28]
 800c36e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c370:	4413      	add	r3, r2
 800c372:	627b      	str	r3, [r7, #36]	; 0x24

            elapsedTimeMs = calculateElapsedTime( getTimeStampMs(), entryTimeMs );
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	4798      	blx	r3
 800c378:	4603      	mov	r3, r0
 800c37a:	69b9      	ldr	r1, [r7, #24]
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7ff feb5 	bl	800c0ec <calculateElapsedTime>
 800c382:	6178      	str	r0, [r7, #20]

            /* Check for timeout. */
            if( elapsedTimeMs >= timeoutMs )
 800c384:	697a      	ldr	r2, [r7, #20]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	429a      	cmp	r2, r3
 800c38a:	d302      	bcc.n	800c392 <discardPacket+0xc2>
            {
                LogError( ( "Time expired while discarding packet." ) );
                receiveError = true;
 800c38c:	2301      	movs	r3, #1
 800c38e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800c392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	429a      	cmp	r2, r3
 800c398:	d206      	bcs.n	800c3a8 <discardPacket+0xd8>
 800c39a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c39e:	f083 0301 	eor.w	r3, r3, #1
 800c3a2:	b2db      	uxtb	r3, r3
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d1ca      	bne.n	800c33e <discardPacket+0x6e>
            }
        }
    }

    if( totalBytesReceived == remainingLength )
 800c3a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	d102      	bne.n	800c3b6 <discardPacket+0xe6>
    {
        LogError( ( "Dumped packet. DumpedBytes=%lu.",
                    ( unsigned long ) totalBytesReceived ) );
        /* Packet dumped, so no data is available. */
        status = MQTTNoDataAvailable;
 800c3b0:	2307      	movs	r3, #7
 800c3b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 800c3b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3730      	adds	r7, #48	; 0x30
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
 800c3c2:	bf00      	nop
 800c3c4:	08016fcc 	.word	0x08016fcc
 800c3c8:	08017b68 	.word	0x08017b68
 800c3cc:	08016ef0 	.word	0x08016ef0
 800c3d0:	08016ff0 	.word	0x08016ff0

0800c3d4 <discardStoredPacket>:

/*-----------------------------------------------------------*/

static MQTTStatus_t discardStoredPacket( MQTTContext_t * pContext,
                                         const MQTTPacketInfo_t * pPacketInfo )
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b08a      	sub	sp, #40	; 0x28
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTRecvFailed;
 800c3de:	2304      	movs	r3, #4
 800c3e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int32_t bytesReceived = 0;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	617b      	str	r3, [r7, #20]
    size_t bytesToReceive = 0U;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	623b      	str	r3, [r7, #32]
    uint32_t totalBytesReceived = 0U;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	61fb      	str	r3, [r7, #28]
    bool receiveError = false;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	76fb      	strb	r3, [r7, #27]
    size_t mqttPacketSize = 0;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	613b      	str	r3, [r7, #16]
    size_t remainingLength;

    assert( pContext != NULL );
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d106      	bne.n	800c40c <discardStoredPacket+0x38>
 800c3fe:	4b34      	ldr	r3, [pc, #208]	; (800c4d0 <discardStoredPacket+0xfc>)
 800c400:	4a34      	ldr	r2, [pc, #208]	; (800c4d4 <discardStoredPacket+0x100>)
 800c402:	f240 414b 	movw	r1, #1099	; 0x44b
 800c406:	4834      	ldr	r0, [pc, #208]	; (800c4d8 <discardStoredPacket+0x104>)
 800c408:	f006 fd70 	bl	8012eec <__assert_func>
    assert( pPacketInfo != NULL );
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d106      	bne.n	800c420 <discardStoredPacket+0x4c>
 800c412:	4b32      	ldr	r3, [pc, #200]	; (800c4dc <discardStoredPacket+0x108>)
 800c414:	4a2f      	ldr	r2, [pc, #188]	; (800c4d4 <discardStoredPacket+0x100>)
 800c416:	f240 414c 	movw	r1, #1100	; 0x44c
 800c41a:	482f      	ldr	r0, [pc, #188]	; (800c4d8 <discardStoredPacket+0x104>)
 800c41c:	f006 fd66 	bl	8012eec <__assert_func>

    mqttPacketSize = pPacketInfo->remainingLength + pPacketInfo->headerLength;
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	689a      	ldr	r2, [r3, #8]
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	68db      	ldr	r3, [r3, #12]
 800c428:	4413      	add	r3, r2
 800c42a:	613b      	str	r3, [r7, #16]

    /* Assert that the packet being discarded is bigger than the
     * receive buffer. */
    assert( mqttPacketSize > pContext->networkBuffer.size );
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c430:	693a      	ldr	r2, [r7, #16]
 800c432:	429a      	cmp	r2, r3
 800c434:	d806      	bhi.n	800c444 <discardStoredPacket+0x70>
 800c436:	4b2a      	ldr	r3, [pc, #168]	; (800c4e0 <discardStoredPacket+0x10c>)
 800c438:	4a26      	ldr	r2, [pc, #152]	; (800c4d4 <discardStoredPacket+0x100>)
 800c43a:	f240 4152 	movw	r1, #1106	; 0x452
 800c43e:	4826      	ldr	r0, [pc, #152]	; (800c4d8 <discardStoredPacket+0x104>)
 800c440:	f006 fd54 	bl	8012eec <__assert_func>

    /* Discard these many bytes at a time. */
    bytesToReceive = pContext->networkBuffer.size;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c448:	623b      	str	r3, [r7, #32]

    /* Number of bytes depicted by 'index' have already been received. */
    remainingLength = mqttPacketSize - pContext->index;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c44e:	693a      	ldr	r2, [r7, #16]
 800c450:	1ad3      	subs	r3, r2, r3
 800c452:	60fb      	str	r3, [r7, #12]

    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800c454:	e019      	b.n	800c48a <discardStoredPacket+0xb6>
    {
        if( ( remainingLength - totalBytesReceived ) < bytesToReceive )
 800c456:	68fa      	ldr	r2, [r7, #12]
 800c458:	69fb      	ldr	r3, [r7, #28]
 800c45a:	1ad3      	subs	r3, r2, r3
 800c45c:	6a3a      	ldr	r2, [r7, #32]
 800c45e:	429a      	cmp	r2, r3
 800c460:	d903      	bls.n	800c46a <discardStoredPacket+0x96>
        {
            bytesToReceive = remainingLength - totalBytesReceived;
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	69fb      	ldr	r3, [r7, #28]
 800c466:	1ad3      	subs	r3, r2, r3
 800c468:	623b      	str	r3, [r7, #32]
        }

        bytesReceived = recvExact( pContext, bytesToReceive );
 800c46a:	6a39      	ldr	r1, [r7, #32]
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f7ff fe7d 	bl	800c16c <recvExact>
 800c472:	6178      	str	r0, [r7, #20]

        if( bytesReceived != ( int32_t ) bytesToReceive )
 800c474:	6a3b      	ldr	r3, [r7, #32]
 800c476:	697a      	ldr	r2, [r7, #20]
 800c478:	429a      	cmp	r2, r3
 800c47a:	d002      	beq.n	800c482 <discardStoredPacket+0xae>
        {
            LogError( ( "Receive error while discarding packet."
                        "ReceivedBytes=%ld, ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            receiveError = true;
 800c47c:	2301      	movs	r3, #1
 800c47e:	76fb      	strb	r3, [r7, #27]
 800c480:	e003      	b.n	800c48a <discardStoredPacket+0xb6>
        }
        else
        {
            totalBytesReceived += ( uint32_t ) bytesReceived;
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	69fa      	ldr	r2, [r7, #28]
 800c486:	4413      	add	r3, r2
 800c488:	61fb      	str	r3, [r7, #28]
    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800c48a:	69fa      	ldr	r2, [r7, #28]
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	429a      	cmp	r2, r3
 800c490:	d205      	bcs.n	800c49e <discardStoredPacket+0xca>
 800c492:	7efb      	ldrb	r3, [r7, #27]
 800c494:	f083 0301 	eor.w	r3, r3, #1
 800c498:	b2db      	uxtb	r3, r3
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d1db      	bne.n	800c456 <discardStoredPacket+0x82>
        }
    }

    if( totalBytesReceived == remainingLength )
 800c49e:	69fa      	ldr	r2, [r7, #28]
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d102      	bne.n	800c4ac <discardStoredPacket+0xd8>
    {
        LogError( ( "Dumped packet. DumpedBytes=%lu.",
                    ( unsigned long ) totalBytesReceived ) );
        /* Packet dumped, so no data is available. */
        status = MQTTNoDataAvailable;
 800c4a6:	2307      	movs	r3, #7
 800c4a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Clear the buffer */
    ( void ) memset( pContext->networkBuffer.pBuffer,
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6a18      	ldr	r0, [r3, #32]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	2100      	movs	r1, #0
 800c4b8:	f006 fea3 	bl	8013202 <memset>
                     0,
                     pContext->networkBuffer.size );

    /* Reset the index. */
    pContext->index = 0;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	641a      	str	r2, [r3, #64]	; 0x40

    return status;
 800c4c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3728      	adds	r7, #40	; 0x28
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	08016fcc 	.word	0x08016fcc
 800c4d4:	08017b78 	.word	0x08017b78
 800c4d8:	08016ef0 	.word	0x08016ef0
 800c4dc:	08017158 	.word	0x08017158
 800c4e0:	0801716c 	.word	0x0801716c

0800c4e4 <receivePacket>:
/*-----------------------------------------------------------*/

static MQTTStatus_t receivePacket( const MQTTContext_t * pContext,
                                   MQTTPacketInfo_t incomingPacket,
                                   uint32_t remainingTimeMs )
{
 800c4e4:	b084      	sub	sp, #16
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b086      	sub	sp, #24
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
 800c4ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c4f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    MQTTStatus_t status = MQTTSuccess;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	75fb      	strb	r3, [r7, #23]
    int32_t bytesReceived = 0;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	613b      	str	r3, [r7, #16]
    size_t bytesToReceive = 0U;
 800c4fe:	2300      	movs	r3, #0
 800c500:	60fb      	str	r3, [r7, #12]

    assert( pContext != NULL );
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d106      	bne.n	800c516 <receivePacket+0x32>
 800c508:	4b1a      	ldr	r3, [pc, #104]	; (800c574 <receivePacket+0x90>)
 800c50a:	4a1b      	ldr	r2, [pc, #108]	; (800c578 <receivePacket+0x94>)
 800c50c:	f240 418e 	movw	r1, #1166	; 0x48e
 800c510:	481a      	ldr	r0, [pc, #104]	; (800c57c <receivePacket+0x98>)
 800c512:	f006 fceb 	bl	8012eec <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6a1b      	ldr	r3, [r3, #32]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d106      	bne.n	800c52c <receivePacket+0x48>
 800c51e:	4b18      	ldr	r3, [pc, #96]	; (800c580 <receivePacket+0x9c>)
 800c520:	4a15      	ldr	r2, [pc, #84]	; (800c578 <receivePacket+0x94>)
 800c522:	f240 418f 	movw	r1, #1167	; 0x48f
 800c526:	4815      	ldr	r0, [pc, #84]	; (800c57c <receivePacket+0x98>)
 800c528:	f006 fce0 	bl	8012eec <__assert_func>

    if( incomingPacket.remainingLength > pContext->networkBuffer.size )
 800c52c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c532:	429a      	cmp	r2, r3
 800c534:	d908      	bls.n	800c548 <receivePacket+0x64>
        LogError( ( "Incoming packet will be dumped: "
                    "Packet length exceeds network buffer size."
                    "PacketSize=%lu, NetworkBufferSize=%lu.",
                    ( unsigned long ) incomingPacket.remainingLength,
                    ( unsigned long ) pContext->networkBuffer.size ) );
        status = discardPacket( pContext,
 800c536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c538:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c53a:	4619      	mov	r1, r3
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f7ff fec7 	bl	800c2d0 <discardPacket>
 800c542:	4603      	mov	r3, r0
 800c544:	75fb      	strb	r3, [r7, #23]
 800c546:	e00c      	b.n	800c562 <receivePacket+0x7e>
                                incomingPacket.remainingLength,
                                remainingTimeMs );
    }
    else
    {
        bytesToReceive = incomingPacket.remainingLength;
 800c548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c54a:	60fb      	str	r3, [r7, #12]
        bytesReceived = recvExact( pContext, bytesToReceive );
 800c54c:	68f9      	ldr	r1, [r7, #12]
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f7ff fe0c 	bl	800c16c <recvExact>
 800c554:	6138      	str	r0, [r7, #16]

        if( bytesReceived == ( int32_t ) bytesToReceive )
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	693a      	ldr	r2, [r7, #16]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d001      	beq.n	800c562 <receivePacket+0x7e>
        {
            LogError( ( "Packet reception failed. ReceivedBytes=%ld, "
                        "ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            status = MQTTRecvFailed;
 800c55e:	2304      	movs	r3, #4
 800c560:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800c562:	7dfb      	ldrb	r3, [r7, #23]
}
 800c564:	4618      	mov	r0, r3
 800c566:	3718      	adds	r7, #24
 800c568:	46bd      	mov	sp, r7
 800c56a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c56e:	b004      	add	sp, #16
 800c570:	4770      	bx	lr
 800c572:	bf00      	nop
 800c574:	08016fcc 	.word	0x08016fcc
 800c578:	08017b8c 	.word	0x08017b8c
 800c57c:	08016ef0 	.word	0x08016ef0
 800c580:	08017108 	.word	0x08017108

0800c584 <getAckTypeToSend>:

/*-----------------------------------------------------------*/

static uint8_t getAckTypeToSend( MQTTPublishState_t state )
{
 800c584:	b480      	push	{r7}
 800c586:	b085      	sub	sp, #20
 800c588:	af00      	add	r7, sp, #0
 800c58a:	4603      	mov	r3, r0
 800c58c:	71fb      	strb	r3, [r7, #7]
    uint8_t packetTypeByte = 0U;
 800c58e:	2300      	movs	r3, #0
 800c590:	73fb      	strb	r3, [r7, #15]

    switch( state )
 800c592:	79fb      	ldrb	r3, [r7, #7]
 800c594:	3b02      	subs	r3, #2
 800c596:	2b03      	cmp	r3, #3
 800c598:	d816      	bhi.n	800c5c8 <getAckTypeToSend+0x44>
 800c59a:	a201      	add	r2, pc, #4	; (adr r2, 800c5a0 <getAckTypeToSend+0x1c>)
 800c59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5a0:	0800c5b1 	.word	0x0800c5b1
 800c5a4:	0800c5b7 	.word	0x0800c5b7
 800c5a8:	0800c5bd 	.word	0x0800c5bd
 800c5ac:	0800c5c3 	.word	0x0800c5c3
    {
        case MQTTPubAckSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBACK;
 800c5b0:	2340      	movs	r3, #64	; 0x40
 800c5b2:	73fb      	strb	r3, [r7, #15]
            break;
 800c5b4:	e009      	b.n	800c5ca <getAckTypeToSend+0x46>

        case MQTTPubRecSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBREC;
 800c5b6:	2350      	movs	r3, #80	; 0x50
 800c5b8:	73fb      	strb	r3, [r7, #15]
            break;
 800c5ba:	e006      	b.n	800c5ca <getAckTypeToSend+0x46>

        case MQTTPubRelSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBREL;
 800c5bc:	2362      	movs	r3, #98	; 0x62
 800c5be:	73fb      	strb	r3, [r7, #15]
            break;
 800c5c0:	e003      	b.n	800c5ca <getAckTypeToSend+0x46>

        case MQTTPubCompSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBCOMP;
 800c5c2:	2370      	movs	r3, #112	; 0x70
 800c5c4:	73fb      	strb	r3, [r7, #15]
            break;
 800c5c6:	e000      	b.n	800c5ca <getAckTypeToSend+0x46>
        case MQTTPublishDone:
        case MQTTPublishSend:
        case MQTTStateNull:
        default:
            /* Take no action for states that do not require sending an ack. */
            break;
 800c5c8:	bf00      	nop
    }

    return packetTypeByte;
 800c5ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3714      	adds	r7, #20
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr

0800c5d8 <sendPublishAcks>:
/*-----------------------------------------------------------*/

static MQTTStatus_t sendPublishAcks( MQTTContext_t * pContext,
                                     uint16_t packetId,
                                     MQTTPublishState_t publishState )
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b08a      	sub	sp, #40	; 0x28
 800c5dc:	af02      	add	r7, sp, #8
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	807b      	strh	r3, [r7, #2]
 800c5e4:	4613      	mov	r3, r2
 800c5e6:	707b      	strb	r3, [r7, #1]
    MQTTStatus_t status = MQTTSuccess;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	77fb      	strb	r3, [r7, #31]
    MQTTPublishState_t newState = MQTTStateNull;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	757b      	strb	r3, [r7, #21]
    int32_t sendResult = 0;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	61bb      	str	r3, [r7, #24]
    uint8_t packetTypeByte = 0U;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	75fb      	strb	r3, [r7, #23]
    MQTTPubAckType_t packetType;
    MQTTFixedBuffer_t localBuffer;
    uint8_t pubAckPacket[ MQTT_PUBLISH_ACK_PACKET_SIZE ];

    localBuffer.pBuffer = pubAckPacket;
 800c5f8:	f107 0308 	add.w	r3, r7, #8
 800c5fc:	60fb      	str	r3, [r7, #12]
    localBuffer.size = MQTT_PUBLISH_ACK_PACKET_SIZE;
 800c5fe:	2304      	movs	r3, #4
 800c600:	613b      	str	r3, [r7, #16]

    assert( pContext != NULL );
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d106      	bne.n	800c616 <sendPublishAcks+0x3e>
 800c608:	4b21      	ldr	r3, [pc, #132]	; (800c690 <sendPublishAcks+0xb8>)
 800c60a:	4a22      	ldr	r2, [pc, #136]	; (800c694 <sendPublishAcks+0xbc>)
 800c60c:	f240 41ec 	movw	r1, #1260	; 0x4ec
 800c610:	4821      	ldr	r0, [pc, #132]	; (800c698 <sendPublishAcks+0xc0>)
 800c612:	f006 fc6b 	bl	8012eec <__assert_func>

    packetTypeByte = getAckTypeToSend( publishState );
 800c616:	787b      	ldrb	r3, [r7, #1]
 800c618:	4618      	mov	r0, r3
 800c61a:	f7ff ffb3 	bl	800c584 <getAckTypeToSend>
 800c61e:	4603      	mov	r3, r0
 800c620:	75fb      	strb	r3, [r7, #23]

    if( packetTypeByte != 0U )
 800c622:	7dfb      	ldrb	r3, [r7, #23]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d02d      	beq.n	800c684 <sendPublishAcks+0xac>
    {
        packetType = getAckFromPacketType( packetTypeByte );
 800c628:	7dfb      	ldrb	r3, [r7, #23]
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7ff fd6c 	bl	800c108 <getAckFromPacketType>
 800c630:	4603      	mov	r3, r0
 800c632:	75bb      	strb	r3, [r7, #22]

        status = MQTT_SerializeAck( &localBuffer,
 800c634:	887a      	ldrh	r2, [r7, #2]
 800c636:	7df9      	ldrb	r1, [r7, #23]
 800c638:	f107 030c 	add.w	r3, r7, #12
 800c63c:	4618      	mov	r0, r3
 800c63e:	f002 f8f1 	bl	800e824 <MQTT_SerializeAck>
 800c642:	4603      	mov	r3, r0
 800c644:	77fb      	strb	r3, [r7, #31]
                                    packetTypeByte,
                                    packetId );

        if( status == MQTTSuccess )
 800c646:	7ffb      	ldrb	r3, [r7, #31]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d106      	bne.n	800c65a <sendPublishAcks+0x82>
            MQTT_PRE_SEND_HOOK( pContext );

            /* Here, we are not using the vector approach for efficiency. There is just one buffer
             * to be sent which can be achieved with a normal send call. */
            sendResult = sendBuffer( pContext,
                                     localBuffer.pBuffer,
 800c64c:	68fb      	ldr	r3, [r7, #12]
            sendResult = sendBuffer( pContext,
 800c64e:	2204      	movs	r2, #4
 800c650:	4619      	mov	r1, r3
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f7ff fcbc 	bl	800bfd0 <sendBuffer>
 800c658:	61b8      	str	r0, [r7, #24]
                                     MQTT_PUBLISH_ACK_PACKET_SIZE );

            MQTT_POST_SEND_HOOK( pContext );
        }

        if( sendResult == ( int32_t ) MQTT_PUBLISH_ACK_PACKET_SIZE )
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	2b04      	cmp	r3, #4
 800c65e:	d10f      	bne.n	800c680 <sendPublishAcks+0xa8>
        {
            pContext->controlPacketSent = true;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2201      	movs	r2, #1
 800c664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            MQTT_PRE_STATE_UPDATE_HOOK( pContext );

            status = MQTT_UpdateStateAck( pContext,
 800c668:	7dba      	ldrb	r2, [r7, #22]
 800c66a:	8879      	ldrh	r1, [r7, #2]
 800c66c:	f107 0315 	add.w	r3, r7, #21
 800c670:	9300      	str	r3, [sp, #0]
 800c672:	2300      	movs	r3, #0
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f002 ffa1 	bl	800f5bc <MQTT_UpdateStateAck>
 800c67a:	4603      	mov	r3, r0
 800c67c:	77fb      	strb	r3, [r7, #31]
 800c67e:	e001      	b.n	800c684 <sendPublishAcks+0xac>
        {
            LogError( ( "Failed to send ACK packet: PacketType=%02x, SentBytes=%ld, "
                        "PacketSize=%lu.",
                        ( unsigned int ) packetTypeByte, ( long int ) sendResult,
                        MQTT_PUBLISH_ACK_PACKET_SIZE ) );
            status = MQTTSendFailed;
 800c680:	2303      	movs	r3, #3
 800c682:	77fb      	strb	r3, [r7, #31]
        }
    }

    return status;
 800c684:	7ffb      	ldrb	r3, [r7, #31]
}
 800c686:	4618      	mov	r0, r3
 800c688:	3720      	adds	r7, #32
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
 800c68e:	bf00      	nop
 800c690:	08016fcc 	.word	0x08016fcc
 800c694:	08017b9c 	.word	0x08017b9c
 800c698:	08016ef0 	.word	0x08016ef0

0800c69c <handleKeepAlive>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleKeepAlive( MQTTContext_t * pContext )
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b086      	sub	sp, #24
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	75fb      	strb	r3, [r7, #23]
    uint32_t now = 0U;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	60fb      	str	r3, [r7, #12]
    uint32_t packetTxTimeoutMs = 0U;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	613b      	str	r3, [r7, #16]

    assert( pContext != NULL );
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d106      	bne.n	800c6c4 <handleKeepAlive+0x28>
 800c6b6:	4b33      	ldr	r3, [pc, #204]	; (800c784 <handleKeepAlive+0xe8>)
 800c6b8:	4a33      	ldr	r2, [pc, #204]	; (800c788 <handleKeepAlive+0xec>)
 800c6ba:	f240 512e 	movw	r1, #1326	; 0x52e
 800c6be:	4833      	ldr	r0, [pc, #204]	; (800c78c <handleKeepAlive+0xf0>)
 800c6c0:	f006 fc14 	bl	8012eec <__assert_func>
    assert( pContext->getTime != NULL );
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d106      	bne.n	800c6da <handleKeepAlive+0x3e>
 800c6cc:	4b30      	ldr	r3, [pc, #192]	; (800c790 <handleKeepAlive+0xf4>)
 800c6ce:	4a2e      	ldr	r2, [pc, #184]	; (800c788 <handleKeepAlive+0xec>)
 800c6d0:	f240 512f 	movw	r1, #1327	; 0x52f
 800c6d4:	482d      	ldr	r0, [pc, #180]	; (800c78c <handleKeepAlive+0xf0>)
 800c6d6:	f006 fc09 	bl	8012eec <__assert_func>

    now = pContext->getTime();
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6de:	4798      	blx	r3
 800c6e0:	60f8      	str	r0, [r7, #12]

    packetTxTimeoutMs = 1000U * ( uint32_t ) pContext->keepAliveIntervalSec;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c6ee:	fb02 f303 	mul.w	r3, r2, r3
 800c6f2:	613b      	str	r3, [r7, #16]

    if( PACKET_TX_TIMEOUT_MS < packetTxTimeoutMs )
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	f247 5230 	movw	r2, #30000	; 0x7530
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d902      	bls.n	800c704 <handleKeepAlive+0x68>
    {
        packetTxTimeoutMs = PACKET_TX_TIMEOUT_MS;
 800c6fe:	f247 5330 	movw	r3, #30000	; 0x7530
 800c702:	613b      	str	r3, [r7, #16]
    }

    /* If keep alive interval is 0, it is disabled. */
    if( pContext->waitingForPingResp == true )
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d00d      	beq.n	800c72a <handleKeepAlive+0x8e>
    {
        /* Has time expired? */
        if( calculateElapsedTime( now, pContext->pingReqSendTimeMs ) >
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c712:	4619      	mov	r1, r3
 800c714:	68f8      	ldr	r0, [r7, #12]
 800c716:	f7ff fce9 	bl	800c0ec <calculateElapsedTime>
 800c71a:	4603      	mov	r3, r0
 800c71c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c720:	4293      	cmp	r3, r2
 800c722:	d929      	bls.n	800c778 <handleKeepAlive+0xdc>
            MQTT_PINGRESP_TIMEOUT_MS )
        {
            status = MQTTKeepAliveTimeout;
 800c724:	230a      	movs	r3, #10
 800c726:	75fb      	strb	r3, [r7, #23]
 800c728:	e026      	b.n	800c778 <handleKeepAlive+0xdc>
        }
    }
    else
    {
        if( ( packetTxTimeoutMs != 0U ) && ( calculateElapsedTime( now, pContext->lastPacketTxTime ) >= packetTxTimeoutMs ) )
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d00f      	beq.n	800c750 <handleKeepAlive+0xb4>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c734:	4619      	mov	r1, r3
 800c736:	68f8      	ldr	r0, [r7, #12]
 800c738:	f7ff fcd8 	bl	800c0ec <calculateElapsedTime>
 800c73c:	4602      	mov	r2, r0
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	4293      	cmp	r3, r2
 800c742:	d805      	bhi.n	800c750 <handleKeepAlive+0xb4>
        {
            status = MQTT_Ping( pContext );
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f001 f8c7 	bl	800d8d8 <MQTT_Ping>
 800c74a:	4603      	mov	r3, r0
 800c74c:	75fb      	strb	r3, [r7, #23]
 800c74e:	e013      	b.n	800c778 <handleKeepAlive+0xdc>
        }
        else
        {
            const uint32_t timeElapsed = calculateElapsedTime( now, pContext->lastPacketRxTime );
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c754:	4619      	mov	r1, r3
 800c756:	68f8      	ldr	r0, [r7, #12]
 800c758:	f7ff fcc8 	bl	800c0ec <calculateElapsedTime>
 800c75c:	60b8      	str	r0, [r7, #8]

            if( ( timeElapsed != 0U ) && ( timeElapsed >= PACKET_RX_TIMEOUT_MS ) )
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d009      	beq.n	800c778 <handleKeepAlive+0xdc>
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	f247 522f 	movw	r2, #29999	; 0x752f
 800c76a:	4293      	cmp	r3, r2
 800c76c:	d904      	bls.n	800c778 <handleKeepAlive+0xdc>
            {
                status = MQTT_Ping( pContext );
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f001 f8b2 	bl	800d8d8 <MQTT_Ping>
 800c774:	4603      	mov	r3, r0
 800c776:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return status;
 800c778:	7dfb      	ldrb	r3, [r7, #23]
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3718      	adds	r7, #24
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
 800c782:	bf00      	nop
 800c784:	08016fcc 	.word	0x08016fcc
 800c788:	08017bac 	.word	0x08017bac
 800c78c:	08016ef0 	.word	0x08016ef0
 800c790:	08016ff0 	.word	0x08016ff0

0800c794 <handleIncomingPublish>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleIncomingPublish( MQTTContext_t * pContext,
                                           MQTTPacketInfo_t * pIncomingPacket )
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b08e      	sub	sp, #56	; 0x38
 800c798:	af02      	add	r7, sp, #8
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTBadParameter;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    MQTTPublishState_t publishRecordState = MQTTStateNull;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t packetIdentifier = 0U;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	857b      	strh	r3, [r7, #42]	; 0x2a
    MQTTPublishInfo_t publishInfo;
    MQTTDeserializedInfo_t deserializedInfo;
    bool duplicatePublish = false;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    assert( pContext != NULL );
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d106      	bne.n	800c7c8 <handleIncomingPublish+0x34>
 800c7ba:	4b43      	ldr	r3, [pc, #268]	; (800c8c8 <handleIncomingPublish+0x134>)
 800c7bc:	4a43      	ldr	r2, [pc, #268]	; (800c8cc <handleIncomingPublish+0x138>)
 800c7be:	f240 5164 	movw	r1, #1380	; 0x564
 800c7c2:	4843      	ldr	r0, [pc, #268]	; (800c8d0 <handleIncomingPublish+0x13c>)
 800c7c4:	f006 fb92 	bl	8012eec <__assert_func>
    assert( pIncomingPacket != NULL );
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d106      	bne.n	800c7dc <handleIncomingPublish+0x48>
 800c7ce:	4b41      	ldr	r3, [pc, #260]	; (800c8d4 <handleIncomingPublish+0x140>)
 800c7d0:	4a3e      	ldr	r2, [pc, #248]	; (800c8cc <handleIncomingPublish+0x138>)
 800c7d2:	f240 5165 	movw	r1, #1381	; 0x565
 800c7d6:	483e      	ldr	r0, [pc, #248]	; (800c8d0 <handleIncomingPublish+0x13c>)
 800c7d8:	f006 fb88 	bl	8012eec <__assert_func>
    assert( pContext->appCallback != NULL );
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d106      	bne.n	800c7f2 <handleIncomingPublish+0x5e>
 800c7e4:	4b3c      	ldr	r3, [pc, #240]	; (800c8d8 <handleIncomingPublish+0x144>)
 800c7e6:	4a39      	ldr	r2, [pc, #228]	; (800c8cc <handleIncomingPublish+0x138>)
 800c7e8:	f240 5166 	movw	r1, #1382	; 0x566
 800c7ec:	4838      	ldr	r0, [pc, #224]	; (800c8d0 <handleIncomingPublish+0x13c>)
 800c7ee:	f006 fb7d 	bl	8012eec <__assert_func>

    status = MQTT_DeserializePublish( pIncomingPacket, &packetIdentifier, &publishInfo );
 800c7f2:	f107 0214 	add.w	r2, r7, #20
 800c7f6:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800c7fa:	4619      	mov	r1, r3
 800c7fc:	6838      	ldr	r0, [r7, #0]
 800c7fe:	f002 f8a8 	bl	800e952 <MQTT_DeserializePublish>
 800c802:	4603      	mov	r3, r0
 800c804:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    LogInfo( ( "De-serialized incoming PUBLISH packet: DeserializerResult=%s.",
               MQTT_Status_strerror( status ) ) );

    if( ( status == MQTTSuccess ) &&
 800c808:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d109      	bne.n	800c824 <handleIncomingPublish+0x90>
        ( pContext->incomingPublishRecords == NULL ) &&
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	685b      	ldr	r3, [r3, #4]
    if( ( status == MQTTSuccess ) &&
 800c814:	2b00      	cmp	r3, #0
 800c816:	d105      	bne.n	800c824 <handleIncomingPublish+0x90>
        ( publishInfo.qos > MQTTQoS0 ) )
 800c818:	7d3b      	ldrb	r3, [r7, #20]
        ( pContext->incomingPublishRecords == NULL ) &&
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d002      	beq.n	800c824 <handleIncomingPublish+0x90>
    {
        LogError( ( "Incoming publish has QoS > MQTTQoS0 but incoming "
                    "publish records have not been initialized. Dropping the "
                    "incoming publish. Please call MQTT_InitStatefulQoS to enable "
                    "use of QoS1 and QoS2 publishes." ) );
        status = MQTTRecvFailed;
 800c81e:	2304      	movs	r3, #4
 800c820:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800c824:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d122      	bne.n	800c872 <handleIncomingPublish+0xde>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        status = MQTT_UpdateStatePublish( pContext,
 800c82c:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800c82e:	7d3a      	ldrb	r2, [r7, #20]
 800c830:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800c834:	9300      	str	r3, [sp, #0]
 800c836:	4613      	mov	r3, r2
 800c838:	2201      	movs	r2, #1
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f002 fe4b 	bl	800f4d6 <MQTT_UpdateStatePublish>
 800c840:	4603      	mov	r3, r0
 800c842:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                          publishInfo.qos,
                                          &publishRecordState );

        MQTT_POST_STATE_UPDATE_HOOK( pContext );

        if( status == MQTTSuccess )
 800c846:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d011      	beq.n	800c872 <handleIncomingPublish+0xde>
         *       sending out a duplicate publish with dup flag set, when a
         *       session is reestablished. It can result in a collision in
         *       state engine. This will be handled by ignoring the
         *       #MQTTStateCollision status from the state engine. The publish
         *       data is not passed to the application. */
        else if( status == MQTTStateCollision )
 800c84e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c852:	2b09      	cmp	r3, #9
 800c854:	d10d      	bne.n	800c872 <handleIncomingPublish+0xde>
        {
            status = MQTTSuccess;
 800c856:	2300      	movs	r3, #0
 800c858:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            duplicatePublish = true;
 800c85c:	2301      	movs	r3, #1
 800c85e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

            /* Calculate the state for the ack packet that needs to be sent out
             * for the duplicate incoming publish. */
            publishRecordState = MQTT_CalculateStatePublish( MQTT_RECEIVE,
 800c862:	7d3b      	ldrb	r3, [r7, #20]
 800c864:	4619      	mov	r1, r3
 800c866:	2001      	movs	r0, #1
 800c868:	f002 fe06 	bl	800f478 <MQTT_CalculateStatePublish>
 800c86c:	4603      	mov	r3, r0
 800c86e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                        ( unsigned short ) packetIdentifier,
                        MQTT_Status_strerror( status ) ) );
        }
    }

    if( status == MQTTSuccess )
 800c872:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c876:	2b00      	cmp	r3, #0
 800c878:	d11f      	bne.n	800c8ba <handleIncomingPublish+0x126>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800c87a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c87c:	813b      	strh	r3, [r7, #8]
        deserializedInfo.pPublishInfo = &publishInfo;
 800c87e:	f107 0314 	add.w	r3, r7, #20
 800c882:	60fb      	str	r3, [r7, #12]
        deserializedInfo.deserializationResult = status;
 800c884:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c888:	743b      	strb	r3, [r7, #16]

        /* Invoke application callback to hand the buffer over to application
         * before sending acks.
         * Application callback will be invoked for all publishes, except for
         * duplicate incoming publishes. */
        if( duplicatePublish == false )
 800c88a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c88e:	f083 0301 	eor.w	r3, r3, #1
 800c892:	b2db      	uxtb	r3, r3
 800c894:	2b00      	cmp	r3, #0
 800c896:	d006      	beq.n	800c8a6 <handleIncomingPublish+0x112>
        {
            pContext->appCallback( pContext,
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c89c:	f107 0208 	add.w	r2, r7, #8
 800c8a0:	6839      	ldr	r1, [r7, #0]
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	4798      	blx	r3
                                   pIncomingPacket,
                                   &deserializedInfo );
        }

        /* Send PUBACK or PUBREC if necessary. */
        status = sendPublishAcks( pContext,
 800c8a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c8a8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f7ff fe92 	bl	800c5d8 <sendPublishAcks>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                  packetIdentifier,
                                  publishRecordState );
    }

    return status;
 800c8ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3730      	adds	r7, #48	; 0x30
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	08016fcc 	.word	0x08016fcc
 800c8cc:	08017bbc 	.word	0x08017bbc
 800c8d0:	08016ef0 	.word	0x08016ef0
 800c8d4:	0801719c 	.word	0x0801719c
 800c8d8:	080171b4 	.word	0x080171b4

0800c8dc <handlePublishAcks>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handlePublishAcks( MQTTContext_t * pContext,
                                       MQTTPacketInfo_t * pIncomingPacket )
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b08a      	sub	sp, #40	; 0x28
 800c8e0:	af02      	add	r7, sp, #8
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTBadResponse;
 800c8e6:	2305      	movs	r3, #5
 800c8e8:	77fb      	strb	r3, [r7, #31]
    MQTTPublishState_t publishRecordState = MQTTStateNull;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	75bb      	strb	r3, [r7, #22]
    uint16_t packetIdentifier;
    MQTTPubAckType_t ackType;
    MQTTEventCallback_t appCallback;
    MQTTDeserializedInfo_t deserializedInfo;

    assert( pContext != NULL );
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d106      	bne.n	800c902 <handlePublishAcks+0x26>
 800c8f4:	4b2c      	ldr	r3, [pc, #176]	; (800c9a8 <handlePublishAcks+0xcc>)
 800c8f6:	4a2d      	ldr	r2, [pc, #180]	; (800c9ac <handlePublishAcks+0xd0>)
 800c8f8:	f240 51e5 	movw	r1, #1509	; 0x5e5
 800c8fc:	482c      	ldr	r0, [pc, #176]	; (800c9b0 <handlePublishAcks+0xd4>)
 800c8fe:	f006 faf5 	bl	8012eec <__assert_func>
    assert( pIncomingPacket != NULL );
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d106      	bne.n	800c916 <handlePublishAcks+0x3a>
 800c908:	4b2a      	ldr	r3, [pc, #168]	; (800c9b4 <handlePublishAcks+0xd8>)
 800c90a:	4a28      	ldr	r2, [pc, #160]	; (800c9ac <handlePublishAcks+0xd0>)
 800c90c:	f240 51e6 	movw	r1, #1510	; 0x5e6
 800c910:	4827      	ldr	r0, [pc, #156]	; (800c9b0 <handlePublishAcks+0xd4>)
 800c912:	f006 faeb 	bl	8012eec <__assert_func>
    assert( pContext->appCallback != NULL );
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d106      	bne.n	800c92c <handlePublishAcks+0x50>
 800c91e:	4b26      	ldr	r3, [pc, #152]	; (800c9b8 <handlePublishAcks+0xdc>)
 800c920:	4a22      	ldr	r2, [pc, #136]	; (800c9ac <handlePublishAcks+0xd0>)
 800c922:	f240 51e7 	movw	r1, #1511	; 0x5e7
 800c926:	4822      	ldr	r0, [pc, #136]	; (800c9b0 <handlePublishAcks+0xd4>)
 800c928:	f006 fae0 	bl	8012eec <__assert_func>

    appCallback = pContext->appCallback;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c930:	61bb      	str	r3, [r7, #24]

    ackType = getAckFromPacketType( pIncomingPacket->type );
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	4618      	mov	r0, r3
 800c938:	f7ff fbe6 	bl	800c108 <getAckFromPacketType>
 800c93c:	4603      	mov	r3, r0
 800c93e:	75fb      	strb	r3, [r7, #23]
    status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800c940:	f107 0314 	add.w	r3, r7, #20
 800c944:	2200      	movs	r2, #0
 800c946:	4619      	mov	r1, r3
 800c948:	6838      	ldr	r0, [r7, #0]
 800c94a:	f002 f832 	bl	800e9b2 <MQTT_DeserializeAck>
 800c94e:	4603      	mov	r3, r0
 800c950:	77fb      	strb	r3, [r7, #31]
    LogInfo( ( "Ack packet deserialized with result: %s.",
               MQTT_Status_strerror( status ) ) );

    if( status == MQTTSuccess )
 800c952:	7ffb      	ldrb	r3, [r7, #31]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d10a      	bne.n	800c96e <handlePublishAcks+0x92>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        status = MQTT_UpdateStateAck( pContext,
 800c958:	8ab9      	ldrh	r1, [r7, #20]
 800c95a:	7dfa      	ldrb	r2, [r7, #23]
 800c95c:	f107 0316 	add.w	r3, r7, #22
 800c960:	9300      	str	r3, [sp, #0]
 800c962:	2301      	movs	r3, #1
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f002 fe29 	bl	800f5bc <MQTT_UpdateStateAck>
 800c96a:	4603      	mov	r3, r0
 800c96c:	77fb      	strb	r3, [r7, #31]
                        ( unsigned short ) packetIdentifier,
                        MQTT_Status_strerror( status ) ) );
        }
    }

    if( status == MQTTSuccess )
 800c96e:	7ffb      	ldrb	r3, [r7, #31]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d113      	bne.n	800c99c <handlePublishAcks+0xc0>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800c974:	8abb      	ldrh	r3, [r7, #20]
 800c976:	813b      	strh	r3, [r7, #8]
        deserializedInfo.deserializationResult = status;
 800c978:	7ffb      	ldrb	r3, [r7, #31]
 800c97a:	743b      	strb	r3, [r7, #16]
        deserializedInfo.pPublishInfo = NULL;
 800c97c:	2300      	movs	r3, #0
 800c97e:	60fb      	str	r3, [r7, #12]

        /* Invoke application callback to hand the buffer over to application
         * before sending acks. */
        appCallback( pContext, pIncomingPacket, &deserializedInfo );
 800c980:	f107 0208 	add.w	r2, r7, #8
 800c984:	69bb      	ldr	r3, [r7, #24]
 800c986:	6839      	ldr	r1, [r7, #0]
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	4798      	blx	r3

        /* Send PUBREL or PUBCOMP if necessary. */
        status = sendPublishAcks( pContext,
 800c98c:	8abb      	ldrh	r3, [r7, #20]
 800c98e:	7dba      	ldrb	r2, [r7, #22]
 800c990:	4619      	mov	r1, r3
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f7ff fe20 	bl	800c5d8 <sendPublishAcks>
 800c998:	4603      	mov	r3, r0
 800c99a:	77fb      	strb	r3, [r7, #31]
                                  packetIdentifier,
                                  publishRecordState );
    }

    return status;
 800c99c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3720      	adds	r7, #32
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
 800c9a6:	bf00      	nop
 800c9a8:	08016fcc 	.word	0x08016fcc
 800c9ac:	08017bd4 	.word	0x08017bd4
 800c9b0:	08016ef0 	.word	0x08016ef0
 800c9b4:	0801719c 	.word	0x0801719c
 800c9b8:	080171b4 	.word	0x080171b4

0800c9bc <handleIncomingAck>:
/*-----------------------------------------------------------*/

static MQTTStatus_t handleIncomingAck( MQTTContext_t * pContext,
                                       MQTTPacketInfo_t * pIncomingPacket,
                                       bool manageKeepAlive )
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b08a      	sub	sp, #40	; 0x28
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	60f8      	str	r0, [r7, #12]
 800c9c4:	60b9      	str	r1, [r7, #8]
 800c9c6:	4613      	mov	r3, r2
 800c9c8:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTBadResponse;
 800c9ca:	2305      	movs	r3, #5
 800c9cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint16_t packetIdentifier = MQTT_PACKET_ID_INVALID;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	83fb      	strh	r3, [r7, #30]
    /* We should always invoke the app callback unless we receive a PINGRESP
     * and are managing keep alive, or if we receive an unknown packet. We
     * initialize this to false since the callback must be invoked before
     * sending any PUBREL or PUBCOMP. However, for other cases, we invoke it
     * at the end to reduce the complexity of this function. */
    bool invokeAppCallback = false;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    MQTTEventCallback_t appCallback = NULL;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	623b      	str	r3, [r7, #32]

    assert( pContext != NULL );
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d106      	bne.n	800c9f2 <handleIncomingAck+0x36>
 800c9e4:	4b54      	ldr	r3, [pc, #336]	; (800cb38 <handleIncomingAck+0x17c>)
 800c9e6:	4a55      	ldr	r2, [pc, #340]	; (800cb3c <handleIncomingAck+0x180>)
 800c9e8:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800c9ec:	4854      	ldr	r0, [pc, #336]	; (800cb40 <handleIncomingAck+0x184>)
 800c9ee:	f006 fa7d 	bl	8012eec <__assert_func>
    assert( pIncomingPacket != NULL );
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d106      	bne.n	800ca06 <handleIncomingAck+0x4a>
 800c9f8:	4b52      	ldr	r3, [pc, #328]	; (800cb44 <handleIncomingAck+0x188>)
 800c9fa:	4a50      	ldr	r2, [pc, #320]	; (800cb3c <handleIncomingAck+0x180>)
 800c9fc:	f240 6131 	movw	r1, #1585	; 0x631
 800ca00:	484f      	ldr	r0, [pc, #316]	; (800cb40 <handleIncomingAck+0x184>)
 800ca02:	f006 fa73 	bl	8012eec <__assert_func>
    assert( pContext->appCallback != NULL );
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d106      	bne.n	800ca1c <handleIncomingAck+0x60>
 800ca0e:	4b4e      	ldr	r3, [pc, #312]	; (800cb48 <handleIncomingAck+0x18c>)
 800ca10:	4a4a      	ldr	r2, [pc, #296]	; (800cb3c <handleIncomingAck+0x180>)
 800ca12:	f240 6132 	movw	r1, #1586	; 0x632
 800ca16:	484a      	ldr	r0, [pc, #296]	; (800cb40 <handleIncomingAck+0x184>)
 800ca18:	f006 fa68 	bl	8012eec <__assert_func>

    appCallback = pContext->appCallback;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca20:	623b      	str	r3, [r7, #32]

    LogDebug( ( "Received packet of type %02x.",
                ( unsigned int ) pIncomingPacket->type ) );

    switch( pIncomingPacket->type )
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	2bd0      	cmp	r3, #208	; 0xd0
 800ca28:	d01d      	beq.n	800ca66 <handleIncomingAck+0xaa>
 800ca2a:	2bd0      	cmp	r3, #208	; 0xd0
 800ca2c:	dc64      	bgt.n	800caf8 <handleIncomingAck+0x13c>
 800ca2e:	2bb0      	cmp	r3, #176	; 0xb0
 800ca30:	d044      	beq.n	800cabc <handleIncomingAck+0x100>
 800ca32:	2bb0      	cmp	r3, #176	; 0xb0
 800ca34:	dc60      	bgt.n	800caf8 <handleIncomingAck+0x13c>
 800ca36:	2b90      	cmp	r3, #144	; 0x90
 800ca38:	d040      	beq.n	800cabc <handleIncomingAck+0x100>
 800ca3a:	2b90      	cmp	r3, #144	; 0x90
 800ca3c:	dc5c      	bgt.n	800caf8 <handleIncomingAck+0x13c>
 800ca3e:	2b70      	cmp	r3, #112	; 0x70
 800ca40:	d009      	beq.n	800ca56 <handleIncomingAck+0x9a>
 800ca42:	2b70      	cmp	r3, #112	; 0x70
 800ca44:	dc58      	bgt.n	800caf8 <handleIncomingAck+0x13c>
 800ca46:	2b62      	cmp	r3, #98	; 0x62
 800ca48:	d005      	beq.n	800ca56 <handleIncomingAck+0x9a>
 800ca4a:	2b62      	cmp	r3, #98	; 0x62
 800ca4c:	dc54      	bgt.n	800caf8 <handleIncomingAck+0x13c>
 800ca4e:	2b40      	cmp	r3, #64	; 0x40
 800ca50:	d001      	beq.n	800ca56 <handleIncomingAck+0x9a>
 800ca52:	2b50      	cmp	r3, #80	; 0x50
 800ca54:	d150      	bne.n	800caf8 <handleIncomingAck+0x13c>
        case MQTT_PACKET_TYPE_PUBREC:
        case MQTT_PACKET_TYPE_PUBREL:
        case MQTT_PACKET_TYPE_PUBCOMP:

            /* Handle all the publish acks. The app callback is invoked here. */
            status = handlePublishAcks( pContext, pIncomingPacket );
 800ca56:	68b9      	ldr	r1, [r7, #8]
 800ca58:	68f8      	ldr	r0, [r7, #12]
 800ca5a:	f7ff ff3f 	bl	800c8dc <handlePublishAcks>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            break;
 800ca64:	e04d      	b.n	800cb02 <handleIncomingAck+0x146>

        case MQTT_PACKET_TYPE_PINGRESP:
            status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800ca66:	f107 031e 	add.w	r3, r7, #30
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	68b8      	ldr	r0, [r7, #8]
 800ca70:	f001 ff9f 	bl	800e9b2 <MQTT_DeserializeAck>
 800ca74:	4603      	mov	r3, r0
 800ca76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            invokeAppCallback = ( status == MQTTSuccess ) && !manageKeepAlive;
 800ca7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d107      	bne.n	800ca92 <handleIncomingAck+0xd6>
 800ca82:	79fb      	ldrb	r3, [r7, #7]
 800ca84:	f083 0301 	eor.w	r3, r3, #1
 800ca88:	b2db      	uxtb	r3, r3
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d001      	beq.n	800ca92 <handleIncomingAck+0xd6>
 800ca8e:	2301      	movs	r3, #1
 800ca90:	e000      	b.n	800ca94 <handleIncomingAck+0xd8>
 800ca92:	2300      	movs	r3, #0
 800ca94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ca98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca9c:	f003 0301 	and.w	r3, r3, #1
 800caa0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

            if( ( status == MQTTSuccess ) && ( manageKeepAlive == true ) )
 800caa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d129      	bne.n	800cb00 <handleIncomingAck+0x144>
 800caac:	79fb      	ldrb	r3, [r7, #7]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d026      	beq.n	800cb00 <handleIncomingAck+0x144>
            {
                pContext->waitingForPingResp = false;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2200      	movs	r2, #0
 800cab6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            }

            break;
 800caba:	e021      	b.n	800cb00 <handleIncomingAck+0x144>

        case MQTT_PACKET_TYPE_SUBACK:
        case MQTT_PACKET_TYPE_UNSUBACK:
            /* Deserialize and give these to the app provided callback. */
            status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800cabc:	f107 031e 	add.w	r3, r7, #30
 800cac0:	2200      	movs	r2, #0
 800cac2:	4619      	mov	r1, r3
 800cac4:	68b8      	ldr	r0, [r7, #8]
 800cac6:	f001 ff74 	bl	800e9b2 <MQTT_DeserializeAck>
 800caca:	4603      	mov	r3, r0
 800cacc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            invokeAppCallback = ( status == MQTTSuccess ) || ( status == MQTTServerRefused );
 800cad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d003      	beq.n	800cae0 <handleIncomingAck+0x124>
 800cad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cadc:	2b06      	cmp	r3, #6
 800cade:	d101      	bne.n	800cae4 <handleIncomingAck+0x128>
 800cae0:	2301      	movs	r3, #1
 800cae2:	e000      	b.n	800cae6 <handleIncomingAck+0x12a>
 800cae4:	2300      	movs	r3, #0
 800cae6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800caea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800caee:	f003 0301 	and.w	r3, r3, #1
 800caf2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            break;
 800caf6:	e004      	b.n	800cb02 <handleIncomingAck+0x146>

        default:
            /* Bad response from the server. */
            LogError( ( "Unexpected packet type from server: PacketType=%02x.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800caf8:	2305      	movs	r3, #5
 800cafa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800cafe:	e000      	b.n	800cb02 <handleIncomingAck+0x146>
            break;
 800cb00:	bf00      	nop
    }

    if( invokeAppCallback == true )
 800cb02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d00f      	beq.n	800cb2a <handleIncomingAck+0x16e>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800cb0a:	8bfb      	ldrh	r3, [r7, #30]
 800cb0c:	823b      	strh	r3, [r7, #16]
        deserializedInfo.deserializationResult = status;
 800cb0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb12:	763b      	strb	r3, [r7, #24]
        deserializedInfo.pPublishInfo = NULL;
 800cb14:	2300      	movs	r3, #0
 800cb16:	617b      	str	r3, [r7, #20]
        appCallback( pContext, pIncomingPacket, &deserializedInfo );
 800cb18:	f107 0210 	add.w	r2, r7, #16
 800cb1c:	6a3b      	ldr	r3, [r7, #32]
 800cb1e:	68b9      	ldr	r1, [r7, #8]
 800cb20:	68f8      	ldr	r0, [r7, #12]
 800cb22:	4798      	blx	r3
        /* In case a SUBACK indicated refusal, reset the status to continue the loop. */
        status = MQTTSuccess;
 800cb24:	2300      	movs	r3, #0
 800cb26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return status;
 800cb2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3728      	adds	r7, #40	; 0x28
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop
 800cb38:	08016fcc 	.word	0x08016fcc
 800cb3c:	08017be8 	.word	0x08017be8
 800cb40:	08016ef0 	.word	0x08016ef0
 800cb44:	0801719c 	.word	0x0801719c
 800cb48:	080171b4 	.word	0x080171b4

0800cb4c <receiveSingleIteration>:
/*-----------------------------------------------------------*/

static MQTTStatus_t receiveSingleIteration( MQTTContext_t * pContext,
                                            bool manageKeepAlive )
{
 800cb4c:	b590      	push	{r4, r7, lr}
 800cb4e:	b08b      	sub	sp, #44	; 0x2c
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	460b      	mov	r3, r1
 800cb56:	70fb      	strb	r3, [r7, #3]
    MQTTStatus_t status = MQTTSuccess;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MQTTPacketInfo_t incomingPacket = { 0 };
 800cb5e:	f107 0308 	add.w	r3, r7, #8
 800cb62:	2200      	movs	r2, #0
 800cb64:	601a      	str	r2, [r3, #0]
 800cb66:	605a      	str	r2, [r3, #4]
 800cb68:	609a      	str	r2, [r3, #8]
 800cb6a:	60da      	str	r2, [r3, #12]
    int32_t recvBytes;
    size_t totalMQTTPacketLength = 0;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	623b      	str	r3, [r7, #32]

    assert( pContext != NULL );
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d106      	bne.n	800cb84 <receiveSingleIteration+0x38>
 800cb76:	4b67      	ldr	r3, [pc, #412]	; (800cd14 <receiveSingleIteration+0x1c8>)
 800cb78:	4a67      	ldr	r2, [pc, #412]	; (800cd18 <receiveSingleIteration+0x1cc>)
 800cb7a:	f240 6176 	movw	r1, #1654	; 0x676
 800cb7e:	4867      	ldr	r0, [pc, #412]	; (800cd1c <receiveSingleIteration+0x1d0>)
 800cb80:	f006 f9b4 	bl	8012eec <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6a1b      	ldr	r3, [r3, #32]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d106      	bne.n	800cb9a <receiveSingleIteration+0x4e>
 800cb8c:	4b64      	ldr	r3, [pc, #400]	; (800cd20 <receiveSingleIteration+0x1d4>)
 800cb8e:	4a62      	ldr	r2, [pc, #392]	; (800cd18 <receiveSingleIteration+0x1cc>)
 800cb90:	f240 6177 	movw	r1, #1655	; 0x677
 800cb94:	4861      	ldr	r0, [pc, #388]	; (800cd1c <receiveSingleIteration+0x1d0>)
 800cb96:	f006 f9a9 	bl	8012eec <__assert_func>

    /* Read as many bytes as possible into the network buffer. */
    recvBytes = pContext->transportInterface.recv( pContext->transportInterface.pNetworkContext,
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	69d0      	ldr	r0, [r2, #28]
                                                   &( pContext->networkBuffer.pBuffer[ pContext->index ] ),
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	6a11      	ldr	r1, [r2, #32]
 800cba6:	687a      	ldr	r2, [r7, #4]
 800cba8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800cbaa:	188c      	adds	r4, r1, r2
                                                   pContext->networkBuffer.size - pContext->index );
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	6c12      	ldr	r2, [r2, #64]	; 0x40
    recvBytes = pContext->transportInterface.recv( pContext->transportInterface.pNetworkContext,
 800cbb4:	1a8a      	subs	r2, r1, r2
 800cbb6:	4621      	mov	r1, r4
 800cbb8:	4798      	blx	r3
 800cbba:	61f8      	str	r0, [r7, #28]

    if( recvBytes < 0 )
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	da03      	bge.n	800cbca <receiveSingleIteration+0x7e>
    {
        /* The receive function has failed. Bubble up the error up to the user. */
        status = MQTTRecvFailed;
 800cbc2:	2304      	movs	r3, #4
 800cbc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cbc8:	e020      	b.n	800cc0c <receiveSingleIteration+0xc0>
    }
    else if( ( recvBytes == 0 ) && ( pContext->index == 0U ) )
 800cbca:	69fb      	ldr	r3, [r7, #28]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d107      	bne.n	800cbe0 <receiveSingleIteration+0x94>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d103      	bne.n	800cbe0 <receiveSingleIteration+0x94>
    {
        /* No more bytes available since the last read and neither is anything in
         * the buffer. */
        status = MQTTNoDataAvailable;
 800cbd8:	2307      	movs	r3, #7
 800cbda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cbde:	e015      	b.n	800cc0c <receiveSingleIteration+0xc0>
    /* Either something was received, or there is still data to be processed in the
     * buffer, or both. */
    else
    {
        /* Update the number of bytes in the MQTT fixed buffer. */
        pContext->index += ( size_t ) recvBytes;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cbe4:	69fb      	ldr	r3, [r7, #28]
 800cbe6:	441a      	add	r2, r3
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	641a      	str	r2, [r3, #64]	; 0x40

        status = MQTT_ProcessIncomingPacketTypeAndLength( pContext->networkBuffer.pBuffer,
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6a18      	ldr	r0, [r3, #32]
                                                          &pContext->index,
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	3340      	adds	r3, #64	; 0x40
        status = MQTT_ProcessIncomingPacketTypeAndLength( pContext->networkBuffer.pBuffer,
 800cbf4:	f107 0208 	add.w	r2, r7, #8
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	f001 ff93 	bl	800eb24 <MQTT_ProcessIncomingPacketTypeAndLength>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                          &incomingPacket );

        totalMQTTPacketLength = incomingPacket.remainingLength + incomingPacket.headerLength;
 800cc04:	693a      	ldr	r2, [r7, #16]
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	4413      	add	r3, r2
 800cc0a:	623b      	str	r3, [r7, #32]
    }

    /* No data was received, check for keep alive timeout. */
    if( recvBytes == 0 )
 800cc0c:	69fb      	ldr	r3, [r7, #28]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d112      	bne.n	800cc38 <receiveSingleIteration+0xec>
    {
        if( manageKeepAlive == true )
 800cc12:	78fb      	ldrb	r3, [r7, #3]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d00f      	beq.n	800cc38 <receiveSingleIteration+0xec>
        {
            /* Keep the copy of the status to be reset later. */
            MQTTStatus_t statusCopy = status;
 800cc18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc1c:	76fb      	strb	r3, [r7, #27]

            /* Assign status so an error can be bubbled up to application,
             * but reset it on success. */
            status = handleKeepAlive( pContext );
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f7ff fd3c 	bl	800c69c <handleKeepAlive>
 800cc24:	4603      	mov	r3, r0
 800cc26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if( status == MQTTSuccess )
 800cc2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d102      	bne.n	800cc38 <receiveSingleIteration+0xec>
            {
                /* Reset the status. */
                status = statusCopy;
 800cc32:	7efb      	ldrb	r3, [r7, #27]
 800cc34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
        }
    }

    /* Check whether there is data available before processing the packet further. */
    if( ( status == MQTTNeedMoreBytes ) || ( status == MQTTNoDataAvailable ) )
 800cc38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc3c:	2b0b      	cmp	r3, #11
 800cc3e:	d01e      	beq.n	800cc7e <receiveSingleIteration+0x132>
 800cc40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc44:	2b07      	cmp	r3, #7
 800cc46:	d01a      	beq.n	800cc7e <receiveSingleIteration+0x132>
    {
        /* Do nothing as there is nothing to be processed right now. The proper
         * error code will be bubbled up to the user. */
    }
    /* Any other error code. */
    else if( status != MQTTSuccess )
 800cc48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d116      	bne.n	800cc7e <receiveSingleIteration+0x132>
    {
        LogError( ( "Call to receiveSingleIteration failed. Status=%s",
                    MQTT_Status_strerror( status ) ) );
    }
    /* If the MQTT Packet size is bigger than the buffer itself. */
    else if( totalMQTTPacketLength > pContext->networkBuffer.size )
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc54:	6a3a      	ldr	r2, [r7, #32]
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d909      	bls.n	800cc6e <receiveSingleIteration+0x122>
    {
        /* Discard the packet from the receive buffer and drain the pending
         * data from the socket buffer. */
        status = discardStoredPacket( pContext,
 800cc5a:	f107 0308 	add.w	r3, r7, #8
 800cc5e:	4619      	mov	r1, r3
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f7ff fbb7 	bl	800c3d4 <discardStoredPacket>
 800cc66:	4603      	mov	r3, r0
 800cc68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc6c:	e007      	b.n	800cc7e <receiveSingleIteration+0x132>
                                      &incomingPacket );
    }
    /* If the total packet is of more length than the bytes we have available. */
    else if( totalMQTTPacketLength > pContext->index )
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc72:	6a3a      	ldr	r2, [r7, #32]
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d902      	bls.n	800cc7e <receiveSingleIteration+0x132>
    {
        status = MQTTNeedMoreBytes;
 800cc78:	230b      	movs	r3, #11
 800cc7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        /* MISRA else. */
    }

    /* Handle received packet. If incomplete data was read then this will not execute. */
    if( status == MQTTSuccess )
 800cc7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d138      	bne.n	800ccf8 <receiveSingleIteration+0x1ac>
    {
        incomingPacket.pRemainingData = &pContext->networkBuffer.pBuffer[ incomingPacket.headerLength ];
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6a1a      	ldr	r2, [r3, #32]
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	4413      	add	r3, r2
 800cc8e:	60fb      	str	r3, [r7, #12]

        /* PUBLISH packets allow flags in the lower four bits. For other
         * packet types, they are reserved. */
        if( ( incomingPacket.type & 0xF0U ) == MQTT_PACKET_TYPE_PUBLISH )
 800cc90:	7a3b      	ldrb	r3, [r7, #8]
 800cc92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc96:	2b30      	cmp	r3, #48	; 0x30
 800cc98:	d109      	bne.n	800ccae <receiveSingleIteration+0x162>
        {
            status = handleIncomingPublish( pContext, &incomingPacket );
 800cc9a:	f107 0308 	add.w	r3, r7, #8
 800cc9e:	4619      	mov	r1, r3
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f7ff fd77 	bl	800c794 <handleIncomingPublish>
 800cca6:	4603      	mov	r3, r0
 800cca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ccac:	e009      	b.n	800ccc2 <receiveSingleIteration+0x176>
        }
        else
        {
            status = handleIncomingAck( pContext, &incomingPacket, manageKeepAlive );
 800ccae:	78fa      	ldrb	r2, [r7, #3]
 800ccb0:	f107 0308 	add.w	r3, r7, #8
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f7ff fe80 	bl	800c9bc <handleIncomingAck>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        /* Update the index to reflect the remaining bytes in the buffer.  */
        pContext->index -= totalMQTTPacketLength;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ccc6:	6a3b      	ldr	r3, [r7, #32]
 800ccc8:	1ad2      	subs	r2, r2, r3
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Move the remaining bytes to the front of the buffer. */
        ( void ) memmove( pContext->networkBuffer.pBuffer,
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6a18      	ldr	r0, [r3, #32]
                          &( pContext->networkBuffer.pBuffer[ totalMQTTPacketLength ] ),
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6a1a      	ldr	r2, [r3, #32]
 800ccd6:	6a3b      	ldr	r3, [r7, #32]
 800ccd8:	18d1      	adds	r1, r2, r3
        ( void ) memmove( pContext->networkBuffer.pBuffer,
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccde:	461a      	mov	r2, r3
 800cce0:	f006 fa75 	bl	80131ce <memmove>
                          pContext->index );

        if( status == MQTTSuccess )
 800cce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d105      	bne.n	800ccf8 <receiveSingleIteration+0x1ac>
        {
            pContext->lastPacketRxTime = pContext->getTime();
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccf0:	4798      	blx	r3
 800ccf2:	4602      	mov	r2, r0
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	639a      	str	r2, [r3, #56]	; 0x38
        }
    }

    if( status == MQTTNoDataAvailable )
 800ccf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccfc:	2b07      	cmp	r3, #7
 800ccfe:	d102      	bne.n	800cd06 <receiveSingleIteration+0x1ba>
    {
        /* No data available is not an error. Reset to MQTTSuccess so the
         * return code will indicate success. */
        status = MQTTSuccess;
 800cd00:	2300      	movs	r3, #0
 800cd02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return status;
 800cd06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	372c      	adds	r7, #44	; 0x2c
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd90      	pop	{r4, r7, pc}
 800cd12:	bf00      	nop
 800cd14:	08016fcc 	.word	0x08016fcc
 800cd18:	08017bfc 	.word	0x08017bfc
 800cd1c:	08016ef0 	.word	0x08016ef0
 800cd20:	08017108 	.word	0x08017108

0800cd24 <validateSubscribeUnsubscribeParams>:

static MQTTStatus_t validateSubscribeUnsubscribeParams( const MQTTContext_t * pContext,
                                                        const MQTTSubscribeInfo_t * pSubscriptionList,
                                                        size_t subscriptionCount,
                                                        uint16_t packetId )
{
 800cd24:	b480      	push	{r7}
 800cd26:	b087      	sub	sp, #28
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	607a      	str	r2, [r7, #4]
 800cd30:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTSuccess;
 800cd32:	2300      	movs	r3, #0
 800cd34:	75fb      	strb	r3, [r7, #23]
    size_t iterator;

    /* Validate all the parameters. */
    if( ( pContext == NULL ) || ( pSubscriptionList == NULL ) )
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d002      	beq.n	800cd42 <validateSubscribeUnsubscribeParams+0x1e>
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d102      	bne.n	800cd48 <validateSubscribeUnsubscribeParams+0x24>
    {
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pSubscriptionList=%p.",
                    ( void * ) pContext,
                    ( void * ) pSubscriptionList ) );
        status = MQTTBadParameter;
 800cd42:	2301      	movs	r3, #1
 800cd44:	75fb      	strb	r3, [r7, #23]
 800cd46:	e020      	b.n	800cd8a <validateSubscribeUnsubscribeParams+0x66>
    }
    else if( subscriptionCount == 0UL )
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d102      	bne.n	800cd54 <validateSubscribeUnsubscribeParams+0x30>
    {
        LogError( ( "Subscription count is 0." ) );
        status = MQTTBadParameter;
 800cd4e:	2301      	movs	r3, #1
 800cd50:	75fb      	strb	r3, [r7, #23]
 800cd52:	e01a      	b.n	800cd8a <validateSubscribeUnsubscribeParams+0x66>
    }
    else if( packetId == 0U )
 800cd54:	887b      	ldrh	r3, [r7, #2]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d102      	bne.n	800cd60 <validateSubscribeUnsubscribeParams+0x3c>
    {
        LogError( ( "Packet Id for subscription packet is 0." ) );
        status = MQTTBadParameter;
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	75fb      	strb	r3, [r7, #23]
 800cd5e:	e014      	b.n	800cd8a <validateSubscribeUnsubscribeParams+0x66>
    }
    else
    {
        if( pContext->incomingPublishRecords == NULL )
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d110      	bne.n	800cd8a <validateSubscribeUnsubscribeParams+0x66>
        {
            for( iterator = 0; iterator < subscriptionCount; iterator++ )
 800cd68:	2300      	movs	r3, #0
 800cd6a:	613b      	str	r3, [r7, #16]
 800cd6c:	e009      	b.n	800cd82 <validateSubscribeUnsubscribeParams+0x5e>
            {
                if( pSubscriptionList->qos > MQTTQoS0 )
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d002      	beq.n	800cd7c <validateSubscribeUnsubscribeParams+0x58>
                {
                    LogError( ( "The incoming publish record list is not "
                                "initialised for QoS1/QoS2 records. Please call "
                                " MQTT_InitStatefulQoS to enable use of QoS1 and "
                                " QoS2 packets." ) );
                    status = MQTTBadParameter;
 800cd76:	2301      	movs	r3, #1
 800cd78:	75fb      	strb	r3, [r7, #23]
                    break;
 800cd7a:	e006      	b.n	800cd8a <validateSubscribeUnsubscribeParams+0x66>
            for( iterator = 0; iterator < subscriptionCount; iterator++ )
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	3301      	adds	r3, #1
 800cd80:	613b      	str	r3, [r7, #16]
 800cd82:	693a      	ldr	r2, [r7, #16]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d3f1      	bcc.n	800cd6e <validateSubscribeUnsubscribeParams+0x4a>
                }
            }
        }
    }

    return status;
 800cd8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	371c      	adds	r7, #28
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr

0800cd98 <addEncodedStringToVector>:
static size_t addEncodedStringToVector( uint8_t serailizedLength[ 2 ],
                                        const char * const string,
                                        uint16_t length,
                                        TransportOutVector_t * iterator,
                                        size_t * updatedLength )
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b088      	sub	sp, #32
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	60f8      	str	r0, [r7, #12]
 800cda0:	60b9      	str	r1, [r7, #8]
 800cda2:	603b      	str	r3, [r7, #0]
 800cda4:	4613      	mov	r3, r2
 800cda6:	80fb      	strh	r3, [r7, #6]
    size_t packetLength = 0U;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	61fb      	str	r3, [r7, #28]
    const size_t seralizedLengthFieldSize = 2U;
 800cdac:	2302      	movs	r3, #2
 800cdae:	617b      	str	r3, [r7, #20]
    TransportOutVector_t * pLocalIterator = iterator;
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	613b      	str	r3, [r7, #16]
    /* This function always adds 2 vectors. */
    size_t vectorsAdded = 0U;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	61bb      	str	r3, [r7, #24]

    /* When length is non-zero, the string must be non-NULL. */
    assert( ( length != 0U ) == ( string != NULL ) );
 800cdb8:	88fb      	ldrh	r3, [r7, #6]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	bf0c      	ite	eq
 800cdbe:	2301      	moveq	r3, #1
 800cdc0:	2300      	movne	r3, #0
 800cdc2:	b2da      	uxtb	r2, r3
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	bf14      	ite	ne
 800cdca:	2301      	movne	r3, #1
 800cdcc:	2300      	moveq	r3, #0
 800cdce:	b2db      	uxtb	r3, r3
 800cdd0:	4053      	eors	r3, r2
 800cdd2:	b2db      	uxtb	r3, r3
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d106      	bne.n	800cde6 <addEncodedStringToVector+0x4e>
 800cdd8:	4b1e      	ldr	r3, [pc, #120]	; (800ce54 <addEncodedStringToVector+0xbc>)
 800cdda:	4a1f      	ldr	r2, [pc, #124]	; (800ce58 <addEncodedStringToVector+0xc0>)
 800cddc:	f240 7139 	movw	r1, #1849	; 0x739
 800cde0:	481e      	ldr	r0, [pc, #120]	; (800ce5c <addEncodedStringToVector+0xc4>)
 800cde2:	f006 f883 	bl	8012eec <__assert_func>

    serailizedLength[ 0 ] = ( ( uint8_t ) ( ( length ) >> 8 ) );
 800cde6:	88fb      	ldrh	r3, [r7, #6]
 800cde8:	0a1b      	lsrs	r3, r3, #8
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	b2da      	uxtb	r2, r3
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	701a      	strb	r2, [r3, #0]
    serailizedLength[ 1 ] = ( ( uint8_t ) ( ( length ) & 0x00ffU ) );
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	88fa      	ldrh	r2, [r7, #6]
 800cdf8:	b2d2      	uxtb	r2, r2
 800cdfa:	701a      	strb	r2, [r3, #0]

    /* Add the serialized length of the string first. */
    pLocalIterator[ 0 ].iov_base = serailizedLength;
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	68fa      	ldr	r2, [r7, #12]
 800ce00:	601a      	str	r2, [r3, #0]
    pLocalIterator[ 0 ].iov_len = seralizedLengthFieldSize;
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	697a      	ldr	r2, [r7, #20]
 800ce06:	605a      	str	r2, [r3, #4]
    vectorsAdded++;
 800ce08:	69bb      	ldr	r3, [r7, #24]
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	61bb      	str	r3, [r7, #24]
    packetLength = seralizedLengthFieldSize;
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	61fb      	str	r3, [r7, #28]

    /* Sometimes the string can be NULL that is, of 0 length. In that case,
     * only the length field should be encoded in the vector. */
    if( ( string != NULL ) && ( length != 0U ) )
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d011      	beq.n	800ce3c <addEncodedStringToVector+0xa4>
 800ce18:	88fb      	ldrh	r3, [r7, #6]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00e      	beq.n	800ce3c <addEncodedStringToVector+0xa4>
    {
        /* Then add the pointer to the string itself. */
        pLocalIterator[ 1 ].iov_base = string;
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	3308      	adds	r3, #8
 800ce22:	68ba      	ldr	r2, [r7, #8]
 800ce24:	601a      	str	r2, [r3, #0]
        pLocalIterator[ 1 ].iov_len = length;
 800ce26:	693b      	ldr	r3, [r7, #16]
 800ce28:	3308      	adds	r3, #8
 800ce2a:	88fa      	ldrh	r2, [r7, #6]
 800ce2c:	605a      	str	r2, [r3, #4]
        vectorsAdded++;
 800ce2e:	69bb      	ldr	r3, [r7, #24]
 800ce30:	3301      	adds	r3, #1
 800ce32:	61bb      	str	r3, [r7, #24]
        packetLength += length;
 800ce34:	88fb      	ldrh	r3, [r7, #6]
 800ce36:	69fa      	ldr	r2, [r7, #28]
 800ce38:	4413      	add	r3, r2
 800ce3a:	61fb      	str	r3, [r7, #28]
    }

    ( *updatedLength ) = ( *updatedLength ) + packetLength;
 800ce3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce3e:	681a      	ldr	r2, [r3, #0]
 800ce40:	69fb      	ldr	r3, [r7, #28]
 800ce42:	441a      	add	r2, r3
 800ce44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce46:	601a      	str	r2, [r3, #0]

    return vectorsAdded;
 800ce48:	69bb      	ldr	r3, [r7, #24]
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3720      	adds	r7, #32
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}
 800ce52:	bf00      	nop
 800ce54:	080171d4 	.word	0x080171d4
 800ce58:	08017c14 	.word	0x08017c14
 800ce5c:	08016ef0 	.word	0x08016ef0

0800ce60 <sendSubscribeWithoutCopy>:
static MQTTStatus_t sendSubscribeWithoutCopy( MQTTContext_t * pContext,
                                              const MQTTSubscribeInfo_t * pSubscriptionList,
                                              size_t subscriptionCount,
                                              uint16_t packetId,
                                              size_t remainingLength )
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b09c      	sub	sp, #112	; 0x70
 800ce64:	af02      	add	r7, sp, #8
 800ce66:	60f8      	str	r0, [r7, #12]
 800ce68:	60b9      	str	r1, [r7, #8]
 800ce6a:	607a      	str	r2, [r7, #4]
 800ce6c:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTSuccess;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    uint8_t subscribeheader[ 7 ];
    uint8_t * pIndex;
    TransportOutVector_t pIoVector[ MQTT_SUB_UNSUB_MAX_VECTORS ];
    TransportOutVector_t * pIterator;
    uint8_t serializedTopicFieldLength[ MQTT_SUB_UNSUB_MAX_VECTORS ][ 2 ];
    size_t totalPacketLength = 0U;
 800ce74:	2300      	movs	r3, #0
 800ce76:	617b      	str	r3, [r7, #20]
    size_t ioVectorLength = 0U;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	65fb      	str	r3, [r7, #92]	; 0x5c
    size_t subscriptionsSent = 0U;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	65bb      	str	r3, [r7, #88]	; 0x58
    /* For subscribe, only three vector slots are required per topic string. */
    const size_t subscriptionStringVectorSlots = 3U;
 800ce80:	2303      	movs	r3, #3
 800ce82:	653b      	str	r3, [r7, #80]	; 0x50
    size_t vectorsAdded;
    size_t topicFieldLengthIndex;

    /* The vector array should be at least three element long as the topic
     * string needs these many vector elements to be stored. */
    assert( MQTT_SUB_UNSUB_MAX_VECTORS >= subscriptionStringVectorSlots );
 800ce84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce86:	2b04      	cmp	r3, #4
 800ce88:	d906      	bls.n	800ce98 <sendSubscribeWithoutCopy+0x38>
 800ce8a:	4b4f      	ldr	r3, [pc, #316]	; (800cfc8 <sendSubscribeWithoutCopy+0x168>)
 800ce8c:	4a4f      	ldr	r2, [pc, #316]	; (800cfcc <sendSubscribeWithoutCopy+0x16c>)
 800ce8e:	f240 716c 	movw	r1, #1900	; 0x76c
 800ce92:	484f      	ldr	r0, [pc, #316]	; (800cfd0 <sendSubscribeWithoutCopy+0x170>)
 800ce94:	f006 f82a 	bl	8012eec <__assert_func>

    pIndex = subscribeheader;
 800ce98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ce9c:	64fb      	str	r3, [r7, #76]	; 0x4c
    pIterator = pIoVector;
 800ce9e:	f107 0320 	add.w	r3, r7, #32
 800cea2:	663b      	str	r3, [r7, #96]	; 0x60

    pIndex = MQTT_SerializeSubscribeHeader( remainingLength,
 800cea4:	887b      	ldrh	r3, [r7, #2]
 800cea6:	461a      	mov	r2, r3
 800cea8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ceaa:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800ceac:	f001 fc62 	bl	800e774 <MQTT_SerializeSubscribeHeader>
 800ceb0:	64f8      	str	r0, [r7, #76]	; 0x4c
                                            pIndex,
                                            packetId );

    /* The header is to be sent first. */
    pIterator->iov_base = subscribeheader;
 800ceb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ceb4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ceb8:	601a      	str	r2, [r3, #0]
    /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-182 */
    /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-108 */
    /* coverity[misra_c_2012_rule_18_2_violation] */
    /* coverity[misra_c_2012_rule_10_8_violation] */
    pIterator->iov_len = ( size_t ) ( pIndex - subscribeheader );
 800ceba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cebe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cec0:	1ad3      	subs	r3, r2, r3
 800cec2:	461a      	mov	r2, r3
 800cec4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cec6:	605a      	str	r2, [r3, #4]
    totalPacketLength += pIterator->iov_len;
 800cec8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ceca:	685a      	ldr	r2, [r3, #4]
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	4413      	add	r3, r2
 800ced0:	617b      	str	r3, [r7, #20]
    pIterator++;
 800ced2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ced4:	3308      	adds	r3, #8
 800ced6:	663b      	str	r3, [r7, #96]	; 0x60
    ioVectorLength++;
 800ced8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ceda:	3301      	adds	r3, #1
 800cedc:	65fb      	str	r3, [r7, #92]	; 0x5c

    while( ( status == MQTTSuccess ) && ( subscriptionsSent < subscriptionCount ) )
 800cede:	e065      	b.n	800cfac <sendSubscribeWithoutCopy+0x14c>
    {
        /* Reset the index for next iteration. */
        topicFieldLengthIndex = 0;
 800cee0:	2300      	movs	r3, #0
 800cee2:	657b      	str	r3, [r7, #84]	; 0x54

        /* Check whether the subscription topic (with QoS) will fit in the
         * given vector. */
        while( ( ioVectorLength <= ( MQTT_SUB_UNSUB_MAX_VECTORS - subscriptionStringVectorSlots ) ) &&
 800cee4:	e043      	b.n	800cf6e <sendSubscribeWithoutCopy+0x10e>
               ( subscriptionsSent < subscriptionCount ) )
        {
            /* The topic filter gets sent next. */
            vectorsAdded = addEncodedStringToVector( serializedTopicFieldLength[ topicFieldLengthIndex ],
 800cee6:	f107 0218 	add.w	r2, r7, #24
 800ceea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ceec:	005b      	lsls	r3, r3, #1
 800ceee:	18d0      	adds	r0, r2, r3
                                                     pSubscriptionList[ subscriptionsSent ].pTopicFilter,
 800cef0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cef2:	4613      	mov	r3, r2
 800cef4:	005b      	lsls	r3, r3, #1
 800cef6:	4413      	add	r3, r2
 800cef8:	009b      	lsls	r3, r3, #2
 800cefa:	461a      	mov	r2, r3
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	4413      	add	r3, r2
            vectorsAdded = addEncodedStringToVector( serializedTopicFieldLength[ topicFieldLengthIndex ],
 800cf00:	6859      	ldr	r1, [r3, #4]
                                                     pSubscriptionList[ subscriptionsSent ].topicFilterLength,
 800cf02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf04:	4613      	mov	r3, r2
 800cf06:	005b      	lsls	r3, r3, #1
 800cf08:	4413      	add	r3, r2
 800cf0a:	009b      	lsls	r3, r3, #2
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	4413      	add	r3, r2
            vectorsAdded = addEncodedStringToVector( serializedTopicFieldLength[ topicFieldLengthIndex ],
 800cf12:	891a      	ldrh	r2, [r3, #8]
 800cf14:	f107 0314 	add.w	r3, r7, #20
 800cf18:	9300      	str	r3, [sp, #0]
 800cf1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf1c:	f7ff ff3c 	bl	800cd98 <addEncodedStringToVector>
 800cf20:	64b8      	str	r0, [r7, #72]	; 0x48
                                                     pIterator,
                                                     &totalPacketLength );

            /* Update the pointer after the above operation. */
            pIterator = &pIterator[ vectorsAdded ];
 800cf22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf24:	00db      	lsls	r3, r3, #3
 800cf26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cf28:	4413      	add	r3, r2
 800cf2a:	663b      	str	r3, [r7, #96]	; 0x60

            /* Lastly, the QoS gets sent. */
            pIterator->iov_base = &( pSubscriptionList[ subscriptionsSent ].qos );
 800cf2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf2e:	4613      	mov	r3, r2
 800cf30:	005b      	lsls	r3, r3, #1
 800cf32:	4413      	add	r3, r2
 800cf34:	009b      	lsls	r3, r3, #2
 800cf36:	461a      	mov	r2, r3
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	4413      	add	r3, r2
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf40:	601a      	str	r2, [r3, #0]
            pIterator->iov_len = 1U;
 800cf42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf44:	2201      	movs	r2, #1
 800cf46:	605a      	str	r2, [r3, #4]
            totalPacketLength += pIterator->iov_len;
 800cf48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf4a:	685a      	ldr	r2, [r3, #4]
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	4413      	add	r3, r2
 800cf50:	617b      	str	r3, [r7, #20]

            /* Increment the pointer. */
            pIterator++;
 800cf52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf54:	3308      	adds	r3, #8
 800cf56:	663b      	str	r3, [r7, #96]	; 0x60

            /* Two slots get used by the topic string length and topic string.
             * One slot gets used by the quality of service. */
            ioVectorLength += vectorsAdded + 1U;
 800cf58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf5c:	4413      	add	r3, r2
 800cf5e:	3301      	adds	r3, #1
 800cf60:	65fb      	str	r3, [r7, #92]	; 0x5c

            subscriptionsSent++;
 800cf62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf64:	3301      	adds	r3, #1
 800cf66:	65bb      	str	r3, [r7, #88]	; 0x58

            /* The index needs to be updated for next iteration. */
            topicFieldLengthIndex++;
 800cf68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	657b      	str	r3, [r7, #84]	; 0x54
        while( ( ioVectorLength <= ( MQTT_SUB_UNSUB_MAX_VECTORS - subscriptionStringVectorSlots ) ) &&
 800cf6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf70:	f1c3 0304 	rsb	r3, r3, #4
 800cf74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d803      	bhi.n	800cf82 <sendSubscribeWithoutCopy+0x122>
 800cf7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d3b1      	bcc.n	800cee6 <sendSubscribeWithoutCopy+0x86>
        }

        if( sendMessageVector( pContext,
 800cf82:	f107 0320 	add.w	r3, r7, #32
 800cf86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cf88:	4619      	mov	r1, r3
 800cf8a:	68f8      	ldr	r0, [r7, #12]
 800cf8c:	f7fe ff3a 	bl	800be04 <sendMessageVector>
 800cf90:	4603      	mov	r3, r0
                               pIoVector,
                               ioVectorLength ) != ( int32_t ) totalPacketLength )
 800cf92:	697a      	ldr	r2, [r7, #20]
        if( sendMessageVector( pContext,
 800cf94:	4293      	cmp	r3, r2
 800cf96:	d002      	beq.n	800cf9e <sendSubscribeWithoutCopy+0x13e>
        {
            status = MQTTSendFailed;
 800cf98:	2303      	movs	r3, #3
 800cf9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }

        /* Update the iterator for the next potential loop iteration. */
        pIterator = pIoVector;
 800cf9e:	f107 0320 	add.w	r3, r7, #32
 800cfa2:	663b      	str	r3, [r7, #96]	; 0x60
        /* Reset the vector length for the next potential loop iteration. */
        ioVectorLength = 0U;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	65fb      	str	r3, [r7, #92]	; 0x5c
        /* Reset the packet length for the next potential loop iteration. */
        totalPacketLength = 0U;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	617b      	str	r3, [r7, #20]
    while( ( status == MQTTSuccess ) && ( subscriptionsSent < subscriptionCount ) )
 800cfac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d103      	bne.n	800cfbc <sendSubscribeWithoutCopy+0x15c>
 800cfb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d391      	bcc.n	800cee0 <sendSubscribeWithoutCopy+0x80>
    }

    return status;
 800cfbc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3768      	adds	r7, #104	; 0x68
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	080171fc 	.word	0x080171fc
 800cfcc:	08017c30 	.word	0x08017c30
 800cfd0:	08016ef0 	.word	0x08016ef0

0800cfd4 <sendPublishWithoutCopy>:
static MQTTStatus_t sendPublishWithoutCopy( MQTTContext_t * pContext,
                                            const MQTTPublishInfo_t * pPublishInfo,
                                            const uint8_t * pMqttHeader,
                                            size_t headerSize,
                                            uint16_t packetId )
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b092      	sub	sp, #72	; 0x48
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	60f8      	str	r0, [r7, #12]
 800cfdc:	60b9      	str	r1, [r7, #8]
 800cfde:	607a      	str	r2, [r7, #4]
 800cfe0:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t serializedPacketID[ 2 ];
    TransportOutVector_t pIoVector[ 4 ];
    size_t ioVectorLength;
    size_t totalMessageLength;
    const size_t packetIDLength = 2U;
 800cfe8:	2302      	movs	r3, #2
 800cfea:	63bb      	str	r3, [r7, #56]	; 0x38

    /* The header is sent first. */
    pIoVector[ 0U ].iov_base = pMqttHeader;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	617b      	str	r3, [r7, #20]
    pIoVector[ 0U ].iov_len = headerSize;
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	61bb      	str	r3, [r7, #24]
    totalMessageLength = headerSize;
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Then the topic name has to be sent. */
    pIoVector[ 1U ].iov_base = pPublishInfo->pTopicName;
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	61fb      	str	r3, [r7, #28]
    pIoVector[ 1U ].iov_len = pPublishInfo->topicNameLength;
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	891b      	ldrh	r3, [r3, #8]
 800d002:	623b      	str	r3, [r7, #32]
    totalMessageLength += pPublishInfo->topicNameLength;
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	891b      	ldrh	r3, [r3, #8]
 800d008:	461a      	mov	r2, r3
 800d00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d00c:	4413      	add	r3, r2
 800d00e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* The next field's index should be 2 as the first two fields
     * have been filled in. */
    ioVectorLength = 2U;
 800d010:	2302      	movs	r3, #2
 800d012:	643b      	str	r3, [r7, #64]	; 0x40

    if( pPublishInfo->qos > MQTTQoS0 )
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d021      	beq.n	800d060 <sendPublishWithoutCopy+0x8c>
    {
        /* Encode the packet ID. */
        serializedPacketID[ 0 ] = ( ( uint8_t ) ( ( packetId ) >> 8 ) );
 800d01c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800d020:	0a1b      	lsrs	r3, r3, #8
 800d022:	b29b      	uxth	r3, r3
 800d024:	b2db      	uxtb	r3, r3
 800d026:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        serializedPacketID[ 1 ] = ( ( uint8_t ) ( ( packetId ) & 0x00ffU ) );
 800d02a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800d02e:	b2db      	uxtb	r3, r3
 800d030:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

        pIoVector[ ioVectorLength ].iov_base = serializedPacketID;
 800d034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d036:	00db      	lsls	r3, r3, #3
 800d038:	3348      	adds	r3, #72	; 0x48
 800d03a:	443b      	add	r3, r7
 800d03c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800d040:	f843 2c34 	str.w	r2, [r3, #-52]
        pIoVector[ ioVectorLength ].iov_len = packetIDLength;
 800d044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d046:	00db      	lsls	r3, r3, #3
 800d048:	3348      	adds	r3, #72	; 0x48
 800d04a:	443b      	add	r3, r7
 800d04c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d04e:	f843 2c30 	str.w	r2, [r3, #-48]

        ioVectorLength++;
 800d052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d054:	3301      	adds	r3, #1
 800d056:	643b      	str	r3, [r7, #64]	; 0x40
        totalMessageLength += packetIDLength;
 800d058:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d05c:	4413      	add	r3, r2
 800d05e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Publish packets are allowed to contain no payload. */
    if( pPublishInfo->payloadLength > 0U )
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	691b      	ldr	r3, [r3, #16]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d017      	beq.n	800d098 <sendPublishWithoutCopy+0xc4>
    {
        pIoVector[ ioVectorLength ].iov_base = pPublishInfo->pPayload;
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	68da      	ldr	r2, [r3, #12]
 800d06c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d06e:	00db      	lsls	r3, r3, #3
 800d070:	3348      	adds	r3, #72	; 0x48
 800d072:	443b      	add	r3, r7
 800d074:	f843 2c34 	str.w	r2, [r3, #-52]
        pIoVector[ ioVectorLength ].iov_len = pPublishInfo->payloadLength;
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	691a      	ldr	r2, [r3, #16]
 800d07c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d07e:	00db      	lsls	r3, r3, #3
 800d080:	3348      	adds	r3, #72	; 0x48
 800d082:	443b      	add	r3, r7
 800d084:	f843 2c30 	str.w	r2, [r3, #-48]

        ioVectorLength++;
 800d088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d08a:	3301      	adds	r3, #1
 800d08c:	643b      	str	r3, [r7, #64]	; 0x40
        totalMessageLength += pPublishInfo->payloadLength;
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	691b      	ldr	r3, [r3, #16]
 800d092:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d094:	4413      	add	r3, r2
 800d096:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if( sendMessageVector( pContext, pIoVector, ioVectorLength ) != ( int32_t ) totalMessageLength )
 800d098:	f107 0314 	add.w	r3, r7, #20
 800d09c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d09e:	4619      	mov	r1, r3
 800d0a0:	68f8      	ldr	r0, [r7, #12]
 800d0a2:	f7fe feaf 	bl	800be04 <sendMessageVector>
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d002      	beq.n	800d0b4 <sendPublishWithoutCopy+0xe0>
    {
        status = MQTTSendFailed;
 800d0ae:	2303      	movs	r3, #3
 800d0b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return status;
 800d0b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3748      	adds	r7, #72	; 0x48
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <sendConnectWithoutCopy>:

static MQTTStatus_t sendConnectWithoutCopy( MQTTContext_t * pContext,
                                            const MQTTConnectInfo_t * pConnectInfo,
                                            const MQTTPublishInfo_t * pWillInfo,
                                            size_t remainingLength )
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b0ac      	sub	sp, #176	; 0xb0
 800d0c4:	af02      	add	r7, sp, #8
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	60b9      	str	r1, [r7, #8]
 800d0ca:	607a      	str	r2, [r7, #4]
 800d0cc:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    TransportOutVector_t * iterator;
    size_t ioVectorLength = 0U;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    size_t totalMessageLength = 0U;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    int32_t bytesSentOrError;

    /* Connect packet header can be of maximum 15 bytes. */
    uint8_t connectPacketHeader[ 15 ];
    uint8_t * pIndex = connectPacketHeader;
 800d0e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d0e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint8_t serializedPayloadLength[ 2 ];
    uint8_t serializedUsernameLength[ 2 ];
    uint8_t serializedPasswordLength[ 2 ];
    size_t vectorsAdded;

    iterator = pIoVector;
 800d0e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /* Validate arguments. */
    if( ( pWillInfo != NULL ) && ( pWillInfo->pTopicName == NULL ) )
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d007      	beq.n	800d106 <sendConnectWithoutCopy+0x46>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d103      	bne.n	800d106 <sendConnectWithoutCopy+0x46>
    {
        LogError( ( "pWillInfo->pTopicName cannot be NULL if Will is present." ) );
        status = MQTTBadParameter;
 800d0fe:	2301      	movs	r3, #1
 800d100:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800d104:	e0ec      	b.n	800d2e0 <sendConnectWithoutCopy+0x220>
    }
    else
    {
        pIndex = MQTT_SerializeConnectFixedHeader( pIndex,
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	687a      	ldr	r2, [r7, #4]
 800d10a:	68b9      	ldr	r1, [r7, #8]
 800d10c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800d110:	f001 fa22 	bl	800e558 <MQTT_SerializeConnectFixedHeader>
 800d114:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                                                   pConnectInfo,
                                                   pWillInfo,
                                                   remainingLength );

        assert( ( pIndex - connectPacketHeader ) <= 15 );
 800d118:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d11c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d120:	1ad3      	subs	r3, r2, r3
 800d122:	2b0f      	cmp	r3, #15
 800d124:	dd06      	ble.n	800d134 <sendConnectWithoutCopy+0x74>
 800d126:	4b71      	ldr	r3, [pc, #452]	; (800d2ec <sendConnectWithoutCopy+0x22c>)
 800d128:	4a71      	ldr	r2, [pc, #452]	; (800d2f0 <sendConnectWithoutCopy+0x230>)
 800d12a:	f640 0172 	movw	r1, #2162	; 0x872
 800d12e:	4871      	ldr	r0, [pc, #452]	; (800d2f4 <sendConnectWithoutCopy+0x234>)
 800d130:	f005 fedc 	bl	8012eec <__assert_func>

        /* The header gets sent first. */
        iterator->iov_base = connectPacketHeader;
 800d134:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d138:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800d13c:	601a      	str	r2, [r3, #0]
        /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-182 */
        /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-108 */
        /* coverity[misra_c_2012_rule_18_2_violation] */
        /* coverity[misra_c_2012_rule_10_8_violation] */
        iterator->iov_len = ( size_t ) ( pIndex - connectPacketHeader );
 800d13e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d142:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d146:	1ad3      	subs	r3, r2, r3
 800d148:	461a      	mov	r2, r3
 800d14a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d14e:	605a      	str	r2, [r3, #4]
        totalMessageLength += iterator->iov_len;
 800d150:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d154:	685a      	ldr	r2, [r3, #4]
 800d156:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d15a:	4413      	add	r3, r2
 800d15c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        iterator++;
 800d160:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d164:	3308      	adds	r3, #8
 800d166:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        ioVectorLength++;
 800d16a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d16e:	3301      	adds	r3, #1
 800d170:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        /* Serialize the client ID. */
        vectorsAdded = addEncodedStringToVector( serializedClientIDLength,
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	6859      	ldr	r1, [r3, #4]
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	891a      	ldrh	r2, [r3, #8]
 800d17c:	f107 0020 	add.w	r0, r7, #32
 800d180:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d184:	9300      	str	r3, [sp, #0]
 800d186:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d18a:	f7ff fe05 	bl	800cd98 <addEncodedStringToVector>
 800d18e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                 pConnectInfo->clientIdentifierLength,
                                                 iterator,
                                                 &totalMessageLength );

        /* Update the iterator to point to the next empty slot. */
        iterator = &iterator[ vectorsAdded ];
 800d192:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d196:	00db      	lsls	r3, r3, #3
 800d198:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d19c:	4413      	add	r3, r2
 800d19e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        ioVectorLength += vectorsAdded;
 800d1a2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d1a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d1aa:	4413      	add	r3, r2
 800d1ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        if( pWillInfo != NULL )
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d03c      	beq.n	800d230 <sendConnectWithoutCopy+0x170>
        {
            /* Serialize the topic. */
            vectorsAdded = addEncodedStringToVector( serializedTopicLength,
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6859      	ldr	r1, [r3, #4]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	891a      	ldrh	r2, [r3, #8]
 800d1be:	f107 001c 	add.w	r0, r7, #28
 800d1c2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d1c6:	9300      	str	r3, [sp, #0]
 800d1c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d1cc:	f7ff fde4 	bl	800cd98 <addEncodedStringToVector>
 800d1d0:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     pWillInfo->topicNameLength,
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800d1d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d1d8:	00db      	lsls	r3, r3, #3
 800d1da:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d1de:	4413      	add	r3, r2
 800d1e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800d1e4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d1e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d1ec:	4413      	add	r3, r2
 800d1ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


            /* Serialize the payload. Payload of last will and testament can be NULL. */
            vectorsAdded = addEncodedStringToVector( serializedPayloadLength,
                                                     pWillInfo->pPayload,
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	68d9      	ldr	r1, [r3, #12]
                                                     ( uint16_t ) pWillInfo->payloadLength,
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	691b      	ldr	r3, [r3, #16]
            vectorsAdded = addEncodedStringToVector( serializedPayloadLength,
 800d1fa:	b29a      	uxth	r2, r3
 800d1fc:	f107 0018 	add.w	r0, r7, #24
 800d200:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d204:	9300      	str	r3, [sp, #0]
 800d206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d20a:	f7ff fdc5 	bl	800cd98 <addEncodedStringToVector>
 800d20e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800d212:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d216:	00db      	lsls	r3, r3, #3
 800d218:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d21c:	4413      	add	r3, r2
 800d21e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800d222:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d226:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d22a:	4413      	add	r3, r2
 800d22c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        /* Encode the user name if provided. */
        if( pConnectInfo->pUserName != NULL )
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	68db      	ldr	r3, [r3, #12]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d01d      	beq.n	800d274 <sendConnectWithoutCopy+0x1b4>
        {
            /* Serialize the user name string. */
            vectorsAdded = addEncodedStringToVector( serializedUsernameLength,
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	68d9      	ldr	r1, [r3, #12]
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	8a1a      	ldrh	r2, [r3, #16]
 800d240:	f107 0014 	add.w	r0, r7, #20
 800d244:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d248:	9300      	str	r3, [sp, #0]
 800d24a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d24e:	f7ff fda3 	bl	800cd98 <addEncodedStringToVector>
 800d252:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     pConnectInfo->userNameLength,
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800d256:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d25a:	00db      	lsls	r3, r3, #3
 800d25c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d260:	4413      	add	r3, r2
 800d262:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800d266:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d26a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d26e:	4413      	add	r3, r2
 800d270:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        /* Encode the password if provided. */
        if( pConnectInfo->pPassword != NULL )
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	695b      	ldr	r3, [r3, #20]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d01d      	beq.n	800d2b8 <sendConnectWithoutCopy+0x1f8>
        {
            /* Serialize the user name string. */
            vectorsAdded = addEncodedStringToVector( serializedPasswordLength,
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	6959      	ldr	r1, [r3, #20]
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	8b1a      	ldrh	r2, [r3, #24]
 800d284:	f107 0010 	add.w	r0, r7, #16
 800d288:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d28c:	9300      	str	r3, [sp, #0]
 800d28e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d292:	f7ff fd81 	bl	800cd98 <addEncodedStringToVector>
 800d296:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     pConnectInfo->pPassword,
                                                     pConnectInfo->passwordLength,
                                                     iterator,
                                                     &totalMessageLength );
            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800d29a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d29e:	00db      	lsls	r3, r3, #3
 800d2a0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d2a4:	4413      	add	r3, r2
 800d2a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800d2aa:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d2ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d2b2:	4413      	add	r3, r2
 800d2b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        bytesSentOrError = sendMessageVector( pContext, pIoVector, ioVectorLength );
 800d2b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d2bc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	68f8      	ldr	r0, [r7, #12]
 800d2c4:	f7fe fd9e 	bl	800be04 <sendMessageVector>
 800d2c8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

        if( bytesSentOrError != ( int32_t ) totalMessageLength )
 800d2cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d002      	beq.n	800d2e0 <sendConnectWithoutCopy+0x220>
        {
            status = MQTTSendFailed;
 800d2da:	2303      	movs	r3, #3
 800d2dc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        }
    }

    return status;
 800d2e0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	37a8      	adds	r7, #168	; 0xa8
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}
 800d2ec:	08017274 	.word	0x08017274
 800d2f0:	08017c4c 	.word	0x08017c4c
 800d2f4:	08016ef0 	.word	0x08016ef0

0800d2f8 <receiveConnack>:
static MQTTStatus_t receiveConnack( const MQTTContext_t * pContext,
                                    uint32_t timeoutMs,
                                    bool cleanSession,
                                    MQTTPacketInfo_t * pIncomingPacket,
                                    bool * pSessionPresent )
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b08c      	sub	sp, #48	; 0x30
 800d2fc:	af02      	add	r7, sp, #8
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	603b      	str	r3, [r7, #0]
 800d304:	4613      	mov	r3, r2
 800d306:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTSuccess;
 800d308:	2300      	movs	r3, #0
 800d30a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MQTTGetCurrentTimeFunc_t getTimeStamp = NULL;
 800d30e:	2300      	movs	r3, #0
 800d310:	61bb      	str	r3, [r7, #24]
    uint32_t entryTimeMs = 0U, remainingTimeMs = 0U, timeTakenMs = 0U;
 800d312:	2300      	movs	r3, #0
 800d314:	617b      	str	r3, [r7, #20]
 800d316:	2300      	movs	r3, #0
 800d318:	623b      	str	r3, [r7, #32]
 800d31a:	2300      	movs	r3, #0
 800d31c:	613b      	str	r3, [r7, #16]
    bool breakFromLoop = false;
 800d31e:	2300      	movs	r3, #0
 800d320:	77fb      	strb	r3, [r7, #31]
    uint16_t loopCount = 0U;
 800d322:	2300      	movs	r3, #0
 800d324:	83bb      	strh	r3, [r7, #28]

    assert( pContext != NULL );
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d106      	bne.n	800d33a <receiveConnack+0x42>
 800d32c:	4b4e      	ldr	r3, [pc, #312]	; (800d468 <receiveConnack+0x170>)
 800d32e:	4a4f      	ldr	r2, [pc, #316]	; (800d46c <receiveConnack+0x174>)
 800d330:	f640 01da 	movw	r1, #2266	; 0x8da
 800d334:	484e      	ldr	r0, [pc, #312]	; (800d470 <receiveConnack+0x178>)
 800d336:	f005 fdd9 	bl	8012eec <__assert_func>
    assert( pIncomingPacket != NULL );
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d106      	bne.n	800d34e <receiveConnack+0x56>
 800d340:	4b4c      	ldr	r3, [pc, #304]	; (800d474 <receiveConnack+0x17c>)
 800d342:	4a4a      	ldr	r2, [pc, #296]	; (800d46c <receiveConnack+0x174>)
 800d344:	f640 01db 	movw	r1, #2267	; 0x8db
 800d348:	4849      	ldr	r0, [pc, #292]	; (800d470 <receiveConnack+0x178>)
 800d34a:	f005 fdcf 	bl	8012eec <__assert_func>
    assert( pContext->getTime != NULL );
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d352:	2b00      	cmp	r3, #0
 800d354:	d106      	bne.n	800d364 <receiveConnack+0x6c>
 800d356:	4b48      	ldr	r3, [pc, #288]	; (800d478 <receiveConnack+0x180>)
 800d358:	4a44      	ldr	r2, [pc, #272]	; (800d46c <receiveConnack+0x174>)
 800d35a:	f640 01dc 	movw	r1, #2268	; 0x8dc
 800d35e:	4844      	ldr	r0, [pc, #272]	; (800d470 <receiveConnack+0x178>)
 800d360:	f005 fdc4 	bl	8012eec <__assert_func>

    getTimeStamp = pContext->getTime;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d368:	61bb      	str	r3, [r7, #24]

    /* Get the entry time for the function. */
    entryTimeMs = getTimeStamp();
 800d36a:	69bb      	ldr	r3, [r7, #24]
 800d36c:	4798      	blx	r3
 800d36e:	6178      	str	r0, [r7, #20]
    {
        /* Transport read for incoming CONNACK packet type and length.
         * MQTT_GetIncomingPacketTypeAndLength is a blocking call and it is
         * returned after a transport receive timeout, an error, or a successful
         * receive of packet type and length. */
        status = MQTT_GetIncomingPacketTypeAndLength( pContext->transportInterface.recv,
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	6918      	ldr	r0, [r3, #16]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	69db      	ldr	r3, [r3, #28]
 800d378:	683a      	ldr	r2, [r7, #0]
 800d37a:	4619      	mov	r1, r3
 800d37c:	f001 fb8c 	bl	800ea98 <MQTT_GetIncomingPacketTypeAndLength>
 800d380:	4603      	mov	r3, r0
 800d382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
         * 2. If timeoutMs is 0:
         *    Loop times out based on the maximum number of retries config
         *    MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT. This config will control
         *    maximum the number of retry attempts to read the CONNACK packet.
         *    A value of 0 for the config will try once to read CONNACK. */
        if( timeoutMs > 0U )
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d00e      	beq.n	800d3aa <receiveConnack+0xb2>
        {
            breakFromLoop = calculateElapsedTime( getTimeStamp(), entryTimeMs ) >= timeoutMs;
 800d38c:	69bb      	ldr	r3, [r7, #24]
 800d38e:	4798      	blx	r3
 800d390:	4603      	mov	r3, r0
 800d392:	6979      	ldr	r1, [r7, #20]
 800d394:	4618      	mov	r0, r3
 800d396:	f7fe fea9 	bl	800c0ec <calculateElapsedTime>
 800d39a:	4602      	mov	r2, r0
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	bf94      	ite	ls
 800d3a2:	2301      	movls	r3, #1
 800d3a4:	2300      	movhi	r3, #0
 800d3a6:	77fb      	strb	r3, [r7, #31]
 800d3a8:	e008      	b.n	800d3bc <receiveConnack+0xc4>
        }
        else
        {
            breakFromLoop = loopCount >= MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT;
 800d3aa:	8bbb      	ldrh	r3, [r7, #28]
 800d3ac:	2b04      	cmp	r3, #4
 800d3ae:	bf8c      	ite	hi
 800d3b0:	2301      	movhi	r3, #1
 800d3b2:	2300      	movls	r3, #0
 800d3b4:	77fb      	strb	r3, [r7, #31]
            loopCount++;
 800d3b6:	8bbb      	ldrh	r3, [r7, #28]
 800d3b8:	3301      	adds	r3, #1
 800d3ba:	83bb      	strh	r3, [r7, #28]
        }

        /* Loop until there is data to read or if we have exceeded the timeout/retries. */
    } while( ( status == MQTTNoDataAvailable ) && ( breakFromLoop == false ) );
 800d3bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3c0:	2b07      	cmp	r3, #7
 800d3c2:	d105      	bne.n	800d3d0 <receiveConnack+0xd8>
 800d3c4:	7ffb      	ldrb	r3, [r7, #31]
 800d3c6:	f083 0301 	eor.w	r3, r3, #1
 800d3ca:	b2db      	uxtb	r3, r3
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d1cf      	bne.n	800d370 <receiveConnack+0x78>

    if( status == MQTTSuccess )
 800d3d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d123      	bne.n	800d420 <receiveConnack+0x128>
    {
        /* Time taken in this function so far. */
        timeTakenMs = calculateElapsedTime( getTimeStamp(), entryTimeMs );
 800d3d8:	69bb      	ldr	r3, [r7, #24]
 800d3da:	4798      	blx	r3
 800d3dc:	4603      	mov	r3, r0
 800d3de:	6979      	ldr	r1, [r7, #20]
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7fe fe83 	bl	800c0ec <calculateElapsedTime>
 800d3e6:	6138      	str	r0, [r7, #16]

        if( timeTakenMs < timeoutMs )
 800d3e8:	693a      	ldr	r2, [r7, #16]
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d203      	bcs.n	800d3f8 <receiveConnack+0x100>
        {
            /* Calculate remaining time for receiving the remainder of
             * the packet. */
            remainingTimeMs = timeoutMs - timeTakenMs;
 800d3f0:	68ba      	ldr	r2, [r7, #8]
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	1ad3      	subs	r3, r2, r3
 800d3f6:	623b      	str	r3, [r7, #32]
         * Invoking receivePacket with remainingTime as 0 would attempt to
         * recv from network once. If using retries, the remainder of the
         * CONNACK packet is tried to be read only once. Reading once would be
         * good as the packet type and remaining length was already read. Hence,
         * the probability of the remaining 2 bytes available to read is very high. */
        if( pIncomingPacket->type == MQTT_PACKET_TYPE_CONNACK )
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	2b20      	cmp	r3, #32
 800d3fe:	d10c      	bne.n	800d41a <receiveConnack+0x122>
        {
            status = receivePacket( pContext,
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	6a3a      	ldr	r2, [r7, #32]
 800d404:	9201      	str	r2, [sp, #4]
 800d406:	68da      	ldr	r2, [r3, #12]
 800d408:	9200      	str	r2, [sp, #0]
 800d40a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d40c:	68f8      	ldr	r0, [r7, #12]
 800d40e:	f7ff f869 	bl	800c4e4 <receivePacket>
 800d412:	4603      	mov	r3, r0
 800d414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d418:	e002      	b.n	800d420 <receiveConnack+0x128>
        {
            LogError( ( "Incorrect packet type %X received while expecting"
                        " CONNACK(%X).",
                        ( unsigned int ) pIncomingPacket->type,
                        MQTT_PACKET_TYPE_CONNACK ) );
            status = MQTTBadResponse;
 800d41a:	2305      	movs	r3, #5
 800d41c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    if( status == MQTTSuccess )
 800d420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d424:	2b00      	cmp	r3, #0
 800d426:	d10b      	bne.n	800d440 <receiveConnack+0x148>
    {
        /* Update the packet info pointer to the buffer read. */
        pIncomingPacket->pRemainingData = pContext->networkBuffer.pBuffer;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	6a1a      	ldr	r2, [r3, #32]
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	605a      	str	r2, [r3, #4]

        /* Deserialize CONNACK. */
        status = MQTT_DeserializeAck( pIncomingPacket, NULL, pSessionPresent );
 800d430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d432:	2100      	movs	r1, #0
 800d434:	6838      	ldr	r0, [r7, #0]
 800d436:	f001 fabc 	bl	800e9b2 <MQTT_DeserializeAck>
 800d43a:	4603      	mov	r3, r0
 800d43c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If a clean session is requested, a session present should not be set by
     * broker. */
    if( status == MQTTSuccess )
 800d440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d444:	2b00      	cmp	r3, #0
 800d446:	d109      	bne.n	800d45c <receiveConnack+0x164>
    {
        if( ( cleanSession == true ) && ( *pSessionPresent == true ) )
 800d448:	79fb      	ldrb	r3, [r7, #7]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d006      	beq.n	800d45c <receiveConnack+0x164>
 800d44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d002      	beq.n	800d45c <receiveConnack+0x164>
        {
            LogError( ( "Unexpected session present flag in CONNACK response from broker."
                        " CONNECT request with clean session was made with broker." ) );
            status = MQTTBadResponse;
 800d456:	2305      	movs	r3, #5
 800d458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        LogError( ( "CONNACK recv failed with status = %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800d45c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d460:	4618      	mov	r0, r3
 800d462:	3728      	adds	r7, #40	; 0x28
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}
 800d468:	08016fcc 	.word	0x08016fcc
 800d46c:	08017c64 	.word	0x08017c64
 800d470:	08016ef0 	.word	0x08016ef0
 800d474:	0801719c 	.word	0x0801719c
 800d478:	08016ff0 	.word	0x08016ff0

0800d47c <handleSessionResumption>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleSessionResumption( MQTTContext_t * pContext,
                                             bool sessionPresent )
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b086      	sub	sp, #24
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	460b      	mov	r3, r1
 800d486:	70fb      	strb	r3, [r7, #3]
    MQTTStatus_t status = MQTTSuccess;
 800d488:	2300      	movs	r3, #0
 800d48a:	75fb      	strb	r3, [r7, #23]
    MQTTStateCursor_t cursor = MQTT_STATE_CURSOR_INITIALIZER;
 800d48c:	2300      	movs	r3, #0
 800d48e:	613b      	str	r3, [r7, #16]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800d490:	2300      	movs	r3, #0
 800d492:	82bb      	strh	r3, [r7, #20]
    MQTTPublishState_t state = MQTTStateNull;
 800d494:	2300      	movs	r3, #0
 800d496:	73fb      	strb	r3, [r7, #15]

    assert( pContext != NULL );
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d106      	bne.n	800d4ac <handleSessionResumption+0x30>
 800d49e:	4b2c      	ldr	r3, [pc, #176]	; (800d550 <handleSessionResumption+0xd4>)
 800d4a0:	4a2c      	ldr	r2, [pc, #176]	; (800d554 <handleSessionResumption+0xd8>)
 800d4a2:	f640 1152 	movw	r1, #2386	; 0x952
 800d4a6:	482c      	ldr	r0, [pc, #176]	; (800d558 <handleSessionResumption+0xdc>)
 800d4a8:	f005 fd20 	bl	8012eec <__assert_func>

    /* Reset the index and clear the buffer when a new session is established. */
    pContext->index = 0;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) memset( pContext->networkBuffer.pBuffer, 0, pContext->networkBuffer.size );
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6a18      	ldr	r0, [r3, #32]
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	2100      	movs	r1, #0
 800d4be:	f005 fea0 	bl	8013202 <memset>

    if( sessionPresent == true )
 800d4c2:	78fb      	ldrb	r3, [r7, #3]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d023      	beq.n	800d510 <handleSessionResumption+0x94>
    {
        /* Get the next packet ID for which a PUBREL need to be resent. */
        packetId = MQTT_PubrelToResend( pContext, &cursor, &state );
 800d4c8:	f107 020f 	add.w	r2, r7, #15
 800d4cc:	f107 0310 	add.w	r3, r7, #16
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f002 f8ed 	bl	800f6b2 <MQTT_PubrelToResend>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	82bb      	strh	r3, [r7, #20]

        /* Resend all the PUBREL acks after session is reestablished. */
        while( ( packetId != MQTT_PACKET_ID_INVALID ) &&
 800d4dc:	e011      	b.n	800d502 <handleSessionResumption+0x86>
               ( status == MQTTSuccess ) )
        {
            status = sendPublishAcks( pContext, packetId, state );
 800d4de:	7bfa      	ldrb	r2, [r7, #15]
 800d4e0:	8abb      	ldrh	r3, [r7, #20]
 800d4e2:	4619      	mov	r1, r3
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f7ff f877 	bl	800c5d8 <sendPublishAcks>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	75fb      	strb	r3, [r7, #23]

            packetId = MQTT_PubrelToResend( pContext, &cursor, &state );
 800d4ee:	f107 020f 	add.w	r2, r7, #15
 800d4f2:	f107 0310 	add.w	r3, r7, #16
 800d4f6:	4619      	mov	r1, r3
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f002 f8da 	bl	800f6b2 <MQTT_PubrelToResend>
 800d4fe:	4603      	mov	r3, r0
 800d500:	82bb      	strh	r3, [r7, #20]
        while( ( packetId != MQTT_PACKET_ID_INVALID ) &&
 800d502:	8abb      	ldrh	r3, [r7, #20]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d01d      	beq.n	800d544 <handleSessionResumption+0xc8>
 800d508:	7dfb      	ldrb	r3, [r7, #23]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d0e7      	beq.n	800d4de <handleSessionResumption+0x62>
 800d50e:	e019      	b.n	800d544 <handleSessionResumption+0xc8>
        }
    }
    else
    {
        /* Clear any existing records if a new session is established. */
        if( pContext->outgoingPublishRecordMaxCount > 0U )
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	689b      	ldr	r3, [r3, #8]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d008      	beq.n	800d52a <handleSessionResumption+0xae>
        {
            ( void ) memset( pContext->outgoingPublishRecords,
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6818      	ldr	r0, [r3, #0]
                             0x00,
                             pContext->outgoingPublishRecordMaxCount * sizeof( *pContext->outgoingPublishRecords ) );
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	689b      	ldr	r3, [r3, #8]
            ( void ) memset( pContext->outgoingPublishRecords,
 800d520:	009b      	lsls	r3, r3, #2
 800d522:	461a      	mov	r2, r3
 800d524:	2100      	movs	r1, #0
 800d526:	f005 fe6c 	bl	8013202 <memset>
        }

        if( pContext->incomingPublishRecordMaxCount > 0U )
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	68db      	ldr	r3, [r3, #12]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d008      	beq.n	800d544 <handleSessionResumption+0xc8>
        {
            ( void ) memset( pContext->incomingPublishRecords,
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6858      	ldr	r0, [r3, #4]
                             0x00,
                             pContext->incomingPublishRecordMaxCount * sizeof( *pContext->incomingPublishRecords ) );
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	68db      	ldr	r3, [r3, #12]
            ( void ) memset( pContext->incomingPublishRecords,
 800d53a:	009b      	lsls	r3, r3, #2
 800d53c:	461a      	mov	r2, r3
 800d53e:	2100      	movs	r1, #0
 800d540:	f005 fe5f 	bl	8013202 <memset>
        }
    }

    return status;
 800d544:	7dfb      	ldrb	r3, [r7, #23]
}
 800d546:	4618      	mov	r0, r3
 800d548:	3718      	adds	r7, #24
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}
 800d54e:	bf00      	nop
 800d550:	08016fcc 	.word	0x08016fcc
 800d554:	08017c74 	.word	0x08017c74
 800d558:	08016ef0 	.word	0x08016ef0

0800d55c <validatePublishParams>:

static MQTTStatus_t validatePublishParams( const MQTTContext_t * pContext,
                                           const MQTTPublishInfo_t * pPublishInfo,
                                           uint16_t packetId )
{
 800d55c:	b480      	push	{r7}
 800d55e:	b087      	sub	sp, #28
 800d560:	af00      	add	r7, sp, #0
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	4613      	mov	r3, r2
 800d568:	80fb      	strh	r3, [r7, #6]
    MQTTStatus_t status = MQTTSuccess;
 800d56a:	2300      	movs	r3, #0
 800d56c:	75fb      	strb	r3, [r7, #23]

    /* Validate arguments. */
    if( ( pContext == NULL ) || ( pPublishInfo == NULL ) )
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d002      	beq.n	800d57a <validatePublishParams+0x1e>
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d102      	bne.n	800d580 <validatePublishParams+0x24>
    {
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pPublishInfo=%p.",
                    ( void * ) pContext,
                    ( void * ) pPublishInfo ) );
        status = MQTTBadParameter;
 800d57a:	2301      	movs	r3, #1
 800d57c:	75fb      	strb	r3, [r7, #23]
 800d57e:	e01e      	b.n	800d5be <validatePublishParams+0x62>
    }
    else if( ( pPublishInfo->qos != MQTTQoS0 ) && ( packetId == 0U ) )
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	781b      	ldrb	r3, [r3, #0]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d005      	beq.n	800d594 <validatePublishParams+0x38>
 800d588:	88fb      	ldrh	r3, [r7, #6]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d102      	bne.n	800d594 <validatePublishParams+0x38>
    {
        LogError( ( "Packet Id is 0 for PUBLISH with QoS=%u.",
                    ( unsigned int ) pPublishInfo->qos ) );
        status = MQTTBadParameter;
 800d58e:	2301      	movs	r3, #1
 800d590:	75fb      	strb	r3, [r7, #23]
 800d592:	e014      	b.n	800d5be <validatePublishParams+0x62>
    }
    else if( ( pPublishInfo->payloadLength > 0U ) && ( pPublishInfo->pPayload == NULL ) )
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	691b      	ldr	r3, [r3, #16]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d006      	beq.n	800d5aa <validatePublishParams+0x4e>
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	68db      	ldr	r3, [r3, #12]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d102      	bne.n	800d5aa <validatePublishParams+0x4e>
    {
        LogError( ( "A nonzero payload length requires a non-NULL payload: "
                    "payloadLength=%lu, pPayload=%p.",
                    ( unsigned long ) pPublishInfo->payloadLength,
                    pPublishInfo->pPayload ) );
        status = MQTTBadParameter;
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	75fb      	strb	r3, [r7, #23]
 800d5a8:	e009      	b.n	800d5be <validatePublishParams+0x62>
    }
    else if( ( pContext->outgoingPublishRecords == NULL ) && ( pPublishInfo->qos > MQTTQoS0 ) )
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d105      	bne.n	800d5be <validatePublishParams+0x62>
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	781b      	ldrb	r3, [r3, #0]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d001      	beq.n	800d5be <validatePublishParams+0x62>
    {
        LogError( ( "Trying to publish a QoS > MQTTQoS0 packet when outgoing publishes "
                    "for QoS1/QoS2 have not been enabled. Please, call MQTT_InitStatefulQoS "
                    "to initialize and enable the use of QoS1/QoS2 publishes." ) );
        status = MQTTBadParameter;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* MISRA else */
    }

    return status;
 800d5be:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	371c      	adds	r7, #28
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <MQTT_Init>:
MQTTStatus_t MQTT_Init( MQTTContext_t * pContext,
                        const TransportInterface_t * pTransportInterface,
                        MQTTGetCurrentTimeFunc_t getTimeFunction,
                        MQTTEventCallback_t userCallback,
                        const MQTTFixedBuffer_t * pNetworkBuffer )
{
 800d5cc:	b590      	push	{r4, r7, lr}
 800d5ce:	b087      	sub	sp, #28
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	60b9      	str	r1, [r7, #8]
 800d5d6:	607a      	str	r2, [r7, #4]
 800d5d8:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	75fb      	strb	r3, [r7, #23]

    /* Validate arguments. */
    if( ( pContext == NULL ) || ( pTransportInterface == NULL ) ||
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d005      	beq.n	800d5f0 <MQTT_Init+0x24>
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d002      	beq.n	800d5f0 <MQTT_Init+0x24>
 800d5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d102      	bne.n	800d5f6 <MQTT_Init+0x2a>
                    "pTransportInterface=%p, "
                    "pNetworkBuffer=%p",
                    ( void * ) pContext,
                    ( void * ) pTransportInterface,
                    ( void * ) pNetworkBuffer ) );
        status = MQTTBadParameter;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	75fb      	strb	r3, [r7, #23]
 800d5f4:	e03a      	b.n	800d66c <MQTT_Init+0xa0>
    }
    else if( getTimeFunction == NULL )
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d102      	bne.n	800d602 <MQTT_Init+0x36>
    {
        LogError( ( "Invalid parameter: getTimeFunction is NULL" ) );
        status = MQTTBadParameter;
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	75fb      	strb	r3, [r7, #23]
 800d600:	e034      	b.n	800d66c <MQTT_Init+0xa0>
    }
    else if( userCallback == NULL )
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d102      	bne.n	800d60e <MQTT_Init+0x42>
    {
        LogError( ( "Invalid parameter: userCallback is NULL" ) );
        status = MQTTBadParameter;
 800d608:	2301      	movs	r3, #1
 800d60a:	75fb      	strb	r3, [r7, #23]
 800d60c:	e02e      	b.n	800d66c <MQTT_Init+0xa0>
    }
    else if( pTransportInterface->recv == NULL )
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d102      	bne.n	800d61c <MQTT_Init+0x50>
    {
        LogError( ( "Invalid parameter: pTransportInterface->recv is NULL" ) );
        status = MQTTBadParameter;
 800d616:	2301      	movs	r3, #1
 800d618:	75fb      	strb	r3, [r7, #23]
 800d61a:	e027      	b.n	800d66c <MQTT_Init+0xa0>
    }
    else if( pTransportInterface->send == NULL )
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	685b      	ldr	r3, [r3, #4]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d102      	bne.n	800d62a <MQTT_Init+0x5e>
    {
        LogError( ( "Invalid parameter: pTransportInterface->send is NULL" ) );
        status = MQTTBadParameter;
 800d624:	2301      	movs	r3, #1
 800d626:	75fb      	strb	r3, [r7, #23]
 800d628:	e020      	b.n	800d66c <MQTT_Init+0xa0>
    }
    else
    {
        ( void ) memset( pContext, 0x00, sizeof( MQTTContext_t ) );
 800d62a:	2250      	movs	r2, #80	; 0x50
 800d62c:	2100      	movs	r1, #0
 800d62e:	68f8      	ldr	r0, [r7, #12]
 800d630:	f005 fde7 	bl	8013202 <memset>

        pContext->connectStatus = MQTTNotConnected;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2200      	movs	r2, #0
 800d638:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        pContext->transportInterface = *pTransportInterface;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	68ba      	ldr	r2, [r7, #8]
 800d640:	f103 0410 	add.w	r4, r3, #16
 800d644:	4613      	mov	r3, r2
 800d646:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d648:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        pContext->getTime = getTimeFunction;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	687a      	ldr	r2, [r7, #4]
 800d650:	62da      	str	r2, [r3, #44]	; 0x2c
        pContext->appCallback = userCallback;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	683a      	ldr	r2, [r7, #0]
 800d656:	631a      	str	r2, [r3, #48]	; 0x30
        pContext->networkBuffer = *pNetworkBuffer;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d65c:	3320      	adds	r3, #32
 800d65e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d662:	e883 0003 	stmia.w	r3, {r0, r1}

        /* Zero is not a valid packet ID per MQTT spec. Start from 1. */
        pContext->nextPacketId = 1;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2201      	movs	r2, #1
 800d66a:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    return status;
 800d66c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d66e:	4618      	mov	r0, r3
 800d670:	371c      	adds	r7, #28
 800d672:	46bd      	mov	sp, r7
 800d674:	bd90      	pop	{r4, r7, pc}

0800d676 <MQTT_Connect>:
MQTTStatus_t MQTT_Connect( MQTTContext_t * pContext,
                           const MQTTConnectInfo_t * pConnectInfo,
                           const MQTTPublishInfo_t * pWillInfo,
                           uint32_t timeoutMs,
                           bool * pSessionPresent )
{
 800d676:	b580      	push	{r7, lr}
 800d678:	b08e      	sub	sp, #56	; 0x38
 800d67a:	af02      	add	r7, sp, #8
 800d67c:	60f8      	str	r0, [r7, #12]
 800d67e:	60b9      	str	r1, [r7, #8]
 800d680:	607a      	str	r2, [r7, #4]
 800d682:	603b      	str	r3, [r7, #0]
    size_t remainingLength = 0UL, packetSize = 0UL;
 800d684:	2300      	movs	r3, #0
 800d686:	62bb      	str	r3, [r7, #40]	; 0x28
 800d688:	2300      	movs	r3, #0
 800d68a:	627b      	str	r3, [r7, #36]	; 0x24
    MQTTStatus_t status = MQTTSuccess;
 800d68c:	2300      	movs	r3, #0
 800d68e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    MQTTPacketInfo_t incomingPacket = { 0 };
 800d692:	f107 0314 	add.w	r3, r7, #20
 800d696:	2200      	movs	r2, #0
 800d698:	601a      	str	r2, [r3, #0]
 800d69a:	605a      	str	r2, [r3, #4]
 800d69c:	609a      	str	r2, [r3, #8]
 800d69e:	60da      	str	r2, [r3, #12]

    incomingPacket.type = ( uint8_t ) 0;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	753b      	strb	r3, [r7, #20]

    if( ( pContext == NULL ) || ( pConnectInfo == NULL ) || ( pSessionPresent == NULL ) )
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d005      	beq.n	800d6b6 <MQTT_Connect+0x40>
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d002      	beq.n	800d6b6 <MQTT_Connect+0x40>
 800d6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d102      	bne.n	800d6bc <MQTT_Connect+0x46>
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pConnectInfo=%p, pSessionPresent=%p.",
                    ( void * ) pContext,
                    ( void * ) pConnectInfo,
                    ( void * ) pSessionPresent ) );
        status = MQTTBadParameter;
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800d6bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d10a      	bne.n	800d6da <MQTT_Connect+0x64>
    {
        /* Get MQTT connect packet size and remaining length. */
        status = MQTT_GetConnectPacketSize( pConnectInfo,
 800d6c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d6c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d6cc:	6879      	ldr	r1, [r7, #4]
 800d6ce:	68b8      	ldr	r0, [r7, #8]
 800d6d0:	f000 ffba 	bl	800e648 <MQTT_GetConnectPacketSize>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        LogDebug( ( "CONNECT packet size is %lu and remaining length is %lu.",
                    ( unsigned long ) packetSize,
                    ( unsigned long ) remainingLength ) );
    }

    if( status == MQTTSuccess )
 800d6da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d108      	bne.n	800d6f4 <MQTT_Connect+0x7e>
    {
        MQTT_PRE_SEND_HOOK( pContext );

        status = sendConnectWithoutCopy( pContext,
 800d6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e4:	687a      	ldr	r2, [r7, #4]
 800d6e6:	68b9      	ldr	r1, [r7, #8]
 800d6e8:	68f8      	ldr	r0, [r7, #12]
 800d6ea:	f7ff fce9 	bl	800d0c0 <sendConnectWithoutCopy>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        MQTT_POST_SEND_HOOK( pContext );
    }

    /* Read CONNACK from transport layer. */
    if( status == MQTTSuccess )
 800d6f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d10d      	bne.n	800d718 <MQTT_Connect+0xa2>
    {
        status = receiveConnack( pContext,
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	781a      	ldrb	r2, [r3, #0]
 800d700:	f107 0114 	add.w	r1, r7, #20
 800d704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d706:	9300      	str	r3, [sp, #0]
 800d708:	460b      	mov	r3, r1
 800d70a:	6839      	ldr	r1, [r7, #0]
 800d70c:	68f8      	ldr	r0, [r7, #12]
 800d70e:	f7ff fdf3 	bl	800d2f8 <receiveConnack>
 800d712:	4603      	mov	r3, r0
 800d714:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 pConnectInfo->cleanSession,
                                 &incomingPacket,
                                 pSessionPresent );
    }

    if( status == MQTTSuccess )
 800d718:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d108      	bne.n	800d732 <MQTT_Connect+0xbc>
    {
        /* Resend PUBRELs when reestablishing a session, or clear records for new sessions. */
        status = handleSessionResumption( pContext, *pSessionPresent );
 800d720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	4619      	mov	r1, r3
 800d726:	68f8      	ldr	r0, [r7, #12]
 800d728:	f7ff fea8 	bl	800d47c <handleSessionResumption>
 800d72c:	4603      	mov	r3, r0
 800d72e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800d732:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d736:	2b00      	cmp	r3, #0
 800d738:	d10f      	bne.n	800d75a <MQTT_Connect+0xe4>
    {
        LogInfo( ( "MQTT connection established with the broker." ) );
        pContext->connectStatus = MQTTConnected;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2201      	movs	r2, #1
 800d73e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        /* Initialize keep-alive fields after a successful connection. */
        pContext->keepAliveIntervalSec = pConnectInfo->keepAliveSeconds;
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	885a      	ldrh	r2, [r3, #2]
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        pContext->waitingForPingResp = false;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2200      	movs	r2, #0
 800d750:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pContext->pingReqSendTimeMs = 0U;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	2200      	movs	r2, #0
 800d758:	649a      	str	r2, [r3, #72]	; 0x48
    {
        LogError( ( "MQTT connection failed with status = %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800d75a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3730      	adds	r7, #48	; 0x30
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}

0800d766 <MQTT_Subscribe>:

MQTTStatus_t MQTT_Subscribe( MQTTContext_t * pContext,
                             const MQTTSubscribeInfo_t * pSubscriptionList,
                             size_t subscriptionCount,
                             uint16_t packetId )
{
 800d766:	b580      	push	{r7, lr}
 800d768:	b08a      	sub	sp, #40	; 0x28
 800d76a:	af02      	add	r7, sp, #8
 800d76c:	60f8      	str	r0, [r7, #12]
 800d76e:	60b9      	str	r1, [r7, #8]
 800d770:	607a      	str	r2, [r7, #4]
 800d772:	807b      	strh	r3, [r7, #2]
    size_t remainingLength = 0UL, packetSize = 0UL;
 800d774:	2300      	movs	r3, #0
 800d776:	61bb      	str	r3, [r7, #24]
 800d778:	2300      	movs	r3, #0
 800d77a:	617b      	str	r3, [r7, #20]

    /* Validate arguments. */
    MQTTStatus_t status = validateSubscribeUnsubscribeParams( pContext,
 800d77c:	887b      	ldrh	r3, [r7, #2]
 800d77e:	687a      	ldr	r2, [r7, #4]
 800d780:	68b9      	ldr	r1, [r7, #8]
 800d782:	68f8      	ldr	r0, [r7, #12]
 800d784:	f7ff face 	bl	800cd24 <validateSubscribeUnsubscribeParams>
 800d788:	4603      	mov	r3, r0
 800d78a:	77fb      	strb	r3, [r7, #31]
                                                              pSubscriptionList,
                                                              subscriptionCount,
                                                              packetId );

    if( status == MQTTSuccess )
 800d78c:	7ffb      	ldrb	r3, [r7, #31]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d109      	bne.n	800d7a6 <MQTT_Subscribe+0x40>
    {
        /* Get the remaining length and packet size.*/
        status = MQTT_GetSubscribePacketSize( pSubscriptionList,
 800d792:	f107 0314 	add.w	r3, r7, #20
 800d796:	f107 0218 	add.w	r2, r7, #24
 800d79a:	6879      	ldr	r1, [r7, #4]
 800d79c:	68b8      	ldr	r0, [r7, #8]
 800d79e:	f000 ffbf 	bl	800e720 <MQTT_GetSubscribePacketSize>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	77fb      	strb	r3, [r7, #31]
        LogDebug( ( "SUBSCRIBE packet size is %lu and remaining length is %lu.",
                    ( unsigned long ) packetSize,
                    ( unsigned long ) remainingLength ) );
    }

    if( status == MQTTSuccess )
 800d7a6:	7ffb      	ldrb	r3, [r7, #31]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d10a      	bne.n	800d7c2 <MQTT_Subscribe+0x5c>
    {
        MQTT_PRE_SEND_HOOK( pContext );

        /* Send MQTT SUBSCRIBE packet. */
        status = sendSubscribeWithoutCopy( pContext,
 800d7ac:	69bb      	ldr	r3, [r7, #24]
 800d7ae:	887a      	ldrh	r2, [r7, #2]
 800d7b0:	9300      	str	r3, [sp, #0]
 800d7b2:	4613      	mov	r3, r2
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	68b9      	ldr	r1, [r7, #8]
 800d7b8:	68f8      	ldr	r0, [r7, #12]
 800d7ba:	f7ff fb51 	bl	800ce60 <sendSubscribeWithoutCopy>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	77fb      	strb	r3, [r7, #31]
                                           remainingLength );

        MQTT_POST_SEND_HOOK( pContext );
    }

    return status;
 800d7c2:	7ffb      	ldrb	r3, [r7, #31]
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3720      	adds	r7, #32
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <MQTT_Publish>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_Publish( MQTTContext_t * pContext,
                           const MQTTPublishInfo_t * pPublishInfo,
                           uint16_t packetId )
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b08c      	sub	sp, #48	; 0x30
 800d7d0:	af02      	add	r7, sp, #8
 800d7d2:	60f8      	str	r0, [r7, #12]
 800d7d4:	60b9      	str	r1, [r7, #8]
 800d7d6:	4613      	mov	r3, r2
 800d7d8:	80fb      	strh	r3, [r7, #6]
    size_t headerSize = 0UL;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	623b      	str	r3, [r7, #32]
    size_t remainingLength = 0UL;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	61fb      	str	r3, [r7, #28]
    size_t packetSize = 0UL;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	61bb      	str	r3, [r7, #24]
    MQTTPublishState_t publishStatus = MQTTStateNull;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	75fb      	strb	r3, [r7, #23]
    bool stateUpdateHookExecuted = false;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* 1 header byte + 4 bytes (maximum) required for encoding the length +
     * 2 bytes for topic string. */
    uint8_t mqttHeader[ 7 ];

    /* Validate arguments. */
    MQTTStatus_t status = validatePublishParams( pContext, pPublishInfo, packetId );
 800d7f0:	88fb      	ldrh	r3, [r7, #6]
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	68b9      	ldr	r1, [r7, #8]
 800d7f6:	68f8      	ldr	r0, [r7, #12]
 800d7f8:	f7ff feb0 	bl	800d55c <validatePublishParams>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == MQTTSuccess )
 800d802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d806:	2b00      	cmp	r3, #0
 800d808:	d10a      	bne.n	800d820 <MQTT_Publish+0x54>
    {
        /* Get the remaining length and packet size.*/
        status = MQTT_GetPublishPacketSize( pPublishInfo,
 800d80a:	f107 0218 	add.w	r2, r7, #24
 800d80e:	f107 031c 	add.w	r3, r7, #28
 800d812:	4619      	mov	r1, r3
 800d814:	68b8      	ldr	r0, [r7, #8]
 800d816:	f000 ffd4 	bl	800e7c2 <MQTT_GetPublishPacketSize>
 800d81a:	4603      	mov	r3, r0
 800d81c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                            &remainingLength,
                                            &packetSize );
    }

    if( status == MQTTSuccess )
 800d820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d824:	2b00      	cmp	r3, #0
 800d826:	d10a      	bne.n	800d83e <MQTT_Publish+0x72>
    {
        status = MQTT_SerializePublishHeaderWithoutTopic( pPublishInfo,
 800d828:	69f9      	ldr	r1, [r7, #28]
 800d82a:	f107 0320 	add.w	r3, r7, #32
 800d82e:	f107 0210 	add.w	r2, r7, #16
 800d832:	68b8      	ldr	r0, [r7, #8]
 800d834:	f000 f9ec 	bl	800dc10 <MQTT_SerializePublishHeaderWithoutTopic>
 800d838:	4603      	mov	r3, r0
 800d83a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                          remainingLength,
                                                          mqttHeader,
                                                          &headerSize );
    }

    if( ( status == MQTTSuccess ) && ( pPublishInfo->qos > MQTTQoS0 ) )
 800d83e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d842:	2b00      	cmp	r3, #0
 800d844:	d11b      	bne.n	800d87e <MQTT_Publish+0xb2>
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d017      	beq.n	800d87e <MQTT_Publish+0xb2>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        /* Set the flag so that the corresponding hook can be called later. */
        stateUpdateHookExecuted = true;
 800d84e:	2301      	movs	r3, #1
 800d850:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        status = MQTT_ReserveState( pContext,
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	781a      	ldrb	r2, [r3, #0]
 800d858:	88fb      	ldrh	r3, [r7, #6]
 800d85a:	4619      	mov	r1, r3
 800d85c:	68f8      	ldr	r0, [r7, #12]
 800d85e:	f001 fde1 	bl	800f424 <MQTT_ReserveState>
 800d862:	4603      	mov	r3, r0
 800d864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                    pPublishInfo->qos );

        /* State already exists for a duplicate packet.
         * If a state doesn't exist, it will be handled as a new publish in
         * state engine. */
        if( ( status == MQTTStateCollision ) && ( pPublishInfo->dup == true ) )
 800d868:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d86c:	2b09      	cmp	r3, #9
 800d86e:	d106      	bne.n	800d87e <MQTT_Publish+0xb2>
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	789b      	ldrb	r3, [r3, #2]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d002      	beq.n	800d87e <MQTT_Publish+0xb2>
        {
            status = MQTTSuccess;
 800d878:	2300      	movs	r3, #0
 800d87a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    if( status == MQTTSuccess )
 800d87e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d882:	2b00      	cmp	r3, #0
 800d884:	d10c      	bne.n	800d8a0 <MQTT_Publish+0xd4>
    {
        /* Take the mutex as multiple send calls are required for sending this
         * packet. */
        MQTT_PRE_SEND_HOOK( pContext );

        status = sendPublishWithoutCopy( pContext,
 800d886:	6a39      	ldr	r1, [r7, #32]
 800d888:	f107 0210 	add.w	r2, r7, #16
 800d88c:	88fb      	ldrh	r3, [r7, #6]
 800d88e:	9300      	str	r3, [sp, #0]
 800d890:	460b      	mov	r3, r1
 800d892:	68b9      	ldr	r1, [r7, #8]
 800d894:	68f8      	ldr	r0, [r7, #12]
 800d896:	f7ff fb9d 	bl	800cfd4 <sendPublishWithoutCopy>
 800d89a:	4603      	mov	r3, r0
 800d89c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Give the mutex away for the next taker. */
        MQTT_POST_SEND_HOOK( pContext );
    }

    if( ( status == MQTTSuccess ) &&
 800d8a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d111      	bne.n	800d8cc <MQTT_Publish+0x100>
        ( pPublishInfo->qos > MQTTQoS0 ) )
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	781b      	ldrb	r3, [r3, #0]
    if( ( status == MQTTSuccess ) &&
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d00d      	beq.n	800d8cc <MQTT_Publish+0x100>
    {
        /* Update state machine after PUBLISH is sent.
         * Only to be done for QoS1 or QoS2. */
        status = MQTT_UpdateStatePublish( pContext,
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	781a      	ldrb	r2, [r3, #0]
 800d8b4:	88f9      	ldrh	r1, [r7, #6]
 800d8b6:	f107 0317 	add.w	r3, r7, #23
 800d8ba:	9300      	str	r3, [sp, #0]
 800d8bc:	4613      	mov	r3, r2
 800d8be:	2200      	movs	r2, #0
 800d8c0:	68f8      	ldr	r0, [r7, #12]
 800d8c2:	f001 fe08 	bl	800f4d6 <MQTT_UpdateStatePublish>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        LogError( ( "MQTT PUBLISH failed with status %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800d8cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3728      	adds	r7, #40	; 0x28
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}

0800d8d8 <MQTT_Ping>:

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_Ping( MQTTContext_t * pContext )
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b088      	sub	sp, #32
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
    int32_t sendResult = 0;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	61bb      	str	r3, [r7, #24]
    MQTTStatus_t status = MQTTSuccess;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	77fb      	strb	r3, [r7, #31]
    size_t packetSize = 0U;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	617b      	str	r3, [r7, #20]
    /* MQTT ping packets are of fixed length. */
    uint8_t pingreqPacket[ 2U ];
    MQTTFixedBuffer_t localBuffer;

    localBuffer.pBuffer = pingreqPacket;
 800d8ec:	f107 0310 	add.w	r3, r7, #16
 800d8f0:	60bb      	str	r3, [r7, #8]
    localBuffer.size = 2U;
 800d8f2:	2302      	movs	r3, #2
 800d8f4:	60fb      	str	r3, [r7, #12]

    if( pContext == NULL )
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d101      	bne.n	800d900 <MQTT_Ping+0x28>
    {
        LogError( ( "pContext is NULL." ) );
        status = MQTTBadParameter;
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800d900:	7ffb      	ldrb	r3, [r7, #31]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d106      	bne.n	800d914 <MQTT_Ping+0x3c>
    {
        /* Get MQTT PINGREQ packet size. */
        status = MQTT_GetPingreqPacketSize( &packetSize );
 800d906:	f107 0314 	add.w	r3, r7, #20
 800d90a:	4618      	mov	r0, r3
 800d90c:	f000 ffdd 	bl	800e8ca <MQTT_GetPingreqPacketSize>
 800d910:	4603      	mov	r3, r0
 800d912:	77fb      	strb	r3, [r7, #31]
        {
            LogError( ( "Failed to get the PINGREQ packet size." ) );
        }
    }

    if( status == MQTTSuccess )
 800d914:	7ffb      	ldrb	r3, [r7, #31]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d106      	bne.n	800d928 <MQTT_Ping+0x50>
    {
        /* Serialize MQTT PINGREQ. */
        status = MQTT_SerializePingreq( &localBuffer );
 800d91a:	f107 0308 	add.w	r3, r7, #8
 800d91e:	4618      	mov	r0, r3
 800d920:	f000 ffe9 	bl	800e8f6 <MQTT_SerializePingreq>
 800d924:	4603      	mov	r3, r0
 800d926:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800d928:	7ffb      	ldrb	r3, [r7, #31]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d116      	bne.n	800d95c <MQTT_Ping+0x84>
        /* Send the serialized PINGREQ packet to transport layer.
         * Here, we do not use the vectored IO approach for efficiency as the
         * Ping packet does not have numerous fields which need to be copied
         * from the user provided buffers. Thus it can be sent directly. */
        sendResult = sendBuffer( pContext,
                                 localBuffer.pBuffer,
 800d92e:	68bb      	ldr	r3, [r7, #8]
        sendResult = sendBuffer( pContext,
 800d930:	2202      	movs	r2, #2
 800d932:	4619      	mov	r1, r3
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f7fe fb4b 	bl	800bfd0 <sendBuffer>
 800d93a:	61b8      	str	r0, [r7, #24]

        /* Give the mutex away. */
        MQTT_POST_SEND_HOOK( pContext );

        /* It is an error to not send the entire PINGREQ packet. */
        if( sendResult < ( int32_t ) packetSize )
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	461a      	mov	r2, r3
 800d940:	69bb      	ldr	r3, [r7, #24]
 800d942:	4293      	cmp	r3, r2
 800d944:	da02      	bge.n	800d94c <MQTT_Ping+0x74>
        {
            LogError( ( "Transport send failed for PINGREQ packet." ) );
            status = MQTTSendFailed;
 800d946:	2303      	movs	r3, #3
 800d948:	77fb      	strb	r3, [r7, #31]
 800d94a:	e007      	b.n	800d95c <MQTT_Ping+0x84>
        }
        else
        {
            pContext->pingReqSendTimeMs = pContext->lastPacketTxTime;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	649a      	str	r2, [r3, #72]	; 0x48
            pContext->waitingForPingResp = true;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2201      	movs	r2, #1
 800d958:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            LogDebug( ( "Sent %ld bytes of PINGREQ packet.",
                        ( long int ) sendResult ) );
        }
    }

    return status;
 800d95c:	7ffb      	ldrb	r3, [r7, #31]
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3720      	adds	r7, #32
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}

0800d966 <MQTT_ProcessLoop>:
}

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ProcessLoop( MQTTContext_t * pContext )
{
 800d966:	b580      	push	{r7, lr}
 800d968:	b084      	sub	sp, #16
 800d96a:	af00      	add	r7, sp, #0
 800d96c:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTBadParameter;
 800d96e:	2301      	movs	r3, #1
 800d970:	73fb      	strb	r3, [r7, #15]

    if( pContext == NULL )
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d011      	beq.n	800d99c <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: MQTT Context cannot be NULL." ) );
    }
    else if( pContext->getTime == NULL )
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d00d      	beq.n	800d99c <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: MQTT Context must have valid getTime." ) );
    }
    else if( pContext->networkBuffer.pBuffer == NULL )
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6a1b      	ldr	r3, [r3, #32]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d009      	beq.n	800d99c <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: The MQTT context's networkBuffer must not be NULL." ) );
    }
    else
    {
        pContext->controlPacketSent = false;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2200      	movs	r2, #0
 800d98c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        status = receiveSingleIteration( pContext, true );
 800d990:	2101      	movs	r1, #1
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f7ff f8da 	bl	800cb4c <receiveSingleIteration>
 800d998:	4603      	mov	r3, r0
 800d99a:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800d99c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3710      	adds	r7, #16
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}

0800d9a6 <MQTT_GetPacketId>:
}

/*-----------------------------------------------------------*/

uint16_t MQTT_GetPacketId( MQTTContext_t * pContext )
{
 800d9a6:	b480      	push	{r7}
 800d9a8:	b085      	sub	sp, #20
 800d9aa:	af00      	add	r7, sp, #0
 800d9ac:	6078      	str	r0, [r7, #4]
    uint16_t packetId = 0U;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	81fb      	strh	r3, [r7, #14]

    if( pContext != NULL )
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d012      	beq.n	800d9de <MQTT_GetPacketId+0x38>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        packetId = pContext->nextPacketId;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9bc:	81fb      	strh	r3, [r7, #14]

        /* A packet ID of zero is not a valid packet ID. When the max ID
         * is reached the next one should start at 1. */
        if( pContext->nextPacketId == ( uint16_t ) UINT16_MAX )
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	d103      	bne.n	800d9d2 <MQTT_GetPacketId+0x2c>
        {
            pContext->nextPacketId = 1;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2201      	movs	r2, #1
 800d9ce:	851a      	strh	r2, [r3, #40]	; 0x28
 800d9d0:	e005      	b.n	800d9de <MQTT_GetPacketId+0x38>
        }
        else
        {
            pContext->nextPacketId++;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9d6:	3301      	adds	r3, #1
 800d9d8:	b29a      	uxth	r2, r3
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	851a      	strh	r2, [r3, #40]	; 0x28
        }

        MQTT_POST_STATE_UPDATE_HOOK( pContext );
    }

    return packetId;
 800d9de:	89fb      	ldrh	r3, [r7, #14]
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3714      	adds	r7, #20
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr

0800d9ec <remainingLengthEncodedSize>:
static MQTTStatus_t deserializePingresp( const MQTTPacketInfo_t * pPingresp );

/*-----------------------------------------------------------*/

static size_t remainingLengthEncodedSize( size_t length )
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b085      	sub	sp, #20
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]

    /* Determine how many bytes are needed to encode length.
     * The values below are taken from the MQTT 3.1.1 spec. */

    /* 1 byte is needed to encode lengths between 0 and 127. */
    if( length < 128U )
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2b7f      	cmp	r3, #127	; 0x7f
 800d9f8:	d802      	bhi.n	800da00 <remainingLengthEncodedSize+0x14>
    {
        encodedSize = 1U;
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	60fb      	str	r3, [r7, #12]
 800d9fe:	e00f      	b.n	800da20 <remainingLengthEncodedSize+0x34>
    }
    /* 2 bytes are needed to encode lengths between 128 and 16,383. */
    else if( length < 16384U )
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800da06:	d202      	bcs.n	800da0e <remainingLengthEncodedSize+0x22>
    {
        encodedSize = 2U;
 800da08:	2302      	movs	r3, #2
 800da0a:	60fb      	str	r3, [r7, #12]
 800da0c:	e008      	b.n	800da20 <remainingLengthEncodedSize+0x34>
    }
    /* 3 bytes are needed to encode lengths between 16,384 and 2,097,151. */
    else if( length < 2097152U )
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800da14:	d202      	bcs.n	800da1c <remainingLengthEncodedSize+0x30>
    {
        encodedSize = 3U;
 800da16:	2303      	movs	r3, #3
 800da18:	60fb      	str	r3, [r7, #12]
 800da1a:	e001      	b.n	800da20 <remainingLengthEncodedSize+0x34>
    }
    /* 4 bytes are needed to encode lengths between 2,097,152 and 268,435,455. */
    else
    {
        encodedSize = 4U;
 800da1c:	2304      	movs	r3, #4
 800da1e:	60fb      	str	r3, [r7, #12]

    LogDebug( ( "Encoded size for length %lu is %lu bytes.",
                ( unsigned long ) length,
                ( unsigned long ) encodedSize ) );

    return encodedSize;
 800da20:	68fb      	ldr	r3, [r7, #12]
}
 800da22:	4618      	mov	r0, r3
 800da24:	3714      	adds	r7, #20
 800da26:	46bd      	mov	sp, r7
 800da28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2c:	4770      	bx	lr
	...

0800da30 <encodeRemainingLength>:

/*-----------------------------------------------------------*/

static uint8_t * encodeRemainingLength( uint8_t * pDestination,
                                        size_t length )
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b086      	sub	sp, #24
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	6039      	str	r1, [r7, #0]
    uint8_t lengthByte;
    uint8_t * pLengthEnd = NULL;
 800da3a:	2300      	movs	r3, #0
 800da3c:	613b      	str	r3, [r7, #16]
    size_t remainingLength = length;
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	60fb      	str	r3, [r7, #12]

    assert( pDestination != NULL );
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d106      	bne.n	800da56 <encodeRemainingLength+0x26>
 800da48:	4b12      	ldr	r3, [pc, #72]	; (800da94 <encodeRemainingLength+0x64>)
 800da4a:	4a13      	ldr	r2, [pc, #76]	; (800da98 <encodeRemainingLength+0x68>)
 800da4c:	f240 11f1 	movw	r1, #497	; 0x1f1
 800da50:	4812      	ldr	r0, [pc, #72]	; (800da9c <encodeRemainingLength+0x6c>)
 800da52:	f005 fa4b 	bl	8012eec <__assert_func>

    pLengthEnd = pDestination;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	613b      	str	r3, [r7, #16]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        lengthByte = ( uint8_t ) ( remainingLength % 128U );
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	b2db      	uxtb	r3, r3
 800da5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da62:	75fb      	strb	r3, [r7, #23]
        remainingLength = remainingLength / 128U;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	09db      	lsrs	r3, r3, #7
 800da68:	60fb      	str	r3, [r7, #12]

        /* Set the high bit of this byte, indicating that there's more data. */
        if( remainingLength > 0U )
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d003      	beq.n	800da78 <encodeRemainingLength+0x48>
        {
            UINT8_SET_BIT( lengthByte, 7 );
 800da70:	7dfb      	ldrb	r3, [r7, #23]
 800da72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800da76:	75fb      	strb	r3, [r7, #23]
        }

        /* Output a single encoded byte. */
        *pLengthEnd = lengthByte;
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	7dfa      	ldrb	r2, [r7, #23]
 800da7c:	701a      	strb	r2, [r3, #0]
        pLengthEnd++;
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	3301      	adds	r3, #1
 800da82:	613b      	str	r3, [r7, #16]
    } while( remainingLength > 0U );
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d1e7      	bne.n	800da5a <encodeRemainingLength+0x2a>

    return pLengthEnd;
 800da8a:	693b      	ldr	r3, [r7, #16]
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3718      	adds	r7, #24
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}
 800da94:	08017474 	.word	0x08017474
 800da98:	08017c8c 	.word	0x08017c8c
 800da9c:	0801748c 	.word	0x0801748c

0800daa0 <encodeString>:
/*-----------------------------------------------------------*/

static uint8_t * encodeString( uint8_t * pDestination,
                               const char * pSource,
                               uint16_t sourceLength )
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b086      	sub	sp, #24
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	60f8      	str	r0, [r7, #12]
 800daa8:	60b9      	str	r1, [r7, #8]
 800daaa:	4613      	mov	r3, r2
 800daac:	80fb      	strh	r3, [r7, #6]
    uint8_t * pBuffer = NULL;
 800daae:	2300      	movs	r3, #0
 800dab0:	617b      	str	r3, [r7, #20]

    /* Typecast const char * typed source buffer to const uint8_t *.
     * This is to use same type buffers in memcpy. */
    const uint8_t * pSourceBuffer = ( const uint8_t * ) pSource;
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	613b      	str	r3, [r7, #16]

    assert( pDestination != NULL );
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d106      	bne.n	800daca <encodeString+0x2a>
 800dabc:	4b15      	ldr	r3, [pc, #84]	; (800db14 <encodeString+0x74>)
 800dabe:	4a16      	ldr	r2, [pc, #88]	; (800db18 <encodeString+0x78>)
 800dac0:	f240 2115 	movw	r1, #533	; 0x215
 800dac4:	4815      	ldr	r0, [pc, #84]	; (800db1c <encodeString+0x7c>)
 800dac6:	f005 fa11 	bl	8012eec <__assert_func>

    pBuffer = pDestination;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	617b      	str	r3, [r7, #20]

    /* The first byte of a UTF-8 string is the high byte of the string length. */
    *pBuffer = UINT16_HIGH_BYTE( sourceLength );
 800dace:	88fb      	ldrh	r3, [r7, #6]
 800dad0:	0a1b      	lsrs	r3, r3, #8
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	b2da      	uxtb	r2, r3
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	3301      	adds	r3, #1
 800dade:	617b      	str	r3, [r7, #20]

    /* The second byte of a UTF-8 string is the low byte of the string length. */
    *pBuffer = UINT16_LOW_BYTE( sourceLength );
 800dae0:	88fb      	ldrh	r3, [r7, #6]
 800dae2:	b2da      	uxtb	r2, r3
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	3301      	adds	r3, #1
 800daec:	617b      	str	r3, [r7, #20]

    /* Copy the string into pBuffer. */
    if( pSourceBuffer != NULL )
 800daee:	693b      	ldr	r3, [r7, #16]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d005      	beq.n	800db00 <encodeString+0x60>
    {
        ( void ) memcpy( pBuffer, pSourceBuffer, sourceLength );
 800daf4:	88fb      	ldrh	r3, [r7, #6]
 800daf6:	461a      	mov	r2, r3
 800daf8:	6939      	ldr	r1, [r7, #16]
 800dafa:	6978      	ldr	r0, [r7, #20]
 800dafc:	f005 fb59 	bl	80131b2 <memcpy>
    }

    /* Return the pointer to the end of the encoded string. */
    pBuffer = &pBuffer[ sourceLength ];
 800db00:	88fb      	ldrh	r3, [r7, #6]
 800db02:	697a      	ldr	r2, [r7, #20]
 800db04:	4413      	add	r3, r2
 800db06:	617b      	str	r3, [r7, #20]

    return pBuffer;
 800db08:	697b      	ldr	r3, [r7, #20]
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3718      	adds	r7, #24
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}
 800db12:	bf00      	nop
 800db14:	08017474 	.word	0x08017474
 800db18:	08017ca4 	.word	0x08017ca4
 800db1c:	0801748c 	.word	0x0801748c

0800db20 <calculatePublishPacketSize>:
/*-----------------------------------------------------------*/

static bool calculatePublishPacketSize( const MQTTPublishInfo_t * pPublishInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b088      	sub	sp, #32
 800db24:	af00      	add	r7, sp, #0
 800db26:	60f8      	str	r0, [r7, #12]
 800db28:	60b9      	str	r1, [r7, #8]
 800db2a:	607a      	str	r2, [r7, #4]
    bool status = true;
 800db2c:	2301      	movs	r3, #1
 800db2e:	77fb      	strb	r3, [r7, #31]
    size_t packetSize = 0, payloadLimit = 0;
 800db30:	2300      	movs	r3, #0
 800db32:	61bb      	str	r3, [r7, #24]
 800db34:	2300      	movs	r3, #0
 800db36:	617b      	str	r3, [r7, #20]

    assert( pPublishInfo != NULL );
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d106      	bne.n	800db4c <calculatePublishPacketSize+0x2c>
 800db3e:	4b2e      	ldr	r3, [pc, #184]	; (800dbf8 <calculatePublishPacketSize+0xd8>)
 800db40:	4a2e      	ldr	r2, [pc, #184]	; (800dbfc <calculatePublishPacketSize+0xdc>)
 800db42:	f240 2136 	movw	r1, #566	; 0x236
 800db46:	482e      	ldr	r0, [pc, #184]	; (800dc00 <calculatePublishPacketSize+0xe0>)
 800db48:	f005 f9d0 	bl	8012eec <__assert_func>
    assert( pRemainingLength != NULL );
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d106      	bne.n	800db60 <calculatePublishPacketSize+0x40>
 800db52:	4b2c      	ldr	r3, [pc, #176]	; (800dc04 <calculatePublishPacketSize+0xe4>)
 800db54:	4a29      	ldr	r2, [pc, #164]	; (800dbfc <calculatePublishPacketSize+0xdc>)
 800db56:	f240 2137 	movw	r1, #567	; 0x237
 800db5a:	4829      	ldr	r0, [pc, #164]	; (800dc00 <calculatePublishPacketSize+0xe0>)
 800db5c:	f005 f9c6 	bl	8012eec <__assert_func>
    assert( pPacketSize != NULL );
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d106      	bne.n	800db74 <calculatePublishPacketSize+0x54>
 800db66:	4b28      	ldr	r3, [pc, #160]	; (800dc08 <calculatePublishPacketSize+0xe8>)
 800db68:	4a24      	ldr	r2, [pc, #144]	; (800dbfc <calculatePublishPacketSize+0xdc>)
 800db6a:	f44f 710e 	mov.w	r1, #568	; 0x238
 800db6e:	4824      	ldr	r0, [pc, #144]	; (800dc00 <calculatePublishPacketSize+0xe0>)
 800db70:	f005 f9bc 	bl	8012eec <__assert_func>

    /* The variable header of a PUBLISH packet always contains the topic name.
     * The first 2 bytes of UTF-8 string contains length of the string.
     */
    packetSize += pPublishInfo->topicNameLength + sizeof( uint16_t );
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	891b      	ldrh	r3, [r3, #8]
 800db78:	461a      	mov	r2, r3
 800db7a:	69bb      	ldr	r3, [r7, #24]
 800db7c:	4413      	add	r3, r2
 800db7e:	3302      	adds	r3, #2
 800db80:	61bb      	str	r3, [r7, #24]

    /* The variable header of a QoS 1 or 2 PUBLISH packet contains a 2-byte
     * packet identifier. */
    if( pPublishInfo->qos > MQTTQoS0 )
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d002      	beq.n	800db90 <calculatePublishPacketSize+0x70>
    {
        packetSize += sizeof( uint16_t );
 800db8a:	69bb      	ldr	r3, [r7, #24]
 800db8c:	3302      	adds	r3, #2
 800db8e:	61bb      	str	r3, [r7, #24]
    }

    /* Calculate the maximum allowed size of the payload for the given parameters.
     * This calculation excludes the "Remaining length" encoding, whose size is not
     * yet known. */
    payloadLimit = MQTT_MAX_REMAINING_LENGTH - packetSize - 1U;
 800db90:	69ba      	ldr	r2, [r7, #24]
 800db92:	4b1e      	ldr	r3, [pc, #120]	; (800dc0c <calculatePublishPacketSize+0xec>)
 800db94:	1a9b      	subs	r3, r3, r2
 800db96:	617b      	str	r3, [r7, #20]

    /* Ensure that the given payload fits within the calculated limit. */
    if( pPublishInfo->payloadLength > payloadLimit )
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	691b      	ldr	r3, [r3, #16]
 800db9c:	697a      	ldr	r2, [r7, #20]
 800db9e:	429a      	cmp	r2, r3
 800dba0:	d202      	bcs.n	800dba8 <calculatePublishPacketSize+0x88>
                    "%lu so as not to exceed the maximum "
                    "remaining length of MQTT 3.1.1 packet( %lu ).",
                    ( unsigned long ) pPublishInfo->payloadLength,
                    ( unsigned long ) payloadLimit,
                    MQTT_MAX_REMAINING_LENGTH ) );
        status = false;
 800dba2:	2300      	movs	r3, #0
 800dba4:	77fb      	strb	r3, [r7, #31]
 800dba6:	e021      	b.n	800dbec <calculatePublishPacketSize+0xcc>
    }
    else
    {
        /* Add the length of the PUBLISH payload. At this point, the "Remaining length"
         * has been calculated. */
        packetSize += pPublishInfo->payloadLength;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	691b      	ldr	r3, [r3, #16]
 800dbac:	69ba      	ldr	r2, [r7, #24]
 800dbae:	4413      	add	r3, r2
 800dbb0:	61bb      	str	r3, [r7, #24]

        /* Now that the "Remaining length" is known, recalculate the payload limit
         * based on the size of its encoding. */
        payloadLimit -= remainingLengthEncodedSize( packetSize );
 800dbb2:	69b8      	ldr	r0, [r7, #24]
 800dbb4:	f7ff ff1a 	bl	800d9ec <remainingLengthEncodedSize>
 800dbb8:	4602      	mov	r2, r0
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	1a9b      	subs	r3, r3, r2
 800dbbe:	617b      	str	r3, [r7, #20]

        /* Check that the given payload fits within the size allowed by MQTT spec. */
        if( pPublishInfo->payloadLength > payloadLimit )
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	691b      	ldr	r3, [r3, #16]
 800dbc4:	697a      	ldr	r2, [r7, #20]
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	d202      	bcs.n	800dbd0 <calculatePublishPacketSize+0xb0>
                        "%lu so as not to exceed the maximum "
                        "remaining length of MQTT 3.1.1 packet( %lu ).",
                        ( unsigned long ) pPublishInfo->payloadLength,
                        ( unsigned long ) payloadLimit,
                        MQTT_MAX_REMAINING_LENGTH ) );
            status = false;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	77fb      	strb	r3, [r7, #31]
 800dbce:	e00d      	b.n	800dbec <calculatePublishPacketSize+0xcc>
        }
        else
        {
            /* Set the "Remaining length" output parameter and calculate the full
             * size of the PUBLISH packet. */
            *pRemainingLength = packetSize;
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	69ba      	ldr	r2, [r7, #24]
 800dbd4:	601a      	str	r2, [r3, #0]

            packetSize += 1U + remainingLengthEncodedSize( packetSize );
 800dbd6:	69b8      	ldr	r0, [r7, #24]
 800dbd8:	f7ff ff08 	bl	800d9ec <remainingLengthEncodedSize>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	3301      	adds	r3, #1
 800dbe0:	69ba      	ldr	r2, [r7, #24]
 800dbe2:	4413      	add	r3, r2
 800dbe4:	61bb      	str	r3, [r7, #24]
            *pPacketSize = packetSize;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	69ba      	ldr	r2, [r7, #24]
 800dbea:	601a      	str	r2, [r3, #0]
    }

    LogDebug( ( "PUBLISH packet remaining length=%lu and packet size=%lu.",
                ( unsigned long ) *pRemainingLength,
                ( unsigned long ) *pPacketSize ) );
    return status;
 800dbec:	7ffb      	ldrb	r3, [r7, #31]
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3720      	adds	r7, #32
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	080174c0 	.word	0x080174c0
 800dbfc:	08017cb4 	.word	0x08017cb4
 800dc00:	0801748c 	.word	0x0801748c
 800dc04:	080174d8 	.word	0x080174d8
 800dc08:	080174f4 	.word	0x080174f4
 800dc0c:	0ffffffe 	.word	0x0ffffffe

0800dc10 <MQTT_SerializePublishHeaderWithoutTopic>:

MQTTStatus_t MQTT_SerializePublishHeaderWithoutTopic( const MQTTPublishInfo_t * pPublishInfo,
                                                      size_t remainingLength,
                                                      uint8_t * pBuffer,
                                                      size_t * headerSize )
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b088      	sub	sp, #32
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	60f8      	str	r0, [r7, #12]
 800dc18:	60b9      	str	r1, [r7, #8]
 800dc1a:	607a      	str	r2, [r7, #4]
 800dc1c:	603b      	str	r3, [r7, #0]
    size_t headerLength;
    uint8_t * pIndex;
    MQTTStatus_t status = MQTTSuccess;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	77bb      	strb	r3, [r7, #30]

    /* The first byte of a PUBLISH packet contains the packet type and flags. */
    uint8_t publishFlags = MQTT_PACKET_TYPE_PUBLISH;
 800dc22:	2330      	movs	r3, #48	; 0x30
 800dc24:	77fb      	strb	r3, [r7, #31]

    /* Get the start address of the buffer. */
    pIndex = pBuffer;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	61bb      	str	r3, [r7, #24]

    /* Length of serialized packet = First byte
     *                               + Length of encoded remaining length
     *                               + Encoded topic length. */
    headerLength = 1U + remainingLengthEncodedSize( remainingLength ) + 2U;
 800dc2a:	68b8      	ldr	r0, [r7, #8]
 800dc2c:	f7ff fede 	bl	800d9ec <remainingLengthEncodedSize>
 800dc30:	4603      	mov	r3, r0
 800dc32:	3303      	adds	r3, #3
 800dc34:	617b      	str	r3, [r7, #20]

    if( pPublishInfo->qos == MQTTQoS1 )
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	781b      	ldrb	r3, [r3, #0]
 800dc3a:	2b01      	cmp	r3, #1
 800dc3c:	d104      	bne.n	800dc48 <MQTT_SerializePublishHeaderWithoutTopic+0x38>
    {
        LogDebug( ( "Adding QoS as QoS1 in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 );
 800dc3e:	7ffb      	ldrb	r3, [r7, #31]
 800dc40:	f043 0302 	orr.w	r3, r3, #2
 800dc44:	77fb      	strb	r3, [r7, #31]
 800dc46:	e007      	b.n	800dc58 <MQTT_SerializePublishHeaderWithoutTopic+0x48>
    }
    else if( pPublishInfo->qos == MQTTQoS2 )
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	781b      	ldrb	r3, [r3, #0]
 800dc4c:	2b02      	cmp	r3, #2
 800dc4e:	d103      	bne.n	800dc58 <MQTT_SerializePublishHeaderWithoutTopic+0x48>
    {
        LogDebug( ( "Adding QoS as QoS2 in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS2 );
 800dc50:	7ffb      	ldrb	r3, [r7, #31]
 800dc52:	f043 0304 	orr.w	r3, r3, #4
 800dc56:	77fb      	strb	r3, [r7, #31]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    if( pPublishInfo->retain == true )
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	785b      	ldrb	r3, [r3, #1]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d003      	beq.n	800dc68 <MQTT_SerializePublishHeaderWithoutTopic+0x58>
    {
        LogDebug( ( "Adding retain bit in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_RETAIN );
 800dc60:	7ffb      	ldrb	r3, [r7, #31]
 800dc62:	f043 0301 	orr.w	r3, r3, #1
 800dc66:	77fb      	strb	r3, [r7, #31]
    }

    if( pPublishInfo->dup == true )
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	789b      	ldrb	r3, [r3, #2]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d003      	beq.n	800dc78 <MQTT_SerializePublishHeaderWithoutTopic+0x68>
    {
        LogDebug( ( "Adding dup bit in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_DUP );
 800dc70:	7ffb      	ldrb	r3, [r7, #31]
 800dc72:	f043 0308 	orr.w	r3, r3, #8
 800dc76:	77fb      	strb	r3, [r7, #31]
    }

    *pIndex = publishFlags;
 800dc78:	69bb      	ldr	r3, [r7, #24]
 800dc7a:	7ffa      	ldrb	r2, [r7, #31]
 800dc7c:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800dc7e:	69bb      	ldr	r3, [r7, #24]
 800dc80:	3301      	adds	r3, #1
 800dc82:	61bb      	str	r3, [r7, #24]

    /* The "Remaining length" is encoded from the second byte. */
    pIndex = encodeRemainingLength( pIndex, remainingLength );
 800dc84:	68b9      	ldr	r1, [r7, #8]
 800dc86:	69b8      	ldr	r0, [r7, #24]
 800dc88:	f7ff fed2 	bl	800da30 <encodeRemainingLength>
 800dc8c:	61b8      	str	r0, [r7, #24]

    /* The first byte of a UTF-8 string is the high byte of the string length. */
    *pIndex = UINT16_HIGH_BYTE( pPublishInfo->topicNameLength );
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	891b      	ldrh	r3, [r3, #8]
 800dc92:	0a1b      	lsrs	r3, r3, #8
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	b2da      	uxtb	r2, r3
 800dc98:	69bb      	ldr	r3, [r7, #24]
 800dc9a:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800dc9c:	69bb      	ldr	r3, [r7, #24]
 800dc9e:	3301      	adds	r3, #1
 800dca0:	61bb      	str	r3, [r7, #24]

    /* The second byte of a UTF-8 string is the low byte of the string length. */
    *pIndex = UINT16_LOW_BYTE( pPublishInfo->topicNameLength );
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	891b      	ldrh	r3, [r3, #8]
 800dca6:	b2da      	uxtb	r2, r3
 800dca8:	69bb      	ldr	r3, [r7, #24]
 800dcaa:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800dcac:	69bb      	ldr	r3, [r7, #24]
 800dcae:	3301      	adds	r3, #1
 800dcb0:	61bb      	str	r3, [r7, #24]

    *headerSize = headerLength;
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	697a      	ldr	r2, [r7, #20]
 800dcb6:	601a      	str	r2, [r3, #0]

    return status;
 800dcb8:	7fbb      	ldrb	r3, [r7, #30]
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3720      	adds	r7, #32
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}

0800dcc2 <getRemainingLength>:
    assert( ( ( size_t ) ( pIndex - pFixedBuffer->pBuffer ) ) <= pFixedBuffer->size );
}

static size_t getRemainingLength( TransportRecv_t recvFunc,
                                  NetworkContext_t * pNetworkContext )
{
 800dcc2:	b580      	push	{r7, lr}
 800dcc4:	b088      	sub	sp, #32
 800dcc6:	af00      	add	r7, sp, #0
 800dcc8:	6078      	str	r0, [r7, #4]
 800dcca:	6039      	str	r1, [r7, #0]
    size_t remainingLength = 0, multiplier = 1, bytesDecoded = 0, expectedSize = 0;
 800dccc:	2300      	movs	r3, #0
 800dcce:	61fb      	str	r3, [r7, #28]
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	61bb      	str	r3, [r7, #24]
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	617b      	str	r3, [r7, #20]
 800dcd8:	2300      	movs	r3, #0
 800dcda:	613b      	str	r3, [r7, #16]
    uint8_t encodedByte = 0;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	72fb      	strb	r3, [r7, #11]
    int32_t bytesReceived = 0;
 800dce0:	2300      	movs	r3, #0
 800dce2:	60fb      	str	r3, [r7, #12]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        if( multiplier > 2097152U ) /* 128 ^ 3 */
 800dce4:	69bb      	ldr	r3, [r7, #24]
 800dce6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dcea:	d903      	bls.n	800dcf4 <getRemainingLength+0x32>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800dcec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dcf0:	61fb      	str	r3, [r7, #28]
 800dcf2:	e01c      	b.n	800dd2e <getRemainingLength+0x6c>
        }
        else
        {
            bytesReceived = recvFunc( pNetworkContext, &encodedByte, 1U );
 800dcf4:	f107 010b 	add.w	r1, r7, #11
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	6838      	ldr	r0, [r7, #0]
 800dcfe:	4798      	blx	r3
 800dd00:	60f8      	str	r0, [r7, #12]

            if( bytesReceived == 1 )
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	2b01      	cmp	r3, #1
 800dd06:	d10f      	bne.n	800dd28 <getRemainingLength+0x66>
            {
                remainingLength += ( ( size_t ) encodedByte & 0x7FU ) * multiplier;
 800dd08:	7afb      	ldrb	r3, [r7, #11]
 800dd0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd0e:	69ba      	ldr	r2, [r7, #24]
 800dd10:	fb02 f303 	mul.w	r3, r2, r3
 800dd14:	69fa      	ldr	r2, [r7, #28]
 800dd16:	4413      	add	r3, r2
 800dd18:	61fb      	str	r3, [r7, #28]
                multiplier *= 128U;
 800dd1a:	69bb      	ldr	r3, [r7, #24]
 800dd1c:	01db      	lsls	r3, r3, #7
 800dd1e:	61bb      	str	r3, [r7, #24]
                bytesDecoded++;
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	3301      	adds	r3, #1
 800dd24:	617b      	str	r3, [r7, #20]
 800dd26:	e002      	b.n	800dd2e <getRemainingLength+0x6c>
            }
            else
            {
                remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800dd28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dd2c:	61fb      	str	r3, [r7, #28]
            }
        }

        if( remainingLength == MQTT_REMAINING_LENGTH_INVALID )
 800dd2e:	69fb      	ldr	r3, [r7, #28]
 800dd30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dd34:	d004      	beq.n	800dd40 <getRemainingLength+0x7e>
        {
            break;
        }
    } while( ( encodedByte & 0x80U ) != 0U );
 800dd36:	7afb      	ldrb	r3, [r7, #11]
 800dd38:	b25b      	sxtb	r3, r3
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	dbd2      	blt.n	800dce4 <getRemainingLength+0x22>
 800dd3e:	e000      	b.n	800dd42 <getRemainingLength+0x80>
            break;
 800dd40:	bf00      	nop

    /* Check that the decoded remaining length conforms to the MQTT specification. */
    if( remainingLength != MQTT_REMAINING_LENGTH_INVALID )
 800dd42:	69fb      	ldr	r3, [r7, #28]
 800dd44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dd48:	d00a      	beq.n	800dd60 <getRemainingLength+0x9e>
    {
        expectedSize = remainingLengthEncodedSize( remainingLength );
 800dd4a:	69f8      	ldr	r0, [r7, #28]
 800dd4c:	f7ff fe4e 	bl	800d9ec <remainingLengthEncodedSize>
 800dd50:	6138      	str	r0, [r7, #16]

        if( bytesDecoded != expectedSize )
 800dd52:	697a      	ldr	r2, [r7, #20]
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d002      	beq.n	800dd60 <getRemainingLength+0x9e>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800dd5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dd5e:	61fb      	str	r3, [r7, #28]
        }
    }

    return remainingLength;
 800dd60:	69fb      	ldr	r3, [r7, #28]
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3720      	adds	r7, #32
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}

0800dd6a <processRemainingLength>:
/*-----------------------------------------------------------*/

static MQTTStatus_t processRemainingLength( const uint8_t * pBuffer,
                                            const size_t * pIndex,
                                            MQTTPacketInfo_t * pIncomingPacket )
{
 800dd6a:	b580      	push	{r7, lr}
 800dd6c:	b08a      	sub	sp, #40	; 0x28
 800dd6e:	af00      	add	r7, sp, #0
 800dd70:	60f8      	str	r0, [r7, #12]
 800dd72:	60b9      	str	r1, [r7, #8]
 800dd74:	607a      	str	r2, [r7, #4]
    size_t remainingLength = 0;
 800dd76:	2300      	movs	r3, #0
 800dd78:	627b      	str	r3, [r7, #36]	; 0x24
    size_t multiplier = 1;
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	623b      	str	r3, [r7, #32]
    size_t bytesDecoded = 0;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	61fb      	str	r3, [r7, #28]
    size_t expectedSize = 0;
 800dd82:	2300      	movs	r3, #0
 800dd84:	617b      	str	r3, [r7, #20]
    uint8_t encodedByte = 0;
 800dd86:	2300      	movs	r3, #0
 800dd88:	76fb      	strb	r3, [r7, #27]
    MQTTStatus_t status = MQTTSuccess;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	76bb      	strb	r3, [r7, #26]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        if( multiplier > 2097152U ) /* 128 ^ 3 */
 800dd8e:	6a3b      	ldr	r3, [r7, #32]
 800dd90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dd94:	d905      	bls.n	800dda2 <processRemainingLength+0x38>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800dd96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dd9a:	627b      	str	r3, [r7, #36]	; 0x24

            LogError( ( "Invalid remaining length in the packet.\n" ) );

            status = MQTTBadResponse;
 800dd9c:	2305      	movs	r3, #5
 800dd9e:	76bb      	strb	r3, [r7, #26]
 800dda0:	e01d      	b.n	800ddde <processRemainingLength+0x74>
        }
        else
        {
            if( *pIndex > ( bytesDecoded + 1U ) )
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	681a      	ldr	r2, [r3, #0]
 800dda6:	69fb      	ldr	r3, [r7, #28]
 800dda8:	3301      	adds	r3, #1
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d915      	bls.n	800ddda <processRemainingLength+0x70>
            {
                /* Get the next byte. It is at the next position after the bytes
                 * decoded till now since the header of one byte was read before. */
                encodedByte = pBuffer[ bytesDecoded + 1U ];
 800ddae:	69fb      	ldr	r3, [r7, #28]
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	68fa      	ldr	r2, [r7, #12]
 800ddb4:	4413      	add	r3, r2
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	76fb      	strb	r3, [r7, #27]

                remainingLength += ( ( size_t ) encodedByte & 0x7FU ) * multiplier;
 800ddba:	7efb      	ldrb	r3, [r7, #27]
 800ddbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddc0:	6a3a      	ldr	r2, [r7, #32]
 800ddc2:	fb02 f303 	mul.w	r3, r2, r3
 800ddc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddc8:	4413      	add	r3, r2
 800ddca:	627b      	str	r3, [r7, #36]	; 0x24
                multiplier *= 128U;
 800ddcc:	6a3b      	ldr	r3, [r7, #32]
 800ddce:	01db      	lsls	r3, r3, #7
 800ddd0:	623b      	str	r3, [r7, #32]
                bytesDecoded++;
 800ddd2:	69fb      	ldr	r3, [r7, #28]
 800ddd4:	3301      	adds	r3, #1
 800ddd6:	61fb      	str	r3, [r7, #28]
 800ddd8:	e001      	b.n	800ddde <processRemainingLength+0x74>
            }
            else
            {
                status = MQTTNeedMoreBytes;
 800ddda:	230b      	movs	r3, #11
 800dddc:	76bb      	strb	r3, [r7, #26]
            }
        }

        /* If the response is incorrect, or no more data is available, then
         * break out of the loop. */
        if( ( remainingLength == MQTT_REMAINING_LENGTH_INVALID ) ||
 800ddde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dde4:	d006      	beq.n	800ddf4 <processRemainingLength+0x8a>
 800dde6:	7ebb      	ldrb	r3, [r7, #26]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d103      	bne.n	800ddf4 <processRemainingLength+0x8a>
            ( status != MQTTSuccess ) )
        {
            break;
        }
    } while( ( encodedByte & 0x80U ) != 0U );
 800ddec:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	dbcc      	blt.n	800dd8e <processRemainingLength+0x24>

    if( status == MQTTSuccess )
 800ddf4:	7ebb      	ldrb	r3, [r7, #26]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d111      	bne.n	800de1e <processRemainingLength+0xb4>
    {
        /* Check that the decoded remaining length conforms to the MQTT specification. */
        expectedSize = remainingLengthEncodedSize( remainingLength );
 800ddfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ddfc:	f7ff fdf6 	bl	800d9ec <remainingLengthEncodedSize>
 800de00:	6178      	str	r0, [r7, #20]

        if( bytesDecoded != expectedSize )
 800de02:	69fa      	ldr	r2, [r7, #28]
 800de04:	697b      	ldr	r3, [r7, #20]
 800de06:	429a      	cmp	r2, r3
 800de08:	d002      	beq.n	800de10 <processRemainingLength+0xa6>
        {
            LogError( ( "Expected and actual length of decoded bytes do not match.\n" ) );
            status = MQTTBadResponse;
 800de0a:	2305      	movs	r3, #5
 800de0c:	76bb      	strb	r3, [r7, #26]
 800de0e:	e006      	b.n	800de1e <processRemainingLength+0xb4>
        }
        else
        {
            pIncomingPacket->remainingLength = remainingLength;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de14:	609a      	str	r2, [r3, #8]
            pIncomingPacket->headerLength = bytesDecoded + 1U;
 800de16:	69fb      	ldr	r3, [r7, #28]
 800de18:	1c5a      	adds	r2, r3, #1
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	60da      	str	r2, [r3, #12]
        }
    }

    return status;
 800de1e:	7ebb      	ldrb	r3, [r7, #26]
}
 800de20:	4618      	mov	r0, r3
 800de22:	3728      	adds	r7, #40	; 0x28
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <incomingPacketValid>:

/*-----------------------------------------------------------*/

static bool incomingPacketValid( uint8_t packetType )
{
 800de28:	b480      	push	{r7}
 800de2a:	b085      	sub	sp, #20
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	4603      	mov	r3, r0
 800de30:	71fb      	strb	r3, [r7, #7]
    bool status = false;
 800de32:	2300      	movs	r3, #0
 800de34:	73fb      	strb	r3, [r7, #15]

    /* Check packet type. Mask out lower bits to ignore flags. */
    switch( packetType & 0xF0U )
 800de36:	79fb      	ldrb	r3, [r7, #7]
 800de38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800de3c:	2bd0      	cmp	r3, #208	; 0xd0
 800de3e:	d01d      	beq.n	800de7c <incomingPacketValid+0x54>
 800de40:	2bd0      	cmp	r3, #208	; 0xd0
 800de42:	d826      	bhi.n	800de92 <incomingPacketValid+0x6a>
 800de44:	2bb0      	cmp	r3, #176	; 0xb0
 800de46:	d019      	beq.n	800de7c <incomingPacketValid+0x54>
 800de48:	2bb0      	cmp	r3, #176	; 0xb0
 800de4a:	d822      	bhi.n	800de92 <incomingPacketValid+0x6a>
 800de4c:	2b90      	cmp	r3, #144	; 0x90
 800de4e:	d015      	beq.n	800de7c <incomingPacketValid+0x54>
 800de50:	2b90      	cmp	r3, #144	; 0x90
 800de52:	d81e      	bhi.n	800de92 <incomingPacketValid+0x6a>
 800de54:	2b70      	cmp	r3, #112	; 0x70
 800de56:	d011      	beq.n	800de7c <incomingPacketValid+0x54>
 800de58:	2b70      	cmp	r3, #112	; 0x70
 800de5a:	d81a      	bhi.n	800de92 <incomingPacketValid+0x6a>
 800de5c:	2b60      	cmp	r3, #96	; 0x60
 800de5e:	d010      	beq.n	800de82 <incomingPacketValid+0x5a>
 800de60:	2b60      	cmp	r3, #96	; 0x60
 800de62:	d816      	bhi.n	800de92 <incomingPacketValid+0x6a>
 800de64:	2b50      	cmp	r3, #80	; 0x50
 800de66:	d009      	beq.n	800de7c <incomingPacketValid+0x54>
 800de68:	2b50      	cmp	r3, #80	; 0x50
 800de6a:	d812      	bhi.n	800de92 <incomingPacketValid+0x6a>
 800de6c:	2b40      	cmp	r3, #64	; 0x40
 800de6e:	d005      	beq.n	800de7c <incomingPacketValid+0x54>
 800de70:	2b40      	cmp	r3, #64	; 0x40
 800de72:	d80e      	bhi.n	800de92 <incomingPacketValid+0x6a>
 800de74:	2b20      	cmp	r3, #32
 800de76:	d001      	beq.n	800de7c <incomingPacketValid+0x54>
 800de78:	2b30      	cmp	r3, #48	; 0x30
 800de7a:	d10a      	bne.n	800de92 <incomingPacketValid+0x6a>
        case MQTT_PACKET_TYPE_PUBREC:
        case MQTT_PACKET_TYPE_PUBCOMP:
        case MQTT_PACKET_TYPE_SUBACK:
        case MQTT_PACKET_TYPE_UNSUBACK:
        case MQTT_PACKET_TYPE_PINGRESP:
            status = true;
 800de7c:	2301      	movs	r3, #1
 800de7e:	73fb      	strb	r3, [r7, #15]
            break;
 800de80:	e00a      	b.n	800de98 <incomingPacketValid+0x70>

        case ( MQTT_PACKET_TYPE_PUBREL & 0xF0U ):

            /* The second bit of a PUBREL must be set. */
            if( ( packetType & 0x02U ) > 0U )
 800de82:	79fb      	ldrb	r3, [r7, #7]
 800de84:	f003 0302 	and.w	r3, r3, #2
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d004      	beq.n	800de96 <incomingPacketValid+0x6e>
            {
                status = true;
 800de8c:	2301      	movs	r3, #1
 800de8e:	73fb      	strb	r3, [r7, #15]
            }

            break;
 800de90:	e001      	b.n	800de96 <incomingPacketValid+0x6e>

        /* Any other packet type is invalid. */
        default:
            LogWarn( ( "Incoming packet invalid: Packet type=%u.",
                       ( unsigned int ) packetType ) );
            break;
 800de92:	bf00      	nop
 800de94:	e000      	b.n	800de98 <incomingPacketValid+0x70>
            break;
 800de96:	bf00      	nop
    }

    return status;
 800de98:	7bfb      	ldrb	r3, [r7, #15]
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3714      	adds	r7, #20
 800de9e:	46bd      	mov	sp, r7
 800dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea4:	4770      	bx	lr

0800dea6 <checkPublishRemainingLength>:
/*-----------------------------------------------------------*/

static MQTTStatus_t checkPublishRemainingLength( size_t remainingLength,
                                                 MQTTQoS_t qos,
                                                 size_t qos0Minimum )
{
 800dea6:	b480      	push	{r7}
 800dea8:	b087      	sub	sp, #28
 800deaa:	af00      	add	r7, sp, #0
 800deac:	60f8      	str	r0, [r7, #12]
 800deae:	460b      	mov	r3, r1
 800deb0:	607a      	str	r2, [r7, #4]
 800deb2:	72fb      	strb	r3, [r7, #11]
    MQTTStatus_t status = MQTTSuccess;
 800deb4:	2300      	movs	r3, #0
 800deb6:	75fb      	strb	r3, [r7, #23]

    /* Sanity checks for "Remaining length". */
    if( qos == MQTTQoS0 )
 800deb8:	7afb      	ldrb	r3, [r7, #11]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d106      	bne.n	800decc <checkPublishRemainingLength+0x26>
    {
        /* Check that the "Remaining length" is greater than the minimum. */
        if( remainingLength < qos0Minimum )
 800debe:	68fa      	ldr	r2, [r7, #12]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d209      	bcs.n	800deda <checkPublishRemainingLength+0x34>
        {
            LogError( ( "QoS 0 PUBLISH cannot have a remaining length less than %lu.",
                        ( unsigned long ) qos0Minimum ) );

            status = MQTTBadResponse;
 800dec6:	2305      	movs	r3, #5
 800dec8:	75fb      	strb	r3, [r7, #23]
 800deca:	e006      	b.n	800deda <checkPublishRemainingLength+0x34>
    else
    {
        /* Check that the "Remaining length" is greater than the minimum. For
         * QoS 1 or 2, this will be two bytes greater than for QoS 0 due to the
         * packet identifier. */
        if( remainingLength < ( qos0Minimum + 2U ) )
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	3302      	adds	r3, #2
 800ded0:	68fa      	ldr	r2, [r7, #12]
 800ded2:	429a      	cmp	r2, r3
 800ded4:	d201      	bcs.n	800deda <checkPublishRemainingLength+0x34>
        {
            LogError( ( "QoS 1 or 2 PUBLISH cannot have a remaining length less than %lu.",
                        ( unsigned long ) ( qos0Minimum + 2U ) ) );

            status = MQTTBadResponse;
 800ded6:	2305      	movs	r3, #5
 800ded8:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800deda:	7dfb      	ldrb	r3, [r7, #23]
}
 800dedc:	4618      	mov	r0, r3
 800dede:	371c      	adds	r7, #28
 800dee0:	46bd      	mov	sp, r7
 800dee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee6:	4770      	bx	lr

0800dee8 <processPublishFlags>:

/*-----------------------------------------------------------*/

static MQTTStatus_t processPublishFlags( uint8_t publishFlags,
                                         MQTTPublishInfo_t * pPublishInfo )
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	af00      	add	r7, sp, #0
 800deee:	4603      	mov	r3, r0
 800def0:	6039      	str	r1, [r7, #0]
 800def2:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTSuccess;
 800def4:	2300      	movs	r3, #0
 800def6:	73fb      	strb	r3, [r7, #15]

    assert( pPublishInfo != NULL );
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d106      	bne.n	800df0c <processPublishFlags+0x24>
 800defe:	4b20      	ldr	r3, [pc, #128]	; (800df80 <processPublishFlags+0x98>)
 800df00:	4a20      	ldr	r2, [pc, #128]	; (800df84 <processPublishFlags+0x9c>)
 800df02:	f240 31ef 	movw	r1, #1007	; 0x3ef
 800df06:	4820      	ldr	r0, [pc, #128]	; (800df88 <processPublishFlags+0xa0>)
 800df08:	f004 fff0 	bl	8012eec <__assert_func>

    /* Check for QoS 2. */
    if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS2 ) )
 800df0c:	79fb      	ldrb	r3, [r7, #7]
 800df0e:	f003 0304 	and.w	r3, r3, #4
 800df12:	2b00      	cmp	r3, #0
 800df14:	d00b      	beq.n	800df2e <processPublishFlags+0x46>
    {
        /* PUBLISH packet is invalid if both QoS 1 and QoS 2 bits are set. */
        if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 ) )
 800df16:	79fb      	ldrb	r3, [r7, #7]
 800df18:	f003 0302 	and.w	r3, r3, #2
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d002      	beq.n	800df26 <processPublishFlags+0x3e>
        {
            LogError( ( "Bad QoS: 3." ) );

            status = MQTTBadResponse;
 800df20:	2305      	movs	r3, #5
 800df22:	73fb      	strb	r3, [r7, #15]
 800df24:	e00f      	b.n	800df46 <processPublishFlags+0x5e>
        }
        else
        {
            pPublishInfo->qos = MQTTQoS2;
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	2202      	movs	r2, #2
 800df2a:	701a      	strb	r2, [r3, #0]
 800df2c:	e00b      	b.n	800df46 <processPublishFlags+0x5e>
        }
    }
    /* Check for QoS 1. */
    else if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 ) )
 800df2e:	79fb      	ldrb	r3, [r7, #7]
 800df30:	f003 0302 	and.w	r3, r3, #2
 800df34:	2b00      	cmp	r3, #0
 800df36:	d003      	beq.n	800df40 <processPublishFlags+0x58>
    {
        pPublishInfo->qos = MQTTQoS1;
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	2201      	movs	r2, #1
 800df3c:	701a      	strb	r2, [r3, #0]
 800df3e:	e002      	b.n	800df46 <processPublishFlags+0x5e>
    }
    /* If the PUBLISH isn't QoS 1 or 2, then it's QoS 0. */
    else
    {
        pPublishInfo->qos = MQTTQoS0;
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	2200      	movs	r2, #0
 800df44:	701a      	strb	r2, [r3, #0]
    }

    if( status == MQTTSuccess )
 800df46:	7bfb      	ldrb	r3, [r7, #15]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d113      	bne.n	800df74 <processPublishFlags+0x8c>
    {
        LogDebug( ( "QoS is %d.", ( int ) pPublishInfo->qos ) );

        /* Parse the Retain bit. */
        pPublishInfo->retain = UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_RETAIN );
 800df4c:	79fb      	ldrb	r3, [r7, #7]
 800df4e:	f003 0301 	and.w	r3, r3, #1
 800df52:	2b00      	cmp	r3, #0
 800df54:	bf14      	ite	ne
 800df56:	2301      	movne	r3, #1
 800df58:	2300      	moveq	r3, #0
 800df5a:	b2da      	uxtb	r2, r3
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	705a      	strb	r2, [r3, #1]

        LogDebug( ( "Retain bit is %d.", ( int ) pPublishInfo->retain ) );

        /* Parse the DUP bit. */
        pPublishInfo->dup = UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_DUP );
 800df60:	79fb      	ldrb	r3, [r7, #7]
 800df62:	f003 0308 	and.w	r3, r3, #8
 800df66:	2b00      	cmp	r3, #0
 800df68:	bf14      	ite	ne
 800df6a:	2301      	movne	r3, #1
 800df6c:	2300      	moveq	r3, #0
 800df6e:	b2da      	uxtb	r2, r3
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	709a      	strb	r2, [r3, #2]

        LogDebug( ( "DUP bit is %d.", ( int ) pPublishInfo->dup ) );
    }

    return status;
 800df74:	7bfb      	ldrb	r3, [r7, #15]
}
 800df76:	4618      	mov	r0, r3
 800df78:	3710      	adds	r7, #16
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
 800df7e:	bf00      	nop
 800df80:	080174c0 	.word	0x080174c0
 800df84:	08017cd0 	.word	0x08017cd0
 800df88:	0801748c 	.word	0x0801748c

0800df8c <logConnackResponse>:

/*-----------------------------------------------------------*/

static void logConnackResponse( uint8_t responseCode )
{
 800df8c:	b5b0      	push	{r4, r5, r7, lr}
 800df8e:	b088      	sub	sp, #32
 800df90:	af00      	add	r7, sp, #0
 800df92:	4603      	mov	r3, r0
 800df94:	71fb      	strb	r3, [r7, #7]
    const char * const pConnackResponses[ 6 ] =
 800df96:	4b0c      	ldr	r3, [pc, #48]	; (800dfc8 <logConnackResponse+0x3c>)
 800df98:	f107 0408 	add.w	r4, r7, #8
 800df9c:	461d      	mov	r5, r3
 800df9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dfa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dfa2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dfa6:	e884 0003 	stmia.w	r4, {r0, r1}

    /* Avoid unused parameter warning when assert and logs are disabled. */
    ( void ) responseCode;
    ( void ) pConnackResponses;

    assert( responseCode <= 5U );
 800dfaa:	79fb      	ldrb	r3, [r7, #7]
 800dfac:	2b05      	cmp	r3, #5
 800dfae:	d906      	bls.n	800dfbe <logConnackResponse+0x32>
 800dfb0:	4b06      	ldr	r3, [pc, #24]	; (800dfcc <logConnackResponse+0x40>)
 800dfb2:	4a07      	ldr	r2, [pc, #28]	; (800dfd0 <logConnackResponse+0x44>)
 800dfb4:	f240 412f 	movw	r1, #1071	; 0x42f
 800dfb8:	4806      	ldr	r0, [pc, #24]	; (800dfd4 <logConnackResponse+0x48>)
 800dfba:	f004 ff97 	bl	8012eec <__assert_func>
    else
    {
        /* Log an error based on the CONNACK response code. */
        LogError( ( "%s", pConnackResponses[ responseCode ] ) );
    }
}
 800dfbe:	bf00      	nop
 800dfc0:	3720      	adds	r7, #32
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bdb0      	pop	{r4, r5, r7, pc}
 800dfc6:	bf00      	nop
 800dfc8:	08017620 	.word	0x08017620
 800dfcc:	0801760c 	.word	0x0801760c
 800dfd0:	08017ce4 	.word	0x08017ce4
 800dfd4:	0801748c 	.word	0x0801748c

0800dfd8 <deserializeConnack>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeConnack( const MQTTPacketInfo_t * pConnack,
                                        bool * pSessionPresent )
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b084      	sub	sp, #16
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	73fb      	strb	r3, [r7, #15]
    const uint8_t * pRemainingData = NULL;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	60bb      	str	r3, [r7, #8]

    assert( pConnack != NULL );
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d106      	bne.n	800dffe <deserializeConnack+0x26>
 800dff0:	4b2a      	ldr	r3, [pc, #168]	; (800e09c <deserializeConnack+0xc4>)
 800dff2:	4a2b      	ldr	r2, [pc, #172]	; (800e0a0 <deserializeConnack+0xc8>)
 800dff4:	f240 4145 	movw	r1, #1093	; 0x445
 800dff8:	482a      	ldr	r0, [pc, #168]	; (800e0a4 <deserializeConnack+0xcc>)
 800dffa:	f004 ff77 	bl	8012eec <__assert_func>
    assert( pSessionPresent != NULL );
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d106      	bne.n	800e012 <deserializeConnack+0x3a>
 800e004:	4b28      	ldr	r3, [pc, #160]	; (800e0a8 <deserializeConnack+0xd0>)
 800e006:	4a26      	ldr	r2, [pc, #152]	; (800e0a0 <deserializeConnack+0xc8>)
 800e008:	f240 4146 	movw	r1, #1094	; 0x446
 800e00c:	4825      	ldr	r0, [pc, #148]	; (800e0a4 <deserializeConnack+0xcc>)
 800e00e:	f004 ff6d 	bl	8012eec <__assert_func>
    pRemainingData = pConnack->pRemainingData;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	60bb      	str	r3, [r7, #8]

    /* According to MQTT 3.1.1, the second byte of CONNACK must specify a
     * "Remaining length" of 2. */
    if( pConnack->remainingLength != MQTT_PACKET_CONNACK_REMAINING_LENGTH )
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	689b      	ldr	r3, [r3, #8]
 800e01c:	2b02      	cmp	r3, #2
 800e01e:	d002      	beq.n	800e026 <deserializeConnack+0x4e>
    {
        LogError( ( "CONNACK does not have remaining length of %u.",
                    ( unsigned int ) MQTT_PACKET_CONNACK_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800e020:	2305      	movs	r3, #5
 800e022:	73fb      	strb	r3, [r7, #15]
 800e024:	e01d      	b.n	800e062 <deserializeConnack+0x8a>
    }

    /* Check the reserved bits in CONNACK. The high 7 bits of the third byte
     * in CONNACK must be 0. */
    else if( ( pRemainingData[ 0 ] | 0x01U ) != 0x01U )
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	f043 0301 	orr.w	r3, r3, #1
 800e02e:	b2db      	uxtb	r3, r3
 800e030:	2b01      	cmp	r3, #1
 800e032:	d002      	beq.n	800e03a <deserializeConnack+0x62>
    {
        LogError( ( "Reserved bits in CONNACK incorrect." ) );

        status = MQTTBadResponse;
 800e034:	2305      	movs	r3, #5
 800e036:	73fb      	strb	r3, [r7, #15]
 800e038:	e013      	b.n	800e062 <deserializeConnack+0x8a>
    }
    else
    {
        /* Determine if the "Session Present" bit is set. This is the lowest bit of
         * the third byte in CONNACK. */
        if( ( pRemainingData[ 0 ] & MQTT_PACKET_CONNACK_SESSION_PRESENT_MASK )
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	f003 0301 	and.w	r3, r3, #1
 800e042:	2b00      	cmp	r3, #0
 800e044:	d00a      	beq.n	800e05c <deserializeConnack+0x84>
            == MQTT_PACKET_CONNACK_SESSION_PRESENT_MASK )
        {
            LogDebug( ( "CONNACK session present bit set." ) );
            *pSessionPresent = true;
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	2201      	movs	r2, #1
 800e04a:	701a      	strb	r2, [r3, #0]

            /* MQTT 3.1.1 specifies that the fourth byte in CONNACK must be 0 if the
             * "Session Present" bit is set. */
            if( pRemainingData[ 1 ] != 0U )
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	3301      	adds	r3, #1
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d005      	beq.n	800e062 <deserializeConnack+0x8a>
            {
                LogError( ( "Session Present bit is set, but connect return code in CONNACK is %u (nonzero).",
                            ( unsigned int ) pRemainingData[ 1 ] ) );
                status = MQTTBadResponse;
 800e056:	2305      	movs	r3, #5
 800e058:	73fb      	strb	r3, [r7, #15]
 800e05a:	e002      	b.n	800e062 <deserializeConnack+0x8a>
            }
        }
        else
        {
            LogDebug( ( "CONNACK session present bit not set." ) );
            *pSessionPresent = false;
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	2200      	movs	r2, #0
 800e060:	701a      	strb	r2, [r3, #0]
        }
    }

    if( status == MQTTSuccess )
 800e062:	7bfb      	ldrb	r3, [r7, #15]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d114      	bne.n	800e092 <deserializeConnack+0xba>
    {
        /* In MQTT 3.1.1, only values 0 through 5 are valid CONNACK response codes. */
        if( pRemainingData[ 1 ] > 5U )
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	3301      	adds	r3, #1
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	2b05      	cmp	r3, #5
 800e070:	d902      	bls.n	800e078 <deserializeConnack+0xa0>
        {
            LogError( ( "CONNACK response %u is invalid.",
                        ( unsigned int ) pRemainingData[ 1 ] ) );

            status = MQTTBadResponse;
 800e072:	2305      	movs	r3, #5
 800e074:	73fb      	strb	r3, [r7, #15]
 800e076:	e00c      	b.n	800e092 <deserializeConnack+0xba>
        }
        else
        {
            /* Print the appropriate message for the CONNACK response code if logs are
             * enabled. */
            logConnackResponse( pRemainingData[ 1 ] );
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	3301      	adds	r3, #1
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	4618      	mov	r0, r3
 800e080:	f7ff ff84 	bl	800df8c <logConnackResponse>

            /* A nonzero CONNACK response code means the connection was refused. */
            if( pRemainingData[ 1 ] > 0U )
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	3301      	adds	r3, #1
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d001      	beq.n	800e092 <deserializeConnack+0xba>
            {
                status = MQTTServerRefused;
 800e08e:	2306      	movs	r3, #6
 800e090:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return status;
 800e092:	7bfb      	ldrb	r3, [r7, #15]
}
 800e094:	4618      	mov	r0, r3
 800e096:	3710      	adds	r7, #16
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}
 800e09c:	08017638 	.word	0x08017638
 800e0a0:	08017cf8 	.word	0x08017cf8
 800e0a4:	0801748c 	.word	0x0801748c
 800e0a8:	0801764c 	.word	0x0801764c

0800e0ac <calculateSubscriptionPacketSize>:
static MQTTStatus_t calculateSubscriptionPacketSize( const MQTTSubscribeInfo_t * pSubscriptionList,
                                                     size_t subscriptionCount,
                                                     size_t * pRemainingLength,
                                                     size_t * pPacketSize,
                                                     MQTTSubscriptionType_t subscriptionType )
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b088      	sub	sp, #32
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	60f8      	str	r0, [r7, #12]
 800e0b4:	60b9      	str	r1, [r7, #8]
 800e0b6:	607a      	str	r2, [r7, #4]
 800e0b8:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	77fb      	strb	r3, [r7, #31]
    size_t i = 0, packetSize = 0;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	61bb      	str	r3, [r7, #24]
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	617b      	str	r3, [r7, #20]

    assert( pSubscriptionList != NULL );
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d106      	bne.n	800e0da <calculateSubscriptionPacketSize+0x2e>
 800e0cc:	4b3d      	ldr	r3, [pc, #244]	; (800e1c4 <calculateSubscriptionPacketSize+0x118>)
 800e0ce:	4a3e      	ldr	r2, [pc, #248]	; (800e1c8 <calculateSubscriptionPacketSize+0x11c>)
 800e0d0:	f240 419b 	movw	r1, #1179	; 0x49b
 800e0d4:	483d      	ldr	r0, [pc, #244]	; (800e1cc <calculateSubscriptionPacketSize+0x120>)
 800e0d6:	f004 ff09 	bl	8012eec <__assert_func>
    assert( subscriptionCount != 0U );
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d106      	bne.n	800e0ee <calculateSubscriptionPacketSize+0x42>
 800e0e0:	4b3b      	ldr	r3, [pc, #236]	; (800e1d0 <calculateSubscriptionPacketSize+0x124>)
 800e0e2:	4a39      	ldr	r2, [pc, #228]	; (800e1c8 <calculateSubscriptionPacketSize+0x11c>)
 800e0e4:	f240 419c 	movw	r1, #1180	; 0x49c
 800e0e8:	4838      	ldr	r0, [pc, #224]	; (800e1cc <calculateSubscriptionPacketSize+0x120>)
 800e0ea:	f004 feff 	bl	8012eec <__assert_func>
    assert( pRemainingLength != NULL );
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d106      	bne.n	800e102 <calculateSubscriptionPacketSize+0x56>
 800e0f4:	4b37      	ldr	r3, [pc, #220]	; (800e1d4 <calculateSubscriptionPacketSize+0x128>)
 800e0f6:	4a34      	ldr	r2, [pc, #208]	; (800e1c8 <calculateSubscriptionPacketSize+0x11c>)
 800e0f8:	f240 419d 	movw	r1, #1181	; 0x49d
 800e0fc:	4833      	ldr	r0, [pc, #204]	; (800e1cc <calculateSubscriptionPacketSize+0x120>)
 800e0fe:	f004 fef5 	bl	8012eec <__assert_func>
    assert( pPacketSize != NULL );
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d106      	bne.n	800e116 <calculateSubscriptionPacketSize+0x6a>
 800e108:	4b33      	ldr	r3, [pc, #204]	; (800e1d8 <calculateSubscriptionPacketSize+0x12c>)
 800e10a:	4a2f      	ldr	r2, [pc, #188]	; (800e1c8 <calculateSubscriptionPacketSize+0x11c>)
 800e10c:	f240 419e 	movw	r1, #1182	; 0x49e
 800e110:	482e      	ldr	r0, [pc, #184]	; (800e1cc <calculateSubscriptionPacketSize+0x120>)
 800e112:	f004 feeb 	bl	8012eec <__assert_func>

    /* The variable header of a subscription packet consists of a 2-byte packet
     * identifier. */
    packetSize += sizeof( uint16_t );
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	3302      	adds	r3, #2
 800e11a:	617b      	str	r3, [r7, #20]

    /* Sum the lengths of all subscription topic filters; add 1 byte for each
     * subscription's QoS if type is MQTT_SUBSCRIBE. */
    for( i = 0; i < subscriptionCount; i++ )
 800e11c:	2300      	movs	r3, #0
 800e11e:	61bb      	str	r3, [r7, #24]
 800e120:	e02f      	b.n	800e182 <calculateSubscriptionPacketSize+0xd6>
    {
        /* Add the length of the topic filter. MQTT strings are prepended
         * with 2 byte string length field. Hence 2 bytes are added to size. */
        packetSize += pSubscriptionList[ i ].topicFilterLength + sizeof( uint16_t );
 800e122:	69ba      	ldr	r2, [r7, #24]
 800e124:	4613      	mov	r3, r2
 800e126:	005b      	lsls	r3, r3, #1
 800e128:	4413      	add	r3, r2
 800e12a:	009b      	lsls	r3, r3, #2
 800e12c:	461a      	mov	r2, r3
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	4413      	add	r3, r2
 800e132:	891b      	ldrh	r3, [r3, #8]
 800e134:	461a      	mov	r2, r3
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	4413      	add	r3, r2
 800e13a:	3302      	adds	r3, #2
 800e13c:	617b      	str	r3, [r7, #20]

        /* Only SUBSCRIBE packets include the QoS. */
        if( subscriptionType == MQTT_SUBSCRIBE )
 800e13e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e142:	2b00      	cmp	r3, #0
 800e144:	d102      	bne.n	800e14c <calculateSubscriptionPacketSize+0xa0>
        {
            packetSize += 1U;
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	3301      	adds	r3, #1
 800e14a:	617b      	str	r3, [r7, #20]
        }

        /* Validate each topic filter. */
        if( ( pSubscriptionList[ i ].topicFilterLength == 0U ) ||
 800e14c:	69ba      	ldr	r2, [r7, #24]
 800e14e:	4613      	mov	r3, r2
 800e150:	005b      	lsls	r3, r3, #1
 800e152:	4413      	add	r3, r2
 800e154:	009b      	lsls	r3, r3, #2
 800e156:	461a      	mov	r2, r3
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	4413      	add	r3, r2
 800e15c:	891b      	ldrh	r3, [r3, #8]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d00a      	beq.n	800e178 <calculateSubscriptionPacketSize+0xcc>
            ( pSubscriptionList[ i ].pTopicFilter == NULL ) )
 800e162:	69ba      	ldr	r2, [r7, #24]
 800e164:	4613      	mov	r3, r2
 800e166:	005b      	lsls	r3, r3, #1
 800e168:	4413      	add	r3, r2
 800e16a:	009b      	lsls	r3, r3, #2
 800e16c:	461a      	mov	r2, r3
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	4413      	add	r3, r2
 800e172:	685b      	ldr	r3, [r3, #4]
        if( ( pSubscriptionList[ i ].topicFilterLength == 0U ) ||
 800e174:	2b00      	cmp	r3, #0
 800e176:	d101      	bne.n	800e17c <calculateSubscriptionPacketSize+0xd0>
        {
            status = MQTTBadParameter;
 800e178:	2301      	movs	r3, #1
 800e17a:	77fb      	strb	r3, [r7, #31]
    for( i = 0; i < subscriptionCount; i++ )
 800e17c:	69bb      	ldr	r3, [r7, #24]
 800e17e:	3301      	adds	r3, #1
 800e180:	61bb      	str	r3, [r7, #24]
 800e182:	69ba      	ldr	r2, [r7, #24]
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	429a      	cmp	r2, r3
 800e188:	d3cb      	bcc.n	800e122 <calculateSubscriptionPacketSize+0x76>
    }

    /* At this point, the "Remaining length" has been calculated. Return error
     * if the "Remaining length" exceeds what is allowed by MQTT 3.1.1. Otherwise,
     * set the output parameter.*/
    if( packetSize > MQTT_MAX_REMAINING_LENGTH )
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e190:	d301      	bcc.n	800e196 <calculateSubscriptionPacketSize+0xea>
    {
        LogError( ( "Subscription packet length of %lu exceeds"
                    "the MQTT 3.1.1 maximum packet length of %lu.",
                    ( unsigned long ) packetSize,
                    MQTT_MAX_REMAINING_LENGTH ) );
        status = MQTTBadParameter;
 800e192:	2301      	movs	r3, #1
 800e194:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800e196:	7ffb      	ldrb	r3, [r7, #31]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d10d      	bne.n	800e1b8 <calculateSubscriptionPacketSize+0x10c>
    {
        *pRemainingLength = packetSize;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	697a      	ldr	r2, [r7, #20]
 800e1a0:	601a      	str	r2, [r3, #0]

        /* Calculate the full size of the subscription packet by adding
         * number of bytes required to encode the "Remaining length" field
         * plus 1 byte for the "Packet type" field. */
        packetSize += 1U + remainingLengthEncodedSize( packetSize );
 800e1a2:	6978      	ldr	r0, [r7, #20]
 800e1a4:	f7ff fc22 	bl	800d9ec <remainingLengthEncodedSize>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	3301      	adds	r3, #1
 800e1ac:	697a      	ldr	r2, [r7, #20]
 800e1ae:	4413      	add	r3, r2
 800e1b0:	617b      	str	r3, [r7, #20]

        /*Set the pPacketSize output parameter. */
        *pPacketSize = packetSize;
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	697a      	ldr	r2, [r7, #20]
 800e1b6:	601a      	str	r2, [r3, #0]

    LogDebug( ( "Subscription packet remaining length=%lu and packet size=%lu.",
                ( unsigned long ) *pRemainingLength,
                ( unsigned long ) *pPacketSize ) );

    return status;
 800e1b8:	7ffb      	ldrb	r3, [r7, #31]
}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3720      	adds	r7, #32
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}
 800e1c2:	bf00      	nop
 800e1c4:	08017664 	.word	0x08017664
 800e1c8:	08017d0c 	.word	0x08017d0c
 800e1cc:	0801748c 	.word	0x0801748c
 800e1d0:	08017680 	.word	0x08017680
 800e1d4:	080174d8 	.word	0x080174d8
 800e1d8:	080174f4 	.word	0x080174f4

0800e1dc <readSubackStatus>:

/*-----------------------------------------------------------*/

static MQTTStatus_t readSubackStatus( size_t statusCount,
                                      const uint8_t * pStatusStart )
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b086      	sub	sp, #24
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
 800e1e4:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	75fb      	strb	r3, [r7, #23]
    uint8_t subscriptionStatus = 0;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	73fb      	strb	r3, [r7, #15]
    size_t i = 0;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	613b      	str	r3, [r7, #16]

    assert( pStatusStart != NULL );
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d106      	bne.n	800e206 <readSubackStatus+0x2a>
 800e1f8:	4b17      	ldr	r3, [pc, #92]	; (800e258 <readSubackStatus+0x7c>)
 800e1fa:	4a18      	ldr	r2, [pc, #96]	; (800e25c <readSubackStatus+0x80>)
 800e1fc:	f240 41e7 	movw	r1, #1255	; 0x4e7
 800e200:	4817      	ldr	r0, [pc, #92]	; (800e260 <readSubackStatus+0x84>)
 800e202:	f004 fe73 	bl	8012eec <__assert_func>

    /* Iterate through each status byte in the SUBACK packet. */
    for( i = 0; i < statusCount; i++ )
 800e206:	2300      	movs	r3, #0
 800e208:	613b      	str	r3, [r7, #16]
 800e20a:	e019      	b.n	800e240 <readSubackStatus+0x64>
    {
        /* Read a single status byte in SUBACK. */
        subscriptionStatus = pStatusStart[ i ];
 800e20c:	683a      	ldr	r2, [r7, #0]
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	4413      	add	r3, r2
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	73fb      	strb	r3, [r7, #15]

        /* MQTT 3.1.1 defines the following values as status codes. */
        switch( subscriptionStatus )
 800e216:	7bfb      	ldrb	r3, [r7, #15]
 800e218:	2b02      	cmp	r3, #2
 800e21a:	dc02      	bgt.n	800e222 <readSubackStatus+0x46>
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	da08      	bge.n	800e232 <readSubackStatus+0x56>
 800e220:	e004      	b.n	800e22c <readSubackStatus+0x50>
 800e222:	2b80      	cmp	r3, #128	; 0x80
 800e224:	d102      	bne.n	800e22c <readSubackStatus+0x50>
            case 0x80:

                LogWarn( ( "Topic filter %lu refused.", ( unsigned long ) i ) );

                /* Application should remove subscription from the list */
                status = MQTTServerRefused;
 800e226:	2306      	movs	r3, #6
 800e228:	75fb      	strb	r3, [r7, #23]

                break;
 800e22a:	e003      	b.n	800e234 <readSubackStatus+0x58>

            default:
                LogError( ( "Bad SUBSCRIBE status %u.",
                            ( unsigned int ) subscriptionStatus ) );

                status = MQTTBadResponse;
 800e22c:	2305      	movs	r3, #5
 800e22e:	75fb      	strb	r3, [r7, #23]

                break;
 800e230:	e000      	b.n	800e234 <readSubackStatus+0x58>
                break;
 800e232:	bf00      	nop
        }

        /* Stop parsing the subscription statuses if a bad response was received. */
        if( status == MQTTBadResponse )
 800e234:	7dfb      	ldrb	r3, [r7, #23]
 800e236:	2b05      	cmp	r3, #5
 800e238:	d007      	beq.n	800e24a <readSubackStatus+0x6e>
    for( i = 0; i < statusCount; i++ )
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	3301      	adds	r3, #1
 800e23e:	613b      	str	r3, [r7, #16]
 800e240:	693a      	ldr	r2, [r7, #16]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	429a      	cmp	r2, r3
 800e246:	d3e1      	bcc.n	800e20c <readSubackStatus+0x30>
 800e248:	e000      	b.n	800e24c <readSubackStatus+0x70>
        {
            break;
 800e24a:	bf00      	nop
        }
    }

    return status;
 800e24c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3718      	adds	r7, #24
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	08017698 	.word	0x08017698
 800e25c:	08017d2c 	.word	0x08017d2c
 800e260:	0801748c 	.word	0x0801748c

0800e264 <deserializeSuback>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeSuback( const MQTTPacketInfo_t * pSuback,
                                       uint16_t * pPacketIdentifier )
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b086      	sub	sp, #24
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
 800e26c:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800e26e:	2300      	movs	r3, #0
 800e270:	75fb      	strb	r3, [r7, #23]
    size_t remainingLength;
    const uint8_t * pVariableHeader = NULL;
 800e272:	2300      	movs	r3, #0
 800e274:	613b      	str	r3, [r7, #16]

    assert( pSuback != NULL );
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d106      	bne.n	800e28a <deserializeSuback+0x26>
 800e27c:	4b1f      	ldr	r3, [pc, #124]	; (800e2fc <deserializeSuback+0x98>)
 800e27e:	4a20      	ldr	r2, [pc, #128]	; (800e300 <deserializeSuback+0x9c>)
 800e280:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800e284:	481f      	ldr	r0, [pc, #124]	; (800e304 <deserializeSuback+0xa0>)
 800e286:	f004 fe31 	bl	8012eec <__assert_func>
    assert( pPacketIdentifier != NULL );
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d106      	bne.n	800e29e <deserializeSuback+0x3a>
 800e290:	4b1d      	ldr	r3, [pc, #116]	; (800e308 <deserializeSuback+0xa4>)
 800e292:	4a1b      	ldr	r2, [pc, #108]	; (800e300 <deserializeSuback+0x9c>)
 800e294:	f240 5121 	movw	r1, #1313	; 0x521
 800e298:	481a      	ldr	r0, [pc, #104]	; (800e304 <deserializeSuback+0xa0>)
 800e29a:	f004 fe27 	bl	8012eec <__assert_func>

    remainingLength = pSuback->remainingLength;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	689b      	ldr	r3, [r3, #8]
 800e2a2:	60fb      	str	r3, [r7, #12]
    pVariableHeader = pSuback->pRemainingData;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	685b      	ldr	r3, [r3, #4]
 800e2a8:	613b      	str	r3, [r7, #16]

    /* A SUBACK must have a remaining length of at least 3 to accommodate the
     * packet identifier and at least 1 return code. */
    if( remainingLength < 3U )
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2b02      	cmp	r3, #2
 800e2ae:	d802      	bhi.n	800e2b6 <deserializeSuback+0x52>
    {
        LogError( ( "SUBACK cannot have a remaining length less than 3." ) );
        status = MQTTBadResponse;
 800e2b0:	2305      	movs	r3, #5
 800e2b2:	75fb      	strb	r3, [r7, #23]
 800e2b4:	e01d      	b.n	800e2f2 <deserializeSuback+0x8e>
    }
    else
    {
        /* Extract the packet identifier (first 2 bytes of variable header) from SUBACK. */
        *pPacketIdentifier = UINT16_DECODE( pVariableHeader );
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	021b      	lsls	r3, r3, #8
 800e2bc:	b21a      	sxth	r2, r3
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	b21b      	sxth	r3, r3
 800e2c6:	4313      	orrs	r3, r2
 800e2c8:	b21b      	sxth	r3, r3
 800e2ca:	b29a      	uxth	r2, r3
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	801a      	strh	r2, [r3, #0]

        LogDebug( ( "Packet identifier %hu.",
                    ( unsigned short ) *pPacketIdentifier ) );

        if( *pPacketIdentifier == 0U )
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	881b      	ldrh	r3, [r3, #0]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d102      	bne.n	800e2de <deserializeSuback+0x7a>
        {
            status = MQTTBadResponse;
 800e2d8:	2305      	movs	r3, #5
 800e2da:	75fb      	strb	r3, [r7, #23]
 800e2dc:	e009      	b.n	800e2f2 <deserializeSuback+0x8e>
        }
        else
        {
            status = readSubackStatus( remainingLength - sizeof( uint16_t ),
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	1e9a      	subs	r2, r3, #2
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	3302      	adds	r3, #2
 800e2e6:	4619      	mov	r1, r3
 800e2e8:	4610      	mov	r0, r2
 800e2ea:	f7ff ff77 	bl	800e1dc <readSubackStatus>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	75fb      	strb	r3, [r7, #23]
                                       &pVariableHeader[ sizeof( uint16_t ) ] );
        }
    }

    return status;
 800e2f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3718      	adds	r7, #24
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	080176b0 	.word	0x080176b0
 800e300:	08017d40 	.word	0x08017d40
 800e304:	0801748c 	.word	0x0801748c
 800e308:	080176c0 	.word	0x080176c0

0800e30c <deserializePublish>:
/*-----------------------------------------------------------*/

static MQTTStatus_t deserializePublish( const MQTTPacketInfo_t * pIncomingPacket,
                                        uint16_t * pPacketId,
                                        MQTTPublishInfo_t * pPublishInfo )
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b088      	sub	sp, #32
 800e310:	af00      	add	r7, sp, #0
 800e312:	60f8      	str	r0, [r7, #12]
 800e314:	60b9      	str	r1, [r7, #8]
 800e316:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800e318:	2300      	movs	r3, #0
 800e31a:	77fb      	strb	r3, [r7, #31]
    const uint8_t * pVariableHeader, * pPacketIdentifierHigh = NULL;
 800e31c:	2300      	movs	r3, #0
 800e31e:	61bb      	str	r3, [r7, #24]

    assert( pIncomingPacket != NULL );
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d106      	bne.n	800e334 <deserializePublish+0x28>
 800e326:	4b53      	ldr	r3, [pc, #332]	; (800e474 <deserializePublish+0x168>)
 800e328:	4a53      	ldr	r2, [pc, #332]	; (800e478 <deserializePublish+0x16c>)
 800e32a:	f240 5185 	movw	r1, #1413	; 0x585
 800e32e:	4853      	ldr	r0, [pc, #332]	; (800e47c <deserializePublish+0x170>)
 800e330:	f004 fddc 	bl	8012eec <__assert_func>
    assert( pPacketId != NULL );
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d106      	bne.n	800e348 <deserializePublish+0x3c>
 800e33a:	4b51      	ldr	r3, [pc, #324]	; (800e480 <deserializePublish+0x174>)
 800e33c:	4a4e      	ldr	r2, [pc, #312]	; (800e478 <deserializePublish+0x16c>)
 800e33e:	f240 5186 	movw	r1, #1414	; 0x586
 800e342:	484e      	ldr	r0, [pc, #312]	; (800e47c <deserializePublish+0x170>)
 800e344:	f004 fdd2 	bl	8012eec <__assert_func>
    assert( pPublishInfo != NULL );
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d106      	bne.n	800e35c <deserializePublish+0x50>
 800e34e:	4b4d      	ldr	r3, [pc, #308]	; (800e484 <deserializePublish+0x178>)
 800e350:	4a49      	ldr	r2, [pc, #292]	; (800e478 <deserializePublish+0x16c>)
 800e352:	f240 5187 	movw	r1, #1415	; 0x587
 800e356:	4849      	ldr	r0, [pc, #292]	; (800e47c <deserializePublish+0x170>)
 800e358:	f004 fdc8 	bl	8012eec <__assert_func>
    assert( pIncomingPacket->pRemainingData != NULL );
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	685b      	ldr	r3, [r3, #4]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d106      	bne.n	800e372 <deserializePublish+0x66>
 800e364:	4b48      	ldr	r3, [pc, #288]	; (800e488 <deserializePublish+0x17c>)
 800e366:	4a44      	ldr	r2, [pc, #272]	; (800e478 <deserializePublish+0x16c>)
 800e368:	f44f 61b1 	mov.w	r1, #1416	; 0x588
 800e36c:	4843      	ldr	r0, [pc, #268]	; (800e47c <deserializePublish+0x170>)
 800e36e:	f004 fdbd 	bl	8012eec <__assert_func>

    pVariableHeader = pIncomingPacket->pRemainingData;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	685b      	ldr	r3, [r3, #4]
 800e376:	617b      	str	r3, [r7, #20]
    /* The flags are the lower 4 bits of the first byte in PUBLISH. */
    status = processPublishFlags( ( pIncomingPacket->type & 0x0FU ), pPublishInfo );
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	f003 030f 	and.w	r3, r3, #15
 800e380:	b2db      	uxtb	r3, r3
 800e382:	6879      	ldr	r1, [r7, #4]
 800e384:	4618      	mov	r0, r3
 800e386:	f7ff fdaf 	bl	800dee8 <processPublishFlags>
 800e38a:	4603      	mov	r3, r0
 800e38c:	77fb      	strb	r3, [r7, #31]

    if( status == MQTTSuccess )
 800e38e:	7ffb      	ldrb	r3, [r7, #31]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d109      	bne.n	800e3a8 <deserializePublish+0x9c>
        /* Sanity checks for "Remaining length". A QoS 0 PUBLISH  must have a remaining
         * length of at least 3 to accommodate topic name length (2 bytes) and topic
         * name (at least 1 byte). A QoS 1 or 2 PUBLISH must have a remaining length of
         * at least 5 for the packet identifier in addition to the topic name length and
         * topic name. */
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	6898      	ldr	r0, [r3, #8]
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	2203      	movs	r2, #3
 800e39e:	4619      	mov	r1, r3
 800e3a0:	f7ff fd81 	bl	800dea6 <checkPublishRemainingLength>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	77fb      	strb	r3, [r7, #31]
                                              pPublishInfo->qos,
                                              MQTT_MIN_PUBLISH_REMAINING_LENGTH_QOS0 );
    }

    if( status == MQTTSuccess )
 800e3a8:	7ffb      	ldrb	r3, [r7, #31]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d118      	bne.n	800e3e0 <deserializePublish+0xd4>
    {
        /* Extract the topic name starting from the first byte of the variable header.
         * The topic name string starts at byte 3 in the variable header. */
        pPublishInfo->topicNameLength = UINT16_DECODE( pVariableHeader );
 800e3ae:	697b      	ldr	r3, [r7, #20]
 800e3b0:	781b      	ldrb	r3, [r3, #0]
 800e3b2:	021b      	lsls	r3, r3, #8
 800e3b4:	b21a      	sxth	r2, r3
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	781b      	ldrb	r3, [r3, #0]
 800e3bc:	b21b      	sxth	r3, r3
 800e3be:	4313      	orrs	r3, r2
 800e3c0:	b21b      	sxth	r3, r3
 800e3c2:	b29a      	uxth	r2, r3
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	811a      	strh	r2, [r3, #8]

        /* Sanity checks for topic name length and "Remaining length". The remaining
         * length must be at least as large as the variable length header. */
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	6898      	ldr	r0, [r3, #8]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	7819      	ldrb	r1, [r3, #0]
                                              pPublishInfo->qos,
                                              pPublishInfo->topicNameLength + sizeof( uint16_t ) );
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	891b      	ldrh	r3, [r3, #8]
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800e3d4:	3302      	adds	r3, #2
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	f7ff fd65 	bl	800dea6 <checkPublishRemainingLength>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800e3e0:	7ffb      	ldrb	r3, [r7, #31]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d123      	bne.n	800e42e <deserializePublish+0x122>
    {
        /* Parse the topic. */
        pPublishInfo->pTopicName = ( const char * ) ( &pVariableHeader[ sizeof( uint16_t ) ] );
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	1c9a      	adds	r2, r3, #2
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	605a      	str	r2, [r3, #4]
        LogDebug( ( "Topic name length: %hu.", ( unsigned short ) pPublishInfo->topicNameLength ) );

        /* Extract the packet identifier for QoS 1 or 2 PUBLISH packets. Packet
         * identifier starts immediately after the topic name. */
        pPacketIdentifierHigh = ( const uint8_t * ) ( &pPublishInfo->pTopicName[ pPublishInfo->topicNameLength ] );
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	685b      	ldr	r3, [r3, #4]
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	8912      	ldrh	r2, [r2, #8]
 800e3f6:	4413      	add	r3, r2
 800e3f8:	61bb      	str	r3, [r7, #24]

        if( pPublishInfo->qos > MQTTQoS0 )
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	781b      	ldrb	r3, [r3, #0]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d015      	beq.n	800e42e <deserializePublish+0x122>
        {
            *pPacketId = UINT16_DECODE( pPacketIdentifierHigh );
 800e402:	69bb      	ldr	r3, [r7, #24]
 800e404:	781b      	ldrb	r3, [r3, #0]
 800e406:	021b      	lsls	r3, r3, #8
 800e408:	b21a      	sxth	r2, r3
 800e40a:	69bb      	ldr	r3, [r7, #24]
 800e40c:	3301      	adds	r3, #1
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	b21b      	sxth	r3, r3
 800e412:	4313      	orrs	r3, r2
 800e414:	b21b      	sxth	r3, r3
 800e416:	b29a      	uxth	r2, r3
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	801a      	strh	r2, [r3, #0]

            LogDebug( ( "Packet identifier %hu.",
                        ( unsigned short ) *pPacketId ) );

            /* Advance pointer two bytes to start of payload as in the QoS 0 case. */
            pPacketIdentifierHigh = &pPacketIdentifierHigh[ sizeof( uint16_t ) ];
 800e41c:	69bb      	ldr	r3, [r7, #24]
 800e41e:	3302      	adds	r3, #2
 800e420:	61bb      	str	r3, [r7, #24]

            /* Packet identifier cannot be 0. */
            if( *pPacketId == 0U )
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	881b      	ldrh	r3, [r3, #0]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d101      	bne.n	800e42e <deserializePublish+0x122>
            {
                LogError( ( "Packet identifier cannot be 0." ) );
                status = MQTTBadResponse;
 800e42a:	2305      	movs	r3, #5
 800e42c:	77fb      	strb	r3, [r7, #31]
            }
        }
    }

    if( status == MQTTSuccess )
 800e42e:	7ffb      	ldrb	r3, [r7, #31]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d119      	bne.n	800e468 <deserializePublish+0x15c>
    {
        /* Calculate the length of the payload. QoS 1 or 2 PUBLISH packets contain
         * a packet identifier, but QoS 0 PUBLISH packets do not. */
        pPublishInfo->payloadLength = pIncomingPacket->remainingLength - pPublishInfo->topicNameLength - sizeof( uint16_t );
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	689b      	ldr	r3, [r3, #8]
 800e438:	687a      	ldr	r2, [r7, #4]
 800e43a:	8912      	ldrh	r2, [r2, #8]
 800e43c:	1a9b      	subs	r3, r3, r2
 800e43e:	1e9a      	subs	r2, r3, #2
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	611a      	str	r2, [r3, #16]

        if( pPublishInfo->qos != MQTTQoS0 )
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	781b      	ldrb	r3, [r3, #0]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d004      	beq.n	800e456 <deserializePublish+0x14a>
        {
            /* Two more bytes for the packet identifier. */
            pPublishInfo->payloadLength -= sizeof( uint16_t );
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	691b      	ldr	r3, [r3, #16]
 800e450:	1e9a      	subs	r2, r3, #2
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	611a      	str	r2, [r3, #16]
        }

        /* Set payload if it exists. */
        pPublishInfo->pPayload = ( pPublishInfo->payloadLength != 0U ) ? pPacketIdentifierHigh : NULL;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	691b      	ldr	r3, [r3, #16]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d001      	beq.n	800e462 <deserializePublish+0x156>
 800e45e:	69bb      	ldr	r3, [r7, #24]
 800e460:	e000      	b.n	800e464 <deserializePublish+0x158>
 800e462:	2300      	movs	r3, #0
 800e464:	687a      	ldr	r2, [r7, #4]
 800e466:	60d3      	str	r3, [r2, #12]

        LogDebug( ( "Payload length %lu.",
                    ( unsigned long ) pPublishInfo->payloadLength ) );
    }

    return status;
 800e468:	7ffb      	ldrb	r3, [r7, #31]
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	3720      	adds	r7, #32
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}
 800e472:	bf00      	nop
 800e474:	080176dc 	.word	0x080176dc
 800e478:	08017d54 	.word	0x08017d54
 800e47c:	0801748c 	.word	0x0801748c
 800e480:	080176f4 	.word	0x080176f4
 800e484:	080174c0 	.word	0x080174c0
 800e488:	08017708 	.word	0x08017708

0800e48c <deserializeSimpleAck>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeSimpleAck( const MQTTPacketInfo_t * pAck,
                                          uint16_t * pPacketIdentifier )
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800e496:	2300      	movs	r3, #0
 800e498:	73fb      	strb	r3, [r7, #15]

    assert( pAck != NULL );
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d106      	bne.n	800e4ae <deserializeSimpleAck+0x22>
 800e4a0:	4b18      	ldr	r3, [pc, #96]	; (800e504 <deserializeSimpleAck+0x78>)
 800e4a2:	4a19      	ldr	r2, [pc, #100]	; (800e508 <deserializeSimpleAck+0x7c>)
 800e4a4:	f240 51e1 	movw	r1, #1505	; 0x5e1
 800e4a8:	4818      	ldr	r0, [pc, #96]	; (800e50c <deserializeSimpleAck+0x80>)
 800e4aa:	f004 fd1f 	bl	8012eec <__assert_func>
    assert( pPacketIdentifier != NULL );
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d106      	bne.n	800e4c2 <deserializeSimpleAck+0x36>
 800e4b4:	4b16      	ldr	r3, [pc, #88]	; (800e510 <deserializeSimpleAck+0x84>)
 800e4b6:	4a14      	ldr	r2, [pc, #80]	; (800e508 <deserializeSimpleAck+0x7c>)
 800e4b8:	f240 51e2 	movw	r1, #1506	; 0x5e2
 800e4bc:	4813      	ldr	r0, [pc, #76]	; (800e50c <deserializeSimpleAck+0x80>)
 800e4be:	f004 fd15 	bl	8012eec <__assert_func>

    /* Check that the "Remaining length" of the received ACK is 2. */
    if( pAck->remainingLength != MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH )
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	689b      	ldr	r3, [r3, #8]
 800e4c6:	2b02      	cmp	r3, #2
 800e4c8:	d002      	beq.n	800e4d0 <deserializeSimpleAck+0x44>
    {
        LogError( ( "ACK does not have remaining length of %u.",
                    ( unsigned int ) MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800e4ca:	2305      	movs	r3, #5
 800e4cc:	73fb      	strb	r3, [r7, #15]
 800e4ce:	e014      	b.n	800e4fa <deserializeSimpleAck+0x6e>
    }
    else
    {
        /* Extract the packet identifier (third and fourth bytes) from ACK. */
        *pPacketIdentifier = UINT16_DECODE( pAck->pRemainingData );
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	781b      	ldrb	r3, [r3, #0]
 800e4d6:	021b      	lsls	r3, r3, #8
 800e4d8:	b21a      	sxth	r2, r3
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	685b      	ldr	r3, [r3, #4]
 800e4de:	3301      	adds	r3, #1
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	b21b      	sxth	r3, r3
 800e4e4:	4313      	orrs	r3, r2
 800e4e6:	b21b      	sxth	r3, r3
 800e4e8:	b29a      	uxth	r2, r3
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	801a      	strh	r2, [r3, #0]

        LogDebug( ( "Packet identifier %hu.",
                    ( unsigned short ) *pPacketIdentifier ) );

        /* Packet identifier cannot be 0. */
        if( *pPacketIdentifier == 0U )
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	881b      	ldrh	r3, [r3, #0]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d101      	bne.n	800e4fa <deserializeSimpleAck+0x6e>
        {
            LogError( ( "Packet identifier cannot be 0." ) );
            status = MQTTBadResponse;
 800e4f6:	2305      	movs	r3, #5
 800e4f8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return status;
 800e4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3710      	adds	r7, #16
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}
 800e504:	08017730 	.word	0x08017730
 800e508:	08017d68 	.word	0x08017d68
 800e50c:	0801748c 	.word	0x0801748c
 800e510:	080176c0 	.word	0x080176c0

0800e514 <deserializePingresp>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializePingresp( const MQTTPacketInfo_t * pPingresp )
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b084      	sub	sp, #16
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800e51c:	2300      	movs	r3, #0
 800e51e:	73fb      	strb	r3, [r7, #15]

    assert( pPingresp != NULL );
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d106      	bne.n	800e534 <deserializePingresp+0x20>
 800e526:	4b09      	ldr	r3, [pc, #36]	; (800e54c <deserializePingresp+0x38>)
 800e528:	4a09      	ldr	r2, [pc, #36]	; (800e550 <deserializePingresp+0x3c>)
 800e52a:	f240 6105 	movw	r1, #1541	; 0x605
 800e52e:	4809      	ldr	r0, [pc, #36]	; (800e554 <deserializePingresp+0x40>)
 800e530:	f004 fcdc 	bl	8012eec <__assert_func>

    /* Check the "Remaining length" (second byte) of the received PINGRESP is 0. */
    if( pPingresp->remainingLength != MQTT_PACKET_PINGRESP_REMAINING_LENGTH )
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	689b      	ldr	r3, [r3, #8]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d001      	beq.n	800e540 <deserializePingresp+0x2c>
    {
        LogError( ( "PINGRESP does not have remaining length of %u.",
                    MQTT_PACKET_PINGRESP_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800e53c:	2305      	movs	r3, #5
 800e53e:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800e540:	7bfb      	ldrb	r3, [r7, #15]
}
 800e542:	4618      	mov	r0, r3
 800e544:	3710      	adds	r7, #16
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}
 800e54a:	bf00      	nop
 800e54c:	08017740 	.word	0x08017740
 800e550:	08017d80 	.word	0x08017d80
 800e554:	0801748c 	.word	0x0801748c

0800e558 <MQTT_SerializeConnectFixedHeader>:

uint8_t * MQTT_SerializeConnectFixedHeader( uint8_t * pIndex,
                                            const MQTTConnectInfo_t * pConnectInfo,
                                            const MQTTPublishInfo_t * pWillInfo,
                                            size_t remainingLength )
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b086      	sub	sp, #24
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	60f8      	str	r0, [r7, #12]
 800e560:	60b9      	str	r1, [r7, #8]
 800e562:	607a      	str	r2, [r7, #4]
 800e564:	603b      	str	r3, [r7, #0]
    uint8_t * pIndexLocal = pIndex;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	613b      	str	r3, [r7, #16]
    uint8_t connectFlags = 0U;
 800e56a:	2300      	movs	r3, #0
 800e56c:	75fb      	strb	r3, [r7, #23]

    /* The first byte in the CONNECT packet is the control packet type. */
    *pIndexLocal = MQTT_PACKET_TYPE_CONNECT;
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	2210      	movs	r2, #16
 800e572:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	3301      	adds	r3, #1
 800e578:	613b      	str	r3, [r7, #16]

    /* The remaining length of the CONNECT packet is encoded starting from the
     * second byte. The remaining length does not include the length of the fixed
     * header or the encoding of the remaining length. */
    pIndexLocal = encodeRemainingLength( pIndexLocal, remainingLength );
 800e57a:	6839      	ldr	r1, [r7, #0]
 800e57c:	6938      	ldr	r0, [r7, #16]
 800e57e:	f7ff fa57 	bl	800da30 <encodeRemainingLength>
 800e582:	6138      	str	r0, [r7, #16]

    /* The string "MQTT" is placed at the beginning of the CONNECT packet's variable
     * header. This string is 4 bytes long. */
    pIndexLocal = encodeString( pIndexLocal, "MQTT", 4 );
 800e584:	2204      	movs	r2, #4
 800e586:	492f      	ldr	r1, [pc, #188]	; (800e644 <MQTT_SerializeConnectFixedHeader+0xec>)
 800e588:	6938      	ldr	r0, [r7, #16]
 800e58a:	f7ff fa89 	bl	800daa0 <encodeString>
 800e58e:	6138      	str	r0, [r7, #16]

    /* The MQTT protocol version is the second field of the variable header. */
    *pIndexLocal = MQTT_VERSION_3_1_1;
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	2204      	movs	r2, #4
 800e594:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	3301      	adds	r3, #1
 800e59a:	613b      	str	r3, [r7, #16]

    /* Set the clean session flag if needed. */
    if( pConnectInfo->cleanSession == true )
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d003      	beq.n	800e5ac <MQTT_SerializeConnectFixedHeader+0x54>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_CLEAN );
 800e5a4:	7dfb      	ldrb	r3, [r7, #23]
 800e5a6:	f043 0302 	orr.w	r3, r3, #2
 800e5aa:	75fb      	strb	r3, [r7, #23]
    }

    /* Set the flags for username and password if provided. */
    if( pConnectInfo->pUserName != NULL )
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	68db      	ldr	r3, [r3, #12]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d003      	beq.n	800e5bc <MQTT_SerializeConnectFixedHeader+0x64>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_USERNAME );
 800e5b4:	7dfb      	ldrb	r3, [r7, #23]
 800e5b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e5ba:	75fb      	strb	r3, [r7, #23]
    }

    if( pConnectInfo->pPassword != NULL )
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	695b      	ldr	r3, [r3, #20]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d003      	beq.n	800e5cc <MQTT_SerializeConnectFixedHeader+0x74>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_PASSWORD );
 800e5c4:	7dfb      	ldrb	r3, [r7, #23]
 800e5c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5ca:	75fb      	strb	r3, [r7, #23]
    }

    /* Set will flag if a Last Will and Testament is provided. */
    if( pWillInfo != NULL )
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d01c      	beq.n	800e60c <MQTT_SerializeConnectFixedHeader+0xb4>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL );
 800e5d2:	7dfb      	ldrb	r3, [r7, #23]
 800e5d4:	f043 0304 	orr.w	r3, r3, #4
 800e5d8:	75fb      	strb	r3, [r7, #23]

        /* Flags only need to be changed for Will QoS 1 or 2. */
        if( pWillInfo->qos == MQTTQoS1 )
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	781b      	ldrb	r3, [r3, #0]
 800e5de:	2b01      	cmp	r3, #1
 800e5e0:	d104      	bne.n	800e5ec <MQTT_SerializeConnectFixedHeader+0x94>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_QOS1 );
 800e5e2:	7dfb      	ldrb	r3, [r7, #23]
 800e5e4:	f043 0308 	orr.w	r3, r3, #8
 800e5e8:	75fb      	strb	r3, [r7, #23]
 800e5ea:	e007      	b.n	800e5fc <MQTT_SerializeConnectFixedHeader+0xa4>
        }
        else if( pWillInfo->qos == MQTTQoS2 )
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	781b      	ldrb	r3, [r3, #0]
 800e5f0:	2b02      	cmp	r3, #2
 800e5f2:	d103      	bne.n	800e5fc <MQTT_SerializeConnectFixedHeader+0xa4>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_QOS2 );
 800e5f4:	7dfb      	ldrb	r3, [r7, #23]
 800e5f6:	f043 0310 	orr.w	r3, r3, #16
 800e5fa:	75fb      	strb	r3, [r7, #23]
        else
        {
            /* Empty else MISRA 15.7 */
        }

        if( pWillInfo->retain == true )
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	785b      	ldrb	r3, [r3, #1]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d003      	beq.n	800e60c <MQTT_SerializeConnectFixedHeader+0xb4>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_RETAIN );
 800e604:	7dfb      	ldrb	r3, [r7, #23]
 800e606:	f043 0320 	orr.w	r3, r3, #32
 800e60a:	75fb      	strb	r3, [r7, #23]
        }
    }

    *pIndexLocal = connectFlags;
 800e60c:	693b      	ldr	r3, [r7, #16]
 800e60e:	7dfa      	ldrb	r2, [r7, #23]
 800e610:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800e612:	693b      	ldr	r3, [r7, #16]
 800e614:	3301      	adds	r3, #1
 800e616:	613b      	str	r3, [r7, #16]

    /* Write the 2 bytes of the keep alive interval into the CONNECT packet. */
    pIndexLocal[ 0 ] = UINT16_HIGH_BYTE( pConnectInfo->keepAliveSeconds );
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	885b      	ldrh	r3, [r3, #2]
 800e61c:	0a1b      	lsrs	r3, r3, #8
 800e61e:	b29b      	uxth	r3, r3
 800e620:	b2da      	uxtb	r2, r3
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	701a      	strb	r2, [r3, #0]
    pIndexLocal[ 1 ] = UINT16_LOW_BYTE( pConnectInfo->keepAliveSeconds );
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	885a      	ldrh	r2, [r3, #2]
 800e62a:	693b      	ldr	r3, [r7, #16]
 800e62c:	3301      	adds	r3, #1
 800e62e:	b2d2      	uxtb	r2, r2
 800e630:	701a      	strb	r2, [r3, #0]
    pIndexLocal = &pIndexLocal[ 2 ];
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	3302      	adds	r3, #2
 800e636:	613b      	str	r3, [r7, #16]

    return pIndexLocal;
 800e638:	693b      	ldr	r3, [r7, #16]
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3718      	adds	r7, #24
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	08017754 	.word	0x08017754

0800e648 <MQTT_GetConnectPacketSize>:

MQTTStatus_t MQTT_GetConnectPacketSize( const MQTTConnectInfo_t * pConnectInfo,
                                        const MQTTPublishInfo_t * pWillInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b088      	sub	sp, #32
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	60f8      	str	r0, [r7, #12]
 800e650:	60b9      	str	r1, [r7, #8]
 800e652:	607a      	str	r2, [r7, #4]
 800e654:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800e656:	2300      	movs	r3, #0
 800e658:	77fb      	strb	r3, [r7, #31]
    size_t remainingLength;

    /* The CONNECT packet will always include a 10-byte variable header. */
    size_t connectPacketSize = MQTT_PACKET_CONNECT_HEADER_SIZE;
 800e65a:	230a      	movs	r3, #10
 800e65c:	61bb      	str	r3, [r7, #24]

    /* Validate arguments. */
    if( ( pConnectInfo == NULL ) || ( pRemainingLength == NULL ) ||
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d005      	beq.n	800e670 <MQTT_GetConnectPacketSize+0x28>
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d002      	beq.n	800e670 <MQTT_GetConnectPacketSize+0x28>
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d102      	bne.n	800e676 <MQTT_GetConnectPacketSize+0x2e>
        LogError( ( "Argument cannot be NULL: pConnectInfo=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pConnectInfo,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800e670:	2301      	movs	r3, #1
 800e672:	77fb      	strb	r3, [r7, #31]
 800e674:	e04f      	b.n	800e716 <MQTT_GetConnectPacketSize+0xce>
    }
    else if( ( pConnectInfo->clientIdentifierLength == 0U ) || ( pConnectInfo->pClientIdentifier == NULL ) )
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	891b      	ldrh	r3, [r3, #8]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d003      	beq.n	800e686 <MQTT_GetConnectPacketSize+0x3e>
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	685b      	ldr	r3, [r3, #4]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d102      	bne.n	800e68c <MQTT_GetConnectPacketSize+0x44>
    {
        LogError( ( "Mqtt_GetConnectPacketSize() client identifier must be set." ) );
        status = MQTTBadParameter;
 800e686:	2301      	movs	r3, #1
 800e688:	77fb      	strb	r3, [r7, #31]
 800e68a:	e044      	b.n	800e716 <MQTT_GetConnectPacketSize+0xce>
    }
    else if( ( pWillInfo != NULL ) && ( pWillInfo->payloadLength > ( size_t ) UINT16_MAX ) )
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d007      	beq.n	800e6a2 <MQTT_GetConnectPacketSize+0x5a>
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	691b      	ldr	r3, [r3, #16]
 800e696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e69a:	d302      	bcc.n	800e6a2 <MQTT_GetConnectPacketSize+0x5a>
         * packet will never be larger than 327699 bytes. */
        LogError( ( "The Will Message length must not exceed %d. "
                    "pWillInfo->payloadLength=%lu.",
                    UINT16_MAX,
                    ( unsigned long ) pWillInfo->payloadLength ) );
        status = MQTTBadParameter;
 800e69c:	2301      	movs	r3, #1
 800e69e:	77fb      	strb	r3, [r7, #31]
 800e6a0:	e039      	b.n	800e716 <MQTT_GetConnectPacketSize+0xce>
    }
    else
    {
        /* Add the length of the client identifier. */
        connectPacketSize += pConnectInfo->clientIdentifierLength + sizeof( uint16_t );
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	891b      	ldrh	r3, [r3, #8]
 800e6a6:	461a      	mov	r2, r3
 800e6a8:	69bb      	ldr	r3, [r7, #24]
 800e6aa:	4413      	add	r3, r2
 800e6ac:	3302      	adds	r3, #2
 800e6ae:	61bb      	str	r3, [r7, #24]

        /* Add the lengths of the will message and topic name if provided. */
        if( pWillInfo != NULL )
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d009      	beq.n	800e6ca <MQTT_GetConnectPacketSize+0x82>
        {
            connectPacketSize += pWillInfo->topicNameLength + sizeof( uint16_t ) +
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	891b      	ldrh	r3, [r3, #8]
 800e6ba:	461a      	mov	r2, r3
                                 pWillInfo->payloadLength + sizeof( uint16_t );
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	691b      	ldr	r3, [r3, #16]
            connectPacketSize += pWillInfo->topicNameLength + sizeof( uint16_t ) +
 800e6c0:	441a      	add	r2, r3
 800e6c2:	69bb      	ldr	r3, [r7, #24]
 800e6c4:	4413      	add	r3, r2
 800e6c6:	3304      	adds	r3, #4
 800e6c8:	61bb      	str	r3, [r7, #24]
        }

        /* Add the lengths of the user name and password if provided. */
        if( pConnectInfo->pUserName != NULL )
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	68db      	ldr	r3, [r3, #12]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d006      	beq.n	800e6e0 <MQTT_GetConnectPacketSize+0x98>
        {
            connectPacketSize += pConnectInfo->userNameLength + sizeof( uint16_t );
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	8a1b      	ldrh	r3, [r3, #16]
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	69bb      	ldr	r3, [r7, #24]
 800e6da:	4413      	add	r3, r2
 800e6dc:	3302      	adds	r3, #2
 800e6de:	61bb      	str	r3, [r7, #24]
        }

        if( pConnectInfo->pPassword != NULL )
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	695b      	ldr	r3, [r3, #20]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d006      	beq.n	800e6f6 <MQTT_GetConnectPacketSize+0xae>
        {
            connectPacketSize += pConnectInfo->passwordLength + sizeof( uint16_t );
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	8b1b      	ldrh	r3, [r3, #24]
 800e6ec:	461a      	mov	r2, r3
 800e6ee:	69bb      	ldr	r3, [r7, #24]
 800e6f0:	4413      	add	r3, r2
 800e6f2:	3302      	adds	r3, #2
 800e6f4:	61bb      	str	r3, [r7, #24]
        }

        /* At this point, the "Remaining Length" field of the MQTT CONNECT packet has
         * been calculated. */
        remainingLength = connectPacketSize;
 800e6f6:	69bb      	ldr	r3, [r7, #24]
 800e6f8:	617b      	str	r3, [r7, #20]

        /* Calculate the full size of the MQTT CONNECT packet by adding the size of
         * the "Remaining Length" field plus 1 byte for the "Packet Type" field. */
        connectPacketSize += 1U + remainingLengthEncodedSize( connectPacketSize );
 800e6fa:	69b8      	ldr	r0, [r7, #24]
 800e6fc:	f7ff f976 	bl	800d9ec <remainingLengthEncodedSize>
 800e700:	4603      	mov	r3, r0
 800e702:	3301      	adds	r3, #1
 800e704:	69ba      	ldr	r2, [r7, #24]
 800e706:	4413      	add	r3, r2
 800e708:	61bb      	str	r3, [r7, #24]
         * (maximum username length) 65535 + (encoded length) 2 +
         * (maximum password length) 65535 + (encoded length) 2 +
         * (packet type field length) 1 +
         * (CONNECT packet encoded length) 3 = 327699 */

        *pRemainingLength = remainingLength;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	697a      	ldr	r2, [r7, #20]
 800e70e:	601a      	str	r2, [r3, #0]
        *pPacketSize = connectPacketSize;
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	69ba      	ldr	r2, [r7, #24]
 800e714:	601a      	str	r2, [r3, #0]
        LogDebug( ( "CONNECT packet remaining length=%lu and packet size=%lu.",
                    ( unsigned long ) *pRemainingLength,
                    ( unsigned long ) *pPacketSize ) );
    }

    return status;
 800e716:	7ffb      	ldrb	r3, [r7, #31]
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3720      	adds	r7, #32
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}

0800e720 <MQTT_GetSubscribePacketSize>:

MQTTStatus_t MQTT_GetSubscribePacketSize( const MQTTSubscribeInfo_t * pSubscriptionList,
                                          size_t subscriptionCount,
                                          size_t * pRemainingLength,
                                          size_t * pPacketSize )
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b088      	sub	sp, #32
 800e724:	af02      	add	r7, sp, #8
 800e726:	60f8      	str	r0, [r7, #12]
 800e728:	60b9      	str	r1, [r7, #8]
 800e72a:	607a      	str	r2, [r7, #4]
 800e72c:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800e72e:	2300      	movs	r3, #0
 800e730:	75fb      	strb	r3, [r7, #23]

    /* Validate parameters. */
    if( ( pSubscriptionList == NULL ) || ( pRemainingLength == NULL ) ||
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d005      	beq.n	800e744 <MQTT_GetSubscribePacketSize+0x24>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d002      	beq.n	800e744 <MQTT_GetSubscribePacketSize+0x24>
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d102      	bne.n	800e74a <MQTT_GetSubscribePacketSize+0x2a>
        LogError( ( "Argument cannot be NULL: pSubscriptionList=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pSubscriptionList,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800e744:	2301      	movs	r3, #1
 800e746:	75fb      	strb	r3, [r7, #23]
 800e748:	e00f      	b.n	800e76a <MQTT_GetSubscribePacketSize+0x4a>
    }
    else if( subscriptionCount == 0U )
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d102      	bne.n	800e756 <MQTT_GetSubscribePacketSize+0x36>
    {
        LogError( ( "subscriptionCount is 0." ) );
        status = MQTTBadParameter;
 800e750:	2301      	movs	r3, #1
 800e752:	75fb      	strb	r3, [r7, #23]
 800e754:	e009      	b.n	800e76a <MQTT_GetSubscribePacketSize+0x4a>
    }
    else
    {
        /* Calculate the MQTT SUBSCRIBE packet size. */
        status = calculateSubscriptionPacketSize( pSubscriptionList,
 800e756:	2300      	movs	r3, #0
 800e758:	9300      	str	r3, [sp, #0]
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	687a      	ldr	r2, [r7, #4]
 800e75e:	68b9      	ldr	r1, [r7, #8]
 800e760:	68f8      	ldr	r0, [r7, #12]
 800e762:	f7ff fca3 	bl	800e0ac <calculateSubscriptionPacketSize>
 800e766:	4603      	mov	r3, r0
 800e768:	75fb      	strb	r3, [r7, #23]
                                                  pRemainingLength,
                                                  pPacketSize,
                                                  MQTT_SUBSCRIBE );
    }

    return status;
 800e76a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e76c:	4618      	mov	r0, r3
 800e76e:	3718      	adds	r7, #24
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}

0800e774 <MQTT_SerializeSubscribeHeader>:
/*-----------------------------------------------------------*/

uint8_t * MQTT_SerializeSubscribeHeader( size_t remainingLength,
                                         uint8_t * pIndex,
                                         uint16_t packetId )
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b086      	sub	sp, #24
 800e778:	af00      	add	r7, sp, #0
 800e77a:	60f8      	str	r0, [r7, #12]
 800e77c:	60b9      	str	r1, [r7, #8]
 800e77e:	4613      	mov	r3, r2
 800e780:	80fb      	strh	r3, [r7, #6]
    uint8_t * pIterator = pIndex;
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	617b      	str	r3, [r7, #20]

    /* The first byte in SUBSCRIBE is the packet type. */
    *pIterator = MQTT_PACKET_TYPE_SUBSCRIBE;
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	2282      	movs	r2, #130	; 0x82
 800e78a:	701a      	strb	r2, [r3, #0]
    pIterator++;
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	3301      	adds	r3, #1
 800e790:	617b      	str	r3, [r7, #20]

    /* Encode the "Remaining length" starting from the second byte. */
    pIterator = encodeRemainingLength( pIterator, remainingLength );
 800e792:	68f9      	ldr	r1, [r7, #12]
 800e794:	6978      	ldr	r0, [r7, #20]
 800e796:	f7ff f94b 	bl	800da30 <encodeRemainingLength>
 800e79a:	6178      	str	r0, [r7, #20]

    /* Place the packet identifier into the SUBSCRIBE packet. */
    pIterator[ 0 ] = UINT16_HIGH_BYTE( packetId );
 800e79c:	88fb      	ldrh	r3, [r7, #6]
 800e79e:	0a1b      	lsrs	r3, r3, #8
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	b2da      	uxtb	r2, r3
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	701a      	strb	r2, [r3, #0]
    pIterator[ 1 ] = UINT16_LOW_BYTE( packetId );
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	88fa      	ldrh	r2, [r7, #6]
 800e7ae:	b2d2      	uxtb	r2, r2
 800e7b0:	701a      	strb	r2, [r3, #0]
    /* Advance the pointer. */
    pIterator = &pIterator[ 2 ];
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	3302      	adds	r3, #2
 800e7b6:	617b      	str	r3, [r7, #20]

    return pIterator;
 800e7b8:	697b      	ldr	r3, [r7, #20]
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3718      	adds	r7, #24
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}

0800e7c2 <MQTT_GetPublishPacketSize>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetPublishPacketSize( const MQTTPublishInfo_t * pPublishInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800e7c2:	b580      	push	{r7, lr}
 800e7c4:	b086      	sub	sp, #24
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	60f8      	str	r0, [r7, #12]
 800e7ca:	60b9      	str	r1, [r7, #8]
 800e7cc:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	75fb      	strb	r3, [r7, #23]

    if( ( pPublishInfo == NULL ) || ( pRemainingLength == NULL ) || ( pPacketSize == NULL ) )
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d005      	beq.n	800e7e4 <MQTT_GetPublishPacketSize+0x22>
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d002      	beq.n	800e7e4 <MQTT_GetPublishPacketSize+0x22>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d102      	bne.n	800e7ea <MQTT_GetPublishPacketSize+0x28>
        LogError( ( "Argument cannot be NULL: pPublishInfo=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pPublishInfo,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	75fb      	strb	r3, [r7, #23]
 800e7e8:	e017      	b.n	800e81a <MQTT_GetPublishPacketSize+0x58>
    }
    else if( ( pPublishInfo->pTopicName == NULL ) || ( pPublishInfo->topicNameLength == 0U ) )
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	685b      	ldr	r3, [r3, #4]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d003      	beq.n	800e7fa <MQTT_GetPublishPacketSize+0x38>
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	891b      	ldrh	r3, [r3, #8]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d102      	bne.n	800e800 <MQTT_GetPublishPacketSize+0x3e>
    {
        LogError( ( "Invalid topic name for PUBLISH: pTopicName=%p, "
                    "topicNameLength=%hu.",
                    ( void * ) pPublishInfo->pTopicName,
                    ( unsigned short ) pPublishInfo->topicNameLength ) );
        status = MQTTBadParameter;
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	75fb      	strb	r3, [r7, #23]
 800e7fe:	e00c      	b.n	800e81a <MQTT_GetPublishPacketSize+0x58>
    }
    else
    {
        /* Calculate the "Remaining length" field and total packet size. If it exceeds
         * what is allowed in the MQTT standard, return an error. */
        if( calculatePublishPacketSize( pPublishInfo, pRemainingLength, pPacketSize ) == false )
 800e800:	687a      	ldr	r2, [r7, #4]
 800e802:	68b9      	ldr	r1, [r7, #8]
 800e804:	68f8      	ldr	r0, [r7, #12]
 800e806:	f7ff f98b 	bl	800db20 <calculatePublishPacketSize>
 800e80a:	4603      	mov	r3, r0
 800e80c:	f083 0301 	eor.w	r3, r3, #1
 800e810:	b2db      	uxtb	r3, r3
 800e812:	2b00      	cmp	r3, #0
 800e814:	d001      	beq.n	800e81a <MQTT_GetPublishPacketSize+0x58>
        {
            LogError( ( "PUBLISH packet remaining length exceeds %lu, which is the "
                        "maximum size allowed by MQTT 3.1.1.",
                        MQTT_MAX_REMAINING_LENGTH ) );
            status = MQTTBadParameter;
 800e816:	2301      	movs	r3, #1
 800e818:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800e81a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e81c:	4618      	mov	r0, r3
 800e81e:	3718      	adds	r7, #24
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}

0800e824 <MQTT_SerializeAck>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_SerializeAck( const MQTTFixedBuffer_t * pFixedBuffer,
                                uint8_t packetType,
                                uint16_t packetId )
{
 800e824:	b480      	push	{r7}
 800e826:	b085      	sub	sp, #20
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
 800e82c:	460b      	mov	r3, r1
 800e82e:	70fb      	strb	r3, [r7, #3]
 800e830:	4613      	mov	r3, r2
 800e832:	803b      	strh	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800e834:	2300      	movs	r3, #0
 800e836:	73fb      	strb	r3, [r7, #15]

    if( pFixedBuffer == NULL )
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d102      	bne.n	800e844 <MQTT_SerializeAck+0x20>
    {
        LogError( ( "Provided buffer is NULL." ) );
        status = MQTTBadParameter;
 800e83e:	2301      	movs	r3, #1
 800e840:	73fb      	strb	r3, [r7, #15]
 800e842:	e03b      	b.n	800e8bc <MQTT_SerializeAck+0x98>
    }
    else if( pFixedBuffer->pBuffer == NULL )
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d102      	bne.n	800e852 <MQTT_SerializeAck+0x2e>
    {
        LogError( ( "pFixedBuffer->pBuffer cannot be NULL." ) );
        status = MQTTBadParameter;
 800e84c:	2301      	movs	r3, #1
 800e84e:	73fb      	strb	r3, [r7, #15]
 800e850:	e034      	b.n	800e8bc <MQTT_SerializeAck+0x98>
    }
    /* The buffer must be able to fit 4 bytes for the packet. */
    else if( pFixedBuffer->size < MQTT_PUBLISH_ACK_PACKET_SIZE )
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	685b      	ldr	r3, [r3, #4]
 800e856:	2b03      	cmp	r3, #3
 800e858:	d802      	bhi.n	800e860 <MQTT_SerializeAck+0x3c>
    {
        LogError( ( "Insufficient memory for packet." ) );
        status = MQTTNoMemory;
 800e85a:	2302      	movs	r3, #2
 800e85c:	73fb      	strb	r3, [r7, #15]
 800e85e:	e02d      	b.n	800e8bc <MQTT_SerializeAck+0x98>
    }
    else if( packetId == 0U )
 800e860:	883b      	ldrh	r3, [r7, #0]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d102      	bne.n	800e86c <MQTT_SerializeAck+0x48>
    {
        LogError( ( "Packet ID cannot be 0." ) );
        status = MQTTBadParameter;
 800e866:	2301      	movs	r3, #1
 800e868:	73fb      	strb	r3, [r7, #15]
 800e86a:	e027      	b.n	800e8bc <MQTT_SerializeAck+0x98>
    }
    else
    {
        switch( packetType )
 800e86c:	78fb      	ldrb	r3, [r7, #3]
 800e86e:	2b70      	cmp	r3, #112	; 0x70
 800e870:	d009      	beq.n	800e886 <MQTT_SerializeAck+0x62>
 800e872:	2b70      	cmp	r3, #112	; 0x70
 800e874:	dc1f      	bgt.n	800e8b6 <MQTT_SerializeAck+0x92>
 800e876:	2b62      	cmp	r3, #98	; 0x62
 800e878:	d005      	beq.n	800e886 <MQTT_SerializeAck+0x62>
 800e87a:	2b62      	cmp	r3, #98	; 0x62
 800e87c:	dc1b      	bgt.n	800e8b6 <MQTT_SerializeAck+0x92>
 800e87e:	2b40      	cmp	r3, #64	; 0x40
 800e880:	d001      	beq.n	800e886 <MQTT_SerializeAck+0x62>
 800e882:	2b50      	cmp	r3, #80	; 0x50
 800e884:	d117      	bne.n	800e8b6 <MQTT_SerializeAck+0x92>
            /* Only publish acks are serialized by the client. */
            case MQTT_PACKET_TYPE_PUBACK:
            case MQTT_PACKET_TYPE_PUBREC:
            case MQTT_PACKET_TYPE_PUBREL:
            case MQTT_PACKET_TYPE_PUBCOMP:
                pFixedBuffer->pBuffer[ 0 ] = packetType;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	78fa      	ldrb	r2, [r7, #3]
 800e88c:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 1 ] = MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	3301      	adds	r3, #1
 800e894:	2202      	movs	r2, #2
 800e896:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 2 ] = UINT16_HIGH_BYTE( packetId );
 800e898:	883b      	ldrh	r3, [r7, #0]
 800e89a:	0a1b      	lsrs	r3, r3, #8
 800e89c:	b29a      	uxth	r2, r3
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	3302      	adds	r3, #2
 800e8a4:	b2d2      	uxtb	r2, r2
 800e8a6:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 3 ] = UINT16_LOW_BYTE( packetId );
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	3303      	adds	r3, #3
 800e8ae:	883a      	ldrh	r2, [r7, #0]
 800e8b0:	b2d2      	uxtb	r2, r2
 800e8b2:	701a      	strb	r2, [r3, #0]
                break;
 800e8b4:	e002      	b.n	800e8bc <MQTT_SerializeAck+0x98>

            default:
                LogError( ( "Packet type is not a publish ACK: Packet type=%02x",
                            ( unsigned int ) packetType ) );
                status = MQTTBadParameter;
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	73fb      	strb	r3, [r7, #15]
                break;
 800e8ba:	bf00      	nop
        }
    }

    return status;
 800e8bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8be:	4618      	mov	r0, r3
 800e8c0:	3714      	adds	r7, #20
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c8:	4770      	bx	lr

0800e8ca <MQTT_GetPingreqPacketSize>:
}

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetPingreqPacketSize( size_t * pPacketSize )
{
 800e8ca:	b480      	push	{r7}
 800e8cc:	b085      	sub	sp, #20
 800e8ce:	af00      	add	r7, sp, #0
 800e8d0:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	73fb      	strb	r3, [r7, #15]

    if( pPacketSize == NULL )
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d102      	bne.n	800e8e2 <MQTT_GetPingreqPacketSize+0x18>
    {
        LogError( ( "pPacketSize is NULL." ) );
        status = MQTTBadParameter;
 800e8dc:	2301      	movs	r3, #1
 800e8de:	73fb      	strb	r3, [r7, #15]
 800e8e0:	e002      	b.n	800e8e8 <MQTT_GetPingreqPacketSize+0x1e>
    }
    else
    {
        /* MQTT PINGREQ packets always have the same size. */
        *pPacketSize = MQTT_PACKET_PINGREQ_SIZE;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2202      	movs	r2, #2
 800e8e6:	601a      	str	r2, [r3, #0]
    }

    return status;
 800e8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3714      	adds	r7, #20
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f4:	4770      	bx	lr

0800e8f6 <MQTT_SerializePingreq>:

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_SerializePingreq( const MQTTFixedBuffer_t * pFixedBuffer )
{
 800e8f6:	b480      	push	{r7}
 800e8f8:	b085      	sub	sp, #20
 800e8fa:	af00      	add	r7, sp, #0
 800e8fc:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800e8fe:	2300      	movs	r3, #0
 800e900:	73fb      	strb	r3, [r7, #15]

    if( pFixedBuffer == NULL )
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d102      	bne.n	800e90e <MQTT_SerializePingreq+0x18>
    {
        LogError( ( "pFixedBuffer is NULL." ) );
        status = MQTTBadParameter;
 800e908:	2301      	movs	r3, #1
 800e90a:	73fb      	strb	r3, [r7, #15]
 800e90c:	e005      	b.n	800e91a <MQTT_SerializePingreq+0x24>
    }
    else if( pFixedBuffer->pBuffer == NULL )
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d101      	bne.n	800e91a <MQTT_SerializePingreq+0x24>
    {
        LogError( ( "pFixedBuffer->pBuffer cannot be NULL." ) );
        status = MQTTBadParameter;
 800e916:	2301      	movs	r3, #1
 800e918:	73fb      	strb	r3, [r7, #15]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    if( status == MQTTSuccess )
 800e91a:	7bfb      	ldrb	r3, [r7, #15]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d105      	bne.n	800e92c <MQTT_SerializePingreq+0x36>
    {
        if( pFixedBuffer->size < MQTT_PACKET_PINGREQ_SIZE )
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	685b      	ldr	r3, [r3, #4]
 800e924:	2b01      	cmp	r3, #1
 800e926:	d801      	bhi.n	800e92c <MQTT_SerializePingreq+0x36>
        {
            LogError( ( "Buffer size of %lu is not sufficient to hold "
                        "serialized PINGREQ packet of size of %lu.",
                        ( unsigned long ) pFixedBuffer->size,
                        MQTT_PACKET_PINGREQ_SIZE ) );
            status = MQTTNoMemory;
 800e928:	2302      	movs	r3, #2
 800e92a:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( status == MQTTSuccess )
 800e92c:	7bfb      	ldrb	r3, [r7, #15]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d108      	bne.n	800e944 <MQTT_SerializePingreq+0x4e>
    {
        /* Ping request packets are always the same. */
        pFixedBuffer->pBuffer[ 0 ] = MQTT_PACKET_TYPE_PINGREQ;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	22c0      	movs	r2, #192	; 0xc0
 800e938:	701a      	strb	r2, [r3, #0]
        pFixedBuffer->pBuffer[ 1 ] = 0x00;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	3301      	adds	r3, #1
 800e940:	2200      	movs	r2, #0
 800e942:	701a      	strb	r2, [r3, #0]
    }

    return status;
 800e944:	7bfb      	ldrb	r3, [r7, #15]
}
 800e946:	4618      	mov	r0, r3
 800e948:	3714      	adds	r7, #20
 800e94a:	46bd      	mov	sp, r7
 800e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e950:	4770      	bx	lr

0800e952 <MQTT_DeserializePublish>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_DeserializePublish( const MQTTPacketInfo_t * pIncomingPacket,
                                      uint16_t * pPacketId,
                                      MQTTPublishInfo_t * pPublishInfo )
{
 800e952:	b580      	push	{r7, lr}
 800e954:	b086      	sub	sp, #24
 800e956:	af00      	add	r7, sp, #0
 800e958:	60f8      	str	r0, [r7, #12]
 800e95a:	60b9      	str	r1, [r7, #8]
 800e95c:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800e95e:	2300      	movs	r3, #0
 800e960:	75fb      	strb	r3, [r7, #23]

    if( ( pIncomingPacket == NULL ) || ( pPacketId == NULL ) || ( pPublishInfo == NULL ) )
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d005      	beq.n	800e974 <MQTT_DeserializePublish+0x22>
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d002      	beq.n	800e974 <MQTT_DeserializePublish+0x22>
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d102      	bne.n	800e97a <MQTT_DeserializePublish+0x28>
        LogError( ( "Argument cannot be NULL: pIncomingPacket=%p, "
                    "pPacketId=%p, pPublishInfo=%p",
                    ( void * ) pIncomingPacket,
                    ( void * ) pPacketId,
                    ( void * ) pPublishInfo ) );
        status = MQTTBadParameter;
 800e974:	2301      	movs	r3, #1
 800e976:	75fb      	strb	r3, [r7, #23]
 800e978:	e016      	b.n	800e9a8 <MQTT_DeserializePublish+0x56>
    }
    else if( ( pIncomingPacket->type & 0xF0U ) != MQTT_PACKET_TYPE_PUBLISH )
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	781b      	ldrb	r3, [r3, #0]
 800e97e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e982:	2b30      	cmp	r3, #48	; 0x30
 800e984:	d002      	beq.n	800e98c <MQTT_DeserializePublish+0x3a>
    {
        LogError( ( "Packet is not publish. Packet type: %02x.",
                    ( unsigned int ) pIncomingPacket->type ) );
        status = MQTTBadParameter;
 800e986:	2301      	movs	r3, #1
 800e988:	75fb      	strb	r3, [r7, #23]
 800e98a:	e00d      	b.n	800e9a8 <MQTT_DeserializePublish+0x56>
    }
    else if( pIncomingPacket->pRemainingData == NULL )
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d102      	bne.n	800e99a <MQTT_DeserializePublish+0x48>
    {
        LogError( ( "Argument cannot be NULL: "
                    "pIncomingPacket->pRemainingData is NULL." ) );
        status = MQTTBadParameter;
 800e994:	2301      	movs	r3, #1
 800e996:	75fb      	strb	r3, [r7, #23]
 800e998:	e006      	b.n	800e9a8 <MQTT_DeserializePublish+0x56>
    }
    else
    {
        status = deserializePublish( pIncomingPacket, pPacketId, pPublishInfo );
 800e99a:	687a      	ldr	r2, [r7, #4]
 800e99c:	68b9      	ldr	r1, [r7, #8]
 800e99e:	68f8      	ldr	r0, [r7, #12]
 800e9a0:	f7ff fcb4 	bl	800e30c <deserializePublish>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 800e9a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	3718      	adds	r7, #24
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}

0800e9b2 <MQTT_DeserializeAck>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_DeserializeAck( const MQTTPacketInfo_t * pIncomingPacket,
                                  uint16_t * pPacketId,
                                  bool * pSessionPresent )
{
 800e9b2:	b580      	push	{r7, lr}
 800e9b4:	b086      	sub	sp, #24
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	60f8      	str	r0, [r7, #12]
 800e9ba:	60b9      	str	r1, [r7, #8]
 800e9bc:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	75fb      	strb	r3, [r7, #23]

    if( pIncomingPacket == NULL )
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d102      	bne.n	800e9ce <MQTT_DeserializeAck+0x1c>
    {
        LogError( ( "pIncomingPacket cannot be NULL." ) );
        status = MQTTBadParameter;
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	75fb      	strb	r3, [r7, #23]
 800e9cc:	e05f      	b.n	800ea8e <MQTT_DeserializeAck+0xdc>
    }

    /* Pointer for packet identifier cannot be NULL for packets other than
     * CONNACK and PINGRESP. */
    else if( ( pPacketId == NULL ) &&
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d10a      	bne.n	800e9ea <MQTT_DeserializeAck+0x38>
             ( ( pIncomingPacket->type != MQTT_PACKET_TYPE_CONNACK ) &&
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	781b      	ldrb	r3, [r3, #0]
    else if( ( pPacketId == NULL ) &&
 800e9d8:	2b20      	cmp	r3, #32
 800e9da:	d006      	beq.n	800e9ea <MQTT_DeserializeAck+0x38>
               ( pIncomingPacket->type != MQTT_PACKET_TYPE_PINGRESP ) ) )
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	781b      	ldrb	r3, [r3, #0]
             ( ( pIncomingPacket->type != MQTT_PACKET_TYPE_CONNACK ) &&
 800e9e0:	2bd0      	cmp	r3, #208	; 0xd0
 800e9e2:	d002      	beq.n	800e9ea <MQTT_DeserializeAck+0x38>
    {
        LogError( ( "pPacketId cannot be NULL for packet type %02x.",
                    ( unsigned int ) pIncomingPacket->type ) );
        status = MQTTBadParameter;
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	75fb      	strb	r3, [r7, #23]
 800e9e8:	e051      	b.n	800ea8e <MQTT_DeserializeAck+0xdc>
    }
    /* Pointer for session present cannot be NULL for CONNACK. */
    else if( ( pSessionPresent == NULL ) &&
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d106      	bne.n	800e9fe <MQTT_DeserializeAck+0x4c>
             ( pIncomingPacket->type == MQTT_PACKET_TYPE_CONNACK ) )
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	781b      	ldrb	r3, [r3, #0]
    else if( ( pSessionPresent == NULL ) &&
 800e9f4:	2b20      	cmp	r3, #32
 800e9f6:	d102      	bne.n	800e9fe <MQTT_DeserializeAck+0x4c>
    {
        LogError( ( "pSessionPresent cannot be NULL for CONNACK packet." ) );
        status = MQTTBadParameter;
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	75fb      	strb	r3, [r7, #23]
 800e9fc:	e047      	b.n	800ea8e <MQTT_DeserializeAck+0xdc>
    }

    /* Pointer for remaining data cannot be NULL for packets other
     * than PINGRESP. */
    else if( ( pIncomingPacket->pRemainingData == NULL ) &&
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	685b      	ldr	r3, [r3, #4]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d106      	bne.n	800ea14 <MQTT_DeserializeAck+0x62>
             ( pIncomingPacket->type != MQTT_PACKET_TYPE_PINGRESP ) )
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	781b      	ldrb	r3, [r3, #0]
    else if( ( pIncomingPacket->pRemainingData == NULL ) &&
 800ea0a:	2bd0      	cmp	r3, #208	; 0xd0
 800ea0c:	d002      	beq.n	800ea14 <MQTT_DeserializeAck+0x62>
    {
        LogError( ( "Remaining data of incoming packet is NULL." ) );
        status = MQTTBadParameter;
 800ea0e:	2301      	movs	r3, #1
 800ea10:	75fb      	strb	r3, [r7, #23]
 800ea12:	e03c      	b.n	800ea8e <MQTT_DeserializeAck+0xdc>
    }
    else
    {
        /* Make sure response packet is a valid ack. */
        switch( pIncomingPacket->type )
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	781b      	ldrb	r3, [r3, #0]
 800ea18:	2bd0      	cmp	r3, #208	; 0xd0
 800ea1a:	d028      	beq.n	800ea6e <MQTT_DeserializeAck+0xbc>
 800ea1c:	2bd0      	cmp	r3, #208	; 0xd0
 800ea1e:	dc33      	bgt.n	800ea88 <MQTT_DeserializeAck+0xd6>
 800ea20:	2bb0      	cmp	r3, #176	; 0xb0
 800ea22:	d02a      	beq.n	800ea7a <MQTT_DeserializeAck+0xc8>
 800ea24:	2bb0      	cmp	r3, #176	; 0xb0
 800ea26:	dc2f      	bgt.n	800ea88 <MQTT_DeserializeAck+0xd6>
 800ea28:	2b90      	cmp	r3, #144	; 0x90
 800ea2a:	d019      	beq.n	800ea60 <MQTT_DeserializeAck+0xae>
 800ea2c:	2b90      	cmp	r3, #144	; 0x90
 800ea2e:	dc2b      	bgt.n	800ea88 <MQTT_DeserializeAck+0xd6>
 800ea30:	2b70      	cmp	r3, #112	; 0x70
 800ea32:	d022      	beq.n	800ea7a <MQTT_DeserializeAck+0xc8>
 800ea34:	2b70      	cmp	r3, #112	; 0x70
 800ea36:	dc27      	bgt.n	800ea88 <MQTT_DeserializeAck+0xd6>
 800ea38:	2b62      	cmp	r3, #98	; 0x62
 800ea3a:	d01e      	beq.n	800ea7a <MQTT_DeserializeAck+0xc8>
 800ea3c:	2b62      	cmp	r3, #98	; 0x62
 800ea3e:	dc23      	bgt.n	800ea88 <MQTT_DeserializeAck+0xd6>
 800ea40:	2b50      	cmp	r3, #80	; 0x50
 800ea42:	d01a      	beq.n	800ea7a <MQTT_DeserializeAck+0xc8>
 800ea44:	2b50      	cmp	r3, #80	; 0x50
 800ea46:	dc1f      	bgt.n	800ea88 <MQTT_DeserializeAck+0xd6>
 800ea48:	2b20      	cmp	r3, #32
 800ea4a:	d002      	beq.n	800ea52 <MQTT_DeserializeAck+0xa0>
 800ea4c:	2b40      	cmp	r3, #64	; 0x40
 800ea4e:	d014      	beq.n	800ea7a <MQTT_DeserializeAck+0xc8>
 800ea50:	e01a      	b.n	800ea88 <MQTT_DeserializeAck+0xd6>
        {
            case MQTT_PACKET_TYPE_CONNACK:
                status = deserializeConnack( pIncomingPacket, pSessionPresent );
 800ea52:	6879      	ldr	r1, [r7, #4]
 800ea54:	68f8      	ldr	r0, [r7, #12]
 800ea56:	f7ff fabf 	bl	800dfd8 <deserializeConnack>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	75fb      	strb	r3, [r7, #23]
                break;
 800ea5e:	e016      	b.n	800ea8e <MQTT_DeserializeAck+0xdc>

            case MQTT_PACKET_TYPE_SUBACK:
                status = deserializeSuback( pIncomingPacket, pPacketId );
 800ea60:	68b9      	ldr	r1, [r7, #8]
 800ea62:	68f8      	ldr	r0, [r7, #12]
 800ea64:	f7ff fbfe 	bl	800e264 <deserializeSuback>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	75fb      	strb	r3, [r7, #23]
                break;
 800ea6c:	e00f      	b.n	800ea8e <MQTT_DeserializeAck+0xdc>

            case MQTT_PACKET_TYPE_PINGRESP:
                status = deserializePingresp( pIncomingPacket );
 800ea6e:	68f8      	ldr	r0, [r7, #12]
 800ea70:	f7ff fd50 	bl	800e514 <deserializePingresp>
 800ea74:	4603      	mov	r3, r0
 800ea76:	75fb      	strb	r3, [r7, #23]
                break;
 800ea78:	e009      	b.n	800ea8e <MQTT_DeserializeAck+0xdc>
            case MQTT_PACKET_TYPE_UNSUBACK:
            case MQTT_PACKET_TYPE_PUBACK:
            case MQTT_PACKET_TYPE_PUBREC:
            case MQTT_PACKET_TYPE_PUBREL:
            case MQTT_PACKET_TYPE_PUBCOMP:
                status = deserializeSimpleAck( pIncomingPacket, pPacketId );
 800ea7a:	68b9      	ldr	r1, [r7, #8]
 800ea7c:	68f8      	ldr	r0, [r7, #12]
 800ea7e:	f7ff fd05 	bl	800e48c <deserializeSimpleAck>
 800ea82:	4603      	mov	r3, r0
 800ea84:	75fb      	strb	r3, [r7, #23]
                break;
 800ea86:	e002      	b.n	800ea8e <MQTT_DeserializeAck+0xdc>

            /* Any other packet type is invalid. */
            default:
                LogError( ( "IotMqtt_DeserializeResponse() called with unknown packet type:(%02x).",
                            ( unsigned int ) pIncomingPacket->type ) );
                status = MQTTBadResponse;
 800ea88:	2305      	movs	r3, #5
 800ea8a:	75fb      	strb	r3, [r7, #23]
                break;
 800ea8c:	bf00      	nop
        }
    }

    return status;
 800ea8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	3718      	adds	r7, #24
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}

0800ea98 <MQTT_GetIncomingPacketTypeAndLength>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetIncomingPacketTypeAndLength( TransportRecv_t readFunc,
                                                  NetworkContext_t * pNetworkContext,
                                                  MQTTPacketInfo_t * pIncomingPacket )
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b086      	sub	sp, #24
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	60f8      	str	r0, [r7, #12]
 800eaa0:	60b9      	str	r1, [r7, #8]
 800eaa2:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	75fb      	strb	r3, [r7, #23]
    int32_t bytesReceived = 0;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	613b      	str	r3, [r7, #16]

    if( pIncomingPacket == NULL )
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d102      	bne.n	800eab8 <MQTT_GetIncomingPacketTypeAndLength+0x20>
    {
        LogError( ( "Invalid parameter: pIncomingPacket is NULL." ) );
        status = MQTTBadParameter;
 800eab2:	2301      	movs	r3, #1
 800eab4:	75fb      	strb	r3, [r7, #23]
 800eab6:	e005      	b.n	800eac4 <MQTT_GetIncomingPacketTypeAndLength+0x2c>
    }
    else
    {
        /* Read a single byte. */
        bytesReceived = readFunc( pNetworkContext,
                                  &( pIncomingPacket->type ),
 800eab8:	6879      	ldr	r1, [r7, #4]
        bytesReceived = readFunc( pNetworkContext,
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	2201      	movs	r2, #1
 800eabe:	68b8      	ldr	r0, [r7, #8]
 800eac0:	4798      	blx	r3
 800eac2:	6138      	str	r0, [r7, #16]
                                  1U );
    }

    if( bytesReceived == 1 )
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	2b01      	cmp	r3, #1
 800eac8:	d119      	bne.n	800eafe <MQTT_GetIncomingPacketTypeAndLength+0x66>
    {
        /* Check validity. */
        if( incomingPacketValid( pIncomingPacket->type ) == true )
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	781b      	ldrb	r3, [r3, #0]
 800eace:	4618      	mov	r0, r3
 800ead0:	f7ff f9aa 	bl	800de28 <incomingPacketValid>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d00e      	beq.n	800eaf8 <MQTT_GetIncomingPacketTypeAndLength+0x60>
        {
            pIncomingPacket->remainingLength = getRemainingLength( readFunc,
 800eada:	68b9      	ldr	r1, [r7, #8]
 800eadc:	68f8      	ldr	r0, [r7, #12]
 800eade:	f7ff f8f0 	bl	800dcc2 <getRemainingLength>
 800eae2:	4602      	mov	r2, r0
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	609a      	str	r2, [r3, #8]
                                                                   pNetworkContext );

            if( pIncomingPacket->remainingLength == MQTT_REMAINING_LENGTH_INVALID )
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	689b      	ldr	r3, [r3, #8]
 800eaec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eaf0:	d113      	bne.n	800eb1a <MQTT_GetIncomingPacketTypeAndLength+0x82>
            {
                LogError( ( "Incoming packet remaining length invalid." ) );
                status = MQTTBadResponse;
 800eaf2:	2305      	movs	r3, #5
 800eaf4:	75fb      	strb	r3, [r7, #23]
 800eaf6:	e010      	b.n	800eb1a <MQTT_GetIncomingPacketTypeAndLength+0x82>
        }
        else
        {
            LogError( ( "Incoming packet invalid: Packet type=%u.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800eaf8:	2305      	movs	r3, #5
 800eafa:	75fb      	strb	r3, [r7, #23]
 800eafc:	e00d      	b.n	800eb1a <MQTT_GetIncomingPacketTypeAndLength+0x82>
        }
    }
    else if( ( status != MQTTBadParameter ) && ( bytesReceived == 0 ) )
 800eafe:	7dfb      	ldrb	r3, [r7, #23]
 800eb00:	2b01      	cmp	r3, #1
 800eb02:	d005      	beq.n	800eb10 <MQTT_GetIncomingPacketTypeAndLength+0x78>
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d102      	bne.n	800eb10 <MQTT_GetIncomingPacketTypeAndLength+0x78>
    {
        status = MQTTNoDataAvailable;
 800eb0a:	2307      	movs	r3, #7
 800eb0c:	75fb      	strb	r3, [r7, #23]
 800eb0e:	e004      	b.n	800eb1a <MQTT_GetIncomingPacketTypeAndLength+0x82>
    }

    /* If the input packet was valid, then any other number of bytes received is
     * a failure. */
    else if( status != MQTTBadParameter )
 800eb10:	7dfb      	ldrb	r3, [r7, #23]
 800eb12:	2b01      	cmp	r3, #1
 800eb14:	d001      	beq.n	800eb1a <MQTT_GetIncomingPacketTypeAndLength+0x82>
    {
        LogError( ( "A single byte was not read from the transport: "
                    "transportStatus=%ld.",
                    ( long int ) bytesReceived ) );
        status = MQTTRecvFailed;
 800eb16:	2304      	movs	r3, #4
 800eb18:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    return status;
 800eb1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3718      	adds	r7, #24
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <MQTT_ProcessIncomingPacketTypeAndLength>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ProcessIncomingPacketTypeAndLength( const uint8_t * pBuffer,
                                                      const size_t * pIndex,
                                                      MQTTPacketInfo_t * pIncomingPacket )
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b086      	sub	sp, #24
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	60f8      	str	r0, [r7, #12]
 800eb2c:	60b9      	str	r1, [r7, #8]
 800eb2e:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800eb30:	2300      	movs	r3, #0
 800eb32:	75fb      	strb	r3, [r7, #23]

    if( pIncomingPacket == NULL )
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d102      	bne.n	800eb40 <MQTT_ProcessIncomingPacketTypeAndLength+0x1c>
    {
        LogError( ( "Invalid parameter: pIncomingPacket is NULL." ) );
        status = MQTTBadParameter;
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	75fb      	strb	r3, [r7, #23]
 800eb3e:	e016      	b.n	800eb6e <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else if( pIndex == NULL )
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d102      	bne.n	800eb4c <MQTT_ProcessIncomingPacketTypeAndLength+0x28>
    {
        LogError( ( "Invalid parameter: pIndex is NULL." ) );
        status = MQTTBadParameter;
 800eb46:	2301      	movs	r3, #1
 800eb48:	75fb      	strb	r3, [r7, #23]
 800eb4a:	e010      	b.n	800eb6e <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else if( pBuffer == NULL )
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d102      	bne.n	800eb58 <MQTT_ProcessIncomingPacketTypeAndLength+0x34>
    {
        LogError( ( "Invalid parameter: pBuffer is NULL." ) );
        status = MQTTBadParameter;
 800eb52:	2301      	movs	r3, #1
 800eb54:	75fb      	strb	r3, [r7, #23]
 800eb56:	e00a      	b.n	800eb6e <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    /* There should be at least one byte in the buffer */
    else if( *pIndex < 1U )
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d102      	bne.n	800eb66 <MQTT_ProcessIncomingPacketTypeAndLength+0x42>
    {
        /* No data is available. There are 0 bytes received from the network
         * receive function. */
        status = MQTTNoDataAvailable;
 800eb60:	2307      	movs	r3, #7
 800eb62:	75fb      	strb	r3, [r7, #23]
 800eb64:	e003      	b.n	800eb6e <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else
    {
        /* At least one byte is present which should be deciphered. */
        pIncomingPacket->type = pBuffer[ 0 ];
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	781a      	ldrb	r2, [r3, #0]
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	701a      	strb	r2, [r3, #0]
    }

    if( status == MQTTSuccess )
 800eb6e:	7dfb      	ldrb	r3, [r7, #23]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d111      	bne.n	800eb98 <MQTT_ProcessIncomingPacketTypeAndLength+0x74>
    {
        /* Check validity. */
        if( incomingPacketValid( pIncomingPacket->type ) == true )
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	781b      	ldrb	r3, [r3, #0]
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f7ff f955 	bl	800de28 <incomingPacketValid>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d007      	beq.n	800eb94 <MQTT_ProcessIncomingPacketTypeAndLength+0x70>
        {
            status = processRemainingLength( pBuffer,
 800eb84:	687a      	ldr	r2, [r7, #4]
 800eb86:	68b9      	ldr	r1, [r7, #8]
 800eb88:	68f8      	ldr	r0, [r7, #12]
 800eb8a:	f7ff f8ee 	bl	800dd6a <processRemainingLength>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	75fb      	strb	r3, [r7, #23]
 800eb92:	e001      	b.n	800eb98 <MQTT_ProcessIncomingPacketTypeAndLength+0x74>
        }
        else
        {
            LogError( ( "Incoming packet invalid: Packet type=%u.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800eb94:	2305      	movs	r3, #5
 800eb96:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800eb98:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3718      	adds	r7, #24
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}
	...

0800eba4 <validateTransitionPublish>:

static bool validateTransitionPublish( MQTTPublishState_t currentState,
                                       MQTTPublishState_t newState,
                                       MQTTStateOperation_t opType,
                                       MQTTQoS_t qos )
{
 800eba4:	b490      	push	{r4, r7}
 800eba6:	b084      	sub	sp, #16
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	4604      	mov	r4, r0
 800ebac:	4608      	mov	r0, r1
 800ebae:	4611      	mov	r1, r2
 800ebb0:	461a      	mov	r2, r3
 800ebb2:	4623      	mov	r3, r4
 800ebb4:	71fb      	strb	r3, [r7, #7]
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	71bb      	strb	r3, [r7, #6]
 800ebba:	460b      	mov	r3, r1
 800ebbc:	717b      	strb	r3, [r7, #5]
 800ebbe:	4613      	mov	r3, r2
 800ebc0:	713b      	strb	r3, [r7, #4]
    bool isValid = false;
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	73fb      	strb	r3, [r7, #15]

    switch( currentState )
 800ebc6:	79fb      	ldrb	r3, [r7, #7]
 800ebc8:	2b07      	cmp	r3, #7
 800ebca:	d848      	bhi.n	800ec5e <validateTransitionPublish+0xba>
 800ebcc:	a201      	add	r2, pc, #4	; (adr r2, 800ebd4 <validateTransitionPublish+0x30>)
 800ebce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebd2:	bf00      	nop
 800ebd4:	0800ebf5 	.word	0x0800ebf5
 800ebd8:	0800ec19 	.word	0x0800ec19
 800ebdc:	0800ec5f 	.word	0x0800ec5f
 800ebe0:	0800ec5f 	.word	0x0800ec5f
 800ebe4:	0800ec5f 	.word	0x0800ec5f
 800ebe8:	0800ec5f 	.word	0x0800ec5f
 800ebec:	0800ec43 	.word	0x0800ec43
 800ebf0:	0800ec51 	.word	0x0800ec51
    {
        case MQTTStateNull:

            /* Transitions from null occur when storing a new entry into the record. */
            if( opType == MQTT_RECEIVE )
 800ebf4:	797b      	ldrb	r3, [r7, #5]
 800ebf6:	2b01      	cmp	r3, #1
 800ebf8:	d133      	bne.n	800ec62 <validateTransitionPublish+0xbe>
            {
                isValid = ( newState == MQTTPubAckSend ) || ( newState == MQTTPubRecSend );
 800ebfa:	79bb      	ldrb	r3, [r7, #6]
 800ebfc:	2b02      	cmp	r3, #2
 800ebfe:	d002      	beq.n	800ec06 <validateTransitionPublish+0x62>
 800ec00:	79bb      	ldrb	r3, [r7, #6]
 800ec02:	2b03      	cmp	r3, #3
 800ec04:	d101      	bne.n	800ec0a <validateTransitionPublish+0x66>
 800ec06:	2301      	movs	r3, #1
 800ec08:	e000      	b.n	800ec0c <validateTransitionPublish+0x68>
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	73fb      	strb	r3, [r7, #15]
 800ec0e:	7bfb      	ldrb	r3, [r7, #15]
 800ec10:	f003 0301 	and.w	r3, r3, #1
 800ec14:	73fb      	strb	r3, [r7, #15]
            }

            break;
 800ec16:	e024      	b.n	800ec62 <validateTransitionPublish+0xbe>

        case MQTTPublishSend:

            /* Outgoing publish. All such publishes start in this state due to
             * the reserve operation. */
            switch( qos )
 800ec18:	793b      	ldrb	r3, [r7, #4]
 800ec1a:	2b01      	cmp	r3, #1
 800ec1c:	d002      	beq.n	800ec24 <validateTransitionPublish+0x80>
 800ec1e:	2b02      	cmp	r3, #2
 800ec20:	d007      	beq.n	800ec32 <validateTransitionPublish+0x8e>
                    break;

                case MQTTQoS0:
                default:
                    /* QoS 0 is checked before calling this function. */
                    break;
 800ec22:	e00d      	b.n	800ec40 <validateTransitionPublish+0x9c>
                    isValid = newState == MQTTPubAckPending;
 800ec24:	79bb      	ldrb	r3, [r7, #6]
 800ec26:	2b06      	cmp	r3, #6
 800ec28:	bf0c      	ite	eq
 800ec2a:	2301      	moveq	r3, #1
 800ec2c:	2300      	movne	r3, #0
 800ec2e:	73fb      	strb	r3, [r7, #15]
                    break;
 800ec30:	e006      	b.n	800ec40 <validateTransitionPublish+0x9c>
                    isValid = newState == MQTTPubRecPending;
 800ec32:	79bb      	ldrb	r3, [r7, #6]
 800ec34:	2b07      	cmp	r3, #7
 800ec36:	bf0c      	ite	eq
 800ec38:	2301      	moveq	r3, #1
 800ec3a:	2300      	movne	r3, #0
 800ec3c:	73fb      	strb	r3, [r7, #15]
                    break;
 800ec3e:	bf00      	nop
            }

            break;
 800ec40:	e010      	b.n	800ec64 <validateTransitionPublish+0xc0>
         * reestablished. */
        case MQTTPubAckPending:

            /* When a session is reestablished, outgoing QoS1 publishes in state
             * #MQTTPubAckPending can be resent. The state remains the same. */
            isValid = newState == MQTTPubAckPending;
 800ec42:	79bb      	ldrb	r3, [r7, #6]
 800ec44:	2b06      	cmp	r3, #6
 800ec46:	bf0c      	ite	eq
 800ec48:	2301      	moveq	r3, #1
 800ec4a:	2300      	movne	r3, #0
 800ec4c:	73fb      	strb	r3, [r7, #15]

            break;
 800ec4e:	e009      	b.n	800ec64 <validateTransitionPublish+0xc0>

        case MQTTPubRecPending:

            /* When a session is reestablished, outgoing QoS2 publishes in state
             * #MQTTPubRecPending can be resent. The state remains the same. */
            isValid = newState == MQTTPubRecPending;
 800ec50:	79bb      	ldrb	r3, [r7, #6]
 800ec52:	2b07      	cmp	r3, #7
 800ec54:	bf0c      	ite	eq
 800ec56:	2301      	moveq	r3, #1
 800ec58:	2300      	movne	r3, #0
 800ec5a:	73fb      	strb	r3, [r7, #15]

            break;
 800ec5c:	e002      	b.n	800ec64 <validateTransitionPublish+0xc0>
        case MQTTPubRelPending:
        case MQTTPubRelSend:
        case MQTTPublishDone:
        default:
            /* For a PUBLISH, we should not start from any other state. */
            break;
 800ec5e:	bf00      	nop
 800ec60:	e000      	b.n	800ec64 <validateTransitionPublish+0xc0>
            break;
 800ec62:	bf00      	nop
    }

    return isValid;
 800ec64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	3710      	adds	r7, #16
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bc90      	pop	{r4, r7}
 800ec6e:	4770      	bx	lr

0800ec70 <validateTransitionAck>:

/*-----------------------------------------------------------*/

static bool validateTransitionAck( MQTTPublishState_t currentState,
                                   MQTTPublishState_t newState )
{
 800ec70:	b480      	push	{r7}
 800ec72:	b085      	sub	sp, #20
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	4603      	mov	r3, r0
 800ec78:	460a      	mov	r2, r1
 800ec7a:	71fb      	strb	r3, [r7, #7]
 800ec7c:	4613      	mov	r3, r2
 800ec7e:	71bb      	strb	r3, [r7, #6]
    bool isValid = false;
 800ec80:	2300      	movs	r3, #0
 800ec82:	73fb      	strb	r3, [r7, #15]

    switch( currentState )
 800ec84:	79fb      	ldrb	r3, [r7, #7]
 800ec86:	3b02      	subs	r3, #2
 800ec88:	2b07      	cmp	r3, #7
 800ec8a:	d85c      	bhi.n	800ed46 <validateTransitionAck+0xd6>
 800ec8c:	a201      	add	r2, pc, #4	; (adr r2, 800ec94 <validateTransitionAck+0x24>)
 800ec8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec92:	bf00      	nop
 800ec94:	0800ecb5 	.word	0x0800ecb5
 800ec98:	0800ecc3 	.word	0x0800ecc3
 800ec9c:	0800ed1b 	.word	0x0800ed1b
 800eca0:	0800ecef 	.word	0x0800ecef
 800eca4:	0800ecb5 	.word	0x0800ecb5
 800eca8:	0800ed0d 	.word	0x0800ed0d
 800ecac:	0800ecd1 	.word	0x0800ecd1
 800ecb0:	0800ed29 	.word	0x0800ed29
    {
        case MQTTPubAckSend:
        /* Incoming publish, QoS 1. */
        case MQTTPubAckPending:
            /* Outgoing publish, QoS 1. */
            isValid = newState == MQTTPublishDone;
 800ecb4:	79bb      	ldrb	r3, [r7, #6]
 800ecb6:	2b0a      	cmp	r3, #10
 800ecb8:	bf0c      	ite	eq
 800ecba:	2301      	moveq	r3, #1
 800ecbc:	2300      	movne	r3, #0
 800ecbe:	73fb      	strb	r3, [r7, #15]
            break;
 800ecc0:	e042      	b.n	800ed48 <validateTransitionAck+0xd8>

        case MQTTPubRecSend:
            /* Incoming publish, QoS 2. */
            isValid = newState == MQTTPubRelPending;
 800ecc2:	79bb      	ldrb	r3, [r7, #6]
 800ecc4:	2b08      	cmp	r3, #8
 800ecc6:	bf0c      	ite	eq
 800ecc8:	2301      	moveq	r3, #1
 800ecca:	2300      	movne	r3, #0
 800eccc:	73fb      	strb	r3, [r7, #15]
            break;
 800ecce:	e03b      	b.n	800ed48 <validateTransitionAck+0xd8>
             *    5. MQTT broker resent the un-acked publish.
             *    6. Publish is received when publish record state is in
             *       MQTTPubRelPending.
             *    7. Sending out a PUBREC will result in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPubCompSend ) ||
 800ecd0:	79bb      	ldrb	r3, [r7, #6]
 800ecd2:	2b05      	cmp	r3, #5
 800ecd4:	d002      	beq.n	800ecdc <validateTransitionAck+0x6c>
 800ecd6:	79bb      	ldrb	r3, [r7, #6]
 800ecd8:	2b08      	cmp	r3, #8
 800ecda:	d101      	bne.n	800ece0 <validateTransitionAck+0x70>
 800ecdc:	2301      	movs	r3, #1
 800ecde:	e000      	b.n	800ece2 <validateTransitionAck+0x72>
 800ece0:	2300      	movs	r3, #0
 800ece2:	73fb      	strb	r3, [r7, #15]
 800ece4:	7bfb      	ldrb	r3, [r7, #15]
 800ece6:	f003 0301 	and.w	r3, r3, #1
 800ecea:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubRelPending );
            break;
 800ecec:	e02c      	b.n	800ed48 <validateTransitionAck+0xd8>
             *       for an incoming PUBREL.
             *    2. Reestablished an MQTT session.
             *    3. MQTT broker resent the un-acked PUBREL.
             *    4. Receiving the PUBREL again will result in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPublishDone ) ||
 800ecee:	79bb      	ldrb	r3, [r7, #6]
 800ecf0:	2b0a      	cmp	r3, #10
 800ecf2:	d002      	beq.n	800ecfa <validateTransitionAck+0x8a>
 800ecf4:	79bb      	ldrb	r3, [r7, #6]
 800ecf6:	2b05      	cmp	r3, #5
 800ecf8:	d101      	bne.n	800ecfe <validateTransitionAck+0x8e>
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	e000      	b.n	800ed00 <validateTransitionAck+0x90>
 800ecfe:	2300      	movs	r3, #0
 800ed00:	73fb      	strb	r3, [r7, #15]
 800ed02:	7bfb      	ldrb	r3, [r7, #15]
 800ed04:	f003 0301 	and.w	r3, r3, #1
 800ed08:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubCompSend );
            break;
 800ed0a:	e01d      	b.n	800ed48 <validateTransitionAck+0xd8>

        case MQTTPubRecPending:
            /* Outgoing publish, Qos 2. */
            isValid = newState == MQTTPubRelSend;
 800ed0c:	79bb      	ldrb	r3, [r7, #6]
 800ed0e:	2b04      	cmp	r3, #4
 800ed10:	bf0c      	ite	eq
 800ed12:	2301      	moveq	r3, #1
 800ed14:	2300      	movne	r3, #0
 800ed16:	73fb      	strb	r3, [r7, #15]
            break;
 800ed18:	e016      	b.n	800ed48 <validateTransitionAck+0xd8>

        case MQTTPubRelSend:
            /* Outgoing publish, Qos 2. */
            isValid = newState == MQTTPubCompPending;
 800ed1a:	79bb      	ldrb	r3, [r7, #6]
 800ed1c:	2b09      	cmp	r3, #9
 800ed1e:	bf0c      	ite	eq
 800ed20:	2301      	moveq	r3, #1
 800ed22:	2300      	movne	r3, #0
 800ed24:	73fb      	strb	r3, [r7, #15]
            break;
 800ed26:	e00f      	b.n	800ed48 <validateTransitionAck+0xd8>
             *    1. A TCP connection failure happened before receiving a PUBCOMP
             *       for an outgoing PUBREL.
             *    2. An MQTT session is reestablished.
             *    3. Resending the un-acked PUBREL results in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPublishDone ) ||
 800ed28:	79bb      	ldrb	r3, [r7, #6]
 800ed2a:	2b0a      	cmp	r3, #10
 800ed2c:	d002      	beq.n	800ed34 <validateTransitionAck+0xc4>
 800ed2e:	79bb      	ldrb	r3, [r7, #6]
 800ed30:	2b09      	cmp	r3, #9
 800ed32:	d101      	bne.n	800ed38 <validateTransitionAck+0xc8>
 800ed34:	2301      	movs	r3, #1
 800ed36:	e000      	b.n	800ed3a <validateTransitionAck+0xca>
 800ed38:	2300      	movs	r3, #0
 800ed3a:	73fb      	strb	r3, [r7, #15]
 800ed3c:	7bfb      	ldrb	r3, [r7, #15]
 800ed3e:	f003 0301 	and.w	r3, r3, #1
 800ed42:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubCompPending );
            break;
 800ed44:	e000      	b.n	800ed48 <validateTransitionAck+0xd8>
        /* If an ack was sent/received we shouldn't have been in this state. */
        case MQTTStateNull:
        /* If an ack was sent/received the record should exist. */
        default:
            /* Invalid. */
            break;
 800ed46:	bf00      	nop
    }

    return isValid;
 800ed48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3714      	adds	r7, #20
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed54:	4770      	bx	lr
 800ed56:	bf00      	nop

0800ed58 <isPublishOutgoing>:

/*-----------------------------------------------------------*/

static bool isPublishOutgoing( MQTTPubAckType_t packetType,
                               MQTTStateOperation_t opType )
{
 800ed58:	b480      	push	{r7}
 800ed5a:	b085      	sub	sp, #20
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	4603      	mov	r3, r0
 800ed60:	460a      	mov	r2, r1
 800ed62:	71fb      	strb	r3, [r7, #7]
 800ed64:	4613      	mov	r3, r2
 800ed66:	71bb      	strb	r3, [r7, #6]
    bool isOutgoing = false;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	73fb      	strb	r3, [r7, #15]

    switch( packetType )
 800ed6c:	79fb      	ldrb	r3, [r7, #7]
 800ed6e:	2b03      	cmp	r3, #3
 800ed70:	d009      	beq.n	800ed86 <isPublishOutgoing+0x2e>
 800ed72:	2b03      	cmp	r3, #3
 800ed74:	dc15      	bgt.n	800eda2 <isPublishOutgoing+0x4a>
 800ed76:	2b01      	cmp	r3, #1
 800ed78:	dc02      	bgt.n	800ed80 <isPublishOutgoing+0x28>
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	da03      	bge.n	800ed86 <isPublishOutgoing+0x2e>
            isOutgoing = opType == MQTT_SEND;
            break;

        default:
            /* No other ack type. */
            break;
 800ed7e:	e010      	b.n	800eda2 <isPublishOutgoing+0x4a>
    switch( packetType )
 800ed80:	2b02      	cmp	r3, #2
 800ed82:	d007      	beq.n	800ed94 <isPublishOutgoing+0x3c>
            break;
 800ed84:	e00d      	b.n	800eda2 <isPublishOutgoing+0x4a>
            isOutgoing = opType == MQTT_RECEIVE;
 800ed86:	79bb      	ldrb	r3, [r7, #6]
 800ed88:	2b01      	cmp	r3, #1
 800ed8a:	bf0c      	ite	eq
 800ed8c:	2301      	moveq	r3, #1
 800ed8e:	2300      	movne	r3, #0
 800ed90:	73fb      	strb	r3, [r7, #15]
            break;
 800ed92:	e007      	b.n	800eda4 <isPublishOutgoing+0x4c>
            isOutgoing = opType == MQTT_SEND;
 800ed94:	79bb      	ldrb	r3, [r7, #6]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	bf0c      	ite	eq
 800ed9a:	2301      	moveq	r3, #1
 800ed9c:	2300      	movne	r3, #0
 800ed9e:	73fb      	strb	r3, [r7, #15]
            break;
 800eda0:	e000      	b.n	800eda4 <isPublishOutgoing+0x4c>
            break;
 800eda2:	bf00      	nop
    }

    return isOutgoing;
 800eda4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3714      	adds	r7, #20
 800edaa:	46bd      	mov	sp, r7
 800edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb0:	4770      	bx	lr
	...

0800edb4 <findInRecord>:
static size_t findInRecord( const MQTTPubAckInfo_t * records,
                            size_t recordCount,
                            uint16_t packetId,
                            MQTTQoS_t * pQos,
                            MQTTPublishState_t * pCurrentState )
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b086      	sub	sp, #24
 800edb8:	af00      	add	r7, sp, #0
 800edba:	60f8      	str	r0, [r7, #12]
 800edbc:	60b9      	str	r1, [r7, #8]
 800edbe:	603b      	str	r3, [r7, #0]
 800edc0:	4613      	mov	r3, r2
 800edc2:	80fb      	strh	r3, [r7, #6]
    size_t index = 0;
 800edc4:	2300      	movs	r3, #0
 800edc6:	617b      	str	r3, [r7, #20]

    assert( packetId != MQTT_PACKET_ID_INVALID );
 800edc8:	88fb      	ldrh	r3, [r7, #6]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d106      	bne.n	800eddc <findInRecord+0x28>
 800edce:	4b1b      	ldr	r3, [pc, #108]	; (800ee3c <findInRecord+0x88>)
 800edd0:	4a1b      	ldr	r2, [pc, #108]	; (800ee40 <findInRecord+0x8c>)
 800edd2:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800edd6:	481b      	ldr	r0, [pc, #108]	; (800ee44 <findInRecord+0x90>)
 800edd8:	f004 f888 	bl	8012eec <__assert_func>

    *pCurrentState = MQTTStateNull;
 800eddc:	6a3b      	ldr	r3, [r7, #32]
 800edde:	2200      	movs	r2, #0
 800ede0:	701a      	strb	r2, [r3, #0]

    for( index = 0; index < recordCount; index++ )
 800ede2:	2300      	movs	r3, #0
 800ede4:	617b      	str	r3, [r7, #20]
 800ede6:	e019      	b.n	800ee1c <findInRecord+0x68>
    {
        if( records[ index ].packetId == packetId )
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	009b      	lsls	r3, r3, #2
 800edec:	68fa      	ldr	r2, [r7, #12]
 800edee:	4413      	add	r3, r2
 800edf0:	881b      	ldrh	r3, [r3, #0]
 800edf2:	88fa      	ldrh	r2, [r7, #6]
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d10e      	bne.n	800ee16 <findInRecord+0x62>
        {
            *pQos = records[ index ].qos;
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	009b      	lsls	r3, r3, #2
 800edfc:	68fa      	ldr	r2, [r7, #12]
 800edfe:	4413      	add	r3, r2
 800ee00:	789a      	ldrb	r2, [r3, #2]
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	701a      	strb	r2, [r3, #0]
            *pCurrentState = records[ index ].publishState;
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	009b      	lsls	r3, r3, #2
 800ee0a:	68fa      	ldr	r2, [r7, #12]
 800ee0c:	4413      	add	r3, r2
 800ee0e:	78da      	ldrb	r2, [r3, #3]
 800ee10:	6a3b      	ldr	r3, [r7, #32]
 800ee12:	701a      	strb	r2, [r3, #0]
            break;
 800ee14:	e006      	b.n	800ee24 <findInRecord+0x70>
    for( index = 0; index < recordCount; index++ )
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	3301      	adds	r3, #1
 800ee1a:	617b      	str	r3, [r7, #20]
 800ee1c:	697a      	ldr	r2, [r7, #20]
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	429a      	cmp	r2, r3
 800ee22:	d3e1      	bcc.n	800ede8 <findInRecord+0x34>
        }
    }

    if( index == recordCount )
 800ee24:	697a      	ldr	r2, [r7, #20]
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	d102      	bne.n	800ee32 <findInRecord+0x7e>
    {
        index = MQTT_INVALID_STATE_COUNT;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	43db      	mvns	r3, r3
 800ee30:	617b      	str	r3, [r7, #20]
    }

    return index;
 800ee32:	697b      	ldr	r3, [r7, #20]
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	3718      	adds	r7, #24
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}
 800ee3c:	08017774 	.word	0x08017774
 800ee40:	08017d94 	.word	0x08017d94
 800ee44:	08017798 	.word	0x08017798

0800ee48 <compactRecords>:

/*-----------------------------------------------------------*/

static void compactRecords( MQTTPubAckInfo_t * records,
                            size_t recordCount )
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b084      	sub	sp, #16
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	6039      	str	r1, [r7, #0]
    size_t index = 0;
 800ee52:	2300      	movs	r3, #0
 800ee54:	60fb      	str	r3, [r7, #12]
    size_t emptyIndex = MQTT_INVALID_STATE_COUNT;
 800ee56:	2300      	movs	r3, #0
 800ee58:	43db      	mvns	r3, r3
 800ee5a:	60bb      	str	r3, [r7, #8]

    assert( records != NULL );
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d150      	bne.n	800ef04 <compactRecords+0xbc>
 800ee62:	4b2d      	ldr	r3, [pc, #180]	; (800ef18 <compactRecords+0xd0>)
 800ee64:	4a2d      	ldr	r2, [pc, #180]	; (800ef1c <compactRecords+0xd4>)
 800ee66:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 800ee6a:	482d      	ldr	r0, [pc, #180]	; (800ef20 <compactRecords+0xd8>)
 800ee6c:	f004 f83e 	bl	8012eec <__assert_func>

    /* Find the empty spots and fill those with non empty values. */
    for( ; index < recordCount; index++ )
    {
        /* Find the first empty spot. */
        if( records[ index ].packetId == MQTT_PACKET_ID_INVALID )
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	009b      	lsls	r3, r3, #2
 800ee74:	687a      	ldr	r2, [r7, #4]
 800ee76:	4413      	add	r3, r2
 800ee78:	881b      	ldrh	r3, [r3, #0]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d107      	bne.n	800ee8e <compactRecords+0x46>
        {
            if( emptyIndex == MQTT_INVALID_STATE_COUNT )
 800ee7e:	2300      	movs	r3, #0
 800ee80:	43db      	mvns	r3, r3
 800ee82:	68ba      	ldr	r2, [r7, #8]
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d13a      	bne.n	800eefe <compactRecords+0xb6>
            {
                emptyIndex = index;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	60bb      	str	r3, [r7, #8]
 800ee8c:	e037      	b.n	800eefe <compactRecords+0xb6>
            }
        }
        else
        {
            if( emptyIndex != MQTT_INVALID_STATE_COUNT )
 800ee8e:	2300      	movs	r3, #0
 800ee90:	43db      	mvns	r3, r3
 800ee92:	68ba      	ldr	r2, [r7, #8]
 800ee94:	429a      	cmp	r2, r3
 800ee96:	d032      	beq.n	800eefe <compactRecords+0xb6>
            {
                /* Copy over the contents at non empty index to empty index. */
                records[ emptyIndex ].packetId = records[ index ].packetId;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	009b      	lsls	r3, r3, #2
 800ee9c:	687a      	ldr	r2, [r7, #4]
 800ee9e:	441a      	add	r2, r3
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	009b      	lsls	r3, r3, #2
 800eea4:	6879      	ldr	r1, [r7, #4]
 800eea6:	440b      	add	r3, r1
 800eea8:	8812      	ldrh	r2, [r2, #0]
 800eeaa:	801a      	strh	r2, [r3, #0]
                records[ emptyIndex ].qos = records[ index ].qos;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	009b      	lsls	r3, r3, #2
 800eeb0:	687a      	ldr	r2, [r7, #4]
 800eeb2:	441a      	add	r2, r3
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	009b      	lsls	r3, r3, #2
 800eeb8:	6879      	ldr	r1, [r7, #4]
 800eeba:	440b      	add	r3, r1
 800eebc:	7892      	ldrb	r2, [r2, #2]
 800eebe:	709a      	strb	r2, [r3, #2]
                records[ emptyIndex ].publishState = records[ index ].publishState;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	009b      	lsls	r3, r3, #2
 800eec4:	687a      	ldr	r2, [r7, #4]
 800eec6:	441a      	add	r2, r3
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	009b      	lsls	r3, r3, #2
 800eecc:	6879      	ldr	r1, [r7, #4]
 800eece:	440b      	add	r3, r1
 800eed0:	78d2      	ldrb	r2, [r2, #3]
 800eed2:	70da      	strb	r2, [r3, #3]

                /* Mark the record at current non empty index as invalid. */
                records[ index ].packetId = MQTT_PACKET_ID_INVALID;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	009b      	lsls	r3, r3, #2
 800eed8:	687a      	ldr	r2, [r7, #4]
 800eeda:	4413      	add	r3, r2
 800eedc:	2200      	movs	r2, #0
 800eede:	801a      	strh	r2, [r3, #0]
                records[ index ].qos = MQTTQoS0;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	009b      	lsls	r3, r3, #2
 800eee4:	687a      	ldr	r2, [r7, #4]
 800eee6:	4413      	add	r3, r2
 800eee8:	2200      	movs	r2, #0
 800eeea:	709a      	strb	r2, [r3, #2]
                records[ index ].publishState = MQTTStateNull;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	009b      	lsls	r3, r3, #2
 800eef0:	687a      	ldr	r2, [r7, #4]
 800eef2:	4413      	add	r3, r2
 800eef4:	2200      	movs	r2, #0
 800eef6:	70da      	strb	r2, [r3, #3]

                /* Advance the emptyIndex. */
                emptyIndex++;
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	3301      	adds	r3, #1
 800eefc:	60bb      	str	r3, [r7, #8]
    for( ; index < recordCount; index++ )
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	3301      	adds	r3, #1
 800ef02:	60fb      	str	r3, [r7, #12]
 800ef04:	68fa      	ldr	r2, [r7, #12]
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	429a      	cmp	r2, r3
 800ef0a:	d3b1      	bcc.n	800ee70 <compactRecords+0x28>
            }
        }
    }
}
 800ef0c:	bf00      	nop
 800ef0e:	bf00      	nop
 800ef10:	3710      	adds	r7, #16
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
 800ef16:	bf00      	nop
 800ef18:	080177c8 	.word	0x080177c8
 800ef1c:	08017da4 	.word	0x08017da4
 800ef20:	08017798 	.word	0x08017798

0800ef24 <addRecord>:
static MQTTStatus_t addRecord( MQTTPubAckInfo_t * records,
                               size_t recordCount,
                               uint16_t packetId,
                               MQTTQoS_t qos,
                               MQTTPublishState_t publishState )
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b088      	sub	sp, #32
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	60f8      	str	r0, [r7, #12]
 800ef2c:	60b9      	str	r1, [r7, #8]
 800ef2e:	4611      	mov	r1, r2
 800ef30:	461a      	mov	r2, r3
 800ef32:	460b      	mov	r3, r1
 800ef34:	80fb      	strh	r3, [r7, #6]
 800ef36:	4613      	mov	r3, r2
 800ef38:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTNoMemory;
 800ef3a:	2302      	movs	r3, #2
 800ef3c:	77fb      	strb	r3, [r7, #31]
    int32_t index = 0;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	61bb      	str	r3, [r7, #24]
    size_t availableIndex = recordCount;
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	617b      	str	r3, [r7, #20]
    bool validEntryFound = false;
 800ef46:	2300      	movs	r3, #0
 800ef48:	74fb      	strb	r3, [r7, #19]

    assert( packetId != MQTT_PACKET_ID_INVALID );
 800ef4a:	88fb      	ldrh	r3, [r7, #6]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d106      	bne.n	800ef5e <addRecord+0x3a>
 800ef50:	4b32      	ldr	r3, [pc, #200]	; (800f01c <addRecord+0xf8>)
 800ef52:	4a33      	ldr	r2, [pc, #204]	; (800f020 <addRecord+0xfc>)
 800ef54:	f240 2115 	movw	r1, #533	; 0x215
 800ef58:	4832      	ldr	r0, [pc, #200]	; (800f024 <addRecord+0x100>)
 800ef5a:	f003 ffc7 	bl	8012eec <__assert_func>
    assert( qos != MQTTQoS0 );
 800ef5e:	797b      	ldrb	r3, [r7, #5]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d106      	bne.n	800ef72 <addRecord+0x4e>
 800ef64:	4b30      	ldr	r3, [pc, #192]	; (800f028 <addRecord+0x104>)
 800ef66:	4a2e      	ldr	r2, [pc, #184]	; (800f020 <addRecord+0xfc>)
 800ef68:	f240 2116 	movw	r1, #534	; 0x216
 800ef6c:	482d      	ldr	r0, [pc, #180]	; (800f024 <addRecord+0x100>)
 800ef6e:	f003 ffbd 	bl	8012eec <__assert_func>

    /* Check if we have to compact the records. This is known by checking if
     * the last spot in the array is filled. */
    if( records[ recordCount - 1U ].packetId != MQTT_PACKET_ID_INVALID )
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ef78:	3b01      	subs	r3, #1
 800ef7a:	009b      	lsls	r3, r3, #2
 800ef7c:	68fa      	ldr	r2, [r7, #12]
 800ef7e:	4413      	add	r3, r2
 800ef80:	881b      	ldrh	r3, [r3, #0]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d003      	beq.n	800ef8e <addRecord+0x6a>
    {
        compactRecords( records, recordCount );
 800ef86:	68b9      	ldr	r1, [r7, #8]
 800ef88:	68f8      	ldr	r0, [r7, #12]
 800ef8a:	f7ff ff5d 	bl	800ee48 <compactRecords>

    /* Start from end so first available index will be populated.
     * Available index is always found after the last element in the records.
     * This is to make sure the relative order of the records in order to meet
     * the message ordering requirement of MQTT spec 3.1.1. */
    for( index = ( ( int32_t ) recordCount - 1 ); index >= 0; index-- )
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	3b01      	subs	r3, #1
 800ef92:	61bb      	str	r3, [r7, #24]
 800ef94:	e021      	b.n	800efda <addRecord+0xb6>
    {
        /* Available index is only found after packet at the highest index. */
        if( records[ index ].packetId == MQTT_PACKET_ID_INVALID )
 800ef96:	69bb      	ldr	r3, [r7, #24]
 800ef98:	009b      	lsls	r3, r3, #2
 800ef9a:	68fa      	ldr	r2, [r7, #12]
 800ef9c:	4413      	add	r3, r2
 800ef9e:	881b      	ldrh	r3, [r3, #0]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d108      	bne.n	800efb6 <addRecord+0x92>
        {
            if( validEntryFound == false )
 800efa4:	7cfb      	ldrb	r3, [r7, #19]
 800efa6:	f083 0301 	eor.w	r3, r3, #1
 800efaa:	b2db      	uxtb	r3, r3
 800efac:	2b00      	cmp	r3, #0
 800efae:	d011      	beq.n	800efd4 <addRecord+0xb0>
            {
                availableIndex = ( size_t ) index;
 800efb0:	69bb      	ldr	r3, [r7, #24]
 800efb2:	617b      	str	r3, [r7, #20]
 800efb4:	e00e      	b.n	800efd4 <addRecord+0xb0>
            }
        }
        else
        {
            /* A non-empty spot found in the records. */
            validEntryFound = true;
 800efb6:	2301      	movs	r3, #1
 800efb8:	74fb      	strb	r3, [r7, #19]

            if( records[ index ].packetId == packetId )
 800efba:	69bb      	ldr	r3, [r7, #24]
 800efbc:	009b      	lsls	r3, r3, #2
 800efbe:	68fa      	ldr	r2, [r7, #12]
 800efc0:	4413      	add	r3, r2
 800efc2:	881b      	ldrh	r3, [r3, #0]
 800efc4:	88fa      	ldrh	r2, [r7, #6]
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d104      	bne.n	800efd4 <addRecord+0xb0>
                /* Collision. */
                LogError( ( "Collision when adding PacketID=%u at index=%d.",
                            ( unsigned int ) packetId,
                            ( int ) index ) );

                status = MQTTStateCollision;
 800efca:	2309      	movs	r3, #9
 800efcc:	77fb      	strb	r3, [r7, #31]
                availableIndex = recordCount;
 800efce:	68bb      	ldr	r3, [r7, #8]
 800efd0:	617b      	str	r3, [r7, #20]
                break;
 800efd2:	e005      	b.n	800efe0 <addRecord+0xbc>
    for( index = ( ( int32_t ) recordCount - 1 ); index >= 0; index-- )
 800efd4:	69bb      	ldr	r3, [r7, #24]
 800efd6:	3b01      	subs	r3, #1
 800efd8:	61bb      	str	r3, [r7, #24]
 800efda:	69bb      	ldr	r3, [r7, #24]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	dada      	bge.n	800ef96 <addRecord+0x72>
            }
        }
    }

    if( availableIndex < recordCount )
 800efe0:	697a      	ldr	r2, [r7, #20]
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d214      	bcs.n	800f012 <addRecord+0xee>
    {
        records[ availableIndex ].packetId = packetId;
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	009b      	lsls	r3, r3, #2
 800efec:	68fa      	ldr	r2, [r7, #12]
 800efee:	4413      	add	r3, r2
 800eff0:	88fa      	ldrh	r2, [r7, #6]
 800eff2:	801a      	strh	r2, [r3, #0]
        records[ availableIndex ].qos = qos;
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	009b      	lsls	r3, r3, #2
 800eff8:	68fa      	ldr	r2, [r7, #12]
 800effa:	4413      	add	r3, r2
 800effc:	797a      	ldrb	r2, [r7, #5]
 800effe:	709a      	strb	r2, [r3, #2]
        records[ availableIndex ].publishState = publishState;
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	009b      	lsls	r3, r3, #2
 800f004:	68fa      	ldr	r2, [r7, #12]
 800f006:	4413      	add	r3, r2
 800f008:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f00c:	70da      	strb	r2, [r3, #3]
        status = MQTTSuccess;
 800f00e:	2300      	movs	r3, #0
 800f010:	77fb      	strb	r3, [r7, #31]
    }

    return status;
 800f012:	7ffb      	ldrb	r3, [r7, #31]
}
 800f014:	4618      	mov	r0, r3
 800f016:	3720      	adds	r7, #32
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}
 800f01c:	08017774 	.word	0x08017774
 800f020:	08017db4 	.word	0x08017db4
 800f024:	08017798 	.word	0x08017798
 800f028:	080177d8 	.word	0x080177d8

0800f02c <updateRecord>:

static void updateRecord( MQTTPubAckInfo_t * records,
                          size_t recordIndex,
                          MQTTPublishState_t newState,
                          bool shouldDelete )
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b084      	sub	sp, #16
 800f030:	af00      	add	r7, sp, #0
 800f032:	60f8      	str	r0, [r7, #12]
 800f034:	60b9      	str	r1, [r7, #8]
 800f036:	4611      	mov	r1, r2
 800f038:	461a      	mov	r2, r3
 800f03a:	460b      	mov	r3, r1
 800f03c:	71fb      	strb	r3, [r7, #7]
 800f03e:	4613      	mov	r3, r2
 800f040:	71bb      	strb	r3, [r7, #6]
    assert( records != NULL );
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d106      	bne.n	800f056 <updateRecord+0x2a>
 800f048:	4b13      	ldr	r3, [pc, #76]	; (800f098 <updateRecord+0x6c>)
 800f04a:	4a14      	ldr	r2, [pc, #80]	; (800f09c <updateRecord+0x70>)
 800f04c:	f240 2152 	movw	r1, #594	; 0x252
 800f050:	4813      	ldr	r0, [pc, #76]	; (800f0a0 <updateRecord+0x74>)
 800f052:	f003 ff4b 	bl	8012eec <__assert_func>

    if( shouldDelete == true )
 800f056:	79bb      	ldrb	r3, [r7, #6]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d012      	beq.n	800f082 <updateRecord+0x56>
    {
        /* Mark the record as invalid. */
        records[ recordIndex ].packetId = MQTT_PACKET_ID_INVALID;
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	009b      	lsls	r3, r3, #2
 800f060:	68fa      	ldr	r2, [r7, #12]
 800f062:	4413      	add	r3, r2
 800f064:	2200      	movs	r2, #0
 800f066:	801a      	strh	r2, [r3, #0]
        records[ recordIndex ].qos = MQTTQoS0;
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	009b      	lsls	r3, r3, #2
 800f06c:	68fa      	ldr	r2, [r7, #12]
 800f06e:	4413      	add	r3, r2
 800f070:	2200      	movs	r2, #0
 800f072:	709a      	strb	r2, [r3, #2]
        records[ recordIndex ].publishState = MQTTStateNull;
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	009b      	lsls	r3, r3, #2
 800f078:	68fa      	ldr	r2, [r7, #12]
 800f07a:	4413      	add	r3, r2
 800f07c:	2200      	movs	r2, #0
 800f07e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
        records[ recordIndex ].publishState = newState;
    }
}
 800f080:	e005      	b.n	800f08e <updateRecord+0x62>
        records[ recordIndex ].publishState = newState;
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	009b      	lsls	r3, r3, #2
 800f086:	68fa      	ldr	r2, [r7, #12]
 800f088:	4413      	add	r3, r2
 800f08a:	79fa      	ldrb	r2, [r7, #7]
 800f08c:	70da      	strb	r2, [r3, #3]
}
 800f08e:	bf00      	nop
 800f090:	3710      	adds	r7, #16
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}
 800f096:	bf00      	nop
 800f098:	080177c8 	.word	0x080177c8
 800f09c:	08017dc0 	.word	0x08017dc0
 800f0a0:	08017798 	.word	0x08017798

0800f0a4 <stateSelect>:
/*-----------------------------------------------------------*/

static uint16_t stateSelect( const MQTTContext_t * pMqttContext,
                             uint16_t searchStates,
                             MQTTStateCursor_t * pCursor )
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b088      	sub	sp, #32
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	60f8      	str	r0, [r7, #12]
 800f0ac:	460b      	mov	r3, r1
 800f0ae:	607a      	str	r2, [r7, #4]
 800f0b0:	817b      	strh	r3, [r7, #10]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	83fb      	strh	r3, [r7, #30]
    uint16_t outgoingStates = 0U;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	83bb      	strh	r3, [r7, #28]
    const MQTTPubAckInfo_t * records = NULL;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	61bb      	str	r3, [r7, #24]
    size_t maxCount;
    bool stateCheck = false;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	75fb      	strb	r3, [r7, #23]

    assert( pMqttContext != NULL );
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d106      	bne.n	800f0d6 <stateSelect+0x32>
 800f0c8:	4b43      	ldr	r3, [pc, #268]	; (800f1d8 <stateSelect+0x134>)
 800f0ca:	4a44      	ldr	r2, [pc, #272]	; (800f1dc <stateSelect+0x138>)
 800f0cc:	f240 216d 	movw	r1, #621	; 0x26d
 800f0d0:	4843      	ldr	r0, [pc, #268]	; (800f1e0 <stateSelect+0x13c>)
 800f0d2:	f003 ff0b 	bl	8012eec <__assert_func>
    assert( searchStates != 0U );
 800f0d6:	897b      	ldrh	r3, [r7, #10]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d106      	bne.n	800f0ea <stateSelect+0x46>
 800f0dc:	4b41      	ldr	r3, [pc, #260]	; (800f1e4 <stateSelect+0x140>)
 800f0de:	4a3f      	ldr	r2, [pc, #252]	; (800f1dc <stateSelect+0x138>)
 800f0e0:	f240 216e 	movw	r1, #622	; 0x26e
 800f0e4:	483e      	ldr	r0, [pc, #248]	; (800f1e0 <stateSelect+0x13c>)
 800f0e6:	f003 ff01 	bl	8012eec <__assert_func>
    assert( pCursor != NULL );
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d106      	bne.n	800f0fe <stateSelect+0x5a>
 800f0f0:	4b3d      	ldr	r3, [pc, #244]	; (800f1e8 <stateSelect+0x144>)
 800f0f2:	4a3a      	ldr	r2, [pc, #232]	; (800f1dc <stateSelect+0x138>)
 800f0f4:	f240 216f 	movw	r1, #623	; 0x26f
 800f0f8:	4839      	ldr	r0, [pc, #228]	; (800f1e0 <stateSelect+0x13c>)
 800f0fa:	f003 fef7 	bl	8012eec <__assert_func>

    /* Create a bit map with all the outgoing publish states. */
    UINT16_SET_BIT( outgoingStates, MQTTPublishSend );
 800f0fe:	8bbb      	ldrh	r3, [r7, #28]
 800f100:	f043 0302 	orr.w	r3, r3, #2
 800f104:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubAckPending );
 800f106:	8bbb      	ldrh	r3, [r7, #28]
 800f108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f10c:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubRecPending );
 800f10e:	8bbb      	ldrh	r3, [r7, #28]
 800f110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f114:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubRelSend );
 800f116:	8bbb      	ldrh	r3, [r7, #28]
 800f118:	f043 0310 	orr.w	r3, r3, #16
 800f11c:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubCompPending );
 800f11e:	8bbb      	ldrh	r3, [r7, #28]
 800f120:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f124:	83bb      	strh	r3, [r7, #28]

    /* Only outgoing publish records need to be searched. */
    assert( ( outgoingStates & searchStates ) > 0U );
 800f126:	8bba      	ldrh	r2, [r7, #28]
 800f128:	897b      	ldrh	r3, [r7, #10]
 800f12a:	4013      	ands	r3, r2
 800f12c:	b29b      	uxth	r3, r3
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d106      	bne.n	800f140 <stateSelect+0x9c>
 800f132:	4b2e      	ldr	r3, [pc, #184]	; (800f1ec <stateSelect+0x148>)
 800f134:	4a29      	ldr	r2, [pc, #164]	; (800f1dc <stateSelect+0x138>)
 800f136:	f240 2179 	movw	r1, #633	; 0x279
 800f13a:	4829      	ldr	r0, [pc, #164]	; (800f1e0 <stateSelect+0x13c>)
 800f13c:	f003 fed6 	bl	8012eec <__assert_func>
    assert( ( ~outgoingStates & searchStates ) == 0U );
 800f140:	8bbb      	ldrh	r3, [r7, #28]
 800f142:	43da      	mvns	r2, r3
 800f144:	897b      	ldrh	r3, [r7, #10]
 800f146:	4013      	ands	r3, r2
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d006      	beq.n	800f15a <stateSelect+0xb6>
 800f14c:	4b28      	ldr	r3, [pc, #160]	; (800f1f0 <stateSelect+0x14c>)
 800f14e:	4a23      	ldr	r2, [pc, #140]	; (800f1dc <stateSelect+0x138>)
 800f150:	f240 217a 	movw	r1, #634	; 0x27a
 800f154:	4822      	ldr	r0, [pc, #136]	; (800f1e0 <stateSelect+0x13c>)
 800f156:	f003 fec9 	bl	8012eec <__assert_func>

    records = pMqttContext->outgoingPublishRecords;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	61bb      	str	r3, [r7, #24]
    maxCount = pMqttContext->outgoingPublishRecordMaxCount;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	689b      	ldr	r3, [r3, #8]
 800f164:	613b      	str	r3, [r7, #16]

    while( *pCursor < maxCount )
 800f166:	e02d      	b.n	800f1c4 <stateSelect+0x120>
    {
        /* Check if any of the search states are present. */
        stateCheck = UINT16_CHECK_BIT( searchStates, records[ *pCursor ].publishState );
 800f168:	897a      	ldrh	r2, [r7, #10]
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	009b      	lsls	r3, r3, #2
 800f170:	69b9      	ldr	r1, [r7, #24]
 800f172:	440b      	add	r3, r1
 800f174:	78db      	ldrb	r3, [r3, #3]
 800f176:	4619      	mov	r1, r3
 800f178:	2301      	movs	r3, #1
 800f17a:	408b      	lsls	r3, r1
 800f17c:	401a      	ands	r2, r3
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	009b      	lsls	r3, r3, #2
 800f184:	69b9      	ldr	r1, [r7, #24]
 800f186:	440b      	add	r3, r1
 800f188:	78db      	ldrb	r3, [r3, #3]
 800f18a:	4619      	mov	r1, r3
 800f18c:	2301      	movs	r3, #1
 800f18e:	408b      	lsls	r3, r1
 800f190:	429a      	cmp	r2, r3
 800f192:	bf0c      	ite	eq
 800f194:	2301      	moveq	r3, #1
 800f196:	2300      	movne	r3, #0
 800f198:	75fb      	strb	r3, [r7, #23]

        if( stateCheck == true )
 800f19a:	7dfb      	ldrb	r3, [r7, #23]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d00c      	beq.n	800f1ba <stateSelect+0x116>
        {
            packetId = records[ *pCursor ].packetId;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	009b      	lsls	r3, r3, #2
 800f1a6:	69ba      	ldr	r2, [r7, #24]
 800f1a8:	4413      	add	r3, r2
 800f1aa:	881b      	ldrh	r3, [r3, #0]
 800f1ac:	83fb      	strh	r3, [r7, #30]
            ( *pCursor )++;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	1c5a      	adds	r2, r3, #1
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	601a      	str	r2, [r3, #0]
            break;
 800f1b8:	e009      	b.n	800f1ce <stateSelect+0x12a>
        }

        ( *pCursor )++;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	1c5a      	adds	r2, r3, #1
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	601a      	str	r2, [r3, #0]
    while( *pCursor < maxCount )
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	693a      	ldr	r2, [r7, #16]
 800f1ca:	429a      	cmp	r2, r3
 800f1cc:	d8cc      	bhi.n	800f168 <stateSelect+0xc4>
    }

    return packetId;
 800f1ce:	8bfb      	ldrh	r3, [r7, #30]
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3720      	adds	r7, #32
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	080177e8 	.word	0x080177e8
 800f1dc:	08017dd0 	.word	0x08017dd0
 800f1e0:	08017798 	.word	0x08017798
 800f1e4:	08017800 	.word	0x08017800
 800f1e8:	08017814 	.word	0x08017814
 800f1ec:	08017824 	.word	0x08017824
 800f1f0:	0801784c 	.word	0x0801784c

0800f1f4 <MQTT_CalculateStateAck>:
/*-----------------------------------------------------------*/

MQTTPublishState_t MQTT_CalculateStateAck( MQTTPubAckType_t packetType,
                                           MQTTStateOperation_t opType,
                                           MQTTQoS_t qos )
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	b085      	sub	sp, #20
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	71fb      	strb	r3, [r7, #7]
 800f1fe:	460b      	mov	r3, r1
 800f200:	71bb      	strb	r3, [r7, #6]
 800f202:	4613      	mov	r3, r2
 800f204:	717b      	strb	r3, [r7, #5]
    MQTTPublishState_t calculatedState = MQTTStateNull;
 800f206:	2300      	movs	r3, #0
 800f208:	73fb      	strb	r3, [r7, #15]
    /* There are more QoS2 cases than QoS1, so initialize to that. */
    bool qosValid = qos == MQTTQoS2;
 800f20a:	797b      	ldrb	r3, [r7, #5]
 800f20c:	2b02      	cmp	r3, #2
 800f20e:	bf0c      	ite	eq
 800f210:	2301      	moveq	r3, #1
 800f212:	2300      	movne	r3, #0
 800f214:	73bb      	strb	r3, [r7, #14]

    switch( packetType )
 800f216:	79fb      	ldrb	r3, [r7, #7]
 800f218:	2b03      	cmp	r3, #3
 800f21a:	d827      	bhi.n	800f26c <MQTT_CalculateStateAck+0x78>
 800f21c:	a201      	add	r2, pc, #4	; (adr r2, 800f224 <MQTT_CalculateStateAck+0x30>)
 800f21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f222:	bf00      	nop
 800f224:	0800f235 	.word	0x0800f235
 800f228:	0800f247 	.word	0x0800f247
 800f22c:	0800f257 	.word	0x0800f257
 800f230:	0800f267 	.word	0x0800f267
    {
        case MQTTPuback:
            qosValid = qos == MQTTQoS1;
 800f234:	797b      	ldrb	r3, [r7, #5]
 800f236:	2b01      	cmp	r3, #1
 800f238:	bf0c      	ite	eq
 800f23a:	2301      	moveq	r3, #1
 800f23c:	2300      	movne	r3, #0
 800f23e:	73bb      	strb	r3, [r7, #14]
            calculatedState = MQTTPublishDone;
 800f240:	230a      	movs	r3, #10
 800f242:	73fb      	strb	r3, [r7, #15]
            break;
 800f244:	e013      	b.n	800f26e <MQTT_CalculateStateAck+0x7a>

        case MQTTPubrec:

            /* Incoming publish: send PUBREC, PUBREL pending.
             * Outgoing publish: receive PUBREC, send PUBREL. */
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRelPending : MQTTPubRelSend;
 800f246:	79bb      	ldrb	r3, [r7, #6]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d101      	bne.n	800f250 <MQTT_CalculateStateAck+0x5c>
 800f24c:	2308      	movs	r3, #8
 800f24e:	e000      	b.n	800f252 <MQTT_CalculateStateAck+0x5e>
 800f250:	2304      	movs	r3, #4
 800f252:	73fb      	strb	r3, [r7, #15]
            break;
 800f254:	e00b      	b.n	800f26e <MQTT_CalculateStateAck+0x7a>

        case MQTTPubrel:

            /* Incoming publish: receive PUBREL, send PUBCOMP.
             * Outgoing publish: send PUBREL, PUBCOMP pending. */
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubCompPending : MQTTPubCompSend;
 800f256:	79bb      	ldrb	r3, [r7, #6]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d101      	bne.n	800f260 <MQTT_CalculateStateAck+0x6c>
 800f25c:	2309      	movs	r3, #9
 800f25e:	e000      	b.n	800f262 <MQTT_CalculateStateAck+0x6e>
 800f260:	2305      	movs	r3, #5
 800f262:	73fb      	strb	r3, [r7, #15]
            break;
 800f264:	e003      	b.n	800f26e <MQTT_CalculateStateAck+0x7a>

        case MQTTPubcomp:
            calculatedState = MQTTPublishDone;
 800f266:	230a      	movs	r3, #10
 800f268:	73fb      	strb	r3, [r7, #15]
            break;
 800f26a:	e000      	b.n	800f26e <MQTT_CalculateStateAck+0x7a>

        default:
            /* No other ack type. */
            break;
 800f26c:	bf00      	nop
    }

    /* Sanity check, make sure ack and QoS agree. */
    if( qosValid == false )
 800f26e:	7bbb      	ldrb	r3, [r7, #14]
 800f270:	f083 0301 	eor.w	r3, r3, #1
 800f274:	b2db      	uxtb	r3, r3
 800f276:	2b00      	cmp	r3, #0
 800f278:	d001      	beq.n	800f27e <MQTT_CalculateStateAck+0x8a>
    {
        calculatedState = MQTTStateNull;
 800f27a:	2300      	movs	r3, #0
 800f27c:	73fb      	strb	r3, [r7, #15]
    }

    return calculatedState;
 800f27e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f280:	4618      	mov	r0, r3
 800f282:	3714      	adds	r7, #20
 800f284:	46bd      	mov	sp, r7
 800f286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28a:	4770      	bx	lr

0800f28c <updateStateAck>:
                                    size_t maxRecordCount,
                                    size_t recordIndex,
                                    uint16_t packetId,
                                    MQTTPublishState_t currentState,
                                    MQTTPublishState_t newState )
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b088      	sub	sp, #32
 800f290:	af02      	add	r7, sp, #8
 800f292:	60f8      	str	r0, [r7, #12]
 800f294:	60b9      	str	r1, [r7, #8]
 800f296:	607a      	str	r2, [r7, #4]
 800f298:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTIllegalState;
 800f29a:	2308      	movs	r3, #8
 800f29c:	75fb      	strb	r3, [r7, #23]
    bool shouldDeleteRecord = false;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	75bb      	strb	r3, [r7, #22]
    bool isTransitionValid = false;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	757b      	strb	r3, [r7, #21]

    assert( records != NULL );
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d106      	bne.n	800f2ba <updateStateAck+0x2e>
 800f2ac:	4b22      	ldr	r3, [pc, #136]	; (800f338 <updateStateAck+0xac>)
 800f2ae:	4a23      	ldr	r2, [pc, #140]	; (800f33c <updateStateAck+0xb0>)
 800f2b0:	f240 21cf 	movw	r1, #719	; 0x2cf
 800f2b4:	4822      	ldr	r0, [pc, #136]	; (800f340 <updateStateAck+0xb4>)
 800f2b6:	f003 fe19 	bl	8012eec <__assert_func>

    /* Record to be deleted if the state transition is completed or if a PUBREC
     * is received for an outgoing QoS2 publish. When a PUBREC is received,
     * record is deleted and added back to the end of the records to maintain
     * ordering for PUBRELs. */
    shouldDeleteRecord = ( newState == MQTTPublishDone ) || ( newState == MQTTPubRelSend );
 800f2ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f2be:	2b0a      	cmp	r3, #10
 800f2c0:	d003      	beq.n	800f2ca <updateStateAck+0x3e>
 800f2c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f2c6:	2b04      	cmp	r3, #4
 800f2c8:	d101      	bne.n	800f2ce <updateStateAck+0x42>
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	e000      	b.n	800f2d0 <updateStateAck+0x44>
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	75bb      	strb	r3, [r7, #22]
 800f2d2:	7dbb      	ldrb	r3, [r7, #22]
 800f2d4:	f003 0301 	and.w	r3, r3, #1
 800f2d8:	75bb      	strb	r3, [r7, #22]
    isTransitionValid = validateTransitionAck( currentState, newState );
 800f2da:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800f2de:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f2e2:	4611      	mov	r1, r2
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7ff fcc3 	bl	800ec70 <validateTransitionAck>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	757b      	strb	r3, [r7, #21]

    if( isTransitionValid == true )
 800f2ee:	7d7b      	ldrb	r3, [r7, #21]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d01c      	beq.n	800f32e <updateStateAck+0xa2>
    {
        status = MQTTSuccess;
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	75fb      	strb	r3, [r7, #23]

        /* Update record for acks. When sending or receiving acks for packets that
         * are resent during a session reestablishment, the new state and
         * current state can be the same. No update of record required in that case. */
        if( currentState != newState )
 800f2f8:	f897 2020 	ldrb.w	r2, [r7, #32]
 800f2fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f300:	429a      	cmp	r2, r3
 800f302:	d014      	beq.n	800f32e <updateStateAck+0xa2>
        {
            updateRecord( records,
 800f304:	7dbb      	ldrb	r3, [r7, #22]
 800f306:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800f30a:	6879      	ldr	r1, [r7, #4]
 800f30c:	68f8      	ldr	r0, [r7, #12]
 800f30e:	f7ff fe8d 	bl	800f02c <updateRecord>

            /* For QoS2 messages, in order to preserve the message ordering, when
             * a PUBREC is received for an outgoing publish, the record should be
             * moved to the last. This move will help preserve the order in which
             * a PUBREL needs to be resent in case of a session reestablishment. */
            if( newState == MQTTPubRelSend )
 800f312:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f316:	2b04      	cmp	r3, #4
 800f318:	d109      	bne.n	800f32e <updateStateAck+0xa2>
            {
                status = addRecord( records,
 800f31a:	887a      	ldrh	r2, [r7, #2]
 800f31c:	2304      	movs	r3, #4
 800f31e:	9300      	str	r3, [sp, #0]
 800f320:	2302      	movs	r3, #2
 800f322:	68b9      	ldr	r1, [r7, #8]
 800f324:	68f8      	ldr	r0, [r7, #12]
 800f326:	f7ff fdfd 	bl	800ef24 <addRecord>
 800f32a:	4603      	mov	r3, r0
 800f32c:	75fb      	strb	r3, [r7, #23]
        LogError( ( "Invalid transition from state %s to state %s.",
                    MQTT_State_strerror( currentState ),
                    MQTT_State_strerror( newState ) ) );
    }

    return status;
 800f32e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f330:	4618      	mov	r0, r3
 800f332:	3718      	adds	r7, #24
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}
 800f338:	080177c8 	.word	0x080177c8
 800f33c:	08017ddc 	.word	0x08017ddc
 800f340:	08017798 	.word	0x08017798

0800f344 <updateStatePublish>:
                                        uint16_t packetId,
                                        MQTTStateOperation_t opType,
                                        MQTTQoS_t qos,
                                        MQTTPublishState_t currentState,
                                        MQTTPublishState_t newState )
{
 800f344:	b590      	push	{r4, r7, lr}
 800f346:	b089      	sub	sp, #36	; 0x24
 800f348:	af02      	add	r7, sp, #8
 800f34a:	60f8      	str	r0, [r7, #12]
 800f34c:	60b9      	str	r1, [r7, #8]
 800f34e:	4611      	mov	r1, r2
 800f350:	461a      	mov	r2, r3
 800f352:	460b      	mov	r3, r1
 800f354:	80fb      	strh	r3, [r7, #6]
 800f356:	4613      	mov	r3, r2
 800f358:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTSuccess;
 800f35a:	2300      	movs	r3, #0
 800f35c:	75fb      	strb	r3, [r7, #23]
    bool isTransitionValid = false;
 800f35e:	2300      	movs	r3, #0
 800f360:	75bb      	strb	r3, [r7, #22]

    assert( pMqttContext != NULL );
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d106      	bne.n	800f376 <updateStatePublish+0x32>
 800f368:	4b29      	ldr	r3, [pc, #164]	; (800f410 <updateStatePublish+0xcc>)
 800f36a:	4a2a      	ldr	r2, [pc, #168]	; (800f414 <updateStatePublish+0xd0>)
 800f36c:	f44f 7143 	mov.w	r1, #780	; 0x30c
 800f370:	4829      	ldr	r0, [pc, #164]	; (800f418 <updateStatePublish+0xd4>)
 800f372:	f003 fdbb 	bl	8012eec <__assert_func>
    assert( packetId != MQTT_PACKET_ID_INVALID );
 800f376:	88fb      	ldrh	r3, [r7, #6]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d106      	bne.n	800f38a <updateStatePublish+0x46>
 800f37c:	4b27      	ldr	r3, [pc, #156]	; (800f41c <updateStatePublish+0xd8>)
 800f37e:	4a25      	ldr	r2, [pc, #148]	; (800f414 <updateStatePublish+0xd0>)
 800f380:	f240 310d 	movw	r1, #781	; 0x30d
 800f384:	4824      	ldr	r0, [pc, #144]	; (800f418 <updateStatePublish+0xd4>)
 800f386:	f003 fdb1 	bl	8012eec <__assert_func>
    assert( qos != MQTTQoS0 );
 800f38a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d106      	bne.n	800f3a0 <updateStatePublish+0x5c>
 800f392:	4b23      	ldr	r3, [pc, #140]	; (800f420 <updateStatePublish+0xdc>)
 800f394:	4a1f      	ldr	r2, [pc, #124]	; (800f414 <updateStatePublish+0xd0>)
 800f396:	f240 310e 	movw	r1, #782	; 0x30e
 800f39a:	481f      	ldr	r0, [pc, #124]	; (800f418 <updateStatePublish+0xd4>)
 800f39c:	f003 fda6 	bl	8012eec <__assert_func>

    /* This will always succeed for an incoming publish. This is due to the fact
     * that the passed in currentState must be MQTTStateNull, since
     * #MQTT_UpdateStatePublish does not perform a lookup for receives. */
    isTransitionValid = validateTransitionPublish( currentState, newState, opType, qos );
 800f3a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f3a4:	797a      	ldrb	r2, [r7, #5]
 800f3a6:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800f3aa:	f897 002c 	ldrb.w	r0, [r7, #44]	; 0x2c
 800f3ae:	f7ff fbf9 	bl	800eba4 <validateTransitionPublish>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	75bb      	strb	r3, [r7, #22]

    if( isTransitionValid == true )
 800f3b6:	7dbb      	ldrb	r3, [r7, #22]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d021      	beq.n	800f400 <updateStatePublish+0xbc>
    {
        /* addRecord will check for collisions. */
        if( opType == MQTT_RECEIVE )
 800f3bc:	797b      	ldrb	r3, [r7, #5]
 800f3be:	2b01      	cmp	r3, #1
 800f3c0:	d10f      	bne.n	800f3e2 <updateStatePublish+0x9e>
        {
            status = addRecord( pMqttContext->incomingPublishRecords,
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	6858      	ldr	r0, [r3, #4]
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	68d9      	ldr	r1, [r3, #12]
 800f3ca:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 800f3ce:	88fa      	ldrh	r2, [r7, #6]
 800f3d0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800f3d4:	9300      	str	r3, [sp, #0]
 800f3d6:	4623      	mov	r3, r4
 800f3d8:	f7ff fda4 	bl	800ef24 <addRecord>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	75fb      	strb	r3, [r7, #23]
 800f3e0:	e010      	b.n	800f404 <updateStatePublish+0xc0>
        /* Send operation. */
        else
        {
            /* Skip updating record when publish is resend and no state
             * update is required. */
            if( currentState != newState )
 800f3e2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800f3e6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800f3ea:	429a      	cmp	r2, r3
 800f3ec:	d00a      	beq.n	800f404 <updateStatePublish+0xc0>
            {
                updateRecord( pMqttContext->outgoingPublishRecords,
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	6818      	ldr	r0, [r3, #0]
 800f3f2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	68b9      	ldr	r1, [r7, #8]
 800f3fa:	f7ff fe17 	bl	800f02c <updateRecord>
 800f3fe:	e001      	b.n	800f404 <updateStatePublish+0xc0>
            }
        }
    }
    else
    {
        status = MQTTIllegalState;
 800f400:	2308      	movs	r3, #8
 800f402:	75fb      	strb	r3, [r7, #23]
        LogError( ( "Invalid transition from state %s to state %s.",
                    MQTT_State_strerror( currentState ),
                    MQTT_State_strerror( newState ) ) );
    }

    return status;
 800f404:	7dfb      	ldrb	r3, [r7, #23]
}
 800f406:	4618      	mov	r0, r3
 800f408:	371c      	adds	r7, #28
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd90      	pop	{r4, r7, pc}
 800f40e:	bf00      	nop
 800f410:	080177e8 	.word	0x080177e8
 800f414:	08017dec 	.word	0x08017dec
 800f418:	08017798 	.word	0x08017798
 800f41c:	08017774 	.word	0x08017774
 800f420:	080177d8 	.word	0x080177d8

0800f424 <MQTT_ReserveState>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ReserveState( const MQTTContext_t * pMqttContext,
                                uint16_t packetId,
                                MQTTQoS_t qos )
{
 800f424:	b590      	push	{r4, r7, lr}
 800f426:	b087      	sub	sp, #28
 800f428:	af02      	add	r7, sp, #8
 800f42a:	6078      	str	r0, [r7, #4]
 800f42c:	460b      	mov	r3, r1
 800f42e:	807b      	strh	r3, [r7, #2]
 800f430:	4613      	mov	r3, r2
 800f432:	707b      	strb	r3, [r7, #1]
    MQTTStatus_t status = MQTTSuccess;
 800f434:	2300      	movs	r3, #0
 800f436:	73fb      	strb	r3, [r7, #15]

    if( qos == MQTTQoS0 )
 800f438:	787b      	ldrb	r3, [r7, #1]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d102      	bne.n	800f444 <MQTT_ReserveState+0x20>
    {
        status = MQTTSuccess;
 800f43e:	2300      	movs	r3, #0
 800f440:	73fb      	strb	r3, [r7, #15]
 800f442:	e014      	b.n	800f46e <MQTT_ReserveState+0x4a>
    }
    else if( ( packetId == MQTT_PACKET_ID_INVALID ) || ( pMqttContext == NULL ) )
 800f444:	887b      	ldrh	r3, [r7, #2]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d002      	beq.n	800f450 <MQTT_ReserveState+0x2c>
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d102      	bne.n	800f456 <MQTT_ReserveState+0x32>
    {
        status = MQTTBadParameter;
 800f450:	2301      	movs	r3, #1
 800f452:	73fb      	strb	r3, [r7, #15]
 800f454:	e00b      	b.n	800f46e <MQTT_ReserveState+0x4a>
    }
    else
    {
        /* Collisions are detected when adding the record. */
        status = addRecord( pMqttContext->outgoingPublishRecords,
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6818      	ldr	r0, [r3, #0]
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6899      	ldr	r1, [r3, #8]
 800f45e:	787b      	ldrb	r3, [r7, #1]
 800f460:	887a      	ldrh	r2, [r7, #2]
 800f462:	2401      	movs	r4, #1
 800f464:	9400      	str	r4, [sp, #0]
 800f466:	f7ff fd5d 	bl	800ef24 <addRecord>
 800f46a:	4603      	mov	r3, r0
 800f46c:	73fb      	strb	r3, [r7, #15]
                            packetId,
                            qos,
                            MQTTPublishSend );
    }

    return status;
 800f46e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f470:	4618      	mov	r0, r3
 800f472:	3714      	adds	r7, #20
 800f474:	46bd      	mov	sp, r7
 800f476:	bd90      	pop	{r4, r7, pc}

0800f478 <MQTT_CalculateStatePublish>:

/*-----------------------------------------------------------*/

MQTTPublishState_t MQTT_CalculateStatePublish( MQTTStateOperation_t opType,
                                               MQTTQoS_t qos )
{
 800f478:	b480      	push	{r7}
 800f47a:	b085      	sub	sp, #20
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	4603      	mov	r3, r0
 800f480:	460a      	mov	r2, r1
 800f482:	71fb      	strb	r3, [r7, #7]
 800f484:	4613      	mov	r3, r2
 800f486:	71bb      	strb	r3, [r7, #6]
    MQTTPublishState_t calculatedState = MQTTStateNull;
 800f488:	2300      	movs	r3, #0
 800f48a:	73fb      	strb	r3, [r7, #15]

    switch( qos )
 800f48c:	79bb      	ldrb	r3, [r7, #6]
 800f48e:	2b02      	cmp	r3, #2
 800f490:	d011      	beq.n	800f4b6 <MQTT_CalculateStatePublish+0x3e>
 800f492:	2b02      	cmp	r3, #2
 800f494:	dc17      	bgt.n	800f4c6 <MQTT_CalculateStatePublish+0x4e>
 800f496:	2b00      	cmp	r3, #0
 800f498:	d002      	beq.n	800f4a0 <MQTT_CalculateStatePublish+0x28>
 800f49a:	2b01      	cmp	r3, #1
 800f49c:	d003      	beq.n	800f4a6 <MQTT_CalculateStatePublish+0x2e>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRecPending : MQTTPubRecSend;
            break;

        default:
            /* No other QoS values. */
            break;
 800f49e:	e012      	b.n	800f4c6 <MQTT_CalculateStatePublish+0x4e>
            calculatedState = MQTTPublishDone;
 800f4a0:	230a      	movs	r3, #10
 800f4a2:	73fb      	strb	r3, [r7, #15]
            break;
 800f4a4:	e010      	b.n	800f4c8 <MQTT_CalculateStatePublish+0x50>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubAckPending : MQTTPubAckSend;
 800f4a6:	79fb      	ldrb	r3, [r7, #7]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d101      	bne.n	800f4b0 <MQTT_CalculateStatePublish+0x38>
 800f4ac:	2306      	movs	r3, #6
 800f4ae:	e000      	b.n	800f4b2 <MQTT_CalculateStatePublish+0x3a>
 800f4b0:	2302      	movs	r3, #2
 800f4b2:	73fb      	strb	r3, [r7, #15]
            break;
 800f4b4:	e008      	b.n	800f4c8 <MQTT_CalculateStatePublish+0x50>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRecPending : MQTTPubRecSend;
 800f4b6:	79fb      	ldrb	r3, [r7, #7]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d101      	bne.n	800f4c0 <MQTT_CalculateStatePublish+0x48>
 800f4bc:	2307      	movs	r3, #7
 800f4be:	e000      	b.n	800f4c2 <MQTT_CalculateStatePublish+0x4a>
 800f4c0:	2303      	movs	r3, #3
 800f4c2:	73fb      	strb	r3, [r7, #15]
            break;
 800f4c4:	e000      	b.n	800f4c8 <MQTT_CalculateStatePublish+0x50>
            break;
 800f4c6:	bf00      	nop
    }

    return calculatedState;
 800f4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3714      	adds	r7, #20
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d4:	4770      	bx	lr

0800f4d6 <MQTT_UpdateStatePublish>:
MQTTStatus_t MQTT_UpdateStatePublish( const MQTTContext_t * pMqttContext,
                                      uint16_t packetId,
                                      MQTTStateOperation_t opType,
                                      MQTTQoS_t qos,
                                      MQTTPublishState_t * pNewState )
{
 800f4d6:	b590      	push	{r4, r7, lr}
 800f4d8:	b08b      	sub	sp, #44	; 0x2c
 800f4da:	af04      	add	r7, sp, #16
 800f4dc:	6078      	str	r0, [r7, #4]
 800f4de:	4608      	mov	r0, r1
 800f4e0:	4611      	mov	r1, r2
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	807b      	strh	r3, [r7, #2]
 800f4e8:	460b      	mov	r3, r1
 800f4ea:	707b      	strb	r3, [r7, #1]
 800f4ec:	4613      	mov	r3, r2
 800f4ee:	703b      	strb	r3, [r7, #0]
    MQTTPublishState_t newState = MQTTStateNull;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	73fb      	strb	r3, [r7, #15]
    MQTTPublishState_t currentState = MQTTStateNull;
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	73bb      	strb	r3, [r7, #14]
    MQTTStatus_t mqttStatus = MQTTSuccess;
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	75fb      	strb	r3, [r7, #23]
    size_t recordIndex = MQTT_INVALID_STATE_COUNT;
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	43db      	mvns	r3, r3
 800f500:	613b      	str	r3, [r7, #16]
    MQTTQoS_t foundQoS = MQTTQoS0;
 800f502:	2300      	movs	r3, #0
 800f504:	737b      	strb	r3, [r7, #13]

    if( ( pMqttContext == NULL ) || ( pNewState == NULL ) )
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d002      	beq.n	800f512 <MQTT_UpdateStatePublish+0x3c>
 800f50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d102      	bne.n	800f518 <MQTT_UpdateStatePublish+0x42>
    {
        LogError( ( "Argument cannot be NULL: pMqttContext=%p, pNewState=%p",
                    ( void * ) pMqttContext,
                    ( void * ) pNewState ) );

        mqttStatus = MQTTBadParameter;
 800f512:	2301      	movs	r3, #1
 800f514:	75fb      	strb	r3, [r7, #23]
 800f516:	e028      	b.n	800f56a <MQTT_UpdateStatePublish+0x94>
    }
    else if( qos == MQTTQoS0 )
 800f518:	783b      	ldrb	r3, [r7, #0]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d103      	bne.n	800f526 <MQTT_UpdateStatePublish+0x50>
    {
        /* QoS 0 publish. Do nothing. */
        *pNewState = MQTTPublishDone;
 800f51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f520:	220a      	movs	r2, #10
 800f522:	701a      	strb	r2, [r3, #0]
 800f524:	e021      	b.n	800f56a <MQTT_UpdateStatePublish+0x94>
    }
    else if( packetId == MQTT_PACKET_ID_INVALID )
 800f526:	887b      	ldrh	r3, [r7, #2]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d102      	bne.n	800f532 <MQTT_UpdateStatePublish+0x5c>
    {
        /* Publishes > QoS 0 need a valid packet ID. */
        mqttStatus = MQTTBadParameter;
 800f52c:	2301      	movs	r3, #1
 800f52e:	75fb      	strb	r3, [r7, #23]
 800f530:	e01b      	b.n	800f56a <MQTT_UpdateStatePublish+0x94>
    }
    else if( opType == MQTT_SEND )
 800f532:	787b      	ldrb	r3, [r7, #1]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d118      	bne.n	800f56a <MQTT_UpdateStatePublish+0x94>
    {
        /* Search record for entry so we can check QoS. */
        recordIndex = findInRecord( pMqttContext->outgoingPublishRecords,
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6818      	ldr	r0, [r3, #0]
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	6899      	ldr	r1, [r3, #8]
 800f540:	f107 040d 	add.w	r4, r7, #13
 800f544:	887a      	ldrh	r2, [r7, #2]
 800f546:	f107 030e 	add.w	r3, r7, #14
 800f54a:	9300      	str	r3, [sp, #0]
 800f54c:	4623      	mov	r3, r4
 800f54e:	f7ff fc31 	bl	800edb4 <findInRecord>
 800f552:	6138      	str	r0, [r7, #16]
                                    pMqttContext->outgoingPublishRecordMaxCount,
                                    packetId,
                                    &foundQoS,
                                    &currentState );

        if( ( recordIndex == MQTT_INVALID_STATE_COUNT ) || ( foundQoS != qos ) )
 800f554:	2300      	movs	r3, #0
 800f556:	43db      	mvns	r3, r3
 800f558:	693a      	ldr	r2, [r7, #16]
 800f55a:	429a      	cmp	r2, r3
 800f55c:	d003      	beq.n	800f566 <MQTT_UpdateStatePublish+0x90>
 800f55e:	7b7b      	ldrb	r3, [r7, #13]
 800f560:	783a      	ldrb	r2, [r7, #0]
 800f562:	429a      	cmp	r2, r3
 800f564:	d001      	beq.n	800f56a <MQTT_UpdateStatePublish+0x94>
        {
            /* Entry should match with supplied QoS. */
            mqttStatus = MQTTBadParameter;
 800f566:	2301      	movs	r3, #1
 800f568:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* QoS 1 or 2 receive. Nothing to be done. */
    }

    if( ( qos != MQTTQoS0 ) && ( mqttStatus == MQTTSuccess ) )
 800f56a:	783b      	ldrb	r3, [r7, #0]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d020      	beq.n	800f5b2 <MQTT_UpdateStatePublish+0xdc>
 800f570:	7dfb      	ldrb	r3, [r7, #23]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d11d      	bne.n	800f5b2 <MQTT_UpdateStatePublish+0xdc>
    {
        newState = MQTT_CalculateStatePublish( opType, qos );
 800f576:	783a      	ldrb	r2, [r7, #0]
 800f578:	787b      	ldrb	r3, [r7, #1]
 800f57a:	4611      	mov	r1, r2
 800f57c:	4618      	mov	r0, r3
 800f57e:	f7ff ff7b 	bl	800f478 <MQTT_CalculateStatePublish>
 800f582:	4603      	mov	r3, r0
 800f584:	73fb      	strb	r3, [r7, #15]
        /* Validate state transition and update state records. */
        mqttStatus = updateStatePublish( pMqttContext,
 800f586:	7bbb      	ldrb	r3, [r7, #14]
 800f588:	7878      	ldrb	r0, [r7, #1]
 800f58a:	8879      	ldrh	r1, [r7, #2]
 800f58c:	7bfa      	ldrb	r2, [r7, #15]
 800f58e:	9202      	str	r2, [sp, #8]
 800f590:	9301      	str	r3, [sp, #4]
 800f592:	783b      	ldrb	r3, [r7, #0]
 800f594:	9300      	str	r3, [sp, #0]
 800f596:	4603      	mov	r3, r0
 800f598:	460a      	mov	r2, r1
 800f59a:	6939      	ldr	r1, [r7, #16]
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f7ff fed1 	bl	800f344 <updateStatePublish>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	75fb      	strb	r3, [r7, #23]
                                         qos,
                                         currentState,
                                         newState );

        /* Update output parameter on success. */
        if( mqttStatus == MQTTSuccess )
 800f5a6:	7dfb      	ldrb	r3, [r7, #23]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d102      	bne.n	800f5b2 <MQTT_UpdateStatePublish+0xdc>
        {
            *pNewState = newState;
 800f5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ae:	7bfa      	ldrb	r2, [r7, #15]
 800f5b0:	701a      	strb	r2, [r3, #0]
        }
    }

    return mqttStatus;
 800f5b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	371c      	adds	r7, #28
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd90      	pop	{r4, r7, pc}

0800f5bc <MQTT_UpdateStateAck>:
MQTTStatus_t MQTT_UpdateStateAck( const MQTTContext_t * pMqttContext,
                                  uint16_t packetId,
                                  MQTTPubAckType_t packetType,
                                  MQTTStateOperation_t opType,
                                  MQTTPublishState_t * pNewState )
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b08a      	sub	sp, #40	; 0x28
 800f5c0:	af02      	add	r7, sp, #8
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	4608      	mov	r0, r1
 800f5c6:	4611      	mov	r1, r2
 800f5c8:	461a      	mov	r2, r3
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	807b      	strh	r3, [r7, #2]
 800f5ce:	460b      	mov	r3, r1
 800f5d0:	707b      	strb	r3, [r7, #1]
 800f5d2:	4613      	mov	r3, r2
 800f5d4:	703b      	strb	r3, [r7, #0]
    MQTTPublishState_t newState = MQTTStateNull;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	74bb      	strb	r3, [r7, #18]
    MQTTPublishState_t currentState = MQTTStateNull;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	743b      	strb	r3, [r7, #16]
    bool isOutgoingPublish = isPublishOutgoing( packetType, opType );
 800f5de:	783a      	ldrb	r2, [r7, #0]
 800f5e0:	787b      	ldrb	r3, [r7, #1]
 800f5e2:	4611      	mov	r1, r2
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f7ff fbb7 	bl	800ed58 <isPublishOutgoing>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	747b      	strb	r3, [r7, #17]
    MQTTQoS_t qos = MQTTQoS0;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	73fb      	strb	r3, [r7, #15]
    size_t maxRecordCount = MQTT_INVALID_STATE_COUNT;
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	43db      	mvns	r3, r3
 800f5f6:	61fb      	str	r3, [r7, #28]
    size_t recordIndex = MQTT_INVALID_STATE_COUNT;
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	43db      	mvns	r3, r3
 800f5fc:	61bb      	str	r3, [r7, #24]

    MQTTPubAckInfo_t * records = NULL;
 800f5fe:	2300      	movs	r3, #0
 800f600:	617b      	str	r3, [r7, #20]
    MQTTStatus_t status = MQTTBadResponse;
 800f602:	2305      	movs	r3, #5
 800f604:	74fb      	strb	r3, [r7, #19]

    if( ( pMqttContext == NULL ) || ( pNewState == NULL ) )
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d002      	beq.n	800f612 <MQTT_UpdateStateAck+0x56>
 800f60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d102      	bne.n	800f618 <MQTT_UpdateStateAck+0x5c>
    {
        LogError( ( "Argument cannot be NULL: pMqttContext=%p, pNewState=%p.",
                    ( void * ) pMqttContext,
                    ( void * ) pNewState ) );
        status = MQTTBadParameter;
 800f612:	2301      	movs	r3, #1
 800f614:	74fb      	strb	r3, [r7, #19]
 800f616:	e027      	b.n	800f668 <MQTT_UpdateStateAck+0xac>
    }
    else if( packetId == MQTT_PACKET_ID_INVALID )
 800f618:	887b      	ldrh	r3, [r7, #2]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d102      	bne.n	800f624 <MQTT_UpdateStateAck+0x68>
    {
        LogError( ( "Packet ID must be nonzero." ) );
        status = MQTTBadParameter;
 800f61e:	2301      	movs	r3, #1
 800f620:	74fb      	strb	r3, [r7, #19]
 800f622:	e021      	b.n	800f668 <MQTT_UpdateStateAck+0xac>
    }
    else if( packetType > MQTTPubcomp )
 800f624:	787b      	ldrb	r3, [r7, #1]
 800f626:	2b03      	cmp	r3, #3
 800f628:	d902      	bls.n	800f630 <MQTT_UpdateStateAck+0x74>
    {
        LogError( ( "Invalid packet type %u.", ( unsigned int ) packetType ) );
        status = MQTTBadParameter;
 800f62a:	2301      	movs	r3, #1
 800f62c:	74fb      	strb	r3, [r7, #19]
 800f62e:	e01b      	b.n	800f668 <MQTT_UpdateStateAck+0xac>
    }
    else
    {
        if( isOutgoingPublish == true )
 800f630:	7c7b      	ldrb	r3, [r7, #17]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d006      	beq.n	800f644 <MQTT_UpdateStateAck+0x88>
        {
            records = pMqttContext->outgoingPublishRecords;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	617b      	str	r3, [r7, #20]
            maxRecordCount = pMqttContext->outgoingPublishRecordMaxCount;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	689b      	ldr	r3, [r3, #8]
 800f640:	61fb      	str	r3, [r7, #28]
 800f642:	e005      	b.n	800f650 <MQTT_UpdateStateAck+0x94>
        }
        else
        {
            records = pMqttContext->incomingPublishRecords;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	685b      	ldr	r3, [r3, #4]
 800f648:	617b      	str	r3, [r7, #20]
            maxRecordCount = pMqttContext->incomingPublishRecordMaxCount;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	68db      	ldr	r3, [r3, #12]
 800f64e:	61fb      	str	r3, [r7, #28]
        }

        recordIndex = findInRecord( records,
 800f650:	f107 010f 	add.w	r1, r7, #15
 800f654:	887a      	ldrh	r2, [r7, #2]
 800f656:	f107 0310 	add.w	r3, r7, #16
 800f65a:	9300      	str	r3, [sp, #0]
 800f65c:	460b      	mov	r3, r1
 800f65e:	69f9      	ldr	r1, [r7, #28]
 800f660:	6978      	ldr	r0, [r7, #20]
 800f662:	f7ff fba7 	bl	800edb4 <findInRecord>
 800f666:	61b8      	str	r0, [r7, #24]
                                    packetId,
                                    &qos,
                                    &currentState );
    }

    if( recordIndex != MQTT_INVALID_STATE_COUNT )
 800f668:	2300      	movs	r3, #0
 800f66a:	43db      	mvns	r3, r3
 800f66c:	69ba      	ldr	r2, [r7, #24]
 800f66e:	429a      	cmp	r2, r3
 800f670:	d01a      	beq.n	800f6a8 <MQTT_UpdateStateAck+0xec>
    {
        newState = MQTT_CalculateStateAck( packetType, opType, qos );
 800f672:	7bfa      	ldrb	r2, [r7, #15]
 800f674:	7839      	ldrb	r1, [r7, #0]
 800f676:	787b      	ldrb	r3, [r7, #1]
 800f678:	4618      	mov	r0, r3
 800f67a:	f7ff fdbb 	bl	800f1f4 <MQTT_CalculateStateAck>
 800f67e:	4603      	mov	r3, r0
 800f680:	74bb      	strb	r3, [r7, #18]

        /* Validate state transition and update state record. */
        status = updateStateAck( records,
 800f682:	7c3b      	ldrb	r3, [r7, #16]
 800f684:	8879      	ldrh	r1, [r7, #2]
 800f686:	7cba      	ldrb	r2, [r7, #18]
 800f688:	9201      	str	r2, [sp, #4]
 800f68a:	9300      	str	r3, [sp, #0]
 800f68c:	460b      	mov	r3, r1
 800f68e:	69ba      	ldr	r2, [r7, #24]
 800f690:	69f9      	ldr	r1, [r7, #28]
 800f692:	6978      	ldr	r0, [r7, #20]
 800f694:	f7ff fdfa 	bl	800f28c <updateStateAck>
 800f698:	4603      	mov	r3, r0
 800f69a:	74fb      	strb	r3, [r7, #19]
                                 packetId,
                                 currentState,
                                 newState );

        /* Update the output parameter. */
        if( status == MQTTSuccess )
 800f69c:	7cfb      	ldrb	r3, [r7, #19]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d102      	bne.n	800f6a8 <MQTT_UpdateStateAck+0xec>
        {
            *pNewState = newState;
 800f6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6a4:	7cba      	ldrb	r2, [r7, #18]
 800f6a6:	701a      	strb	r2, [r3, #0]
    {
        LogError( ( "No matching record found for publish: PacketId=%u.",
                    ( unsigned int ) packetId ) );
    }

    return status;
 800f6a8:	7cfb      	ldrb	r3, [r7, #19]
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	3720      	adds	r7, #32
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}

0800f6b2 <MQTT_PubrelToResend>:
/*-----------------------------------------------------------*/

uint16_t MQTT_PubrelToResend( const MQTTContext_t * pMqttContext,
                              MQTTStateCursor_t * pCursor,
                              MQTTPublishState_t * pState )
{
 800f6b2:	b580      	push	{r7, lr}
 800f6b4:	b086      	sub	sp, #24
 800f6b6:	af00      	add	r7, sp, #0
 800f6b8:	60f8      	str	r0, [r7, #12]
 800f6ba:	60b9      	str	r1, [r7, #8]
 800f6bc:	607a      	str	r2, [r7, #4]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	82fb      	strh	r3, [r7, #22]
    uint16_t searchStates = 0U;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	82bb      	strh	r3, [r7, #20]

    /* Validate arguments. */
    if( ( pMqttContext == NULL ) || ( pCursor == NULL ) || ( pState == NULL ) )
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d01b      	beq.n	800f704 <MQTT_PubrelToResend+0x52>
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d018      	beq.n	800f704 <MQTT_PubrelToResend+0x52>
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d015      	beq.n	800f704 <MQTT_PubrelToResend+0x52>
    }
    else
    {
        /* PUBREL for packets in state #MQTTPubCompPending and #MQTTPubRelSend
         * would need to be resent when a session is reestablished.*/
        UINT16_SET_BIT( searchStates, MQTTPubCompPending );
 800f6d8:	8abb      	ldrh	r3, [r7, #20]
 800f6da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f6de:	82bb      	strh	r3, [r7, #20]
        UINT16_SET_BIT( searchStates, MQTTPubRelSend );
 800f6e0:	8abb      	ldrh	r3, [r7, #20]
 800f6e2:	f043 0310 	orr.w	r3, r3, #16
 800f6e6:	82bb      	strh	r3, [r7, #20]
        packetId = stateSelect( pMqttContext, searchStates, pCursor );
 800f6e8:	8abb      	ldrh	r3, [r7, #20]
 800f6ea:	68ba      	ldr	r2, [r7, #8]
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	68f8      	ldr	r0, [r7, #12]
 800f6f0:	f7ff fcd8 	bl	800f0a4 <stateSelect>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	82fb      	strh	r3, [r7, #22]

        /* The state needs to be in #MQTTPubRelSend for sending PUBREL. */
        if( packetId != MQTT_PACKET_ID_INVALID )
 800f6f8:	8afb      	ldrh	r3, [r7, #22]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d002      	beq.n	800f704 <MQTT_PubrelToResend+0x52>
        {
            *pState = MQTTPubRelSend;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	2204      	movs	r2, #4
 800f702:	701a      	strb	r2, [r3, #0]
        }
    }

    return packetId;
 800f704:	8afb      	ldrh	r3, [r7, #22]
}
 800f706:	4618      	mov	r0, r3
 800f708:	3718      	adds	r7, #24
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}
	...

0800f710 <transport_recv>:
#define min(a,b) ((a) < (b) ? (a) : (b))

int32_t transport_recv( NetworkContext_t * pNetworkContext,
                        void * pBuffer,
                        size_t bytesToRecv )
{
 800f710:	b580      	push	{r7, lr}
 800f712:	f5ad 6d87 	sub.w	sp, sp, #1080	; 0x438
 800f716:	af02      	add	r7, sp, #8
 800f718:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f71c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800f720:	6018      	str	r0, [r3, #0]
 800f722:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f726:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800f72a:	6019      	str	r1, [r3, #0]
 800f72c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f730:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800f734:	601a      	str	r2, [r3, #0]
    int32_t socketStatus = 1;
 800f736:	2301      	movs	r3, #1
 800f738:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
    uint16_t recvlen;
	uint8_t recvdata[1024];

    ES_WIFI_Conn_t conn;

	conn.Number = pNetworkContext->socket;
 800f73c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f740:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	781a      	ldrb	r2, [r3, #0]
 800f748:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f74c:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800f750:	705a      	strb	r2, [r3, #1]
	conn.RemotePort = pNetworkContext->remote_port;
 800f752:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f756:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	88da      	ldrh	r2, [r3, #6]
 800f75e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f762:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800f766:	805a      	strh	r2, [r3, #2]
	conn.LocalPort = 0;
 800f768:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f76c:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800f770:	2200      	movs	r2, #0
 800f772:	809a      	strh	r2, [r3, #4]
	conn.Type = ES_WIFI_TCP_CONNECTION;
 800f774:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f778:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800f77c:	2200      	movs	r2, #0
 800f77e:	701a      	strb	r2, [r3, #0]
	conn.RemoteIP[0] = pNetworkContext->ipaddr[0];
 800f780:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f784:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	789a      	ldrb	r2, [r3, #2]
 800f78c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f790:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800f794:	719a      	strb	r2, [r3, #6]
	conn.RemoteIP[1] = pNetworkContext->ipaddr[1];
 800f796:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f79a:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	78da      	ldrb	r2, [r3, #3]
 800f7a2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f7a6:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800f7aa:	71da      	strb	r2, [r3, #7]
	conn.RemoteIP[2] = pNetworkContext->ipaddr[2];
 800f7ac:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f7b0:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	791a      	ldrb	r2, [r3, #4]
 800f7b8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f7bc:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800f7c0:	721a      	strb	r2, [r3, #8]
	conn.RemoteIP[3] = pNetworkContext->ipaddr[3];
 800f7c2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f7c6:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	795a      	ldrb	r2, [r3, #5]
 800f7ce:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f7d2:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800f7d6:	725a      	strb	r2, [r3, #9]

    if(!pNetworkContext->socket_open) {
 800f7d8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f7dc:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	785b      	ldrb	r3, [r3, #1]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d115      	bne.n	800f814 <transport_recv+0x104>
    	ret=ES_WIFI_StartClientConnection(&EsWifiObj, &conn);
 800f7e8:	f107 0314 	add.w	r3, r7, #20
 800f7ec:	4619      	mov	r1, r3
 800f7ee:	482a      	ldr	r0, [pc, #168]	; (800f898 <transport_recv+0x188>)
 800f7f0:	f7fb fc54 	bl	800b09c <ES_WIFI_StartClientConnection>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b

		if(ret!=ES_WIFI_STATUS_OK) {
 800f7fa:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d001      	beq.n	800f806 <transport_recv+0xf6>
			return 0;
 800f802:	2300      	movs	r3, #0
 800f804:	e042      	b.n	800f88c <transport_recv+0x17c>
		} else {
			pNetworkContext->socket_open=1;
 800f806:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f80a:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	2201      	movs	r2, #1
 800f812:	705a      	strb	r2, [r3, #1]
		}
    }

	ret=ES_WIFI_ReceiveData(&EsWifiObj,pNetworkContext->socket, pBuffer, bytesToRecv, &recvlen, 1000);
 800f814:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f818:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	7819      	ldrb	r1, [r3, #0]
 800f820:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f824:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	b298      	uxth	r0, r3
 800f82c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f830:	f5a3 6285 	sub.w	r2, r3, #1064	; 0x428
 800f834:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f838:	9301      	str	r3, [sp, #4]
 800f83a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800f83e:	9300      	str	r3, [sp, #0]
 800f840:	4603      	mov	r3, r0
 800f842:	6812      	ldr	r2, [r2, #0]
 800f844:	4814      	ldr	r0, [pc, #80]	; (800f898 <transport_recv+0x188>)
 800f846:	f7fb fdcf 	bl	800b3e8 <ES_WIFI_ReceiveData>
 800f84a:	4603      	mov	r3, r0
 800f84c:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b
	if(ret!=WIFI_STATUS_OK) {
 800f850:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 800f854:	2b00      	cmp	r3, #0
 800f856:	d00a      	beq.n	800f86e <transport_recv+0x15e>
		socketStatus=0;
 800f858:	2300      	movs	r3, #0
 800f85a:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
		pNetworkContext->socket_open=0;
 800f85e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f862:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	2200      	movs	r2, #0
 800f86a:	705a      	strb	r2, [r3, #1]
 800f86c:	e00c      	b.n	800f888 <transport_recv+0x178>
	} else {
		//log_transport('R',pBuffer,recvlen);
		recvdata[recvlen]=0;
 800f86e:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 800f872:	461a      	mov	r2, r3
 800f874:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f878:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800f87c:	2100      	movs	r1, #0
 800f87e:	5499      	strb	r1, [r3, r2]
		socketStatus=recvlen;
 800f880:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 800f884:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
	}

    return socketStatus;
 800f888:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
}
 800f88c:	4618      	mov	r0, r3
 800f88e:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}
 800f896:	bf00      	nop
 800f898:	20000e6c 	.word	0x20000e6c

0800f89c <transport_send>:

int32_t transport_send( NetworkContext_t * pNetworkContext,
                        const void * pBuffer,
                        size_t bytesToSend )
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b08e      	sub	sp, #56	; 0x38
 800f8a0:	af02      	add	r7, sp, #8
 800f8a2:	60f8      	str	r0, [r7, #12]
 800f8a4:	60b9      	str	r1, [r7, #8]
 800f8a6:	607a      	str	r2, [r7, #4]
    int32_t socketStatus=0;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    int16_t datasent;
    uint8_t ret;

    ES_WIFI_Conn_t conn;

	conn.Number = pNetworkContext->socket;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	757b      	strb	r3, [r7, #21]
	conn.RemotePort = pNetworkContext->remote_port;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	88db      	ldrh	r3, [r3, #6]
 800f8b6:	82fb      	strh	r3, [r7, #22]
	conn.LocalPort = 0;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	833b      	strh	r3, [r7, #24]
	conn.Type = ES_WIFI_TCP_CONNECTION;
 800f8bc:	2300      	movs	r3, #0
 800f8be:	753b      	strb	r3, [r7, #20]
	conn.RemoteIP[0] = pNetworkContext->ipaddr[0];
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	789b      	ldrb	r3, [r3, #2]
 800f8c4:	76bb      	strb	r3, [r7, #26]
	conn.RemoteIP[1] = pNetworkContext->ipaddr[1];
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	78db      	ldrb	r3, [r3, #3]
 800f8ca:	76fb      	strb	r3, [r7, #27]
	conn.RemoteIP[2] = pNetworkContext->ipaddr[2];
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	791b      	ldrb	r3, [r3, #4]
 800f8d0:	773b      	strb	r3, [r7, #28]
	conn.RemoteIP[3] = pNetworkContext->ipaddr[3];
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	795b      	ldrb	r3, [r3, #5]
 800f8d6:	777b      	strb	r3, [r7, #29]

    if(!pNetworkContext->socket_open) {
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	785b      	ldrb	r3, [r3, #1]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d111      	bne.n	800f904 <transport_send+0x68>
    	ret=ES_WIFI_StartClientConnection(&EsWifiObj, &conn);
 800f8e0:	f107 0314 	add.w	r3, r7, #20
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	481c      	ldr	r0, [pc, #112]	; (800f958 <transport_send+0xbc>)
 800f8e8:	f7fb fbd8 	bl	800b09c <ES_WIFI_StartClientConnection>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		if(ret!=ES_WIFI_STATUS_OK) {
 800f8f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d001      	beq.n	800f8fe <transport_send+0x62>
			return 0;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	e027      	b.n	800f94e <transport_send+0xb2>
		} else {
			pNetworkContext->socket_open=1;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	2201      	movs	r2, #1
 800f902:	705a      	strb	r2, [r3, #1]
		}
    }

	ret=ES_WIFI_SendData(&EsWifiObj,pNetworkContext->socket,pBuffer,bytesToSend,&datasent,1000);
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	7819      	ldrb	r1, [r3, #0]
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	b29a      	uxth	r2, r3
 800f90c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f910:	9301      	str	r3, [sp, #4]
 800f912:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f916:	9300      	str	r3, [sp, #0]
 800f918:	4613      	mov	r3, r2
 800f91a:	68ba      	ldr	r2, [r7, #8]
 800f91c:	480e      	ldr	r0, [pc, #56]	; (800f958 <transport_send+0xbc>)
 800f91e:	f7fb fca7 	bl	800b270 <ES_WIFI_SendData>
 800f922:	4603      	mov	r3, r0
 800f924:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	//log_transport('S',pBuffer,bytesToSend);
	if(ret!=ES_WIFI_STATUS_OK) {
 800f928:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d00a      	beq.n	800f946 <transport_send+0xaa>
		pNetworkContext->socket_open=0;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	2200      	movs	r2, #0
 800f934:	705a      	strb	r2, [r3, #1]
		printf("Error in sending data: %d\n",ret);
 800f936:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f93a:	4619      	mov	r1, r3
 800f93c:	4807      	ldr	r0, [pc, #28]	; (800f95c <transport_send+0xc0>)
 800f93e:	f004 fac1 	bl	8013ec4 <iprintf>
		return 0;
 800f942:	2300      	movs	r3, #0
 800f944:	e003      	b.n	800f94e <transport_send+0xb2>
	} else {
		socketStatus=datasent;
 800f946:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800f94a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

    return socketStatus;
 800f94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f94e:	4618      	mov	r0, r3
 800f950:	3730      	adds	r7, #48	; 0x30
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}
 800f956:	bf00      	nop
 800f958:	20000e6c 	.word	0x20000e6c
 800f95c:	0801794c 	.word	0x0801794c

0800f960 <init_transport_from_socket>:

/* Populating the TransportInterface_t structure with the definitions above. */
void init_transport_from_socket( uint8_t tcpSocket, uint8_t socketOpen,
                                 NetworkContext_t * pNetworkContext,
                                 TransportInterface_t * pTransport )
{
 800f960:	b480      	push	{r7}
 800f962:	b085      	sub	sp, #20
 800f964:	af00      	add	r7, sp, #0
 800f966:	60ba      	str	r2, [r7, #8]
 800f968:	607b      	str	r3, [r7, #4]
 800f96a:	4603      	mov	r3, r0
 800f96c:	73fb      	strb	r3, [r7, #15]
 800f96e:	460b      	mov	r3, r1
 800f970:	73bb      	strb	r3, [r7, #14]
    pNetworkContext->socket = tcpSocket;
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	7bfa      	ldrb	r2, [r7, #15]
 800f976:	701a      	strb	r2, [r3, #0]
    pNetworkContext->socket_open=socketOpen;
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	7bba      	ldrb	r2, [r7, #14]
 800f97c:	705a      	strb	r2, [r3, #1]
    pTransport->recv = transport_recv;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	4a08      	ldr	r2, [pc, #32]	; (800f9a4 <init_transport_from_socket+0x44>)
 800f982:	601a      	str	r2, [r3, #0]
    pTransport->send = transport_send;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	4a08      	ldr	r2, [pc, #32]	; (800f9a8 <init_transport_from_socket+0x48>)
 800f988:	605a      	str	r2, [r3, #4]
    // We don't implement transport vector function
    pTransport->writev=NULL;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2200      	movs	r2, #0
 800f98e:	609a      	str	r2, [r3, #8]
    pTransport->pNetworkContext = pNetworkContext;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	68ba      	ldr	r2, [r7, #8]
 800f994:	60da      	str	r2, [r3, #12]
}
 800f996:	bf00      	nop
 800f998:	3714      	adds	r7, #20
 800f99a:	46bd      	mov	sp, r7
 800f99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a0:	4770      	bx	lr
 800f9a2:	bf00      	nop
 800f9a4:	0800f711 	.word	0x0800f711
 800f9a8:	0800f89d 	.word	0x0800f89d

0800f9ac <__NVIC_SetPriority>:
{
 800f9ac:	b480      	push	{r7}
 800f9ae:	b083      	sub	sp, #12
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	6039      	str	r1, [r7, #0]
 800f9b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f9b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	db0a      	blt.n	800f9d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	b2da      	uxtb	r2, r3
 800f9c4:	490c      	ldr	r1, [pc, #48]	; (800f9f8 <__NVIC_SetPriority+0x4c>)
 800f9c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f9ca:	0112      	lsls	r2, r2, #4
 800f9cc:	b2d2      	uxtb	r2, r2
 800f9ce:	440b      	add	r3, r1
 800f9d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f9d4:	e00a      	b.n	800f9ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	b2da      	uxtb	r2, r3
 800f9da:	4908      	ldr	r1, [pc, #32]	; (800f9fc <__NVIC_SetPriority+0x50>)
 800f9dc:	79fb      	ldrb	r3, [r7, #7]
 800f9de:	f003 030f 	and.w	r3, r3, #15
 800f9e2:	3b04      	subs	r3, #4
 800f9e4:	0112      	lsls	r2, r2, #4
 800f9e6:	b2d2      	uxtb	r2, r2
 800f9e8:	440b      	add	r3, r1
 800f9ea:	761a      	strb	r2, [r3, #24]
}
 800f9ec:	bf00      	nop
 800f9ee:	370c      	adds	r7, #12
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr
 800f9f8:	e000e100 	.word	0xe000e100
 800f9fc:	e000ed00 	.word	0xe000ed00

0800fa00 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800fa00:	b580      	push	{r7, lr}
 800fa02:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800fa04:	4b05      	ldr	r3, [pc, #20]	; (800fa1c <SysTick_Handler+0x1c>)
 800fa06:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800fa08:	f002 f804 	bl	8011a14 <xTaskGetSchedulerState>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	2b01      	cmp	r3, #1
 800fa10:	d001      	beq.n	800fa16 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800fa12:	f002 fff1 	bl	80129f8 <xPortSysTickHandler>
  }
}
 800fa16:	bf00      	nop
 800fa18:	bd80      	pop	{r7, pc}
 800fa1a:	bf00      	nop
 800fa1c:	e000e010 	.word	0xe000e010

0800fa20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fa20:	b580      	push	{r7, lr}
 800fa22:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800fa24:	2100      	movs	r1, #0
 800fa26:	f06f 0004 	mvn.w	r0, #4
 800fa2a:	f7ff ffbf 	bl	800f9ac <__NVIC_SetPriority>
#endif
}
 800fa2e:	bf00      	nop
 800fa30:	bd80      	pop	{r7, pc}
	...

0800fa34 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fa34:	b480      	push	{r7}
 800fa36:	b083      	sub	sp, #12
 800fa38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa3a:	f3ef 8305 	mrs	r3, IPSR
 800fa3e:	603b      	str	r3, [r7, #0]
  return(result);
 800fa40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d003      	beq.n	800fa4e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800fa46:	f06f 0305 	mvn.w	r3, #5
 800fa4a:	607b      	str	r3, [r7, #4]
 800fa4c:	e00c      	b.n	800fa68 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800fa4e:	4b0a      	ldr	r3, [pc, #40]	; (800fa78 <osKernelInitialize+0x44>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d105      	bne.n	800fa62 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800fa56:	4b08      	ldr	r3, [pc, #32]	; (800fa78 <osKernelInitialize+0x44>)
 800fa58:	2201      	movs	r2, #1
 800fa5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	607b      	str	r3, [r7, #4]
 800fa60:	e002      	b.n	800fa68 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800fa62:	f04f 33ff 	mov.w	r3, #4294967295
 800fa66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fa68:	687b      	ldr	r3, [r7, #4]
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	370c      	adds	r7, #12
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa74:	4770      	bx	lr
 800fa76:	bf00      	nop
 800fa78:	2000176c 	.word	0x2000176c

0800fa7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b082      	sub	sp, #8
 800fa80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa82:	f3ef 8305 	mrs	r3, IPSR
 800fa86:	603b      	str	r3, [r7, #0]
  return(result);
 800fa88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d003      	beq.n	800fa96 <osKernelStart+0x1a>
    stat = osErrorISR;
 800fa8e:	f06f 0305 	mvn.w	r3, #5
 800fa92:	607b      	str	r3, [r7, #4]
 800fa94:	e010      	b.n	800fab8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800fa96:	4b0b      	ldr	r3, [pc, #44]	; (800fac4 <osKernelStart+0x48>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	2b01      	cmp	r3, #1
 800fa9c:	d109      	bne.n	800fab2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800fa9e:	f7ff ffbf 	bl	800fa20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800faa2:	4b08      	ldr	r3, [pc, #32]	; (800fac4 <osKernelStart+0x48>)
 800faa4:	2202      	movs	r2, #2
 800faa6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800faa8:	f001 fb3a 	bl	8011120 <vTaskStartScheduler>
      stat = osOK;
 800faac:	2300      	movs	r3, #0
 800faae:	607b      	str	r3, [r7, #4]
 800fab0:	e002      	b.n	800fab8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800fab2:	f04f 33ff 	mov.w	r3, #4294967295
 800fab6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fab8:	687b      	ldr	r3, [r7, #4]
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3708      	adds	r7, #8
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}
 800fac2:	bf00      	nop
 800fac4:	2000176c 	.word	0x2000176c

0800fac8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800fac8:	b580      	push	{r7, lr}
 800faca:	b08e      	sub	sp, #56	; 0x38
 800facc:	af04      	add	r7, sp, #16
 800face:	60f8      	str	r0, [r7, #12]
 800fad0:	60b9      	str	r1, [r7, #8]
 800fad2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800fad4:	2300      	movs	r3, #0
 800fad6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fad8:	f3ef 8305 	mrs	r3, IPSR
 800fadc:	617b      	str	r3, [r7, #20]
  return(result);
 800fade:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d17e      	bne.n	800fbe2 <osThreadNew+0x11a>
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d07b      	beq.n	800fbe2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800faea:	2380      	movs	r3, #128	; 0x80
 800faec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800faee:	2318      	movs	r3, #24
 800faf0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800faf2:	2300      	movs	r3, #0
 800faf4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800faf6:	f04f 33ff 	mov.w	r3, #4294967295
 800fafa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d045      	beq.n	800fb8e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d002      	beq.n	800fb10 <osThreadNew+0x48>
        name = attr->name;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	699b      	ldr	r3, [r3, #24]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d002      	beq.n	800fb1e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	699b      	ldr	r3, [r3, #24]
 800fb1c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800fb1e:	69fb      	ldr	r3, [r7, #28]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d008      	beq.n	800fb36 <osThreadNew+0x6e>
 800fb24:	69fb      	ldr	r3, [r7, #28]
 800fb26:	2b38      	cmp	r3, #56	; 0x38
 800fb28:	d805      	bhi.n	800fb36 <osThreadNew+0x6e>
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	f003 0301 	and.w	r3, r3, #1
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d001      	beq.n	800fb3a <osThreadNew+0x72>
        return (NULL);
 800fb36:	2300      	movs	r3, #0
 800fb38:	e054      	b.n	800fbe4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	695b      	ldr	r3, [r3, #20]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d003      	beq.n	800fb4a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	695b      	ldr	r3, [r3, #20]
 800fb46:	089b      	lsrs	r3, r3, #2
 800fb48:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	689b      	ldr	r3, [r3, #8]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d00e      	beq.n	800fb70 <osThreadNew+0xa8>
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	68db      	ldr	r3, [r3, #12]
 800fb56:	2bbf      	cmp	r3, #191	; 0xbf
 800fb58:	d90a      	bls.n	800fb70 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d006      	beq.n	800fb70 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	695b      	ldr	r3, [r3, #20]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d002      	beq.n	800fb70 <osThreadNew+0xa8>
        mem = 1;
 800fb6a:	2301      	movs	r3, #1
 800fb6c:	61bb      	str	r3, [r7, #24]
 800fb6e:	e010      	b.n	800fb92 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	689b      	ldr	r3, [r3, #8]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d10c      	bne.n	800fb92 <osThreadNew+0xca>
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	68db      	ldr	r3, [r3, #12]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d108      	bne.n	800fb92 <osThreadNew+0xca>
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	691b      	ldr	r3, [r3, #16]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d104      	bne.n	800fb92 <osThreadNew+0xca>
          mem = 0;
 800fb88:	2300      	movs	r3, #0
 800fb8a:	61bb      	str	r3, [r7, #24]
 800fb8c:	e001      	b.n	800fb92 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800fb8e:	2300      	movs	r3, #0
 800fb90:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fb92:	69bb      	ldr	r3, [r7, #24]
 800fb94:	2b01      	cmp	r3, #1
 800fb96:	d110      	bne.n	800fbba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800fb9c:	687a      	ldr	r2, [r7, #4]
 800fb9e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fba0:	9202      	str	r2, [sp, #8]
 800fba2:	9301      	str	r3, [sp, #4]
 800fba4:	69fb      	ldr	r3, [r7, #28]
 800fba6:	9300      	str	r3, [sp, #0]
 800fba8:	68bb      	ldr	r3, [r7, #8]
 800fbaa:	6a3a      	ldr	r2, [r7, #32]
 800fbac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fbae:	68f8      	ldr	r0, [r7, #12]
 800fbb0:	f001 f8c6 	bl	8010d40 <xTaskCreateStatic>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	613b      	str	r3, [r7, #16]
 800fbb8:	e013      	b.n	800fbe2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800fbba:	69bb      	ldr	r3, [r7, #24]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d110      	bne.n	800fbe2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fbc0:	6a3b      	ldr	r3, [r7, #32]
 800fbc2:	b29a      	uxth	r2, r3
 800fbc4:	f107 0310 	add.w	r3, r7, #16
 800fbc8:	9301      	str	r3, [sp, #4]
 800fbca:	69fb      	ldr	r3, [r7, #28]
 800fbcc:	9300      	str	r3, [sp, #0]
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fbd2:	68f8      	ldr	r0, [r7, #12]
 800fbd4:	f001 f911 	bl	8010dfa <xTaskCreate>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	2b01      	cmp	r3, #1
 800fbdc:	d001      	beq.n	800fbe2 <osThreadNew+0x11a>
            hTask = NULL;
 800fbde:	2300      	movs	r3, #0
 800fbe0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fbe2:	693b      	ldr	r3, [r7, #16]
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3728      	adds	r7, #40	; 0x28
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}

0800fbec <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b088      	sub	sp, #32
 800fbf0:	af02      	add	r7, sp, #8
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d002      	beq.n	800fc06 <osThreadFlagsSet+0x1a>
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	da03      	bge.n	800fc0e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800fc06:	f06f 0303 	mvn.w	r3, #3
 800fc0a:	60fb      	str	r3, [r7, #12]
 800fc0c:	e035      	b.n	800fc7a <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800fc0e:	f04f 33ff 	mov.w	r3, #4294967295
 800fc12:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc14:	f3ef 8305 	mrs	r3, IPSR
 800fc18:	613b      	str	r3, [r7, #16]
  return(result);
 800fc1a:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d01f      	beq.n	800fc60 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800fc20:	2300      	movs	r3, #0
 800fc22:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800fc24:	f107 0308 	add.w	r3, r7, #8
 800fc28:	9300      	str	r3, [sp, #0]
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	2201      	movs	r2, #1
 800fc2e:	6839      	ldr	r1, [r7, #0]
 800fc30:	6978      	ldr	r0, [r7, #20]
 800fc32:	f002 f899 	bl	8011d68 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800fc36:	f107 030c 	add.w	r3, r7, #12
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	9200      	str	r2, [sp, #0]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	2100      	movs	r1, #0
 800fc42:	6978      	ldr	r0, [r7, #20]
 800fc44:	f002 f890 	bl	8011d68 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800fc48:	68bb      	ldr	r3, [r7, #8]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d015      	beq.n	800fc7a <osThreadFlagsSet+0x8e>
 800fc4e:	4b0d      	ldr	r3, [pc, #52]	; (800fc84 <osThreadFlagsSet+0x98>)
 800fc50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc54:	601a      	str	r2, [r3, #0]
 800fc56:	f3bf 8f4f 	dsb	sy
 800fc5a:	f3bf 8f6f 	isb	sy
 800fc5e:	e00c      	b.n	800fc7a <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800fc60:	2300      	movs	r3, #0
 800fc62:	2201      	movs	r2, #1
 800fc64:	6839      	ldr	r1, [r7, #0]
 800fc66:	6978      	ldr	r0, [r7, #20]
 800fc68:	f001 ffc0 	bl	8011bec <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800fc6c:	f107 030c 	add.w	r3, r7, #12
 800fc70:	2200      	movs	r2, #0
 800fc72:	2100      	movs	r1, #0
 800fc74:	6978      	ldr	r0, [r7, #20]
 800fc76:	f001 ffb9 	bl	8011bec <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800fc7a:	68fb      	ldr	r3, [r7, #12]
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3718      	adds	r7, #24
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}
 800fc84:	e000ed04 	.word	0xe000ed04

0800fc88 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b08c      	sub	sp, #48	; 0x30
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	60f8      	str	r0, [r7, #12]
 800fc90:	60b9      	str	r1, [r7, #8]
 800fc92:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc94:	f3ef 8305 	mrs	r3, IPSR
 800fc98:	617b      	str	r3, [r7, #20]
  return(result);
 800fc9a:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d003      	beq.n	800fca8 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800fca0:	f06f 0305 	mvn.w	r3, #5
 800fca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fca6:	e06b      	b.n	800fd80 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	da03      	bge.n	800fcb6 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800fcae:	f06f 0303 	mvn.w	r3, #3
 800fcb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fcb4:	e064      	b.n	800fd80 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	f003 0302 	and.w	r3, r3, #2
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d002      	beq.n	800fcc6 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	62bb      	str	r3, [r7, #40]	; 0x28
 800fcc4:	e001      	b.n	800fcca <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800fcca:	2300      	movs	r3, #0
 800fccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800fcd2:	f001 fb43 	bl	801135c <xTaskGetTickCount>
 800fcd6:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800fcd8:	f107 0210 	add.w	r2, r7, #16
 800fcdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fce0:	2000      	movs	r0, #0
 800fce2:	f001 ff23 	bl	8011b2c <xTaskNotifyWait>
 800fce6:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800fce8:	69fb      	ldr	r3, [r7, #28]
 800fcea:	2b01      	cmp	r3, #1
 800fcec:	d137      	bne.n	800fd5e <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800fcee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	4013      	ands	r3, r2
 800fcf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800fcf6:	693b      	ldr	r3, [r7, #16]
 800fcf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcfa:	4313      	orrs	r3, r2
 800fcfc:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	f003 0301 	and.w	r3, r3, #1
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d00c      	beq.n	800fd22 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800fd08:	68fa      	ldr	r2, [r7, #12]
 800fd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd0c:	4013      	ands	r3, r2
 800fd0e:	68fa      	ldr	r2, [r7, #12]
 800fd10:	429a      	cmp	r2, r3
 800fd12:	d032      	beq.n	800fd7a <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d10f      	bne.n	800fd3a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800fd1a:	f06f 0302 	mvn.w	r3, #2
 800fd1e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800fd20:	e02e      	b.n	800fd80 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800fd22:	68fa      	ldr	r2, [r7, #12]
 800fd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd26:	4013      	ands	r3, r2
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d128      	bne.n	800fd7e <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d103      	bne.n	800fd3a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800fd32:	f06f 0302 	mvn.w	r3, #2
 800fd36:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800fd38:	e022      	b.n	800fd80 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800fd3a:	f001 fb0f 	bl	801135c <xTaskGetTickCount>
 800fd3e:	4602      	mov	r2, r0
 800fd40:	6a3b      	ldr	r3, [r7, #32]
 800fd42:	1ad3      	subs	r3, r2, r3
 800fd44:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800fd46:	69ba      	ldr	r2, [r7, #24]
 800fd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d902      	bls.n	800fd54 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800fd4e:	2300      	movs	r3, #0
 800fd50:	627b      	str	r3, [r7, #36]	; 0x24
 800fd52:	e00e      	b.n	800fd72 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800fd54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd56:	69bb      	ldr	r3, [r7, #24]
 800fd58:	1ad3      	subs	r3, r2, r3
 800fd5a:	627b      	str	r3, [r7, #36]	; 0x24
 800fd5c:	e009      	b.n	800fd72 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d103      	bne.n	800fd6c <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800fd64:	f06f 0302 	mvn.w	r3, #2
 800fd68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd6a:	e002      	b.n	800fd72 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800fd6c:	f06f 0301 	mvn.w	r3, #1
 800fd70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800fd72:	69fb      	ldr	r3, [r7, #28]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d1af      	bne.n	800fcd8 <osThreadFlagsWait+0x50>
 800fd78:	e002      	b.n	800fd80 <osThreadFlagsWait+0xf8>
            break;
 800fd7a:	bf00      	nop
 800fd7c:	e000      	b.n	800fd80 <osThreadFlagsWait+0xf8>
            break;
 800fd7e:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800fd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	3730      	adds	r7, #48	; 0x30
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}

0800fd8a <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800fd8a:	b580      	push	{r7, lr}
 800fd8c:	b084      	sub	sp, #16
 800fd8e:	af00      	add	r7, sp, #0
 800fd90:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd92:	f3ef 8305 	mrs	r3, IPSR
 800fd96:	60bb      	str	r3, [r7, #8]
  return(result);
 800fd98:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d003      	beq.n	800fda6 <osDelay+0x1c>
    stat = osErrorISR;
 800fd9e:	f06f 0305 	mvn.w	r3, #5
 800fda2:	60fb      	str	r3, [r7, #12]
 800fda4:	e007      	b.n	800fdb6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800fda6:	2300      	movs	r3, #0
 800fda8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d002      	beq.n	800fdb6 <osDelay+0x2c>
      vTaskDelay(ticks);
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f001 f981 	bl	80110b8 <vTaskDelay>
    }
  }

  return (stat);
 800fdb6:	68fb      	ldr	r3, [r7, #12]
}
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3710      	adds	r7, #16
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}

0800fdc0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b08a      	sub	sp, #40	; 0x28
 800fdc4:	af02      	add	r7, sp, #8
 800fdc6:	60f8      	str	r0, [r7, #12]
 800fdc8:	60b9      	str	r1, [r7, #8]
 800fdca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800fdcc:	2300      	movs	r3, #0
 800fdce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fdd0:	f3ef 8305 	mrs	r3, IPSR
 800fdd4:	613b      	str	r3, [r7, #16]
  return(result);
 800fdd6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d15f      	bne.n	800fe9c <osMessageQueueNew+0xdc>
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d05c      	beq.n	800fe9c <osMessageQueueNew+0xdc>
 800fde2:	68bb      	ldr	r3, [r7, #8]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d059      	beq.n	800fe9c <osMessageQueueNew+0xdc>
    mem = -1;
 800fde8:	f04f 33ff 	mov.w	r3, #4294967295
 800fdec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d029      	beq.n	800fe48 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	689b      	ldr	r3, [r3, #8]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d012      	beq.n	800fe22 <osMessageQueueNew+0x62>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	68db      	ldr	r3, [r3, #12]
 800fe00:	2b4f      	cmp	r3, #79	; 0x4f
 800fe02:	d90e      	bls.n	800fe22 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d00a      	beq.n	800fe22 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	695a      	ldr	r2, [r3, #20]
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	68b9      	ldr	r1, [r7, #8]
 800fe14:	fb01 f303 	mul.w	r3, r1, r3
 800fe18:	429a      	cmp	r2, r3
 800fe1a:	d302      	bcc.n	800fe22 <osMessageQueueNew+0x62>
        mem = 1;
 800fe1c:	2301      	movs	r3, #1
 800fe1e:	61bb      	str	r3, [r7, #24]
 800fe20:	e014      	b.n	800fe4c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	689b      	ldr	r3, [r3, #8]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d110      	bne.n	800fe4c <osMessageQueueNew+0x8c>
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	68db      	ldr	r3, [r3, #12]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d10c      	bne.n	800fe4c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d108      	bne.n	800fe4c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	695b      	ldr	r3, [r3, #20]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d104      	bne.n	800fe4c <osMessageQueueNew+0x8c>
          mem = 0;
 800fe42:	2300      	movs	r3, #0
 800fe44:	61bb      	str	r3, [r7, #24]
 800fe46:	e001      	b.n	800fe4c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800fe48:	2300      	movs	r3, #0
 800fe4a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fe4c:	69bb      	ldr	r3, [r7, #24]
 800fe4e:	2b01      	cmp	r3, #1
 800fe50:	d10b      	bne.n	800fe6a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	691a      	ldr	r2, [r3, #16]
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	689b      	ldr	r3, [r3, #8]
 800fe5a:	2100      	movs	r1, #0
 800fe5c:	9100      	str	r1, [sp, #0]
 800fe5e:	68b9      	ldr	r1, [r7, #8]
 800fe60:	68f8      	ldr	r0, [r7, #12]
 800fe62:	f000 fa2f 	bl	80102c4 <xQueueGenericCreateStatic>
 800fe66:	61f8      	str	r0, [r7, #28]
 800fe68:	e008      	b.n	800fe7c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800fe6a:	69bb      	ldr	r3, [r7, #24]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d105      	bne.n	800fe7c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800fe70:	2200      	movs	r2, #0
 800fe72:	68b9      	ldr	r1, [r7, #8]
 800fe74:	68f8      	ldr	r0, [r7, #12]
 800fe76:	f000 fa9d 	bl	80103b4 <xQueueGenericCreate>
 800fe7a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800fe7c:	69fb      	ldr	r3, [r7, #28]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d00c      	beq.n	800fe9c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d003      	beq.n	800fe90 <osMessageQueueNew+0xd0>
        name = attr->name;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	617b      	str	r3, [r7, #20]
 800fe8e:	e001      	b.n	800fe94 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800fe90:	2300      	movs	r3, #0
 800fe92:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800fe94:	6979      	ldr	r1, [r7, #20]
 800fe96:	69f8      	ldr	r0, [r7, #28]
 800fe98:	f000 fef4 	bl	8010c84 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800fe9c:	69fb      	ldr	r3, [r7, #28]
}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	3720      	adds	r7, #32
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd80      	pop	{r7, pc}
	...

0800fea8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b088      	sub	sp, #32
 800feac:	af00      	add	r7, sp, #0
 800feae:	60f8      	str	r0, [r7, #12]
 800feb0:	60b9      	str	r1, [r7, #8]
 800feb2:	603b      	str	r3, [r7, #0]
 800feb4:	4613      	mov	r3, r2
 800feb6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800febc:	2300      	movs	r3, #0
 800febe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fec0:	f3ef 8305 	mrs	r3, IPSR
 800fec4:	617b      	str	r3, [r7, #20]
  return(result);
 800fec6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d028      	beq.n	800ff1e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fecc:	69bb      	ldr	r3, [r7, #24]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d005      	beq.n	800fede <osMessageQueuePut+0x36>
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d002      	beq.n	800fede <osMessageQueuePut+0x36>
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d003      	beq.n	800fee6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800fede:	f06f 0303 	mvn.w	r3, #3
 800fee2:	61fb      	str	r3, [r7, #28]
 800fee4:	e038      	b.n	800ff58 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800fee6:	2300      	movs	r3, #0
 800fee8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800feea:	f107 0210 	add.w	r2, r7, #16
 800feee:	2300      	movs	r3, #0
 800fef0:	68b9      	ldr	r1, [r7, #8]
 800fef2:	69b8      	ldr	r0, [r7, #24]
 800fef4:	f000 fbba 	bl	801066c <xQueueGenericSendFromISR>
 800fef8:	4603      	mov	r3, r0
 800fefa:	2b01      	cmp	r3, #1
 800fefc:	d003      	beq.n	800ff06 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800fefe:	f06f 0302 	mvn.w	r3, #2
 800ff02:	61fb      	str	r3, [r7, #28]
 800ff04:	e028      	b.n	800ff58 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ff06:	693b      	ldr	r3, [r7, #16]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d025      	beq.n	800ff58 <osMessageQueuePut+0xb0>
 800ff0c:	4b15      	ldr	r3, [pc, #84]	; (800ff64 <osMessageQueuePut+0xbc>)
 800ff0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff12:	601a      	str	r2, [r3, #0]
 800ff14:	f3bf 8f4f 	dsb	sy
 800ff18:	f3bf 8f6f 	isb	sy
 800ff1c:	e01c      	b.n	800ff58 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ff1e:	69bb      	ldr	r3, [r7, #24]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d002      	beq.n	800ff2a <osMessageQueuePut+0x82>
 800ff24:	68bb      	ldr	r3, [r7, #8]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d103      	bne.n	800ff32 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ff2a:	f06f 0303 	mvn.w	r3, #3
 800ff2e:	61fb      	str	r3, [r7, #28]
 800ff30:	e012      	b.n	800ff58 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ff32:	2300      	movs	r3, #0
 800ff34:	683a      	ldr	r2, [r7, #0]
 800ff36:	68b9      	ldr	r1, [r7, #8]
 800ff38:	69b8      	ldr	r0, [r7, #24]
 800ff3a:	f000 fa99 	bl	8010470 <xQueueGenericSend>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	2b01      	cmp	r3, #1
 800ff42:	d009      	beq.n	800ff58 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d003      	beq.n	800ff52 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ff4a:	f06f 0301 	mvn.w	r3, #1
 800ff4e:	61fb      	str	r3, [r7, #28]
 800ff50:	e002      	b.n	800ff58 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ff52:	f06f 0302 	mvn.w	r3, #2
 800ff56:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ff58:	69fb      	ldr	r3, [r7, #28]
}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	3720      	adds	r7, #32
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}
 800ff62:	bf00      	nop
 800ff64:	e000ed04 	.word	0xe000ed04

0800ff68 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b088      	sub	sp, #32
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	60f8      	str	r0, [r7, #12]
 800ff70:	60b9      	str	r1, [r7, #8]
 800ff72:	607a      	str	r2, [r7, #4]
 800ff74:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff7e:	f3ef 8305 	mrs	r3, IPSR
 800ff82:	617b      	str	r3, [r7, #20]
  return(result);
 800ff84:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d028      	beq.n	800ffdc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ff8a:	69bb      	ldr	r3, [r7, #24]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d005      	beq.n	800ff9c <osMessageQueueGet+0x34>
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d002      	beq.n	800ff9c <osMessageQueueGet+0x34>
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d003      	beq.n	800ffa4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ff9c:	f06f 0303 	mvn.w	r3, #3
 800ffa0:	61fb      	str	r3, [r7, #28]
 800ffa2:	e037      	b.n	8010014 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ffa8:	f107 0310 	add.w	r3, r7, #16
 800ffac:	461a      	mov	r2, r3
 800ffae:	68b9      	ldr	r1, [r7, #8]
 800ffb0:	69b8      	ldr	r0, [r7, #24]
 800ffb2:	f000 fcd7 	bl	8010964 <xQueueReceiveFromISR>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	2b01      	cmp	r3, #1
 800ffba:	d003      	beq.n	800ffc4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ffbc:	f06f 0302 	mvn.w	r3, #2
 800ffc0:	61fb      	str	r3, [r7, #28]
 800ffc2:	e027      	b.n	8010014 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d024      	beq.n	8010014 <osMessageQueueGet+0xac>
 800ffca:	4b15      	ldr	r3, [pc, #84]	; (8010020 <osMessageQueueGet+0xb8>)
 800ffcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffd0:	601a      	str	r2, [r3, #0]
 800ffd2:	f3bf 8f4f 	dsb	sy
 800ffd6:	f3bf 8f6f 	isb	sy
 800ffda:	e01b      	b.n	8010014 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ffdc:	69bb      	ldr	r3, [r7, #24]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d002      	beq.n	800ffe8 <osMessageQueueGet+0x80>
 800ffe2:	68bb      	ldr	r3, [r7, #8]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d103      	bne.n	800fff0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ffe8:	f06f 0303 	mvn.w	r3, #3
 800ffec:	61fb      	str	r3, [r7, #28]
 800ffee:	e011      	b.n	8010014 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fff0:	683a      	ldr	r2, [r7, #0]
 800fff2:	68b9      	ldr	r1, [r7, #8]
 800fff4:	69b8      	ldr	r0, [r7, #24]
 800fff6:	f000 fbd5 	bl	80107a4 <xQueueReceive>
 800fffa:	4603      	mov	r3, r0
 800fffc:	2b01      	cmp	r3, #1
 800fffe:	d009      	beq.n	8010014 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d003      	beq.n	801000e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8010006:	f06f 0301 	mvn.w	r3, #1
 801000a:	61fb      	str	r3, [r7, #28]
 801000c:	e002      	b.n	8010014 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801000e:	f06f 0302 	mvn.w	r3, #2
 8010012:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010014:	69fb      	ldr	r3, [r7, #28]
}
 8010016:	4618      	mov	r0, r3
 8010018:	3720      	adds	r7, #32
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}
 801001e:	bf00      	nop
 8010020:	e000ed04 	.word	0xe000ed04

08010024 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010024:	b480      	push	{r7}
 8010026:	b085      	sub	sp, #20
 8010028:	af00      	add	r7, sp, #0
 801002a:	60f8      	str	r0, [r7, #12]
 801002c:	60b9      	str	r1, [r7, #8]
 801002e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	4a07      	ldr	r2, [pc, #28]	; (8010050 <vApplicationGetIdleTaskMemory+0x2c>)
 8010034:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	4a06      	ldr	r2, [pc, #24]	; (8010054 <vApplicationGetIdleTaskMemory+0x30>)
 801003a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	2280      	movs	r2, #128	; 0x80
 8010040:	601a      	str	r2, [r3, #0]
}
 8010042:	bf00      	nop
 8010044:	3714      	adds	r7, #20
 8010046:	46bd      	mov	sp, r7
 8010048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004c:	4770      	bx	lr
 801004e:	bf00      	nop
 8010050:	20001770 	.word	0x20001770
 8010054:	20001830 	.word	0x20001830

08010058 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010058:	b480      	push	{r7}
 801005a:	b085      	sub	sp, #20
 801005c:	af00      	add	r7, sp, #0
 801005e:	60f8      	str	r0, [r7, #12]
 8010060:	60b9      	str	r1, [r7, #8]
 8010062:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	4a07      	ldr	r2, [pc, #28]	; (8010084 <vApplicationGetTimerTaskMemory+0x2c>)
 8010068:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	4a06      	ldr	r2, [pc, #24]	; (8010088 <vApplicationGetTimerTaskMemory+0x30>)
 801006e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010076:	601a      	str	r2, [r3, #0]
}
 8010078:	bf00      	nop
 801007a:	3714      	adds	r7, #20
 801007c:	46bd      	mov	sp, r7
 801007e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010082:	4770      	bx	lr
 8010084:	20001a30 	.word	0x20001a30
 8010088:	20001af0 	.word	0x20001af0

0801008c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801008c:	b480      	push	{r7}
 801008e:	b083      	sub	sp, #12
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f103 0208 	add.w	r2, r3, #8
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	f04f 32ff 	mov.w	r2, #4294967295
 80100a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	f103 0208 	add.w	r2, r3, #8
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	f103 0208 	add.w	r2, r3, #8
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	2200      	movs	r2, #0
 80100be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80100c0:	bf00      	nop
 80100c2:	370c      	adds	r7, #12
 80100c4:	46bd      	mov	sp, r7
 80100c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ca:	4770      	bx	lr

080100cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80100cc:	b480      	push	{r7}
 80100ce:	b083      	sub	sp, #12
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2200      	movs	r2, #0
 80100d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80100da:	bf00      	nop
 80100dc:	370c      	adds	r7, #12
 80100de:	46bd      	mov	sp, r7
 80100e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e4:	4770      	bx	lr

080100e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80100e6:	b480      	push	{r7}
 80100e8:	b085      	sub	sp, #20
 80100ea:	af00      	add	r7, sp, #0
 80100ec:	6078      	str	r0, [r7, #4]
 80100ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	685b      	ldr	r3, [r3, #4]
 80100f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	68fa      	ldr	r2, [r7, #12]
 80100fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	689a      	ldr	r2, [r3, #8]
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	689b      	ldr	r3, [r3, #8]
 8010108:	683a      	ldr	r2, [r7, #0]
 801010a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	683a      	ldr	r2, [r7, #0]
 8010110:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010112:	683b      	ldr	r3, [r7, #0]
 8010114:	687a      	ldr	r2, [r7, #4]
 8010116:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	1c5a      	adds	r2, r3, #1
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	601a      	str	r2, [r3, #0]
}
 8010122:	bf00      	nop
 8010124:	3714      	adds	r7, #20
 8010126:	46bd      	mov	sp, r7
 8010128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012c:	4770      	bx	lr

0801012e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801012e:	b480      	push	{r7}
 8010130:	b085      	sub	sp, #20
 8010132:	af00      	add	r7, sp, #0
 8010134:	6078      	str	r0, [r7, #4]
 8010136:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010144:	d103      	bne.n	801014e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	691b      	ldr	r3, [r3, #16]
 801014a:	60fb      	str	r3, [r7, #12]
 801014c:	e00c      	b.n	8010168 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	3308      	adds	r3, #8
 8010152:	60fb      	str	r3, [r7, #12]
 8010154:	e002      	b.n	801015c <vListInsert+0x2e>
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	685b      	ldr	r3, [r3, #4]
 801015a:	60fb      	str	r3, [r7, #12]
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	685b      	ldr	r3, [r3, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	68ba      	ldr	r2, [r7, #8]
 8010164:	429a      	cmp	r2, r3
 8010166:	d2f6      	bcs.n	8010156 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	685a      	ldr	r2, [r3, #4]
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	685b      	ldr	r3, [r3, #4]
 8010174:	683a      	ldr	r2, [r7, #0]
 8010176:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	68fa      	ldr	r2, [r7, #12]
 801017c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	683a      	ldr	r2, [r7, #0]
 8010182:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	687a      	ldr	r2, [r7, #4]
 8010188:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	1c5a      	adds	r2, r3, #1
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	601a      	str	r2, [r3, #0]
}
 8010194:	bf00      	nop
 8010196:	3714      	adds	r7, #20
 8010198:	46bd      	mov	sp, r7
 801019a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019e:	4770      	bx	lr

080101a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80101a0:	b480      	push	{r7}
 80101a2:	b085      	sub	sp, #20
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	691b      	ldr	r3, [r3, #16]
 80101ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	685b      	ldr	r3, [r3, #4]
 80101b2:	687a      	ldr	r2, [r7, #4]
 80101b4:	6892      	ldr	r2, [r2, #8]
 80101b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	689b      	ldr	r3, [r3, #8]
 80101bc:	687a      	ldr	r2, [r7, #4]
 80101be:	6852      	ldr	r2, [r2, #4]
 80101c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	685b      	ldr	r3, [r3, #4]
 80101c6:	687a      	ldr	r2, [r7, #4]
 80101c8:	429a      	cmp	r2, r3
 80101ca:	d103      	bne.n	80101d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	689a      	ldr	r2, [r3, #8]
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2200      	movs	r2, #0
 80101d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	1e5a      	subs	r2, r3, #1
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	681b      	ldr	r3, [r3, #0]
}
 80101e8:	4618      	mov	r0, r3
 80101ea:	3714      	adds	r7, #20
 80101ec:	46bd      	mov	sp, r7
 80101ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f2:	4770      	bx	lr

080101f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b084      	sub	sp, #16
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
 80101fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d10a      	bne.n	801021e <xQueueGenericReset+0x2a>
	__asm volatile
 8010208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801020c:	f383 8811 	msr	BASEPRI, r3
 8010210:	f3bf 8f6f 	isb	sy
 8010214:	f3bf 8f4f 	dsb	sy
 8010218:	60bb      	str	r3, [r7, #8]
}
 801021a:	bf00      	nop
 801021c:	e7fe      	b.n	801021c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801021e:	f002 fb59 	bl	80128d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	681a      	ldr	r2, [r3, #0]
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801022a:	68f9      	ldr	r1, [r7, #12]
 801022c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801022e:	fb01 f303 	mul.w	r3, r1, r3
 8010232:	441a      	add	r2, r3
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	2200      	movs	r2, #0
 801023c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	681a      	ldr	r2, [r3, #0]
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	681a      	ldr	r2, [r3, #0]
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801024e:	3b01      	subs	r3, #1
 8010250:	68f9      	ldr	r1, [r7, #12]
 8010252:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010254:	fb01 f303 	mul.w	r3, r1, r3
 8010258:	441a      	add	r2, r3
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	22ff      	movs	r2, #255	; 0xff
 8010262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	22ff      	movs	r2, #255	; 0xff
 801026a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d114      	bne.n	801029e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	691b      	ldr	r3, [r3, #16]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d01a      	beq.n	80102b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	3310      	adds	r3, #16
 8010280:	4618      	mov	r0, r3
 8010282:	f001 fa05 	bl	8011690 <xTaskRemoveFromEventList>
 8010286:	4603      	mov	r3, r0
 8010288:	2b00      	cmp	r3, #0
 801028a:	d012      	beq.n	80102b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801028c:	4b0c      	ldr	r3, [pc, #48]	; (80102c0 <xQueueGenericReset+0xcc>)
 801028e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010292:	601a      	str	r2, [r3, #0]
 8010294:	f3bf 8f4f 	dsb	sy
 8010298:	f3bf 8f6f 	isb	sy
 801029c:	e009      	b.n	80102b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	3310      	adds	r3, #16
 80102a2:	4618      	mov	r0, r3
 80102a4:	f7ff fef2 	bl	801008c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	3324      	adds	r3, #36	; 0x24
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7ff feed 	bl	801008c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80102b2:	f002 fb3f 	bl	8012934 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80102b6:	2301      	movs	r3, #1
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	3710      	adds	r7, #16
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}
 80102c0:	e000ed04 	.word	0xe000ed04

080102c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b08e      	sub	sp, #56	; 0x38
 80102c8:	af02      	add	r7, sp, #8
 80102ca:	60f8      	str	r0, [r7, #12]
 80102cc:	60b9      	str	r1, [r7, #8]
 80102ce:	607a      	str	r2, [r7, #4]
 80102d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d10a      	bne.n	80102ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80102d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102dc:	f383 8811 	msr	BASEPRI, r3
 80102e0:	f3bf 8f6f 	isb	sy
 80102e4:	f3bf 8f4f 	dsb	sy
 80102e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80102ea:	bf00      	nop
 80102ec:	e7fe      	b.n	80102ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d10a      	bne.n	801030a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80102f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102f8:	f383 8811 	msr	BASEPRI, r3
 80102fc:	f3bf 8f6f 	isb	sy
 8010300:	f3bf 8f4f 	dsb	sy
 8010304:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010306:	bf00      	nop
 8010308:	e7fe      	b.n	8010308 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d002      	beq.n	8010316 <xQueueGenericCreateStatic+0x52>
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d001      	beq.n	801031a <xQueueGenericCreateStatic+0x56>
 8010316:	2301      	movs	r3, #1
 8010318:	e000      	b.n	801031c <xQueueGenericCreateStatic+0x58>
 801031a:	2300      	movs	r3, #0
 801031c:	2b00      	cmp	r3, #0
 801031e:	d10a      	bne.n	8010336 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010324:	f383 8811 	msr	BASEPRI, r3
 8010328:	f3bf 8f6f 	isb	sy
 801032c:	f3bf 8f4f 	dsb	sy
 8010330:	623b      	str	r3, [r7, #32]
}
 8010332:	bf00      	nop
 8010334:	e7fe      	b.n	8010334 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d102      	bne.n	8010342 <xQueueGenericCreateStatic+0x7e>
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d101      	bne.n	8010346 <xQueueGenericCreateStatic+0x82>
 8010342:	2301      	movs	r3, #1
 8010344:	e000      	b.n	8010348 <xQueueGenericCreateStatic+0x84>
 8010346:	2300      	movs	r3, #0
 8010348:	2b00      	cmp	r3, #0
 801034a:	d10a      	bne.n	8010362 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801034c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010350:	f383 8811 	msr	BASEPRI, r3
 8010354:	f3bf 8f6f 	isb	sy
 8010358:	f3bf 8f4f 	dsb	sy
 801035c:	61fb      	str	r3, [r7, #28]
}
 801035e:	bf00      	nop
 8010360:	e7fe      	b.n	8010360 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010362:	2350      	movs	r3, #80	; 0x50
 8010364:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	2b50      	cmp	r3, #80	; 0x50
 801036a:	d00a      	beq.n	8010382 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801036c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010370:	f383 8811 	msr	BASEPRI, r3
 8010374:	f3bf 8f6f 	isb	sy
 8010378:	f3bf 8f4f 	dsb	sy
 801037c:	61bb      	str	r3, [r7, #24]
}
 801037e:	bf00      	nop
 8010380:	e7fe      	b.n	8010380 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010382:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801038a:	2b00      	cmp	r3, #0
 801038c:	d00d      	beq.n	80103aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801038e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010390:	2201      	movs	r2, #1
 8010392:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010396:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801039a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801039c:	9300      	str	r3, [sp, #0]
 801039e:	4613      	mov	r3, r2
 80103a0:	687a      	ldr	r2, [r7, #4]
 80103a2:	68b9      	ldr	r1, [r7, #8]
 80103a4:	68f8      	ldr	r0, [r7, #12]
 80103a6:	f000 f83f 	bl	8010428 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80103aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80103ac:	4618      	mov	r0, r3
 80103ae:	3730      	adds	r7, #48	; 0x30
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd80      	pop	{r7, pc}

080103b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b08a      	sub	sp, #40	; 0x28
 80103b8:	af02      	add	r7, sp, #8
 80103ba:	60f8      	str	r0, [r7, #12]
 80103bc:	60b9      	str	r1, [r7, #8]
 80103be:	4613      	mov	r3, r2
 80103c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d10a      	bne.n	80103de <xQueueGenericCreate+0x2a>
	__asm volatile
 80103c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103cc:	f383 8811 	msr	BASEPRI, r3
 80103d0:	f3bf 8f6f 	isb	sy
 80103d4:	f3bf 8f4f 	dsb	sy
 80103d8:	613b      	str	r3, [r7, #16]
}
 80103da:	bf00      	nop
 80103dc:	e7fe      	b.n	80103dc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	68ba      	ldr	r2, [r7, #8]
 80103e2:	fb02 f303 	mul.w	r3, r2, r3
 80103e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80103e8:	69fb      	ldr	r3, [r7, #28]
 80103ea:	3350      	adds	r3, #80	; 0x50
 80103ec:	4618      	mov	r0, r3
 80103ee:	f002 fb93 	bl	8012b18 <pvPortMalloc>
 80103f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80103f4:	69bb      	ldr	r3, [r7, #24]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d011      	beq.n	801041e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80103fa:	69bb      	ldr	r3, [r7, #24]
 80103fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80103fe:	697b      	ldr	r3, [r7, #20]
 8010400:	3350      	adds	r3, #80	; 0x50
 8010402:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010404:	69bb      	ldr	r3, [r7, #24]
 8010406:	2200      	movs	r2, #0
 8010408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801040c:	79fa      	ldrb	r2, [r7, #7]
 801040e:	69bb      	ldr	r3, [r7, #24]
 8010410:	9300      	str	r3, [sp, #0]
 8010412:	4613      	mov	r3, r2
 8010414:	697a      	ldr	r2, [r7, #20]
 8010416:	68b9      	ldr	r1, [r7, #8]
 8010418:	68f8      	ldr	r0, [r7, #12]
 801041a:	f000 f805 	bl	8010428 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801041e:	69bb      	ldr	r3, [r7, #24]
	}
 8010420:	4618      	mov	r0, r3
 8010422:	3720      	adds	r7, #32
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b084      	sub	sp, #16
 801042c:	af00      	add	r7, sp, #0
 801042e:	60f8      	str	r0, [r7, #12]
 8010430:	60b9      	str	r1, [r7, #8]
 8010432:	607a      	str	r2, [r7, #4]
 8010434:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010436:	68bb      	ldr	r3, [r7, #8]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d103      	bne.n	8010444 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801043c:	69bb      	ldr	r3, [r7, #24]
 801043e:	69ba      	ldr	r2, [r7, #24]
 8010440:	601a      	str	r2, [r3, #0]
 8010442:	e002      	b.n	801044a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010444:	69bb      	ldr	r3, [r7, #24]
 8010446:	687a      	ldr	r2, [r7, #4]
 8010448:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801044a:	69bb      	ldr	r3, [r7, #24]
 801044c:	68fa      	ldr	r2, [r7, #12]
 801044e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010450:	69bb      	ldr	r3, [r7, #24]
 8010452:	68ba      	ldr	r2, [r7, #8]
 8010454:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010456:	2101      	movs	r1, #1
 8010458:	69b8      	ldr	r0, [r7, #24]
 801045a:	f7ff fecb 	bl	80101f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801045e:	69bb      	ldr	r3, [r7, #24]
 8010460:	78fa      	ldrb	r2, [r7, #3]
 8010462:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010466:	bf00      	nop
 8010468:	3710      	adds	r7, #16
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}
	...

08010470 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b08e      	sub	sp, #56	; 0x38
 8010474:	af00      	add	r7, sp, #0
 8010476:	60f8      	str	r0, [r7, #12]
 8010478:	60b9      	str	r1, [r7, #8]
 801047a:	607a      	str	r2, [r7, #4]
 801047c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801047e:	2300      	movs	r3, #0
 8010480:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010488:	2b00      	cmp	r3, #0
 801048a:	d10a      	bne.n	80104a2 <xQueueGenericSend+0x32>
	__asm volatile
 801048c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010490:	f383 8811 	msr	BASEPRI, r3
 8010494:	f3bf 8f6f 	isb	sy
 8010498:	f3bf 8f4f 	dsb	sy
 801049c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801049e:	bf00      	nop
 80104a0:	e7fe      	b.n	80104a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d103      	bne.n	80104b0 <xQueueGenericSend+0x40>
 80104a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d101      	bne.n	80104b4 <xQueueGenericSend+0x44>
 80104b0:	2301      	movs	r3, #1
 80104b2:	e000      	b.n	80104b6 <xQueueGenericSend+0x46>
 80104b4:	2300      	movs	r3, #0
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d10a      	bne.n	80104d0 <xQueueGenericSend+0x60>
	__asm volatile
 80104ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104be:	f383 8811 	msr	BASEPRI, r3
 80104c2:	f3bf 8f6f 	isb	sy
 80104c6:	f3bf 8f4f 	dsb	sy
 80104ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80104cc:	bf00      	nop
 80104ce:	e7fe      	b.n	80104ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	2b02      	cmp	r3, #2
 80104d4:	d103      	bne.n	80104de <xQueueGenericSend+0x6e>
 80104d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104da:	2b01      	cmp	r3, #1
 80104dc:	d101      	bne.n	80104e2 <xQueueGenericSend+0x72>
 80104de:	2301      	movs	r3, #1
 80104e0:	e000      	b.n	80104e4 <xQueueGenericSend+0x74>
 80104e2:	2300      	movs	r3, #0
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d10a      	bne.n	80104fe <xQueueGenericSend+0x8e>
	__asm volatile
 80104e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104ec:	f383 8811 	msr	BASEPRI, r3
 80104f0:	f3bf 8f6f 	isb	sy
 80104f4:	f3bf 8f4f 	dsb	sy
 80104f8:	623b      	str	r3, [r7, #32]
}
 80104fa:	bf00      	nop
 80104fc:	e7fe      	b.n	80104fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80104fe:	f001 fa89 	bl	8011a14 <xTaskGetSchedulerState>
 8010502:	4603      	mov	r3, r0
 8010504:	2b00      	cmp	r3, #0
 8010506:	d102      	bne.n	801050e <xQueueGenericSend+0x9e>
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d101      	bne.n	8010512 <xQueueGenericSend+0xa2>
 801050e:	2301      	movs	r3, #1
 8010510:	e000      	b.n	8010514 <xQueueGenericSend+0xa4>
 8010512:	2300      	movs	r3, #0
 8010514:	2b00      	cmp	r3, #0
 8010516:	d10a      	bne.n	801052e <xQueueGenericSend+0xbe>
	__asm volatile
 8010518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801051c:	f383 8811 	msr	BASEPRI, r3
 8010520:	f3bf 8f6f 	isb	sy
 8010524:	f3bf 8f4f 	dsb	sy
 8010528:	61fb      	str	r3, [r7, #28]
}
 801052a:	bf00      	nop
 801052c:	e7fe      	b.n	801052c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801052e:	f002 f9d1 	bl	80128d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801053a:	429a      	cmp	r2, r3
 801053c:	d302      	bcc.n	8010544 <xQueueGenericSend+0xd4>
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	2b02      	cmp	r3, #2
 8010542:	d129      	bne.n	8010598 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010544:	683a      	ldr	r2, [r7, #0]
 8010546:	68b9      	ldr	r1, [r7, #8]
 8010548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801054a:	f000 fa8b 	bl	8010a64 <prvCopyDataToQueue>
 801054e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010554:	2b00      	cmp	r3, #0
 8010556:	d010      	beq.n	801057a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801055a:	3324      	adds	r3, #36	; 0x24
 801055c:	4618      	mov	r0, r3
 801055e:	f001 f897 	bl	8011690 <xTaskRemoveFromEventList>
 8010562:	4603      	mov	r3, r0
 8010564:	2b00      	cmp	r3, #0
 8010566:	d013      	beq.n	8010590 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010568:	4b3f      	ldr	r3, [pc, #252]	; (8010668 <xQueueGenericSend+0x1f8>)
 801056a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801056e:	601a      	str	r2, [r3, #0]
 8010570:	f3bf 8f4f 	dsb	sy
 8010574:	f3bf 8f6f 	isb	sy
 8010578:	e00a      	b.n	8010590 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801057a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801057c:	2b00      	cmp	r3, #0
 801057e:	d007      	beq.n	8010590 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010580:	4b39      	ldr	r3, [pc, #228]	; (8010668 <xQueueGenericSend+0x1f8>)
 8010582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010586:	601a      	str	r2, [r3, #0]
 8010588:	f3bf 8f4f 	dsb	sy
 801058c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010590:	f002 f9d0 	bl	8012934 <vPortExitCritical>
				return pdPASS;
 8010594:	2301      	movs	r3, #1
 8010596:	e063      	b.n	8010660 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d103      	bne.n	80105a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801059e:	f002 f9c9 	bl	8012934 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80105a2:	2300      	movs	r3, #0
 80105a4:	e05c      	b.n	8010660 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80105a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d106      	bne.n	80105ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80105ac:	f107 0314 	add.w	r3, r7, #20
 80105b0:	4618      	mov	r0, r3
 80105b2:	f001 f8d1 	bl	8011758 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80105b6:	2301      	movs	r3, #1
 80105b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80105ba:	f002 f9bb 	bl	8012934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80105be:	f000 fe21 	bl	8011204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80105c2:	f002 f987 	bl	80128d4 <vPortEnterCritical>
 80105c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80105cc:	b25b      	sxtb	r3, r3
 80105ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105d2:	d103      	bne.n	80105dc <xQueueGenericSend+0x16c>
 80105d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d6:	2200      	movs	r2, #0
 80105d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80105dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80105e2:	b25b      	sxtb	r3, r3
 80105e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105e8:	d103      	bne.n	80105f2 <xQueueGenericSend+0x182>
 80105ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ec:	2200      	movs	r2, #0
 80105ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80105f2:	f002 f99f 	bl	8012934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80105f6:	1d3a      	adds	r2, r7, #4
 80105f8:	f107 0314 	add.w	r3, r7, #20
 80105fc:	4611      	mov	r1, r2
 80105fe:	4618      	mov	r0, r3
 8010600:	f001 f8c0 	bl	8011784 <xTaskCheckForTimeOut>
 8010604:	4603      	mov	r3, r0
 8010606:	2b00      	cmp	r3, #0
 8010608:	d124      	bne.n	8010654 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801060a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801060c:	f000 fb22 	bl	8010c54 <prvIsQueueFull>
 8010610:	4603      	mov	r3, r0
 8010612:	2b00      	cmp	r3, #0
 8010614:	d018      	beq.n	8010648 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010618:	3310      	adds	r3, #16
 801061a:	687a      	ldr	r2, [r7, #4]
 801061c:	4611      	mov	r1, r2
 801061e:	4618      	mov	r0, r3
 8010620:	f000 ffe6 	bl	80115f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010626:	f000 faad 	bl	8010b84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801062a:	f000 fdf9 	bl	8011220 <xTaskResumeAll>
 801062e:	4603      	mov	r3, r0
 8010630:	2b00      	cmp	r3, #0
 8010632:	f47f af7c 	bne.w	801052e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010636:	4b0c      	ldr	r3, [pc, #48]	; (8010668 <xQueueGenericSend+0x1f8>)
 8010638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801063c:	601a      	str	r2, [r3, #0]
 801063e:	f3bf 8f4f 	dsb	sy
 8010642:	f3bf 8f6f 	isb	sy
 8010646:	e772      	b.n	801052e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801064a:	f000 fa9b 	bl	8010b84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801064e:	f000 fde7 	bl	8011220 <xTaskResumeAll>
 8010652:	e76c      	b.n	801052e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010656:	f000 fa95 	bl	8010b84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801065a:	f000 fde1 	bl	8011220 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801065e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010660:	4618      	mov	r0, r3
 8010662:	3738      	adds	r7, #56	; 0x38
 8010664:	46bd      	mov	sp, r7
 8010666:	bd80      	pop	{r7, pc}
 8010668:	e000ed04 	.word	0xe000ed04

0801066c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801066c:	b580      	push	{r7, lr}
 801066e:	b090      	sub	sp, #64	; 0x40
 8010670:	af00      	add	r7, sp, #0
 8010672:	60f8      	str	r0, [r7, #12]
 8010674:	60b9      	str	r1, [r7, #8]
 8010676:	607a      	str	r2, [r7, #4]
 8010678:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801067e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010680:	2b00      	cmp	r3, #0
 8010682:	d10a      	bne.n	801069a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010688:	f383 8811 	msr	BASEPRI, r3
 801068c:	f3bf 8f6f 	isb	sy
 8010690:	f3bf 8f4f 	dsb	sy
 8010694:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010696:	bf00      	nop
 8010698:	e7fe      	b.n	8010698 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d103      	bne.n	80106a8 <xQueueGenericSendFromISR+0x3c>
 80106a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d101      	bne.n	80106ac <xQueueGenericSendFromISR+0x40>
 80106a8:	2301      	movs	r3, #1
 80106aa:	e000      	b.n	80106ae <xQueueGenericSendFromISR+0x42>
 80106ac:	2300      	movs	r3, #0
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d10a      	bne.n	80106c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80106b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106b6:	f383 8811 	msr	BASEPRI, r3
 80106ba:	f3bf 8f6f 	isb	sy
 80106be:	f3bf 8f4f 	dsb	sy
 80106c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80106c4:	bf00      	nop
 80106c6:	e7fe      	b.n	80106c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	2b02      	cmp	r3, #2
 80106cc:	d103      	bne.n	80106d6 <xQueueGenericSendFromISR+0x6a>
 80106ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106d2:	2b01      	cmp	r3, #1
 80106d4:	d101      	bne.n	80106da <xQueueGenericSendFromISR+0x6e>
 80106d6:	2301      	movs	r3, #1
 80106d8:	e000      	b.n	80106dc <xQueueGenericSendFromISR+0x70>
 80106da:	2300      	movs	r3, #0
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d10a      	bne.n	80106f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80106e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106e4:	f383 8811 	msr	BASEPRI, r3
 80106e8:	f3bf 8f6f 	isb	sy
 80106ec:	f3bf 8f4f 	dsb	sy
 80106f0:	623b      	str	r3, [r7, #32]
}
 80106f2:	bf00      	nop
 80106f4:	e7fe      	b.n	80106f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80106f6:	f002 f9cf 	bl	8012a98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80106fa:	f3ef 8211 	mrs	r2, BASEPRI
 80106fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010702:	f383 8811 	msr	BASEPRI, r3
 8010706:	f3bf 8f6f 	isb	sy
 801070a:	f3bf 8f4f 	dsb	sy
 801070e:	61fa      	str	r2, [r7, #28]
 8010710:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010712:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010714:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801071a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801071c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801071e:	429a      	cmp	r2, r3
 8010720:	d302      	bcc.n	8010728 <xQueueGenericSendFromISR+0xbc>
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	2b02      	cmp	r3, #2
 8010726:	d12f      	bne.n	8010788 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801072a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801072e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010736:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010738:	683a      	ldr	r2, [r7, #0]
 801073a:	68b9      	ldr	r1, [r7, #8]
 801073c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801073e:	f000 f991 	bl	8010a64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010742:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010746:	f1b3 3fff 	cmp.w	r3, #4294967295
 801074a:	d112      	bne.n	8010772 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801074c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801074e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010750:	2b00      	cmp	r3, #0
 8010752:	d016      	beq.n	8010782 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010756:	3324      	adds	r3, #36	; 0x24
 8010758:	4618      	mov	r0, r3
 801075a:	f000 ff99 	bl	8011690 <xTaskRemoveFromEventList>
 801075e:	4603      	mov	r3, r0
 8010760:	2b00      	cmp	r3, #0
 8010762:	d00e      	beq.n	8010782 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d00b      	beq.n	8010782 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	2201      	movs	r2, #1
 801076e:	601a      	str	r2, [r3, #0]
 8010770:	e007      	b.n	8010782 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010772:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010776:	3301      	adds	r3, #1
 8010778:	b2db      	uxtb	r3, r3
 801077a:	b25a      	sxtb	r2, r3
 801077c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801077e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010782:	2301      	movs	r3, #1
 8010784:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010786:	e001      	b.n	801078c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010788:	2300      	movs	r3, #0
 801078a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801078c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801078e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010790:	697b      	ldr	r3, [r7, #20]
 8010792:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010796:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801079a:	4618      	mov	r0, r3
 801079c:	3740      	adds	r7, #64	; 0x40
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}
	...

080107a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b08c      	sub	sp, #48	; 0x30
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	60f8      	str	r0, [r7, #12]
 80107ac:	60b9      	str	r1, [r7, #8]
 80107ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80107b0:	2300      	movs	r3, #0
 80107b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80107b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d10a      	bne.n	80107d4 <xQueueReceive+0x30>
	__asm volatile
 80107be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107c2:	f383 8811 	msr	BASEPRI, r3
 80107c6:	f3bf 8f6f 	isb	sy
 80107ca:	f3bf 8f4f 	dsb	sy
 80107ce:	623b      	str	r3, [r7, #32]
}
 80107d0:	bf00      	nop
 80107d2:	e7fe      	b.n	80107d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d103      	bne.n	80107e2 <xQueueReceive+0x3e>
 80107da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d101      	bne.n	80107e6 <xQueueReceive+0x42>
 80107e2:	2301      	movs	r3, #1
 80107e4:	e000      	b.n	80107e8 <xQueueReceive+0x44>
 80107e6:	2300      	movs	r3, #0
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d10a      	bne.n	8010802 <xQueueReceive+0x5e>
	__asm volatile
 80107ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107f0:	f383 8811 	msr	BASEPRI, r3
 80107f4:	f3bf 8f6f 	isb	sy
 80107f8:	f3bf 8f4f 	dsb	sy
 80107fc:	61fb      	str	r3, [r7, #28]
}
 80107fe:	bf00      	nop
 8010800:	e7fe      	b.n	8010800 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010802:	f001 f907 	bl	8011a14 <xTaskGetSchedulerState>
 8010806:	4603      	mov	r3, r0
 8010808:	2b00      	cmp	r3, #0
 801080a:	d102      	bne.n	8010812 <xQueueReceive+0x6e>
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d101      	bne.n	8010816 <xQueueReceive+0x72>
 8010812:	2301      	movs	r3, #1
 8010814:	e000      	b.n	8010818 <xQueueReceive+0x74>
 8010816:	2300      	movs	r3, #0
 8010818:	2b00      	cmp	r3, #0
 801081a:	d10a      	bne.n	8010832 <xQueueReceive+0x8e>
	__asm volatile
 801081c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010820:	f383 8811 	msr	BASEPRI, r3
 8010824:	f3bf 8f6f 	isb	sy
 8010828:	f3bf 8f4f 	dsb	sy
 801082c:	61bb      	str	r3, [r7, #24]
}
 801082e:	bf00      	nop
 8010830:	e7fe      	b.n	8010830 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010832:	f002 f84f 	bl	80128d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801083a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801083c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801083e:	2b00      	cmp	r3, #0
 8010840:	d01f      	beq.n	8010882 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010842:	68b9      	ldr	r1, [r7, #8]
 8010844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010846:	f000 f977 	bl	8010b38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801084a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801084c:	1e5a      	subs	r2, r3, #1
 801084e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010850:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010854:	691b      	ldr	r3, [r3, #16]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d00f      	beq.n	801087a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801085a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801085c:	3310      	adds	r3, #16
 801085e:	4618      	mov	r0, r3
 8010860:	f000 ff16 	bl	8011690 <xTaskRemoveFromEventList>
 8010864:	4603      	mov	r3, r0
 8010866:	2b00      	cmp	r3, #0
 8010868:	d007      	beq.n	801087a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801086a:	4b3d      	ldr	r3, [pc, #244]	; (8010960 <xQueueReceive+0x1bc>)
 801086c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010870:	601a      	str	r2, [r3, #0]
 8010872:	f3bf 8f4f 	dsb	sy
 8010876:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801087a:	f002 f85b 	bl	8012934 <vPortExitCritical>
				return pdPASS;
 801087e:	2301      	movs	r3, #1
 8010880:	e069      	b.n	8010956 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d103      	bne.n	8010890 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010888:	f002 f854 	bl	8012934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801088c:	2300      	movs	r3, #0
 801088e:	e062      	b.n	8010956 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010892:	2b00      	cmp	r3, #0
 8010894:	d106      	bne.n	80108a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010896:	f107 0310 	add.w	r3, r7, #16
 801089a:	4618      	mov	r0, r3
 801089c:	f000 ff5c 	bl	8011758 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80108a0:	2301      	movs	r3, #1
 80108a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80108a4:	f002 f846 	bl	8012934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80108a8:	f000 fcac 	bl	8011204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80108ac:	f002 f812 	bl	80128d4 <vPortEnterCritical>
 80108b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80108b6:	b25b      	sxtb	r3, r3
 80108b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108bc:	d103      	bne.n	80108c6 <xQueueReceive+0x122>
 80108be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c0:	2200      	movs	r2, #0
 80108c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80108c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80108cc:	b25b      	sxtb	r3, r3
 80108ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108d2:	d103      	bne.n	80108dc <xQueueReceive+0x138>
 80108d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108d6:	2200      	movs	r2, #0
 80108d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80108dc:	f002 f82a 	bl	8012934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80108e0:	1d3a      	adds	r2, r7, #4
 80108e2:	f107 0310 	add.w	r3, r7, #16
 80108e6:	4611      	mov	r1, r2
 80108e8:	4618      	mov	r0, r3
 80108ea:	f000 ff4b 	bl	8011784 <xTaskCheckForTimeOut>
 80108ee:	4603      	mov	r3, r0
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d123      	bne.n	801093c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80108f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108f6:	f000 f997 	bl	8010c28 <prvIsQueueEmpty>
 80108fa:	4603      	mov	r3, r0
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d017      	beq.n	8010930 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010902:	3324      	adds	r3, #36	; 0x24
 8010904:	687a      	ldr	r2, [r7, #4]
 8010906:	4611      	mov	r1, r2
 8010908:	4618      	mov	r0, r3
 801090a:	f000 fe71 	bl	80115f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801090e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010910:	f000 f938 	bl	8010b84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010914:	f000 fc84 	bl	8011220 <xTaskResumeAll>
 8010918:	4603      	mov	r3, r0
 801091a:	2b00      	cmp	r3, #0
 801091c:	d189      	bne.n	8010832 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801091e:	4b10      	ldr	r3, [pc, #64]	; (8010960 <xQueueReceive+0x1bc>)
 8010920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010924:	601a      	str	r2, [r3, #0]
 8010926:	f3bf 8f4f 	dsb	sy
 801092a:	f3bf 8f6f 	isb	sy
 801092e:	e780      	b.n	8010832 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010932:	f000 f927 	bl	8010b84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010936:	f000 fc73 	bl	8011220 <xTaskResumeAll>
 801093a:	e77a      	b.n	8010832 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801093c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801093e:	f000 f921 	bl	8010b84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010942:	f000 fc6d 	bl	8011220 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010948:	f000 f96e 	bl	8010c28 <prvIsQueueEmpty>
 801094c:	4603      	mov	r3, r0
 801094e:	2b00      	cmp	r3, #0
 8010950:	f43f af6f 	beq.w	8010832 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010954:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010956:	4618      	mov	r0, r3
 8010958:	3730      	adds	r7, #48	; 0x30
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}
 801095e:	bf00      	nop
 8010960:	e000ed04 	.word	0xe000ed04

08010964 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b08e      	sub	sp, #56	; 0x38
 8010968:	af00      	add	r7, sp, #0
 801096a:	60f8      	str	r0, [r7, #12]
 801096c:	60b9      	str	r1, [r7, #8]
 801096e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010976:	2b00      	cmp	r3, #0
 8010978:	d10a      	bne.n	8010990 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801097a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801097e:	f383 8811 	msr	BASEPRI, r3
 8010982:	f3bf 8f6f 	isb	sy
 8010986:	f3bf 8f4f 	dsb	sy
 801098a:	623b      	str	r3, [r7, #32]
}
 801098c:	bf00      	nop
 801098e:	e7fe      	b.n	801098e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010990:	68bb      	ldr	r3, [r7, #8]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d103      	bne.n	801099e <xQueueReceiveFromISR+0x3a>
 8010996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801099a:	2b00      	cmp	r3, #0
 801099c:	d101      	bne.n	80109a2 <xQueueReceiveFromISR+0x3e>
 801099e:	2301      	movs	r3, #1
 80109a0:	e000      	b.n	80109a4 <xQueueReceiveFromISR+0x40>
 80109a2:	2300      	movs	r3, #0
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d10a      	bne.n	80109be <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80109a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ac:	f383 8811 	msr	BASEPRI, r3
 80109b0:	f3bf 8f6f 	isb	sy
 80109b4:	f3bf 8f4f 	dsb	sy
 80109b8:	61fb      	str	r3, [r7, #28]
}
 80109ba:	bf00      	nop
 80109bc:	e7fe      	b.n	80109bc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80109be:	f002 f86b 	bl	8012a98 <vPortValidateInterruptPriority>
	__asm volatile
 80109c2:	f3ef 8211 	mrs	r2, BASEPRI
 80109c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ca:	f383 8811 	msr	BASEPRI, r3
 80109ce:	f3bf 8f6f 	isb	sy
 80109d2:	f3bf 8f4f 	dsb	sy
 80109d6:	61ba      	str	r2, [r7, #24]
 80109d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80109da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80109dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80109de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80109e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d02f      	beq.n	8010a4a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80109ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80109f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80109f4:	68b9      	ldr	r1, [r7, #8]
 80109f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80109f8:	f000 f89e 	bl	8010b38 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80109fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109fe:	1e5a      	subs	r2, r3, #1
 8010a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a02:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010a04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a0c:	d112      	bne.n	8010a34 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a10:	691b      	ldr	r3, [r3, #16]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d016      	beq.n	8010a44 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a18:	3310      	adds	r3, #16
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f000 fe38 	bl	8011690 <xTaskRemoveFromEventList>
 8010a20:	4603      	mov	r3, r0
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d00e      	beq.n	8010a44 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d00b      	beq.n	8010a44 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2201      	movs	r2, #1
 8010a30:	601a      	str	r2, [r3, #0]
 8010a32:	e007      	b.n	8010a44 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010a34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a38:	3301      	adds	r3, #1
 8010a3a:	b2db      	uxtb	r3, r3
 8010a3c:	b25a      	sxtb	r2, r3
 8010a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010a44:	2301      	movs	r3, #1
 8010a46:	637b      	str	r3, [r7, #52]	; 0x34
 8010a48:	e001      	b.n	8010a4e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8010a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a50:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010a52:	693b      	ldr	r3, [r7, #16]
 8010a54:	f383 8811 	msr	BASEPRI, r3
}
 8010a58:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	3738      	adds	r7, #56	; 0x38
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bd80      	pop	{r7, pc}

08010a64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b086      	sub	sp, #24
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	60f8      	str	r0, [r7, #12]
 8010a6c:	60b9      	str	r1, [r7, #8]
 8010a6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010a70:	2300      	movs	r3, #0
 8010a72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d10d      	bne.n	8010a9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d14d      	bne.n	8010b26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	689b      	ldr	r3, [r3, #8]
 8010a8e:	4618      	mov	r0, r3
 8010a90:	f000 ffde 	bl	8011a50 <xTaskPriorityDisinherit>
 8010a94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	2200      	movs	r2, #0
 8010a9a:	609a      	str	r2, [r3, #8]
 8010a9c:	e043      	b.n	8010b26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d119      	bne.n	8010ad8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	6858      	ldr	r0, [r3, #4]
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aac:	461a      	mov	r2, r3
 8010aae:	68b9      	ldr	r1, [r7, #8]
 8010ab0:	f002 fb7f 	bl	80131b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	685a      	ldr	r2, [r3, #4]
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010abc:	441a      	add	r2, r3
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	685a      	ldr	r2, [r3, #4]
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	689b      	ldr	r3, [r3, #8]
 8010aca:	429a      	cmp	r2, r3
 8010acc:	d32b      	bcc.n	8010b26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	681a      	ldr	r2, [r3, #0]
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	605a      	str	r2, [r3, #4]
 8010ad6:	e026      	b.n	8010b26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	68d8      	ldr	r0, [r3, #12]
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ae0:	461a      	mov	r2, r3
 8010ae2:	68b9      	ldr	r1, [r7, #8]
 8010ae4:	f002 fb65 	bl	80131b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	68da      	ldr	r2, [r3, #12]
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010af0:	425b      	negs	r3, r3
 8010af2:	441a      	add	r2, r3
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	68da      	ldr	r2, [r3, #12]
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	429a      	cmp	r2, r3
 8010b02:	d207      	bcs.n	8010b14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	689a      	ldr	r2, [r3, #8]
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b0c:	425b      	negs	r3, r3
 8010b0e:	441a      	add	r2, r3
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	2b02      	cmp	r3, #2
 8010b18:	d105      	bne.n	8010b26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b1a:	693b      	ldr	r3, [r7, #16]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d002      	beq.n	8010b26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010b20:	693b      	ldr	r3, [r7, #16]
 8010b22:	3b01      	subs	r3, #1
 8010b24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010b26:	693b      	ldr	r3, [r7, #16]
 8010b28:	1c5a      	adds	r2, r3, #1
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010b2e:	697b      	ldr	r3, [r7, #20]
}
 8010b30:	4618      	mov	r0, r3
 8010b32:	3718      	adds	r7, #24
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bd80      	pop	{r7, pc}

08010b38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b082      	sub	sp, #8
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
 8010b40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d018      	beq.n	8010b7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	68da      	ldr	r2, [r3, #12]
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b52:	441a      	add	r2, r3
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	68da      	ldr	r2, [r3, #12]
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	689b      	ldr	r3, [r3, #8]
 8010b60:	429a      	cmp	r2, r3
 8010b62:	d303      	bcc.n	8010b6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681a      	ldr	r2, [r3, #0]
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	68d9      	ldr	r1, [r3, #12]
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b74:	461a      	mov	r2, r3
 8010b76:	6838      	ldr	r0, [r7, #0]
 8010b78:	f002 fb1b 	bl	80131b2 <memcpy>
	}
}
 8010b7c:	bf00      	nop
 8010b7e:	3708      	adds	r7, #8
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bd80      	pop	{r7, pc}

08010b84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b084      	sub	sp, #16
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010b8c:	f001 fea2 	bl	80128d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010b96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010b98:	e011      	b.n	8010bbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d012      	beq.n	8010bc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	3324      	adds	r3, #36	; 0x24
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f000 fd72 	bl	8011690 <xTaskRemoveFromEventList>
 8010bac:	4603      	mov	r3, r0
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d001      	beq.n	8010bb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010bb2:	f000 fe49 	bl	8011848 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010bb6:	7bfb      	ldrb	r3, [r7, #15]
 8010bb8:	3b01      	subs	r3, #1
 8010bba:	b2db      	uxtb	r3, r3
 8010bbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	dce9      	bgt.n	8010b9a <prvUnlockQueue+0x16>
 8010bc6:	e000      	b.n	8010bca <prvUnlockQueue+0x46>
					break;
 8010bc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	22ff      	movs	r2, #255	; 0xff
 8010bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010bd2:	f001 feaf 	bl	8012934 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010bd6:	f001 fe7d 	bl	80128d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010be0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010be2:	e011      	b.n	8010c08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	691b      	ldr	r3, [r3, #16]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d012      	beq.n	8010c12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	3310      	adds	r3, #16
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	f000 fd4d 	bl	8011690 <xTaskRemoveFromEventList>
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d001      	beq.n	8010c00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010bfc:	f000 fe24 	bl	8011848 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010c00:	7bbb      	ldrb	r3, [r7, #14]
 8010c02:	3b01      	subs	r3, #1
 8010c04:	b2db      	uxtb	r3, r3
 8010c06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010c08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	dce9      	bgt.n	8010be4 <prvUnlockQueue+0x60>
 8010c10:	e000      	b.n	8010c14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010c12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	22ff      	movs	r2, #255	; 0xff
 8010c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010c1c:	f001 fe8a 	bl	8012934 <vPortExitCritical>
}
 8010c20:	bf00      	nop
 8010c22:	3710      	adds	r7, #16
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}

08010c28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b084      	sub	sp, #16
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010c30:	f001 fe50 	bl	80128d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d102      	bne.n	8010c42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010c3c:	2301      	movs	r3, #1
 8010c3e:	60fb      	str	r3, [r7, #12]
 8010c40:	e001      	b.n	8010c46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010c42:	2300      	movs	r3, #0
 8010c44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010c46:	f001 fe75 	bl	8012934 <vPortExitCritical>

	return xReturn;
 8010c4a:	68fb      	ldr	r3, [r7, #12]
}
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3710      	adds	r7, #16
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}

08010c54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b084      	sub	sp, #16
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010c5c:	f001 fe3a 	bl	80128d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c68:	429a      	cmp	r2, r3
 8010c6a:	d102      	bne.n	8010c72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010c6c:	2301      	movs	r3, #1
 8010c6e:	60fb      	str	r3, [r7, #12]
 8010c70:	e001      	b.n	8010c76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010c72:	2300      	movs	r3, #0
 8010c74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010c76:	f001 fe5d 	bl	8012934 <vPortExitCritical>

	return xReturn;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
}
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	3710      	adds	r7, #16
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd80      	pop	{r7, pc}

08010c84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010c84:	b480      	push	{r7}
 8010c86:	b085      	sub	sp, #20
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
 8010c8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010c8e:	2300      	movs	r3, #0
 8010c90:	60fb      	str	r3, [r7, #12]
 8010c92:	e014      	b.n	8010cbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010c94:	4a0f      	ldr	r2, [pc, #60]	; (8010cd4 <vQueueAddToRegistry+0x50>)
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d10b      	bne.n	8010cb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010ca0:	490c      	ldr	r1, [pc, #48]	; (8010cd4 <vQueueAddToRegistry+0x50>)
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	683a      	ldr	r2, [r7, #0]
 8010ca6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010caa:	4a0a      	ldr	r2, [pc, #40]	; (8010cd4 <vQueueAddToRegistry+0x50>)
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	00db      	lsls	r3, r3, #3
 8010cb0:	4413      	add	r3, r2
 8010cb2:	687a      	ldr	r2, [r7, #4]
 8010cb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010cb6:	e006      	b.n	8010cc6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	3301      	adds	r3, #1
 8010cbc:	60fb      	str	r3, [r7, #12]
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	2b07      	cmp	r3, #7
 8010cc2:	d9e7      	bls.n	8010c94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010cc4:	bf00      	nop
 8010cc6:	bf00      	nop
 8010cc8:	3714      	adds	r7, #20
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd0:	4770      	bx	lr
 8010cd2:	bf00      	nop
 8010cd4:	20001ef0 	.word	0x20001ef0

08010cd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b086      	sub	sp, #24
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	60f8      	str	r0, [r7, #12]
 8010ce0:	60b9      	str	r1, [r7, #8]
 8010ce2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010ce8:	f001 fdf4 	bl	80128d4 <vPortEnterCritical>
 8010cec:	697b      	ldr	r3, [r7, #20]
 8010cee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010cf2:	b25b      	sxtb	r3, r3
 8010cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cf8:	d103      	bne.n	8010d02 <vQueueWaitForMessageRestricted+0x2a>
 8010cfa:	697b      	ldr	r3, [r7, #20]
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010d02:	697b      	ldr	r3, [r7, #20]
 8010d04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d08:	b25b      	sxtb	r3, r3
 8010d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d0e:	d103      	bne.n	8010d18 <vQueueWaitForMessageRestricted+0x40>
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	2200      	movs	r2, #0
 8010d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010d18:	f001 fe0c 	bl	8012934 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010d1c:	697b      	ldr	r3, [r7, #20]
 8010d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d106      	bne.n	8010d32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010d24:	697b      	ldr	r3, [r7, #20]
 8010d26:	3324      	adds	r3, #36	; 0x24
 8010d28:	687a      	ldr	r2, [r7, #4]
 8010d2a:	68b9      	ldr	r1, [r7, #8]
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	f000 fc83 	bl	8011638 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010d32:	6978      	ldr	r0, [r7, #20]
 8010d34:	f7ff ff26 	bl	8010b84 <prvUnlockQueue>
	}
 8010d38:	bf00      	nop
 8010d3a:	3718      	adds	r7, #24
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	bd80      	pop	{r7, pc}

08010d40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b08e      	sub	sp, #56	; 0x38
 8010d44:	af04      	add	r7, sp, #16
 8010d46:	60f8      	str	r0, [r7, #12]
 8010d48:	60b9      	str	r1, [r7, #8]
 8010d4a:	607a      	str	r2, [r7, #4]
 8010d4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d10a      	bne.n	8010d6a <xTaskCreateStatic+0x2a>
	__asm volatile
 8010d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d58:	f383 8811 	msr	BASEPRI, r3
 8010d5c:	f3bf 8f6f 	isb	sy
 8010d60:	f3bf 8f4f 	dsb	sy
 8010d64:	623b      	str	r3, [r7, #32]
}
 8010d66:	bf00      	nop
 8010d68:	e7fe      	b.n	8010d68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d10a      	bne.n	8010d86 <xTaskCreateStatic+0x46>
	__asm volatile
 8010d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d74:	f383 8811 	msr	BASEPRI, r3
 8010d78:	f3bf 8f6f 	isb	sy
 8010d7c:	f3bf 8f4f 	dsb	sy
 8010d80:	61fb      	str	r3, [r7, #28]
}
 8010d82:	bf00      	nop
 8010d84:	e7fe      	b.n	8010d84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010d86:	23c0      	movs	r3, #192	; 0xc0
 8010d88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	2bc0      	cmp	r3, #192	; 0xc0
 8010d8e:	d00a      	beq.n	8010da6 <xTaskCreateStatic+0x66>
	__asm volatile
 8010d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d94:	f383 8811 	msr	BASEPRI, r3
 8010d98:	f3bf 8f6f 	isb	sy
 8010d9c:	f3bf 8f4f 	dsb	sy
 8010da0:	61bb      	str	r3, [r7, #24]
}
 8010da2:	bf00      	nop
 8010da4:	e7fe      	b.n	8010da4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010da6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d01e      	beq.n	8010dec <xTaskCreateStatic+0xac>
 8010dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d01b      	beq.n	8010dec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010db6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010dbc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc0:	2202      	movs	r2, #2
 8010dc2:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	9303      	str	r3, [sp, #12]
 8010dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dcc:	9302      	str	r3, [sp, #8]
 8010dce:	f107 0314 	add.w	r3, r7, #20
 8010dd2:	9301      	str	r3, [sp, #4]
 8010dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dd6:	9300      	str	r3, [sp, #0]
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	687a      	ldr	r2, [r7, #4]
 8010ddc:	68b9      	ldr	r1, [r7, #8]
 8010dde:	68f8      	ldr	r0, [r7, #12]
 8010de0:	f000 f850 	bl	8010e84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010de4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010de6:	f000 f8f7 	bl	8010fd8 <prvAddNewTaskToReadyList>
 8010dea:	e001      	b.n	8010df0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010dec:	2300      	movs	r3, #0
 8010dee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010df0:	697b      	ldr	r3, [r7, #20]
	}
 8010df2:	4618      	mov	r0, r3
 8010df4:	3728      	adds	r7, #40	; 0x28
 8010df6:	46bd      	mov	sp, r7
 8010df8:	bd80      	pop	{r7, pc}

08010dfa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010dfa:	b580      	push	{r7, lr}
 8010dfc:	b08c      	sub	sp, #48	; 0x30
 8010dfe:	af04      	add	r7, sp, #16
 8010e00:	60f8      	str	r0, [r7, #12]
 8010e02:	60b9      	str	r1, [r7, #8]
 8010e04:	603b      	str	r3, [r7, #0]
 8010e06:	4613      	mov	r3, r2
 8010e08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010e0a:	88fb      	ldrh	r3, [r7, #6]
 8010e0c:	009b      	lsls	r3, r3, #2
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f001 fe82 	bl	8012b18 <pvPortMalloc>
 8010e14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010e16:	697b      	ldr	r3, [r7, #20]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d00e      	beq.n	8010e3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010e1c:	20c0      	movs	r0, #192	; 0xc0
 8010e1e:	f001 fe7b 	bl	8012b18 <pvPortMalloc>
 8010e22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010e24:	69fb      	ldr	r3, [r7, #28]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d003      	beq.n	8010e32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010e2a:	69fb      	ldr	r3, [r7, #28]
 8010e2c:	697a      	ldr	r2, [r7, #20]
 8010e2e:	631a      	str	r2, [r3, #48]	; 0x30
 8010e30:	e005      	b.n	8010e3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010e32:	6978      	ldr	r0, [r7, #20]
 8010e34:	f001 ff3c 	bl	8012cb0 <vPortFree>
 8010e38:	e001      	b.n	8010e3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010e3e:	69fb      	ldr	r3, [r7, #28]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d017      	beq.n	8010e74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010e44:	69fb      	ldr	r3, [r7, #28]
 8010e46:	2200      	movs	r2, #0
 8010e48:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010e4c:	88fa      	ldrh	r2, [r7, #6]
 8010e4e:	2300      	movs	r3, #0
 8010e50:	9303      	str	r3, [sp, #12]
 8010e52:	69fb      	ldr	r3, [r7, #28]
 8010e54:	9302      	str	r3, [sp, #8]
 8010e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e58:	9301      	str	r3, [sp, #4]
 8010e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e5c:	9300      	str	r3, [sp, #0]
 8010e5e:	683b      	ldr	r3, [r7, #0]
 8010e60:	68b9      	ldr	r1, [r7, #8]
 8010e62:	68f8      	ldr	r0, [r7, #12]
 8010e64:	f000 f80e 	bl	8010e84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010e68:	69f8      	ldr	r0, [r7, #28]
 8010e6a:	f000 f8b5 	bl	8010fd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010e6e:	2301      	movs	r3, #1
 8010e70:	61bb      	str	r3, [r7, #24]
 8010e72:	e002      	b.n	8010e7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010e74:	f04f 33ff 	mov.w	r3, #4294967295
 8010e78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010e7a:	69bb      	ldr	r3, [r7, #24]
	}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3720      	adds	r7, #32
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd80      	pop	{r7, pc}

08010e84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b088      	sub	sp, #32
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	60f8      	str	r0, [r7, #12]
 8010e8c:	60b9      	str	r1, [r7, #8]
 8010e8e:	607a      	str	r2, [r7, #4]
 8010e90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	009b      	lsls	r3, r3, #2
 8010e9a:	461a      	mov	r2, r3
 8010e9c:	21a5      	movs	r1, #165	; 0xa5
 8010e9e:	f002 f9b0 	bl	8013202 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010eac:	3b01      	subs	r3, #1
 8010eae:	009b      	lsls	r3, r3, #2
 8010eb0:	4413      	add	r3, r2
 8010eb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010eb4:	69bb      	ldr	r3, [r7, #24]
 8010eb6:	f023 0307 	bic.w	r3, r3, #7
 8010eba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010ebc:	69bb      	ldr	r3, [r7, #24]
 8010ebe:	f003 0307 	and.w	r3, r3, #7
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d00a      	beq.n	8010edc <prvInitialiseNewTask+0x58>
	__asm volatile
 8010ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eca:	f383 8811 	msr	BASEPRI, r3
 8010ece:	f3bf 8f6f 	isb	sy
 8010ed2:	f3bf 8f4f 	dsb	sy
 8010ed6:	617b      	str	r3, [r7, #20]
}
 8010ed8:	bf00      	nop
 8010eda:	e7fe      	b.n	8010eda <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d01f      	beq.n	8010f22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	61fb      	str	r3, [r7, #28]
 8010ee6:	e012      	b.n	8010f0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010ee8:	68ba      	ldr	r2, [r7, #8]
 8010eea:	69fb      	ldr	r3, [r7, #28]
 8010eec:	4413      	add	r3, r2
 8010eee:	7819      	ldrb	r1, [r3, #0]
 8010ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ef2:	69fb      	ldr	r3, [r7, #28]
 8010ef4:	4413      	add	r3, r2
 8010ef6:	3334      	adds	r3, #52	; 0x34
 8010ef8:	460a      	mov	r2, r1
 8010efa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010efc:	68ba      	ldr	r2, [r7, #8]
 8010efe:	69fb      	ldr	r3, [r7, #28]
 8010f00:	4413      	add	r3, r2
 8010f02:	781b      	ldrb	r3, [r3, #0]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d006      	beq.n	8010f16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010f08:	69fb      	ldr	r3, [r7, #28]
 8010f0a:	3301      	adds	r3, #1
 8010f0c:	61fb      	str	r3, [r7, #28]
 8010f0e:	69fb      	ldr	r3, [r7, #28]
 8010f10:	2b0f      	cmp	r3, #15
 8010f12:	d9e9      	bls.n	8010ee8 <prvInitialiseNewTask+0x64>
 8010f14:	e000      	b.n	8010f18 <prvInitialiseNewTask+0x94>
			{
				break;
 8010f16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010f20:	e003      	b.n	8010f2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f24:	2200      	movs	r2, #0
 8010f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f2c:	2b37      	cmp	r3, #55	; 0x37
 8010f2e:	d901      	bls.n	8010f34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010f30:	2337      	movs	r3, #55	; 0x37
 8010f32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f42:	2200      	movs	r2, #0
 8010f44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f48:	3304      	adds	r3, #4
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f7ff f8be 	bl	80100cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f52:	3318      	adds	r3, #24
 8010f54:	4618      	mov	r0, r3
 8010f56:	f7ff f8b9 	bl	80100cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8010f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f72:	2200      	movs	r2, #0
 8010f74:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f78:	2200      	movs	r2, #0
 8010f7a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f80:	2200      	movs	r2, #0
 8010f82:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f88:	3358      	adds	r3, #88	; 0x58
 8010f8a:	2260      	movs	r2, #96	; 0x60
 8010f8c:	2100      	movs	r1, #0
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f002 f937 	bl	8013202 <memset>
 8010f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f96:	4a0d      	ldr	r2, [pc, #52]	; (8010fcc <prvInitialiseNewTask+0x148>)
 8010f98:	65da      	str	r2, [r3, #92]	; 0x5c
 8010f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f9c:	4a0c      	ldr	r2, [pc, #48]	; (8010fd0 <prvInitialiseNewTask+0x14c>)
 8010f9e:	661a      	str	r2, [r3, #96]	; 0x60
 8010fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fa2:	4a0c      	ldr	r2, [pc, #48]	; (8010fd4 <prvInitialiseNewTask+0x150>)
 8010fa4:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010fa6:	683a      	ldr	r2, [r7, #0]
 8010fa8:	68f9      	ldr	r1, [r7, #12]
 8010faa:	69b8      	ldr	r0, [r7, #24]
 8010fac:	f001 fb62 	bl	8012674 <pxPortInitialiseStack>
 8010fb0:	4602      	mov	r2, r0
 8010fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fb4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d002      	beq.n	8010fc2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010fc2:	bf00      	nop
 8010fc4:	3720      	adds	r7, #32
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}
 8010fca:	bf00      	nop
 8010fcc:	08017e5c 	.word	0x08017e5c
 8010fd0:	08017e7c 	.word	0x08017e7c
 8010fd4:	08017e3c 	.word	0x08017e3c

08010fd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b082      	sub	sp, #8
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010fe0:	f001 fc78 	bl	80128d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010fe4:	4b2d      	ldr	r3, [pc, #180]	; (801109c <prvAddNewTaskToReadyList+0xc4>)
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	3301      	adds	r3, #1
 8010fea:	4a2c      	ldr	r2, [pc, #176]	; (801109c <prvAddNewTaskToReadyList+0xc4>)
 8010fec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010fee:	4b2c      	ldr	r3, [pc, #176]	; (80110a0 <prvAddNewTaskToReadyList+0xc8>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d109      	bne.n	801100a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010ff6:	4a2a      	ldr	r2, [pc, #168]	; (80110a0 <prvAddNewTaskToReadyList+0xc8>)
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010ffc:	4b27      	ldr	r3, [pc, #156]	; (801109c <prvAddNewTaskToReadyList+0xc4>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	2b01      	cmp	r3, #1
 8011002:	d110      	bne.n	8011026 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011004:	f000 fc44 	bl	8011890 <prvInitialiseTaskLists>
 8011008:	e00d      	b.n	8011026 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801100a:	4b26      	ldr	r3, [pc, #152]	; (80110a4 <prvAddNewTaskToReadyList+0xcc>)
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d109      	bne.n	8011026 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011012:	4b23      	ldr	r3, [pc, #140]	; (80110a0 <prvAddNewTaskToReadyList+0xc8>)
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801101c:	429a      	cmp	r2, r3
 801101e:	d802      	bhi.n	8011026 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011020:	4a1f      	ldr	r2, [pc, #124]	; (80110a0 <prvAddNewTaskToReadyList+0xc8>)
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011026:	4b20      	ldr	r3, [pc, #128]	; (80110a8 <prvAddNewTaskToReadyList+0xd0>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	3301      	adds	r3, #1
 801102c:	4a1e      	ldr	r2, [pc, #120]	; (80110a8 <prvAddNewTaskToReadyList+0xd0>)
 801102e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011030:	4b1d      	ldr	r3, [pc, #116]	; (80110a8 <prvAddNewTaskToReadyList+0xd0>)
 8011032:	681a      	ldr	r2, [r3, #0]
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801103c:	4b1b      	ldr	r3, [pc, #108]	; (80110ac <prvAddNewTaskToReadyList+0xd4>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	429a      	cmp	r2, r3
 8011042:	d903      	bls.n	801104c <prvAddNewTaskToReadyList+0x74>
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011048:	4a18      	ldr	r2, [pc, #96]	; (80110ac <prvAddNewTaskToReadyList+0xd4>)
 801104a:	6013      	str	r3, [r2, #0]
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011050:	4613      	mov	r3, r2
 8011052:	009b      	lsls	r3, r3, #2
 8011054:	4413      	add	r3, r2
 8011056:	009b      	lsls	r3, r3, #2
 8011058:	4a15      	ldr	r2, [pc, #84]	; (80110b0 <prvAddNewTaskToReadyList+0xd8>)
 801105a:	441a      	add	r2, r3
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	3304      	adds	r3, #4
 8011060:	4619      	mov	r1, r3
 8011062:	4610      	mov	r0, r2
 8011064:	f7ff f83f 	bl	80100e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011068:	f001 fc64 	bl	8012934 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801106c:	4b0d      	ldr	r3, [pc, #52]	; (80110a4 <prvAddNewTaskToReadyList+0xcc>)
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d00e      	beq.n	8011092 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011074:	4b0a      	ldr	r3, [pc, #40]	; (80110a0 <prvAddNewTaskToReadyList+0xc8>)
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801107e:	429a      	cmp	r2, r3
 8011080:	d207      	bcs.n	8011092 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011082:	4b0c      	ldr	r3, [pc, #48]	; (80110b4 <prvAddNewTaskToReadyList+0xdc>)
 8011084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011088:	601a      	str	r2, [r3, #0]
 801108a:	f3bf 8f4f 	dsb	sy
 801108e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011092:	bf00      	nop
 8011094:	3708      	adds	r7, #8
 8011096:	46bd      	mov	sp, r7
 8011098:	bd80      	pop	{r7, pc}
 801109a:	bf00      	nop
 801109c:	20002404 	.word	0x20002404
 80110a0:	20001f30 	.word	0x20001f30
 80110a4:	20002410 	.word	0x20002410
 80110a8:	20002420 	.word	0x20002420
 80110ac:	2000240c 	.word	0x2000240c
 80110b0:	20001f34 	.word	0x20001f34
 80110b4:	e000ed04 	.word	0xe000ed04

080110b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b084      	sub	sp, #16
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80110c0:	2300      	movs	r3, #0
 80110c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d017      	beq.n	80110fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80110ca:	4b13      	ldr	r3, [pc, #76]	; (8011118 <vTaskDelay+0x60>)
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d00a      	beq.n	80110e8 <vTaskDelay+0x30>
	__asm volatile
 80110d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110d6:	f383 8811 	msr	BASEPRI, r3
 80110da:	f3bf 8f6f 	isb	sy
 80110de:	f3bf 8f4f 	dsb	sy
 80110e2:	60bb      	str	r3, [r7, #8]
}
 80110e4:	bf00      	nop
 80110e6:	e7fe      	b.n	80110e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80110e8:	f000 f88c 	bl	8011204 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80110ec:	2100      	movs	r1, #0
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f000 ff1e 	bl	8011f30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80110f4:	f000 f894 	bl	8011220 <xTaskResumeAll>
 80110f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d107      	bne.n	8011110 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011100:	4b06      	ldr	r3, [pc, #24]	; (801111c <vTaskDelay+0x64>)
 8011102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011106:	601a      	str	r2, [r3, #0]
 8011108:	f3bf 8f4f 	dsb	sy
 801110c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011110:	bf00      	nop
 8011112:	3710      	adds	r7, #16
 8011114:	46bd      	mov	sp, r7
 8011116:	bd80      	pop	{r7, pc}
 8011118:	2000242c 	.word	0x2000242c
 801111c:	e000ed04 	.word	0xe000ed04

08011120 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b08a      	sub	sp, #40	; 0x28
 8011124:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011126:	2300      	movs	r3, #0
 8011128:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801112a:	2300      	movs	r3, #0
 801112c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801112e:	463a      	mov	r2, r7
 8011130:	1d39      	adds	r1, r7, #4
 8011132:	f107 0308 	add.w	r3, r7, #8
 8011136:	4618      	mov	r0, r3
 8011138:	f7fe ff74 	bl	8010024 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801113c:	6839      	ldr	r1, [r7, #0]
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	68ba      	ldr	r2, [r7, #8]
 8011142:	9202      	str	r2, [sp, #8]
 8011144:	9301      	str	r3, [sp, #4]
 8011146:	2300      	movs	r3, #0
 8011148:	9300      	str	r3, [sp, #0]
 801114a:	2300      	movs	r3, #0
 801114c:	460a      	mov	r2, r1
 801114e:	4925      	ldr	r1, [pc, #148]	; (80111e4 <vTaskStartScheduler+0xc4>)
 8011150:	4825      	ldr	r0, [pc, #148]	; (80111e8 <vTaskStartScheduler+0xc8>)
 8011152:	f7ff fdf5 	bl	8010d40 <xTaskCreateStatic>
 8011156:	4603      	mov	r3, r0
 8011158:	4a24      	ldr	r2, [pc, #144]	; (80111ec <vTaskStartScheduler+0xcc>)
 801115a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801115c:	4b23      	ldr	r3, [pc, #140]	; (80111ec <vTaskStartScheduler+0xcc>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d002      	beq.n	801116a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011164:	2301      	movs	r3, #1
 8011166:	617b      	str	r3, [r7, #20]
 8011168:	e001      	b.n	801116e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801116a:	2300      	movs	r3, #0
 801116c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801116e:	697b      	ldr	r3, [r7, #20]
 8011170:	2b01      	cmp	r3, #1
 8011172:	d102      	bne.n	801117a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011174:	f000 ff30 	bl	8011fd8 <xTimerCreateTimerTask>
 8011178:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801117a:	697b      	ldr	r3, [r7, #20]
 801117c:	2b01      	cmp	r3, #1
 801117e:	d11d      	bne.n	80111bc <vTaskStartScheduler+0x9c>
	__asm volatile
 8011180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011184:	f383 8811 	msr	BASEPRI, r3
 8011188:	f3bf 8f6f 	isb	sy
 801118c:	f3bf 8f4f 	dsb	sy
 8011190:	613b      	str	r3, [r7, #16]
}
 8011192:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011194:	4b16      	ldr	r3, [pc, #88]	; (80111f0 <vTaskStartScheduler+0xd0>)
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	3358      	adds	r3, #88	; 0x58
 801119a:	4a16      	ldr	r2, [pc, #88]	; (80111f4 <vTaskStartScheduler+0xd4>)
 801119c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801119e:	4b16      	ldr	r3, [pc, #88]	; (80111f8 <vTaskStartScheduler+0xd8>)
 80111a0:	f04f 32ff 	mov.w	r2, #4294967295
 80111a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80111a6:	4b15      	ldr	r3, [pc, #84]	; (80111fc <vTaskStartScheduler+0xdc>)
 80111a8:	2201      	movs	r2, #1
 80111aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80111ac:	4b14      	ldr	r3, [pc, #80]	; (8011200 <vTaskStartScheduler+0xe0>)
 80111ae:	2200      	movs	r2, #0
 80111b0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80111b2:	f7ef fea3 	bl	8000efc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80111b6:	f001 faeb 	bl	8012790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80111ba:	e00e      	b.n	80111da <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80111bc:	697b      	ldr	r3, [r7, #20]
 80111be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111c2:	d10a      	bne.n	80111da <vTaskStartScheduler+0xba>
	__asm volatile
 80111c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111c8:	f383 8811 	msr	BASEPRI, r3
 80111cc:	f3bf 8f6f 	isb	sy
 80111d0:	f3bf 8f4f 	dsb	sy
 80111d4:	60fb      	str	r3, [r7, #12]
}
 80111d6:	bf00      	nop
 80111d8:	e7fe      	b.n	80111d8 <vTaskStartScheduler+0xb8>
}
 80111da:	bf00      	nop
 80111dc:	3718      	adds	r7, #24
 80111de:	46bd      	mov	sp, r7
 80111e0:	bd80      	pop	{r7, pc}
 80111e2:	bf00      	nop
 80111e4:	0801797c 	.word	0x0801797c
 80111e8:	08011861 	.word	0x08011861
 80111ec:	20002428 	.word	0x20002428
 80111f0:	20001f30 	.word	0x20001f30
 80111f4:	20000054 	.word	0x20000054
 80111f8:	20002424 	.word	0x20002424
 80111fc:	20002410 	.word	0x20002410
 8011200:	20002408 	.word	0x20002408

08011204 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011204:	b480      	push	{r7}
 8011206:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011208:	4b04      	ldr	r3, [pc, #16]	; (801121c <vTaskSuspendAll+0x18>)
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	3301      	adds	r3, #1
 801120e:	4a03      	ldr	r2, [pc, #12]	; (801121c <vTaskSuspendAll+0x18>)
 8011210:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011212:	bf00      	nop
 8011214:	46bd      	mov	sp, r7
 8011216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121a:	4770      	bx	lr
 801121c:	2000242c 	.word	0x2000242c

08011220 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b084      	sub	sp, #16
 8011224:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011226:	2300      	movs	r3, #0
 8011228:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801122a:	2300      	movs	r3, #0
 801122c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801122e:	4b42      	ldr	r3, [pc, #264]	; (8011338 <xTaskResumeAll+0x118>)
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d10a      	bne.n	801124c <xTaskResumeAll+0x2c>
	__asm volatile
 8011236:	f04f 0350 	mov.w	r3, #80	; 0x50
 801123a:	f383 8811 	msr	BASEPRI, r3
 801123e:	f3bf 8f6f 	isb	sy
 8011242:	f3bf 8f4f 	dsb	sy
 8011246:	603b      	str	r3, [r7, #0]
}
 8011248:	bf00      	nop
 801124a:	e7fe      	b.n	801124a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801124c:	f001 fb42 	bl	80128d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011250:	4b39      	ldr	r3, [pc, #228]	; (8011338 <xTaskResumeAll+0x118>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	3b01      	subs	r3, #1
 8011256:	4a38      	ldr	r2, [pc, #224]	; (8011338 <xTaskResumeAll+0x118>)
 8011258:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801125a:	4b37      	ldr	r3, [pc, #220]	; (8011338 <xTaskResumeAll+0x118>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d162      	bne.n	8011328 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011262:	4b36      	ldr	r3, [pc, #216]	; (801133c <xTaskResumeAll+0x11c>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d05e      	beq.n	8011328 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801126a:	e02f      	b.n	80112cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801126c:	4b34      	ldr	r3, [pc, #208]	; (8011340 <xTaskResumeAll+0x120>)
 801126e:	68db      	ldr	r3, [r3, #12]
 8011270:	68db      	ldr	r3, [r3, #12]
 8011272:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	3318      	adds	r3, #24
 8011278:	4618      	mov	r0, r3
 801127a:	f7fe ff91 	bl	80101a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	3304      	adds	r3, #4
 8011282:	4618      	mov	r0, r3
 8011284:	f7fe ff8c 	bl	80101a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801128c:	4b2d      	ldr	r3, [pc, #180]	; (8011344 <xTaskResumeAll+0x124>)
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	429a      	cmp	r2, r3
 8011292:	d903      	bls.n	801129c <xTaskResumeAll+0x7c>
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011298:	4a2a      	ldr	r2, [pc, #168]	; (8011344 <xTaskResumeAll+0x124>)
 801129a:	6013      	str	r3, [r2, #0]
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112a0:	4613      	mov	r3, r2
 80112a2:	009b      	lsls	r3, r3, #2
 80112a4:	4413      	add	r3, r2
 80112a6:	009b      	lsls	r3, r3, #2
 80112a8:	4a27      	ldr	r2, [pc, #156]	; (8011348 <xTaskResumeAll+0x128>)
 80112aa:	441a      	add	r2, r3
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	3304      	adds	r3, #4
 80112b0:	4619      	mov	r1, r3
 80112b2:	4610      	mov	r0, r2
 80112b4:	f7fe ff17 	bl	80100e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112bc:	4b23      	ldr	r3, [pc, #140]	; (801134c <xTaskResumeAll+0x12c>)
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112c2:	429a      	cmp	r2, r3
 80112c4:	d302      	bcc.n	80112cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80112c6:	4b22      	ldr	r3, [pc, #136]	; (8011350 <xTaskResumeAll+0x130>)
 80112c8:	2201      	movs	r2, #1
 80112ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80112cc:	4b1c      	ldr	r3, [pc, #112]	; (8011340 <xTaskResumeAll+0x120>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d1cb      	bne.n	801126c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d001      	beq.n	80112de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80112da:	f000 fb7b 	bl	80119d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80112de:	4b1d      	ldr	r3, [pc, #116]	; (8011354 <xTaskResumeAll+0x134>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d010      	beq.n	801130c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80112ea:	f000 f847 	bl	801137c <xTaskIncrementTick>
 80112ee:	4603      	mov	r3, r0
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d002      	beq.n	80112fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80112f4:	4b16      	ldr	r3, [pc, #88]	; (8011350 <xTaskResumeAll+0x130>)
 80112f6:	2201      	movs	r2, #1
 80112f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	3b01      	subs	r3, #1
 80112fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d1f1      	bne.n	80112ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011306:	4b13      	ldr	r3, [pc, #76]	; (8011354 <xTaskResumeAll+0x134>)
 8011308:	2200      	movs	r2, #0
 801130a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801130c:	4b10      	ldr	r3, [pc, #64]	; (8011350 <xTaskResumeAll+0x130>)
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d009      	beq.n	8011328 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011314:	2301      	movs	r3, #1
 8011316:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011318:	4b0f      	ldr	r3, [pc, #60]	; (8011358 <xTaskResumeAll+0x138>)
 801131a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801131e:	601a      	str	r2, [r3, #0]
 8011320:	f3bf 8f4f 	dsb	sy
 8011324:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011328:	f001 fb04 	bl	8012934 <vPortExitCritical>

	return xAlreadyYielded;
 801132c:	68bb      	ldr	r3, [r7, #8]
}
 801132e:	4618      	mov	r0, r3
 8011330:	3710      	adds	r7, #16
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}
 8011336:	bf00      	nop
 8011338:	2000242c 	.word	0x2000242c
 801133c:	20002404 	.word	0x20002404
 8011340:	200023c4 	.word	0x200023c4
 8011344:	2000240c 	.word	0x2000240c
 8011348:	20001f34 	.word	0x20001f34
 801134c:	20001f30 	.word	0x20001f30
 8011350:	20002418 	.word	0x20002418
 8011354:	20002414 	.word	0x20002414
 8011358:	e000ed04 	.word	0xe000ed04

0801135c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801135c:	b480      	push	{r7}
 801135e:	b083      	sub	sp, #12
 8011360:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011362:	4b05      	ldr	r3, [pc, #20]	; (8011378 <xTaskGetTickCount+0x1c>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011368:	687b      	ldr	r3, [r7, #4]
}
 801136a:	4618      	mov	r0, r3
 801136c:	370c      	adds	r7, #12
 801136e:	46bd      	mov	sp, r7
 8011370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011374:	4770      	bx	lr
 8011376:	bf00      	nop
 8011378:	20002408 	.word	0x20002408

0801137c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b086      	sub	sp, #24
 8011380:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011382:	2300      	movs	r3, #0
 8011384:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011386:	4b4f      	ldr	r3, [pc, #316]	; (80114c4 <xTaskIncrementTick+0x148>)
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	2b00      	cmp	r3, #0
 801138c:	f040 808f 	bne.w	80114ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011390:	4b4d      	ldr	r3, [pc, #308]	; (80114c8 <xTaskIncrementTick+0x14c>)
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	3301      	adds	r3, #1
 8011396:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011398:	4a4b      	ldr	r2, [pc, #300]	; (80114c8 <xTaskIncrementTick+0x14c>)
 801139a:	693b      	ldr	r3, [r7, #16]
 801139c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801139e:	693b      	ldr	r3, [r7, #16]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d120      	bne.n	80113e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80113a4:	4b49      	ldr	r3, [pc, #292]	; (80114cc <xTaskIncrementTick+0x150>)
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d00a      	beq.n	80113c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80113ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113b2:	f383 8811 	msr	BASEPRI, r3
 80113b6:	f3bf 8f6f 	isb	sy
 80113ba:	f3bf 8f4f 	dsb	sy
 80113be:	603b      	str	r3, [r7, #0]
}
 80113c0:	bf00      	nop
 80113c2:	e7fe      	b.n	80113c2 <xTaskIncrementTick+0x46>
 80113c4:	4b41      	ldr	r3, [pc, #260]	; (80114cc <xTaskIncrementTick+0x150>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	60fb      	str	r3, [r7, #12]
 80113ca:	4b41      	ldr	r3, [pc, #260]	; (80114d0 <xTaskIncrementTick+0x154>)
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	4a3f      	ldr	r2, [pc, #252]	; (80114cc <xTaskIncrementTick+0x150>)
 80113d0:	6013      	str	r3, [r2, #0]
 80113d2:	4a3f      	ldr	r2, [pc, #252]	; (80114d0 <xTaskIncrementTick+0x154>)
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	6013      	str	r3, [r2, #0]
 80113d8:	4b3e      	ldr	r3, [pc, #248]	; (80114d4 <xTaskIncrementTick+0x158>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	3301      	adds	r3, #1
 80113de:	4a3d      	ldr	r2, [pc, #244]	; (80114d4 <xTaskIncrementTick+0x158>)
 80113e0:	6013      	str	r3, [r2, #0]
 80113e2:	f000 faf7 	bl	80119d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80113e6:	4b3c      	ldr	r3, [pc, #240]	; (80114d8 <xTaskIncrementTick+0x15c>)
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	693a      	ldr	r2, [r7, #16]
 80113ec:	429a      	cmp	r2, r3
 80113ee:	d349      	bcc.n	8011484 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80113f0:	4b36      	ldr	r3, [pc, #216]	; (80114cc <xTaskIncrementTick+0x150>)
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d104      	bne.n	8011404 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80113fa:	4b37      	ldr	r3, [pc, #220]	; (80114d8 <xTaskIncrementTick+0x15c>)
 80113fc:	f04f 32ff 	mov.w	r2, #4294967295
 8011400:	601a      	str	r2, [r3, #0]
					break;
 8011402:	e03f      	b.n	8011484 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011404:	4b31      	ldr	r3, [pc, #196]	; (80114cc <xTaskIncrementTick+0x150>)
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	68db      	ldr	r3, [r3, #12]
 801140a:	68db      	ldr	r3, [r3, #12]
 801140c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801140e:	68bb      	ldr	r3, [r7, #8]
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011414:	693a      	ldr	r2, [r7, #16]
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	429a      	cmp	r2, r3
 801141a:	d203      	bcs.n	8011424 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801141c:	4a2e      	ldr	r2, [pc, #184]	; (80114d8 <xTaskIncrementTick+0x15c>)
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011422:	e02f      	b.n	8011484 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	3304      	adds	r3, #4
 8011428:	4618      	mov	r0, r3
 801142a:	f7fe feb9 	bl	80101a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801142e:	68bb      	ldr	r3, [r7, #8]
 8011430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011432:	2b00      	cmp	r3, #0
 8011434:	d004      	beq.n	8011440 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	3318      	adds	r3, #24
 801143a:	4618      	mov	r0, r3
 801143c:	f7fe feb0 	bl	80101a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011440:	68bb      	ldr	r3, [r7, #8]
 8011442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011444:	4b25      	ldr	r3, [pc, #148]	; (80114dc <xTaskIncrementTick+0x160>)
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	429a      	cmp	r2, r3
 801144a:	d903      	bls.n	8011454 <xTaskIncrementTick+0xd8>
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011450:	4a22      	ldr	r2, [pc, #136]	; (80114dc <xTaskIncrementTick+0x160>)
 8011452:	6013      	str	r3, [r2, #0]
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011458:	4613      	mov	r3, r2
 801145a:	009b      	lsls	r3, r3, #2
 801145c:	4413      	add	r3, r2
 801145e:	009b      	lsls	r3, r3, #2
 8011460:	4a1f      	ldr	r2, [pc, #124]	; (80114e0 <xTaskIncrementTick+0x164>)
 8011462:	441a      	add	r2, r3
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	3304      	adds	r3, #4
 8011468:	4619      	mov	r1, r3
 801146a:	4610      	mov	r0, r2
 801146c:	f7fe fe3b 	bl	80100e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011470:	68bb      	ldr	r3, [r7, #8]
 8011472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011474:	4b1b      	ldr	r3, [pc, #108]	; (80114e4 <xTaskIncrementTick+0x168>)
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801147a:	429a      	cmp	r2, r3
 801147c:	d3b8      	bcc.n	80113f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801147e:	2301      	movs	r3, #1
 8011480:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011482:	e7b5      	b.n	80113f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011484:	4b17      	ldr	r3, [pc, #92]	; (80114e4 <xTaskIncrementTick+0x168>)
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801148a:	4915      	ldr	r1, [pc, #84]	; (80114e0 <xTaskIncrementTick+0x164>)
 801148c:	4613      	mov	r3, r2
 801148e:	009b      	lsls	r3, r3, #2
 8011490:	4413      	add	r3, r2
 8011492:	009b      	lsls	r3, r3, #2
 8011494:	440b      	add	r3, r1
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	2b01      	cmp	r3, #1
 801149a:	d901      	bls.n	80114a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801149c:	2301      	movs	r3, #1
 801149e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80114a0:	4b11      	ldr	r3, [pc, #68]	; (80114e8 <xTaskIncrementTick+0x16c>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d007      	beq.n	80114b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80114a8:	2301      	movs	r3, #1
 80114aa:	617b      	str	r3, [r7, #20]
 80114ac:	e004      	b.n	80114b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80114ae:	4b0f      	ldr	r3, [pc, #60]	; (80114ec <xTaskIncrementTick+0x170>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	3301      	adds	r3, #1
 80114b4:	4a0d      	ldr	r2, [pc, #52]	; (80114ec <xTaskIncrementTick+0x170>)
 80114b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80114b8:	697b      	ldr	r3, [r7, #20]
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	3718      	adds	r7, #24
 80114be:	46bd      	mov	sp, r7
 80114c0:	bd80      	pop	{r7, pc}
 80114c2:	bf00      	nop
 80114c4:	2000242c 	.word	0x2000242c
 80114c8:	20002408 	.word	0x20002408
 80114cc:	200023bc 	.word	0x200023bc
 80114d0:	200023c0 	.word	0x200023c0
 80114d4:	2000241c 	.word	0x2000241c
 80114d8:	20002424 	.word	0x20002424
 80114dc:	2000240c 	.word	0x2000240c
 80114e0:	20001f34 	.word	0x20001f34
 80114e4:	20001f30 	.word	0x20001f30
 80114e8:	20002418 	.word	0x20002418
 80114ec:	20002414 	.word	0x20002414

080114f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b084      	sub	sp, #16
 80114f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80114f6:	4b36      	ldr	r3, [pc, #216]	; (80115d0 <vTaskSwitchContext+0xe0>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d003      	beq.n	8011506 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80114fe:	4b35      	ldr	r3, [pc, #212]	; (80115d4 <vTaskSwitchContext+0xe4>)
 8011500:	2201      	movs	r2, #1
 8011502:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011504:	e05f      	b.n	80115c6 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8011506:	4b33      	ldr	r3, [pc, #204]	; (80115d4 <vTaskSwitchContext+0xe4>)
 8011508:	2200      	movs	r2, #0
 801150a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 801150c:	f7ef fd04 	bl	8000f18 <getRunTimeCounterValue>
 8011510:	4603      	mov	r3, r0
 8011512:	4a31      	ldr	r2, [pc, #196]	; (80115d8 <vTaskSwitchContext+0xe8>)
 8011514:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8011516:	4b30      	ldr	r3, [pc, #192]	; (80115d8 <vTaskSwitchContext+0xe8>)
 8011518:	681a      	ldr	r2, [r3, #0]
 801151a:	4b30      	ldr	r3, [pc, #192]	; (80115dc <vTaskSwitchContext+0xec>)
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	429a      	cmp	r2, r3
 8011520:	d909      	bls.n	8011536 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8011522:	4b2f      	ldr	r3, [pc, #188]	; (80115e0 <vTaskSwitchContext+0xf0>)
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011528:	4a2b      	ldr	r2, [pc, #172]	; (80115d8 <vTaskSwitchContext+0xe8>)
 801152a:	6810      	ldr	r0, [r2, #0]
 801152c:	4a2b      	ldr	r2, [pc, #172]	; (80115dc <vTaskSwitchContext+0xec>)
 801152e:	6812      	ldr	r2, [r2, #0]
 8011530:	1a82      	subs	r2, r0, r2
 8011532:	440a      	add	r2, r1
 8011534:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8011536:	4b28      	ldr	r3, [pc, #160]	; (80115d8 <vTaskSwitchContext+0xe8>)
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	4a28      	ldr	r2, [pc, #160]	; (80115dc <vTaskSwitchContext+0xec>)
 801153c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801153e:	4b29      	ldr	r3, [pc, #164]	; (80115e4 <vTaskSwitchContext+0xf4>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	60fb      	str	r3, [r7, #12]
 8011544:	e010      	b.n	8011568 <vTaskSwitchContext+0x78>
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d10a      	bne.n	8011562 <vTaskSwitchContext+0x72>
	__asm volatile
 801154c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011550:	f383 8811 	msr	BASEPRI, r3
 8011554:	f3bf 8f6f 	isb	sy
 8011558:	f3bf 8f4f 	dsb	sy
 801155c:	607b      	str	r3, [r7, #4]
}
 801155e:	bf00      	nop
 8011560:	e7fe      	b.n	8011560 <vTaskSwitchContext+0x70>
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	3b01      	subs	r3, #1
 8011566:	60fb      	str	r3, [r7, #12]
 8011568:	491f      	ldr	r1, [pc, #124]	; (80115e8 <vTaskSwitchContext+0xf8>)
 801156a:	68fa      	ldr	r2, [r7, #12]
 801156c:	4613      	mov	r3, r2
 801156e:	009b      	lsls	r3, r3, #2
 8011570:	4413      	add	r3, r2
 8011572:	009b      	lsls	r3, r3, #2
 8011574:	440b      	add	r3, r1
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d0e4      	beq.n	8011546 <vTaskSwitchContext+0x56>
 801157c:	68fa      	ldr	r2, [r7, #12]
 801157e:	4613      	mov	r3, r2
 8011580:	009b      	lsls	r3, r3, #2
 8011582:	4413      	add	r3, r2
 8011584:	009b      	lsls	r3, r3, #2
 8011586:	4a18      	ldr	r2, [pc, #96]	; (80115e8 <vTaskSwitchContext+0xf8>)
 8011588:	4413      	add	r3, r2
 801158a:	60bb      	str	r3, [r7, #8]
 801158c:	68bb      	ldr	r3, [r7, #8]
 801158e:	685b      	ldr	r3, [r3, #4]
 8011590:	685a      	ldr	r2, [r3, #4]
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	605a      	str	r2, [r3, #4]
 8011596:	68bb      	ldr	r3, [r7, #8]
 8011598:	685a      	ldr	r2, [r3, #4]
 801159a:	68bb      	ldr	r3, [r7, #8]
 801159c:	3308      	adds	r3, #8
 801159e:	429a      	cmp	r2, r3
 80115a0:	d104      	bne.n	80115ac <vTaskSwitchContext+0xbc>
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	685b      	ldr	r3, [r3, #4]
 80115a6:	685a      	ldr	r2, [r3, #4]
 80115a8:	68bb      	ldr	r3, [r7, #8]
 80115aa:	605a      	str	r2, [r3, #4]
 80115ac:	68bb      	ldr	r3, [r7, #8]
 80115ae:	685b      	ldr	r3, [r3, #4]
 80115b0:	68db      	ldr	r3, [r3, #12]
 80115b2:	4a0b      	ldr	r2, [pc, #44]	; (80115e0 <vTaskSwitchContext+0xf0>)
 80115b4:	6013      	str	r3, [r2, #0]
 80115b6:	4a0b      	ldr	r2, [pc, #44]	; (80115e4 <vTaskSwitchContext+0xf4>)
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80115bc:	4b08      	ldr	r3, [pc, #32]	; (80115e0 <vTaskSwitchContext+0xf0>)
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	3358      	adds	r3, #88	; 0x58
 80115c2:	4a0a      	ldr	r2, [pc, #40]	; (80115ec <vTaskSwitchContext+0xfc>)
 80115c4:	6013      	str	r3, [r2, #0]
}
 80115c6:	bf00      	nop
 80115c8:	3710      	adds	r7, #16
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}
 80115ce:	bf00      	nop
 80115d0:	2000242c 	.word	0x2000242c
 80115d4:	20002418 	.word	0x20002418
 80115d8:	20002434 	.word	0x20002434
 80115dc:	20002430 	.word	0x20002430
 80115e0:	20001f30 	.word	0x20001f30
 80115e4:	2000240c 	.word	0x2000240c
 80115e8:	20001f34 	.word	0x20001f34
 80115ec:	20000054 	.word	0x20000054

080115f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b084      	sub	sp, #16
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
 80115f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d10a      	bne.n	8011616 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011604:	f383 8811 	msr	BASEPRI, r3
 8011608:	f3bf 8f6f 	isb	sy
 801160c:	f3bf 8f4f 	dsb	sy
 8011610:	60fb      	str	r3, [r7, #12]
}
 8011612:	bf00      	nop
 8011614:	e7fe      	b.n	8011614 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011616:	4b07      	ldr	r3, [pc, #28]	; (8011634 <vTaskPlaceOnEventList+0x44>)
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	3318      	adds	r3, #24
 801161c:	4619      	mov	r1, r3
 801161e:	6878      	ldr	r0, [r7, #4]
 8011620:	f7fe fd85 	bl	801012e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011624:	2101      	movs	r1, #1
 8011626:	6838      	ldr	r0, [r7, #0]
 8011628:	f000 fc82 	bl	8011f30 <prvAddCurrentTaskToDelayedList>
}
 801162c:	bf00      	nop
 801162e:	3710      	adds	r7, #16
 8011630:	46bd      	mov	sp, r7
 8011632:	bd80      	pop	{r7, pc}
 8011634:	20001f30 	.word	0x20001f30

08011638 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011638:	b580      	push	{r7, lr}
 801163a:	b086      	sub	sp, #24
 801163c:	af00      	add	r7, sp, #0
 801163e:	60f8      	str	r0, [r7, #12]
 8011640:	60b9      	str	r1, [r7, #8]
 8011642:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d10a      	bne.n	8011660 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801164a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801164e:	f383 8811 	msr	BASEPRI, r3
 8011652:	f3bf 8f6f 	isb	sy
 8011656:	f3bf 8f4f 	dsb	sy
 801165a:	617b      	str	r3, [r7, #20]
}
 801165c:	bf00      	nop
 801165e:	e7fe      	b.n	801165e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011660:	4b0a      	ldr	r3, [pc, #40]	; (801168c <vTaskPlaceOnEventListRestricted+0x54>)
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	3318      	adds	r3, #24
 8011666:	4619      	mov	r1, r3
 8011668:	68f8      	ldr	r0, [r7, #12]
 801166a:	f7fe fd3c 	bl	80100e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d002      	beq.n	801167a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011674:	f04f 33ff 	mov.w	r3, #4294967295
 8011678:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801167a:	6879      	ldr	r1, [r7, #4]
 801167c:	68b8      	ldr	r0, [r7, #8]
 801167e:	f000 fc57 	bl	8011f30 <prvAddCurrentTaskToDelayedList>
	}
 8011682:	bf00      	nop
 8011684:	3718      	adds	r7, #24
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}
 801168a:	bf00      	nop
 801168c:	20001f30 	.word	0x20001f30

08011690 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b086      	sub	sp, #24
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	68db      	ldr	r3, [r3, #12]
 801169c:	68db      	ldr	r3, [r3, #12]
 801169e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80116a0:	693b      	ldr	r3, [r7, #16]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d10a      	bne.n	80116bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80116a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116aa:	f383 8811 	msr	BASEPRI, r3
 80116ae:	f3bf 8f6f 	isb	sy
 80116b2:	f3bf 8f4f 	dsb	sy
 80116b6:	60fb      	str	r3, [r7, #12]
}
 80116b8:	bf00      	nop
 80116ba:	e7fe      	b.n	80116ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80116bc:	693b      	ldr	r3, [r7, #16]
 80116be:	3318      	adds	r3, #24
 80116c0:	4618      	mov	r0, r3
 80116c2:	f7fe fd6d 	bl	80101a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80116c6:	4b1e      	ldr	r3, [pc, #120]	; (8011740 <xTaskRemoveFromEventList+0xb0>)
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d11d      	bne.n	801170a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80116ce:	693b      	ldr	r3, [r7, #16]
 80116d0:	3304      	adds	r3, #4
 80116d2:	4618      	mov	r0, r3
 80116d4:	f7fe fd64 	bl	80101a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80116d8:	693b      	ldr	r3, [r7, #16]
 80116da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116dc:	4b19      	ldr	r3, [pc, #100]	; (8011744 <xTaskRemoveFromEventList+0xb4>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	429a      	cmp	r2, r3
 80116e2:	d903      	bls.n	80116ec <xTaskRemoveFromEventList+0x5c>
 80116e4:	693b      	ldr	r3, [r7, #16]
 80116e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116e8:	4a16      	ldr	r2, [pc, #88]	; (8011744 <xTaskRemoveFromEventList+0xb4>)
 80116ea:	6013      	str	r3, [r2, #0]
 80116ec:	693b      	ldr	r3, [r7, #16]
 80116ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116f0:	4613      	mov	r3, r2
 80116f2:	009b      	lsls	r3, r3, #2
 80116f4:	4413      	add	r3, r2
 80116f6:	009b      	lsls	r3, r3, #2
 80116f8:	4a13      	ldr	r2, [pc, #76]	; (8011748 <xTaskRemoveFromEventList+0xb8>)
 80116fa:	441a      	add	r2, r3
 80116fc:	693b      	ldr	r3, [r7, #16]
 80116fe:	3304      	adds	r3, #4
 8011700:	4619      	mov	r1, r3
 8011702:	4610      	mov	r0, r2
 8011704:	f7fe fcef 	bl	80100e6 <vListInsertEnd>
 8011708:	e005      	b.n	8011716 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801170a:	693b      	ldr	r3, [r7, #16]
 801170c:	3318      	adds	r3, #24
 801170e:	4619      	mov	r1, r3
 8011710:	480e      	ldr	r0, [pc, #56]	; (801174c <xTaskRemoveFromEventList+0xbc>)
 8011712:	f7fe fce8 	bl	80100e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011716:	693b      	ldr	r3, [r7, #16]
 8011718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801171a:	4b0d      	ldr	r3, [pc, #52]	; (8011750 <xTaskRemoveFromEventList+0xc0>)
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011720:	429a      	cmp	r2, r3
 8011722:	d905      	bls.n	8011730 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011724:	2301      	movs	r3, #1
 8011726:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011728:	4b0a      	ldr	r3, [pc, #40]	; (8011754 <xTaskRemoveFromEventList+0xc4>)
 801172a:	2201      	movs	r2, #1
 801172c:	601a      	str	r2, [r3, #0]
 801172e:	e001      	b.n	8011734 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011730:	2300      	movs	r3, #0
 8011732:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011734:	697b      	ldr	r3, [r7, #20]
}
 8011736:	4618      	mov	r0, r3
 8011738:	3718      	adds	r7, #24
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}
 801173e:	bf00      	nop
 8011740:	2000242c 	.word	0x2000242c
 8011744:	2000240c 	.word	0x2000240c
 8011748:	20001f34 	.word	0x20001f34
 801174c:	200023c4 	.word	0x200023c4
 8011750:	20001f30 	.word	0x20001f30
 8011754:	20002418 	.word	0x20002418

08011758 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011758:	b480      	push	{r7}
 801175a:	b083      	sub	sp, #12
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011760:	4b06      	ldr	r3, [pc, #24]	; (801177c <vTaskInternalSetTimeOutState+0x24>)
 8011762:	681a      	ldr	r2, [r3, #0]
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011768:	4b05      	ldr	r3, [pc, #20]	; (8011780 <vTaskInternalSetTimeOutState+0x28>)
 801176a:	681a      	ldr	r2, [r3, #0]
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	605a      	str	r2, [r3, #4]
}
 8011770:	bf00      	nop
 8011772:	370c      	adds	r7, #12
 8011774:	46bd      	mov	sp, r7
 8011776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177a:	4770      	bx	lr
 801177c:	2000241c 	.word	0x2000241c
 8011780:	20002408 	.word	0x20002408

08011784 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b088      	sub	sp, #32
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
 801178c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d10a      	bne.n	80117aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011798:	f383 8811 	msr	BASEPRI, r3
 801179c:	f3bf 8f6f 	isb	sy
 80117a0:	f3bf 8f4f 	dsb	sy
 80117a4:	613b      	str	r3, [r7, #16]
}
 80117a6:	bf00      	nop
 80117a8:	e7fe      	b.n	80117a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d10a      	bne.n	80117c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80117b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117b4:	f383 8811 	msr	BASEPRI, r3
 80117b8:	f3bf 8f6f 	isb	sy
 80117bc:	f3bf 8f4f 	dsb	sy
 80117c0:	60fb      	str	r3, [r7, #12]
}
 80117c2:	bf00      	nop
 80117c4:	e7fe      	b.n	80117c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80117c6:	f001 f885 	bl	80128d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80117ca:	4b1d      	ldr	r3, [pc, #116]	; (8011840 <xTaskCheckForTimeOut+0xbc>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	685b      	ldr	r3, [r3, #4]
 80117d4:	69ba      	ldr	r2, [r7, #24]
 80117d6:	1ad3      	subs	r3, r2, r3
 80117d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80117da:	683b      	ldr	r3, [r7, #0]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117e2:	d102      	bne.n	80117ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80117e4:	2300      	movs	r3, #0
 80117e6:	61fb      	str	r3, [r7, #28]
 80117e8:	e023      	b.n	8011832 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	681a      	ldr	r2, [r3, #0]
 80117ee:	4b15      	ldr	r3, [pc, #84]	; (8011844 <xTaskCheckForTimeOut+0xc0>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	429a      	cmp	r2, r3
 80117f4:	d007      	beq.n	8011806 <xTaskCheckForTimeOut+0x82>
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	685b      	ldr	r3, [r3, #4]
 80117fa:	69ba      	ldr	r2, [r7, #24]
 80117fc:	429a      	cmp	r2, r3
 80117fe:	d302      	bcc.n	8011806 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011800:	2301      	movs	r3, #1
 8011802:	61fb      	str	r3, [r7, #28]
 8011804:	e015      	b.n	8011832 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011806:	683b      	ldr	r3, [r7, #0]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	697a      	ldr	r2, [r7, #20]
 801180c:	429a      	cmp	r2, r3
 801180e:	d20b      	bcs.n	8011828 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	681a      	ldr	r2, [r3, #0]
 8011814:	697b      	ldr	r3, [r7, #20]
 8011816:	1ad2      	subs	r2, r2, r3
 8011818:	683b      	ldr	r3, [r7, #0]
 801181a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801181c:	6878      	ldr	r0, [r7, #4]
 801181e:	f7ff ff9b 	bl	8011758 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011822:	2300      	movs	r3, #0
 8011824:	61fb      	str	r3, [r7, #28]
 8011826:	e004      	b.n	8011832 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011828:	683b      	ldr	r3, [r7, #0]
 801182a:	2200      	movs	r2, #0
 801182c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801182e:	2301      	movs	r3, #1
 8011830:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011832:	f001 f87f 	bl	8012934 <vPortExitCritical>

	return xReturn;
 8011836:	69fb      	ldr	r3, [r7, #28]
}
 8011838:	4618      	mov	r0, r3
 801183a:	3720      	adds	r7, #32
 801183c:	46bd      	mov	sp, r7
 801183e:	bd80      	pop	{r7, pc}
 8011840:	20002408 	.word	0x20002408
 8011844:	2000241c 	.word	0x2000241c

08011848 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011848:	b480      	push	{r7}
 801184a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801184c:	4b03      	ldr	r3, [pc, #12]	; (801185c <vTaskMissedYield+0x14>)
 801184e:	2201      	movs	r2, #1
 8011850:	601a      	str	r2, [r3, #0]
}
 8011852:	bf00      	nop
 8011854:	46bd      	mov	sp, r7
 8011856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185a:	4770      	bx	lr
 801185c:	20002418 	.word	0x20002418

08011860 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b082      	sub	sp, #8
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011868:	f000 f852 	bl	8011910 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801186c:	4b06      	ldr	r3, [pc, #24]	; (8011888 <prvIdleTask+0x28>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	2b01      	cmp	r3, #1
 8011872:	d9f9      	bls.n	8011868 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011874:	4b05      	ldr	r3, [pc, #20]	; (801188c <prvIdleTask+0x2c>)
 8011876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801187a:	601a      	str	r2, [r3, #0]
 801187c:	f3bf 8f4f 	dsb	sy
 8011880:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011884:	e7f0      	b.n	8011868 <prvIdleTask+0x8>
 8011886:	bf00      	nop
 8011888:	20001f34 	.word	0x20001f34
 801188c:	e000ed04 	.word	0xe000ed04

08011890 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b082      	sub	sp, #8
 8011894:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011896:	2300      	movs	r3, #0
 8011898:	607b      	str	r3, [r7, #4]
 801189a:	e00c      	b.n	80118b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801189c:	687a      	ldr	r2, [r7, #4]
 801189e:	4613      	mov	r3, r2
 80118a0:	009b      	lsls	r3, r3, #2
 80118a2:	4413      	add	r3, r2
 80118a4:	009b      	lsls	r3, r3, #2
 80118a6:	4a12      	ldr	r2, [pc, #72]	; (80118f0 <prvInitialiseTaskLists+0x60>)
 80118a8:	4413      	add	r3, r2
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7fe fbee 	bl	801008c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	3301      	adds	r3, #1
 80118b4:	607b      	str	r3, [r7, #4]
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2b37      	cmp	r3, #55	; 0x37
 80118ba:	d9ef      	bls.n	801189c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80118bc:	480d      	ldr	r0, [pc, #52]	; (80118f4 <prvInitialiseTaskLists+0x64>)
 80118be:	f7fe fbe5 	bl	801008c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80118c2:	480d      	ldr	r0, [pc, #52]	; (80118f8 <prvInitialiseTaskLists+0x68>)
 80118c4:	f7fe fbe2 	bl	801008c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80118c8:	480c      	ldr	r0, [pc, #48]	; (80118fc <prvInitialiseTaskLists+0x6c>)
 80118ca:	f7fe fbdf 	bl	801008c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80118ce:	480c      	ldr	r0, [pc, #48]	; (8011900 <prvInitialiseTaskLists+0x70>)
 80118d0:	f7fe fbdc 	bl	801008c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80118d4:	480b      	ldr	r0, [pc, #44]	; (8011904 <prvInitialiseTaskLists+0x74>)
 80118d6:	f7fe fbd9 	bl	801008c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80118da:	4b0b      	ldr	r3, [pc, #44]	; (8011908 <prvInitialiseTaskLists+0x78>)
 80118dc:	4a05      	ldr	r2, [pc, #20]	; (80118f4 <prvInitialiseTaskLists+0x64>)
 80118de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80118e0:	4b0a      	ldr	r3, [pc, #40]	; (801190c <prvInitialiseTaskLists+0x7c>)
 80118e2:	4a05      	ldr	r2, [pc, #20]	; (80118f8 <prvInitialiseTaskLists+0x68>)
 80118e4:	601a      	str	r2, [r3, #0]
}
 80118e6:	bf00      	nop
 80118e8:	3708      	adds	r7, #8
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}
 80118ee:	bf00      	nop
 80118f0:	20001f34 	.word	0x20001f34
 80118f4:	20002394 	.word	0x20002394
 80118f8:	200023a8 	.word	0x200023a8
 80118fc:	200023c4 	.word	0x200023c4
 8011900:	200023d8 	.word	0x200023d8
 8011904:	200023f0 	.word	0x200023f0
 8011908:	200023bc 	.word	0x200023bc
 801190c:	200023c0 	.word	0x200023c0

08011910 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b082      	sub	sp, #8
 8011914:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011916:	e019      	b.n	801194c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011918:	f000 ffdc 	bl	80128d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801191c:	4b10      	ldr	r3, [pc, #64]	; (8011960 <prvCheckTasksWaitingTermination+0x50>)
 801191e:	68db      	ldr	r3, [r3, #12]
 8011920:	68db      	ldr	r3, [r3, #12]
 8011922:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	3304      	adds	r3, #4
 8011928:	4618      	mov	r0, r3
 801192a:	f7fe fc39 	bl	80101a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801192e:	4b0d      	ldr	r3, [pc, #52]	; (8011964 <prvCheckTasksWaitingTermination+0x54>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	3b01      	subs	r3, #1
 8011934:	4a0b      	ldr	r2, [pc, #44]	; (8011964 <prvCheckTasksWaitingTermination+0x54>)
 8011936:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011938:	4b0b      	ldr	r3, [pc, #44]	; (8011968 <prvCheckTasksWaitingTermination+0x58>)
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	3b01      	subs	r3, #1
 801193e:	4a0a      	ldr	r2, [pc, #40]	; (8011968 <prvCheckTasksWaitingTermination+0x58>)
 8011940:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011942:	f000 fff7 	bl	8012934 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	f000 f810 	bl	801196c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801194c:	4b06      	ldr	r3, [pc, #24]	; (8011968 <prvCheckTasksWaitingTermination+0x58>)
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d1e1      	bne.n	8011918 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011954:	bf00      	nop
 8011956:	bf00      	nop
 8011958:	3708      	adds	r7, #8
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}
 801195e:	bf00      	nop
 8011960:	200023d8 	.word	0x200023d8
 8011964:	20002404 	.word	0x20002404
 8011968:	200023ec 	.word	0x200023ec

0801196c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801196c:	b580      	push	{r7, lr}
 801196e:	b084      	sub	sp, #16
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	3358      	adds	r3, #88	; 0x58
 8011978:	4618      	mov	r0, r3
 801197a:	f002 fb3f 	bl	8013ffc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8011984:	2b00      	cmp	r3, #0
 8011986:	d108      	bne.n	801199a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801198c:	4618      	mov	r0, r3
 801198e:	f001 f98f 	bl	8012cb0 <vPortFree>
				vPortFree( pxTCB );
 8011992:	6878      	ldr	r0, [r7, #4]
 8011994:	f001 f98c 	bl	8012cb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011998:	e018      	b.n	80119cc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80119a0:	2b01      	cmp	r3, #1
 80119a2:	d103      	bne.n	80119ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80119a4:	6878      	ldr	r0, [r7, #4]
 80119a6:	f001 f983 	bl	8012cb0 <vPortFree>
	}
 80119aa:	e00f      	b.n	80119cc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80119b2:	2b02      	cmp	r3, #2
 80119b4:	d00a      	beq.n	80119cc <prvDeleteTCB+0x60>
	__asm volatile
 80119b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ba:	f383 8811 	msr	BASEPRI, r3
 80119be:	f3bf 8f6f 	isb	sy
 80119c2:	f3bf 8f4f 	dsb	sy
 80119c6:	60fb      	str	r3, [r7, #12]
}
 80119c8:	bf00      	nop
 80119ca:	e7fe      	b.n	80119ca <prvDeleteTCB+0x5e>
	}
 80119cc:	bf00      	nop
 80119ce:	3710      	adds	r7, #16
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}

080119d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80119d4:	b480      	push	{r7}
 80119d6:	b083      	sub	sp, #12
 80119d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80119da:	4b0c      	ldr	r3, [pc, #48]	; (8011a0c <prvResetNextTaskUnblockTime+0x38>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d104      	bne.n	80119ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80119e4:	4b0a      	ldr	r3, [pc, #40]	; (8011a10 <prvResetNextTaskUnblockTime+0x3c>)
 80119e6:	f04f 32ff 	mov.w	r2, #4294967295
 80119ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80119ec:	e008      	b.n	8011a00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119ee:	4b07      	ldr	r3, [pc, #28]	; (8011a0c <prvResetNextTaskUnblockTime+0x38>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	68db      	ldr	r3, [r3, #12]
 80119f4:	68db      	ldr	r3, [r3, #12]
 80119f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	685b      	ldr	r3, [r3, #4]
 80119fc:	4a04      	ldr	r2, [pc, #16]	; (8011a10 <prvResetNextTaskUnblockTime+0x3c>)
 80119fe:	6013      	str	r3, [r2, #0]
}
 8011a00:	bf00      	nop
 8011a02:	370c      	adds	r7, #12
 8011a04:	46bd      	mov	sp, r7
 8011a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0a:	4770      	bx	lr
 8011a0c:	200023bc 	.word	0x200023bc
 8011a10:	20002424 	.word	0x20002424

08011a14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011a14:	b480      	push	{r7}
 8011a16:	b083      	sub	sp, #12
 8011a18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011a1a:	4b0b      	ldr	r3, [pc, #44]	; (8011a48 <xTaskGetSchedulerState+0x34>)
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d102      	bne.n	8011a28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011a22:	2301      	movs	r3, #1
 8011a24:	607b      	str	r3, [r7, #4]
 8011a26:	e008      	b.n	8011a3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a28:	4b08      	ldr	r3, [pc, #32]	; (8011a4c <xTaskGetSchedulerState+0x38>)
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d102      	bne.n	8011a36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011a30:	2302      	movs	r3, #2
 8011a32:	607b      	str	r3, [r7, #4]
 8011a34:	e001      	b.n	8011a3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011a36:	2300      	movs	r3, #0
 8011a38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011a3a:	687b      	ldr	r3, [r7, #4]
	}
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	370c      	adds	r7, #12
 8011a40:	46bd      	mov	sp, r7
 8011a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a46:	4770      	bx	lr
 8011a48:	20002410 	.word	0x20002410
 8011a4c:	2000242c 	.word	0x2000242c

08011a50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b086      	sub	sp, #24
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d056      	beq.n	8011b14 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011a66:	4b2e      	ldr	r3, [pc, #184]	; (8011b20 <xTaskPriorityDisinherit+0xd0>)
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	693a      	ldr	r2, [r7, #16]
 8011a6c:	429a      	cmp	r2, r3
 8011a6e:	d00a      	beq.n	8011a86 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a74:	f383 8811 	msr	BASEPRI, r3
 8011a78:	f3bf 8f6f 	isb	sy
 8011a7c:	f3bf 8f4f 	dsb	sy
 8011a80:	60fb      	str	r3, [r7, #12]
}
 8011a82:	bf00      	nop
 8011a84:	e7fe      	b.n	8011a84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011a86:	693b      	ldr	r3, [r7, #16]
 8011a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d10a      	bne.n	8011aa4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a92:	f383 8811 	msr	BASEPRI, r3
 8011a96:	f3bf 8f6f 	isb	sy
 8011a9a:	f3bf 8f4f 	dsb	sy
 8011a9e:	60bb      	str	r3, [r7, #8]
}
 8011aa0:	bf00      	nop
 8011aa2:	e7fe      	b.n	8011aa2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011aa4:	693b      	ldr	r3, [r7, #16]
 8011aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011aa8:	1e5a      	subs	r2, r3, #1
 8011aaa:	693b      	ldr	r3, [r7, #16]
 8011aac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011aae:	693b      	ldr	r3, [r7, #16]
 8011ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ab2:	693b      	ldr	r3, [r7, #16]
 8011ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d02c      	beq.n	8011b14 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011aba:	693b      	ldr	r3, [r7, #16]
 8011abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d128      	bne.n	8011b14 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ac2:	693b      	ldr	r3, [r7, #16]
 8011ac4:	3304      	adds	r3, #4
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f7fe fb6a 	bl	80101a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011acc:	693b      	ldr	r3, [r7, #16]
 8011ace:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011ad0:	693b      	ldr	r3, [r7, #16]
 8011ad2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ad4:	693b      	ldr	r3, [r7, #16]
 8011ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ad8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011adc:	693b      	ldr	r3, [r7, #16]
 8011ade:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011ae0:	693b      	ldr	r3, [r7, #16]
 8011ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ae4:	4b0f      	ldr	r3, [pc, #60]	; (8011b24 <xTaskPriorityDisinherit+0xd4>)
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	429a      	cmp	r2, r3
 8011aea:	d903      	bls.n	8011af4 <xTaskPriorityDisinherit+0xa4>
 8011aec:	693b      	ldr	r3, [r7, #16]
 8011aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011af0:	4a0c      	ldr	r2, [pc, #48]	; (8011b24 <xTaskPriorityDisinherit+0xd4>)
 8011af2:	6013      	str	r3, [r2, #0]
 8011af4:	693b      	ldr	r3, [r7, #16]
 8011af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011af8:	4613      	mov	r3, r2
 8011afa:	009b      	lsls	r3, r3, #2
 8011afc:	4413      	add	r3, r2
 8011afe:	009b      	lsls	r3, r3, #2
 8011b00:	4a09      	ldr	r2, [pc, #36]	; (8011b28 <xTaskPriorityDisinherit+0xd8>)
 8011b02:	441a      	add	r2, r3
 8011b04:	693b      	ldr	r3, [r7, #16]
 8011b06:	3304      	adds	r3, #4
 8011b08:	4619      	mov	r1, r3
 8011b0a:	4610      	mov	r0, r2
 8011b0c:	f7fe faeb 	bl	80100e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011b10:	2301      	movs	r3, #1
 8011b12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011b14:	697b      	ldr	r3, [r7, #20]
	}
 8011b16:	4618      	mov	r0, r3
 8011b18:	3718      	adds	r7, #24
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}
 8011b1e:	bf00      	nop
 8011b20:	20001f30 	.word	0x20001f30
 8011b24:	2000240c 	.word	0x2000240c
 8011b28:	20001f34 	.word	0x20001f34

08011b2c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b086      	sub	sp, #24
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	60f8      	str	r0, [r7, #12]
 8011b34:	60b9      	str	r1, [r7, #8]
 8011b36:	607a      	str	r2, [r7, #4]
 8011b38:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8011b3a:	f000 fecb 	bl	80128d4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011b3e:	4b29      	ldr	r3, [pc, #164]	; (8011be4 <xTaskNotifyWait+0xb8>)
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8011b46:	b2db      	uxtb	r3, r3
 8011b48:	2b02      	cmp	r3, #2
 8011b4a:	d01c      	beq.n	8011b86 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8011b4c:	4b25      	ldr	r3, [pc, #148]	; (8011be4 <xTaskNotifyWait+0xb8>)
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8011b54:	68fa      	ldr	r2, [r7, #12]
 8011b56:	43d2      	mvns	r2, r2
 8011b58:	400a      	ands	r2, r1
 8011b5a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8011b5e:	4b21      	ldr	r3, [pc, #132]	; (8011be4 <xTaskNotifyWait+0xb8>)
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	2201      	movs	r2, #1
 8011b64:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d00b      	beq.n	8011b86 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011b6e:	2101      	movs	r1, #1
 8011b70:	6838      	ldr	r0, [r7, #0]
 8011b72:	f000 f9dd 	bl	8011f30 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8011b76:	4b1c      	ldr	r3, [pc, #112]	; (8011be8 <xTaskNotifyWait+0xbc>)
 8011b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b7c:	601a      	str	r2, [r3, #0]
 8011b7e:	f3bf 8f4f 	dsb	sy
 8011b82:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011b86:	f000 fed5 	bl	8012934 <vPortExitCritical>

		taskENTER_CRITICAL();
 8011b8a:	f000 fea3 	bl	80128d4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d005      	beq.n	8011ba0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8011b94:	4b13      	ldr	r3, [pc, #76]	; (8011be4 <xTaskNotifyWait+0xb8>)
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011ba0:	4b10      	ldr	r3, [pc, #64]	; (8011be4 <xTaskNotifyWait+0xb8>)
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8011ba8:	b2db      	uxtb	r3, r3
 8011baa:	2b02      	cmp	r3, #2
 8011bac:	d002      	beq.n	8011bb4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8011bae:	2300      	movs	r3, #0
 8011bb0:	617b      	str	r3, [r7, #20]
 8011bb2:	e00a      	b.n	8011bca <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8011bb4:	4b0b      	ldr	r3, [pc, #44]	; (8011be4 <xTaskNotifyWait+0xb8>)
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8011bbc:	68ba      	ldr	r2, [r7, #8]
 8011bbe:	43d2      	mvns	r2, r2
 8011bc0:	400a      	ands	r2, r1
 8011bc2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 8011bc6:	2301      	movs	r3, #1
 8011bc8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011bca:	4b06      	ldr	r3, [pc, #24]	; (8011be4 <xTaskNotifyWait+0xb8>)
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	2200      	movs	r2, #0
 8011bd0:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 8011bd4:	f000 feae 	bl	8012934 <vPortExitCritical>

		return xReturn;
 8011bd8:	697b      	ldr	r3, [r7, #20]
	}
 8011bda:	4618      	mov	r0, r3
 8011bdc:	3718      	adds	r7, #24
 8011bde:	46bd      	mov	sp, r7
 8011be0:	bd80      	pop	{r7, pc}
 8011be2:	bf00      	nop
 8011be4:	20001f30 	.word	0x20001f30
 8011be8:	e000ed04 	.word	0xe000ed04

08011bec <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b08a      	sub	sp, #40	; 0x28
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	60f8      	str	r0, [r7, #12]
 8011bf4:	60b9      	str	r1, [r7, #8]
 8011bf6:	603b      	str	r3, [r7, #0]
 8011bf8:	4613      	mov	r3, r2
 8011bfa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d10a      	bne.n	8011c1c <xTaskGenericNotify+0x30>
	__asm volatile
 8011c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c0a:	f383 8811 	msr	BASEPRI, r3
 8011c0e:	f3bf 8f6f 	isb	sy
 8011c12:	f3bf 8f4f 	dsb	sy
 8011c16:	61bb      	str	r3, [r7, #24]
}
 8011c18:	bf00      	nop
 8011c1a:	e7fe      	b.n	8011c1a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8011c20:	f000 fe58 	bl	80128d4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8011c24:	683b      	ldr	r3, [r7, #0]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d004      	beq.n	8011c34 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011c2a:	6a3b      	ldr	r3, [r7, #32]
 8011c2c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8011c30:	683b      	ldr	r3, [r7, #0]
 8011c32:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011c34:	6a3b      	ldr	r3, [r7, #32]
 8011c36:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8011c3a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011c3c:	6a3b      	ldr	r3, [r7, #32]
 8011c3e:	2202      	movs	r2, #2
 8011c40:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 8011c44:	79fb      	ldrb	r3, [r7, #7]
 8011c46:	2b04      	cmp	r3, #4
 8011c48:	d82d      	bhi.n	8011ca6 <xTaskGenericNotify+0xba>
 8011c4a:	a201      	add	r2, pc, #4	; (adr r2, 8011c50 <xTaskGenericNotify+0x64>)
 8011c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c50:	08011cc9 	.word	0x08011cc9
 8011c54:	08011c65 	.word	0x08011c65
 8011c58:	08011c77 	.word	0x08011c77
 8011c5c:	08011c87 	.word	0x08011c87
 8011c60:	08011c91 	.word	0x08011c91
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011c64:	6a3b      	ldr	r3, [r7, #32]
 8011c66:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	431a      	orrs	r2, r3
 8011c6e:	6a3b      	ldr	r3, [r7, #32]
 8011c70:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8011c74:	e02b      	b.n	8011cce <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011c76:	6a3b      	ldr	r3, [r7, #32]
 8011c78:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8011c7c:	1c5a      	adds	r2, r3, #1
 8011c7e:	6a3b      	ldr	r3, [r7, #32]
 8011c80:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8011c84:	e023      	b.n	8011cce <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011c86:	6a3b      	ldr	r3, [r7, #32]
 8011c88:	68ba      	ldr	r2, [r7, #8]
 8011c8a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8011c8e:	e01e      	b.n	8011cce <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011c90:	7ffb      	ldrb	r3, [r7, #31]
 8011c92:	2b02      	cmp	r3, #2
 8011c94:	d004      	beq.n	8011ca0 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011c96:	6a3b      	ldr	r3, [r7, #32]
 8011c98:	68ba      	ldr	r2, [r7, #8]
 8011c9a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011c9e:	e016      	b.n	8011cce <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8011ca4:	e013      	b.n	8011cce <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011ca6:	6a3b      	ldr	r3, [r7, #32]
 8011ca8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8011cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cb0:	d00c      	beq.n	8011ccc <xTaskGenericNotify+0xe0>
	__asm volatile
 8011cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cb6:	f383 8811 	msr	BASEPRI, r3
 8011cba:	f3bf 8f6f 	isb	sy
 8011cbe:	f3bf 8f4f 	dsb	sy
 8011cc2:	617b      	str	r3, [r7, #20]
}
 8011cc4:	bf00      	nop
 8011cc6:	e7fe      	b.n	8011cc6 <xTaskGenericNotify+0xda>
					break;
 8011cc8:	bf00      	nop
 8011cca:	e000      	b.n	8011cce <xTaskGenericNotify+0xe2>

					break;
 8011ccc:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011cce:	7ffb      	ldrb	r3, [r7, #31]
 8011cd0:	2b01      	cmp	r3, #1
 8011cd2:	d13a      	bne.n	8011d4a <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011cd4:	6a3b      	ldr	r3, [r7, #32]
 8011cd6:	3304      	adds	r3, #4
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f7fe fa61 	bl	80101a0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8011cde:	6a3b      	ldr	r3, [r7, #32]
 8011ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ce2:	4b1d      	ldr	r3, [pc, #116]	; (8011d58 <xTaskGenericNotify+0x16c>)
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	429a      	cmp	r2, r3
 8011ce8:	d903      	bls.n	8011cf2 <xTaskGenericNotify+0x106>
 8011cea:	6a3b      	ldr	r3, [r7, #32]
 8011cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cee:	4a1a      	ldr	r2, [pc, #104]	; (8011d58 <xTaskGenericNotify+0x16c>)
 8011cf0:	6013      	str	r3, [r2, #0]
 8011cf2:	6a3b      	ldr	r3, [r7, #32]
 8011cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cf6:	4613      	mov	r3, r2
 8011cf8:	009b      	lsls	r3, r3, #2
 8011cfa:	4413      	add	r3, r2
 8011cfc:	009b      	lsls	r3, r3, #2
 8011cfe:	4a17      	ldr	r2, [pc, #92]	; (8011d5c <xTaskGenericNotify+0x170>)
 8011d00:	441a      	add	r2, r3
 8011d02:	6a3b      	ldr	r3, [r7, #32]
 8011d04:	3304      	adds	r3, #4
 8011d06:	4619      	mov	r1, r3
 8011d08:	4610      	mov	r0, r2
 8011d0a:	f7fe f9ec 	bl	80100e6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011d0e:	6a3b      	ldr	r3, [r7, #32]
 8011d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d00a      	beq.n	8011d2c <xTaskGenericNotify+0x140>
	__asm volatile
 8011d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d1a:	f383 8811 	msr	BASEPRI, r3
 8011d1e:	f3bf 8f6f 	isb	sy
 8011d22:	f3bf 8f4f 	dsb	sy
 8011d26:	613b      	str	r3, [r7, #16]
}
 8011d28:	bf00      	nop
 8011d2a:	e7fe      	b.n	8011d2a <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011d2c:	6a3b      	ldr	r3, [r7, #32]
 8011d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d30:	4b0b      	ldr	r3, [pc, #44]	; (8011d60 <xTaskGenericNotify+0x174>)
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d36:	429a      	cmp	r2, r3
 8011d38:	d907      	bls.n	8011d4a <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8011d3a:	4b0a      	ldr	r3, [pc, #40]	; (8011d64 <xTaskGenericNotify+0x178>)
 8011d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d40:	601a      	str	r2, [r3, #0]
 8011d42:	f3bf 8f4f 	dsb	sy
 8011d46:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011d4a:	f000 fdf3 	bl	8012934 <vPortExitCritical>

		return xReturn;
 8011d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8011d50:	4618      	mov	r0, r3
 8011d52:	3728      	adds	r7, #40	; 0x28
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd80      	pop	{r7, pc}
 8011d58:	2000240c 	.word	0x2000240c
 8011d5c:	20001f34 	.word	0x20001f34
 8011d60:	20001f30 	.word	0x20001f30
 8011d64:	e000ed04 	.word	0xe000ed04

08011d68 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b08e      	sub	sp, #56	; 0x38
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	60f8      	str	r0, [r7, #12]
 8011d70:	60b9      	str	r1, [r7, #8]
 8011d72:	603b      	str	r3, [r7, #0]
 8011d74:	4613      	mov	r3, r2
 8011d76:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8011d78:	2301      	movs	r3, #1
 8011d7a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d10a      	bne.n	8011d98 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8011d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d86:	f383 8811 	msr	BASEPRI, r3
 8011d8a:	f3bf 8f6f 	isb	sy
 8011d8e:	f3bf 8f4f 	dsb	sy
 8011d92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011d94:	bf00      	nop
 8011d96:	e7fe      	b.n	8011d96 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011d98:	f000 fe7e 	bl	8012a98 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8011da0:	f3ef 8211 	mrs	r2, BASEPRI
 8011da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011da8:	f383 8811 	msr	BASEPRI, r3
 8011dac:	f3bf 8f6f 	isb	sy
 8011db0:	f3bf 8f4f 	dsb	sy
 8011db4:	623a      	str	r2, [r7, #32]
 8011db6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8011db8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011dba:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d004      	beq.n	8011dcc <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dc4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8011dc8:	683b      	ldr	r3, [r7, #0]
 8011dca:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dce:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8011dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dd8:	2202      	movs	r2, #2
 8011dda:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 8011dde:	79fb      	ldrb	r3, [r7, #7]
 8011de0:	2b04      	cmp	r3, #4
 8011de2:	d82f      	bhi.n	8011e44 <xTaskGenericNotifyFromISR+0xdc>
 8011de4:	a201      	add	r2, pc, #4	; (adr r2, 8011dec <xTaskGenericNotifyFromISR+0x84>)
 8011de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dea:	bf00      	nop
 8011dec:	08011e67 	.word	0x08011e67
 8011df0:	08011e01 	.word	0x08011e01
 8011df4:	08011e13 	.word	0x08011e13
 8011df8:	08011e23 	.word	0x08011e23
 8011dfc:	08011e2d 	.word	0x08011e2d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e02:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8011e06:	68bb      	ldr	r3, [r7, #8]
 8011e08:	431a      	orrs	r2, r3
 8011e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e0c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8011e10:	e02c      	b.n	8011e6c <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e14:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8011e18:	1c5a      	adds	r2, r3, #1
 8011e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e1c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8011e20:	e024      	b.n	8011e6c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e24:	68ba      	ldr	r2, [r7, #8]
 8011e26:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8011e2a:	e01f      	b.n	8011e6c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011e2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011e30:	2b02      	cmp	r3, #2
 8011e32:	d004      	beq.n	8011e3e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e36:	68ba      	ldr	r2, [r7, #8]
 8011e38:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011e3c:	e016      	b.n	8011e6c <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8011e3e:	2300      	movs	r3, #0
 8011e40:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8011e42:	e013      	b.n	8011e6c <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8011e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e4e:	d00c      	beq.n	8011e6a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8011e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e54:	f383 8811 	msr	BASEPRI, r3
 8011e58:	f3bf 8f6f 	isb	sy
 8011e5c:	f3bf 8f4f 	dsb	sy
 8011e60:	61bb      	str	r3, [r7, #24]
}
 8011e62:	bf00      	nop
 8011e64:	e7fe      	b.n	8011e64 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8011e66:	bf00      	nop
 8011e68:	e000      	b.n	8011e6c <xTaskGenericNotifyFromISR+0x104>
					break;
 8011e6a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011e6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011e70:	2b01      	cmp	r3, #1
 8011e72:	d146      	bne.n	8011f02 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d00a      	beq.n	8011e92 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8011e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e80:	f383 8811 	msr	BASEPRI, r3
 8011e84:	f3bf 8f6f 	isb	sy
 8011e88:	f3bf 8f4f 	dsb	sy
 8011e8c:	617b      	str	r3, [r7, #20]
}
 8011e8e:	bf00      	nop
 8011e90:	e7fe      	b.n	8011e90 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e92:	4b21      	ldr	r3, [pc, #132]	; (8011f18 <xTaskGenericNotifyFromISR+0x1b0>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d11d      	bne.n	8011ed6 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e9c:	3304      	adds	r3, #4
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f7fe f97e 	bl	80101a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ea8:	4b1c      	ldr	r3, [pc, #112]	; (8011f1c <xTaskGenericNotifyFromISR+0x1b4>)
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	429a      	cmp	r2, r3
 8011eae:	d903      	bls.n	8011eb8 <xTaskGenericNotifyFromISR+0x150>
 8011eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eb4:	4a19      	ldr	r2, [pc, #100]	; (8011f1c <xTaskGenericNotifyFromISR+0x1b4>)
 8011eb6:	6013      	str	r3, [r2, #0]
 8011eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ebc:	4613      	mov	r3, r2
 8011ebe:	009b      	lsls	r3, r3, #2
 8011ec0:	4413      	add	r3, r2
 8011ec2:	009b      	lsls	r3, r3, #2
 8011ec4:	4a16      	ldr	r2, [pc, #88]	; (8011f20 <xTaskGenericNotifyFromISR+0x1b8>)
 8011ec6:	441a      	add	r2, r3
 8011ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eca:	3304      	adds	r3, #4
 8011ecc:	4619      	mov	r1, r3
 8011ece:	4610      	mov	r0, r2
 8011ed0:	f7fe f909 	bl	80100e6 <vListInsertEnd>
 8011ed4:	e005      	b.n	8011ee2 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8011ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ed8:	3318      	adds	r3, #24
 8011eda:	4619      	mov	r1, r3
 8011edc:	4811      	ldr	r0, [pc, #68]	; (8011f24 <xTaskGenericNotifyFromISR+0x1bc>)
 8011ede:	f7fe f902 	bl	80100e6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ee6:	4b10      	ldr	r3, [pc, #64]	; (8011f28 <xTaskGenericNotifyFromISR+0x1c0>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eec:	429a      	cmp	r2, r3
 8011eee:	d908      	bls.n	8011f02 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8011ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d002      	beq.n	8011efc <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8011ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ef8:	2201      	movs	r2, #1
 8011efa:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8011efc:	4b0b      	ldr	r3, [pc, #44]	; (8011f2c <xTaskGenericNotifyFromISR+0x1c4>)
 8011efe:	2201      	movs	r2, #1
 8011f00:	601a      	str	r2, [r3, #0]
 8011f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f04:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011f06:	693b      	ldr	r3, [r7, #16]
 8011f08:	f383 8811 	msr	BASEPRI, r3
}
 8011f0c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8011f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8011f10:	4618      	mov	r0, r3
 8011f12:	3738      	adds	r7, #56	; 0x38
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bd80      	pop	{r7, pc}
 8011f18:	2000242c 	.word	0x2000242c
 8011f1c:	2000240c 	.word	0x2000240c
 8011f20:	20001f34 	.word	0x20001f34
 8011f24:	200023c4 	.word	0x200023c4
 8011f28:	20001f30 	.word	0x20001f30
 8011f2c:	20002418 	.word	0x20002418

08011f30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b084      	sub	sp, #16
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
 8011f38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011f3a:	4b21      	ldr	r3, [pc, #132]	; (8011fc0 <prvAddCurrentTaskToDelayedList+0x90>)
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f40:	4b20      	ldr	r3, [pc, #128]	; (8011fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	3304      	adds	r3, #4
 8011f46:	4618      	mov	r0, r3
 8011f48:	f7fe f92a 	bl	80101a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f52:	d10a      	bne.n	8011f6a <prvAddCurrentTaskToDelayedList+0x3a>
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d007      	beq.n	8011f6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f5a:	4b1a      	ldr	r3, [pc, #104]	; (8011fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	3304      	adds	r3, #4
 8011f60:	4619      	mov	r1, r3
 8011f62:	4819      	ldr	r0, [pc, #100]	; (8011fc8 <prvAddCurrentTaskToDelayedList+0x98>)
 8011f64:	f7fe f8bf 	bl	80100e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011f68:	e026      	b.n	8011fb8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011f6a:	68fa      	ldr	r2, [r7, #12]
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	4413      	add	r3, r2
 8011f70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011f72:	4b14      	ldr	r3, [pc, #80]	; (8011fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	68ba      	ldr	r2, [r7, #8]
 8011f78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011f7a:	68ba      	ldr	r2, [r7, #8]
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	d209      	bcs.n	8011f96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f82:	4b12      	ldr	r3, [pc, #72]	; (8011fcc <prvAddCurrentTaskToDelayedList+0x9c>)
 8011f84:	681a      	ldr	r2, [r3, #0]
 8011f86:	4b0f      	ldr	r3, [pc, #60]	; (8011fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	3304      	adds	r3, #4
 8011f8c:	4619      	mov	r1, r3
 8011f8e:	4610      	mov	r0, r2
 8011f90:	f7fe f8cd 	bl	801012e <vListInsert>
}
 8011f94:	e010      	b.n	8011fb8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f96:	4b0e      	ldr	r3, [pc, #56]	; (8011fd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011f98:	681a      	ldr	r2, [r3, #0]
 8011f9a:	4b0a      	ldr	r3, [pc, #40]	; (8011fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	3304      	adds	r3, #4
 8011fa0:	4619      	mov	r1, r3
 8011fa2:	4610      	mov	r0, r2
 8011fa4:	f7fe f8c3 	bl	801012e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011fa8:	4b0a      	ldr	r3, [pc, #40]	; (8011fd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	68ba      	ldr	r2, [r7, #8]
 8011fae:	429a      	cmp	r2, r3
 8011fb0:	d202      	bcs.n	8011fb8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011fb2:	4a08      	ldr	r2, [pc, #32]	; (8011fd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011fb4:	68bb      	ldr	r3, [r7, #8]
 8011fb6:	6013      	str	r3, [r2, #0]
}
 8011fb8:	bf00      	nop
 8011fba:	3710      	adds	r7, #16
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd80      	pop	{r7, pc}
 8011fc0:	20002408 	.word	0x20002408
 8011fc4:	20001f30 	.word	0x20001f30
 8011fc8:	200023f0 	.word	0x200023f0
 8011fcc:	200023c0 	.word	0x200023c0
 8011fd0:	200023bc 	.word	0x200023bc
 8011fd4:	20002424 	.word	0x20002424

08011fd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b08a      	sub	sp, #40	; 0x28
 8011fdc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011fde:	2300      	movs	r3, #0
 8011fe0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011fe2:	f000 fb07 	bl	80125f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011fe6:	4b1c      	ldr	r3, [pc, #112]	; (8012058 <xTimerCreateTimerTask+0x80>)
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d021      	beq.n	8012032 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011fee:	2300      	movs	r3, #0
 8011ff0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011ff6:	1d3a      	adds	r2, r7, #4
 8011ff8:	f107 0108 	add.w	r1, r7, #8
 8011ffc:	f107 030c 	add.w	r3, r7, #12
 8012000:	4618      	mov	r0, r3
 8012002:	f7fe f829 	bl	8010058 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012006:	6879      	ldr	r1, [r7, #4]
 8012008:	68bb      	ldr	r3, [r7, #8]
 801200a:	68fa      	ldr	r2, [r7, #12]
 801200c:	9202      	str	r2, [sp, #8]
 801200e:	9301      	str	r3, [sp, #4]
 8012010:	2302      	movs	r3, #2
 8012012:	9300      	str	r3, [sp, #0]
 8012014:	2300      	movs	r3, #0
 8012016:	460a      	mov	r2, r1
 8012018:	4910      	ldr	r1, [pc, #64]	; (801205c <xTimerCreateTimerTask+0x84>)
 801201a:	4811      	ldr	r0, [pc, #68]	; (8012060 <xTimerCreateTimerTask+0x88>)
 801201c:	f7fe fe90 	bl	8010d40 <xTaskCreateStatic>
 8012020:	4603      	mov	r3, r0
 8012022:	4a10      	ldr	r2, [pc, #64]	; (8012064 <xTimerCreateTimerTask+0x8c>)
 8012024:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012026:	4b0f      	ldr	r3, [pc, #60]	; (8012064 <xTimerCreateTimerTask+0x8c>)
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d001      	beq.n	8012032 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801202e:	2301      	movs	r3, #1
 8012030:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012032:	697b      	ldr	r3, [r7, #20]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d10a      	bne.n	801204e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8012038:	f04f 0350 	mov.w	r3, #80	; 0x50
 801203c:	f383 8811 	msr	BASEPRI, r3
 8012040:	f3bf 8f6f 	isb	sy
 8012044:	f3bf 8f4f 	dsb	sy
 8012048:	613b      	str	r3, [r7, #16]
}
 801204a:	bf00      	nop
 801204c:	e7fe      	b.n	801204c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801204e:	697b      	ldr	r3, [r7, #20]
}
 8012050:	4618      	mov	r0, r3
 8012052:	3718      	adds	r7, #24
 8012054:	46bd      	mov	sp, r7
 8012056:	bd80      	pop	{r7, pc}
 8012058:	20002468 	.word	0x20002468
 801205c:	080179ac 	.word	0x080179ac
 8012060:	0801219d 	.word	0x0801219d
 8012064:	2000246c 	.word	0x2000246c

08012068 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b08a      	sub	sp, #40	; 0x28
 801206c:	af00      	add	r7, sp, #0
 801206e:	60f8      	str	r0, [r7, #12]
 8012070:	60b9      	str	r1, [r7, #8]
 8012072:	607a      	str	r2, [r7, #4]
 8012074:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012076:	2300      	movs	r3, #0
 8012078:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d10a      	bne.n	8012096 <xTimerGenericCommand+0x2e>
	__asm volatile
 8012080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012084:	f383 8811 	msr	BASEPRI, r3
 8012088:	f3bf 8f6f 	isb	sy
 801208c:	f3bf 8f4f 	dsb	sy
 8012090:	623b      	str	r3, [r7, #32]
}
 8012092:	bf00      	nop
 8012094:	e7fe      	b.n	8012094 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012096:	4b1a      	ldr	r3, [pc, #104]	; (8012100 <xTimerGenericCommand+0x98>)
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d02a      	beq.n	80120f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801209e:	68bb      	ldr	r3, [r7, #8]
 80120a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80120aa:	68bb      	ldr	r3, [r7, #8]
 80120ac:	2b05      	cmp	r3, #5
 80120ae:	dc18      	bgt.n	80120e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80120b0:	f7ff fcb0 	bl	8011a14 <xTaskGetSchedulerState>
 80120b4:	4603      	mov	r3, r0
 80120b6:	2b02      	cmp	r3, #2
 80120b8:	d109      	bne.n	80120ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80120ba:	4b11      	ldr	r3, [pc, #68]	; (8012100 <xTimerGenericCommand+0x98>)
 80120bc:	6818      	ldr	r0, [r3, #0]
 80120be:	f107 0110 	add.w	r1, r7, #16
 80120c2:	2300      	movs	r3, #0
 80120c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120c6:	f7fe f9d3 	bl	8010470 <xQueueGenericSend>
 80120ca:	6278      	str	r0, [r7, #36]	; 0x24
 80120cc:	e012      	b.n	80120f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80120ce:	4b0c      	ldr	r3, [pc, #48]	; (8012100 <xTimerGenericCommand+0x98>)
 80120d0:	6818      	ldr	r0, [r3, #0]
 80120d2:	f107 0110 	add.w	r1, r7, #16
 80120d6:	2300      	movs	r3, #0
 80120d8:	2200      	movs	r2, #0
 80120da:	f7fe f9c9 	bl	8010470 <xQueueGenericSend>
 80120de:	6278      	str	r0, [r7, #36]	; 0x24
 80120e0:	e008      	b.n	80120f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80120e2:	4b07      	ldr	r3, [pc, #28]	; (8012100 <xTimerGenericCommand+0x98>)
 80120e4:	6818      	ldr	r0, [r3, #0]
 80120e6:	f107 0110 	add.w	r1, r7, #16
 80120ea:	2300      	movs	r3, #0
 80120ec:	683a      	ldr	r2, [r7, #0]
 80120ee:	f7fe fabd 	bl	801066c <xQueueGenericSendFromISR>
 80120f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80120f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80120f6:	4618      	mov	r0, r3
 80120f8:	3728      	adds	r7, #40	; 0x28
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}
 80120fe:	bf00      	nop
 8012100:	20002468 	.word	0x20002468

08012104 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b088      	sub	sp, #32
 8012108:	af02      	add	r7, sp, #8
 801210a:	6078      	str	r0, [r7, #4]
 801210c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801210e:	4b22      	ldr	r3, [pc, #136]	; (8012198 <prvProcessExpiredTimer+0x94>)
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	68db      	ldr	r3, [r3, #12]
 8012114:	68db      	ldr	r3, [r3, #12]
 8012116:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012118:	697b      	ldr	r3, [r7, #20]
 801211a:	3304      	adds	r3, #4
 801211c:	4618      	mov	r0, r3
 801211e:	f7fe f83f 	bl	80101a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012122:	697b      	ldr	r3, [r7, #20]
 8012124:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012128:	f003 0304 	and.w	r3, r3, #4
 801212c:	2b00      	cmp	r3, #0
 801212e:	d022      	beq.n	8012176 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012130:	697b      	ldr	r3, [r7, #20]
 8012132:	699a      	ldr	r2, [r3, #24]
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	18d1      	adds	r1, r2, r3
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	683a      	ldr	r2, [r7, #0]
 801213c:	6978      	ldr	r0, [r7, #20]
 801213e:	f000 f8d1 	bl	80122e4 <prvInsertTimerInActiveList>
 8012142:	4603      	mov	r3, r0
 8012144:	2b00      	cmp	r3, #0
 8012146:	d01f      	beq.n	8012188 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012148:	2300      	movs	r3, #0
 801214a:	9300      	str	r3, [sp, #0]
 801214c:	2300      	movs	r3, #0
 801214e:	687a      	ldr	r2, [r7, #4]
 8012150:	2100      	movs	r1, #0
 8012152:	6978      	ldr	r0, [r7, #20]
 8012154:	f7ff ff88 	bl	8012068 <xTimerGenericCommand>
 8012158:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801215a:	693b      	ldr	r3, [r7, #16]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d113      	bne.n	8012188 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8012160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012164:	f383 8811 	msr	BASEPRI, r3
 8012168:	f3bf 8f6f 	isb	sy
 801216c:	f3bf 8f4f 	dsb	sy
 8012170:	60fb      	str	r3, [r7, #12]
}
 8012172:	bf00      	nop
 8012174:	e7fe      	b.n	8012174 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012176:	697b      	ldr	r3, [r7, #20]
 8012178:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801217c:	f023 0301 	bic.w	r3, r3, #1
 8012180:	b2da      	uxtb	r2, r3
 8012182:	697b      	ldr	r3, [r7, #20]
 8012184:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012188:	697b      	ldr	r3, [r7, #20]
 801218a:	6a1b      	ldr	r3, [r3, #32]
 801218c:	6978      	ldr	r0, [r7, #20]
 801218e:	4798      	blx	r3
}
 8012190:	bf00      	nop
 8012192:	3718      	adds	r7, #24
 8012194:	46bd      	mov	sp, r7
 8012196:	bd80      	pop	{r7, pc}
 8012198:	20002460 	.word	0x20002460

0801219c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b084      	sub	sp, #16
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80121a4:	f107 0308 	add.w	r3, r7, #8
 80121a8:	4618      	mov	r0, r3
 80121aa:	f000 f857 	bl	801225c <prvGetNextExpireTime>
 80121ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80121b0:	68bb      	ldr	r3, [r7, #8]
 80121b2:	4619      	mov	r1, r3
 80121b4:	68f8      	ldr	r0, [r7, #12]
 80121b6:	f000 f803 	bl	80121c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80121ba:	f000 f8d5 	bl	8012368 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80121be:	e7f1      	b.n	80121a4 <prvTimerTask+0x8>

080121c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b084      	sub	sp, #16
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
 80121c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80121ca:	f7ff f81b 	bl	8011204 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80121ce:	f107 0308 	add.w	r3, r7, #8
 80121d2:	4618      	mov	r0, r3
 80121d4:	f000 f866 	bl	80122a4 <prvSampleTimeNow>
 80121d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80121da:	68bb      	ldr	r3, [r7, #8]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d130      	bne.n	8012242 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d10a      	bne.n	80121fc <prvProcessTimerOrBlockTask+0x3c>
 80121e6:	687a      	ldr	r2, [r7, #4]
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	429a      	cmp	r2, r3
 80121ec:	d806      	bhi.n	80121fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80121ee:	f7ff f817 	bl	8011220 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80121f2:	68f9      	ldr	r1, [r7, #12]
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	f7ff ff85 	bl	8012104 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80121fa:	e024      	b.n	8012246 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80121fc:	683b      	ldr	r3, [r7, #0]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d008      	beq.n	8012214 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012202:	4b13      	ldr	r3, [pc, #76]	; (8012250 <prvProcessTimerOrBlockTask+0x90>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d101      	bne.n	8012210 <prvProcessTimerOrBlockTask+0x50>
 801220c:	2301      	movs	r3, #1
 801220e:	e000      	b.n	8012212 <prvProcessTimerOrBlockTask+0x52>
 8012210:	2300      	movs	r3, #0
 8012212:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012214:	4b0f      	ldr	r3, [pc, #60]	; (8012254 <prvProcessTimerOrBlockTask+0x94>)
 8012216:	6818      	ldr	r0, [r3, #0]
 8012218:	687a      	ldr	r2, [r7, #4]
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	1ad3      	subs	r3, r2, r3
 801221e:	683a      	ldr	r2, [r7, #0]
 8012220:	4619      	mov	r1, r3
 8012222:	f7fe fd59 	bl	8010cd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012226:	f7fe fffb 	bl	8011220 <xTaskResumeAll>
 801222a:	4603      	mov	r3, r0
 801222c:	2b00      	cmp	r3, #0
 801222e:	d10a      	bne.n	8012246 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012230:	4b09      	ldr	r3, [pc, #36]	; (8012258 <prvProcessTimerOrBlockTask+0x98>)
 8012232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012236:	601a      	str	r2, [r3, #0]
 8012238:	f3bf 8f4f 	dsb	sy
 801223c:	f3bf 8f6f 	isb	sy
}
 8012240:	e001      	b.n	8012246 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012242:	f7fe ffed 	bl	8011220 <xTaskResumeAll>
}
 8012246:	bf00      	nop
 8012248:	3710      	adds	r7, #16
 801224a:	46bd      	mov	sp, r7
 801224c:	bd80      	pop	{r7, pc}
 801224e:	bf00      	nop
 8012250:	20002464 	.word	0x20002464
 8012254:	20002468 	.word	0x20002468
 8012258:	e000ed04 	.word	0xe000ed04

0801225c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801225c:	b480      	push	{r7}
 801225e:	b085      	sub	sp, #20
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012264:	4b0e      	ldr	r3, [pc, #56]	; (80122a0 <prvGetNextExpireTime+0x44>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d101      	bne.n	8012272 <prvGetNextExpireTime+0x16>
 801226e:	2201      	movs	r2, #1
 8012270:	e000      	b.n	8012274 <prvGetNextExpireTime+0x18>
 8012272:	2200      	movs	r2, #0
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d105      	bne.n	801228c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012280:	4b07      	ldr	r3, [pc, #28]	; (80122a0 <prvGetNextExpireTime+0x44>)
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	68db      	ldr	r3, [r3, #12]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	60fb      	str	r3, [r7, #12]
 801228a:	e001      	b.n	8012290 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801228c:	2300      	movs	r3, #0
 801228e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012290:	68fb      	ldr	r3, [r7, #12]
}
 8012292:	4618      	mov	r0, r3
 8012294:	3714      	adds	r7, #20
 8012296:	46bd      	mov	sp, r7
 8012298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229c:	4770      	bx	lr
 801229e:	bf00      	nop
 80122a0:	20002460 	.word	0x20002460

080122a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b084      	sub	sp, #16
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80122ac:	f7ff f856 	bl	801135c <xTaskGetTickCount>
 80122b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80122b2:	4b0b      	ldr	r3, [pc, #44]	; (80122e0 <prvSampleTimeNow+0x3c>)
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	68fa      	ldr	r2, [r7, #12]
 80122b8:	429a      	cmp	r2, r3
 80122ba:	d205      	bcs.n	80122c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80122bc:	f000 f936 	bl	801252c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	2201      	movs	r2, #1
 80122c4:	601a      	str	r2, [r3, #0]
 80122c6:	e002      	b.n	80122ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	2200      	movs	r2, #0
 80122cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80122ce:	4a04      	ldr	r2, [pc, #16]	; (80122e0 <prvSampleTimeNow+0x3c>)
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80122d4:	68fb      	ldr	r3, [r7, #12]
}
 80122d6:	4618      	mov	r0, r3
 80122d8:	3710      	adds	r7, #16
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}
 80122de:	bf00      	nop
 80122e0:	20002470 	.word	0x20002470

080122e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b086      	sub	sp, #24
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	60f8      	str	r0, [r7, #12]
 80122ec:	60b9      	str	r1, [r7, #8]
 80122ee:	607a      	str	r2, [r7, #4]
 80122f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80122f2:	2300      	movs	r3, #0
 80122f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	68ba      	ldr	r2, [r7, #8]
 80122fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	68fa      	ldr	r2, [r7, #12]
 8012300:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012302:	68ba      	ldr	r2, [r7, #8]
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	429a      	cmp	r2, r3
 8012308:	d812      	bhi.n	8012330 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801230a:	687a      	ldr	r2, [r7, #4]
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	1ad2      	subs	r2, r2, r3
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	699b      	ldr	r3, [r3, #24]
 8012314:	429a      	cmp	r2, r3
 8012316:	d302      	bcc.n	801231e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012318:	2301      	movs	r3, #1
 801231a:	617b      	str	r3, [r7, #20]
 801231c:	e01b      	b.n	8012356 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801231e:	4b10      	ldr	r3, [pc, #64]	; (8012360 <prvInsertTimerInActiveList+0x7c>)
 8012320:	681a      	ldr	r2, [r3, #0]
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	3304      	adds	r3, #4
 8012326:	4619      	mov	r1, r3
 8012328:	4610      	mov	r0, r2
 801232a:	f7fd ff00 	bl	801012e <vListInsert>
 801232e:	e012      	b.n	8012356 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012330:	687a      	ldr	r2, [r7, #4]
 8012332:	683b      	ldr	r3, [r7, #0]
 8012334:	429a      	cmp	r2, r3
 8012336:	d206      	bcs.n	8012346 <prvInsertTimerInActiveList+0x62>
 8012338:	68ba      	ldr	r2, [r7, #8]
 801233a:	683b      	ldr	r3, [r7, #0]
 801233c:	429a      	cmp	r2, r3
 801233e:	d302      	bcc.n	8012346 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012340:	2301      	movs	r3, #1
 8012342:	617b      	str	r3, [r7, #20]
 8012344:	e007      	b.n	8012356 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012346:	4b07      	ldr	r3, [pc, #28]	; (8012364 <prvInsertTimerInActiveList+0x80>)
 8012348:	681a      	ldr	r2, [r3, #0]
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	3304      	adds	r3, #4
 801234e:	4619      	mov	r1, r3
 8012350:	4610      	mov	r0, r2
 8012352:	f7fd feec 	bl	801012e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012356:	697b      	ldr	r3, [r7, #20]
}
 8012358:	4618      	mov	r0, r3
 801235a:	3718      	adds	r7, #24
 801235c:	46bd      	mov	sp, r7
 801235e:	bd80      	pop	{r7, pc}
 8012360:	20002464 	.word	0x20002464
 8012364:	20002460 	.word	0x20002460

08012368 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b08e      	sub	sp, #56	; 0x38
 801236c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801236e:	e0ca      	b.n	8012506 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	2b00      	cmp	r3, #0
 8012374:	da18      	bge.n	80123a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012376:	1d3b      	adds	r3, r7, #4
 8012378:	3304      	adds	r3, #4
 801237a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801237c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801237e:	2b00      	cmp	r3, #0
 8012380:	d10a      	bne.n	8012398 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8012382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012386:	f383 8811 	msr	BASEPRI, r3
 801238a:	f3bf 8f6f 	isb	sy
 801238e:	f3bf 8f4f 	dsb	sy
 8012392:	61fb      	str	r3, [r7, #28]
}
 8012394:	bf00      	nop
 8012396:	e7fe      	b.n	8012396 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801239e:	6850      	ldr	r0, [r2, #4]
 80123a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123a2:	6892      	ldr	r2, [r2, #8]
 80123a4:	4611      	mov	r1, r2
 80123a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	f2c0 80aa 	blt.w	8012504 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80123b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123b6:	695b      	ldr	r3, [r3, #20]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d004      	beq.n	80123c6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80123bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123be:	3304      	adds	r3, #4
 80123c0:	4618      	mov	r0, r3
 80123c2:	f7fd feed 	bl	80101a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80123c6:	463b      	mov	r3, r7
 80123c8:	4618      	mov	r0, r3
 80123ca:	f7ff ff6b 	bl	80122a4 <prvSampleTimeNow>
 80123ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	2b09      	cmp	r3, #9
 80123d4:	f200 8097 	bhi.w	8012506 <prvProcessReceivedCommands+0x19e>
 80123d8:	a201      	add	r2, pc, #4	; (adr r2, 80123e0 <prvProcessReceivedCommands+0x78>)
 80123da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123de:	bf00      	nop
 80123e0:	08012409 	.word	0x08012409
 80123e4:	08012409 	.word	0x08012409
 80123e8:	08012409 	.word	0x08012409
 80123ec:	0801247d 	.word	0x0801247d
 80123f0:	08012491 	.word	0x08012491
 80123f4:	080124db 	.word	0x080124db
 80123f8:	08012409 	.word	0x08012409
 80123fc:	08012409 	.word	0x08012409
 8012400:	0801247d 	.word	0x0801247d
 8012404:	08012491 	.word	0x08012491
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801240a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801240e:	f043 0301 	orr.w	r3, r3, #1
 8012412:	b2da      	uxtb	r2, r3
 8012414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012416:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801241a:	68ba      	ldr	r2, [r7, #8]
 801241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801241e:	699b      	ldr	r3, [r3, #24]
 8012420:	18d1      	adds	r1, r2, r3
 8012422:	68bb      	ldr	r3, [r7, #8]
 8012424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012426:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012428:	f7ff ff5c 	bl	80122e4 <prvInsertTimerInActiveList>
 801242c:	4603      	mov	r3, r0
 801242e:	2b00      	cmp	r3, #0
 8012430:	d069      	beq.n	8012506 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012434:	6a1b      	ldr	r3, [r3, #32]
 8012436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012438:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801243a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801243c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012440:	f003 0304 	and.w	r3, r3, #4
 8012444:	2b00      	cmp	r3, #0
 8012446:	d05e      	beq.n	8012506 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012448:	68ba      	ldr	r2, [r7, #8]
 801244a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801244c:	699b      	ldr	r3, [r3, #24]
 801244e:	441a      	add	r2, r3
 8012450:	2300      	movs	r3, #0
 8012452:	9300      	str	r3, [sp, #0]
 8012454:	2300      	movs	r3, #0
 8012456:	2100      	movs	r1, #0
 8012458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801245a:	f7ff fe05 	bl	8012068 <xTimerGenericCommand>
 801245e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012460:	6a3b      	ldr	r3, [r7, #32]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d14f      	bne.n	8012506 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8012466:	f04f 0350 	mov.w	r3, #80	; 0x50
 801246a:	f383 8811 	msr	BASEPRI, r3
 801246e:	f3bf 8f6f 	isb	sy
 8012472:	f3bf 8f4f 	dsb	sy
 8012476:	61bb      	str	r3, [r7, #24]
}
 8012478:	bf00      	nop
 801247a:	e7fe      	b.n	801247a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801247c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801247e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012482:	f023 0301 	bic.w	r3, r3, #1
 8012486:	b2da      	uxtb	r2, r3
 8012488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801248a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801248e:	e03a      	b.n	8012506 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012492:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012496:	f043 0301 	orr.w	r3, r3, #1
 801249a:	b2da      	uxtb	r2, r3
 801249c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801249e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80124a2:	68ba      	ldr	r2, [r7, #8]
 80124a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80124a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124aa:	699b      	ldr	r3, [r3, #24]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d10a      	bne.n	80124c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80124b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124b4:	f383 8811 	msr	BASEPRI, r3
 80124b8:	f3bf 8f6f 	isb	sy
 80124bc:	f3bf 8f4f 	dsb	sy
 80124c0:	617b      	str	r3, [r7, #20]
}
 80124c2:	bf00      	nop
 80124c4:	e7fe      	b.n	80124c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80124c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124c8:	699a      	ldr	r2, [r3, #24]
 80124ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124cc:	18d1      	adds	r1, r2, r3
 80124ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80124d4:	f7ff ff06 	bl	80122e4 <prvInsertTimerInActiveList>
					break;
 80124d8:	e015      	b.n	8012506 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80124da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124e0:	f003 0302 	and.w	r3, r3, #2
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d103      	bne.n	80124f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80124e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80124ea:	f000 fbe1 	bl	8012cb0 <vPortFree>
 80124ee:	e00a      	b.n	8012506 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80124f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124f6:	f023 0301 	bic.w	r3, r3, #1
 80124fa:	b2da      	uxtb	r2, r3
 80124fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012502:	e000      	b.n	8012506 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012504:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012506:	4b08      	ldr	r3, [pc, #32]	; (8012528 <prvProcessReceivedCommands+0x1c0>)
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	1d39      	adds	r1, r7, #4
 801250c:	2200      	movs	r2, #0
 801250e:	4618      	mov	r0, r3
 8012510:	f7fe f948 	bl	80107a4 <xQueueReceive>
 8012514:	4603      	mov	r3, r0
 8012516:	2b00      	cmp	r3, #0
 8012518:	f47f af2a 	bne.w	8012370 <prvProcessReceivedCommands+0x8>
	}
}
 801251c:	bf00      	nop
 801251e:	bf00      	nop
 8012520:	3730      	adds	r7, #48	; 0x30
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}
 8012526:	bf00      	nop
 8012528:	20002468 	.word	0x20002468

0801252c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b088      	sub	sp, #32
 8012530:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012532:	e048      	b.n	80125c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012534:	4b2d      	ldr	r3, [pc, #180]	; (80125ec <prvSwitchTimerLists+0xc0>)
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	68db      	ldr	r3, [r3, #12]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801253e:	4b2b      	ldr	r3, [pc, #172]	; (80125ec <prvSwitchTimerLists+0xc0>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	68db      	ldr	r3, [r3, #12]
 8012544:	68db      	ldr	r3, [r3, #12]
 8012546:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	3304      	adds	r3, #4
 801254c:	4618      	mov	r0, r3
 801254e:	f7fd fe27 	bl	80101a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	6a1b      	ldr	r3, [r3, #32]
 8012556:	68f8      	ldr	r0, [r7, #12]
 8012558:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012560:	f003 0304 	and.w	r3, r3, #4
 8012564:	2b00      	cmp	r3, #0
 8012566:	d02e      	beq.n	80125c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	699b      	ldr	r3, [r3, #24]
 801256c:	693a      	ldr	r2, [r7, #16]
 801256e:	4413      	add	r3, r2
 8012570:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012572:	68ba      	ldr	r2, [r7, #8]
 8012574:	693b      	ldr	r3, [r7, #16]
 8012576:	429a      	cmp	r2, r3
 8012578:	d90e      	bls.n	8012598 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	68ba      	ldr	r2, [r7, #8]
 801257e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	68fa      	ldr	r2, [r7, #12]
 8012584:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012586:	4b19      	ldr	r3, [pc, #100]	; (80125ec <prvSwitchTimerLists+0xc0>)
 8012588:	681a      	ldr	r2, [r3, #0]
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	3304      	adds	r3, #4
 801258e:	4619      	mov	r1, r3
 8012590:	4610      	mov	r0, r2
 8012592:	f7fd fdcc 	bl	801012e <vListInsert>
 8012596:	e016      	b.n	80125c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012598:	2300      	movs	r3, #0
 801259a:	9300      	str	r3, [sp, #0]
 801259c:	2300      	movs	r3, #0
 801259e:	693a      	ldr	r2, [r7, #16]
 80125a0:	2100      	movs	r1, #0
 80125a2:	68f8      	ldr	r0, [r7, #12]
 80125a4:	f7ff fd60 	bl	8012068 <xTimerGenericCommand>
 80125a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d10a      	bne.n	80125c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80125b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125b4:	f383 8811 	msr	BASEPRI, r3
 80125b8:	f3bf 8f6f 	isb	sy
 80125bc:	f3bf 8f4f 	dsb	sy
 80125c0:	603b      	str	r3, [r7, #0]
}
 80125c2:	bf00      	nop
 80125c4:	e7fe      	b.n	80125c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80125c6:	4b09      	ldr	r3, [pc, #36]	; (80125ec <prvSwitchTimerLists+0xc0>)
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d1b1      	bne.n	8012534 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80125d0:	4b06      	ldr	r3, [pc, #24]	; (80125ec <prvSwitchTimerLists+0xc0>)
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80125d6:	4b06      	ldr	r3, [pc, #24]	; (80125f0 <prvSwitchTimerLists+0xc4>)
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	4a04      	ldr	r2, [pc, #16]	; (80125ec <prvSwitchTimerLists+0xc0>)
 80125dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80125de:	4a04      	ldr	r2, [pc, #16]	; (80125f0 <prvSwitchTimerLists+0xc4>)
 80125e0:	697b      	ldr	r3, [r7, #20]
 80125e2:	6013      	str	r3, [r2, #0]
}
 80125e4:	bf00      	nop
 80125e6:	3718      	adds	r7, #24
 80125e8:	46bd      	mov	sp, r7
 80125ea:	bd80      	pop	{r7, pc}
 80125ec:	20002460 	.word	0x20002460
 80125f0:	20002464 	.word	0x20002464

080125f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b082      	sub	sp, #8
 80125f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80125fa:	f000 f96b 	bl	80128d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80125fe:	4b15      	ldr	r3, [pc, #84]	; (8012654 <prvCheckForValidListAndQueue+0x60>)
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d120      	bne.n	8012648 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012606:	4814      	ldr	r0, [pc, #80]	; (8012658 <prvCheckForValidListAndQueue+0x64>)
 8012608:	f7fd fd40 	bl	801008c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801260c:	4813      	ldr	r0, [pc, #76]	; (801265c <prvCheckForValidListAndQueue+0x68>)
 801260e:	f7fd fd3d 	bl	801008c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012612:	4b13      	ldr	r3, [pc, #76]	; (8012660 <prvCheckForValidListAndQueue+0x6c>)
 8012614:	4a10      	ldr	r2, [pc, #64]	; (8012658 <prvCheckForValidListAndQueue+0x64>)
 8012616:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012618:	4b12      	ldr	r3, [pc, #72]	; (8012664 <prvCheckForValidListAndQueue+0x70>)
 801261a:	4a10      	ldr	r2, [pc, #64]	; (801265c <prvCheckForValidListAndQueue+0x68>)
 801261c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801261e:	2300      	movs	r3, #0
 8012620:	9300      	str	r3, [sp, #0]
 8012622:	4b11      	ldr	r3, [pc, #68]	; (8012668 <prvCheckForValidListAndQueue+0x74>)
 8012624:	4a11      	ldr	r2, [pc, #68]	; (801266c <prvCheckForValidListAndQueue+0x78>)
 8012626:	2110      	movs	r1, #16
 8012628:	200a      	movs	r0, #10
 801262a:	f7fd fe4b 	bl	80102c4 <xQueueGenericCreateStatic>
 801262e:	4603      	mov	r3, r0
 8012630:	4a08      	ldr	r2, [pc, #32]	; (8012654 <prvCheckForValidListAndQueue+0x60>)
 8012632:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012634:	4b07      	ldr	r3, [pc, #28]	; (8012654 <prvCheckForValidListAndQueue+0x60>)
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d005      	beq.n	8012648 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801263c:	4b05      	ldr	r3, [pc, #20]	; (8012654 <prvCheckForValidListAndQueue+0x60>)
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	490b      	ldr	r1, [pc, #44]	; (8012670 <prvCheckForValidListAndQueue+0x7c>)
 8012642:	4618      	mov	r0, r3
 8012644:	f7fe fb1e 	bl	8010c84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012648:	f000 f974 	bl	8012934 <vPortExitCritical>
}
 801264c:	bf00      	nop
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}
 8012652:	bf00      	nop
 8012654:	20002468 	.word	0x20002468
 8012658:	20002438 	.word	0x20002438
 801265c:	2000244c 	.word	0x2000244c
 8012660:	20002460 	.word	0x20002460
 8012664:	20002464 	.word	0x20002464
 8012668:	20002514 	.word	0x20002514
 801266c:	20002474 	.word	0x20002474
 8012670:	080179b4 	.word	0x080179b4

08012674 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012674:	b480      	push	{r7}
 8012676:	b085      	sub	sp, #20
 8012678:	af00      	add	r7, sp, #0
 801267a:	60f8      	str	r0, [r7, #12]
 801267c:	60b9      	str	r1, [r7, #8]
 801267e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	3b04      	subs	r3, #4
 8012684:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801268c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	3b04      	subs	r3, #4
 8012692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012694:	68bb      	ldr	r3, [r7, #8]
 8012696:	f023 0201 	bic.w	r2, r3, #1
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	3b04      	subs	r3, #4
 80126a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80126a4:	4a0c      	ldr	r2, [pc, #48]	; (80126d8 <pxPortInitialiseStack+0x64>)
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	3b14      	subs	r3, #20
 80126ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80126b0:	687a      	ldr	r2, [r7, #4]
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	3b04      	subs	r3, #4
 80126ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	f06f 0202 	mvn.w	r2, #2
 80126c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	3b20      	subs	r3, #32
 80126c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80126ca:	68fb      	ldr	r3, [r7, #12]
}
 80126cc:	4618      	mov	r0, r3
 80126ce:	3714      	adds	r7, #20
 80126d0:	46bd      	mov	sp, r7
 80126d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d6:	4770      	bx	lr
 80126d8:	080126dd 	.word	0x080126dd

080126dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80126dc:	b480      	push	{r7}
 80126de:	b085      	sub	sp, #20
 80126e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80126e2:	2300      	movs	r3, #0
 80126e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80126e6:	4b12      	ldr	r3, [pc, #72]	; (8012730 <prvTaskExitError+0x54>)
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126ee:	d00a      	beq.n	8012706 <prvTaskExitError+0x2a>
	__asm volatile
 80126f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126f4:	f383 8811 	msr	BASEPRI, r3
 80126f8:	f3bf 8f6f 	isb	sy
 80126fc:	f3bf 8f4f 	dsb	sy
 8012700:	60fb      	str	r3, [r7, #12]
}
 8012702:	bf00      	nop
 8012704:	e7fe      	b.n	8012704 <prvTaskExitError+0x28>
	__asm volatile
 8012706:	f04f 0350 	mov.w	r3, #80	; 0x50
 801270a:	f383 8811 	msr	BASEPRI, r3
 801270e:	f3bf 8f6f 	isb	sy
 8012712:	f3bf 8f4f 	dsb	sy
 8012716:	60bb      	str	r3, [r7, #8]
}
 8012718:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801271a:	bf00      	nop
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d0fc      	beq.n	801271c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012722:	bf00      	nop
 8012724:	bf00      	nop
 8012726:	3714      	adds	r7, #20
 8012728:	46bd      	mov	sp, r7
 801272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272e:	4770      	bx	lr
 8012730:	20000050 	.word	0x20000050
	...

08012740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012740:	4b07      	ldr	r3, [pc, #28]	; (8012760 <pxCurrentTCBConst2>)
 8012742:	6819      	ldr	r1, [r3, #0]
 8012744:	6808      	ldr	r0, [r1, #0]
 8012746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801274a:	f380 8809 	msr	PSP, r0
 801274e:	f3bf 8f6f 	isb	sy
 8012752:	f04f 0000 	mov.w	r0, #0
 8012756:	f380 8811 	msr	BASEPRI, r0
 801275a:	4770      	bx	lr
 801275c:	f3af 8000 	nop.w

08012760 <pxCurrentTCBConst2>:
 8012760:	20001f30 	.word	0x20001f30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012764:	bf00      	nop
 8012766:	bf00      	nop

08012768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012768:	4808      	ldr	r0, [pc, #32]	; (801278c <prvPortStartFirstTask+0x24>)
 801276a:	6800      	ldr	r0, [r0, #0]
 801276c:	6800      	ldr	r0, [r0, #0]
 801276e:	f380 8808 	msr	MSP, r0
 8012772:	f04f 0000 	mov.w	r0, #0
 8012776:	f380 8814 	msr	CONTROL, r0
 801277a:	b662      	cpsie	i
 801277c:	b661      	cpsie	f
 801277e:	f3bf 8f4f 	dsb	sy
 8012782:	f3bf 8f6f 	isb	sy
 8012786:	df00      	svc	0
 8012788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801278a:	bf00      	nop
 801278c:	e000ed08 	.word	0xe000ed08

08012790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b086      	sub	sp, #24
 8012794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012796:	4b46      	ldr	r3, [pc, #280]	; (80128b0 <xPortStartScheduler+0x120>)
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	4a46      	ldr	r2, [pc, #280]	; (80128b4 <xPortStartScheduler+0x124>)
 801279c:	4293      	cmp	r3, r2
 801279e:	d10a      	bne.n	80127b6 <xPortStartScheduler+0x26>
	__asm volatile
 80127a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127a4:	f383 8811 	msr	BASEPRI, r3
 80127a8:	f3bf 8f6f 	isb	sy
 80127ac:	f3bf 8f4f 	dsb	sy
 80127b0:	613b      	str	r3, [r7, #16]
}
 80127b2:	bf00      	nop
 80127b4:	e7fe      	b.n	80127b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80127b6:	4b3e      	ldr	r3, [pc, #248]	; (80128b0 <xPortStartScheduler+0x120>)
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	4a3f      	ldr	r2, [pc, #252]	; (80128b8 <xPortStartScheduler+0x128>)
 80127bc:	4293      	cmp	r3, r2
 80127be:	d10a      	bne.n	80127d6 <xPortStartScheduler+0x46>
	__asm volatile
 80127c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127c4:	f383 8811 	msr	BASEPRI, r3
 80127c8:	f3bf 8f6f 	isb	sy
 80127cc:	f3bf 8f4f 	dsb	sy
 80127d0:	60fb      	str	r3, [r7, #12]
}
 80127d2:	bf00      	nop
 80127d4:	e7fe      	b.n	80127d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80127d6:	4b39      	ldr	r3, [pc, #228]	; (80128bc <xPortStartScheduler+0x12c>)
 80127d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80127da:	697b      	ldr	r3, [r7, #20]
 80127dc:	781b      	ldrb	r3, [r3, #0]
 80127de:	b2db      	uxtb	r3, r3
 80127e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80127e2:	697b      	ldr	r3, [r7, #20]
 80127e4:	22ff      	movs	r2, #255	; 0xff
 80127e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80127e8:	697b      	ldr	r3, [r7, #20]
 80127ea:	781b      	ldrb	r3, [r3, #0]
 80127ec:	b2db      	uxtb	r3, r3
 80127ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80127f0:	78fb      	ldrb	r3, [r7, #3]
 80127f2:	b2db      	uxtb	r3, r3
 80127f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80127f8:	b2da      	uxtb	r2, r3
 80127fa:	4b31      	ldr	r3, [pc, #196]	; (80128c0 <xPortStartScheduler+0x130>)
 80127fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80127fe:	4b31      	ldr	r3, [pc, #196]	; (80128c4 <xPortStartScheduler+0x134>)
 8012800:	2207      	movs	r2, #7
 8012802:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012804:	e009      	b.n	801281a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012806:	4b2f      	ldr	r3, [pc, #188]	; (80128c4 <xPortStartScheduler+0x134>)
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	3b01      	subs	r3, #1
 801280c:	4a2d      	ldr	r2, [pc, #180]	; (80128c4 <xPortStartScheduler+0x134>)
 801280e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012810:	78fb      	ldrb	r3, [r7, #3]
 8012812:	b2db      	uxtb	r3, r3
 8012814:	005b      	lsls	r3, r3, #1
 8012816:	b2db      	uxtb	r3, r3
 8012818:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801281a:	78fb      	ldrb	r3, [r7, #3]
 801281c:	b2db      	uxtb	r3, r3
 801281e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012822:	2b80      	cmp	r3, #128	; 0x80
 8012824:	d0ef      	beq.n	8012806 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012826:	4b27      	ldr	r3, [pc, #156]	; (80128c4 <xPortStartScheduler+0x134>)
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	f1c3 0307 	rsb	r3, r3, #7
 801282e:	2b04      	cmp	r3, #4
 8012830:	d00a      	beq.n	8012848 <xPortStartScheduler+0xb8>
	__asm volatile
 8012832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012836:	f383 8811 	msr	BASEPRI, r3
 801283a:	f3bf 8f6f 	isb	sy
 801283e:	f3bf 8f4f 	dsb	sy
 8012842:	60bb      	str	r3, [r7, #8]
}
 8012844:	bf00      	nop
 8012846:	e7fe      	b.n	8012846 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012848:	4b1e      	ldr	r3, [pc, #120]	; (80128c4 <xPortStartScheduler+0x134>)
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	021b      	lsls	r3, r3, #8
 801284e:	4a1d      	ldr	r2, [pc, #116]	; (80128c4 <xPortStartScheduler+0x134>)
 8012850:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012852:	4b1c      	ldr	r3, [pc, #112]	; (80128c4 <xPortStartScheduler+0x134>)
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801285a:	4a1a      	ldr	r2, [pc, #104]	; (80128c4 <xPortStartScheduler+0x134>)
 801285c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	b2da      	uxtb	r2, r3
 8012862:	697b      	ldr	r3, [r7, #20]
 8012864:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012866:	4b18      	ldr	r3, [pc, #96]	; (80128c8 <xPortStartScheduler+0x138>)
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	4a17      	ldr	r2, [pc, #92]	; (80128c8 <xPortStartScheduler+0x138>)
 801286c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012870:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012872:	4b15      	ldr	r3, [pc, #84]	; (80128c8 <xPortStartScheduler+0x138>)
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	4a14      	ldr	r2, [pc, #80]	; (80128c8 <xPortStartScheduler+0x138>)
 8012878:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801287c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801287e:	f000 f8dd 	bl	8012a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012882:	4b12      	ldr	r3, [pc, #72]	; (80128cc <xPortStartScheduler+0x13c>)
 8012884:	2200      	movs	r2, #0
 8012886:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012888:	f000 f8fc 	bl	8012a84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801288c:	4b10      	ldr	r3, [pc, #64]	; (80128d0 <xPortStartScheduler+0x140>)
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	4a0f      	ldr	r2, [pc, #60]	; (80128d0 <xPortStartScheduler+0x140>)
 8012892:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012896:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012898:	f7ff ff66 	bl	8012768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801289c:	f7fe fe28 	bl	80114f0 <vTaskSwitchContext>
	prvTaskExitError();
 80128a0:	f7ff ff1c 	bl	80126dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80128a4:	2300      	movs	r3, #0
}
 80128a6:	4618      	mov	r0, r3
 80128a8:	3718      	adds	r7, #24
 80128aa:	46bd      	mov	sp, r7
 80128ac:	bd80      	pop	{r7, pc}
 80128ae:	bf00      	nop
 80128b0:	e000ed00 	.word	0xe000ed00
 80128b4:	410fc271 	.word	0x410fc271
 80128b8:	410fc270 	.word	0x410fc270
 80128bc:	e000e400 	.word	0xe000e400
 80128c0:	20002564 	.word	0x20002564
 80128c4:	20002568 	.word	0x20002568
 80128c8:	e000ed20 	.word	0xe000ed20
 80128cc:	20000050 	.word	0x20000050
 80128d0:	e000ef34 	.word	0xe000ef34

080128d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80128d4:	b480      	push	{r7}
 80128d6:	b083      	sub	sp, #12
 80128d8:	af00      	add	r7, sp, #0
	__asm volatile
 80128da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128de:	f383 8811 	msr	BASEPRI, r3
 80128e2:	f3bf 8f6f 	isb	sy
 80128e6:	f3bf 8f4f 	dsb	sy
 80128ea:	607b      	str	r3, [r7, #4]
}
 80128ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80128ee:	4b0f      	ldr	r3, [pc, #60]	; (801292c <vPortEnterCritical+0x58>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	3301      	adds	r3, #1
 80128f4:	4a0d      	ldr	r2, [pc, #52]	; (801292c <vPortEnterCritical+0x58>)
 80128f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80128f8:	4b0c      	ldr	r3, [pc, #48]	; (801292c <vPortEnterCritical+0x58>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	2b01      	cmp	r3, #1
 80128fe:	d10f      	bne.n	8012920 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012900:	4b0b      	ldr	r3, [pc, #44]	; (8012930 <vPortEnterCritical+0x5c>)
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	b2db      	uxtb	r3, r3
 8012906:	2b00      	cmp	r3, #0
 8012908:	d00a      	beq.n	8012920 <vPortEnterCritical+0x4c>
	__asm volatile
 801290a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801290e:	f383 8811 	msr	BASEPRI, r3
 8012912:	f3bf 8f6f 	isb	sy
 8012916:	f3bf 8f4f 	dsb	sy
 801291a:	603b      	str	r3, [r7, #0]
}
 801291c:	bf00      	nop
 801291e:	e7fe      	b.n	801291e <vPortEnterCritical+0x4a>
	}
}
 8012920:	bf00      	nop
 8012922:	370c      	adds	r7, #12
 8012924:	46bd      	mov	sp, r7
 8012926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292a:	4770      	bx	lr
 801292c:	20000050 	.word	0x20000050
 8012930:	e000ed04 	.word	0xe000ed04

08012934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012934:	b480      	push	{r7}
 8012936:	b083      	sub	sp, #12
 8012938:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801293a:	4b12      	ldr	r3, [pc, #72]	; (8012984 <vPortExitCritical+0x50>)
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d10a      	bne.n	8012958 <vPortExitCritical+0x24>
	__asm volatile
 8012942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012946:	f383 8811 	msr	BASEPRI, r3
 801294a:	f3bf 8f6f 	isb	sy
 801294e:	f3bf 8f4f 	dsb	sy
 8012952:	607b      	str	r3, [r7, #4]
}
 8012954:	bf00      	nop
 8012956:	e7fe      	b.n	8012956 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012958:	4b0a      	ldr	r3, [pc, #40]	; (8012984 <vPortExitCritical+0x50>)
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	3b01      	subs	r3, #1
 801295e:	4a09      	ldr	r2, [pc, #36]	; (8012984 <vPortExitCritical+0x50>)
 8012960:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012962:	4b08      	ldr	r3, [pc, #32]	; (8012984 <vPortExitCritical+0x50>)
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d105      	bne.n	8012976 <vPortExitCritical+0x42>
 801296a:	2300      	movs	r3, #0
 801296c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801296e:	683b      	ldr	r3, [r7, #0]
 8012970:	f383 8811 	msr	BASEPRI, r3
}
 8012974:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012976:	bf00      	nop
 8012978:	370c      	adds	r7, #12
 801297a:	46bd      	mov	sp, r7
 801297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012980:	4770      	bx	lr
 8012982:	bf00      	nop
 8012984:	20000050 	.word	0x20000050
	...

08012990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012990:	f3ef 8009 	mrs	r0, PSP
 8012994:	f3bf 8f6f 	isb	sy
 8012998:	4b15      	ldr	r3, [pc, #84]	; (80129f0 <pxCurrentTCBConst>)
 801299a:	681a      	ldr	r2, [r3, #0]
 801299c:	f01e 0f10 	tst.w	lr, #16
 80129a0:	bf08      	it	eq
 80129a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80129a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129aa:	6010      	str	r0, [r2, #0]
 80129ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80129b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80129b4:	f380 8811 	msr	BASEPRI, r0
 80129b8:	f3bf 8f4f 	dsb	sy
 80129bc:	f3bf 8f6f 	isb	sy
 80129c0:	f7fe fd96 	bl	80114f0 <vTaskSwitchContext>
 80129c4:	f04f 0000 	mov.w	r0, #0
 80129c8:	f380 8811 	msr	BASEPRI, r0
 80129cc:	bc09      	pop	{r0, r3}
 80129ce:	6819      	ldr	r1, [r3, #0]
 80129d0:	6808      	ldr	r0, [r1, #0]
 80129d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129d6:	f01e 0f10 	tst.w	lr, #16
 80129da:	bf08      	it	eq
 80129dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80129e0:	f380 8809 	msr	PSP, r0
 80129e4:	f3bf 8f6f 	isb	sy
 80129e8:	4770      	bx	lr
 80129ea:	bf00      	nop
 80129ec:	f3af 8000 	nop.w

080129f0 <pxCurrentTCBConst>:
 80129f0:	20001f30 	.word	0x20001f30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80129f4:	bf00      	nop
 80129f6:	bf00      	nop

080129f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b082      	sub	sp, #8
 80129fc:	af00      	add	r7, sp, #0
	__asm volatile
 80129fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a02:	f383 8811 	msr	BASEPRI, r3
 8012a06:	f3bf 8f6f 	isb	sy
 8012a0a:	f3bf 8f4f 	dsb	sy
 8012a0e:	607b      	str	r3, [r7, #4]
}
 8012a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012a12:	f7fe fcb3 	bl	801137c <xTaskIncrementTick>
 8012a16:	4603      	mov	r3, r0
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d003      	beq.n	8012a24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012a1c:	4b06      	ldr	r3, [pc, #24]	; (8012a38 <xPortSysTickHandler+0x40>)
 8012a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a22:	601a      	str	r2, [r3, #0]
 8012a24:	2300      	movs	r3, #0
 8012a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012a28:	683b      	ldr	r3, [r7, #0]
 8012a2a:	f383 8811 	msr	BASEPRI, r3
}
 8012a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012a30:	bf00      	nop
 8012a32:	3708      	adds	r7, #8
 8012a34:	46bd      	mov	sp, r7
 8012a36:	bd80      	pop	{r7, pc}
 8012a38:	e000ed04 	.word	0xe000ed04

08012a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012a3c:	b480      	push	{r7}
 8012a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012a40:	4b0b      	ldr	r3, [pc, #44]	; (8012a70 <vPortSetupTimerInterrupt+0x34>)
 8012a42:	2200      	movs	r2, #0
 8012a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012a46:	4b0b      	ldr	r3, [pc, #44]	; (8012a74 <vPortSetupTimerInterrupt+0x38>)
 8012a48:	2200      	movs	r2, #0
 8012a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012a4c:	4b0a      	ldr	r3, [pc, #40]	; (8012a78 <vPortSetupTimerInterrupt+0x3c>)
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	4a0a      	ldr	r2, [pc, #40]	; (8012a7c <vPortSetupTimerInterrupt+0x40>)
 8012a52:	fba2 2303 	umull	r2, r3, r2, r3
 8012a56:	099b      	lsrs	r3, r3, #6
 8012a58:	4a09      	ldr	r2, [pc, #36]	; (8012a80 <vPortSetupTimerInterrupt+0x44>)
 8012a5a:	3b01      	subs	r3, #1
 8012a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012a5e:	4b04      	ldr	r3, [pc, #16]	; (8012a70 <vPortSetupTimerInterrupt+0x34>)
 8012a60:	2207      	movs	r2, #7
 8012a62:	601a      	str	r2, [r3, #0]
}
 8012a64:	bf00      	nop
 8012a66:	46bd      	mov	sp, r7
 8012a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a6c:	4770      	bx	lr
 8012a6e:	bf00      	nop
 8012a70:	e000e010 	.word	0xe000e010
 8012a74:	e000e018 	.word	0xe000e018
 8012a78:	20000010 	.word	0x20000010
 8012a7c:	10624dd3 	.word	0x10624dd3
 8012a80:	e000e014 	.word	0xe000e014

08012a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012a84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012a94 <vPortEnableVFP+0x10>
 8012a88:	6801      	ldr	r1, [r0, #0]
 8012a8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012a8e:	6001      	str	r1, [r0, #0]
 8012a90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012a92:	bf00      	nop
 8012a94:	e000ed88 	.word	0xe000ed88

08012a98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012a98:	b480      	push	{r7}
 8012a9a:	b085      	sub	sp, #20
 8012a9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012a9e:	f3ef 8305 	mrs	r3, IPSR
 8012aa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	2b0f      	cmp	r3, #15
 8012aa8:	d914      	bls.n	8012ad4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012aaa:	4a17      	ldr	r2, [pc, #92]	; (8012b08 <vPortValidateInterruptPriority+0x70>)
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	4413      	add	r3, r2
 8012ab0:	781b      	ldrb	r3, [r3, #0]
 8012ab2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012ab4:	4b15      	ldr	r3, [pc, #84]	; (8012b0c <vPortValidateInterruptPriority+0x74>)
 8012ab6:	781b      	ldrb	r3, [r3, #0]
 8012ab8:	7afa      	ldrb	r2, [r7, #11]
 8012aba:	429a      	cmp	r2, r3
 8012abc:	d20a      	bcs.n	8012ad4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ac2:	f383 8811 	msr	BASEPRI, r3
 8012ac6:	f3bf 8f6f 	isb	sy
 8012aca:	f3bf 8f4f 	dsb	sy
 8012ace:	607b      	str	r3, [r7, #4]
}
 8012ad0:	bf00      	nop
 8012ad2:	e7fe      	b.n	8012ad2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012ad4:	4b0e      	ldr	r3, [pc, #56]	; (8012b10 <vPortValidateInterruptPriority+0x78>)
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012adc:	4b0d      	ldr	r3, [pc, #52]	; (8012b14 <vPortValidateInterruptPriority+0x7c>)
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	429a      	cmp	r2, r3
 8012ae2:	d90a      	bls.n	8012afa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ae8:	f383 8811 	msr	BASEPRI, r3
 8012aec:	f3bf 8f6f 	isb	sy
 8012af0:	f3bf 8f4f 	dsb	sy
 8012af4:	603b      	str	r3, [r7, #0]
}
 8012af6:	bf00      	nop
 8012af8:	e7fe      	b.n	8012af8 <vPortValidateInterruptPriority+0x60>
	}
 8012afa:	bf00      	nop
 8012afc:	3714      	adds	r7, #20
 8012afe:	46bd      	mov	sp, r7
 8012b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b04:	4770      	bx	lr
 8012b06:	bf00      	nop
 8012b08:	e000e3f0 	.word	0xe000e3f0
 8012b0c:	20002564 	.word	0x20002564
 8012b10:	e000ed0c 	.word	0xe000ed0c
 8012b14:	20002568 	.word	0x20002568

08012b18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b08a      	sub	sp, #40	; 0x28
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012b20:	2300      	movs	r3, #0
 8012b22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012b24:	f7fe fb6e 	bl	8011204 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012b28:	4b5b      	ldr	r3, [pc, #364]	; (8012c98 <pvPortMalloc+0x180>)
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d101      	bne.n	8012b34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012b30:	f000 f920 	bl	8012d74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012b34:	4b59      	ldr	r3, [pc, #356]	; (8012c9c <pvPortMalloc+0x184>)
 8012b36:	681a      	ldr	r2, [r3, #0]
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	4013      	ands	r3, r2
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	f040 8093 	bne.w	8012c68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d01d      	beq.n	8012b84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012b48:	2208      	movs	r2, #8
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	4413      	add	r3, r2
 8012b4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	f003 0307 	and.w	r3, r3, #7
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d014      	beq.n	8012b84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	f023 0307 	bic.w	r3, r3, #7
 8012b60:	3308      	adds	r3, #8
 8012b62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	f003 0307 	and.w	r3, r3, #7
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d00a      	beq.n	8012b84 <pvPortMalloc+0x6c>
	__asm volatile
 8012b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b72:	f383 8811 	msr	BASEPRI, r3
 8012b76:	f3bf 8f6f 	isb	sy
 8012b7a:	f3bf 8f4f 	dsb	sy
 8012b7e:	617b      	str	r3, [r7, #20]
}
 8012b80:	bf00      	nop
 8012b82:	e7fe      	b.n	8012b82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d06e      	beq.n	8012c68 <pvPortMalloc+0x150>
 8012b8a:	4b45      	ldr	r3, [pc, #276]	; (8012ca0 <pvPortMalloc+0x188>)
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	687a      	ldr	r2, [r7, #4]
 8012b90:	429a      	cmp	r2, r3
 8012b92:	d869      	bhi.n	8012c68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012b94:	4b43      	ldr	r3, [pc, #268]	; (8012ca4 <pvPortMalloc+0x18c>)
 8012b96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012b98:	4b42      	ldr	r3, [pc, #264]	; (8012ca4 <pvPortMalloc+0x18c>)
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012b9e:	e004      	b.n	8012baa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ba2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bac:	685b      	ldr	r3, [r3, #4]
 8012bae:	687a      	ldr	r2, [r7, #4]
 8012bb0:	429a      	cmp	r2, r3
 8012bb2:	d903      	bls.n	8012bbc <pvPortMalloc+0xa4>
 8012bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d1f1      	bne.n	8012ba0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012bbc:	4b36      	ldr	r3, [pc, #216]	; (8012c98 <pvPortMalloc+0x180>)
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012bc2:	429a      	cmp	r2, r3
 8012bc4:	d050      	beq.n	8012c68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012bc6:	6a3b      	ldr	r3, [r7, #32]
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	2208      	movs	r2, #8
 8012bcc:	4413      	add	r3, r2
 8012bce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bd2:	681a      	ldr	r2, [r3, #0]
 8012bd4:	6a3b      	ldr	r3, [r7, #32]
 8012bd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bda:	685a      	ldr	r2, [r3, #4]
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	1ad2      	subs	r2, r2, r3
 8012be0:	2308      	movs	r3, #8
 8012be2:	005b      	lsls	r3, r3, #1
 8012be4:	429a      	cmp	r2, r3
 8012be6:	d91f      	bls.n	8012c28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	4413      	add	r3, r2
 8012bee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012bf0:	69bb      	ldr	r3, [r7, #24]
 8012bf2:	f003 0307 	and.w	r3, r3, #7
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d00a      	beq.n	8012c10 <pvPortMalloc+0xf8>
	__asm volatile
 8012bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bfe:	f383 8811 	msr	BASEPRI, r3
 8012c02:	f3bf 8f6f 	isb	sy
 8012c06:	f3bf 8f4f 	dsb	sy
 8012c0a:	613b      	str	r3, [r7, #16]
}
 8012c0c:	bf00      	nop
 8012c0e:	e7fe      	b.n	8012c0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c12:	685a      	ldr	r2, [r3, #4]
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	1ad2      	subs	r2, r2, r3
 8012c18:	69bb      	ldr	r3, [r7, #24]
 8012c1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c1e:	687a      	ldr	r2, [r7, #4]
 8012c20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012c22:	69b8      	ldr	r0, [r7, #24]
 8012c24:	f000 f908 	bl	8012e38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012c28:	4b1d      	ldr	r3, [pc, #116]	; (8012ca0 <pvPortMalloc+0x188>)
 8012c2a:	681a      	ldr	r2, [r3, #0]
 8012c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c2e:	685b      	ldr	r3, [r3, #4]
 8012c30:	1ad3      	subs	r3, r2, r3
 8012c32:	4a1b      	ldr	r2, [pc, #108]	; (8012ca0 <pvPortMalloc+0x188>)
 8012c34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012c36:	4b1a      	ldr	r3, [pc, #104]	; (8012ca0 <pvPortMalloc+0x188>)
 8012c38:	681a      	ldr	r2, [r3, #0]
 8012c3a:	4b1b      	ldr	r3, [pc, #108]	; (8012ca8 <pvPortMalloc+0x190>)
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	429a      	cmp	r2, r3
 8012c40:	d203      	bcs.n	8012c4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012c42:	4b17      	ldr	r3, [pc, #92]	; (8012ca0 <pvPortMalloc+0x188>)
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	4a18      	ldr	r2, [pc, #96]	; (8012ca8 <pvPortMalloc+0x190>)
 8012c48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c4c:	685a      	ldr	r2, [r3, #4]
 8012c4e:	4b13      	ldr	r3, [pc, #76]	; (8012c9c <pvPortMalloc+0x184>)
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	431a      	orrs	r2, r3
 8012c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012c5e:	4b13      	ldr	r3, [pc, #76]	; (8012cac <pvPortMalloc+0x194>)
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	3301      	adds	r3, #1
 8012c64:	4a11      	ldr	r2, [pc, #68]	; (8012cac <pvPortMalloc+0x194>)
 8012c66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012c68:	f7fe fada 	bl	8011220 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012c6c:	69fb      	ldr	r3, [r7, #28]
 8012c6e:	f003 0307 	and.w	r3, r3, #7
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d00a      	beq.n	8012c8c <pvPortMalloc+0x174>
	__asm volatile
 8012c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c7a:	f383 8811 	msr	BASEPRI, r3
 8012c7e:	f3bf 8f6f 	isb	sy
 8012c82:	f3bf 8f4f 	dsb	sy
 8012c86:	60fb      	str	r3, [r7, #12]
}
 8012c88:	bf00      	nop
 8012c8a:	e7fe      	b.n	8012c8a <pvPortMalloc+0x172>
	return pvReturn;
 8012c8c:	69fb      	ldr	r3, [r7, #28]
}
 8012c8e:	4618      	mov	r0, r3
 8012c90:	3728      	adds	r7, #40	; 0x28
 8012c92:	46bd      	mov	sp, r7
 8012c94:	bd80      	pop	{r7, pc}
 8012c96:	bf00      	nop
 8012c98:	2000506c 	.word	0x2000506c
 8012c9c:	20005080 	.word	0x20005080
 8012ca0:	20005070 	.word	0x20005070
 8012ca4:	20005064 	.word	0x20005064
 8012ca8:	20005074 	.word	0x20005074
 8012cac:	20005078 	.word	0x20005078

08012cb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b086      	sub	sp, #24
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d04d      	beq.n	8012d5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012cc2:	2308      	movs	r3, #8
 8012cc4:	425b      	negs	r3, r3
 8012cc6:	697a      	ldr	r2, [r7, #20]
 8012cc8:	4413      	add	r3, r2
 8012cca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012ccc:	697b      	ldr	r3, [r7, #20]
 8012cce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012cd0:	693b      	ldr	r3, [r7, #16]
 8012cd2:	685a      	ldr	r2, [r3, #4]
 8012cd4:	4b24      	ldr	r3, [pc, #144]	; (8012d68 <vPortFree+0xb8>)
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	4013      	ands	r3, r2
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d10a      	bne.n	8012cf4 <vPortFree+0x44>
	__asm volatile
 8012cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ce2:	f383 8811 	msr	BASEPRI, r3
 8012ce6:	f3bf 8f6f 	isb	sy
 8012cea:	f3bf 8f4f 	dsb	sy
 8012cee:	60fb      	str	r3, [r7, #12]
}
 8012cf0:	bf00      	nop
 8012cf2:	e7fe      	b.n	8012cf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012cf4:	693b      	ldr	r3, [r7, #16]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d00a      	beq.n	8012d12 <vPortFree+0x62>
	__asm volatile
 8012cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d00:	f383 8811 	msr	BASEPRI, r3
 8012d04:	f3bf 8f6f 	isb	sy
 8012d08:	f3bf 8f4f 	dsb	sy
 8012d0c:	60bb      	str	r3, [r7, #8]
}
 8012d0e:	bf00      	nop
 8012d10:	e7fe      	b.n	8012d10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012d12:	693b      	ldr	r3, [r7, #16]
 8012d14:	685a      	ldr	r2, [r3, #4]
 8012d16:	4b14      	ldr	r3, [pc, #80]	; (8012d68 <vPortFree+0xb8>)
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	4013      	ands	r3, r2
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d01e      	beq.n	8012d5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012d20:	693b      	ldr	r3, [r7, #16]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d11a      	bne.n	8012d5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012d28:	693b      	ldr	r3, [r7, #16]
 8012d2a:	685a      	ldr	r2, [r3, #4]
 8012d2c:	4b0e      	ldr	r3, [pc, #56]	; (8012d68 <vPortFree+0xb8>)
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	43db      	mvns	r3, r3
 8012d32:	401a      	ands	r2, r3
 8012d34:	693b      	ldr	r3, [r7, #16]
 8012d36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012d38:	f7fe fa64 	bl	8011204 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012d3c:	693b      	ldr	r3, [r7, #16]
 8012d3e:	685a      	ldr	r2, [r3, #4]
 8012d40:	4b0a      	ldr	r3, [pc, #40]	; (8012d6c <vPortFree+0xbc>)
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	4413      	add	r3, r2
 8012d46:	4a09      	ldr	r2, [pc, #36]	; (8012d6c <vPortFree+0xbc>)
 8012d48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012d4a:	6938      	ldr	r0, [r7, #16]
 8012d4c:	f000 f874 	bl	8012e38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012d50:	4b07      	ldr	r3, [pc, #28]	; (8012d70 <vPortFree+0xc0>)
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	3301      	adds	r3, #1
 8012d56:	4a06      	ldr	r2, [pc, #24]	; (8012d70 <vPortFree+0xc0>)
 8012d58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012d5a:	f7fe fa61 	bl	8011220 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012d5e:	bf00      	nop
 8012d60:	3718      	adds	r7, #24
 8012d62:	46bd      	mov	sp, r7
 8012d64:	bd80      	pop	{r7, pc}
 8012d66:	bf00      	nop
 8012d68:	20005080 	.word	0x20005080
 8012d6c:	20005070 	.word	0x20005070
 8012d70:	2000507c 	.word	0x2000507c

08012d74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012d74:	b480      	push	{r7}
 8012d76:	b085      	sub	sp, #20
 8012d78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012d7a:	f642 23f8 	movw	r3, #11000	; 0x2af8
 8012d7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012d80:	4b27      	ldr	r3, [pc, #156]	; (8012e20 <prvHeapInit+0xac>)
 8012d82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	f003 0307 	and.w	r3, r3, #7
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d00c      	beq.n	8012da8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	3307      	adds	r3, #7
 8012d92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	f023 0307 	bic.w	r3, r3, #7
 8012d9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012d9c:	68ba      	ldr	r2, [r7, #8]
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	1ad3      	subs	r3, r2, r3
 8012da2:	4a1f      	ldr	r2, [pc, #124]	; (8012e20 <prvHeapInit+0xac>)
 8012da4:	4413      	add	r3, r2
 8012da6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012dac:	4a1d      	ldr	r2, [pc, #116]	; (8012e24 <prvHeapInit+0xb0>)
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012db2:	4b1c      	ldr	r3, [pc, #112]	; (8012e24 <prvHeapInit+0xb0>)
 8012db4:	2200      	movs	r2, #0
 8012db6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	68ba      	ldr	r2, [r7, #8]
 8012dbc:	4413      	add	r3, r2
 8012dbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012dc0:	2208      	movs	r2, #8
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	1a9b      	subs	r3, r3, r2
 8012dc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	f023 0307 	bic.w	r3, r3, #7
 8012dce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	4a15      	ldr	r2, [pc, #84]	; (8012e28 <prvHeapInit+0xb4>)
 8012dd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012dd6:	4b14      	ldr	r3, [pc, #80]	; (8012e28 <prvHeapInit+0xb4>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	2200      	movs	r2, #0
 8012ddc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012dde:	4b12      	ldr	r3, [pc, #72]	; (8012e28 <prvHeapInit+0xb4>)
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	2200      	movs	r2, #0
 8012de4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012dea:	683b      	ldr	r3, [r7, #0]
 8012dec:	68fa      	ldr	r2, [r7, #12]
 8012dee:	1ad2      	subs	r2, r2, r3
 8012df0:	683b      	ldr	r3, [r7, #0]
 8012df2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012df4:	4b0c      	ldr	r3, [pc, #48]	; (8012e28 <prvHeapInit+0xb4>)
 8012df6:	681a      	ldr	r2, [r3, #0]
 8012df8:	683b      	ldr	r3, [r7, #0]
 8012dfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012dfc:	683b      	ldr	r3, [r7, #0]
 8012dfe:	685b      	ldr	r3, [r3, #4]
 8012e00:	4a0a      	ldr	r2, [pc, #40]	; (8012e2c <prvHeapInit+0xb8>)
 8012e02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012e04:	683b      	ldr	r3, [r7, #0]
 8012e06:	685b      	ldr	r3, [r3, #4]
 8012e08:	4a09      	ldr	r2, [pc, #36]	; (8012e30 <prvHeapInit+0xbc>)
 8012e0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012e0c:	4b09      	ldr	r3, [pc, #36]	; (8012e34 <prvHeapInit+0xc0>)
 8012e0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012e12:	601a      	str	r2, [r3, #0]
}
 8012e14:	bf00      	nop
 8012e16:	3714      	adds	r7, #20
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1e:	4770      	bx	lr
 8012e20:	2000256c 	.word	0x2000256c
 8012e24:	20005064 	.word	0x20005064
 8012e28:	2000506c 	.word	0x2000506c
 8012e2c:	20005074 	.word	0x20005074
 8012e30:	20005070 	.word	0x20005070
 8012e34:	20005080 	.word	0x20005080

08012e38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012e38:	b480      	push	{r7}
 8012e3a:	b085      	sub	sp, #20
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012e40:	4b28      	ldr	r3, [pc, #160]	; (8012ee4 <prvInsertBlockIntoFreeList+0xac>)
 8012e42:	60fb      	str	r3, [r7, #12]
 8012e44:	e002      	b.n	8012e4c <prvInsertBlockIntoFreeList+0x14>
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	60fb      	str	r3, [r7, #12]
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	687a      	ldr	r2, [r7, #4]
 8012e52:	429a      	cmp	r2, r3
 8012e54:	d8f7      	bhi.n	8012e46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	685b      	ldr	r3, [r3, #4]
 8012e5e:	68ba      	ldr	r2, [r7, #8]
 8012e60:	4413      	add	r3, r2
 8012e62:	687a      	ldr	r2, [r7, #4]
 8012e64:	429a      	cmp	r2, r3
 8012e66:	d108      	bne.n	8012e7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	685a      	ldr	r2, [r3, #4]
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	685b      	ldr	r3, [r3, #4]
 8012e70:	441a      	add	r2, r3
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	685b      	ldr	r3, [r3, #4]
 8012e82:	68ba      	ldr	r2, [r7, #8]
 8012e84:	441a      	add	r2, r3
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	429a      	cmp	r2, r3
 8012e8c:	d118      	bne.n	8012ec0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	681a      	ldr	r2, [r3, #0]
 8012e92:	4b15      	ldr	r3, [pc, #84]	; (8012ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	429a      	cmp	r2, r3
 8012e98:	d00d      	beq.n	8012eb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	685a      	ldr	r2, [r3, #4]
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	685b      	ldr	r3, [r3, #4]
 8012ea4:	441a      	add	r2, r3
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	681a      	ldr	r2, [r3, #0]
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	601a      	str	r2, [r3, #0]
 8012eb4:	e008      	b.n	8012ec8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012eb6:	4b0c      	ldr	r3, [pc, #48]	; (8012ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8012eb8:	681a      	ldr	r2, [r3, #0]
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	601a      	str	r2, [r3, #0]
 8012ebe:	e003      	b.n	8012ec8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	681a      	ldr	r2, [r3, #0]
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012ec8:	68fa      	ldr	r2, [r7, #12]
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	429a      	cmp	r2, r3
 8012ece:	d002      	beq.n	8012ed6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	687a      	ldr	r2, [r7, #4]
 8012ed4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012ed6:	bf00      	nop
 8012ed8:	3714      	adds	r7, #20
 8012eda:	46bd      	mov	sp, r7
 8012edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee0:	4770      	bx	lr
 8012ee2:	bf00      	nop
 8012ee4:	20005064 	.word	0x20005064
 8012ee8:	2000506c 	.word	0x2000506c

08012eec <__assert_func>:
 8012eec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012eee:	4614      	mov	r4, r2
 8012ef0:	461a      	mov	r2, r3
 8012ef2:	4b09      	ldr	r3, [pc, #36]	; (8012f18 <__assert_func+0x2c>)
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	4605      	mov	r5, r0
 8012ef8:	68d8      	ldr	r0, [r3, #12]
 8012efa:	b14c      	cbz	r4, 8012f10 <__assert_func+0x24>
 8012efc:	4b07      	ldr	r3, [pc, #28]	; (8012f1c <__assert_func+0x30>)
 8012efe:	9100      	str	r1, [sp, #0]
 8012f00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012f04:	4906      	ldr	r1, [pc, #24]	; (8012f20 <__assert_func+0x34>)
 8012f06:	462b      	mov	r3, r5
 8012f08:	f000 f8ea 	bl	80130e0 <fiprintf>
 8012f0c:	f001 fad0 	bl	80144b0 <abort>
 8012f10:	4b04      	ldr	r3, [pc, #16]	; (8012f24 <__assert_func+0x38>)
 8012f12:	461c      	mov	r4, r3
 8012f14:	e7f3      	b.n	8012efe <__assert_func+0x12>
 8012f16:	bf00      	nop
 8012f18:	20000054 	.word	0x20000054
 8012f1c:	08017dff 	.word	0x08017dff
 8012f20:	08017e0c 	.word	0x08017e0c
 8012f24:	08017e3a 	.word	0x08017e3a

08012f28 <__errno>:
 8012f28:	4b01      	ldr	r3, [pc, #4]	; (8012f30 <__errno+0x8>)
 8012f2a:	6818      	ldr	r0, [r3, #0]
 8012f2c:	4770      	bx	lr
 8012f2e:	bf00      	nop
 8012f30:	20000054 	.word	0x20000054

08012f34 <std>:
 8012f34:	2300      	movs	r3, #0
 8012f36:	b510      	push	{r4, lr}
 8012f38:	4604      	mov	r4, r0
 8012f3a:	e9c0 3300 	strd	r3, r3, [r0]
 8012f3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012f42:	6083      	str	r3, [r0, #8]
 8012f44:	8181      	strh	r1, [r0, #12]
 8012f46:	6643      	str	r3, [r0, #100]	; 0x64
 8012f48:	81c2      	strh	r2, [r0, #14]
 8012f4a:	6183      	str	r3, [r0, #24]
 8012f4c:	4619      	mov	r1, r3
 8012f4e:	2208      	movs	r2, #8
 8012f50:	305c      	adds	r0, #92	; 0x5c
 8012f52:	f000 f956 	bl	8013202 <memset>
 8012f56:	4b05      	ldr	r3, [pc, #20]	; (8012f6c <std+0x38>)
 8012f58:	6263      	str	r3, [r4, #36]	; 0x24
 8012f5a:	4b05      	ldr	r3, [pc, #20]	; (8012f70 <std+0x3c>)
 8012f5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8012f5e:	4b05      	ldr	r3, [pc, #20]	; (8012f74 <std+0x40>)
 8012f60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012f62:	4b05      	ldr	r3, [pc, #20]	; (8012f78 <std+0x44>)
 8012f64:	6224      	str	r4, [r4, #32]
 8012f66:	6323      	str	r3, [r4, #48]	; 0x30
 8012f68:	bd10      	pop	{r4, pc}
 8012f6a:	bf00      	nop
 8012f6c:	0801417d 	.word	0x0801417d
 8012f70:	0801419f 	.word	0x0801419f
 8012f74:	080141d7 	.word	0x080141d7
 8012f78:	080141fb 	.word	0x080141fb

08012f7c <_cleanup_r>:
 8012f7c:	4901      	ldr	r1, [pc, #4]	; (8012f84 <_cleanup_r+0x8>)
 8012f7e:	f000 b8c1 	b.w	8013104 <_fwalk_reent>
 8012f82:	bf00      	nop
 8012f84:	080152e1 	.word	0x080152e1

08012f88 <__sfmoreglue>:
 8012f88:	b570      	push	{r4, r5, r6, lr}
 8012f8a:	2268      	movs	r2, #104	; 0x68
 8012f8c:	1e4d      	subs	r5, r1, #1
 8012f8e:	4355      	muls	r5, r2
 8012f90:	460e      	mov	r6, r1
 8012f92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012f96:	f000 f95d 	bl	8013254 <_malloc_r>
 8012f9a:	4604      	mov	r4, r0
 8012f9c:	b140      	cbz	r0, 8012fb0 <__sfmoreglue+0x28>
 8012f9e:	2100      	movs	r1, #0
 8012fa0:	e9c0 1600 	strd	r1, r6, [r0]
 8012fa4:	300c      	adds	r0, #12
 8012fa6:	60a0      	str	r0, [r4, #8]
 8012fa8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012fac:	f000 f929 	bl	8013202 <memset>
 8012fb0:	4620      	mov	r0, r4
 8012fb2:	bd70      	pop	{r4, r5, r6, pc}

08012fb4 <__sfp_lock_acquire>:
 8012fb4:	4801      	ldr	r0, [pc, #4]	; (8012fbc <__sfp_lock_acquire+0x8>)
 8012fb6:	f000 b8ea 	b.w	801318e <__retarget_lock_acquire_recursive>
 8012fba:	bf00      	nop
 8012fbc:	20005085 	.word	0x20005085

08012fc0 <__sfp_lock_release>:
 8012fc0:	4801      	ldr	r0, [pc, #4]	; (8012fc8 <__sfp_lock_release+0x8>)
 8012fc2:	f000 b8e5 	b.w	8013190 <__retarget_lock_release_recursive>
 8012fc6:	bf00      	nop
 8012fc8:	20005085 	.word	0x20005085

08012fcc <__sinit_lock_acquire>:
 8012fcc:	4801      	ldr	r0, [pc, #4]	; (8012fd4 <__sinit_lock_acquire+0x8>)
 8012fce:	f000 b8de 	b.w	801318e <__retarget_lock_acquire_recursive>
 8012fd2:	bf00      	nop
 8012fd4:	20005086 	.word	0x20005086

08012fd8 <__sinit_lock_release>:
 8012fd8:	4801      	ldr	r0, [pc, #4]	; (8012fe0 <__sinit_lock_release+0x8>)
 8012fda:	f000 b8d9 	b.w	8013190 <__retarget_lock_release_recursive>
 8012fde:	bf00      	nop
 8012fe0:	20005086 	.word	0x20005086

08012fe4 <__sinit>:
 8012fe4:	b510      	push	{r4, lr}
 8012fe6:	4604      	mov	r4, r0
 8012fe8:	f7ff fff0 	bl	8012fcc <__sinit_lock_acquire>
 8012fec:	69a3      	ldr	r3, [r4, #24]
 8012fee:	b11b      	cbz	r3, 8012ff8 <__sinit+0x14>
 8012ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ff4:	f7ff bff0 	b.w	8012fd8 <__sinit_lock_release>
 8012ff8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012ffc:	6523      	str	r3, [r4, #80]	; 0x50
 8012ffe:	4b13      	ldr	r3, [pc, #76]	; (801304c <__sinit+0x68>)
 8013000:	4a13      	ldr	r2, [pc, #76]	; (8013050 <__sinit+0x6c>)
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	62a2      	str	r2, [r4, #40]	; 0x28
 8013006:	42a3      	cmp	r3, r4
 8013008:	bf04      	itt	eq
 801300a:	2301      	moveq	r3, #1
 801300c:	61a3      	streq	r3, [r4, #24]
 801300e:	4620      	mov	r0, r4
 8013010:	f000 f820 	bl	8013054 <__sfp>
 8013014:	6060      	str	r0, [r4, #4]
 8013016:	4620      	mov	r0, r4
 8013018:	f000 f81c 	bl	8013054 <__sfp>
 801301c:	60a0      	str	r0, [r4, #8]
 801301e:	4620      	mov	r0, r4
 8013020:	f000 f818 	bl	8013054 <__sfp>
 8013024:	2200      	movs	r2, #0
 8013026:	60e0      	str	r0, [r4, #12]
 8013028:	2104      	movs	r1, #4
 801302a:	6860      	ldr	r0, [r4, #4]
 801302c:	f7ff ff82 	bl	8012f34 <std>
 8013030:	68a0      	ldr	r0, [r4, #8]
 8013032:	2201      	movs	r2, #1
 8013034:	2109      	movs	r1, #9
 8013036:	f7ff ff7d 	bl	8012f34 <std>
 801303a:	68e0      	ldr	r0, [r4, #12]
 801303c:	2202      	movs	r2, #2
 801303e:	2112      	movs	r1, #18
 8013040:	f7ff ff78 	bl	8012f34 <std>
 8013044:	2301      	movs	r3, #1
 8013046:	61a3      	str	r3, [r4, #24]
 8013048:	e7d2      	b.n	8012ff0 <__sinit+0xc>
 801304a:	bf00      	nop
 801304c:	08017e9c 	.word	0x08017e9c
 8013050:	08012f7d 	.word	0x08012f7d

08013054 <__sfp>:
 8013054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013056:	4607      	mov	r7, r0
 8013058:	f7ff ffac 	bl	8012fb4 <__sfp_lock_acquire>
 801305c:	4b1e      	ldr	r3, [pc, #120]	; (80130d8 <__sfp+0x84>)
 801305e:	681e      	ldr	r6, [r3, #0]
 8013060:	69b3      	ldr	r3, [r6, #24]
 8013062:	b913      	cbnz	r3, 801306a <__sfp+0x16>
 8013064:	4630      	mov	r0, r6
 8013066:	f7ff ffbd 	bl	8012fe4 <__sinit>
 801306a:	3648      	adds	r6, #72	; 0x48
 801306c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013070:	3b01      	subs	r3, #1
 8013072:	d503      	bpl.n	801307c <__sfp+0x28>
 8013074:	6833      	ldr	r3, [r6, #0]
 8013076:	b30b      	cbz	r3, 80130bc <__sfp+0x68>
 8013078:	6836      	ldr	r6, [r6, #0]
 801307a:	e7f7      	b.n	801306c <__sfp+0x18>
 801307c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013080:	b9d5      	cbnz	r5, 80130b8 <__sfp+0x64>
 8013082:	4b16      	ldr	r3, [pc, #88]	; (80130dc <__sfp+0x88>)
 8013084:	60e3      	str	r3, [r4, #12]
 8013086:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801308a:	6665      	str	r5, [r4, #100]	; 0x64
 801308c:	f000 f87e 	bl	801318c <__retarget_lock_init_recursive>
 8013090:	f7ff ff96 	bl	8012fc0 <__sfp_lock_release>
 8013094:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013098:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801309c:	6025      	str	r5, [r4, #0]
 801309e:	61a5      	str	r5, [r4, #24]
 80130a0:	2208      	movs	r2, #8
 80130a2:	4629      	mov	r1, r5
 80130a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80130a8:	f000 f8ab 	bl	8013202 <memset>
 80130ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80130b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80130b4:	4620      	mov	r0, r4
 80130b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130b8:	3468      	adds	r4, #104	; 0x68
 80130ba:	e7d9      	b.n	8013070 <__sfp+0x1c>
 80130bc:	2104      	movs	r1, #4
 80130be:	4638      	mov	r0, r7
 80130c0:	f7ff ff62 	bl	8012f88 <__sfmoreglue>
 80130c4:	4604      	mov	r4, r0
 80130c6:	6030      	str	r0, [r6, #0]
 80130c8:	2800      	cmp	r0, #0
 80130ca:	d1d5      	bne.n	8013078 <__sfp+0x24>
 80130cc:	f7ff ff78 	bl	8012fc0 <__sfp_lock_release>
 80130d0:	230c      	movs	r3, #12
 80130d2:	603b      	str	r3, [r7, #0]
 80130d4:	e7ee      	b.n	80130b4 <__sfp+0x60>
 80130d6:	bf00      	nop
 80130d8:	08017e9c 	.word	0x08017e9c
 80130dc:	ffff0001 	.word	0xffff0001

080130e0 <fiprintf>:
 80130e0:	b40e      	push	{r1, r2, r3}
 80130e2:	b503      	push	{r0, r1, lr}
 80130e4:	4601      	mov	r1, r0
 80130e6:	ab03      	add	r3, sp, #12
 80130e8:	4805      	ldr	r0, [pc, #20]	; (8013100 <fiprintf+0x20>)
 80130ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80130ee:	6800      	ldr	r0, [r0, #0]
 80130f0:	9301      	str	r3, [sp, #4]
 80130f2:	f000 f94d 	bl	8013390 <_vfiprintf_r>
 80130f6:	b002      	add	sp, #8
 80130f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80130fc:	b003      	add	sp, #12
 80130fe:	4770      	bx	lr
 8013100:	20000054 	.word	0x20000054

08013104 <_fwalk_reent>:
 8013104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013108:	4606      	mov	r6, r0
 801310a:	4688      	mov	r8, r1
 801310c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013110:	2700      	movs	r7, #0
 8013112:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013116:	f1b9 0901 	subs.w	r9, r9, #1
 801311a:	d505      	bpl.n	8013128 <_fwalk_reent+0x24>
 801311c:	6824      	ldr	r4, [r4, #0]
 801311e:	2c00      	cmp	r4, #0
 8013120:	d1f7      	bne.n	8013112 <_fwalk_reent+0xe>
 8013122:	4638      	mov	r0, r7
 8013124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013128:	89ab      	ldrh	r3, [r5, #12]
 801312a:	2b01      	cmp	r3, #1
 801312c:	d907      	bls.n	801313e <_fwalk_reent+0x3a>
 801312e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013132:	3301      	adds	r3, #1
 8013134:	d003      	beq.n	801313e <_fwalk_reent+0x3a>
 8013136:	4629      	mov	r1, r5
 8013138:	4630      	mov	r0, r6
 801313a:	47c0      	blx	r8
 801313c:	4307      	orrs	r7, r0
 801313e:	3568      	adds	r5, #104	; 0x68
 8013140:	e7e9      	b.n	8013116 <_fwalk_reent+0x12>
	...

08013144 <__libc_init_array>:
 8013144:	b570      	push	{r4, r5, r6, lr}
 8013146:	4d0d      	ldr	r5, [pc, #52]	; (801317c <__libc_init_array+0x38>)
 8013148:	4c0d      	ldr	r4, [pc, #52]	; (8013180 <__libc_init_array+0x3c>)
 801314a:	1b64      	subs	r4, r4, r5
 801314c:	10a4      	asrs	r4, r4, #2
 801314e:	2600      	movs	r6, #0
 8013150:	42a6      	cmp	r6, r4
 8013152:	d109      	bne.n	8013168 <__libc_init_array+0x24>
 8013154:	4d0b      	ldr	r5, [pc, #44]	; (8013184 <__libc_init_array+0x40>)
 8013156:	4c0c      	ldr	r4, [pc, #48]	; (8013188 <__libc_init_array+0x44>)
 8013158:	f002 ff9e 	bl	8016098 <_init>
 801315c:	1b64      	subs	r4, r4, r5
 801315e:	10a4      	asrs	r4, r4, #2
 8013160:	2600      	movs	r6, #0
 8013162:	42a6      	cmp	r6, r4
 8013164:	d105      	bne.n	8013172 <__libc_init_array+0x2e>
 8013166:	bd70      	pop	{r4, r5, r6, pc}
 8013168:	f855 3b04 	ldr.w	r3, [r5], #4
 801316c:	4798      	blx	r3
 801316e:	3601      	adds	r6, #1
 8013170:	e7ee      	b.n	8013150 <__libc_init_array+0xc>
 8013172:	f855 3b04 	ldr.w	r3, [r5], #4
 8013176:	4798      	blx	r3
 8013178:	3601      	adds	r6, #1
 801317a:	e7f2      	b.n	8013162 <__libc_init_array+0x1e>
 801317c:	08018240 	.word	0x08018240
 8013180:	08018240 	.word	0x08018240
 8013184:	08018240 	.word	0x08018240
 8013188:	08018244 	.word	0x08018244

0801318c <__retarget_lock_init_recursive>:
 801318c:	4770      	bx	lr

0801318e <__retarget_lock_acquire_recursive>:
 801318e:	4770      	bx	lr

08013190 <__retarget_lock_release_recursive>:
 8013190:	4770      	bx	lr

08013192 <memcmp>:
 8013192:	b510      	push	{r4, lr}
 8013194:	3901      	subs	r1, #1
 8013196:	4402      	add	r2, r0
 8013198:	4290      	cmp	r0, r2
 801319a:	d101      	bne.n	80131a0 <memcmp+0xe>
 801319c:	2000      	movs	r0, #0
 801319e:	e005      	b.n	80131ac <memcmp+0x1a>
 80131a0:	7803      	ldrb	r3, [r0, #0]
 80131a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80131a6:	42a3      	cmp	r3, r4
 80131a8:	d001      	beq.n	80131ae <memcmp+0x1c>
 80131aa:	1b18      	subs	r0, r3, r4
 80131ac:	bd10      	pop	{r4, pc}
 80131ae:	3001      	adds	r0, #1
 80131b0:	e7f2      	b.n	8013198 <memcmp+0x6>

080131b2 <memcpy>:
 80131b2:	440a      	add	r2, r1
 80131b4:	4291      	cmp	r1, r2
 80131b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80131ba:	d100      	bne.n	80131be <memcpy+0xc>
 80131bc:	4770      	bx	lr
 80131be:	b510      	push	{r4, lr}
 80131c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80131c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80131c8:	4291      	cmp	r1, r2
 80131ca:	d1f9      	bne.n	80131c0 <memcpy+0xe>
 80131cc:	bd10      	pop	{r4, pc}

080131ce <memmove>:
 80131ce:	4288      	cmp	r0, r1
 80131d0:	b510      	push	{r4, lr}
 80131d2:	eb01 0402 	add.w	r4, r1, r2
 80131d6:	d902      	bls.n	80131de <memmove+0x10>
 80131d8:	4284      	cmp	r4, r0
 80131da:	4623      	mov	r3, r4
 80131dc:	d807      	bhi.n	80131ee <memmove+0x20>
 80131de:	1e43      	subs	r3, r0, #1
 80131e0:	42a1      	cmp	r1, r4
 80131e2:	d008      	beq.n	80131f6 <memmove+0x28>
 80131e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80131e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80131ec:	e7f8      	b.n	80131e0 <memmove+0x12>
 80131ee:	4402      	add	r2, r0
 80131f0:	4601      	mov	r1, r0
 80131f2:	428a      	cmp	r2, r1
 80131f4:	d100      	bne.n	80131f8 <memmove+0x2a>
 80131f6:	bd10      	pop	{r4, pc}
 80131f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80131fc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013200:	e7f7      	b.n	80131f2 <memmove+0x24>

08013202 <memset>:
 8013202:	4402      	add	r2, r0
 8013204:	4603      	mov	r3, r0
 8013206:	4293      	cmp	r3, r2
 8013208:	d100      	bne.n	801320c <memset+0xa>
 801320a:	4770      	bx	lr
 801320c:	f803 1b01 	strb.w	r1, [r3], #1
 8013210:	e7f9      	b.n	8013206 <memset+0x4>
	...

08013214 <sbrk_aligned>:
 8013214:	b570      	push	{r4, r5, r6, lr}
 8013216:	4e0e      	ldr	r6, [pc, #56]	; (8013250 <sbrk_aligned+0x3c>)
 8013218:	460c      	mov	r4, r1
 801321a:	6831      	ldr	r1, [r6, #0]
 801321c:	4605      	mov	r5, r0
 801321e:	b911      	cbnz	r1, 8013226 <sbrk_aligned+0x12>
 8013220:	f000 ff48 	bl	80140b4 <_sbrk_r>
 8013224:	6030      	str	r0, [r6, #0]
 8013226:	4621      	mov	r1, r4
 8013228:	4628      	mov	r0, r5
 801322a:	f000 ff43 	bl	80140b4 <_sbrk_r>
 801322e:	1c43      	adds	r3, r0, #1
 8013230:	d00a      	beq.n	8013248 <sbrk_aligned+0x34>
 8013232:	1cc4      	adds	r4, r0, #3
 8013234:	f024 0403 	bic.w	r4, r4, #3
 8013238:	42a0      	cmp	r0, r4
 801323a:	d007      	beq.n	801324c <sbrk_aligned+0x38>
 801323c:	1a21      	subs	r1, r4, r0
 801323e:	4628      	mov	r0, r5
 8013240:	f000 ff38 	bl	80140b4 <_sbrk_r>
 8013244:	3001      	adds	r0, #1
 8013246:	d101      	bne.n	801324c <sbrk_aligned+0x38>
 8013248:	f04f 34ff 	mov.w	r4, #4294967295
 801324c:	4620      	mov	r0, r4
 801324e:	bd70      	pop	{r4, r5, r6, pc}
 8013250:	2000508c 	.word	0x2000508c

08013254 <_malloc_r>:
 8013254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013258:	1ccd      	adds	r5, r1, #3
 801325a:	f025 0503 	bic.w	r5, r5, #3
 801325e:	3508      	adds	r5, #8
 8013260:	2d0c      	cmp	r5, #12
 8013262:	bf38      	it	cc
 8013264:	250c      	movcc	r5, #12
 8013266:	2d00      	cmp	r5, #0
 8013268:	4607      	mov	r7, r0
 801326a:	db01      	blt.n	8013270 <_malloc_r+0x1c>
 801326c:	42a9      	cmp	r1, r5
 801326e:	d905      	bls.n	801327c <_malloc_r+0x28>
 8013270:	230c      	movs	r3, #12
 8013272:	603b      	str	r3, [r7, #0]
 8013274:	2600      	movs	r6, #0
 8013276:	4630      	mov	r0, r6
 8013278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801327c:	4e2e      	ldr	r6, [pc, #184]	; (8013338 <_malloc_r+0xe4>)
 801327e:	f002 f8ef 	bl	8015460 <__malloc_lock>
 8013282:	6833      	ldr	r3, [r6, #0]
 8013284:	461c      	mov	r4, r3
 8013286:	bb34      	cbnz	r4, 80132d6 <_malloc_r+0x82>
 8013288:	4629      	mov	r1, r5
 801328a:	4638      	mov	r0, r7
 801328c:	f7ff ffc2 	bl	8013214 <sbrk_aligned>
 8013290:	1c43      	adds	r3, r0, #1
 8013292:	4604      	mov	r4, r0
 8013294:	d14d      	bne.n	8013332 <_malloc_r+0xde>
 8013296:	6834      	ldr	r4, [r6, #0]
 8013298:	4626      	mov	r6, r4
 801329a:	2e00      	cmp	r6, #0
 801329c:	d140      	bne.n	8013320 <_malloc_r+0xcc>
 801329e:	6823      	ldr	r3, [r4, #0]
 80132a0:	4631      	mov	r1, r6
 80132a2:	4638      	mov	r0, r7
 80132a4:	eb04 0803 	add.w	r8, r4, r3
 80132a8:	f000 ff04 	bl	80140b4 <_sbrk_r>
 80132ac:	4580      	cmp	r8, r0
 80132ae:	d13a      	bne.n	8013326 <_malloc_r+0xd2>
 80132b0:	6821      	ldr	r1, [r4, #0]
 80132b2:	3503      	adds	r5, #3
 80132b4:	1a6d      	subs	r5, r5, r1
 80132b6:	f025 0503 	bic.w	r5, r5, #3
 80132ba:	3508      	adds	r5, #8
 80132bc:	2d0c      	cmp	r5, #12
 80132be:	bf38      	it	cc
 80132c0:	250c      	movcc	r5, #12
 80132c2:	4629      	mov	r1, r5
 80132c4:	4638      	mov	r0, r7
 80132c6:	f7ff ffa5 	bl	8013214 <sbrk_aligned>
 80132ca:	3001      	adds	r0, #1
 80132cc:	d02b      	beq.n	8013326 <_malloc_r+0xd2>
 80132ce:	6823      	ldr	r3, [r4, #0]
 80132d0:	442b      	add	r3, r5
 80132d2:	6023      	str	r3, [r4, #0]
 80132d4:	e00e      	b.n	80132f4 <_malloc_r+0xa0>
 80132d6:	6822      	ldr	r2, [r4, #0]
 80132d8:	1b52      	subs	r2, r2, r5
 80132da:	d41e      	bmi.n	801331a <_malloc_r+0xc6>
 80132dc:	2a0b      	cmp	r2, #11
 80132de:	d916      	bls.n	801330e <_malloc_r+0xba>
 80132e0:	1961      	adds	r1, r4, r5
 80132e2:	42a3      	cmp	r3, r4
 80132e4:	6025      	str	r5, [r4, #0]
 80132e6:	bf18      	it	ne
 80132e8:	6059      	strne	r1, [r3, #4]
 80132ea:	6863      	ldr	r3, [r4, #4]
 80132ec:	bf08      	it	eq
 80132ee:	6031      	streq	r1, [r6, #0]
 80132f0:	5162      	str	r2, [r4, r5]
 80132f2:	604b      	str	r3, [r1, #4]
 80132f4:	4638      	mov	r0, r7
 80132f6:	f104 060b 	add.w	r6, r4, #11
 80132fa:	f002 f8b7 	bl	801546c <__malloc_unlock>
 80132fe:	f026 0607 	bic.w	r6, r6, #7
 8013302:	1d23      	adds	r3, r4, #4
 8013304:	1af2      	subs	r2, r6, r3
 8013306:	d0b6      	beq.n	8013276 <_malloc_r+0x22>
 8013308:	1b9b      	subs	r3, r3, r6
 801330a:	50a3      	str	r3, [r4, r2]
 801330c:	e7b3      	b.n	8013276 <_malloc_r+0x22>
 801330e:	6862      	ldr	r2, [r4, #4]
 8013310:	42a3      	cmp	r3, r4
 8013312:	bf0c      	ite	eq
 8013314:	6032      	streq	r2, [r6, #0]
 8013316:	605a      	strne	r2, [r3, #4]
 8013318:	e7ec      	b.n	80132f4 <_malloc_r+0xa0>
 801331a:	4623      	mov	r3, r4
 801331c:	6864      	ldr	r4, [r4, #4]
 801331e:	e7b2      	b.n	8013286 <_malloc_r+0x32>
 8013320:	4634      	mov	r4, r6
 8013322:	6876      	ldr	r6, [r6, #4]
 8013324:	e7b9      	b.n	801329a <_malloc_r+0x46>
 8013326:	230c      	movs	r3, #12
 8013328:	603b      	str	r3, [r7, #0]
 801332a:	4638      	mov	r0, r7
 801332c:	f002 f89e 	bl	801546c <__malloc_unlock>
 8013330:	e7a1      	b.n	8013276 <_malloc_r+0x22>
 8013332:	6025      	str	r5, [r4, #0]
 8013334:	e7de      	b.n	80132f4 <_malloc_r+0xa0>
 8013336:	bf00      	nop
 8013338:	20005088 	.word	0x20005088

0801333c <__sfputc_r>:
 801333c:	6893      	ldr	r3, [r2, #8]
 801333e:	3b01      	subs	r3, #1
 8013340:	2b00      	cmp	r3, #0
 8013342:	b410      	push	{r4}
 8013344:	6093      	str	r3, [r2, #8]
 8013346:	da08      	bge.n	801335a <__sfputc_r+0x1e>
 8013348:	6994      	ldr	r4, [r2, #24]
 801334a:	42a3      	cmp	r3, r4
 801334c:	db01      	blt.n	8013352 <__sfputc_r+0x16>
 801334e:	290a      	cmp	r1, #10
 8013350:	d103      	bne.n	801335a <__sfputc_r+0x1e>
 8013352:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013356:	f000 bfd9 	b.w	801430c <__swbuf_r>
 801335a:	6813      	ldr	r3, [r2, #0]
 801335c:	1c58      	adds	r0, r3, #1
 801335e:	6010      	str	r0, [r2, #0]
 8013360:	7019      	strb	r1, [r3, #0]
 8013362:	4608      	mov	r0, r1
 8013364:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013368:	4770      	bx	lr

0801336a <__sfputs_r>:
 801336a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801336c:	4606      	mov	r6, r0
 801336e:	460f      	mov	r7, r1
 8013370:	4614      	mov	r4, r2
 8013372:	18d5      	adds	r5, r2, r3
 8013374:	42ac      	cmp	r4, r5
 8013376:	d101      	bne.n	801337c <__sfputs_r+0x12>
 8013378:	2000      	movs	r0, #0
 801337a:	e007      	b.n	801338c <__sfputs_r+0x22>
 801337c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013380:	463a      	mov	r2, r7
 8013382:	4630      	mov	r0, r6
 8013384:	f7ff ffda 	bl	801333c <__sfputc_r>
 8013388:	1c43      	adds	r3, r0, #1
 801338a:	d1f3      	bne.n	8013374 <__sfputs_r+0xa>
 801338c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013390 <_vfiprintf_r>:
 8013390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013394:	460d      	mov	r5, r1
 8013396:	b09d      	sub	sp, #116	; 0x74
 8013398:	4614      	mov	r4, r2
 801339a:	4698      	mov	r8, r3
 801339c:	4606      	mov	r6, r0
 801339e:	b118      	cbz	r0, 80133a8 <_vfiprintf_r+0x18>
 80133a0:	6983      	ldr	r3, [r0, #24]
 80133a2:	b90b      	cbnz	r3, 80133a8 <_vfiprintf_r+0x18>
 80133a4:	f7ff fe1e 	bl	8012fe4 <__sinit>
 80133a8:	4b89      	ldr	r3, [pc, #548]	; (80135d0 <_vfiprintf_r+0x240>)
 80133aa:	429d      	cmp	r5, r3
 80133ac:	d11b      	bne.n	80133e6 <_vfiprintf_r+0x56>
 80133ae:	6875      	ldr	r5, [r6, #4]
 80133b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80133b2:	07d9      	lsls	r1, r3, #31
 80133b4:	d405      	bmi.n	80133c2 <_vfiprintf_r+0x32>
 80133b6:	89ab      	ldrh	r3, [r5, #12]
 80133b8:	059a      	lsls	r2, r3, #22
 80133ba:	d402      	bmi.n	80133c2 <_vfiprintf_r+0x32>
 80133bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80133be:	f7ff fee6 	bl	801318e <__retarget_lock_acquire_recursive>
 80133c2:	89ab      	ldrh	r3, [r5, #12]
 80133c4:	071b      	lsls	r3, r3, #28
 80133c6:	d501      	bpl.n	80133cc <_vfiprintf_r+0x3c>
 80133c8:	692b      	ldr	r3, [r5, #16]
 80133ca:	b9eb      	cbnz	r3, 8013408 <_vfiprintf_r+0x78>
 80133cc:	4629      	mov	r1, r5
 80133ce:	4630      	mov	r0, r6
 80133d0:	f001 f800 	bl	80143d4 <__swsetup_r>
 80133d4:	b1c0      	cbz	r0, 8013408 <_vfiprintf_r+0x78>
 80133d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80133d8:	07dc      	lsls	r4, r3, #31
 80133da:	d50e      	bpl.n	80133fa <_vfiprintf_r+0x6a>
 80133dc:	f04f 30ff 	mov.w	r0, #4294967295
 80133e0:	b01d      	add	sp, #116	; 0x74
 80133e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133e6:	4b7b      	ldr	r3, [pc, #492]	; (80135d4 <_vfiprintf_r+0x244>)
 80133e8:	429d      	cmp	r5, r3
 80133ea:	d101      	bne.n	80133f0 <_vfiprintf_r+0x60>
 80133ec:	68b5      	ldr	r5, [r6, #8]
 80133ee:	e7df      	b.n	80133b0 <_vfiprintf_r+0x20>
 80133f0:	4b79      	ldr	r3, [pc, #484]	; (80135d8 <_vfiprintf_r+0x248>)
 80133f2:	429d      	cmp	r5, r3
 80133f4:	bf08      	it	eq
 80133f6:	68f5      	ldreq	r5, [r6, #12]
 80133f8:	e7da      	b.n	80133b0 <_vfiprintf_r+0x20>
 80133fa:	89ab      	ldrh	r3, [r5, #12]
 80133fc:	0598      	lsls	r0, r3, #22
 80133fe:	d4ed      	bmi.n	80133dc <_vfiprintf_r+0x4c>
 8013400:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013402:	f7ff fec5 	bl	8013190 <__retarget_lock_release_recursive>
 8013406:	e7e9      	b.n	80133dc <_vfiprintf_r+0x4c>
 8013408:	2300      	movs	r3, #0
 801340a:	9309      	str	r3, [sp, #36]	; 0x24
 801340c:	2320      	movs	r3, #32
 801340e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013412:	f8cd 800c 	str.w	r8, [sp, #12]
 8013416:	2330      	movs	r3, #48	; 0x30
 8013418:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80135dc <_vfiprintf_r+0x24c>
 801341c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013420:	f04f 0901 	mov.w	r9, #1
 8013424:	4623      	mov	r3, r4
 8013426:	469a      	mov	sl, r3
 8013428:	f813 2b01 	ldrb.w	r2, [r3], #1
 801342c:	b10a      	cbz	r2, 8013432 <_vfiprintf_r+0xa2>
 801342e:	2a25      	cmp	r2, #37	; 0x25
 8013430:	d1f9      	bne.n	8013426 <_vfiprintf_r+0x96>
 8013432:	ebba 0b04 	subs.w	fp, sl, r4
 8013436:	d00b      	beq.n	8013450 <_vfiprintf_r+0xc0>
 8013438:	465b      	mov	r3, fp
 801343a:	4622      	mov	r2, r4
 801343c:	4629      	mov	r1, r5
 801343e:	4630      	mov	r0, r6
 8013440:	f7ff ff93 	bl	801336a <__sfputs_r>
 8013444:	3001      	adds	r0, #1
 8013446:	f000 80aa 	beq.w	801359e <_vfiprintf_r+0x20e>
 801344a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801344c:	445a      	add	r2, fp
 801344e:	9209      	str	r2, [sp, #36]	; 0x24
 8013450:	f89a 3000 	ldrb.w	r3, [sl]
 8013454:	2b00      	cmp	r3, #0
 8013456:	f000 80a2 	beq.w	801359e <_vfiprintf_r+0x20e>
 801345a:	2300      	movs	r3, #0
 801345c:	f04f 32ff 	mov.w	r2, #4294967295
 8013460:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013464:	f10a 0a01 	add.w	sl, sl, #1
 8013468:	9304      	str	r3, [sp, #16]
 801346a:	9307      	str	r3, [sp, #28]
 801346c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013470:	931a      	str	r3, [sp, #104]	; 0x68
 8013472:	4654      	mov	r4, sl
 8013474:	2205      	movs	r2, #5
 8013476:	f814 1b01 	ldrb.w	r1, [r4], #1
 801347a:	4858      	ldr	r0, [pc, #352]	; (80135dc <_vfiprintf_r+0x24c>)
 801347c:	f7ec feb0 	bl	80001e0 <memchr>
 8013480:	9a04      	ldr	r2, [sp, #16]
 8013482:	b9d8      	cbnz	r0, 80134bc <_vfiprintf_r+0x12c>
 8013484:	06d1      	lsls	r1, r2, #27
 8013486:	bf44      	itt	mi
 8013488:	2320      	movmi	r3, #32
 801348a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801348e:	0713      	lsls	r3, r2, #28
 8013490:	bf44      	itt	mi
 8013492:	232b      	movmi	r3, #43	; 0x2b
 8013494:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013498:	f89a 3000 	ldrb.w	r3, [sl]
 801349c:	2b2a      	cmp	r3, #42	; 0x2a
 801349e:	d015      	beq.n	80134cc <_vfiprintf_r+0x13c>
 80134a0:	9a07      	ldr	r2, [sp, #28]
 80134a2:	4654      	mov	r4, sl
 80134a4:	2000      	movs	r0, #0
 80134a6:	f04f 0c0a 	mov.w	ip, #10
 80134aa:	4621      	mov	r1, r4
 80134ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80134b0:	3b30      	subs	r3, #48	; 0x30
 80134b2:	2b09      	cmp	r3, #9
 80134b4:	d94e      	bls.n	8013554 <_vfiprintf_r+0x1c4>
 80134b6:	b1b0      	cbz	r0, 80134e6 <_vfiprintf_r+0x156>
 80134b8:	9207      	str	r2, [sp, #28]
 80134ba:	e014      	b.n	80134e6 <_vfiprintf_r+0x156>
 80134bc:	eba0 0308 	sub.w	r3, r0, r8
 80134c0:	fa09 f303 	lsl.w	r3, r9, r3
 80134c4:	4313      	orrs	r3, r2
 80134c6:	9304      	str	r3, [sp, #16]
 80134c8:	46a2      	mov	sl, r4
 80134ca:	e7d2      	b.n	8013472 <_vfiprintf_r+0xe2>
 80134cc:	9b03      	ldr	r3, [sp, #12]
 80134ce:	1d19      	adds	r1, r3, #4
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	9103      	str	r1, [sp, #12]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	bfbb      	ittet	lt
 80134d8:	425b      	neglt	r3, r3
 80134da:	f042 0202 	orrlt.w	r2, r2, #2
 80134de:	9307      	strge	r3, [sp, #28]
 80134e0:	9307      	strlt	r3, [sp, #28]
 80134e2:	bfb8      	it	lt
 80134e4:	9204      	strlt	r2, [sp, #16]
 80134e6:	7823      	ldrb	r3, [r4, #0]
 80134e8:	2b2e      	cmp	r3, #46	; 0x2e
 80134ea:	d10c      	bne.n	8013506 <_vfiprintf_r+0x176>
 80134ec:	7863      	ldrb	r3, [r4, #1]
 80134ee:	2b2a      	cmp	r3, #42	; 0x2a
 80134f0:	d135      	bne.n	801355e <_vfiprintf_r+0x1ce>
 80134f2:	9b03      	ldr	r3, [sp, #12]
 80134f4:	1d1a      	adds	r2, r3, #4
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	9203      	str	r2, [sp, #12]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	bfb8      	it	lt
 80134fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8013502:	3402      	adds	r4, #2
 8013504:	9305      	str	r3, [sp, #20]
 8013506:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80135ec <_vfiprintf_r+0x25c>
 801350a:	7821      	ldrb	r1, [r4, #0]
 801350c:	2203      	movs	r2, #3
 801350e:	4650      	mov	r0, sl
 8013510:	f7ec fe66 	bl	80001e0 <memchr>
 8013514:	b140      	cbz	r0, 8013528 <_vfiprintf_r+0x198>
 8013516:	2340      	movs	r3, #64	; 0x40
 8013518:	eba0 000a 	sub.w	r0, r0, sl
 801351c:	fa03 f000 	lsl.w	r0, r3, r0
 8013520:	9b04      	ldr	r3, [sp, #16]
 8013522:	4303      	orrs	r3, r0
 8013524:	3401      	adds	r4, #1
 8013526:	9304      	str	r3, [sp, #16]
 8013528:	f814 1b01 	ldrb.w	r1, [r4], #1
 801352c:	482c      	ldr	r0, [pc, #176]	; (80135e0 <_vfiprintf_r+0x250>)
 801352e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013532:	2206      	movs	r2, #6
 8013534:	f7ec fe54 	bl	80001e0 <memchr>
 8013538:	2800      	cmp	r0, #0
 801353a:	d03f      	beq.n	80135bc <_vfiprintf_r+0x22c>
 801353c:	4b29      	ldr	r3, [pc, #164]	; (80135e4 <_vfiprintf_r+0x254>)
 801353e:	bb1b      	cbnz	r3, 8013588 <_vfiprintf_r+0x1f8>
 8013540:	9b03      	ldr	r3, [sp, #12]
 8013542:	3307      	adds	r3, #7
 8013544:	f023 0307 	bic.w	r3, r3, #7
 8013548:	3308      	adds	r3, #8
 801354a:	9303      	str	r3, [sp, #12]
 801354c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801354e:	443b      	add	r3, r7
 8013550:	9309      	str	r3, [sp, #36]	; 0x24
 8013552:	e767      	b.n	8013424 <_vfiprintf_r+0x94>
 8013554:	fb0c 3202 	mla	r2, ip, r2, r3
 8013558:	460c      	mov	r4, r1
 801355a:	2001      	movs	r0, #1
 801355c:	e7a5      	b.n	80134aa <_vfiprintf_r+0x11a>
 801355e:	2300      	movs	r3, #0
 8013560:	3401      	adds	r4, #1
 8013562:	9305      	str	r3, [sp, #20]
 8013564:	4619      	mov	r1, r3
 8013566:	f04f 0c0a 	mov.w	ip, #10
 801356a:	4620      	mov	r0, r4
 801356c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013570:	3a30      	subs	r2, #48	; 0x30
 8013572:	2a09      	cmp	r2, #9
 8013574:	d903      	bls.n	801357e <_vfiprintf_r+0x1ee>
 8013576:	2b00      	cmp	r3, #0
 8013578:	d0c5      	beq.n	8013506 <_vfiprintf_r+0x176>
 801357a:	9105      	str	r1, [sp, #20]
 801357c:	e7c3      	b.n	8013506 <_vfiprintf_r+0x176>
 801357e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013582:	4604      	mov	r4, r0
 8013584:	2301      	movs	r3, #1
 8013586:	e7f0      	b.n	801356a <_vfiprintf_r+0x1da>
 8013588:	ab03      	add	r3, sp, #12
 801358a:	9300      	str	r3, [sp, #0]
 801358c:	462a      	mov	r2, r5
 801358e:	4b16      	ldr	r3, [pc, #88]	; (80135e8 <_vfiprintf_r+0x258>)
 8013590:	a904      	add	r1, sp, #16
 8013592:	4630      	mov	r0, r6
 8013594:	f000 f8cc 	bl	8013730 <_printf_float>
 8013598:	4607      	mov	r7, r0
 801359a:	1c78      	adds	r0, r7, #1
 801359c:	d1d6      	bne.n	801354c <_vfiprintf_r+0x1bc>
 801359e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80135a0:	07d9      	lsls	r1, r3, #31
 80135a2:	d405      	bmi.n	80135b0 <_vfiprintf_r+0x220>
 80135a4:	89ab      	ldrh	r3, [r5, #12]
 80135a6:	059a      	lsls	r2, r3, #22
 80135a8:	d402      	bmi.n	80135b0 <_vfiprintf_r+0x220>
 80135aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80135ac:	f7ff fdf0 	bl	8013190 <__retarget_lock_release_recursive>
 80135b0:	89ab      	ldrh	r3, [r5, #12]
 80135b2:	065b      	lsls	r3, r3, #25
 80135b4:	f53f af12 	bmi.w	80133dc <_vfiprintf_r+0x4c>
 80135b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80135ba:	e711      	b.n	80133e0 <_vfiprintf_r+0x50>
 80135bc:	ab03      	add	r3, sp, #12
 80135be:	9300      	str	r3, [sp, #0]
 80135c0:	462a      	mov	r2, r5
 80135c2:	4b09      	ldr	r3, [pc, #36]	; (80135e8 <_vfiprintf_r+0x258>)
 80135c4:	a904      	add	r1, sp, #16
 80135c6:	4630      	mov	r0, r6
 80135c8:	f000 fb56 	bl	8013c78 <_printf_i>
 80135cc:	e7e4      	b.n	8013598 <_vfiprintf_r+0x208>
 80135ce:	bf00      	nop
 80135d0:	08017e5c 	.word	0x08017e5c
 80135d4:	08017e7c 	.word	0x08017e7c
 80135d8:	08017e3c 	.word	0x08017e3c
 80135dc:	08017ea0 	.word	0x08017ea0
 80135e0:	08017eaa 	.word	0x08017eaa
 80135e4:	08013731 	.word	0x08013731
 80135e8:	0801336b 	.word	0x0801336b
 80135ec:	08017ea6 	.word	0x08017ea6

080135f0 <__cvt>:
 80135f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80135f4:	ec55 4b10 	vmov	r4, r5, d0
 80135f8:	2d00      	cmp	r5, #0
 80135fa:	460e      	mov	r6, r1
 80135fc:	4619      	mov	r1, r3
 80135fe:	462b      	mov	r3, r5
 8013600:	bfbb      	ittet	lt
 8013602:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013606:	461d      	movlt	r5, r3
 8013608:	2300      	movge	r3, #0
 801360a:	232d      	movlt	r3, #45	; 0x2d
 801360c:	700b      	strb	r3, [r1, #0]
 801360e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013610:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013614:	4691      	mov	r9, r2
 8013616:	f023 0820 	bic.w	r8, r3, #32
 801361a:	bfbc      	itt	lt
 801361c:	4622      	movlt	r2, r4
 801361e:	4614      	movlt	r4, r2
 8013620:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013624:	d005      	beq.n	8013632 <__cvt+0x42>
 8013626:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801362a:	d100      	bne.n	801362e <__cvt+0x3e>
 801362c:	3601      	adds	r6, #1
 801362e:	2102      	movs	r1, #2
 8013630:	e000      	b.n	8013634 <__cvt+0x44>
 8013632:	2103      	movs	r1, #3
 8013634:	ab03      	add	r3, sp, #12
 8013636:	9301      	str	r3, [sp, #4]
 8013638:	ab02      	add	r3, sp, #8
 801363a:	9300      	str	r3, [sp, #0]
 801363c:	ec45 4b10 	vmov	d0, r4, r5
 8013640:	4653      	mov	r3, sl
 8013642:	4632      	mov	r2, r6
 8013644:	f000 ffd8 	bl	80145f8 <_dtoa_r>
 8013648:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801364c:	4607      	mov	r7, r0
 801364e:	d102      	bne.n	8013656 <__cvt+0x66>
 8013650:	f019 0f01 	tst.w	r9, #1
 8013654:	d022      	beq.n	801369c <__cvt+0xac>
 8013656:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801365a:	eb07 0906 	add.w	r9, r7, r6
 801365e:	d110      	bne.n	8013682 <__cvt+0x92>
 8013660:	783b      	ldrb	r3, [r7, #0]
 8013662:	2b30      	cmp	r3, #48	; 0x30
 8013664:	d10a      	bne.n	801367c <__cvt+0x8c>
 8013666:	2200      	movs	r2, #0
 8013668:	2300      	movs	r3, #0
 801366a:	4620      	mov	r0, r4
 801366c:	4629      	mov	r1, r5
 801366e:	f7ed fa2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8013672:	b918      	cbnz	r0, 801367c <__cvt+0x8c>
 8013674:	f1c6 0601 	rsb	r6, r6, #1
 8013678:	f8ca 6000 	str.w	r6, [sl]
 801367c:	f8da 3000 	ldr.w	r3, [sl]
 8013680:	4499      	add	r9, r3
 8013682:	2200      	movs	r2, #0
 8013684:	2300      	movs	r3, #0
 8013686:	4620      	mov	r0, r4
 8013688:	4629      	mov	r1, r5
 801368a:	f7ed fa1d 	bl	8000ac8 <__aeabi_dcmpeq>
 801368e:	b108      	cbz	r0, 8013694 <__cvt+0xa4>
 8013690:	f8cd 900c 	str.w	r9, [sp, #12]
 8013694:	2230      	movs	r2, #48	; 0x30
 8013696:	9b03      	ldr	r3, [sp, #12]
 8013698:	454b      	cmp	r3, r9
 801369a:	d307      	bcc.n	80136ac <__cvt+0xbc>
 801369c:	9b03      	ldr	r3, [sp, #12]
 801369e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80136a0:	1bdb      	subs	r3, r3, r7
 80136a2:	4638      	mov	r0, r7
 80136a4:	6013      	str	r3, [r2, #0]
 80136a6:	b004      	add	sp, #16
 80136a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136ac:	1c59      	adds	r1, r3, #1
 80136ae:	9103      	str	r1, [sp, #12]
 80136b0:	701a      	strb	r2, [r3, #0]
 80136b2:	e7f0      	b.n	8013696 <__cvt+0xa6>

080136b4 <__exponent>:
 80136b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80136b6:	4603      	mov	r3, r0
 80136b8:	2900      	cmp	r1, #0
 80136ba:	bfb8      	it	lt
 80136bc:	4249      	neglt	r1, r1
 80136be:	f803 2b02 	strb.w	r2, [r3], #2
 80136c2:	bfb4      	ite	lt
 80136c4:	222d      	movlt	r2, #45	; 0x2d
 80136c6:	222b      	movge	r2, #43	; 0x2b
 80136c8:	2909      	cmp	r1, #9
 80136ca:	7042      	strb	r2, [r0, #1]
 80136cc:	dd2a      	ble.n	8013724 <__exponent+0x70>
 80136ce:	f10d 0407 	add.w	r4, sp, #7
 80136d2:	46a4      	mov	ip, r4
 80136d4:	270a      	movs	r7, #10
 80136d6:	46a6      	mov	lr, r4
 80136d8:	460a      	mov	r2, r1
 80136da:	fb91 f6f7 	sdiv	r6, r1, r7
 80136de:	fb07 1516 	mls	r5, r7, r6, r1
 80136e2:	3530      	adds	r5, #48	; 0x30
 80136e4:	2a63      	cmp	r2, #99	; 0x63
 80136e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80136ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80136ee:	4631      	mov	r1, r6
 80136f0:	dcf1      	bgt.n	80136d6 <__exponent+0x22>
 80136f2:	3130      	adds	r1, #48	; 0x30
 80136f4:	f1ae 0502 	sub.w	r5, lr, #2
 80136f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80136fc:	1c44      	adds	r4, r0, #1
 80136fe:	4629      	mov	r1, r5
 8013700:	4561      	cmp	r1, ip
 8013702:	d30a      	bcc.n	801371a <__exponent+0x66>
 8013704:	f10d 0209 	add.w	r2, sp, #9
 8013708:	eba2 020e 	sub.w	r2, r2, lr
 801370c:	4565      	cmp	r5, ip
 801370e:	bf88      	it	hi
 8013710:	2200      	movhi	r2, #0
 8013712:	4413      	add	r3, r2
 8013714:	1a18      	subs	r0, r3, r0
 8013716:	b003      	add	sp, #12
 8013718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801371a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801371e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013722:	e7ed      	b.n	8013700 <__exponent+0x4c>
 8013724:	2330      	movs	r3, #48	; 0x30
 8013726:	3130      	adds	r1, #48	; 0x30
 8013728:	7083      	strb	r3, [r0, #2]
 801372a:	70c1      	strb	r1, [r0, #3]
 801372c:	1d03      	adds	r3, r0, #4
 801372e:	e7f1      	b.n	8013714 <__exponent+0x60>

08013730 <_printf_float>:
 8013730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013734:	ed2d 8b02 	vpush	{d8}
 8013738:	b08d      	sub	sp, #52	; 0x34
 801373a:	460c      	mov	r4, r1
 801373c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013740:	4616      	mov	r6, r2
 8013742:	461f      	mov	r7, r3
 8013744:	4605      	mov	r5, r0
 8013746:	f001 fe07 	bl	8015358 <_localeconv_r>
 801374a:	f8d0 a000 	ldr.w	sl, [r0]
 801374e:	4650      	mov	r0, sl
 8013750:	f7ec fd3e 	bl	80001d0 <strlen>
 8013754:	2300      	movs	r3, #0
 8013756:	930a      	str	r3, [sp, #40]	; 0x28
 8013758:	6823      	ldr	r3, [r4, #0]
 801375a:	9305      	str	r3, [sp, #20]
 801375c:	f8d8 3000 	ldr.w	r3, [r8]
 8013760:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013764:	3307      	adds	r3, #7
 8013766:	f023 0307 	bic.w	r3, r3, #7
 801376a:	f103 0208 	add.w	r2, r3, #8
 801376e:	f8c8 2000 	str.w	r2, [r8]
 8013772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013776:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801377a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801377e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013782:	9307      	str	r3, [sp, #28]
 8013784:	f8cd 8018 	str.w	r8, [sp, #24]
 8013788:	ee08 0a10 	vmov	s16, r0
 801378c:	4b9f      	ldr	r3, [pc, #636]	; (8013a0c <_printf_float+0x2dc>)
 801378e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013792:	f04f 32ff 	mov.w	r2, #4294967295
 8013796:	f7ed f9c9 	bl	8000b2c <__aeabi_dcmpun>
 801379a:	bb88      	cbnz	r0, 8013800 <_printf_float+0xd0>
 801379c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80137a0:	4b9a      	ldr	r3, [pc, #616]	; (8013a0c <_printf_float+0x2dc>)
 80137a2:	f04f 32ff 	mov.w	r2, #4294967295
 80137a6:	f7ed f9a3 	bl	8000af0 <__aeabi_dcmple>
 80137aa:	bb48      	cbnz	r0, 8013800 <_printf_float+0xd0>
 80137ac:	2200      	movs	r2, #0
 80137ae:	2300      	movs	r3, #0
 80137b0:	4640      	mov	r0, r8
 80137b2:	4649      	mov	r1, r9
 80137b4:	f7ed f992 	bl	8000adc <__aeabi_dcmplt>
 80137b8:	b110      	cbz	r0, 80137c0 <_printf_float+0x90>
 80137ba:	232d      	movs	r3, #45	; 0x2d
 80137bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80137c0:	4b93      	ldr	r3, [pc, #588]	; (8013a10 <_printf_float+0x2e0>)
 80137c2:	4894      	ldr	r0, [pc, #592]	; (8013a14 <_printf_float+0x2e4>)
 80137c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80137c8:	bf94      	ite	ls
 80137ca:	4698      	movls	r8, r3
 80137cc:	4680      	movhi	r8, r0
 80137ce:	2303      	movs	r3, #3
 80137d0:	6123      	str	r3, [r4, #16]
 80137d2:	9b05      	ldr	r3, [sp, #20]
 80137d4:	f023 0204 	bic.w	r2, r3, #4
 80137d8:	6022      	str	r2, [r4, #0]
 80137da:	f04f 0900 	mov.w	r9, #0
 80137de:	9700      	str	r7, [sp, #0]
 80137e0:	4633      	mov	r3, r6
 80137e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80137e4:	4621      	mov	r1, r4
 80137e6:	4628      	mov	r0, r5
 80137e8:	f000 f9d8 	bl	8013b9c <_printf_common>
 80137ec:	3001      	adds	r0, #1
 80137ee:	f040 8090 	bne.w	8013912 <_printf_float+0x1e2>
 80137f2:	f04f 30ff 	mov.w	r0, #4294967295
 80137f6:	b00d      	add	sp, #52	; 0x34
 80137f8:	ecbd 8b02 	vpop	{d8}
 80137fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013800:	4642      	mov	r2, r8
 8013802:	464b      	mov	r3, r9
 8013804:	4640      	mov	r0, r8
 8013806:	4649      	mov	r1, r9
 8013808:	f7ed f990 	bl	8000b2c <__aeabi_dcmpun>
 801380c:	b140      	cbz	r0, 8013820 <_printf_float+0xf0>
 801380e:	464b      	mov	r3, r9
 8013810:	2b00      	cmp	r3, #0
 8013812:	bfbc      	itt	lt
 8013814:	232d      	movlt	r3, #45	; 0x2d
 8013816:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801381a:	487f      	ldr	r0, [pc, #508]	; (8013a18 <_printf_float+0x2e8>)
 801381c:	4b7f      	ldr	r3, [pc, #508]	; (8013a1c <_printf_float+0x2ec>)
 801381e:	e7d1      	b.n	80137c4 <_printf_float+0x94>
 8013820:	6863      	ldr	r3, [r4, #4]
 8013822:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013826:	9206      	str	r2, [sp, #24]
 8013828:	1c5a      	adds	r2, r3, #1
 801382a:	d13f      	bne.n	80138ac <_printf_float+0x17c>
 801382c:	2306      	movs	r3, #6
 801382e:	6063      	str	r3, [r4, #4]
 8013830:	9b05      	ldr	r3, [sp, #20]
 8013832:	6861      	ldr	r1, [r4, #4]
 8013834:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013838:	2300      	movs	r3, #0
 801383a:	9303      	str	r3, [sp, #12]
 801383c:	ab0a      	add	r3, sp, #40	; 0x28
 801383e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013842:	ab09      	add	r3, sp, #36	; 0x24
 8013844:	ec49 8b10 	vmov	d0, r8, r9
 8013848:	9300      	str	r3, [sp, #0]
 801384a:	6022      	str	r2, [r4, #0]
 801384c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013850:	4628      	mov	r0, r5
 8013852:	f7ff fecd 	bl	80135f0 <__cvt>
 8013856:	9b06      	ldr	r3, [sp, #24]
 8013858:	9909      	ldr	r1, [sp, #36]	; 0x24
 801385a:	2b47      	cmp	r3, #71	; 0x47
 801385c:	4680      	mov	r8, r0
 801385e:	d108      	bne.n	8013872 <_printf_float+0x142>
 8013860:	1cc8      	adds	r0, r1, #3
 8013862:	db02      	blt.n	801386a <_printf_float+0x13a>
 8013864:	6863      	ldr	r3, [r4, #4]
 8013866:	4299      	cmp	r1, r3
 8013868:	dd41      	ble.n	80138ee <_printf_float+0x1be>
 801386a:	f1ab 0b02 	sub.w	fp, fp, #2
 801386e:	fa5f fb8b 	uxtb.w	fp, fp
 8013872:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013876:	d820      	bhi.n	80138ba <_printf_float+0x18a>
 8013878:	3901      	subs	r1, #1
 801387a:	465a      	mov	r2, fp
 801387c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013880:	9109      	str	r1, [sp, #36]	; 0x24
 8013882:	f7ff ff17 	bl	80136b4 <__exponent>
 8013886:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013888:	1813      	adds	r3, r2, r0
 801388a:	2a01      	cmp	r2, #1
 801388c:	4681      	mov	r9, r0
 801388e:	6123      	str	r3, [r4, #16]
 8013890:	dc02      	bgt.n	8013898 <_printf_float+0x168>
 8013892:	6822      	ldr	r2, [r4, #0]
 8013894:	07d2      	lsls	r2, r2, #31
 8013896:	d501      	bpl.n	801389c <_printf_float+0x16c>
 8013898:	3301      	adds	r3, #1
 801389a:	6123      	str	r3, [r4, #16]
 801389c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d09c      	beq.n	80137de <_printf_float+0xae>
 80138a4:	232d      	movs	r3, #45	; 0x2d
 80138a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80138aa:	e798      	b.n	80137de <_printf_float+0xae>
 80138ac:	9a06      	ldr	r2, [sp, #24]
 80138ae:	2a47      	cmp	r2, #71	; 0x47
 80138b0:	d1be      	bne.n	8013830 <_printf_float+0x100>
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d1bc      	bne.n	8013830 <_printf_float+0x100>
 80138b6:	2301      	movs	r3, #1
 80138b8:	e7b9      	b.n	801382e <_printf_float+0xfe>
 80138ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80138be:	d118      	bne.n	80138f2 <_printf_float+0x1c2>
 80138c0:	2900      	cmp	r1, #0
 80138c2:	6863      	ldr	r3, [r4, #4]
 80138c4:	dd0b      	ble.n	80138de <_printf_float+0x1ae>
 80138c6:	6121      	str	r1, [r4, #16]
 80138c8:	b913      	cbnz	r3, 80138d0 <_printf_float+0x1a0>
 80138ca:	6822      	ldr	r2, [r4, #0]
 80138cc:	07d0      	lsls	r0, r2, #31
 80138ce:	d502      	bpl.n	80138d6 <_printf_float+0x1a6>
 80138d0:	3301      	adds	r3, #1
 80138d2:	440b      	add	r3, r1
 80138d4:	6123      	str	r3, [r4, #16]
 80138d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80138d8:	f04f 0900 	mov.w	r9, #0
 80138dc:	e7de      	b.n	801389c <_printf_float+0x16c>
 80138de:	b913      	cbnz	r3, 80138e6 <_printf_float+0x1b6>
 80138e0:	6822      	ldr	r2, [r4, #0]
 80138e2:	07d2      	lsls	r2, r2, #31
 80138e4:	d501      	bpl.n	80138ea <_printf_float+0x1ba>
 80138e6:	3302      	adds	r3, #2
 80138e8:	e7f4      	b.n	80138d4 <_printf_float+0x1a4>
 80138ea:	2301      	movs	r3, #1
 80138ec:	e7f2      	b.n	80138d4 <_printf_float+0x1a4>
 80138ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80138f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138f4:	4299      	cmp	r1, r3
 80138f6:	db05      	blt.n	8013904 <_printf_float+0x1d4>
 80138f8:	6823      	ldr	r3, [r4, #0]
 80138fa:	6121      	str	r1, [r4, #16]
 80138fc:	07d8      	lsls	r0, r3, #31
 80138fe:	d5ea      	bpl.n	80138d6 <_printf_float+0x1a6>
 8013900:	1c4b      	adds	r3, r1, #1
 8013902:	e7e7      	b.n	80138d4 <_printf_float+0x1a4>
 8013904:	2900      	cmp	r1, #0
 8013906:	bfd4      	ite	le
 8013908:	f1c1 0202 	rsble	r2, r1, #2
 801390c:	2201      	movgt	r2, #1
 801390e:	4413      	add	r3, r2
 8013910:	e7e0      	b.n	80138d4 <_printf_float+0x1a4>
 8013912:	6823      	ldr	r3, [r4, #0]
 8013914:	055a      	lsls	r2, r3, #21
 8013916:	d407      	bmi.n	8013928 <_printf_float+0x1f8>
 8013918:	6923      	ldr	r3, [r4, #16]
 801391a:	4642      	mov	r2, r8
 801391c:	4631      	mov	r1, r6
 801391e:	4628      	mov	r0, r5
 8013920:	47b8      	blx	r7
 8013922:	3001      	adds	r0, #1
 8013924:	d12c      	bne.n	8013980 <_printf_float+0x250>
 8013926:	e764      	b.n	80137f2 <_printf_float+0xc2>
 8013928:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801392c:	f240 80e0 	bls.w	8013af0 <_printf_float+0x3c0>
 8013930:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013934:	2200      	movs	r2, #0
 8013936:	2300      	movs	r3, #0
 8013938:	f7ed f8c6 	bl	8000ac8 <__aeabi_dcmpeq>
 801393c:	2800      	cmp	r0, #0
 801393e:	d034      	beq.n	80139aa <_printf_float+0x27a>
 8013940:	4a37      	ldr	r2, [pc, #220]	; (8013a20 <_printf_float+0x2f0>)
 8013942:	2301      	movs	r3, #1
 8013944:	4631      	mov	r1, r6
 8013946:	4628      	mov	r0, r5
 8013948:	47b8      	blx	r7
 801394a:	3001      	adds	r0, #1
 801394c:	f43f af51 	beq.w	80137f2 <_printf_float+0xc2>
 8013950:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013954:	429a      	cmp	r2, r3
 8013956:	db02      	blt.n	801395e <_printf_float+0x22e>
 8013958:	6823      	ldr	r3, [r4, #0]
 801395a:	07d8      	lsls	r0, r3, #31
 801395c:	d510      	bpl.n	8013980 <_printf_float+0x250>
 801395e:	ee18 3a10 	vmov	r3, s16
 8013962:	4652      	mov	r2, sl
 8013964:	4631      	mov	r1, r6
 8013966:	4628      	mov	r0, r5
 8013968:	47b8      	blx	r7
 801396a:	3001      	adds	r0, #1
 801396c:	f43f af41 	beq.w	80137f2 <_printf_float+0xc2>
 8013970:	f04f 0800 	mov.w	r8, #0
 8013974:	f104 091a 	add.w	r9, r4, #26
 8013978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801397a:	3b01      	subs	r3, #1
 801397c:	4543      	cmp	r3, r8
 801397e:	dc09      	bgt.n	8013994 <_printf_float+0x264>
 8013980:	6823      	ldr	r3, [r4, #0]
 8013982:	079b      	lsls	r3, r3, #30
 8013984:	f100 8105 	bmi.w	8013b92 <_printf_float+0x462>
 8013988:	68e0      	ldr	r0, [r4, #12]
 801398a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801398c:	4298      	cmp	r0, r3
 801398e:	bfb8      	it	lt
 8013990:	4618      	movlt	r0, r3
 8013992:	e730      	b.n	80137f6 <_printf_float+0xc6>
 8013994:	2301      	movs	r3, #1
 8013996:	464a      	mov	r2, r9
 8013998:	4631      	mov	r1, r6
 801399a:	4628      	mov	r0, r5
 801399c:	47b8      	blx	r7
 801399e:	3001      	adds	r0, #1
 80139a0:	f43f af27 	beq.w	80137f2 <_printf_float+0xc2>
 80139a4:	f108 0801 	add.w	r8, r8, #1
 80139a8:	e7e6      	b.n	8013978 <_printf_float+0x248>
 80139aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	dc39      	bgt.n	8013a24 <_printf_float+0x2f4>
 80139b0:	4a1b      	ldr	r2, [pc, #108]	; (8013a20 <_printf_float+0x2f0>)
 80139b2:	2301      	movs	r3, #1
 80139b4:	4631      	mov	r1, r6
 80139b6:	4628      	mov	r0, r5
 80139b8:	47b8      	blx	r7
 80139ba:	3001      	adds	r0, #1
 80139bc:	f43f af19 	beq.w	80137f2 <_printf_float+0xc2>
 80139c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80139c4:	4313      	orrs	r3, r2
 80139c6:	d102      	bne.n	80139ce <_printf_float+0x29e>
 80139c8:	6823      	ldr	r3, [r4, #0]
 80139ca:	07d9      	lsls	r1, r3, #31
 80139cc:	d5d8      	bpl.n	8013980 <_printf_float+0x250>
 80139ce:	ee18 3a10 	vmov	r3, s16
 80139d2:	4652      	mov	r2, sl
 80139d4:	4631      	mov	r1, r6
 80139d6:	4628      	mov	r0, r5
 80139d8:	47b8      	blx	r7
 80139da:	3001      	adds	r0, #1
 80139dc:	f43f af09 	beq.w	80137f2 <_printf_float+0xc2>
 80139e0:	f04f 0900 	mov.w	r9, #0
 80139e4:	f104 0a1a 	add.w	sl, r4, #26
 80139e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139ea:	425b      	negs	r3, r3
 80139ec:	454b      	cmp	r3, r9
 80139ee:	dc01      	bgt.n	80139f4 <_printf_float+0x2c4>
 80139f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139f2:	e792      	b.n	801391a <_printf_float+0x1ea>
 80139f4:	2301      	movs	r3, #1
 80139f6:	4652      	mov	r2, sl
 80139f8:	4631      	mov	r1, r6
 80139fa:	4628      	mov	r0, r5
 80139fc:	47b8      	blx	r7
 80139fe:	3001      	adds	r0, #1
 8013a00:	f43f aef7 	beq.w	80137f2 <_printf_float+0xc2>
 8013a04:	f109 0901 	add.w	r9, r9, #1
 8013a08:	e7ee      	b.n	80139e8 <_printf_float+0x2b8>
 8013a0a:	bf00      	nop
 8013a0c:	7fefffff 	.word	0x7fefffff
 8013a10:	08017eb1 	.word	0x08017eb1
 8013a14:	08017eb5 	.word	0x08017eb5
 8013a18:	08017ebd 	.word	0x08017ebd
 8013a1c:	08017eb9 	.word	0x08017eb9
 8013a20:	08017ec1 	.word	0x08017ec1
 8013a24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013a26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013a28:	429a      	cmp	r2, r3
 8013a2a:	bfa8      	it	ge
 8013a2c:	461a      	movge	r2, r3
 8013a2e:	2a00      	cmp	r2, #0
 8013a30:	4691      	mov	r9, r2
 8013a32:	dc37      	bgt.n	8013aa4 <_printf_float+0x374>
 8013a34:	f04f 0b00 	mov.w	fp, #0
 8013a38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013a3c:	f104 021a 	add.w	r2, r4, #26
 8013a40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013a42:	9305      	str	r3, [sp, #20]
 8013a44:	eba3 0309 	sub.w	r3, r3, r9
 8013a48:	455b      	cmp	r3, fp
 8013a4a:	dc33      	bgt.n	8013ab4 <_printf_float+0x384>
 8013a4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013a50:	429a      	cmp	r2, r3
 8013a52:	db3b      	blt.n	8013acc <_printf_float+0x39c>
 8013a54:	6823      	ldr	r3, [r4, #0]
 8013a56:	07da      	lsls	r2, r3, #31
 8013a58:	d438      	bmi.n	8013acc <_printf_float+0x39c>
 8013a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a5c:	9a05      	ldr	r2, [sp, #20]
 8013a5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013a60:	1a9a      	subs	r2, r3, r2
 8013a62:	eba3 0901 	sub.w	r9, r3, r1
 8013a66:	4591      	cmp	r9, r2
 8013a68:	bfa8      	it	ge
 8013a6a:	4691      	movge	r9, r2
 8013a6c:	f1b9 0f00 	cmp.w	r9, #0
 8013a70:	dc35      	bgt.n	8013ade <_printf_float+0x3ae>
 8013a72:	f04f 0800 	mov.w	r8, #0
 8013a76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013a7a:	f104 0a1a 	add.w	sl, r4, #26
 8013a7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013a82:	1a9b      	subs	r3, r3, r2
 8013a84:	eba3 0309 	sub.w	r3, r3, r9
 8013a88:	4543      	cmp	r3, r8
 8013a8a:	f77f af79 	ble.w	8013980 <_printf_float+0x250>
 8013a8e:	2301      	movs	r3, #1
 8013a90:	4652      	mov	r2, sl
 8013a92:	4631      	mov	r1, r6
 8013a94:	4628      	mov	r0, r5
 8013a96:	47b8      	blx	r7
 8013a98:	3001      	adds	r0, #1
 8013a9a:	f43f aeaa 	beq.w	80137f2 <_printf_float+0xc2>
 8013a9e:	f108 0801 	add.w	r8, r8, #1
 8013aa2:	e7ec      	b.n	8013a7e <_printf_float+0x34e>
 8013aa4:	4613      	mov	r3, r2
 8013aa6:	4631      	mov	r1, r6
 8013aa8:	4642      	mov	r2, r8
 8013aaa:	4628      	mov	r0, r5
 8013aac:	47b8      	blx	r7
 8013aae:	3001      	adds	r0, #1
 8013ab0:	d1c0      	bne.n	8013a34 <_printf_float+0x304>
 8013ab2:	e69e      	b.n	80137f2 <_printf_float+0xc2>
 8013ab4:	2301      	movs	r3, #1
 8013ab6:	4631      	mov	r1, r6
 8013ab8:	4628      	mov	r0, r5
 8013aba:	9205      	str	r2, [sp, #20]
 8013abc:	47b8      	blx	r7
 8013abe:	3001      	adds	r0, #1
 8013ac0:	f43f ae97 	beq.w	80137f2 <_printf_float+0xc2>
 8013ac4:	9a05      	ldr	r2, [sp, #20]
 8013ac6:	f10b 0b01 	add.w	fp, fp, #1
 8013aca:	e7b9      	b.n	8013a40 <_printf_float+0x310>
 8013acc:	ee18 3a10 	vmov	r3, s16
 8013ad0:	4652      	mov	r2, sl
 8013ad2:	4631      	mov	r1, r6
 8013ad4:	4628      	mov	r0, r5
 8013ad6:	47b8      	blx	r7
 8013ad8:	3001      	adds	r0, #1
 8013ada:	d1be      	bne.n	8013a5a <_printf_float+0x32a>
 8013adc:	e689      	b.n	80137f2 <_printf_float+0xc2>
 8013ade:	9a05      	ldr	r2, [sp, #20]
 8013ae0:	464b      	mov	r3, r9
 8013ae2:	4442      	add	r2, r8
 8013ae4:	4631      	mov	r1, r6
 8013ae6:	4628      	mov	r0, r5
 8013ae8:	47b8      	blx	r7
 8013aea:	3001      	adds	r0, #1
 8013aec:	d1c1      	bne.n	8013a72 <_printf_float+0x342>
 8013aee:	e680      	b.n	80137f2 <_printf_float+0xc2>
 8013af0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013af2:	2a01      	cmp	r2, #1
 8013af4:	dc01      	bgt.n	8013afa <_printf_float+0x3ca>
 8013af6:	07db      	lsls	r3, r3, #31
 8013af8:	d538      	bpl.n	8013b6c <_printf_float+0x43c>
 8013afa:	2301      	movs	r3, #1
 8013afc:	4642      	mov	r2, r8
 8013afe:	4631      	mov	r1, r6
 8013b00:	4628      	mov	r0, r5
 8013b02:	47b8      	blx	r7
 8013b04:	3001      	adds	r0, #1
 8013b06:	f43f ae74 	beq.w	80137f2 <_printf_float+0xc2>
 8013b0a:	ee18 3a10 	vmov	r3, s16
 8013b0e:	4652      	mov	r2, sl
 8013b10:	4631      	mov	r1, r6
 8013b12:	4628      	mov	r0, r5
 8013b14:	47b8      	blx	r7
 8013b16:	3001      	adds	r0, #1
 8013b18:	f43f ae6b 	beq.w	80137f2 <_printf_float+0xc2>
 8013b1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013b20:	2200      	movs	r2, #0
 8013b22:	2300      	movs	r3, #0
 8013b24:	f7ec ffd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8013b28:	b9d8      	cbnz	r0, 8013b62 <_printf_float+0x432>
 8013b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b2c:	f108 0201 	add.w	r2, r8, #1
 8013b30:	3b01      	subs	r3, #1
 8013b32:	4631      	mov	r1, r6
 8013b34:	4628      	mov	r0, r5
 8013b36:	47b8      	blx	r7
 8013b38:	3001      	adds	r0, #1
 8013b3a:	d10e      	bne.n	8013b5a <_printf_float+0x42a>
 8013b3c:	e659      	b.n	80137f2 <_printf_float+0xc2>
 8013b3e:	2301      	movs	r3, #1
 8013b40:	4652      	mov	r2, sl
 8013b42:	4631      	mov	r1, r6
 8013b44:	4628      	mov	r0, r5
 8013b46:	47b8      	blx	r7
 8013b48:	3001      	adds	r0, #1
 8013b4a:	f43f ae52 	beq.w	80137f2 <_printf_float+0xc2>
 8013b4e:	f108 0801 	add.w	r8, r8, #1
 8013b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b54:	3b01      	subs	r3, #1
 8013b56:	4543      	cmp	r3, r8
 8013b58:	dcf1      	bgt.n	8013b3e <_printf_float+0x40e>
 8013b5a:	464b      	mov	r3, r9
 8013b5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013b60:	e6dc      	b.n	801391c <_printf_float+0x1ec>
 8013b62:	f04f 0800 	mov.w	r8, #0
 8013b66:	f104 0a1a 	add.w	sl, r4, #26
 8013b6a:	e7f2      	b.n	8013b52 <_printf_float+0x422>
 8013b6c:	2301      	movs	r3, #1
 8013b6e:	4642      	mov	r2, r8
 8013b70:	e7df      	b.n	8013b32 <_printf_float+0x402>
 8013b72:	2301      	movs	r3, #1
 8013b74:	464a      	mov	r2, r9
 8013b76:	4631      	mov	r1, r6
 8013b78:	4628      	mov	r0, r5
 8013b7a:	47b8      	blx	r7
 8013b7c:	3001      	adds	r0, #1
 8013b7e:	f43f ae38 	beq.w	80137f2 <_printf_float+0xc2>
 8013b82:	f108 0801 	add.w	r8, r8, #1
 8013b86:	68e3      	ldr	r3, [r4, #12]
 8013b88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013b8a:	1a5b      	subs	r3, r3, r1
 8013b8c:	4543      	cmp	r3, r8
 8013b8e:	dcf0      	bgt.n	8013b72 <_printf_float+0x442>
 8013b90:	e6fa      	b.n	8013988 <_printf_float+0x258>
 8013b92:	f04f 0800 	mov.w	r8, #0
 8013b96:	f104 0919 	add.w	r9, r4, #25
 8013b9a:	e7f4      	b.n	8013b86 <_printf_float+0x456>

08013b9c <_printf_common>:
 8013b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ba0:	4616      	mov	r6, r2
 8013ba2:	4699      	mov	r9, r3
 8013ba4:	688a      	ldr	r2, [r1, #8]
 8013ba6:	690b      	ldr	r3, [r1, #16]
 8013ba8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013bac:	4293      	cmp	r3, r2
 8013bae:	bfb8      	it	lt
 8013bb0:	4613      	movlt	r3, r2
 8013bb2:	6033      	str	r3, [r6, #0]
 8013bb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013bb8:	4607      	mov	r7, r0
 8013bba:	460c      	mov	r4, r1
 8013bbc:	b10a      	cbz	r2, 8013bc2 <_printf_common+0x26>
 8013bbe:	3301      	adds	r3, #1
 8013bc0:	6033      	str	r3, [r6, #0]
 8013bc2:	6823      	ldr	r3, [r4, #0]
 8013bc4:	0699      	lsls	r1, r3, #26
 8013bc6:	bf42      	ittt	mi
 8013bc8:	6833      	ldrmi	r3, [r6, #0]
 8013bca:	3302      	addmi	r3, #2
 8013bcc:	6033      	strmi	r3, [r6, #0]
 8013bce:	6825      	ldr	r5, [r4, #0]
 8013bd0:	f015 0506 	ands.w	r5, r5, #6
 8013bd4:	d106      	bne.n	8013be4 <_printf_common+0x48>
 8013bd6:	f104 0a19 	add.w	sl, r4, #25
 8013bda:	68e3      	ldr	r3, [r4, #12]
 8013bdc:	6832      	ldr	r2, [r6, #0]
 8013bde:	1a9b      	subs	r3, r3, r2
 8013be0:	42ab      	cmp	r3, r5
 8013be2:	dc26      	bgt.n	8013c32 <_printf_common+0x96>
 8013be4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013be8:	1e13      	subs	r3, r2, #0
 8013bea:	6822      	ldr	r2, [r4, #0]
 8013bec:	bf18      	it	ne
 8013bee:	2301      	movne	r3, #1
 8013bf0:	0692      	lsls	r2, r2, #26
 8013bf2:	d42b      	bmi.n	8013c4c <_printf_common+0xb0>
 8013bf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013bf8:	4649      	mov	r1, r9
 8013bfa:	4638      	mov	r0, r7
 8013bfc:	47c0      	blx	r8
 8013bfe:	3001      	adds	r0, #1
 8013c00:	d01e      	beq.n	8013c40 <_printf_common+0xa4>
 8013c02:	6823      	ldr	r3, [r4, #0]
 8013c04:	68e5      	ldr	r5, [r4, #12]
 8013c06:	6832      	ldr	r2, [r6, #0]
 8013c08:	f003 0306 	and.w	r3, r3, #6
 8013c0c:	2b04      	cmp	r3, #4
 8013c0e:	bf08      	it	eq
 8013c10:	1aad      	subeq	r5, r5, r2
 8013c12:	68a3      	ldr	r3, [r4, #8]
 8013c14:	6922      	ldr	r2, [r4, #16]
 8013c16:	bf0c      	ite	eq
 8013c18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013c1c:	2500      	movne	r5, #0
 8013c1e:	4293      	cmp	r3, r2
 8013c20:	bfc4      	itt	gt
 8013c22:	1a9b      	subgt	r3, r3, r2
 8013c24:	18ed      	addgt	r5, r5, r3
 8013c26:	2600      	movs	r6, #0
 8013c28:	341a      	adds	r4, #26
 8013c2a:	42b5      	cmp	r5, r6
 8013c2c:	d11a      	bne.n	8013c64 <_printf_common+0xc8>
 8013c2e:	2000      	movs	r0, #0
 8013c30:	e008      	b.n	8013c44 <_printf_common+0xa8>
 8013c32:	2301      	movs	r3, #1
 8013c34:	4652      	mov	r2, sl
 8013c36:	4649      	mov	r1, r9
 8013c38:	4638      	mov	r0, r7
 8013c3a:	47c0      	blx	r8
 8013c3c:	3001      	adds	r0, #1
 8013c3e:	d103      	bne.n	8013c48 <_printf_common+0xac>
 8013c40:	f04f 30ff 	mov.w	r0, #4294967295
 8013c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c48:	3501      	adds	r5, #1
 8013c4a:	e7c6      	b.n	8013bda <_printf_common+0x3e>
 8013c4c:	18e1      	adds	r1, r4, r3
 8013c4e:	1c5a      	adds	r2, r3, #1
 8013c50:	2030      	movs	r0, #48	; 0x30
 8013c52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013c56:	4422      	add	r2, r4
 8013c58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013c5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013c60:	3302      	adds	r3, #2
 8013c62:	e7c7      	b.n	8013bf4 <_printf_common+0x58>
 8013c64:	2301      	movs	r3, #1
 8013c66:	4622      	mov	r2, r4
 8013c68:	4649      	mov	r1, r9
 8013c6a:	4638      	mov	r0, r7
 8013c6c:	47c0      	blx	r8
 8013c6e:	3001      	adds	r0, #1
 8013c70:	d0e6      	beq.n	8013c40 <_printf_common+0xa4>
 8013c72:	3601      	adds	r6, #1
 8013c74:	e7d9      	b.n	8013c2a <_printf_common+0x8e>
	...

08013c78 <_printf_i>:
 8013c78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013c7c:	7e0f      	ldrb	r7, [r1, #24]
 8013c7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013c80:	2f78      	cmp	r7, #120	; 0x78
 8013c82:	4691      	mov	r9, r2
 8013c84:	4680      	mov	r8, r0
 8013c86:	460c      	mov	r4, r1
 8013c88:	469a      	mov	sl, r3
 8013c8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013c8e:	d807      	bhi.n	8013ca0 <_printf_i+0x28>
 8013c90:	2f62      	cmp	r7, #98	; 0x62
 8013c92:	d80a      	bhi.n	8013caa <_printf_i+0x32>
 8013c94:	2f00      	cmp	r7, #0
 8013c96:	f000 80d8 	beq.w	8013e4a <_printf_i+0x1d2>
 8013c9a:	2f58      	cmp	r7, #88	; 0x58
 8013c9c:	f000 80a3 	beq.w	8013de6 <_printf_i+0x16e>
 8013ca0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013ca4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013ca8:	e03a      	b.n	8013d20 <_printf_i+0xa8>
 8013caa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013cae:	2b15      	cmp	r3, #21
 8013cb0:	d8f6      	bhi.n	8013ca0 <_printf_i+0x28>
 8013cb2:	a101      	add	r1, pc, #4	; (adr r1, 8013cb8 <_printf_i+0x40>)
 8013cb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013cb8:	08013d11 	.word	0x08013d11
 8013cbc:	08013d25 	.word	0x08013d25
 8013cc0:	08013ca1 	.word	0x08013ca1
 8013cc4:	08013ca1 	.word	0x08013ca1
 8013cc8:	08013ca1 	.word	0x08013ca1
 8013ccc:	08013ca1 	.word	0x08013ca1
 8013cd0:	08013d25 	.word	0x08013d25
 8013cd4:	08013ca1 	.word	0x08013ca1
 8013cd8:	08013ca1 	.word	0x08013ca1
 8013cdc:	08013ca1 	.word	0x08013ca1
 8013ce0:	08013ca1 	.word	0x08013ca1
 8013ce4:	08013e31 	.word	0x08013e31
 8013ce8:	08013d55 	.word	0x08013d55
 8013cec:	08013e13 	.word	0x08013e13
 8013cf0:	08013ca1 	.word	0x08013ca1
 8013cf4:	08013ca1 	.word	0x08013ca1
 8013cf8:	08013e53 	.word	0x08013e53
 8013cfc:	08013ca1 	.word	0x08013ca1
 8013d00:	08013d55 	.word	0x08013d55
 8013d04:	08013ca1 	.word	0x08013ca1
 8013d08:	08013ca1 	.word	0x08013ca1
 8013d0c:	08013e1b 	.word	0x08013e1b
 8013d10:	682b      	ldr	r3, [r5, #0]
 8013d12:	1d1a      	adds	r2, r3, #4
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	602a      	str	r2, [r5, #0]
 8013d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013d1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013d20:	2301      	movs	r3, #1
 8013d22:	e0a3      	b.n	8013e6c <_printf_i+0x1f4>
 8013d24:	6820      	ldr	r0, [r4, #0]
 8013d26:	6829      	ldr	r1, [r5, #0]
 8013d28:	0606      	lsls	r6, r0, #24
 8013d2a:	f101 0304 	add.w	r3, r1, #4
 8013d2e:	d50a      	bpl.n	8013d46 <_printf_i+0xce>
 8013d30:	680e      	ldr	r6, [r1, #0]
 8013d32:	602b      	str	r3, [r5, #0]
 8013d34:	2e00      	cmp	r6, #0
 8013d36:	da03      	bge.n	8013d40 <_printf_i+0xc8>
 8013d38:	232d      	movs	r3, #45	; 0x2d
 8013d3a:	4276      	negs	r6, r6
 8013d3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013d40:	485e      	ldr	r0, [pc, #376]	; (8013ebc <_printf_i+0x244>)
 8013d42:	230a      	movs	r3, #10
 8013d44:	e019      	b.n	8013d7a <_printf_i+0x102>
 8013d46:	680e      	ldr	r6, [r1, #0]
 8013d48:	602b      	str	r3, [r5, #0]
 8013d4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013d4e:	bf18      	it	ne
 8013d50:	b236      	sxthne	r6, r6
 8013d52:	e7ef      	b.n	8013d34 <_printf_i+0xbc>
 8013d54:	682b      	ldr	r3, [r5, #0]
 8013d56:	6820      	ldr	r0, [r4, #0]
 8013d58:	1d19      	adds	r1, r3, #4
 8013d5a:	6029      	str	r1, [r5, #0]
 8013d5c:	0601      	lsls	r1, r0, #24
 8013d5e:	d501      	bpl.n	8013d64 <_printf_i+0xec>
 8013d60:	681e      	ldr	r6, [r3, #0]
 8013d62:	e002      	b.n	8013d6a <_printf_i+0xf2>
 8013d64:	0646      	lsls	r6, r0, #25
 8013d66:	d5fb      	bpl.n	8013d60 <_printf_i+0xe8>
 8013d68:	881e      	ldrh	r6, [r3, #0]
 8013d6a:	4854      	ldr	r0, [pc, #336]	; (8013ebc <_printf_i+0x244>)
 8013d6c:	2f6f      	cmp	r7, #111	; 0x6f
 8013d6e:	bf0c      	ite	eq
 8013d70:	2308      	moveq	r3, #8
 8013d72:	230a      	movne	r3, #10
 8013d74:	2100      	movs	r1, #0
 8013d76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013d7a:	6865      	ldr	r5, [r4, #4]
 8013d7c:	60a5      	str	r5, [r4, #8]
 8013d7e:	2d00      	cmp	r5, #0
 8013d80:	bfa2      	ittt	ge
 8013d82:	6821      	ldrge	r1, [r4, #0]
 8013d84:	f021 0104 	bicge.w	r1, r1, #4
 8013d88:	6021      	strge	r1, [r4, #0]
 8013d8a:	b90e      	cbnz	r6, 8013d90 <_printf_i+0x118>
 8013d8c:	2d00      	cmp	r5, #0
 8013d8e:	d04d      	beq.n	8013e2c <_printf_i+0x1b4>
 8013d90:	4615      	mov	r5, r2
 8013d92:	fbb6 f1f3 	udiv	r1, r6, r3
 8013d96:	fb03 6711 	mls	r7, r3, r1, r6
 8013d9a:	5dc7      	ldrb	r7, [r0, r7]
 8013d9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013da0:	4637      	mov	r7, r6
 8013da2:	42bb      	cmp	r3, r7
 8013da4:	460e      	mov	r6, r1
 8013da6:	d9f4      	bls.n	8013d92 <_printf_i+0x11a>
 8013da8:	2b08      	cmp	r3, #8
 8013daa:	d10b      	bne.n	8013dc4 <_printf_i+0x14c>
 8013dac:	6823      	ldr	r3, [r4, #0]
 8013dae:	07de      	lsls	r6, r3, #31
 8013db0:	d508      	bpl.n	8013dc4 <_printf_i+0x14c>
 8013db2:	6923      	ldr	r3, [r4, #16]
 8013db4:	6861      	ldr	r1, [r4, #4]
 8013db6:	4299      	cmp	r1, r3
 8013db8:	bfde      	ittt	le
 8013dba:	2330      	movle	r3, #48	; 0x30
 8013dbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013dc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013dc4:	1b52      	subs	r2, r2, r5
 8013dc6:	6122      	str	r2, [r4, #16]
 8013dc8:	f8cd a000 	str.w	sl, [sp]
 8013dcc:	464b      	mov	r3, r9
 8013dce:	aa03      	add	r2, sp, #12
 8013dd0:	4621      	mov	r1, r4
 8013dd2:	4640      	mov	r0, r8
 8013dd4:	f7ff fee2 	bl	8013b9c <_printf_common>
 8013dd8:	3001      	adds	r0, #1
 8013dda:	d14c      	bne.n	8013e76 <_printf_i+0x1fe>
 8013ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8013de0:	b004      	add	sp, #16
 8013de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013de6:	4835      	ldr	r0, [pc, #212]	; (8013ebc <_printf_i+0x244>)
 8013de8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013dec:	6829      	ldr	r1, [r5, #0]
 8013dee:	6823      	ldr	r3, [r4, #0]
 8013df0:	f851 6b04 	ldr.w	r6, [r1], #4
 8013df4:	6029      	str	r1, [r5, #0]
 8013df6:	061d      	lsls	r5, r3, #24
 8013df8:	d514      	bpl.n	8013e24 <_printf_i+0x1ac>
 8013dfa:	07df      	lsls	r7, r3, #31
 8013dfc:	bf44      	itt	mi
 8013dfe:	f043 0320 	orrmi.w	r3, r3, #32
 8013e02:	6023      	strmi	r3, [r4, #0]
 8013e04:	b91e      	cbnz	r6, 8013e0e <_printf_i+0x196>
 8013e06:	6823      	ldr	r3, [r4, #0]
 8013e08:	f023 0320 	bic.w	r3, r3, #32
 8013e0c:	6023      	str	r3, [r4, #0]
 8013e0e:	2310      	movs	r3, #16
 8013e10:	e7b0      	b.n	8013d74 <_printf_i+0xfc>
 8013e12:	6823      	ldr	r3, [r4, #0]
 8013e14:	f043 0320 	orr.w	r3, r3, #32
 8013e18:	6023      	str	r3, [r4, #0]
 8013e1a:	2378      	movs	r3, #120	; 0x78
 8013e1c:	4828      	ldr	r0, [pc, #160]	; (8013ec0 <_printf_i+0x248>)
 8013e1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013e22:	e7e3      	b.n	8013dec <_printf_i+0x174>
 8013e24:	0659      	lsls	r1, r3, #25
 8013e26:	bf48      	it	mi
 8013e28:	b2b6      	uxthmi	r6, r6
 8013e2a:	e7e6      	b.n	8013dfa <_printf_i+0x182>
 8013e2c:	4615      	mov	r5, r2
 8013e2e:	e7bb      	b.n	8013da8 <_printf_i+0x130>
 8013e30:	682b      	ldr	r3, [r5, #0]
 8013e32:	6826      	ldr	r6, [r4, #0]
 8013e34:	6961      	ldr	r1, [r4, #20]
 8013e36:	1d18      	adds	r0, r3, #4
 8013e38:	6028      	str	r0, [r5, #0]
 8013e3a:	0635      	lsls	r5, r6, #24
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	d501      	bpl.n	8013e44 <_printf_i+0x1cc>
 8013e40:	6019      	str	r1, [r3, #0]
 8013e42:	e002      	b.n	8013e4a <_printf_i+0x1d2>
 8013e44:	0670      	lsls	r0, r6, #25
 8013e46:	d5fb      	bpl.n	8013e40 <_printf_i+0x1c8>
 8013e48:	8019      	strh	r1, [r3, #0]
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	6123      	str	r3, [r4, #16]
 8013e4e:	4615      	mov	r5, r2
 8013e50:	e7ba      	b.n	8013dc8 <_printf_i+0x150>
 8013e52:	682b      	ldr	r3, [r5, #0]
 8013e54:	1d1a      	adds	r2, r3, #4
 8013e56:	602a      	str	r2, [r5, #0]
 8013e58:	681d      	ldr	r5, [r3, #0]
 8013e5a:	6862      	ldr	r2, [r4, #4]
 8013e5c:	2100      	movs	r1, #0
 8013e5e:	4628      	mov	r0, r5
 8013e60:	f7ec f9be 	bl	80001e0 <memchr>
 8013e64:	b108      	cbz	r0, 8013e6a <_printf_i+0x1f2>
 8013e66:	1b40      	subs	r0, r0, r5
 8013e68:	6060      	str	r0, [r4, #4]
 8013e6a:	6863      	ldr	r3, [r4, #4]
 8013e6c:	6123      	str	r3, [r4, #16]
 8013e6e:	2300      	movs	r3, #0
 8013e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013e74:	e7a8      	b.n	8013dc8 <_printf_i+0x150>
 8013e76:	6923      	ldr	r3, [r4, #16]
 8013e78:	462a      	mov	r2, r5
 8013e7a:	4649      	mov	r1, r9
 8013e7c:	4640      	mov	r0, r8
 8013e7e:	47d0      	blx	sl
 8013e80:	3001      	adds	r0, #1
 8013e82:	d0ab      	beq.n	8013ddc <_printf_i+0x164>
 8013e84:	6823      	ldr	r3, [r4, #0]
 8013e86:	079b      	lsls	r3, r3, #30
 8013e88:	d413      	bmi.n	8013eb2 <_printf_i+0x23a>
 8013e8a:	68e0      	ldr	r0, [r4, #12]
 8013e8c:	9b03      	ldr	r3, [sp, #12]
 8013e8e:	4298      	cmp	r0, r3
 8013e90:	bfb8      	it	lt
 8013e92:	4618      	movlt	r0, r3
 8013e94:	e7a4      	b.n	8013de0 <_printf_i+0x168>
 8013e96:	2301      	movs	r3, #1
 8013e98:	4632      	mov	r2, r6
 8013e9a:	4649      	mov	r1, r9
 8013e9c:	4640      	mov	r0, r8
 8013e9e:	47d0      	blx	sl
 8013ea0:	3001      	adds	r0, #1
 8013ea2:	d09b      	beq.n	8013ddc <_printf_i+0x164>
 8013ea4:	3501      	adds	r5, #1
 8013ea6:	68e3      	ldr	r3, [r4, #12]
 8013ea8:	9903      	ldr	r1, [sp, #12]
 8013eaa:	1a5b      	subs	r3, r3, r1
 8013eac:	42ab      	cmp	r3, r5
 8013eae:	dcf2      	bgt.n	8013e96 <_printf_i+0x21e>
 8013eb0:	e7eb      	b.n	8013e8a <_printf_i+0x212>
 8013eb2:	2500      	movs	r5, #0
 8013eb4:	f104 0619 	add.w	r6, r4, #25
 8013eb8:	e7f5      	b.n	8013ea6 <_printf_i+0x22e>
 8013eba:	bf00      	nop
 8013ebc:	08017ec3 	.word	0x08017ec3
 8013ec0:	08017ed4 	.word	0x08017ed4

08013ec4 <iprintf>:
 8013ec4:	b40f      	push	{r0, r1, r2, r3}
 8013ec6:	4b0a      	ldr	r3, [pc, #40]	; (8013ef0 <iprintf+0x2c>)
 8013ec8:	b513      	push	{r0, r1, r4, lr}
 8013eca:	681c      	ldr	r4, [r3, #0]
 8013ecc:	b124      	cbz	r4, 8013ed8 <iprintf+0x14>
 8013ece:	69a3      	ldr	r3, [r4, #24]
 8013ed0:	b913      	cbnz	r3, 8013ed8 <iprintf+0x14>
 8013ed2:	4620      	mov	r0, r4
 8013ed4:	f7ff f886 	bl	8012fe4 <__sinit>
 8013ed8:	ab05      	add	r3, sp, #20
 8013eda:	9a04      	ldr	r2, [sp, #16]
 8013edc:	68a1      	ldr	r1, [r4, #8]
 8013ede:	9301      	str	r3, [sp, #4]
 8013ee0:	4620      	mov	r0, r4
 8013ee2:	f7ff fa55 	bl	8013390 <_vfiprintf_r>
 8013ee6:	b002      	add	sp, #8
 8013ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013eec:	b004      	add	sp, #16
 8013eee:	4770      	bx	lr
 8013ef0:	20000054 	.word	0x20000054

08013ef4 <_puts_r>:
 8013ef4:	b570      	push	{r4, r5, r6, lr}
 8013ef6:	460e      	mov	r6, r1
 8013ef8:	4605      	mov	r5, r0
 8013efa:	b118      	cbz	r0, 8013f04 <_puts_r+0x10>
 8013efc:	6983      	ldr	r3, [r0, #24]
 8013efe:	b90b      	cbnz	r3, 8013f04 <_puts_r+0x10>
 8013f00:	f7ff f870 	bl	8012fe4 <__sinit>
 8013f04:	69ab      	ldr	r3, [r5, #24]
 8013f06:	68ac      	ldr	r4, [r5, #8]
 8013f08:	b913      	cbnz	r3, 8013f10 <_puts_r+0x1c>
 8013f0a:	4628      	mov	r0, r5
 8013f0c:	f7ff f86a 	bl	8012fe4 <__sinit>
 8013f10:	4b2c      	ldr	r3, [pc, #176]	; (8013fc4 <_puts_r+0xd0>)
 8013f12:	429c      	cmp	r4, r3
 8013f14:	d120      	bne.n	8013f58 <_puts_r+0x64>
 8013f16:	686c      	ldr	r4, [r5, #4]
 8013f18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013f1a:	07db      	lsls	r3, r3, #31
 8013f1c:	d405      	bmi.n	8013f2a <_puts_r+0x36>
 8013f1e:	89a3      	ldrh	r3, [r4, #12]
 8013f20:	0598      	lsls	r0, r3, #22
 8013f22:	d402      	bmi.n	8013f2a <_puts_r+0x36>
 8013f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013f26:	f7ff f932 	bl	801318e <__retarget_lock_acquire_recursive>
 8013f2a:	89a3      	ldrh	r3, [r4, #12]
 8013f2c:	0719      	lsls	r1, r3, #28
 8013f2e:	d51d      	bpl.n	8013f6c <_puts_r+0x78>
 8013f30:	6923      	ldr	r3, [r4, #16]
 8013f32:	b1db      	cbz	r3, 8013f6c <_puts_r+0x78>
 8013f34:	3e01      	subs	r6, #1
 8013f36:	68a3      	ldr	r3, [r4, #8]
 8013f38:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013f3c:	3b01      	subs	r3, #1
 8013f3e:	60a3      	str	r3, [r4, #8]
 8013f40:	bb39      	cbnz	r1, 8013f92 <_puts_r+0x9e>
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	da38      	bge.n	8013fb8 <_puts_r+0xc4>
 8013f46:	4622      	mov	r2, r4
 8013f48:	210a      	movs	r1, #10
 8013f4a:	4628      	mov	r0, r5
 8013f4c:	f000 f9de 	bl	801430c <__swbuf_r>
 8013f50:	3001      	adds	r0, #1
 8013f52:	d011      	beq.n	8013f78 <_puts_r+0x84>
 8013f54:	250a      	movs	r5, #10
 8013f56:	e011      	b.n	8013f7c <_puts_r+0x88>
 8013f58:	4b1b      	ldr	r3, [pc, #108]	; (8013fc8 <_puts_r+0xd4>)
 8013f5a:	429c      	cmp	r4, r3
 8013f5c:	d101      	bne.n	8013f62 <_puts_r+0x6e>
 8013f5e:	68ac      	ldr	r4, [r5, #8]
 8013f60:	e7da      	b.n	8013f18 <_puts_r+0x24>
 8013f62:	4b1a      	ldr	r3, [pc, #104]	; (8013fcc <_puts_r+0xd8>)
 8013f64:	429c      	cmp	r4, r3
 8013f66:	bf08      	it	eq
 8013f68:	68ec      	ldreq	r4, [r5, #12]
 8013f6a:	e7d5      	b.n	8013f18 <_puts_r+0x24>
 8013f6c:	4621      	mov	r1, r4
 8013f6e:	4628      	mov	r0, r5
 8013f70:	f000 fa30 	bl	80143d4 <__swsetup_r>
 8013f74:	2800      	cmp	r0, #0
 8013f76:	d0dd      	beq.n	8013f34 <_puts_r+0x40>
 8013f78:	f04f 35ff 	mov.w	r5, #4294967295
 8013f7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013f7e:	07da      	lsls	r2, r3, #31
 8013f80:	d405      	bmi.n	8013f8e <_puts_r+0x9a>
 8013f82:	89a3      	ldrh	r3, [r4, #12]
 8013f84:	059b      	lsls	r3, r3, #22
 8013f86:	d402      	bmi.n	8013f8e <_puts_r+0x9a>
 8013f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013f8a:	f7ff f901 	bl	8013190 <__retarget_lock_release_recursive>
 8013f8e:	4628      	mov	r0, r5
 8013f90:	bd70      	pop	{r4, r5, r6, pc}
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	da04      	bge.n	8013fa0 <_puts_r+0xac>
 8013f96:	69a2      	ldr	r2, [r4, #24]
 8013f98:	429a      	cmp	r2, r3
 8013f9a:	dc06      	bgt.n	8013faa <_puts_r+0xb6>
 8013f9c:	290a      	cmp	r1, #10
 8013f9e:	d004      	beq.n	8013faa <_puts_r+0xb6>
 8013fa0:	6823      	ldr	r3, [r4, #0]
 8013fa2:	1c5a      	adds	r2, r3, #1
 8013fa4:	6022      	str	r2, [r4, #0]
 8013fa6:	7019      	strb	r1, [r3, #0]
 8013fa8:	e7c5      	b.n	8013f36 <_puts_r+0x42>
 8013faa:	4622      	mov	r2, r4
 8013fac:	4628      	mov	r0, r5
 8013fae:	f000 f9ad 	bl	801430c <__swbuf_r>
 8013fb2:	3001      	adds	r0, #1
 8013fb4:	d1bf      	bne.n	8013f36 <_puts_r+0x42>
 8013fb6:	e7df      	b.n	8013f78 <_puts_r+0x84>
 8013fb8:	6823      	ldr	r3, [r4, #0]
 8013fba:	250a      	movs	r5, #10
 8013fbc:	1c5a      	adds	r2, r3, #1
 8013fbe:	6022      	str	r2, [r4, #0]
 8013fc0:	701d      	strb	r5, [r3, #0]
 8013fc2:	e7db      	b.n	8013f7c <_puts_r+0x88>
 8013fc4:	08017e5c 	.word	0x08017e5c
 8013fc8:	08017e7c 	.word	0x08017e7c
 8013fcc:	08017e3c 	.word	0x08017e3c

08013fd0 <puts>:
 8013fd0:	4b02      	ldr	r3, [pc, #8]	; (8013fdc <puts+0xc>)
 8013fd2:	4601      	mov	r1, r0
 8013fd4:	6818      	ldr	r0, [r3, #0]
 8013fd6:	f7ff bf8d 	b.w	8013ef4 <_puts_r>
 8013fda:	bf00      	nop
 8013fdc:	20000054 	.word	0x20000054

08013fe0 <cleanup_glue>:
 8013fe0:	b538      	push	{r3, r4, r5, lr}
 8013fe2:	460c      	mov	r4, r1
 8013fe4:	6809      	ldr	r1, [r1, #0]
 8013fe6:	4605      	mov	r5, r0
 8013fe8:	b109      	cbz	r1, 8013fee <cleanup_glue+0xe>
 8013fea:	f7ff fff9 	bl	8013fe0 <cleanup_glue>
 8013fee:	4621      	mov	r1, r4
 8013ff0:	4628      	mov	r0, r5
 8013ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013ff6:	f001 bdd9 	b.w	8015bac <_free_r>
	...

08013ffc <_reclaim_reent>:
 8013ffc:	4b2c      	ldr	r3, [pc, #176]	; (80140b0 <_reclaim_reent+0xb4>)
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	4283      	cmp	r3, r0
 8014002:	b570      	push	{r4, r5, r6, lr}
 8014004:	4604      	mov	r4, r0
 8014006:	d051      	beq.n	80140ac <_reclaim_reent+0xb0>
 8014008:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801400a:	b143      	cbz	r3, 801401e <_reclaim_reent+0x22>
 801400c:	68db      	ldr	r3, [r3, #12]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d14a      	bne.n	80140a8 <_reclaim_reent+0xac>
 8014012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014014:	6819      	ldr	r1, [r3, #0]
 8014016:	b111      	cbz	r1, 801401e <_reclaim_reent+0x22>
 8014018:	4620      	mov	r0, r4
 801401a:	f001 fdc7 	bl	8015bac <_free_r>
 801401e:	6961      	ldr	r1, [r4, #20]
 8014020:	b111      	cbz	r1, 8014028 <_reclaim_reent+0x2c>
 8014022:	4620      	mov	r0, r4
 8014024:	f001 fdc2 	bl	8015bac <_free_r>
 8014028:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801402a:	b111      	cbz	r1, 8014032 <_reclaim_reent+0x36>
 801402c:	4620      	mov	r0, r4
 801402e:	f001 fdbd 	bl	8015bac <_free_r>
 8014032:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014034:	b111      	cbz	r1, 801403c <_reclaim_reent+0x40>
 8014036:	4620      	mov	r0, r4
 8014038:	f001 fdb8 	bl	8015bac <_free_r>
 801403c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801403e:	b111      	cbz	r1, 8014046 <_reclaim_reent+0x4a>
 8014040:	4620      	mov	r0, r4
 8014042:	f001 fdb3 	bl	8015bac <_free_r>
 8014046:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014048:	b111      	cbz	r1, 8014050 <_reclaim_reent+0x54>
 801404a:	4620      	mov	r0, r4
 801404c:	f001 fdae 	bl	8015bac <_free_r>
 8014050:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8014052:	b111      	cbz	r1, 801405a <_reclaim_reent+0x5e>
 8014054:	4620      	mov	r0, r4
 8014056:	f001 fda9 	bl	8015bac <_free_r>
 801405a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801405c:	b111      	cbz	r1, 8014064 <_reclaim_reent+0x68>
 801405e:	4620      	mov	r0, r4
 8014060:	f001 fda4 	bl	8015bac <_free_r>
 8014064:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014066:	b111      	cbz	r1, 801406e <_reclaim_reent+0x72>
 8014068:	4620      	mov	r0, r4
 801406a:	f001 fd9f 	bl	8015bac <_free_r>
 801406e:	69a3      	ldr	r3, [r4, #24]
 8014070:	b1e3      	cbz	r3, 80140ac <_reclaim_reent+0xb0>
 8014072:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014074:	4620      	mov	r0, r4
 8014076:	4798      	blx	r3
 8014078:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801407a:	b1b9      	cbz	r1, 80140ac <_reclaim_reent+0xb0>
 801407c:	4620      	mov	r0, r4
 801407e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014082:	f7ff bfad 	b.w	8013fe0 <cleanup_glue>
 8014086:	5949      	ldr	r1, [r1, r5]
 8014088:	b941      	cbnz	r1, 801409c <_reclaim_reent+0xa0>
 801408a:	3504      	adds	r5, #4
 801408c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801408e:	2d80      	cmp	r5, #128	; 0x80
 8014090:	68d9      	ldr	r1, [r3, #12]
 8014092:	d1f8      	bne.n	8014086 <_reclaim_reent+0x8a>
 8014094:	4620      	mov	r0, r4
 8014096:	f001 fd89 	bl	8015bac <_free_r>
 801409a:	e7ba      	b.n	8014012 <_reclaim_reent+0x16>
 801409c:	680e      	ldr	r6, [r1, #0]
 801409e:	4620      	mov	r0, r4
 80140a0:	f001 fd84 	bl	8015bac <_free_r>
 80140a4:	4631      	mov	r1, r6
 80140a6:	e7ef      	b.n	8014088 <_reclaim_reent+0x8c>
 80140a8:	2500      	movs	r5, #0
 80140aa:	e7ef      	b.n	801408c <_reclaim_reent+0x90>
 80140ac:	bd70      	pop	{r4, r5, r6, pc}
 80140ae:	bf00      	nop
 80140b0:	20000054 	.word	0x20000054

080140b4 <_sbrk_r>:
 80140b4:	b538      	push	{r3, r4, r5, lr}
 80140b6:	4d06      	ldr	r5, [pc, #24]	; (80140d0 <_sbrk_r+0x1c>)
 80140b8:	2300      	movs	r3, #0
 80140ba:	4604      	mov	r4, r0
 80140bc:	4608      	mov	r0, r1
 80140be:	602b      	str	r3, [r5, #0]
 80140c0:	f7ef f980 	bl	80033c4 <_sbrk>
 80140c4:	1c43      	adds	r3, r0, #1
 80140c6:	d102      	bne.n	80140ce <_sbrk_r+0x1a>
 80140c8:	682b      	ldr	r3, [r5, #0]
 80140ca:	b103      	cbz	r3, 80140ce <_sbrk_r+0x1a>
 80140cc:	6023      	str	r3, [r4, #0]
 80140ce:	bd38      	pop	{r3, r4, r5, pc}
 80140d0:	20005090 	.word	0x20005090

080140d4 <sniprintf>:
 80140d4:	b40c      	push	{r2, r3}
 80140d6:	b530      	push	{r4, r5, lr}
 80140d8:	4b17      	ldr	r3, [pc, #92]	; (8014138 <sniprintf+0x64>)
 80140da:	1e0c      	subs	r4, r1, #0
 80140dc:	681d      	ldr	r5, [r3, #0]
 80140de:	b09d      	sub	sp, #116	; 0x74
 80140e0:	da08      	bge.n	80140f4 <sniprintf+0x20>
 80140e2:	238b      	movs	r3, #139	; 0x8b
 80140e4:	602b      	str	r3, [r5, #0]
 80140e6:	f04f 30ff 	mov.w	r0, #4294967295
 80140ea:	b01d      	add	sp, #116	; 0x74
 80140ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80140f0:	b002      	add	sp, #8
 80140f2:	4770      	bx	lr
 80140f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80140f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80140fc:	bf14      	ite	ne
 80140fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014102:	4623      	moveq	r3, r4
 8014104:	9304      	str	r3, [sp, #16]
 8014106:	9307      	str	r3, [sp, #28]
 8014108:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801410c:	9002      	str	r0, [sp, #8]
 801410e:	9006      	str	r0, [sp, #24]
 8014110:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014114:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014116:	ab21      	add	r3, sp, #132	; 0x84
 8014118:	a902      	add	r1, sp, #8
 801411a:	4628      	mov	r0, r5
 801411c:	9301      	str	r3, [sp, #4]
 801411e:	f001 fe1b 	bl	8015d58 <_svfiprintf_r>
 8014122:	1c43      	adds	r3, r0, #1
 8014124:	bfbc      	itt	lt
 8014126:	238b      	movlt	r3, #139	; 0x8b
 8014128:	602b      	strlt	r3, [r5, #0]
 801412a:	2c00      	cmp	r4, #0
 801412c:	d0dd      	beq.n	80140ea <sniprintf+0x16>
 801412e:	9b02      	ldr	r3, [sp, #8]
 8014130:	2200      	movs	r2, #0
 8014132:	701a      	strb	r2, [r3, #0]
 8014134:	e7d9      	b.n	80140ea <sniprintf+0x16>
 8014136:	bf00      	nop
 8014138:	20000054 	.word	0x20000054

0801413c <siprintf>:
 801413c:	b40e      	push	{r1, r2, r3}
 801413e:	b500      	push	{lr}
 8014140:	b09c      	sub	sp, #112	; 0x70
 8014142:	ab1d      	add	r3, sp, #116	; 0x74
 8014144:	9002      	str	r0, [sp, #8]
 8014146:	9006      	str	r0, [sp, #24]
 8014148:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801414c:	4809      	ldr	r0, [pc, #36]	; (8014174 <siprintf+0x38>)
 801414e:	9107      	str	r1, [sp, #28]
 8014150:	9104      	str	r1, [sp, #16]
 8014152:	4909      	ldr	r1, [pc, #36]	; (8014178 <siprintf+0x3c>)
 8014154:	f853 2b04 	ldr.w	r2, [r3], #4
 8014158:	9105      	str	r1, [sp, #20]
 801415a:	6800      	ldr	r0, [r0, #0]
 801415c:	9301      	str	r3, [sp, #4]
 801415e:	a902      	add	r1, sp, #8
 8014160:	f001 fdfa 	bl	8015d58 <_svfiprintf_r>
 8014164:	9b02      	ldr	r3, [sp, #8]
 8014166:	2200      	movs	r2, #0
 8014168:	701a      	strb	r2, [r3, #0]
 801416a:	b01c      	add	sp, #112	; 0x70
 801416c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014170:	b003      	add	sp, #12
 8014172:	4770      	bx	lr
 8014174:	20000054 	.word	0x20000054
 8014178:	ffff0208 	.word	0xffff0208

0801417c <__sread>:
 801417c:	b510      	push	{r4, lr}
 801417e:	460c      	mov	r4, r1
 8014180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014184:	f001 fee8 	bl	8015f58 <_read_r>
 8014188:	2800      	cmp	r0, #0
 801418a:	bfab      	itete	ge
 801418c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801418e:	89a3      	ldrhlt	r3, [r4, #12]
 8014190:	181b      	addge	r3, r3, r0
 8014192:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014196:	bfac      	ite	ge
 8014198:	6563      	strge	r3, [r4, #84]	; 0x54
 801419a:	81a3      	strhlt	r3, [r4, #12]
 801419c:	bd10      	pop	{r4, pc}

0801419e <__swrite>:
 801419e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141a2:	461f      	mov	r7, r3
 80141a4:	898b      	ldrh	r3, [r1, #12]
 80141a6:	05db      	lsls	r3, r3, #23
 80141a8:	4605      	mov	r5, r0
 80141aa:	460c      	mov	r4, r1
 80141ac:	4616      	mov	r6, r2
 80141ae:	d505      	bpl.n	80141bc <__swrite+0x1e>
 80141b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141b4:	2302      	movs	r3, #2
 80141b6:	2200      	movs	r2, #0
 80141b8:	f001 f8d2 	bl	8015360 <_lseek_r>
 80141bc:	89a3      	ldrh	r3, [r4, #12]
 80141be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80141c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80141c6:	81a3      	strh	r3, [r4, #12]
 80141c8:	4632      	mov	r2, r6
 80141ca:	463b      	mov	r3, r7
 80141cc:	4628      	mov	r0, r5
 80141ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80141d2:	f000 b8ed 	b.w	80143b0 <_write_r>

080141d6 <__sseek>:
 80141d6:	b510      	push	{r4, lr}
 80141d8:	460c      	mov	r4, r1
 80141da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141de:	f001 f8bf 	bl	8015360 <_lseek_r>
 80141e2:	1c43      	adds	r3, r0, #1
 80141e4:	89a3      	ldrh	r3, [r4, #12]
 80141e6:	bf15      	itete	ne
 80141e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80141ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80141ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80141f2:	81a3      	strheq	r3, [r4, #12]
 80141f4:	bf18      	it	ne
 80141f6:	81a3      	strhne	r3, [r4, #12]
 80141f8:	bd10      	pop	{r4, pc}

080141fa <__sclose>:
 80141fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141fe:	f000 b95f 	b.w	80144c0 <_close_r>

08014202 <strncpy>:
 8014202:	b510      	push	{r4, lr}
 8014204:	3901      	subs	r1, #1
 8014206:	4603      	mov	r3, r0
 8014208:	b132      	cbz	r2, 8014218 <strncpy+0x16>
 801420a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801420e:	f803 4b01 	strb.w	r4, [r3], #1
 8014212:	3a01      	subs	r2, #1
 8014214:	2c00      	cmp	r4, #0
 8014216:	d1f7      	bne.n	8014208 <strncpy+0x6>
 8014218:	441a      	add	r2, r3
 801421a:	2100      	movs	r1, #0
 801421c:	4293      	cmp	r3, r2
 801421e:	d100      	bne.n	8014222 <strncpy+0x20>
 8014220:	bd10      	pop	{r4, pc}
 8014222:	f803 1b01 	strb.w	r1, [r3], #1
 8014226:	e7f9      	b.n	801421c <strncpy+0x1a>

08014228 <strstr>:
 8014228:	780a      	ldrb	r2, [r1, #0]
 801422a:	b570      	push	{r4, r5, r6, lr}
 801422c:	b96a      	cbnz	r2, 801424a <strstr+0x22>
 801422e:	bd70      	pop	{r4, r5, r6, pc}
 8014230:	429a      	cmp	r2, r3
 8014232:	d109      	bne.n	8014248 <strstr+0x20>
 8014234:	460c      	mov	r4, r1
 8014236:	4605      	mov	r5, r0
 8014238:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801423c:	2b00      	cmp	r3, #0
 801423e:	d0f6      	beq.n	801422e <strstr+0x6>
 8014240:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8014244:	429e      	cmp	r6, r3
 8014246:	d0f7      	beq.n	8014238 <strstr+0x10>
 8014248:	3001      	adds	r0, #1
 801424a:	7803      	ldrb	r3, [r0, #0]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d1ef      	bne.n	8014230 <strstr+0x8>
 8014250:	4618      	mov	r0, r3
 8014252:	e7ec      	b.n	801422e <strstr+0x6>

08014254 <strtok>:
 8014254:	4b16      	ldr	r3, [pc, #88]	; (80142b0 <strtok+0x5c>)
 8014256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014258:	681e      	ldr	r6, [r3, #0]
 801425a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801425c:	4605      	mov	r5, r0
 801425e:	b9fc      	cbnz	r4, 80142a0 <strtok+0x4c>
 8014260:	2050      	movs	r0, #80	; 0x50
 8014262:	9101      	str	r1, [sp, #4]
 8014264:	f001 f8f4 	bl	8015450 <malloc>
 8014268:	9901      	ldr	r1, [sp, #4]
 801426a:	65b0      	str	r0, [r6, #88]	; 0x58
 801426c:	4602      	mov	r2, r0
 801426e:	b920      	cbnz	r0, 801427a <strtok+0x26>
 8014270:	4b10      	ldr	r3, [pc, #64]	; (80142b4 <strtok+0x60>)
 8014272:	4811      	ldr	r0, [pc, #68]	; (80142b8 <strtok+0x64>)
 8014274:	2157      	movs	r1, #87	; 0x57
 8014276:	f7fe fe39 	bl	8012eec <__assert_func>
 801427a:	e9c0 4400 	strd	r4, r4, [r0]
 801427e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8014282:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8014286:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801428a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801428e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8014292:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8014296:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801429a:	6184      	str	r4, [r0, #24]
 801429c:	7704      	strb	r4, [r0, #28]
 801429e:	6244      	str	r4, [r0, #36]	; 0x24
 80142a0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80142a2:	2301      	movs	r3, #1
 80142a4:	4628      	mov	r0, r5
 80142a6:	b002      	add	sp, #8
 80142a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80142ac:	f000 b806 	b.w	80142bc <__strtok_r>
 80142b0:	20000054 	.word	0x20000054
 80142b4:	08017ee5 	.word	0x08017ee5
 80142b8:	08017efc 	.word	0x08017efc

080142bc <__strtok_r>:
 80142bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142be:	b908      	cbnz	r0, 80142c4 <__strtok_r+0x8>
 80142c0:	6810      	ldr	r0, [r2, #0]
 80142c2:	b188      	cbz	r0, 80142e8 <__strtok_r+0x2c>
 80142c4:	4604      	mov	r4, r0
 80142c6:	4620      	mov	r0, r4
 80142c8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80142cc:	460f      	mov	r7, r1
 80142ce:	f817 6b01 	ldrb.w	r6, [r7], #1
 80142d2:	b91e      	cbnz	r6, 80142dc <__strtok_r+0x20>
 80142d4:	b965      	cbnz	r5, 80142f0 <__strtok_r+0x34>
 80142d6:	6015      	str	r5, [r2, #0]
 80142d8:	4628      	mov	r0, r5
 80142da:	e005      	b.n	80142e8 <__strtok_r+0x2c>
 80142dc:	42b5      	cmp	r5, r6
 80142de:	d1f6      	bne.n	80142ce <__strtok_r+0x12>
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d1f0      	bne.n	80142c6 <__strtok_r+0xa>
 80142e4:	6014      	str	r4, [r2, #0]
 80142e6:	7003      	strb	r3, [r0, #0]
 80142e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142ea:	461c      	mov	r4, r3
 80142ec:	e00c      	b.n	8014308 <__strtok_r+0x4c>
 80142ee:	b915      	cbnz	r5, 80142f6 <__strtok_r+0x3a>
 80142f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80142f4:	460e      	mov	r6, r1
 80142f6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80142fa:	42ab      	cmp	r3, r5
 80142fc:	d1f7      	bne.n	80142ee <__strtok_r+0x32>
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d0f3      	beq.n	80142ea <__strtok_r+0x2e>
 8014302:	2300      	movs	r3, #0
 8014304:	f804 3c01 	strb.w	r3, [r4, #-1]
 8014308:	6014      	str	r4, [r2, #0]
 801430a:	e7ed      	b.n	80142e8 <__strtok_r+0x2c>

0801430c <__swbuf_r>:
 801430c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801430e:	460e      	mov	r6, r1
 8014310:	4614      	mov	r4, r2
 8014312:	4605      	mov	r5, r0
 8014314:	b118      	cbz	r0, 801431e <__swbuf_r+0x12>
 8014316:	6983      	ldr	r3, [r0, #24]
 8014318:	b90b      	cbnz	r3, 801431e <__swbuf_r+0x12>
 801431a:	f7fe fe63 	bl	8012fe4 <__sinit>
 801431e:	4b21      	ldr	r3, [pc, #132]	; (80143a4 <__swbuf_r+0x98>)
 8014320:	429c      	cmp	r4, r3
 8014322:	d12b      	bne.n	801437c <__swbuf_r+0x70>
 8014324:	686c      	ldr	r4, [r5, #4]
 8014326:	69a3      	ldr	r3, [r4, #24]
 8014328:	60a3      	str	r3, [r4, #8]
 801432a:	89a3      	ldrh	r3, [r4, #12]
 801432c:	071a      	lsls	r2, r3, #28
 801432e:	d52f      	bpl.n	8014390 <__swbuf_r+0x84>
 8014330:	6923      	ldr	r3, [r4, #16]
 8014332:	b36b      	cbz	r3, 8014390 <__swbuf_r+0x84>
 8014334:	6923      	ldr	r3, [r4, #16]
 8014336:	6820      	ldr	r0, [r4, #0]
 8014338:	1ac0      	subs	r0, r0, r3
 801433a:	6963      	ldr	r3, [r4, #20]
 801433c:	b2f6      	uxtb	r6, r6
 801433e:	4283      	cmp	r3, r0
 8014340:	4637      	mov	r7, r6
 8014342:	dc04      	bgt.n	801434e <__swbuf_r+0x42>
 8014344:	4621      	mov	r1, r4
 8014346:	4628      	mov	r0, r5
 8014348:	f000 ffca 	bl	80152e0 <_fflush_r>
 801434c:	bb30      	cbnz	r0, 801439c <__swbuf_r+0x90>
 801434e:	68a3      	ldr	r3, [r4, #8]
 8014350:	3b01      	subs	r3, #1
 8014352:	60a3      	str	r3, [r4, #8]
 8014354:	6823      	ldr	r3, [r4, #0]
 8014356:	1c5a      	adds	r2, r3, #1
 8014358:	6022      	str	r2, [r4, #0]
 801435a:	701e      	strb	r6, [r3, #0]
 801435c:	6963      	ldr	r3, [r4, #20]
 801435e:	3001      	adds	r0, #1
 8014360:	4283      	cmp	r3, r0
 8014362:	d004      	beq.n	801436e <__swbuf_r+0x62>
 8014364:	89a3      	ldrh	r3, [r4, #12]
 8014366:	07db      	lsls	r3, r3, #31
 8014368:	d506      	bpl.n	8014378 <__swbuf_r+0x6c>
 801436a:	2e0a      	cmp	r6, #10
 801436c:	d104      	bne.n	8014378 <__swbuf_r+0x6c>
 801436e:	4621      	mov	r1, r4
 8014370:	4628      	mov	r0, r5
 8014372:	f000 ffb5 	bl	80152e0 <_fflush_r>
 8014376:	b988      	cbnz	r0, 801439c <__swbuf_r+0x90>
 8014378:	4638      	mov	r0, r7
 801437a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801437c:	4b0a      	ldr	r3, [pc, #40]	; (80143a8 <__swbuf_r+0x9c>)
 801437e:	429c      	cmp	r4, r3
 8014380:	d101      	bne.n	8014386 <__swbuf_r+0x7a>
 8014382:	68ac      	ldr	r4, [r5, #8]
 8014384:	e7cf      	b.n	8014326 <__swbuf_r+0x1a>
 8014386:	4b09      	ldr	r3, [pc, #36]	; (80143ac <__swbuf_r+0xa0>)
 8014388:	429c      	cmp	r4, r3
 801438a:	bf08      	it	eq
 801438c:	68ec      	ldreq	r4, [r5, #12]
 801438e:	e7ca      	b.n	8014326 <__swbuf_r+0x1a>
 8014390:	4621      	mov	r1, r4
 8014392:	4628      	mov	r0, r5
 8014394:	f000 f81e 	bl	80143d4 <__swsetup_r>
 8014398:	2800      	cmp	r0, #0
 801439a:	d0cb      	beq.n	8014334 <__swbuf_r+0x28>
 801439c:	f04f 37ff 	mov.w	r7, #4294967295
 80143a0:	e7ea      	b.n	8014378 <__swbuf_r+0x6c>
 80143a2:	bf00      	nop
 80143a4:	08017e5c 	.word	0x08017e5c
 80143a8:	08017e7c 	.word	0x08017e7c
 80143ac:	08017e3c 	.word	0x08017e3c

080143b0 <_write_r>:
 80143b0:	b538      	push	{r3, r4, r5, lr}
 80143b2:	4d07      	ldr	r5, [pc, #28]	; (80143d0 <_write_r+0x20>)
 80143b4:	4604      	mov	r4, r0
 80143b6:	4608      	mov	r0, r1
 80143b8:	4611      	mov	r1, r2
 80143ba:	2200      	movs	r2, #0
 80143bc:	602a      	str	r2, [r5, #0]
 80143be:	461a      	mov	r2, r3
 80143c0:	f7ed fa6a 	bl	8001898 <_write>
 80143c4:	1c43      	adds	r3, r0, #1
 80143c6:	d102      	bne.n	80143ce <_write_r+0x1e>
 80143c8:	682b      	ldr	r3, [r5, #0]
 80143ca:	b103      	cbz	r3, 80143ce <_write_r+0x1e>
 80143cc:	6023      	str	r3, [r4, #0]
 80143ce:	bd38      	pop	{r3, r4, r5, pc}
 80143d0:	20005090 	.word	0x20005090

080143d4 <__swsetup_r>:
 80143d4:	4b32      	ldr	r3, [pc, #200]	; (80144a0 <__swsetup_r+0xcc>)
 80143d6:	b570      	push	{r4, r5, r6, lr}
 80143d8:	681d      	ldr	r5, [r3, #0]
 80143da:	4606      	mov	r6, r0
 80143dc:	460c      	mov	r4, r1
 80143de:	b125      	cbz	r5, 80143ea <__swsetup_r+0x16>
 80143e0:	69ab      	ldr	r3, [r5, #24]
 80143e2:	b913      	cbnz	r3, 80143ea <__swsetup_r+0x16>
 80143e4:	4628      	mov	r0, r5
 80143e6:	f7fe fdfd 	bl	8012fe4 <__sinit>
 80143ea:	4b2e      	ldr	r3, [pc, #184]	; (80144a4 <__swsetup_r+0xd0>)
 80143ec:	429c      	cmp	r4, r3
 80143ee:	d10f      	bne.n	8014410 <__swsetup_r+0x3c>
 80143f0:	686c      	ldr	r4, [r5, #4]
 80143f2:	89a3      	ldrh	r3, [r4, #12]
 80143f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80143f8:	0719      	lsls	r1, r3, #28
 80143fa:	d42c      	bmi.n	8014456 <__swsetup_r+0x82>
 80143fc:	06dd      	lsls	r5, r3, #27
 80143fe:	d411      	bmi.n	8014424 <__swsetup_r+0x50>
 8014400:	2309      	movs	r3, #9
 8014402:	6033      	str	r3, [r6, #0]
 8014404:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014408:	81a3      	strh	r3, [r4, #12]
 801440a:	f04f 30ff 	mov.w	r0, #4294967295
 801440e:	e03e      	b.n	801448e <__swsetup_r+0xba>
 8014410:	4b25      	ldr	r3, [pc, #148]	; (80144a8 <__swsetup_r+0xd4>)
 8014412:	429c      	cmp	r4, r3
 8014414:	d101      	bne.n	801441a <__swsetup_r+0x46>
 8014416:	68ac      	ldr	r4, [r5, #8]
 8014418:	e7eb      	b.n	80143f2 <__swsetup_r+0x1e>
 801441a:	4b24      	ldr	r3, [pc, #144]	; (80144ac <__swsetup_r+0xd8>)
 801441c:	429c      	cmp	r4, r3
 801441e:	bf08      	it	eq
 8014420:	68ec      	ldreq	r4, [r5, #12]
 8014422:	e7e6      	b.n	80143f2 <__swsetup_r+0x1e>
 8014424:	0758      	lsls	r0, r3, #29
 8014426:	d512      	bpl.n	801444e <__swsetup_r+0x7a>
 8014428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801442a:	b141      	cbz	r1, 801443e <__swsetup_r+0x6a>
 801442c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014430:	4299      	cmp	r1, r3
 8014432:	d002      	beq.n	801443a <__swsetup_r+0x66>
 8014434:	4630      	mov	r0, r6
 8014436:	f001 fbb9 	bl	8015bac <_free_r>
 801443a:	2300      	movs	r3, #0
 801443c:	6363      	str	r3, [r4, #52]	; 0x34
 801443e:	89a3      	ldrh	r3, [r4, #12]
 8014440:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014444:	81a3      	strh	r3, [r4, #12]
 8014446:	2300      	movs	r3, #0
 8014448:	6063      	str	r3, [r4, #4]
 801444a:	6923      	ldr	r3, [r4, #16]
 801444c:	6023      	str	r3, [r4, #0]
 801444e:	89a3      	ldrh	r3, [r4, #12]
 8014450:	f043 0308 	orr.w	r3, r3, #8
 8014454:	81a3      	strh	r3, [r4, #12]
 8014456:	6923      	ldr	r3, [r4, #16]
 8014458:	b94b      	cbnz	r3, 801446e <__swsetup_r+0x9a>
 801445a:	89a3      	ldrh	r3, [r4, #12]
 801445c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014464:	d003      	beq.n	801446e <__swsetup_r+0x9a>
 8014466:	4621      	mov	r1, r4
 8014468:	4630      	mov	r0, r6
 801446a:	f000 ffb1 	bl	80153d0 <__smakebuf_r>
 801446e:	89a0      	ldrh	r0, [r4, #12]
 8014470:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014474:	f010 0301 	ands.w	r3, r0, #1
 8014478:	d00a      	beq.n	8014490 <__swsetup_r+0xbc>
 801447a:	2300      	movs	r3, #0
 801447c:	60a3      	str	r3, [r4, #8]
 801447e:	6963      	ldr	r3, [r4, #20]
 8014480:	425b      	negs	r3, r3
 8014482:	61a3      	str	r3, [r4, #24]
 8014484:	6923      	ldr	r3, [r4, #16]
 8014486:	b943      	cbnz	r3, 801449a <__swsetup_r+0xc6>
 8014488:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801448c:	d1ba      	bne.n	8014404 <__swsetup_r+0x30>
 801448e:	bd70      	pop	{r4, r5, r6, pc}
 8014490:	0781      	lsls	r1, r0, #30
 8014492:	bf58      	it	pl
 8014494:	6963      	ldrpl	r3, [r4, #20]
 8014496:	60a3      	str	r3, [r4, #8]
 8014498:	e7f4      	b.n	8014484 <__swsetup_r+0xb0>
 801449a:	2000      	movs	r0, #0
 801449c:	e7f7      	b.n	801448e <__swsetup_r+0xba>
 801449e:	bf00      	nop
 80144a0:	20000054 	.word	0x20000054
 80144a4:	08017e5c 	.word	0x08017e5c
 80144a8:	08017e7c 	.word	0x08017e7c
 80144ac:	08017e3c 	.word	0x08017e3c

080144b0 <abort>:
 80144b0:	b508      	push	{r3, lr}
 80144b2:	2006      	movs	r0, #6
 80144b4:	f001 fd8a 	bl	8015fcc <raise>
 80144b8:	2001      	movs	r0, #1
 80144ba:	f7ee ff27 	bl	800330c <_exit>
	...

080144c0 <_close_r>:
 80144c0:	b538      	push	{r3, r4, r5, lr}
 80144c2:	4d06      	ldr	r5, [pc, #24]	; (80144dc <_close_r+0x1c>)
 80144c4:	2300      	movs	r3, #0
 80144c6:	4604      	mov	r4, r0
 80144c8:	4608      	mov	r0, r1
 80144ca:	602b      	str	r3, [r5, #0]
 80144cc:	f7ee ff45 	bl	800335a <_close>
 80144d0:	1c43      	adds	r3, r0, #1
 80144d2:	d102      	bne.n	80144da <_close_r+0x1a>
 80144d4:	682b      	ldr	r3, [r5, #0]
 80144d6:	b103      	cbz	r3, 80144da <_close_r+0x1a>
 80144d8:	6023      	str	r3, [r4, #0]
 80144da:	bd38      	pop	{r3, r4, r5, pc}
 80144dc:	20005090 	.word	0x20005090

080144e0 <quorem>:
 80144e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144e4:	6903      	ldr	r3, [r0, #16]
 80144e6:	690c      	ldr	r4, [r1, #16]
 80144e8:	42a3      	cmp	r3, r4
 80144ea:	4607      	mov	r7, r0
 80144ec:	f2c0 8081 	blt.w	80145f2 <quorem+0x112>
 80144f0:	3c01      	subs	r4, #1
 80144f2:	f101 0814 	add.w	r8, r1, #20
 80144f6:	f100 0514 	add.w	r5, r0, #20
 80144fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80144fe:	9301      	str	r3, [sp, #4]
 8014500:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014504:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014508:	3301      	adds	r3, #1
 801450a:	429a      	cmp	r2, r3
 801450c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014510:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014514:	fbb2 f6f3 	udiv	r6, r2, r3
 8014518:	d331      	bcc.n	801457e <quorem+0x9e>
 801451a:	f04f 0e00 	mov.w	lr, #0
 801451e:	4640      	mov	r0, r8
 8014520:	46ac      	mov	ip, r5
 8014522:	46f2      	mov	sl, lr
 8014524:	f850 2b04 	ldr.w	r2, [r0], #4
 8014528:	b293      	uxth	r3, r2
 801452a:	fb06 e303 	mla	r3, r6, r3, lr
 801452e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014532:	b29b      	uxth	r3, r3
 8014534:	ebaa 0303 	sub.w	r3, sl, r3
 8014538:	f8dc a000 	ldr.w	sl, [ip]
 801453c:	0c12      	lsrs	r2, r2, #16
 801453e:	fa13 f38a 	uxtah	r3, r3, sl
 8014542:	fb06 e202 	mla	r2, r6, r2, lr
 8014546:	9300      	str	r3, [sp, #0]
 8014548:	9b00      	ldr	r3, [sp, #0]
 801454a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801454e:	b292      	uxth	r2, r2
 8014550:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014554:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014558:	f8bd 3000 	ldrh.w	r3, [sp]
 801455c:	4581      	cmp	r9, r0
 801455e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014562:	f84c 3b04 	str.w	r3, [ip], #4
 8014566:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801456a:	d2db      	bcs.n	8014524 <quorem+0x44>
 801456c:	f855 300b 	ldr.w	r3, [r5, fp]
 8014570:	b92b      	cbnz	r3, 801457e <quorem+0x9e>
 8014572:	9b01      	ldr	r3, [sp, #4]
 8014574:	3b04      	subs	r3, #4
 8014576:	429d      	cmp	r5, r3
 8014578:	461a      	mov	r2, r3
 801457a:	d32e      	bcc.n	80145da <quorem+0xfa>
 801457c:	613c      	str	r4, [r7, #16]
 801457e:	4638      	mov	r0, r7
 8014580:	f001 f9fc 	bl	801597c <__mcmp>
 8014584:	2800      	cmp	r0, #0
 8014586:	db24      	blt.n	80145d2 <quorem+0xf2>
 8014588:	3601      	adds	r6, #1
 801458a:	4628      	mov	r0, r5
 801458c:	f04f 0c00 	mov.w	ip, #0
 8014590:	f858 2b04 	ldr.w	r2, [r8], #4
 8014594:	f8d0 e000 	ldr.w	lr, [r0]
 8014598:	b293      	uxth	r3, r2
 801459a:	ebac 0303 	sub.w	r3, ip, r3
 801459e:	0c12      	lsrs	r2, r2, #16
 80145a0:	fa13 f38e 	uxtah	r3, r3, lr
 80145a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80145a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80145ac:	b29b      	uxth	r3, r3
 80145ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80145b2:	45c1      	cmp	r9, r8
 80145b4:	f840 3b04 	str.w	r3, [r0], #4
 80145b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80145bc:	d2e8      	bcs.n	8014590 <quorem+0xb0>
 80145be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80145c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80145c6:	b922      	cbnz	r2, 80145d2 <quorem+0xf2>
 80145c8:	3b04      	subs	r3, #4
 80145ca:	429d      	cmp	r5, r3
 80145cc:	461a      	mov	r2, r3
 80145ce:	d30a      	bcc.n	80145e6 <quorem+0x106>
 80145d0:	613c      	str	r4, [r7, #16]
 80145d2:	4630      	mov	r0, r6
 80145d4:	b003      	add	sp, #12
 80145d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145da:	6812      	ldr	r2, [r2, #0]
 80145dc:	3b04      	subs	r3, #4
 80145de:	2a00      	cmp	r2, #0
 80145e0:	d1cc      	bne.n	801457c <quorem+0x9c>
 80145e2:	3c01      	subs	r4, #1
 80145e4:	e7c7      	b.n	8014576 <quorem+0x96>
 80145e6:	6812      	ldr	r2, [r2, #0]
 80145e8:	3b04      	subs	r3, #4
 80145ea:	2a00      	cmp	r2, #0
 80145ec:	d1f0      	bne.n	80145d0 <quorem+0xf0>
 80145ee:	3c01      	subs	r4, #1
 80145f0:	e7eb      	b.n	80145ca <quorem+0xea>
 80145f2:	2000      	movs	r0, #0
 80145f4:	e7ee      	b.n	80145d4 <quorem+0xf4>
	...

080145f8 <_dtoa_r>:
 80145f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145fc:	ed2d 8b04 	vpush	{d8-d9}
 8014600:	ec57 6b10 	vmov	r6, r7, d0
 8014604:	b093      	sub	sp, #76	; 0x4c
 8014606:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014608:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801460c:	9106      	str	r1, [sp, #24]
 801460e:	ee10 aa10 	vmov	sl, s0
 8014612:	4604      	mov	r4, r0
 8014614:	9209      	str	r2, [sp, #36]	; 0x24
 8014616:	930c      	str	r3, [sp, #48]	; 0x30
 8014618:	46bb      	mov	fp, r7
 801461a:	b975      	cbnz	r5, 801463a <_dtoa_r+0x42>
 801461c:	2010      	movs	r0, #16
 801461e:	f000 ff17 	bl	8015450 <malloc>
 8014622:	4602      	mov	r2, r0
 8014624:	6260      	str	r0, [r4, #36]	; 0x24
 8014626:	b920      	cbnz	r0, 8014632 <_dtoa_r+0x3a>
 8014628:	4ba7      	ldr	r3, [pc, #668]	; (80148c8 <_dtoa_r+0x2d0>)
 801462a:	21ea      	movs	r1, #234	; 0xea
 801462c:	48a7      	ldr	r0, [pc, #668]	; (80148cc <_dtoa_r+0x2d4>)
 801462e:	f7fe fc5d 	bl	8012eec <__assert_func>
 8014632:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014636:	6005      	str	r5, [r0, #0]
 8014638:	60c5      	str	r5, [r0, #12]
 801463a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801463c:	6819      	ldr	r1, [r3, #0]
 801463e:	b151      	cbz	r1, 8014656 <_dtoa_r+0x5e>
 8014640:	685a      	ldr	r2, [r3, #4]
 8014642:	604a      	str	r2, [r1, #4]
 8014644:	2301      	movs	r3, #1
 8014646:	4093      	lsls	r3, r2
 8014648:	608b      	str	r3, [r1, #8]
 801464a:	4620      	mov	r0, r4
 801464c:	f000 ff54 	bl	80154f8 <_Bfree>
 8014650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014652:	2200      	movs	r2, #0
 8014654:	601a      	str	r2, [r3, #0]
 8014656:	1e3b      	subs	r3, r7, #0
 8014658:	bfaa      	itet	ge
 801465a:	2300      	movge	r3, #0
 801465c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8014660:	f8c8 3000 	strge.w	r3, [r8]
 8014664:	4b9a      	ldr	r3, [pc, #616]	; (80148d0 <_dtoa_r+0x2d8>)
 8014666:	bfbc      	itt	lt
 8014668:	2201      	movlt	r2, #1
 801466a:	f8c8 2000 	strlt.w	r2, [r8]
 801466e:	ea33 030b 	bics.w	r3, r3, fp
 8014672:	d11b      	bne.n	80146ac <_dtoa_r+0xb4>
 8014674:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014676:	f242 730f 	movw	r3, #9999	; 0x270f
 801467a:	6013      	str	r3, [r2, #0]
 801467c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014680:	4333      	orrs	r3, r6
 8014682:	f000 8592 	beq.w	80151aa <_dtoa_r+0xbb2>
 8014686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014688:	b963      	cbnz	r3, 80146a4 <_dtoa_r+0xac>
 801468a:	4b92      	ldr	r3, [pc, #584]	; (80148d4 <_dtoa_r+0x2dc>)
 801468c:	e022      	b.n	80146d4 <_dtoa_r+0xdc>
 801468e:	4b92      	ldr	r3, [pc, #584]	; (80148d8 <_dtoa_r+0x2e0>)
 8014690:	9301      	str	r3, [sp, #4]
 8014692:	3308      	adds	r3, #8
 8014694:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014696:	6013      	str	r3, [r2, #0]
 8014698:	9801      	ldr	r0, [sp, #4]
 801469a:	b013      	add	sp, #76	; 0x4c
 801469c:	ecbd 8b04 	vpop	{d8-d9}
 80146a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146a4:	4b8b      	ldr	r3, [pc, #556]	; (80148d4 <_dtoa_r+0x2dc>)
 80146a6:	9301      	str	r3, [sp, #4]
 80146a8:	3303      	adds	r3, #3
 80146aa:	e7f3      	b.n	8014694 <_dtoa_r+0x9c>
 80146ac:	2200      	movs	r2, #0
 80146ae:	2300      	movs	r3, #0
 80146b0:	4650      	mov	r0, sl
 80146b2:	4659      	mov	r1, fp
 80146b4:	f7ec fa08 	bl	8000ac8 <__aeabi_dcmpeq>
 80146b8:	ec4b ab19 	vmov	d9, sl, fp
 80146bc:	4680      	mov	r8, r0
 80146be:	b158      	cbz	r0, 80146d8 <_dtoa_r+0xe0>
 80146c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80146c2:	2301      	movs	r3, #1
 80146c4:	6013      	str	r3, [r2, #0]
 80146c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	f000 856b 	beq.w	80151a4 <_dtoa_r+0xbac>
 80146ce:	4883      	ldr	r0, [pc, #524]	; (80148dc <_dtoa_r+0x2e4>)
 80146d0:	6018      	str	r0, [r3, #0]
 80146d2:	1e43      	subs	r3, r0, #1
 80146d4:	9301      	str	r3, [sp, #4]
 80146d6:	e7df      	b.n	8014698 <_dtoa_r+0xa0>
 80146d8:	ec4b ab10 	vmov	d0, sl, fp
 80146dc:	aa10      	add	r2, sp, #64	; 0x40
 80146de:	a911      	add	r1, sp, #68	; 0x44
 80146e0:	4620      	mov	r0, r4
 80146e2:	f001 f9f1 	bl	8015ac8 <__d2b>
 80146e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80146ea:	ee08 0a10 	vmov	s16, r0
 80146ee:	2d00      	cmp	r5, #0
 80146f0:	f000 8084 	beq.w	80147fc <_dtoa_r+0x204>
 80146f4:	ee19 3a90 	vmov	r3, s19
 80146f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80146fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014700:	4656      	mov	r6, sl
 8014702:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8014706:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801470a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801470e:	4b74      	ldr	r3, [pc, #464]	; (80148e0 <_dtoa_r+0x2e8>)
 8014710:	2200      	movs	r2, #0
 8014712:	4630      	mov	r0, r6
 8014714:	4639      	mov	r1, r7
 8014716:	f7eb fdb7 	bl	8000288 <__aeabi_dsub>
 801471a:	a365      	add	r3, pc, #404	; (adr r3, 80148b0 <_dtoa_r+0x2b8>)
 801471c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014720:	f7eb ff6a 	bl	80005f8 <__aeabi_dmul>
 8014724:	a364      	add	r3, pc, #400	; (adr r3, 80148b8 <_dtoa_r+0x2c0>)
 8014726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801472a:	f7eb fdaf 	bl	800028c <__adddf3>
 801472e:	4606      	mov	r6, r0
 8014730:	4628      	mov	r0, r5
 8014732:	460f      	mov	r7, r1
 8014734:	f7eb fef6 	bl	8000524 <__aeabi_i2d>
 8014738:	a361      	add	r3, pc, #388	; (adr r3, 80148c0 <_dtoa_r+0x2c8>)
 801473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801473e:	f7eb ff5b 	bl	80005f8 <__aeabi_dmul>
 8014742:	4602      	mov	r2, r0
 8014744:	460b      	mov	r3, r1
 8014746:	4630      	mov	r0, r6
 8014748:	4639      	mov	r1, r7
 801474a:	f7eb fd9f 	bl	800028c <__adddf3>
 801474e:	4606      	mov	r6, r0
 8014750:	460f      	mov	r7, r1
 8014752:	f7ec fa01 	bl	8000b58 <__aeabi_d2iz>
 8014756:	2200      	movs	r2, #0
 8014758:	9000      	str	r0, [sp, #0]
 801475a:	2300      	movs	r3, #0
 801475c:	4630      	mov	r0, r6
 801475e:	4639      	mov	r1, r7
 8014760:	f7ec f9bc 	bl	8000adc <__aeabi_dcmplt>
 8014764:	b150      	cbz	r0, 801477c <_dtoa_r+0x184>
 8014766:	9800      	ldr	r0, [sp, #0]
 8014768:	f7eb fedc 	bl	8000524 <__aeabi_i2d>
 801476c:	4632      	mov	r2, r6
 801476e:	463b      	mov	r3, r7
 8014770:	f7ec f9aa 	bl	8000ac8 <__aeabi_dcmpeq>
 8014774:	b910      	cbnz	r0, 801477c <_dtoa_r+0x184>
 8014776:	9b00      	ldr	r3, [sp, #0]
 8014778:	3b01      	subs	r3, #1
 801477a:	9300      	str	r3, [sp, #0]
 801477c:	9b00      	ldr	r3, [sp, #0]
 801477e:	2b16      	cmp	r3, #22
 8014780:	d85a      	bhi.n	8014838 <_dtoa_r+0x240>
 8014782:	9a00      	ldr	r2, [sp, #0]
 8014784:	4b57      	ldr	r3, [pc, #348]	; (80148e4 <_dtoa_r+0x2ec>)
 8014786:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801478e:	ec51 0b19 	vmov	r0, r1, d9
 8014792:	f7ec f9a3 	bl	8000adc <__aeabi_dcmplt>
 8014796:	2800      	cmp	r0, #0
 8014798:	d050      	beq.n	801483c <_dtoa_r+0x244>
 801479a:	9b00      	ldr	r3, [sp, #0]
 801479c:	3b01      	subs	r3, #1
 801479e:	9300      	str	r3, [sp, #0]
 80147a0:	2300      	movs	r3, #0
 80147a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80147a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80147a6:	1b5d      	subs	r5, r3, r5
 80147a8:	1e6b      	subs	r3, r5, #1
 80147aa:	9305      	str	r3, [sp, #20]
 80147ac:	bf45      	ittet	mi
 80147ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80147b2:	9304      	strmi	r3, [sp, #16]
 80147b4:	2300      	movpl	r3, #0
 80147b6:	2300      	movmi	r3, #0
 80147b8:	bf4c      	ite	mi
 80147ba:	9305      	strmi	r3, [sp, #20]
 80147bc:	9304      	strpl	r3, [sp, #16]
 80147be:	9b00      	ldr	r3, [sp, #0]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	db3d      	blt.n	8014840 <_dtoa_r+0x248>
 80147c4:	9b05      	ldr	r3, [sp, #20]
 80147c6:	9a00      	ldr	r2, [sp, #0]
 80147c8:	920a      	str	r2, [sp, #40]	; 0x28
 80147ca:	4413      	add	r3, r2
 80147cc:	9305      	str	r3, [sp, #20]
 80147ce:	2300      	movs	r3, #0
 80147d0:	9307      	str	r3, [sp, #28]
 80147d2:	9b06      	ldr	r3, [sp, #24]
 80147d4:	2b09      	cmp	r3, #9
 80147d6:	f200 8089 	bhi.w	80148ec <_dtoa_r+0x2f4>
 80147da:	2b05      	cmp	r3, #5
 80147dc:	bfc4      	itt	gt
 80147de:	3b04      	subgt	r3, #4
 80147e0:	9306      	strgt	r3, [sp, #24]
 80147e2:	9b06      	ldr	r3, [sp, #24]
 80147e4:	f1a3 0302 	sub.w	r3, r3, #2
 80147e8:	bfcc      	ite	gt
 80147ea:	2500      	movgt	r5, #0
 80147ec:	2501      	movle	r5, #1
 80147ee:	2b03      	cmp	r3, #3
 80147f0:	f200 8087 	bhi.w	8014902 <_dtoa_r+0x30a>
 80147f4:	e8df f003 	tbb	[pc, r3]
 80147f8:	59383a2d 	.word	0x59383a2d
 80147fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014800:	441d      	add	r5, r3
 8014802:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014806:	2b20      	cmp	r3, #32
 8014808:	bfc1      	itttt	gt
 801480a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801480e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014812:	fa0b f303 	lslgt.w	r3, fp, r3
 8014816:	fa26 f000 	lsrgt.w	r0, r6, r0
 801481a:	bfda      	itte	le
 801481c:	f1c3 0320 	rsble	r3, r3, #32
 8014820:	fa06 f003 	lslle.w	r0, r6, r3
 8014824:	4318      	orrgt	r0, r3
 8014826:	f7eb fe6d 	bl	8000504 <__aeabi_ui2d>
 801482a:	2301      	movs	r3, #1
 801482c:	4606      	mov	r6, r0
 801482e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014832:	3d01      	subs	r5, #1
 8014834:	930e      	str	r3, [sp, #56]	; 0x38
 8014836:	e76a      	b.n	801470e <_dtoa_r+0x116>
 8014838:	2301      	movs	r3, #1
 801483a:	e7b2      	b.n	80147a2 <_dtoa_r+0x1aa>
 801483c:	900b      	str	r0, [sp, #44]	; 0x2c
 801483e:	e7b1      	b.n	80147a4 <_dtoa_r+0x1ac>
 8014840:	9b04      	ldr	r3, [sp, #16]
 8014842:	9a00      	ldr	r2, [sp, #0]
 8014844:	1a9b      	subs	r3, r3, r2
 8014846:	9304      	str	r3, [sp, #16]
 8014848:	4253      	negs	r3, r2
 801484a:	9307      	str	r3, [sp, #28]
 801484c:	2300      	movs	r3, #0
 801484e:	930a      	str	r3, [sp, #40]	; 0x28
 8014850:	e7bf      	b.n	80147d2 <_dtoa_r+0x1da>
 8014852:	2300      	movs	r3, #0
 8014854:	9308      	str	r3, [sp, #32]
 8014856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014858:	2b00      	cmp	r3, #0
 801485a:	dc55      	bgt.n	8014908 <_dtoa_r+0x310>
 801485c:	2301      	movs	r3, #1
 801485e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014862:	461a      	mov	r2, r3
 8014864:	9209      	str	r2, [sp, #36]	; 0x24
 8014866:	e00c      	b.n	8014882 <_dtoa_r+0x28a>
 8014868:	2301      	movs	r3, #1
 801486a:	e7f3      	b.n	8014854 <_dtoa_r+0x25c>
 801486c:	2300      	movs	r3, #0
 801486e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014870:	9308      	str	r3, [sp, #32]
 8014872:	9b00      	ldr	r3, [sp, #0]
 8014874:	4413      	add	r3, r2
 8014876:	9302      	str	r3, [sp, #8]
 8014878:	3301      	adds	r3, #1
 801487a:	2b01      	cmp	r3, #1
 801487c:	9303      	str	r3, [sp, #12]
 801487e:	bfb8      	it	lt
 8014880:	2301      	movlt	r3, #1
 8014882:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014884:	2200      	movs	r2, #0
 8014886:	6042      	str	r2, [r0, #4]
 8014888:	2204      	movs	r2, #4
 801488a:	f102 0614 	add.w	r6, r2, #20
 801488e:	429e      	cmp	r6, r3
 8014890:	6841      	ldr	r1, [r0, #4]
 8014892:	d93d      	bls.n	8014910 <_dtoa_r+0x318>
 8014894:	4620      	mov	r0, r4
 8014896:	f000 fdef 	bl	8015478 <_Balloc>
 801489a:	9001      	str	r0, [sp, #4]
 801489c:	2800      	cmp	r0, #0
 801489e:	d13b      	bne.n	8014918 <_dtoa_r+0x320>
 80148a0:	4b11      	ldr	r3, [pc, #68]	; (80148e8 <_dtoa_r+0x2f0>)
 80148a2:	4602      	mov	r2, r0
 80148a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80148a8:	e6c0      	b.n	801462c <_dtoa_r+0x34>
 80148aa:	2301      	movs	r3, #1
 80148ac:	e7df      	b.n	801486e <_dtoa_r+0x276>
 80148ae:	bf00      	nop
 80148b0:	636f4361 	.word	0x636f4361
 80148b4:	3fd287a7 	.word	0x3fd287a7
 80148b8:	8b60c8b3 	.word	0x8b60c8b3
 80148bc:	3fc68a28 	.word	0x3fc68a28
 80148c0:	509f79fb 	.word	0x509f79fb
 80148c4:	3fd34413 	.word	0x3fd34413
 80148c8:	08017ee5 	.word	0x08017ee5
 80148cc:	08017f66 	.word	0x08017f66
 80148d0:	7ff00000 	.word	0x7ff00000
 80148d4:	08017f62 	.word	0x08017f62
 80148d8:	08017f59 	.word	0x08017f59
 80148dc:	08017ec2 	.word	0x08017ec2
 80148e0:	3ff80000 	.word	0x3ff80000
 80148e4:	08018058 	.word	0x08018058
 80148e8:	08017fc1 	.word	0x08017fc1
 80148ec:	2501      	movs	r5, #1
 80148ee:	2300      	movs	r3, #0
 80148f0:	9306      	str	r3, [sp, #24]
 80148f2:	9508      	str	r5, [sp, #32]
 80148f4:	f04f 33ff 	mov.w	r3, #4294967295
 80148f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80148fc:	2200      	movs	r2, #0
 80148fe:	2312      	movs	r3, #18
 8014900:	e7b0      	b.n	8014864 <_dtoa_r+0x26c>
 8014902:	2301      	movs	r3, #1
 8014904:	9308      	str	r3, [sp, #32]
 8014906:	e7f5      	b.n	80148f4 <_dtoa_r+0x2fc>
 8014908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801490a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801490e:	e7b8      	b.n	8014882 <_dtoa_r+0x28a>
 8014910:	3101      	adds	r1, #1
 8014912:	6041      	str	r1, [r0, #4]
 8014914:	0052      	lsls	r2, r2, #1
 8014916:	e7b8      	b.n	801488a <_dtoa_r+0x292>
 8014918:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801491a:	9a01      	ldr	r2, [sp, #4]
 801491c:	601a      	str	r2, [r3, #0]
 801491e:	9b03      	ldr	r3, [sp, #12]
 8014920:	2b0e      	cmp	r3, #14
 8014922:	f200 809d 	bhi.w	8014a60 <_dtoa_r+0x468>
 8014926:	2d00      	cmp	r5, #0
 8014928:	f000 809a 	beq.w	8014a60 <_dtoa_r+0x468>
 801492c:	9b00      	ldr	r3, [sp, #0]
 801492e:	2b00      	cmp	r3, #0
 8014930:	dd32      	ble.n	8014998 <_dtoa_r+0x3a0>
 8014932:	4ab7      	ldr	r2, [pc, #732]	; (8014c10 <_dtoa_r+0x618>)
 8014934:	f003 030f 	and.w	r3, r3, #15
 8014938:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801493c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014940:	9b00      	ldr	r3, [sp, #0]
 8014942:	05d8      	lsls	r0, r3, #23
 8014944:	ea4f 1723 	mov.w	r7, r3, asr #4
 8014948:	d516      	bpl.n	8014978 <_dtoa_r+0x380>
 801494a:	4bb2      	ldr	r3, [pc, #712]	; (8014c14 <_dtoa_r+0x61c>)
 801494c:	ec51 0b19 	vmov	r0, r1, d9
 8014950:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014954:	f7eb ff7a 	bl	800084c <__aeabi_ddiv>
 8014958:	f007 070f 	and.w	r7, r7, #15
 801495c:	4682      	mov	sl, r0
 801495e:	468b      	mov	fp, r1
 8014960:	2503      	movs	r5, #3
 8014962:	4eac      	ldr	r6, [pc, #688]	; (8014c14 <_dtoa_r+0x61c>)
 8014964:	b957      	cbnz	r7, 801497c <_dtoa_r+0x384>
 8014966:	4642      	mov	r2, r8
 8014968:	464b      	mov	r3, r9
 801496a:	4650      	mov	r0, sl
 801496c:	4659      	mov	r1, fp
 801496e:	f7eb ff6d 	bl	800084c <__aeabi_ddiv>
 8014972:	4682      	mov	sl, r0
 8014974:	468b      	mov	fp, r1
 8014976:	e028      	b.n	80149ca <_dtoa_r+0x3d2>
 8014978:	2502      	movs	r5, #2
 801497a:	e7f2      	b.n	8014962 <_dtoa_r+0x36a>
 801497c:	07f9      	lsls	r1, r7, #31
 801497e:	d508      	bpl.n	8014992 <_dtoa_r+0x39a>
 8014980:	4640      	mov	r0, r8
 8014982:	4649      	mov	r1, r9
 8014984:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014988:	f7eb fe36 	bl	80005f8 <__aeabi_dmul>
 801498c:	3501      	adds	r5, #1
 801498e:	4680      	mov	r8, r0
 8014990:	4689      	mov	r9, r1
 8014992:	107f      	asrs	r7, r7, #1
 8014994:	3608      	adds	r6, #8
 8014996:	e7e5      	b.n	8014964 <_dtoa_r+0x36c>
 8014998:	f000 809b 	beq.w	8014ad2 <_dtoa_r+0x4da>
 801499c:	9b00      	ldr	r3, [sp, #0]
 801499e:	4f9d      	ldr	r7, [pc, #628]	; (8014c14 <_dtoa_r+0x61c>)
 80149a0:	425e      	negs	r6, r3
 80149a2:	4b9b      	ldr	r3, [pc, #620]	; (8014c10 <_dtoa_r+0x618>)
 80149a4:	f006 020f 	and.w	r2, r6, #15
 80149a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80149ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149b0:	ec51 0b19 	vmov	r0, r1, d9
 80149b4:	f7eb fe20 	bl	80005f8 <__aeabi_dmul>
 80149b8:	1136      	asrs	r6, r6, #4
 80149ba:	4682      	mov	sl, r0
 80149bc:	468b      	mov	fp, r1
 80149be:	2300      	movs	r3, #0
 80149c0:	2502      	movs	r5, #2
 80149c2:	2e00      	cmp	r6, #0
 80149c4:	d17a      	bne.n	8014abc <_dtoa_r+0x4c4>
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d1d3      	bne.n	8014972 <_dtoa_r+0x37a>
 80149ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	f000 8082 	beq.w	8014ad6 <_dtoa_r+0x4de>
 80149d2:	4b91      	ldr	r3, [pc, #580]	; (8014c18 <_dtoa_r+0x620>)
 80149d4:	2200      	movs	r2, #0
 80149d6:	4650      	mov	r0, sl
 80149d8:	4659      	mov	r1, fp
 80149da:	f7ec f87f 	bl	8000adc <__aeabi_dcmplt>
 80149de:	2800      	cmp	r0, #0
 80149e0:	d079      	beq.n	8014ad6 <_dtoa_r+0x4de>
 80149e2:	9b03      	ldr	r3, [sp, #12]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d076      	beq.n	8014ad6 <_dtoa_r+0x4de>
 80149e8:	9b02      	ldr	r3, [sp, #8]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	dd36      	ble.n	8014a5c <_dtoa_r+0x464>
 80149ee:	9b00      	ldr	r3, [sp, #0]
 80149f0:	4650      	mov	r0, sl
 80149f2:	4659      	mov	r1, fp
 80149f4:	1e5f      	subs	r7, r3, #1
 80149f6:	2200      	movs	r2, #0
 80149f8:	4b88      	ldr	r3, [pc, #544]	; (8014c1c <_dtoa_r+0x624>)
 80149fa:	f7eb fdfd 	bl	80005f8 <__aeabi_dmul>
 80149fe:	9e02      	ldr	r6, [sp, #8]
 8014a00:	4682      	mov	sl, r0
 8014a02:	468b      	mov	fp, r1
 8014a04:	3501      	adds	r5, #1
 8014a06:	4628      	mov	r0, r5
 8014a08:	f7eb fd8c 	bl	8000524 <__aeabi_i2d>
 8014a0c:	4652      	mov	r2, sl
 8014a0e:	465b      	mov	r3, fp
 8014a10:	f7eb fdf2 	bl	80005f8 <__aeabi_dmul>
 8014a14:	4b82      	ldr	r3, [pc, #520]	; (8014c20 <_dtoa_r+0x628>)
 8014a16:	2200      	movs	r2, #0
 8014a18:	f7eb fc38 	bl	800028c <__adddf3>
 8014a1c:	46d0      	mov	r8, sl
 8014a1e:	46d9      	mov	r9, fp
 8014a20:	4682      	mov	sl, r0
 8014a22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8014a26:	2e00      	cmp	r6, #0
 8014a28:	d158      	bne.n	8014adc <_dtoa_r+0x4e4>
 8014a2a:	4b7e      	ldr	r3, [pc, #504]	; (8014c24 <_dtoa_r+0x62c>)
 8014a2c:	2200      	movs	r2, #0
 8014a2e:	4640      	mov	r0, r8
 8014a30:	4649      	mov	r1, r9
 8014a32:	f7eb fc29 	bl	8000288 <__aeabi_dsub>
 8014a36:	4652      	mov	r2, sl
 8014a38:	465b      	mov	r3, fp
 8014a3a:	4680      	mov	r8, r0
 8014a3c:	4689      	mov	r9, r1
 8014a3e:	f7ec f86b 	bl	8000b18 <__aeabi_dcmpgt>
 8014a42:	2800      	cmp	r0, #0
 8014a44:	f040 8295 	bne.w	8014f72 <_dtoa_r+0x97a>
 8014a48:	4652      	mov	r2, sl
 8014a4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014a4e:	4640      	mov	r0, r8
 8014a50:	4649      	mov	r1, r9
 8014a52:	f7ec f843 	bl	8000adc <__aeabi_dcmplt>
 8014a56:	2800      	cmp	r0, #0
 8014a58:	f040 8289 	bne.w	8014f6e <_dtoa_r+0x976>
 8014a5c:	ec5b ab19 	vmov	sl, fp, d9
 8014a60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	f2c0 8148 	blt.w	8014cf8 <_dtoa_r+0x700>
 8014a68:	9a00      	ldr	r2, [sp, #0]
 8014a6a:	2a0e      	cmp	r2, #14
 8014a6c:	f300 8144 	bgt.w	8014cf8 <_dtoa_r+0x700>
 8014a70:	4b67      	ldr	r3, [pc, #412]	; (8014c10 <_dtoa_r+0x618>)
 8014a72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014a76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	f280 80d5 	bge.w	8014c2c <_dtoa_r+0x634>
 8014a82:	9b03      	ldr	r3, [sp, #12]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	f300 80d1 	bgt.w	8014c2c <_dtoa_r+0x634>
 8014a8a:	f040 826f 	bne.w	8014f6c <_dtoa_r+0x974>
 8014a8e:	4b65      	ldr	r3, [pc, #404]	; (8014c24 <_dtoa_r+0x62c>)
 8014a90:	2200      	movs	r2, #0
 8014a92:	4640      	mov	r0, r8
 8014a94:	4649      	mov	r1, r9
 8014a96:	f7eb fdaf 	bl	80005f8 <__aeabi_dmul>
 8014a9a:	4652      	mov	r2, sl
 8014a9c:	465b      	mov	r3, fp
 8014a9e:	f7ec f831 	bl	8000b04 <__aeabi_dcmpge>
 8014aa2:	9e03      	ldr	r6, [sp, #12]
 8014aa4:	4637      	mov	r7, r6
 8014aa6:	2800      	cmp	r0, #0
 8014aa8:	f040 8245 	bne.w	8014f36 <_dtoa_r+0x93e>
 8014aac:	9d01      	ldr	r5, [sp, #4]
 8014aae:	2331      	movs	r3, #49	; 0x31
 8014ab0:	f805 3b01 	strb.w	r3, [r5], #1
 8014ab4:	9b00      	ldr	r3, [sp, #0]
 8014ab6:	3301      	adds	r3, #1
 8014ab8:	9300      	str	r3, [sp, #0]
 8014aba:	e240      	b.n	8014f3e <_dtoa_r+0x946>
 8014abc:	07f2      	lsls	r2, r6, #31
 8014abe:	d505      	bpl.n	8014acc <_dtoa_r+0x4d4>
 8014ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014ac4:	f7eb fd98 	bl	80005f8 <__aeabi_dmul>
 8014ac8:	3501      	adds	r5, #1
 8014aca:	2301      	movs	r3, #1
 8014acc:	1076      	asrs	r6, r6, #1
 8014ace:	3708      	adds	r7, #8
 8014ad0:	e777      	b.n	80149c2 <_dtoa_r+0x3ca>
 8014ad2:	2502      	movs	r5, #2
 8014ad4:	e779      	b.n	80149ca <_dtoa_r+0x3d2>
 8014ad6:	9f00      	ldr	r7, [sp, #0]
 8014ad8:	9e03      	ldr	r6, [sp, #12]
 8014ada:	e794      	b.n	8014a06 <_dtoa_r+0x40e>
 8014adc:	9901      	ldr	r1, [sp, #4]
 8014ade:	4b4c      	ldr	r3, [pc, #304]	; (8014c10 <_dtoa_r+0x618>)
 8014ae0:	4431      	add	r1, r6
 8014ae2:	910d      	str	r1, [sp, #52]	; 0x34
 8014ae4:	9908      	ldr	r1, [sp, #32]
 8014ae6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014aea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014aee:	2900      	cmp	r1, #0
 8014af0:	d043      	beq.n	8014b7a <_dtoa_r+0x582>
 8014af2:	494d      	ldr	r1, [pc, #308]	; (8014c28 <_dtoa_r+0x630>)
 8014af4:	2000      	movs	r0, #0
 8014af6:	f7eb fea9 	bl	800084c <__aeabi_ddiv>
 8014afa:	4652      	mov	r2, sl
 8014afc:	465b      	mov	r3, fp
 8014afe:	f7eb fbc3 	bl	8000288 <__aeabi_dsub>
 8014b02:	9d01      	ldr	r5, [sp, #4]
 8014b04:	4682      	mov	sl, r0
 8014b06:	468b      	mov	fp, r1
 8014b08:	4649      	mov	r1, r9
 8014b0a:	4640      	mov	r0, r8
 8014b0c:	f7ec f824 	bl	8000b58 <__aeabi_d2iz>
 8014b10:	4606      	mov	r6, r0
 8014b12:	f7eb fd07 	bl	8000524 <__aeabi_i2d>
 8014b16:	4602      	mov	r2, r0
 8014b18:	460b      	mov	r3, r1
 8014b1a:	4640      	mov	r0, r8
 8014b1c:	4649      	mov	r1, r9
 8014b1e:	f7eb fbb3 	bl	8000288 <__aeabi_dsub>
 8014b22:	3630      	adds	r6, #48	; 0x30
 8014b24:	f805 6b01 	strb.w	r6, [r5], #1
 8014b28:	4652      	mov	r2, sl
 8014b2a:	465b      	mov	r3, fp
 8014b2c:	4680      	mov	r8, r0
 8014b2e:	4689      	mov	r9, r1
 8014b30:	f7eb ffd4 	bl	8000adc <__aeabi_dcmplt>
 8014b34:	2800      	cmp	r0, #0
 8014b36:	d163      	bne.n	8014c00 <_dtoa_r+0x608>
 8014b38:	4642      	mov	r2, r8
 8014b3a:	464b      	mov	r3, r9
 8014b3c:	4936      	ldr	r1, [pc, #216]	; (8014c18 <_dtoa_r+0x620>)
 8014b3e:	2000      	movs	r0, #0
 8014b40:	f7eb fba2 	bl	8000288 <__aeabi_dsub>
 8014b44:	4652      	mov	r2, sl
 8014b46:	465b      	mov	r3, fp
 8014b48:	f7eb ffc8 	bl	8000adc <__aeabi_dcmplt>
 8014b4c:	2800      	cmp	r0, #0
 8014b4e:	f040 80b5 	bne.w	8014cbc <_dtoa_r+0x6c4>
 8014b52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b54:	429d      	cmp	r5, r3
 8014b56:	d081      	beq.n	8014a5c <_dtoa_r+0x464>
 8014b58:	4b30      	ldr	r3, [pc, #192]	; (8014c1c <_dtoa_r+0x624>)
 8014b5a:	2200      	movs	r2, #0
 8014b5c:	4650      	mov	r0, sl
 8014b5e:	4659      	mov	r1, fp
 8014b60:	f7eb fd4a 	bl	80005f8 <__aeabi_dmul>
 8014b64:	4b2d      	ldr	r3, [pc, #180]	; (8014c1c <_dtoa_r+0x624>)
 8014b66:	4682      	mov	sl, r0
 8014b68:	468b      	mov	fp, r1
 8014b6a:	4640      	mov	r0, r8
 8014b6c:	4649      	mov	r1, r9
 8014b6e:	2200      	movs	r2, #0
 8014b70:	f7eb fd42 	bl	80005f8 <__aeabi_dmul>
 8014b74:	4680      	mov	r8, r0
 8014b76:	4689      	mov	r9, r1
 8014b78:	e7c6      	b.n	8014b08 <_dtoa_r+0x510>
 8014b7a:	4650      	mov	r0, sl
 8014b7c:	4659      	mov	r1, fp
 8014b7e:	f7eb fd3b 	bl	80005f8 <__aeabi_dmul>
 8014b82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b84:	9d01      	ldr	r5, [sp, #4]
 8014b86:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b88:	4682      	mov	sl, r0
 8014b8a:	468b      	mov	fp, r1
 8014b8c:	4649      	mov	r1, r9
 8014b8e:	4640      	mov	r0, r8
 8014b90:	f7eb ffe2 	bl	8000b58 <__aeabi_d2iz>
 8014b94:	4606      	mov	r6, r0
 8014b96:	f7eb fcc5 	bl	8000524 <__aeabi_i2d>
 8014b9a:	3630      	adds	r6, #48	; 0x30
 8014b9c:	4602      	mov	r2, r0
 8014b9e:	460b      	mov	r3, r1
 8014ba0:	4640      	mov	r0, r8
 8014ba2:	4649      	mov	r1, r9
 8014ba4:	f7eb fb70 	bl	8000288 <__aeabi_dsub>
 8014ba8:	f805 6b01 	strb.w	r6, [r5], #1
 8014bac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014bae:	429d      	cmp	r5, r3
 8014bb0:	4680      	mov	r8, r0
 8014bb2:	4689      	mov	r9, r1
 8014bb4:	f04f 0200 	mov.w	r2, #0
 8014bb8:	d124      	bne.n	8014c04 <_dtoa_r+0x60c>
 8014bba:	4b1b      	ldr	r3, [pc, #108]	; (8014c28 <_dtoa_r+0x630>)
 8014bbc:	4650      	mov	r0, sl
 8014bbe:	4659      	mov	r1, fp
 8014bc0:	f7eb fb64 	bl	800028c <__adddf3>
 8014bc4:	4602      	mov	r2, r0
 8014bc6:	460b      	mov	r3, r1
 8014bc8:	4640      	mov	r0, r8
 8014bca:	4649      	mov	r1, r9
 8014bcc:	f7eb ffa4 	bl	8000b18 <__aeabi_dcmpgt>
 8014bd0:	2800      	cmp	r0, #0
 8014bd2:	d173      	bne.n	8014cbc <_dtoa_r+0x6c4>
 8014bd4:	4652      	mov	r2, sl
 8014bd6:	465b      	mov	r3, fp
 8014bd8:	4913      	ldr	r1, [pc, #76]	; (8014c28 <_dtoa_r+0x630>)
 8014bda:	2000      	movs	r0, #0
 8014bdc:	f7eb fb54 	bl	8000288 <__aeabi_dsub>
 8014be0:	4602      	mov	r2, r0
 8014be2:	460b      	mov	r3, r1
 8014be4:	4640      	mov	r0, r8
 8014be6:	4649      	mov	r1, r9
 8014be8:	f7eb ff78 	bl	8000adc <__aeabi_dcmplt>
 8014bec:	2800      	cmp	r0, #0
 8014bee:	f43f af35 	beq.w	8014a5c <_dtoa_r+0x464>
 8014bf2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014bf4:	1e6b      	subs	r3, r5, #1
 8014bf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8014bf8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014bfc:	2b30      	cmp	r3, #48	; 0x30
 8014bfe:	d0f8      	beq.n	8014bf2 <_dtoa_r+0x5fa>
 8014c00:	9700      	str	r7, [sp, #0]
 8014c02:	e049      	b.n	8014c98 <_dtoa_r+0x6a0>
 8014c04:	4b05      	ldr	r3, [pc, #20]	; (8014c1c <_dtoa_r+0x624>)
 8014c06:	f7eb fcf7 	bl	80005f8 <__aeabi_dmul>
 8014c0a:	4680      	mov	r8, r0
 8014c0c:	4689      	mov	r9, r1
 8014c0e:	e7bd      	b.n	8014b8c <_dtoa_r+0x594>
 8014c10:	08018058 	.word	0x08018058
 8014c14:	08018030 	.word	0x08018030
 8014c18:	3ff00000 	.word	0x3ff00000
 8014c1c:	40240000 	.word	0x40240000
 8014c20:	401c0000 	.word	0x401c0000
 8014c24:	40140000 	.word	0x40140000
 8014c28:	3fe00000 	.word	0x3fe00000
 8014c2c:	9d01      	ldr	r5, [sp, #4]
 8014c2e:	4656      	mov	r6, sl
 8014c30:	465f      	mov	r7, fp
 8014c32:	4642      	mov	r2, r8
 8014c34:	464b      	mov	r3, r9
 8014c36:	4630      	mov	r0, r6
 8014c38:	4639      	mov	r1, r7
 8014c3a:	f7eb fe07 	bl	800084c <__aeabi_ddiv>
 8014c3e:	f7eb ff8b 	bl	8000b58 <__aeabi_d2iz>
 8014c42:	4682      	mov	sl, r0
 8014c44:	f7eb fc6e 	bl	8000524 <__aeabi_i2d>
 8014c48:	4642      	mov	r2, r8
 8014c4a:	464b      	mov	r3, r9
 8014c4c:	f7eb fcd4 	bl	80005f8 <__aeabi_dmul>
 8014c50:	4602      	mov	r2, r0
 8014c52:	460b      	mov	r3, r1
 8014c54:	4630      	mov	r0, r6
 8014c56:	4639      	mov	r1, r7
 8014c58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8014c5c:	f7eb fb14 	bl	8000288 <__aeabi_dsub>
 8014c60:	f805 6b01 	strb.w	r6, [r5], #1
 8014c64:	9e01      	ldr	r6, [sp, #4]
 8014c66:	9f03      	ldr	r7, [sp, #12]
 8014c68:	1bae      	subs	r6, r5, r6
 8014c6a:	42b7      	cmp	r7, r6
 8014c6c:	4602      	mov	r2, r0
 8014c6e:	460b      	mov	r3, r1
 8014c70:	d135      	bne.n	8014cde <_dtoa_r+0x6e6>
 8014c72:	f7eb fb0b 	bl	800028c <__adddf3>
 8014c76:	4642      	mov	r2, r8
 8014c78:	464b      	mov	r3, r9
 8014c7a:	4606      	mov	r6, r0
 8014c7c:	460f      	mov	r7, r1
 8014c7e:	f7eb ff4b 	bl	8000b18 <__aeabi_dcmpgt>
 8014c82:	b9d0      	cbnz	r0, 8014cba <_dtoa_r+0x6c2>
 8014c84:	4642      	mov	r2, r8
 8014c86:	464b      	mov	r3, r9
 8014c88:	4630      	mov	r0, r6
 8014c8a:	4639      	mov	r1, r7
 8014c8c:	f7eb ff1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8014c90:	b110      	cbz	r0, 8014c98 <_dtoa_r+0x6a0>
 8014c92:	f01a 0f01 	tst.w	sl, #1
 8014c96:	d110      	bne.n	8014cba <_dtoa_r+0x6c2>
 8014c98:	4620      	mov	r0, r4
 8014c9a:	ee18 1a10 	vmov	r1, s16
 8014c9e:	f000 fc2b 	bl	80154f8 <_Bfree>
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	9800      	ldr	r0, [sp, #0]
 8014ca6:	702b      	strb	r3, [r5, #0]
 8014ca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014caa:	3001      	adds	r0, #1
 8014cac:	6018      	str	r0, [r3, #0]
 8014cae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	f43f acf1 	beq.w	8014698 <_dtoa_r+0xa0>
 8014cb6:	601d      	str	r5, [r3, #0]
 8014cb8:	e4ee      	b.n	8014698 <_dtoa_r+0xa0>
 8014cba:	9f00      	ldr	r7, [sp, #0]
 8014cbc:	462b      	mov	r3, r5
 8014cbe:	461d      	mov	r5, r3
 8014cc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014cc4:	2a39      	cmp	r2, #57	; 0x39
 8014cc6:	d106      	bne.n	8014cd6 <_dtoa_r+0x6de>
 8014cc8:	9a01      	ldr	r2, [sp, #4]
 8014cca:	429a      	cmp	r2, r3
 8014ccc:	d1f7      	bne.n	8014cbe <_dtoa_r+0x6c6>
 8014cce:	9901      	ldr	r1, [sp, #4]
 8014cd0:	2230      	movs	r2, #48	; 0x30
 8014cd2:	3701      	adds	r7, #1
 8014cd4:	700a      	strb	r2, [r1, #0]
 8014cd6:	781a      	ldrb	r2, [r3, #0]
 8014cd8:	3201      	adds	r2, #1
 8014cda:	701a      	strb	r2, [r3, #0]
 8014cdc:	e790      	b.n	8014c00 <_dtoa_r+0x608>
 8014cde:	4ba6      	ldr	r3, [pc, #664]	; (8014f78 <_dtoa_r+0x980>)
 8014ce0:	2200      	movs	r2, #0
 8014ce2:	f7eb fc89 	bl	80005f8 <__aeabi_dmul>
 8014ce6:	2200      	movs	r2, #0
 8014ce8:	2300      	movs	r3, #0
 8014cea:	4606      	mov	r6, r0
 8014cec:	460f      	mov	r7, r1
 8014cee:	f7eb feeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8014cf2:	2800      	cmp	r0, #0
 8014cf4:	d09d      	beq.n	8014c32 <_dtoa_r+0x63a>
 8014cf6:	e7cf      	b.n	8014c98 <_dtoa_r+0x6a0>
 8014cf8:	9a08      	ldr	r2, [sp, #32]
 8014cfa:	2a00      	cmp	r2, #0
 8014cfc:	f000 80d7 	beq.w	8014eae <_dtoa_r+0x8b6>
 8014d00:	9a06      	ldr	r2, [sp, #24]
 8014d02:	2a01      	cmp	r2, #1
 8014d04:	f300 80ba 	bgt.w	8014e7c <_dtoa_r+0x884>
 8014d08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014d0a:	2a00      	cmp	r2, #0
 8014d0c:	f000 80b2 	beq.w	8014e74 <_dtoa_r+0x87c>
 8014d10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014d14:	9e07      	ldr	r6, [sp, #28]
 8014d16:	9d04      	ldr	r5, [sp, #16]
 8014d18:	9a04      	ldr	r2, [sp, #16]
 8014d1a:	441a      	add	r2, r3
 8014d1c:	9204      	str	r2, [sp, #16]
 8014d1e:	9a05      	ldr	r2, [sp, #20]
 8014d20:	2101      	movs	r1, #1
 8014d22:	441a      	add	r2, r3
 8014d24:	4620      	mov	r0, r4
 8014d26:	9205      	str	r2, [sp, #20]
 8014d28:	f000 fc9e 	bl	8015668 <__i2b>
 8014d2c:	4607      	mov	r7, r0
 8014d2e:	2d00      	cmp	r5, #0
 8014d30:	dd0c      	ble.n	8014d4c <_dtoa_r+0x754>
 8014d32:	9b05      	ldr	r3, [sp, #20]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	dd09      	ble.n	8014d4c <_dtoa_r+0x754>
 8014d38:	42ab      	cmp	r3, r5
 8014d3a:	9a04      	ldr	r2, [sp, #16]
 8014d3c:	bfa8      	it	ge
 8014d3e:	462b      	movge	r3, r5
 8014d40:	1ad2      	subs	r2, r2, r3
 8014d42:	9204      	str	r2, [sp, #16]
 8014d44:	9a05      	ldr	r2, [sp, #20]
 8014d46:	1aed      	subs	r5, r5, r3
 8014d48:	1ad3      	subs	r3, r2, r3
 8014d4a:	9305      	str	r3, [sp, #20]
 8014d4c:	9b07      	ldr	r3, [sp, #28]
 8014d4e:	b31b      	cbz	r3, 8014d98 <_dtoa_r+0x7a0>
 8014d50:	9b08      	ldr	r3, [sp, #32]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	f000 80af 	beq.w	8014eb6 <_dtoa_r+0x8be>
 8014d58:	2e00      	cmp	r6, #0
 8014d5a:	dd13      	ble.n	8014d84 <_dtoa_r+0x78c>
 8014d5c:	4639      	mov	r1, r7
 8014d5e:	4632      	mov	r2, r6
 8014d60:	4620      	mov	r0, r4
 8014d62:	f000 fd41 	bl	80157e8 <__pow5mult>
 8014d66:	ee18 2a10 	vmov	r2, s16
 8014d6a:	4601      	mov	r1, r0
 8014d6c:	4607      	mov	r7, r0
 8014d6e:	4620      	mov	r0, r4
 8014d70:	f000 fc90 	bl	8015694 <__multiply>
 8014d74:	ee18 1a10 	vmov	r1, s16
 8014d78:	4680      	mov	r8, r0
 8014d7a:	4620      	mov	r0, r4
 8014d7c:	f000 fbbc 	bl	80154f8 <_Bfree>
 8014d80:	ee08 8a10 	vmov	s16, r8
 8014d84:	9b07      	ldr	r3, [sp, #28]
 8014d86:	1b9a      	subs	r2, r3, r6
 8014d88:	d006      	beq.n	8014d98 <_dtoa_r+0x7a0>
 8014d8a:	ee18 1a10 	vmov	r1, s16
 8014d8e:	4620      	mov	r0, r4
 8014d90:	f000 fd2a 	bl	80157e8 <__pow5mult>
 8014d94:	ee08 0a10 	vmov	s16, r0
 8014d98:	2101      	movs	r1, #1
 8014d9a:	4620      	mov	r0, r4
 8014d9c:	f000 fc64 	bl	8015668 <__i2b>
 8014da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	4606      	mov	r6, r0
 8014da6:	f340 8088 	ble.w	8014eba <_dtoa_r+0x8c2>
 8014daa:	461a      	mov	r2, r3
 8014dac:	4601      	mov	r1, r0
 8014dae:	4620      	mov	r0, r4
 8014db0:	f000 fd1a 	bl	80157e8 <__pow5mult>
 8014db4:	9b06      	ldr	r3, [sp, #24]
 8014db6:	2b01      	cmp	r3, #1
 8014db8:	4606      	mov	r6, r0
 8014dba:	f340 8081 	ble.w	8014ec0 <_dtoa_r+0x8c8>
 8014dbe:	f04f 0800 	mov.w	r8, #0
 8014dc2:	6933      	ldr	r3, [r6, #16]
 8014dc4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014dc8:	6918      	ldr	r0, [r3, #16]
 8014dca:	f000 fbfd 	bl	80155c8 <__hi0bits>
 8014dce:	f1c0 0020 	rsb	r0, r0, #32
 8014dd2:	9b05      	ldr	r3, [sp, #20]
 8014dd4:	4418      	add	r0, r3
 8014dd6:	f010 001f 	ands.w	r0, r0, #31
 8014dda:	f000 8092 	beq.w	8014f02 <_dtoa_r+0x90a>
 8014dde:	f1c0 0320 	rsb	r3, r0, #32
 8014de2:	2b04      	cmp	r3, #4
 8014de4:	f340 808a 	ble.w	8014efc <_dtoa_r+0x904>
 8014de8:	f1c0 001c 	rsb	r0, r0, #28
 8014dec:	9b04      	ldr	r3, [sp, #16]
 8014dee:	4403      	add	r3, r0
 8014df0:	9304      	str	r3, [sp, #16]
 8014df2:	9b05      	ldr	r3, [sp, #20]
 8014df4:	4403      	add	r3, r0
 8014df6:	4405      	add	r5, r0
 8014df8:	9305      	str	r3, [sp, #20]
 8014dfa:	9b04      	ldr	r3, [sp, #16]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	dd07      	ble.n	8014e10 <_dtoa_r+0x818>
 8014e00:	ee18 1a10 	vmov	r1, s16
 8014e04:	461a      	mov	r2, r3
 8014e06:	4620      	mov	r0, r4
 8014e08:	f000 fd48 	bl	801589c <__lshift>
 8014e0c:	ee08 0a10 	vmov	s16, r0
 8014e10:	9b05      	ldr	r3, [sp, #20]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	dd05      	ble.n	8014e22 <_dtoa_r+0x82a>
 8014e16:	4631      	mov	r1, r6
 8014e18:	461a      	mov	r2, r3
 8014e1a:	4620      	mov	r0, r4
 8014e1c:	f000 fd3e 	bl	801589c <__lshift>
 8014e20:	4606      	mov	r6, r0
 8014e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d06e      	beq.n	8014f06 <_dtoa_r+0x90e>
 8014e28:	ee18 0a10 	vmov	r0, s16
 8014e2c:	4631      	mov	r1, r6
 8014e2e:	f000 fda5 	bl	801597c <__mcmp>
 8014e32:	2800      	cmp	r0, #0
 8014e34:	da67      	bge.n	8014f06 <_dtoa_r+0x90e>
 8014e36:	9b00      	ldr	r3, [sp, #0]
 8014e38:	3b01      	subs	r3, #1
 8014e3a:	ee18 1a10 	vmov	r1, s16
 8014e3e:	9300      	str	r3, [sp, #0]
 8014e40:	220a      	movs	r2, #10
 8014e42:	2300      	movs	r3, #0
 8014e44:	4620      	mov	r0, r4
 8014e46:	f000 fb79 	bl	801553c <__multadd>
 8014e4a:	9b08      	ldr	r3, [sp, #32]
 8014e4c:	ee08 0a10 	vmov	s16, r0
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	f000 81b1 	beq.w	80151b8 <_dtoa_r+0xbc0>
 8014e56:	2300      	movs	r3, #0
 8014e58:	4639      	mov	r1, r7
 8014e5a:	220a      	movs	r2, #10
 8014e5c:	4620      	mov	r0, r4
 8014e5e:	f000 fb6d 	bl	801553c <__multadd>
 8014e62:	9b02      	ldr	r3, [sp, #8]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	4607      	mov	r7, r0
 8014e68:	f300 808e 	bgt.w	8014f88 <_dtoa_r+0x990>
 8014e6c:	9b06      	ldr	r3, [sp, #24]
 8014e6e:	2b02      	cmp	r3, #2
 8014e70:	dc51      	bgt.n	8014f16 <_dtoa_r+0x91e>
 8014e72:	e089      	b.n	8014f88 <_dtoa_r+0x990>
 8014e74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014e76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014e7a:	e74b      	b.n	8014d14 <_dtoa_r+0x71c>
 8014e7c:	9b03      	ldr	r3, [sp, #12]
 8014e7e:	1e5e      	subs	r6, r3, #1
 8014e80:	9b07      	ldr	r3, [sp, #28]
 8014e82:	42b3      	cmp	r3, r6
 8014e84:	bfbf      	itttt	lt
 8014e86:	9b07      	ldrlt	r3, [sp, #28]
 8014e88:	9607      	strlt	r6, [sp, #28]
 8014e8a:	1af2      	sublt	r2, r6, r3
 8014e8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014e8e:	bfb6      	itet	lt
 8014e90:	189b      	addlt	r3, r3, r2
 8014e92:	1b9e      	subge	r6, r3, r6
 8014e94:	930a      	strlt	r3, [sp, #40]	; 0x28
 8014e96:	9b03      	ldr	r3, [sp, #12]
 8014e98:	bfb8      	it	lt
 8014e9a:	2600      	movlt	r6, #0
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	bfb7      	itett	lt
 8014ea0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8014ea4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8014ea8:	1a9d      	sublt	r5, r3, r2
 8014eaa:	2300      	movlt	r3, #0
 8014eac:	e734      	b.n	8014d18 <_dtoa_r+0x720>
 8014eae:	9e07      	ldr	r6, [sp, #28]
 8014eb0:	9d04      	ldr	r5, [sp, #16]
 8014eb2:	9f08      	ldr	r7, [sp, #32]
 8014eb4:	e73b      	b.n	8014d2e <_dtoa_r+0x736>
 8014eb6:	9a07      	ldr	r2, [sp, #28]
 8014eb8:	e767      	b.n	8014d8a <_dtoa_r+0x792>
 8014eba:	9b06      	ldr	r3, [sp, #24]
 8014ebc:	2b01      	cmp	r3, #1
 8014ebe:	dc18      	bgt.n	8014ef2 <_dtoa_r+0x8fa>
 8014ec0:	f1ba 0f00 	cmp.w	sl, #0
 8014ec4:	d115      	bne.n	8014ef2 <_dtoa_r+0x8fa>
 8014ec6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014eca:	b993      	cbnz	r3, 8014ef2 <_dtoa_r+0x8fa>
 8014ecc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014ed0:	0d1b      	lsrs	r3, r3, #20
 8014ed2:	051b      	lsls	r3, r3, #20
 8014ed4:	b183      	cbz	r3, 8014ef8 <_dtoa_r+0x900>
 8014ed6:	9b04      	ldr	r3, [sp, #16]
 8014ed8:	3301      	adds	r3, #1
 8014eda:	9304      	str	r3, [sp, #16]
 8014edc:	9b05      	ldr	r3, [sp, #20]
 8014ede:	3301      	adds	r3, #1
 8014ee0:	9305      	str	r3, [sp, #20]
 8014ee2:	f04f 0801 	mov.w	r8, #1
 8014ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	f47f af6a 	bne.w	8014dc2 <_dtoa_r+0x7ca>
 8014eee:	2001      	movs	r0, #1
 8014ef0:	e76f      	b.n	8014dd2 <_dtoa_r+0x7da>
 8014ef2:	f04f 0800 	mov.w	r8, #0
 8014ef6:	e7f6      	b.n	8014ee6 <_dtoa_r+0x8ee>
 8014ef8:	4698      	mov	r8, r3
 8014efa:	e7f4      	b.n	8014ee6 <_dtoa_r+0x8ee>
 8014efc:	f43f af7d 	beq.w	8014dfa <_dtoa_r+0x802>
 8014f00:	4618      	mov	r0, r3
 8014f02:	301c      	adds	r0, #28
 8014f04:	e772      	b.n	8014dec <_dtoa_r+0x7f4>
 8014f06:	9b03      	ldr	r3, [sp, #12]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	dc37      	bgt.n	8014f7c <_dtoa_r+0x984>
 8014f0c:	9b06      	ldr	r3, [sp, #24]
 8014f0e:	2b02      	cmp	r3, #2
 8014f10:	dd34      	ble.n	8014f7c <_dtoa_r+0x984>
 8014f12:	9b03      	ldr	r3, [sp, #12]
 8014f14:	9302      	str	r3, [sp, #8]
 8014f16:	9b02      	ldr	r3, [sp, #8]
 8014f18:	b96b      	cbnz	r3, 8014f36 <_dtoa_r+0x93e>
 8014f1a:	4631      	mov	r1, r6
 8014f1c:	2205      	movs	r2, #5
 8014f1e:	4620      	mov	r0, r4
 8014f20:	f000 fb0c 	bl	801553c <__multadd>
 8014f24:	4601      	mov	r1, r0
 8014f26:	4606      	mov	r6, r0
 8014f28:	ee18 0a10 	vmov	r0, s16
 8014f2c:	f000 fd26 	bl	801597c <__mcmp>
 8014f30:	2800      	cmp	r0, #0
 8014f32:	f73f adbb 	bgt.w	8014aac <_dtoa_r+0x4b4>
 8014f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f38:	9d01      	ldr	r5, [sp, #4]
 8014f3a:	43db      	mvns	r3, r3
 8014f3c:	9300      	str	r3, [sp, #0]
 8014f3e:	f04f 0800 	mov.w	r8, #0
 8014f42:	4631      	mov	r1, r6
 8014f44:	4620      	mov	r0, r4
 8014f46:	f000 fad7 	bl	80154f8 <_Bfree>
 8014f4a:	2f00      	cmp	r7, #0
 8014f4c:	f43f aea4 	beq.w	8014c98 <_dtoa_r+0x6a0>
 8014f50:	f1b8 0f00 	cmp.w	r8, #0
 8014f54:	d005      	beq.n	8014f62 <_dtoa_r+0x96a>
 8014f56:	45b8      	cmp	r8, r7
 8014f58:	d003      	beq.n	8014f62 <_dtoa_r+0x96a>
 8014f5a:	4641      	mov	r1, r8
 8014f5c:	4620      	mov	r0, r4
 8014f5e:	f000 facb 	bl	80154f8 <_Bfree>
 8014f62:	4639      	mov	r1, r7
 8014f64:	4620      	mov	r0, r4
 8014f66:	f000 fac7 	bl	80154f8 <_Bfree>
 8014f6a:	e695      	b.n	8014c98 <_dtoa_r+0x6a0>
 8014f6c:	2600      	movs	r6, #0
 8014f6e:	4637      	mov	r7, r6
 8014f70:	e7e1      	b.n	8014f36 <_dtoa_r+0x93e>
 8014f72:	9700      	str	r7, [sp, #0]
 8014f74:	4637      	mov	r7, r6
 8014f76:	e599      	b.n	8014aac <_dtoa_r+0x4b4>
 8014f78:	40240000 	.word	0x40240000
 8014f7c:	9b08      	ldr	r3, [sp, #32]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	f000 80ca 	beq.w	8015118 <_dtoa_r+0xb20>
 8014f84:	9b03      	ldr	r3, [sp, #12]
 8014f86:	9302      	str	r3, [sp, #8]
 8014f88:	2d00      	cmp	r5, #0
 8014f8a:	dd05      	ble.n	8014f98 <_dtoa_r+0x9a0>
 8014f8c:	4639      	mov	r1, r7
 8014f8e:	462a      	mov	r2, r5
 8014f90:	4620      	mov	r0, r4
 8014f92:	f000 fc83 	bl	801589c <__lshift>
 8014f96:	4607      	mov	r7, r0
 8014f98:	f1b8 0f00 	cmp.w	r8, #0
 8014f9c:	d05b      	beq.n	8015056 <_dtoa_r+0xa5e>
 8014f9e:	6879      	ldr	r1, [r7, #4]
 8014fa0:	4620      	mov	r0, r4
 8014fa2:	f000 fa69 	bl	8015478 <_Balloc>
 8014fa6:	4605      	mov	r5, r0
 8014fa8:	b928      	cbnz	r0, 8014fb6 <_dtoa_r+0x9be>
 8014faa:	4b87      	ldr	r3, [pc, #540]	; (80151c8 <_dtoa_r+0xbd0>)
 8014fac:	4602      	mov	r2, r0
 8014fae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014fb2:	f7ff bb3b 	b.w	801462c <_dtoa_r+0x34>
 8014fb6:	693a      	ldr	r2, [r7, #16]
 8014fb8:	3202      	adds	r2, #2
 8014fba:	0092      	lsls	r2, r2, #2
 8014fbc:	f107 010c 	add.w	r1, r7, #12
 8014fc0:	300c      	adds	r0, #12
 8014fc2:	f7fe f8f6 	bl	80131b2 <memcpy>
 8014fc6:	2201      	movs	r2, #1
 8014fc8:	4629      	mov	r1, r5
 8014fca:	4620      	mov	r0, r4
 8014fcc:	f000 fc66 	bl	801589c <__lshift>
 8014fd0:	9b01      	ldr	r3, [sp, #4]
 8014fd2:	f103 0901 	add.w	r9, r3, #1
 8014fd6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8014fda:	4413      	add	r3, r2
 8014fdc:	9305      	str	r3, [sp, #20]
 8014fde:	f00a 0301 	and.w	r3, sl, #1
 8014fe2:	46b8      	mov	r8, r7
 8014fe4:	9304      	str	r3, [sp, #16]
 8014fe6:	4607      	mov	r7, r0
 8014fe8:	4631      	mov	r1, r6
 8014fea:	ee18 0a10 	vmov	r0, s16
 8014fee:	f7ff fa77 	bl	80144e0 <quorem>
 8014ff2:	4641      	mov	r1, r8
 8014ff4:	9002      	str	r0, [sp, #8]
 8014ff6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014ffa:	ee18 0a10 	vmov	r0, s16
 8014ffe:	f000 fcbd 	bl	801597c <__mcmp>
 8015002:	463a      	mov	r2, r7
 8015004:	9003      	str	r0, [sp, #12]
 8015006:	4631      	mov	r1, r6
 8015008:	4620      	mov	r0, r4
 801500a:	f000 fcd3 	bl	80159b4 <__mdiff>
 801500e:	68c2      	ldr	r2, [r0, #12]
 8015010:	f109 3bff 	add.w	fp, r9, #4294967295
 8015014:	4605      	mov	r5, r0
 8015016:	bb02      	cbnz	r2, 801505a <_dtoa_r+0xa62>
 8015018:	4601      	mov	r1, r0
 801501a:	ee18 0a10 	vmov	r0, s16
 801501e:	f000 fcad 	bl	801597c <__mcmp>
 8015022:	4602      	mov	r2, r0
 8015024:	4629      	mov	r1, r5
 8015026:	4620      	mov	r0, r4
 8015028:	9207      	str	r2, [sp, #28]
 801502a:	f000 fa65 	bl	80154f8 <_Bfree>
 801502e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8015032:	ea43 0102 	orr.w	r1, r3, r2
 8015036:	9b04      	ldr	r3, [sp, #16]
 8015038:	430b      	orrs	r3, r1
 801503a:	464d      	mov	r5, r9
 801503c:	d10f      	bne.n	801505e <_dtoa_r+0xa66>
 801503e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015042:	d02a      	beq.n	801509a <_dtoa_r+0xaa2>
 8015044:	9b03      	ldr	r3, [sp, #12]
 8015046:	2b00      	cmp	r3, #0
 8015048:	dd02      	ble.n	8015050 <_dtoa_r+0xa58>
 801504a:	9b02      	ldr	r3, [sp, #8]
 801504c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8015050:	f88b a000 	strb.w	sl, [fp]
 8015054:	e775      	b.n	8014f42 <_dtoa_r+0x94a>
 8015056:	4638      	mov	r0, r7
 8015058:	e7ba      	b.n	8014fd0 <_dtoa_r+0x9d8>
 801505a:	2201      	movs	r2, #1
 801505c:	e7e2      	b.n	8015024 <_dtoa_r+0xa2c>
 801505e:	9b03      	ldr	r3, [sp, #12]
 8015060:	2b00      	cmp	r3, #0
 8015062:	db04      	blt.n	801506e <_dtoa_r+0xa76>
 8015064:	9906      	ldr	r1, [sp, #24]
 8015066:	430b      	orrs	r3, r1
 8015068:	9904      	ldr	r1, [sp, #16]
 801506a:	430b      	orrs	r3, r1
 801506c:	d122      	bne.n	80150b4 <_dtoa_r+0xabc>
 801506e:	2a00      	cmp	r2, #0
 8015070:	ddee      	ble.n	8015050 <_dtoa_r+0xa58>
 8015072:	ee18 1a10 	vmov	r1, s16
 8015076:	2201      	movs	r2, #1
 8015078:	4620      	mov	r0, r4
 801507a:	f000 fc0f 	bl	801589c <__lshift>
 801507e:	4631      	mov	r1, r6
 8015080:	ee08 0a10 	vmov	s16, r0
 8015084:	f000 fc7a 	bl	801597c <__mcmp>
 8015088:	2800      	cmp	r0, #0
 801508a:	dc03      	bgt.n	8015094 <_dtoa_r+0xa9c>
 801508c:	d1e0      	bne.n	8015050 <_dtoa_r+0xa58>
 801508e:	f01a 0f01 	tst.w	sl, #1
 8015092:	d0dd      	beq.n	8015050 <_dtoa_r+0xa58>
 8015094:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015098:	d1d7      	bne.n	801504a <_dtoa_r+0xa52>
 801509a:	2339      	movs	r3, #57	; 0x39
 801509c:	f88b 3000 	strb.w	r3, [fp]
 80150a0:	462b      	mov	r3, r5
 80150a2:	461d      	mov	r5, r3
 80150a4:	3b01      	subs	r3, #1
 80150a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80150aa:	2a39      	cmp	r2, #57	; 0x39
 80150ac:	d071      	beq.n	8015192 <_dtoa_r+0xb9a>
 80150ae:	3201      	adds	r2, #1
 80150b0:	701a      	strb	r2, [r3, #0]
 80150b2:	e746      	b.n	8014f42 <_dtoa_r+0x94a>
 80150b4:	2a00      	cmp	r2, #0
 80150b6:	dd07      	ble.n	80150c8 <_dtoa_r+0xad0>
 80150b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80150bc:	d0ed      	beq.n	801509a <_dtoa_r+0xaa2>
 80150be:	f10a 0301 	add.w	r3, sl, #1
 80150c2:	f88b 3000 	strb.w	r3, [fp]
 80150c6:	e73c      	b.n	8014f42 <_dtoa_r+0x94a>
 80150c8:	9b05      	ldr	r3, [sp, #20]
 80150ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80150ce:	4599      	cmp	r9, r3
 80150d0:	d047      	beq.n	8015162 <_dtoa_r+0xb6a>
 80150d2:	ee18 1a10 	vmov	r1, s16
 80150d6:	2300      	movs	r3, #0
 80150d8:	220a      	movs	r2, #10
 80150da:	4620      	mov	r0, r4
 80150dc:	f000 fa2e 	bl	801553c <__multadd>
 80150e0:	45b8      	cmp	r8, r7
 80150e2:	ee08 0a10 	vmov	s16, r0
 80150e6:	f04f 0300 	mov.w	r3, #0
 80150ea:	f04f 020a 	mov.w	r2, #10
 80150ee:	4641      	mov	r1, r8
 80150f0:	4620      	mov	r0, r4
 80150f2:	d106      	bne.n	8015102 <_dtoa_r+0xb0a>
 80150f4:	f000 fa22 	bl	801553c <__multadd>
 80150f8:	4680      	mov	r8, r0
 80150fa:	4607      	mov	r7, r0
 80150fc:	f109 0901 	add.w	r9, r9, #1
 8015100:	e772      	b.n	8014fe8 <_dtoa_r+0x9f0>
 8015102:	f000 fa1b 	bl	801553c <__multadd>
 8015106:	4639      	mov	r1, r7
 8015108:	4680      	mov	r8, r0
 801510a:	2300      	movs	r3, #0
 801510c:	220a      	movs	r2, #10
 801510e:	4620      	mov	r0, r4
 8015110:	f000 fa14 	bl	801553c <__multadd>
 8015114:	4607      	mov	r7, r0
 8015116:	e7f1      	b.n	80150fc <_dtoa_r+0xb04>
 8015118:	9b03      	ldr	r3, [sp, #12]
 801511a:	9302      	str	r3, [sp, #8]
 801511c:	9d01      	ldr	r5, [sp, #4]
 801511e:	ee18 0a10 	vmov	r0, s16
 8015122:	4631      	mov	r1, r6
 8015124:	f7ff f9dc 	bl	80144e0 <quorem>
 8015128:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801512c:	9b01      	ldr	r3, [sp, #4]
 801512e:	f805 ab01 	strb.w	sl, [r5], #1
 8015132:	1aea      	subs	r2, r5, r3
 8015134:	9b02      	ldr	r3, [sp, #8]
 8015136:	4293      	cmp	r3, r2
 8015138:	dd09      	ble.n	801514e <_dtoa_r+0xb56>
 801513a:	ee18 1a10 	vmov	r1, s16
 801513e:	2300      	movs	r3, #0
 8015140:	220a      	movs	r2, #10
 8015142:	4620      	mov	r0, r4
 8015144:	f000 f9fa 	bl	801553c <__multadd>
 8015148:	ee08 0a10 	vmov	s16, r0
 801514c:	e7e7      	b.n	801511e <_dtoa_r+0xb26>
 801514e:	9b02      	ldr	r3, [sp, #8]
 8015150:	2b00      	cmp	r3, #0
 8015152:	bfc8      	it	gt
 8015154:	461d      	movgt	r5, r3
 8015156:	9b01      	ldr	r3, [sp, #4]
 8015158:	bfd8      	it	le
 801515a:	2501      	movle	r5, #1
 801515c:	441d      	add	r5, r3
 801515e:	f04f 0800 	mov.w	r8, #0
 8015162:	ee18 1a10 	vmov	r1, s16
 8015166:	2201      	movs	r2, #1
 8015168:	4620      	mov	r0, r4
 801516a:	f000 fb97 	bl	801589c <__lshift>
 801516e:	4631      	mov	r1, r6
 8015170:	ee08 0a10 	vmov	s16, r0
 8015174:	f000 fc02 	bl	801597c <__mcmp>
 8015178:	2800      	cmp	r0, #0
 801517a:	dc91      	bgt.n	80150a0 <_dtoa_r+0xaa8>
 801517c:	d102      	bne.n	8015184 <_dtoa_r+0xb8c>
 801517e:	f01a 0f01 	tst.w	sl, #1
 8015182:	d18d      	bne.n	80150a0 <_dtoa_r+0xaa8>
 8015184:	462b      	mov	r3, r5
 8015186:	461d      	mov	r5, r3
 8015188:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801518c:	2a30      	cmp	r2, #48	; 0x30
 801518e:	d0fa      	beq.n	8015186 <_dtoa_r+0xb8e>
 8015190:	e6d7      	b.n	8014f42 <_dtoa_r+0x94a>
 8015192:	9a01      	ldr	r2, [sp, #4]
 8015194:	429a      	cmp	r2, r3
 8015196:	d184      	bne.n	80150a2 <_dtoa_r+0xaaa>
 8015198:	9b00      	ldr	r3, [sp, #0]
 801519a:	3301      	adds	r3, #1
 801519c:	9300      	str	r3, [sp, #0]
 801519e:	2331      	movs	r3, #49	; 0x31
 80151a0:	7013      	strb	r3, [r2, #0]
 80151a2:	e6ce      	b.n	8014f42 <_dtoa_r+0x94a>
 80151a4:	4b09      	ldr	r3, [pc, #36]	; (80151cc <_dtoa_r+0xbd4>)
 80151a6:	f7ff ba95 	b.w	80146d4 <_dtoa_r+0xdc>
 80151aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	f47f aa6e 	bne.w	801468e <_dtoa_r+0x96>
 80151b2:	4b07      	ldr	r3, [pc, #28]	; (80151d0 <_dtoa_r+0xbd8>)
 80151b4:	f7ff ba8e 	b.w	80146d4 <_dtoa_r+0xdc>
 80151b8:	9b02      	ldr	r3, [sp, #8]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	dcae      	bgt.n	801511c <_dtoa_r+0xb24>
 80151be:	9b06      	ldr	r3, [sp, #24]
 80151c0:	2b02      	cmp	r3, #2
 80151c2:	f73f aea8 	bgt.w	8014f16 <_dtoa_r+0x91e>
 80151c6:	e7a9      	b.n	801511c <_dtoa_r+0xb24>
 80151c8:	08017fc1 	.word	0x08017fc1
 80151cc:	08017ec1 	.word	0x08017ec1
 80151d0:	08017f59 	.word	0x08017f59

080151d4 <__sflush_r>:
 80151d4:	898a      	ldrh	r2, [r1, #12]
 80151d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151da:	4605      	mov	r5, r0
 80151dc:	0710      	lsls	r0, r2, #28
 80151de:	460c      	mov	r4, r1
 80151e0:	d458      	bmi.n	8015294 <__sflush_r+0xc0>
 80151e2:	684b      	ldr	r3, [r1, #4]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	dc05      	bgt.n	80151f4 <__sflush_r+0x20>
 80151e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	dc02      	bgt.n	80151f4 <__sflush_r+0x20>
 80151ee:	2000      	movs	r0, #0
 80151f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80151f6:	2e00      	cmp	r6, #0
 80151f8:	d0f9      	beq.n	80151ee <__sflush_r+0x1a>
 80151fa:	2300      	movs	r3, #0
 80151fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015200:	682f      	ldr	r7, [r5, #0]
 8015202:	602b      	str	r3, [r5, #0]
 8015204:	d032      	beq.n	801526c <__sflush_r+0x98>
 8015206:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015208:	89a3      	ldrh	r3, [r4, #12]
 801520a:	075a      	lsls	r2, r3, #29
 801520c:	d505      	bpl.n	801521a <__sflush_r+0x46>
 801520e:	6863      	ldr	r3, [r4, #4]
 8015210:	1ac0      	subs	r0, r0, r3
 8015212:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015214:	b10b      	cbz	r3, 801521a <__sflush_r+0x46>
 8015216:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015218:	1ac0      	subs	r0, r0, r3
 801521a:	2300      	movs	r3, #0
 801521c:	4602      	mov	r2, r0
 801521e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015220:	6a21      	ldr	r1, [r4, #32]
 8015222:	4628      	mov	r0, r5
 8015224:	47b0      	blx	r6
 8015226:	1c43      	adds	r3, r0, #1
 8015228:	89a3      	ldrh	r3, [r4, #12]
 801522a:	d106      	bne.n	801523a <__sflush_r+0x66>
 801522c:	6829      	ldr	r1, [r5, #0]
 801522e:	291d      	cmp	r1, #29
 8015230:	d82c      	bhi.n	801528c <__sflush_r+0xb8>
 8015232:	4a2a      	ldr	r2, [pc, #168]	; (80152dc <__sflush_r+0x108>)
 8015234:	40ca      	lsrs	r2, r1
 8015236:	07d6      	lsls	r6, r2, #31
 8015238:	d528      	bpl.n	801528c <__sflush_r+0xb8>
 801523a:	2200      	movs	r2, #0
 801523c:	6062      	str	r2, [r4, #4]
 801523e:	04d9      	lsls	r1, r3, #19
 8015240:	6922      	ldr	r2, [r4, #16]
 8015242:	6022      	str	r2, [r4, #0]
 8015244:	d504      	bpl.n	8015250 <__sflush_r+0x7c>
 8015246:	1c42      	adds	r2, r0, #1
 8015248:	d101      	bne.n	801524e <__sflush_r+0x7a>
 801524a:	682b      	ldr	r3, [r5, #0]
 801524c:	b903      	cbnz	r3, 8015250 <__sflush_r+0x7c>
 801524e:	6560      	str	r0, [r4, #84]	; 0x54
 8015250:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015252:	602f      	str	r7, [r5, #0]
 8015254:	2900      	cmp	r1, #0
 8015256:	d0ca      	beq.n	80151ee <__sflush_r+0x1a>
 8015258:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801525c:	4299      	cmp	r1, r3
 801525e:	d002      	beq.n	8015266 <__sflush_r+0x92>
 8015260:	4628      	mov	r0, r5
 8015262:	f000 fca3 	bl	8015bac <_free_r>
 8015266:	2000      	movs	r0, #0
 8015268:	6360      	str	r0, [r4, #52]	; 0x34
 801526a:	e7c1      	b.n	80151f0 <__sflush_r+0x1c>
 801526c:	6a21      	ldr	r1, [r4, #32]
 801526e:	2301      	movs	r3, #1
 8015270:	4628      	mov	r0, r5
 8015272:	47b0      	blx	r6
 8015274:	1c41      	adds	r1, r0, #1
 8015276:	d1c7      	bne.n	8015208 <__sflush_r+0x34>
 8015278:	682b      	ldr	r3, [r5, #0]
 801527a:	2b00      	cmp	r3, #0
 801527c:	d0c4      	beq.n	8015208 <__sflush_r+0x34>
 801527e:	2b1d      	cmp	r3, #29
 8015280:	d001      	beq.n	8015286 <__sflush_r+0xb2>
 8015282:	2b16      	cmp	r3, #22
 8015284:	d101      	bne.n	801528a <__sflush_r+0xb6>
 8015286:	602f      	str	r7, [r5, #0]
 8015288:	e7b1      	b.n	80151ee <__sflush_r+0x1a>
 801528a:	89a3      	ldrh	r3, [r4, #12]
 801528c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015290:	81a3      	strh	r3, [r4, #12]
 8015292:	e7ad      	b.n	80151f0 <__sflush_r+0x1c>
 8015294:	690f      	ldr	r7, [r1, #16]
 8015296:	2f00      	cmp	r7, #0
 8015298:	d0a9      	beq.n	80151ee <__sflush_r+0x1a>
 801529a:	0793      	lsls	r3, r2, #30
 801529c:	680e      	ldr	r6, [r1, #0]
 801529e:	bf08      	it	eq
 80152a0:	694b      	ldreq	r3, [r1, #20]
 80152a2:	600f      	str	r7, [r1, #0]
 80152a4:	bf18      	it	ne
 80152a6:	2300      	movne	r3, #0
 80152a8:	eba6 0807 	sub.w	r8, r6, r7
 80152ac:	608b      	str	r3, [r1, #8]
 80152ae:	f1b8 0f00 	cmp.w	r8, #0
 80152b2:	dd9c      	ble.n	80151ee <__sflush_r+0x1a>
 80152b4:	6a21      	ldr	r1, [r4, #32]
 80152b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80152b8:	4643      	mov	r3, r8
 80152ba:	463a      	mov	r2, r7
 80152bc:	4628      	mov	r0, r5
 80152be:	47b0      	blx	r6
 80152c0:	2800      	cmp	r0, #0
 80152c2:	dc06      	bgt.n	80152d2 <__sflush_r+0xfe>
 80152c4:	89a3      	ldrh	r3, [r4, #12]
 80152c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80152ca:	81a3      	strh	r3, [r4, #12]
 80152cc:	f04f 30ff 	mov.w	r0, #4294967295
 80152d0:	e78e      	b.n	80151f0 <__sflush_r+0x1c>
 80152d2:	4407      	add	r7, r0
 80152d4:	eba8 0800 	sub.w	r8, r8, r0
 80152d8:	e7e9      	b.n	80152ae <__sflush_r+0xda>
 80152da:	bf00      	nop
 80152dc:	20400001 	.word	0x20400001

080152e0 <_fflush_r>:
 80152e0:	b538      	push	{r3, r4, r5, lr}
 80152e2:	690b      	ldr	r3, [r1, #16]
 80152e4:	4605      	mov	r5, r0
 80152e6:	460c      	mov	r4, r1
 80152e8:	b913      	cbnz	r3, 80152f0 <_fflush_r+0x10>
 80152ea:	2500      	movs	r5, #0
 80152ec:	4628      	mov	r0, r5
 80152ee:	bd38      	pop	{r3, r4, r5, pc}
 80152f0:	b118      	cbz	r0, 80152fa <_fflush_r+0x1a>
 80152f2:	6983      	ldr	r3, [r0, #24]
 80152f4:	b90b      	cbnz	r3, 80152fa <_fflush_r+0x1a>
 80152f6:	f7fd fe75 	bl	8012fe4 <__sinit>
 80152fa:	4b14      	ldr	r3, [pc, #80]	; (801534c <_fflush_r+0x6c>)
 80152fc:	429c      	cmp	r4, r3
 80152fe:	d11b      	bne.n	8015338 <_fflush_r+0x58>
 8015300:	686c      	ldr	r4, [r5, #4]
 8015302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d0ef      	beq.n	80152ea <_fflush_r+0xa>
 801530a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801530c:	07d0      	lsls	r0, r2, #31
 801530e:	d404      	bmi.n	801531a <_fflush_r+0x3a>
 8015310:	0599      	lsls	r1, r3, #22
 8015312:	d402      	bmi.n	801531a <_fflush_r+0x3a>
 8015314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015316:	f7fd ff3a 	bl	801318e <__retarget_lock_acquire_recursive>
 801531a:	4628      	mov	r0, r5
 801531c:	4621      	mov	r1, r4
 801531e:	f7ff ff59 	bl	80151d4 <__sflush_r>
 8015322:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015324:	07da      	lsls	r2, r3, #31
 8015326:	4605      	mov	r5, r0
 8015328:	d4e0      	bmi.n	80152ec <_fflush_r+0xc>
 801532a:	89a3      	ldrh	r3, [r4, #12]
 801532c:	059b      	lsls	r3, r3, #22
 801532e:	d4dd      	bmi.n	80152ec <_fflush_r+0xc>
 8015330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015332:	f7fd ff2d 	bl	8013190 <__retarget_lock_release_recursive>
 8015336:	e7d9      	b.n	80152ec <_fflush_r+0xc>
 8015338:	4b05      	ldr	r3, [pc, #20]	; (8015350 <_fflush_r+0x70>)
 801533a:	429c      	cmp	r4, r3
 801533c:	d101      	bne.n	8015342 <_fflush_r+0x62>
 801533e:	68ac      	ldr	r4, [r5, #8]
 8015340:	e7df      	b.n	8015302 <_fflush_r+0x22>
 8015342:	4b04      	ldr	r3, [pc, #16]	; (8015354 <_fflush_r+0x74>)
 8015344:	429c      	cmp	r4, r3
 8015346:	bf08      	it	eq
 8015348:	68ec      	ldreq	r4, [r5, #12]
 801534a:	e7da      	b.n	8015302 <_fflush_r+0x22>
 801534c:	08017e5c 	.word	0x08017e5c
 8015350:	08017e7c 	.word	0x08017e7c
 8015354:	08017e3c 	.word	0x08017e3c

08015358 <_localeconv_r>:
 8015358:	4800      	ldr	r0, [pc, #0]	; (801535c <_localeconv_r+0x4>)
 801535a:	4770      	bx	lr
 801535c:	200001a8 	.word	0x200001a8

08015360 <_lseek_r>:
 8015360:	b538      	push	{r3, r4, r5, lr}
 8015362:	4d07      	ldr	r5, [pc, #28]	; (8015380 <_lseek_r+0x20>)
 8015364:	4604      	mov	r4, r0
 8015366:	4608      	mov	r0, r1
 8015368:	4611      	mov	r1, r2
 801536a:	2200      	movs	r2, #0
 801536c:	602a      	str	r2, [r5, #0]
 801536e:	461a      	mov	r2, r3
 8015370:	f7ee f81a 	bl	80033a8 <_lseek>
 8015374:	1c43      	adds	r3, r0, #1
 8015376:	d102      	bne.n	801537e <_lseek_r+0x1e>
 8015378:	682b      	ldr	r3, [r5, #0]
 801537a:	b103      	cbz	r3, 801537e <_lseek_r+0x1e>
 801537c:	6023      	str	r3, [r4, #0]
 801537e:	bd38      	pop	{r3, r4, r5, pc}
 8015380:	20005090 	.word	0x20005090

08015384 <__swhatbuf_r>:
 8015384:	b570      	push	{r4, r5, r6, lr}
 8015386:	460e      	mov	r6, r1
 8015388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801538c:	2900      	cmp	r1, #0
 801538e:	b096      	sub	sp, #88	; 0x58
 8015390:	4614      	mov	r4, r2
 8015392:	461d      	mov	r5, r3
 8015394:	da08      	bge.n	80153a8 <__swhatbuf_r+0x24>
 8015396:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801539a:	2200      	movs	r2, #0
 801539c:	602a      	str	r2, [r5, #0]
 801539e:	061a      	lsls	r2, r3, #24
 80153a0:	d410      	bmi.n	80153c4 <__swhatbuf_r+0x40>
 80153a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80153a6:	e00e      	b.n	80153c6 <__swhatbuf_r+0x42>
 80153a8:	466a      	mov	r2, sp
 80153aa:	f000 fe2b 	bl	8016004 <_fstat_r>
 80153ae:	2800      	cmp	r0, #0
 80153b0:	dbf1      	blt.n	8015396 <__swhatbuf_r+0x12>
 80153b2:	9a01      	ldr	r2, [sp, #4]
 80153b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80153b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80153bc:	425a      	negs	r2, r3
 80153be:	415a      	adcs	r2, r3
 80153c0:	602a      	str	r2, [r5, #0]
 80153c2:	e7ee      	b.n	80153a2 <__swhatbuf_r+0x1e>
 80153c4:	2340      	movs	r3, #64	; 0x40
 80153c6:	2000      	movs	r0, #0
 80153c8:	6023      	str	r3, [r4, #0]
 80153ca:	b016      	add	sp, #88	; 0x58
 80153cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080153d0 <__smakebuf_r>:
 80153d0:	898b      	ldrh	r3, [r1, #12]
 80153d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80153d4:	079d      	lsls	r5, r3, #30
 80153d6:	4606      	mov	r6, r0
 80153d8:	460c      	mov	r4, r1
 80153da:	d507      	bpl.n	80153ec <__smakebuf_r+0x1c>
 80153dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80153e0:	6023      	str	r3, [r4, #0]
 80153e2:	6123      	str	r3, [r4, #16]
 80153e4:	2301      	movs	r3, #1
 80153e6:	6163      	str	r3, [r4, #20]
 80153e8:	b002      	add	sp, #8
 80153ea:	bd70      	pop	{r4, r5, r6, pc}
 80153ec:	ab01      	add	r3, sp, #4
 80153ee:	466a      	mov	r2, sp
 80153f0:	f7ff ffc8 	bl	8015384 <__swhatbuf_r>
 80153f4:	9900      	ldr	r1, [sp, #0]
 80153f6:	4605      	mov	r5, r0
 80153f8:	4630      	mov	r0, r6
 80153fa:	f7fd ff2b 	bl	8013254 <_malloc_r>
 80153fe:	b948      	cbnz	r0, 8015414 <__smakebuf_r+0x44>
 8015400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015404:	059a      	lsls	r2, r3, #22
 8015406:	d4ef      	bmi.n	80153e8 <__smakebuf_r+0x18>
 8015408:	f023 0303 	bic.w	r3, r3, #3
 801540c:	f043 0302 	orr.w	r3, r3, #2
 8015410:	81a3      	strh	r3, [r4, #12]
 8015412:	e7e3      	b.n	80153dc <__smakebuf_r+0xc>
 8015414:	4b0d      	ldr	r3, [pc, #52]	; (801544c <__smakebuf_r+0x7c>)
 8015416:	62b3      	str	r3, [r6, #40]	; 0x28
 8015418:	89a3      	ldrh	r3, [r4, #12]
 801541a:	6020      	str	r0, [r4, #0]
 801541c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015420:	81a3      	strh	r3, [r4, #12]
 8015422:	9b00      	ldr	r3, [sp, #0]
 8015424:	6163      	str	r3, [r4, #20]
 8015426:	9b01      	ldr	r3, [sp, #4]
 8015428:	6120      	str	r0, [r4, #16]
 801542a:	b15b      	cbz	r3, 8015444 <__smakebuf_r+0x74>
 801542c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015430:	4630      	mov	r0, r6
 8015432:	f000 fdf9 	bl	8016028 <_isatty_r>
 8015436:	b128      	cbz	r0, 8015444 <__smakebuf_r+0x74>
 8015438:	89a3      	ldrh	r3, [r4, #12]
 801543a:	f023 0303 	bic.w	r3, r3, #3
 801543e:	f043 0301 	orr.w	r3, r3, #1
 8015442:	81a3      	strh	r3, [r4, #12]
 8015444:	89a0      	ldrh	r0, [r4, #12]
 8015446:	4305      	orrs	r5, r0
 8015448:	81a5      	strh	r5, [r4, #12]
 801544a:	e7cd      	b.n	80153e8 <__smakebuf_r+0x18>
 801544c:	08012f7d 	.word	0x08012f7d

08015450 <malloc>:
 8015450:	4b02      	ldr	r3, [pc, #8]	; (801545c <malloc+0xc>)
 8015452:	4601      	mov	r1, r0
 8015454:	6818      	ldr	r0, [r3, #0]
 8015456:	f7fd befd 	b.w	8013254 <_malloc_r>
 801545a:	bf00      	nop
 801545c:	20000054 	.word	0x20000054

08015460 <__malloc_lock>:
 8015460:	4801      	ldr	r0, [pc, #4]	; (8015468 <__malloc_lock+0x8>)
 8015462:	f7fd be94 	b.w	801318e <__retarget_lock_acquire_recursive>
 8015466:	bf00      	nop
 8015468:	20005084 	.word	0x20005084

0801546c <__malloc_unlock>:
 801546c:	4801      	ldr	r0, [pc, #4]	; (8015474 <__malloc_unlock+0x8>)
 801546e:	f7fd be8f 	b.w	8013190 <__retarget_lock_release_recursive>
 8015472:	bf00      	nop
 8015474:	20005084 	.word	0x20005084

08015478 <_Balloc>:
 8015478:	b570      	push	{r4, r5, r6, lr}
 801547a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801547c:	4604      	mov	r4, r0
 801547e:	460d      	mov	r5, r1
 8015480:	b976      	cbnz	r6, 80154a0 <_Balloc+0x28>
 8015482:	2010      	movs	r0, #16
 8015484:	f7ff ffe4 	bl	8015450 <malloc>
 8015488:	4602      	mov	r2, r0
 801548a:	6260      	str	r0, [r4, #36]	; 0x24
 801548c:	b920      	cbnz	r0, 8015498 <_Balloc+0x20>
 801548e:	4b18      	ldr	r3, [pc, #96]	; (80154f0 <_Balloc+0x78>)
 8015490:	4818      	ldr	r0, [pc, #96]	; (80154f4 <_Balloc+0x7c>)
 8015492:	2166      	movs	r1, #102	; 0x66
 8015494:	f7fd fd2a 	bl	8012eec <__assert_func>
 8015498:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801549c:	6006      	str	r6, [r0, #0]
 801549e:	60c6      	str	r6, [r0, #12]
 80154a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80154a2:	68f3      	ldr	r3, [r6, #12]
 80154a4:	b183      	cbz	r3, 80154c8 <_Balloc+0x50>
 80154a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80154a8:	68db      	ldr	r3, [r3, #12]
 80154aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80154ae:	b9b8      	cbnz	r0, 80154e0 <_Balloc+0x68>
 80154b0:	2101      	movs	r1, #1
 80154b2:	fa01 f605 	lsl.w	r6, r1, r5
 80154b6:	1d72      	adds	r2, r6, #5
 80154b8:	0092      	lsls	r2, r2, #2
 80154ba:	4620      	mov	r0, r4
 80154bc:	f000 fb60 	bl	8015b80 <_calloc_r>
 80154c0:	b160      	cbz	r0, 80154dc <_Balloc+0x64>
 80154c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80154c6:	e00e      	b.n	80154e6 <_Balloc+0x6e>
 80154c8:	2221      	movs	r2, #33	; 0x21
 80154ca:	2104      	movs	r1, #4
 80154cc:	4620      	mov	r0, r4
 80154ce:	f000 fb57 	bl	8015b80 <_calloc_r>
 80154d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80154d4:	60f0      	str	r0, [r6, #12]
 80154d6:	68db      	ldr	r3, [r3, #12]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d1e4      	bne.n	80154a6 <_Balloc+0x2e>
 80154dc:	2000      	movs	r0, #0
 80154de:	bd70      	pop	{r4, r5, r6, pc}
 80154e0:	6802      	ldr	r2, [r0, #0]
 80154e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80154e6:	2300      	movs	r3, #0
 80154e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80154ec:	e7f7      	b.n	80154de <_Balloc+0x66>
 80154ee:	bf00      	nop
 80154f0:	08017ee5 	.word	0x08017ee5
 80154f4:	08017fd2 	.word	0x08017fd2

080154f8 <_Bfree>:
 80154f8:	b570      	push	{r4, r5, r6, lr}
 80154fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80154fc:	4605      	mov	r5, r0
 80154fe:	460c      	mov	r4, r1
 8015500:	b976      	cbnz	r6, 8015520 <_Bfree+0x28>
 8015502:	2010      	movs	r0, #16
 8015504:	f7ff ffa4 	bl	8015450 <malloc>
 8015508:	4602      	mov	r2, r0
 801550a:	6268      	str	r0, [r5, #36]	; 0x24
 801550c:	b920      	cbnz	r0, 8015518 <_Bfree+0x20>
 801550e:	4b09      	ldr	r3, [pc, #36]	; (8015534 <_Bfree+0x3c>)
 8015510:	4809      	ldr	r0, [pc, #36]	; (8015538 <_Bfree+0x40>)
 8015512:	218a      	movs	r1, #138	; 0x8a
 8015514:	f7fd fcea 	bl	8012eec <__assert_func>
 8015518:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801551c:	6006      	str	r6, [r0, #0]
 801551e:	60c6      	str	r6, [r0, #12]
 8015520:	b13c      	cbz	r4, 8015532 <_Bfree+0x3a>
 8015522:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015524:	6862      	ldr	r2, [r4, #4]
 8015526:	68db      	ldr	r3, [r3, #12]
 8015528:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801552c:	6021      	str	r1, [r4, #0]
 801552e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015532:	bd70      	pop	{r4, r5, r6, pc}
 8015534:	08017ee5 	.word	0x08017ee5
 8015538:	08017fd2 	.word	0x08017fd2

0801553c <__multadd>:
 801553c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015540:	690d      	ldr	r5, [r1, #16]
 8015542:	4607      	mov	r7, r0
 8015544:	460c      	mov	r4, r1
 8015546:	461e      	mov	r6, r3
 8015548:	f101 0c14 	add.w	ip, r1, #20
 801554c:	2000      	movs	r0, #0
 801554e:	f8dc 3000 	ldr.w	r3, [ip]
 8015552:	b299      	uxth	r1, r3
 8015554:	fb02 6101 	mla	r1, r2, r1, r6
 8015558:	0c1e      	lsrs	r6, r3, #16
 801555a:	0c0b      	lsrs	r3, r1, #16
 801555c:	fb02 3306 	mla	r3, r2, r6, r3
 8015560:	b289      	uxth	r1, r1
 8015562:	3001      	adds	r0, #1
 8015564:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015568:	4285      	cmp	r5, r0
 801556a:	f84c 1b04 	str.w	r1, [ip], #4
 801556e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015572:	dcec      	bgt.n	801554e <__multadd+0x12>
 8015574:	b30e      	cbz	r6, 80155ba <__multadd+0x7e>
 8015576:	68a3      	ldr	r3, [r4, #8]
 8015578:	42ab      	cmp	r3, r5
 801557a:	dc19      	bgt.n	80155b0 <__multadd+0x74>
 801557c:	6861      	ldr	r1, [r4, #4]
 801557e:	4638      	mov	r0, r7
 8015580:	3101      	adds	r1, #1
 8015582:	f7ff ff79 	bl	8015478 <_Balloc>
 8015586:	4680      	mov	r8, r0
 8015588:	b928      	cbnz	r0, 8015596 <__multadd+0x5a>
 801558a:	4602      	mov	r2, r0
 801558c:	4b0c      	ldr	r3, [pc, #48]	; (80155c0 <__multadd+0x84>)
 801558e:	480d      	ldr	r0, [pc, #52]	; (80155c4 <__multadd+0x88>)
 8015590:	21b5      	movs	r1, #181	; 0xb5
 8015592:	f7fd fcab 	bl	8012eec <__assert_func>
 8015596:	6922      	ldr	r2, [r4, #16]
 8015598:	3202      	adds	r2, #2
 801559a:	f104 010c 	add.w	r1, r4, #12
 801559e:	0092      	lsls	r2, r2, #2
 80155a0:	300c      	adds	r0, #12
 80155a2:	f7fd fe06 	bl	80131b2 <memcpy>
 80155a6:	4621      	mov	r1, r4
 80155a8:	4638      	mov	r0, r7
 80155aa:	f7ff ffa5 	bl	80154f8 <_Bfree>
 80155ae:	4644      	mov	r4, r8
 80155b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80155b4:	3501      	adds	r5, #1
 80155b6:	615e      	str	r6, [r3, #20]
 80155b8:	6125      	str	r5, [r4, #16]
 80155ba:	4620      	mov	r0, r4
 80155bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155c0:	08017fc1 	.word	0x08017fc1
 80155c4:	08017fd2 	.word	0x08017fd2

080155c8 <__hi0bits>:
 80155c8:	0c03      	lsrs	r3, r0, #16
 80155ca:	041b      	lsls	r3, r3, #16
 80155cc:	b9d3      	cbnz	r3, 8015604 <__hi0bits+0x3c>
 80155ce:	0400      	lsls	r0, r0, #16
 80155d0:	2310      	movs	r3, #16
 80155d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80155d6:	bf04      	itt	eq
 80155d8:	0200      	lsleq	r0, r0, #8
 80155da:	3308      	addeq	r3, #8
 80155dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80155e0:	bf04      	itt	eq
 80155e2:	0100      	lsleq	r0, r0, #4
 80155e4:	3304      	addeq	r3, #4
 80155e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80155ea:	bf04      	itt	eq
 80155ec:	0080      	lsleq	r0, r0, #2
 80155ee:	3302      	addeq	r3, #2
 80155f0:	2800      	cmp	r0, #0
 80155f2:	db05      	blt.n	8015600 <__hi0bits+0x38>
 80155f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80155f8:	f103 0301 	add.w	r3, r3, #1
 80155fc:	bf08      	it	eq
 80155fe:	2320      	moveq	r3, #32
 8015600:	4618      	mov	r0, r3
 8015602:	4770      	bx	lr
 8015604:	2300      	movs	r3, #0
 8015606:	e7e4      	b.n	80155d2 <__hi0bits+0xa>

08015608 <__lo0bits>:
 8015608:	6803      	ldr	r3, [r0, #0]
 801560a:	f013 0207 	ands.w	r2, r3, #7
 801560e:	4601      	mov	r1, r0
 8015610:	d00b      	beq.n	801562a <__lo0bits+0x22>
 8015612:	07da      	lsls	r2, r3, #31
 8015614:	d423      	bmi.n	801565e <__lo0bits+0x56>
 8015616:	0798      	lsls	r0, r3, #30
 8015618:	bf49      	itett	mi
 801561a:	085b      	lsrmi	r3, r3, #1
 801561c:	089b      	lsrpl	r3, r3, #2
 801561e:	2001      	movmi	r0, #1
 8015620:	600b      	strmi	r3, [r1, #0]
 8015622:	bf5c      	itt	pl
 8015624:	600b      	strpl	r3, [r1, #0]
 8015626:	2002      	movpl	r0, #2
 8015628:	4770      	bx	lr
 801562a:	b298      	uxth	r0, r3
 801562c:	b9a8      	cbnz	r0, 801565a <__lo0bits+0x52>
 801562e:	0c1b      	lsrs	r3, r3, #16
 8015630:	2010      	movs	r0, #16
 8015632:	b2da      	uxtb	r2, r3
 8015634:	b90a      	cbnz	r2, 801563a <__lo0bits+0x32>
 8015636:	3008      	adds	r0, #8
 8015638:	0a1b      	lsrs	r3, r3, #8
 801563a:	071a      	lsls	r2, r3, #28
 801563c:	bf04      	itt	eq
 801563e:	091b      	lsreq	r3, r3, #4
 8015640:	3004      	addeq	r0, #4
 8015642:	079a      	lsls	r2, r3, #30
 8015644:	bf04      	itt	eq
 8015646:	089b      	lsreq	r3, r3, #2
 8015648:	3002      	addeq	r0, #2
 801564a:	07da      	lsls	r2, r3, #31
 801564c:	d403      	bmi.n	8015656 <__lo0bits+0x4e>
 801564e:	085b      	lsrs	r3, r3, #1
 8015650:	f100 0001 	add.w	r0, r0, #1
 8015654:	d005      	beq.n	8015662 <__lo0bits+0x5a>
 8015656:	600b      	str	r3, [r1, #0]
 8015658:	4770      	bx	lr
 801565a:	4610      	mov	r0, r2
 801565c:	e7e9      	b.n	8015632 <__lo0bits+0x2a>
 801565e:	2000      	movs	r0, #0
 8015660:	4770      	bx	lr
 8015662:	2020      	movs	r0, #32
 8015664:	4770      	bx	lr
	...

08015668 <__i2b>:
 8015668:	b510      	push	{r4, lr}
 801566a:	460c      	mov	r4, r1
 801566c:	2101      	movs	r1, #1
 801566e:	f7ff ff03 	bl	8015478 <_Balloc>
 8015672:	4602      	mov	r2, r0
 8015674:	b928      	cbnz	r0, 8015682 <__i2b+0x1a>
 8015676:	4b05      	ldr	r3, [pc, #20]	; (801568c <__i2b+0x24>)
 8015678:	4805      	ldr	r0, [pc, #20]	; (8015690 <__i2b+0x28>)
 801567a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801567e:	f7fd fc35 	bl	8012eec <__assert_func>
 8015682:	2301      	movs	r3, #1
 8015684:	6144      	str	r4, [r0, #20]
 8015686:	6103      	str	r3, [r0, #16]
 8015688:	bd10      	pop	{r4, pc}
 801568a:	bf00      	nop
 801568c:	08017fc1 	.word	0x08017fc1
 8015690:	08017fd2 	.word	0x08017fd2

08015694 <__multiply>:
 8015694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015698:	4691      	mov	r9, r2
 801569a:	690a      	ldr	r2, [r1, #16]
 801569c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80156a0:	429a      	cmp	r2, r3
 80156a2:	bfb8      	it	lt
 80156a4:	460b      	movlt	r3, r1
 80156a6:	460c      	mov	r4, r1
 80156a8:	bfbc      	itt	lt
 80156aa:	464c      	movlt	r4, r9
 80156ac:	4699      	movlt	r9, r3
 80156ae:	6927      	ldr	r7, [r4, #16]
 80156b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80156b4:	68a3      	ldr	r3, [r4, #8]
 80156b6:	6861      	ldr	r1, [r4, #4]
 80156b8:	eb07 060a 	add.w	r6, r7, sl
 80156bc:	42b3      	cmp	r3, r6
 80156be:	b085      	sub	sp, #20
 80156c0:	bfb8      	it	lt
 80156c2:	3101      	addlt	r1, #1
 80156c4:	f7ff fed8 	bl	8015478 <_Balloc>
 80156c8:	b930      	cbnz	r0, 80156d8 <__multiply+0x44>
 80156ca:	4602      	mov	r2, r0
 80156cc:	4b44      	ldr	r3, [pc, #272]	; (80157e0 <__multiply+0x14c>)
 80156ce:	4845      	ldr	r0, [pc, #276]	; (80157e4 <__multiply+0x150>)
 80156d0:	f240 115d 	movw	r1, #349	; 0x15d
 80156d4:	f7fd fc0a 	bl	8012eec <__assert_func>
 80156d8:	f100 0514 	add.w	r5, r0, #20
 80156dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80156e0:	462b      	mov	r3, r5
 80156e2:	2200      	movs	r2, #0
 80156e4:	4543      	cmp	r3, r8
 80156e6:	d321      	bcc.n	801572c <__multiply+0x98>
 80156e8:	f104 0314 	add.w	r3, r4, #20
 80156ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80156f0:	f109 0314 	add.w	r3, r9, #20
 80156f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80156f8:	9202      	str	r2, [sp, #8]
 80156fa:	1b3a      	subs	r2, r7, r4
 80156fc:	3a15      	subs	r2, #21
 80156fe:	f022 0203 	bic.w	r2, r2, #3
 8015702:	3204      	adds	r2, #4
 8015704:	f104 0115 	add.w	r1, r4, #21
 8015708:	428f      	cmp	r7, r1
 801570a:	bf38      	it	cc
 801570c:	2204      	movcc	r2, #4
 801570e:	9201      	str	r2, [sp, #4]
 8015710:	9a02      	ldr	r2, [sp, #8]
 8015712:	9303      	str	r3, [sp, #12]
 8015714:	429a      	cmp	r2, r3
 8015716:	d80c      	bhi.n	8015732 <__multiply+0x9e>
 8015718:	2e00      	cmp	r6, #0
 801571a:	dd03      	ble.n	8015724 <__multiply+0x90>
 801571c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015720:	2b00      	cmp	r3, #0
 8015722:	d05a      	beq.n	80157da <__multiply+0x146>
 8015724:	6106      	str	r6, [r0, #16]
 8015726:	b005      	add	sp, #20
 8015728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801572c:	f843 2b04 	str.w	r2, [r3], #4
 8015730:	e7d8      	b.n	80156e4 <__multiply+0x50>
 8015732:	f8b3 a000 	ldrh.w	sl, [r3]
 8015736:	f1ba 0f00 	cmp.w	sl, #0
 801573a:	d024      	beq.n	8015786 <__multiply+0xf2>
 801573c:	f104 0e14 	add.w	lr, r4, #20
 8015740:	46a9      	mov	r9, r5
 8015742:	f04f 0c00 	mov.w	ip, #0
 8015746:	f85e 2b04 	ldr.w	r2, [lr], #4
 801574a:	f8d9 1000 	ldr.w	r1, [r9]
 801574e:	fa1f fb82 	uxth.w	fp, r2
 8015752:	b289      	uxth	r1, r1
 8015754:	fb0a 110b 	mla	r1, sl, fp, r1
 8015758:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801575c:	f8d9 2000 	ldr.w	r2, [r9]
 8015760:	4461      	add	r1, ip
 8015762:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015766:	fb0a c20b 	mla	r2, sl, fp, ip
 801576a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801576e:	b289      	uxth	r1, r1
 8015770:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015774:	4577      	cmp	r7, lr
 8015776:	f849 1b04 	str.w	r1, [r9], #4
 801577a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801577e:	d8e2      	bhi.n	8015746 <__multiply+0xb2>
 8015780:	9a01      	ldr	r2, [sp, #4]
 8015782:	f845 c002 	str.w	ip, [r5, r2]
 8015786:	9a03      	ldr	r2, [sp, #12]
 8015788:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801578c:	3304      	adds	r3, #4
 801578e:	f1b9 0f00 	cmp.w	r9, #0
 8015792:	d020      	beq.n	80157d6 <__multiply+0x142>
 8015794:	6829      	ldr	r1, [r5, #0]
 8015796:	f104 0c14 	add.w	ip, r4, #20
 801579a:	46ae      	mov	lr, r5
 801579c:	f04f 0a00 	mov.w	sl, #0
 80157a0:	f8bc b000 	ldrh.w	fp, [ip]
 80157a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80157a8:	fb09 220b 	mla	r2, r9, fp, r2
 80157ac:	4492      	add	sl, r2
 80157ae:	b289      	uxth	r1, r1
 80157b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80157b4:	f84e 1b04 	str.w	r1, [lr], #4
 80157b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80157bc:	f8be 1000 	ldrh.w	r1, [lr]
 80157c0:	0c12      	lsrs	r2, r2, #16
 80157c2:	fb09 1102 	mla	r1, r9, r2, r1
 80157c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80157ca:	4567      	cmp	r7, ip
 80157cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80157d0:	d8e6      	bhi.n	80157a0 <__multiply+0x10c>
 80157d2:	9a01      	ldr	r2, [sp, #4]
 80157d4:	50a9      	str	r1, [r5, r2]
 80157d6:	3504      	adds	r5, #4
 80157d8:	e79a      	b.n	8015710 <__multiply+0x7c>
 80157da:	3e01      	subs	r6, #1
 80157dc:	e79c      	b.n	8015718 <__multiply+0x84>
 80157de:	bf00      	nop
 80157e0:	08017fc1 	.word	0x08017fc1
 80157e4:	08017fd2 	.word	0x08017fd2

080157e8 <__pow5mult>:
 80157e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80157ec:	4615      	mov	r5, r2
 80157ee:	f012 0203 	ands.w	r2, r2, #3
 80157f2:	4606      	mov	r6, r0
 80157f4:	460f      	mov	r7, r1
 80157f6:	d007      	beq.n	8015808 <__pow5mult+0x20>
 80157f8:	4c25      	ldr	r4, [pc, #148]	; (8015890 <__pow5mult+0xa8>)
 80157fa:	3a01      	subs	r2, #1
 80157fc:	2300      	movs	r3, #0
 80157fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015802:	f7ff fe9b 	bl	801553c <__multadd>
 8015806:	4607      	mov	r7, r0
 8015808:	10ad      	asrs	r5, r5, #2
 801580a:	d03d      	beq.n	8015888 <__pow5mult+0xa0>
 801580c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801580e:	b97c      	cbnz	r4, 8015830 <__pow5mult+0x48>
 8015810:	2010      	movs	r0, #16
 8015812:	f7ff fe1d 	bl	8015450 <malloc>
 8015816:	4602      	mov	r2, r0
 8015818:	6270      	str	r0, [r6, #36]	; 0x24
 801581a:	b928      	cbnz	r0, 8015828 <__pow5mult+0x40>
 801581c:	4b1d      	ldr	r3, [pc, #116]	; (8015894 <__pow5mult+0xac>)
 801581e:	481e      	ldr	r0, [pc, #120]	; (8015898 <__pow5mult+0xb0>)
 8015820:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015824:	f7fd fb62 	bl	8012eec <__assert_func>
 8015828:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801582c:	6004      	str	r4, [r0, #0]
 801582e:	60c4      	str	r4, [r0, #12]
 8015830:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015834:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015838:	b94c      	cbnz	r4, 801584e <__pow5mult+0x66>
 801583a:	f240 2171 	movw	r1, #625	; 0x271
 801583e:	4630      	mov	r0, r6
 8015840:	f7ff ff12 	bl	8015668 <__i2b>
 8015844:	2300      	movs	r3, #0
 8015846:	f8c8 0008 	str.w	r0, [r8, #8]
 801584a:	4604      	mov	r4, r0
 801584c:	6003      	str	r3, [r0, #0]
 801584e:	f04f 0900 	mov.w	r9, #0
 8015852:	07eb      	lsls	r3, r5, #31
 8015854:	d50a      	bpl.n	801586c <__pow5mult+0x84>
 8015856:	4639      	mov	r1, r7
 8015858:	4622      	mov	r2, r4
 801585a:	4630      	mov	r0, r6
 801585c:	f7ff ff1a 	bl	8015694 <__multiply>
 8015860:	4639      	mov	r1, r7
 8015862:	4680      	mov	r8, r0
 8015864:	4630      	mov	r0, r6
 8015866:	f7ff fe47 	bl	80154f8 <_Bfree>
 801586a:	4647      	mov	r7, r8
 801586c:	106d      	asrs	r5, r5, #1
 801586e:	d00b      	beq.n	8015888 <__pow5mult+0xa0>
 8015870:	6820      	ldr	r0, [r4, #0]
 8015872:	b938      	cbnz	r0, 8015884 <__pow5mult+0x9c>
 8015874:	4622      	mov	r2, r4
 8015876:	4621      	mov	r1, r4
 8015878:	4630      	mov	r0, r6
 801587a:	f7ff ff0b 	bl	8015694 <__multiply>
 801587e:	6020      	str	r0, [r4, #0]
 8015880:	f8c0 9000 	str.w	r9, [r0]
 8015884:	4604      	mov	r4, r0
 8015886:	e7e4      	b.n	8015852 <__pow5mult+0x6a>
 8015888:	4638      	mov	r0, r7
 801588a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801588e:	bf00      	nop
 8015890:	08018120 	.word	0x08018120
 8015894:	08017ee5 	.word	0x08017ee5
 8015898:	08017fd2 	.word	0x08017fd2

0801589c <__lshift>:
 801589c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158a0:	460c      	mov	r4, r1
 80158a2:	6849      	ldr	r1, [r1, #4]
 80158a4:	6923      	ldr	r3, [r4, #16]
 80158a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80158aa:	68a3      	ldr	r3, [r4, #8]
 80158ac:	4607      	mov	r7, r0
 80158ae:	4691      	mov	r9, r2
 80158b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80158b4:	f108 0601 	add.w	r6, r8, #1
 80158b8:	42b3      	cmp	r3, r6
 80158ba:	db0b      	blt.n	80158d4 <__lshift+0x38>
 80158bc:	4638      	mov	r0, r7
 80158be:	f7ff fddb 	bl	8015478 <_Balloc>
 80158c2:	4605      	mov	r5, r0
 80158c4:	b948      	cbnz	r0, 80158da <__lshift+0x3e>
 80158c6:	4602      	mov	r2, r0
 80158c8:	4b2a      	ldr	r3, [pc, #168]	; (8015974 <__lshift+0xd8>)
 80158ca:	482b      	ldr	r0, [pc, #172]	; (8015978 <__lshift+0xdc>)
 80158cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80158d0:	f7fd fb0c 	bl	8012eec <__assert_func>
 80158d4:	3101      	adds	r1, #1
 80158d6:	005b      	lsls	r3, r3, #1
 80158d8:	e7ee      	b.n	80158b8 <__lshift+0x1c>
 80158da:	2300      	movs	r3, #0
 80158dc:	f100 0114 	add.w	r1, r0, #20
 80158e0:	f100 0210 	add.w	r2, r0, #16
 80158e4:	4618      	mov	r0, r3
 80158e6:	4553      	cmp	r3, sl
 80158e8:	db37      	blt.n	801595a <__lshift+0xbe>
 80158ea:	6920      	ldr	r0, [r4, #16]
 80158ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80158f0:	f104 0314 	add.w	r3, r4, #20
 80158f4:	f019 091f 	ands.w	r9, r9, #31
 80158f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80158fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015900:	d02f      	beq.n	8015962 <__lshift+0xc6>
 8015902:	f1c9 0e20 	rsb	lr, r9, #32
 8015906:	468a      	mov	sl, r1
 8015908:	f04f 0c00 	mov.w	ip, #0
 801590c:	681a      	ldr	r2, [r3, #0]
 801590e:	fa02 f209 	lsl.w	r2, r2, r9
 8015912:	ea42 020c 	orr.w	r2, r2, ip
 8015916:	f84a 2b04 	str.w	r2, [sl], #4
 801591a:	f853 2b04 	ldr.w	r2, [r3], #4
 801591e:	4298      	cmp	r0, r3
 8015920:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015924:	d8f2      	bhi.n	801590c <__lshift+0x70>
 8015926:	1b03      	subs	r3, r0, r4
 8015928:	3b15      	subs	r3, #21
 801592a:	f023 0303 	bic.w	r3, r3, #3
 801592e:	3304      	adds	r3, #4
 8015930:	f104 0215 	add.w	r2, r4, #21
 8015934:	4290      	cmp	r0, r2
 8015936:	bf38      	it	cc
 8015938:	2304      	movcc	r3, #4
 801593a:	f841 c003 	str.w	ip, [r1, r3]
 801593e:	f1bc 0f00 	cmp.w	ip, #0
 8015942:	d001      	beq.n	8015948 <__lshift+0xac>
 8015944:	f108 0602 	add.w	r6, r8, #2
 8015948:	3e01      	subs	r6, #1
 801594a:	4638      	mov	r0, r7
 801594c:	612e      	str	r6, [r5, #16]
 801594e:	4621      	mov	r1, r4
 8015950:	f7ff fdd2 	bl	80154f8 <_Bfree>
 8015954:	4628      	mov	r0, r5
 8015956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801595a:	f842 0f04 	str.w	r0, [r2, #4]!
 801595e:	3301      	adds	r3, #1
 8015960:	e7c1      	b.n	80158e6 <__lshift+0x4a>
 8015962:	3904      	subs	r1, #4
 8015964:	f853 2b04 	ldr.w	r2, [r3], #4
 8015968:	f841 2f04 	str.w	r2, [r1, #4]!
 801596c:	4298      	cmp	r0, r3
 801596e:	d8f9      	bhi.n	8015964 <__lshift+0xc8>
 8015970:	e7ea      	b.n	8015948 <__lshift+0xac>
 8015972:	bf00      	nop
 8015974:	08017fc1 	.word	0x08017fc1
 8015978:	08017fd2 	.word	0x08017fd2

0801597c <__mcmp>:
 801597c:	b530      	push	{r4, r5, lr}
 801597e:	6902      	ldr	r2, [r0, #16]
 8015980:	690c      	ldr	r4, [r1, #16]
 8015982:	1b12      	subs	r2, r2, r4
 8015984:	d10e      	bne.n	80159a4 <__mcmp+0x28>
 8015986:	f100 0314 	add.w	r3, r0, #20
 801598a:	3114      	adds	r1, #20
 801598c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015990:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015994:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015998:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801599c:	42a5      	cmp	r5, r4
 801599e:	d003      	beq.n	80159a8 <__mcmp+0x2c>
 80159a0:	d305      	bcc.n	80159ae <__mcmp+0x32>
 80159a2:	2201      	movs	r2, #1
 80159a4:	4610      	mov	r0, r2
 80159a6:	bd30      	pop	{r4, r5, pc}
 80159a8:	4283      	cmp	r3, r0
 80159aa:	d3f3      	bcc.n	8015994 <__mcmp+0x18>
 80159ac:	e7fa      	b.n	80159a4 <__mcmp+0x28>
 80159ae:	f04f 32ff 	mov.w	r2, #4294967295
 80159b2:	e7f7      	b.n	80159a4 <__mcmp+0x28>

080159b4 <__mdiff>:
 80159b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159b8:	460c      	mov	r4, r1
 80159ba:	4606      	mov	r6, r0
 80159bc:	4611      	mov	r1, r2
 80159be:	4620      	mov	r0, r4
 80159c0:	4690      	mov	r8, r2
 80159c2:	f7ff ffdb 	bl	801597c <__mcmp>
 80159c6:	1e05      	subs	r5, r0, #0
 80159c8:	d110      	bne.n	80159ec <__mdiff+0x38>
 80159ca:	4629      	mov	r1, r5
 80159cc:	4630      	mov	r0, r6
 80159ce:	f7ff fd53 	bl	8015478 <_Balloc>
 80159d2:	b930      	cbnz	r0, 80159e2 <__mdiff+0x2e>
 80159d4:	4b3a      	ldr	r3, [pc, #232]	; (8015ac0 <__mdiff+0x10c>)
 80159d6:	4602      	mov	r2, r0
 80159d8:	f240 2132 	movw	r1, #562	; 0x232
 80159dc:	4839      	ldr	r0, [pc, #228]	; (8015ac4 <__mdiff+0x110>)
 80159de:	f7fd fa85 	bl	8012eec <__assert_func>
 80159e2:	2301      	movs	r3, #1
 80159e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80159e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159ec:	bfa4      	itt	ge
 80159ee:	4643      	movge	r3, r8
 80159f0:	46a0      	movge	r8, r4
 80159f2:	4630      	mov	r0, r6
 80159f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80159f8:	bfa6      	itte	ge
 80159fa:	461c      	movge	r4, r3
 80159fc:	2500      	movge	r5, #0
 80159fe:	2501      	movlt	r5, #1
 8015a00:	f7ff fd3a 	bl	8015478 <_Balloc>
 8015a04:	b920      	cbnz	r0, 8015a10 <__mdiff+0x5c>
 8015a06:	4b2e      	ldr	r3, [pc, #184]	; (8015ac0 <__mdiff+0x10c>)
 8015a08:	4602      	mov	r2, r0
 8015a0a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015a0e:	e7e5      	b.n	80159dc <__mdiff+0x28>
 8015a10:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015a14:	6926      	ldr	r6, [r4, #16]
 8015a16:	60c5      	str	r5, [r0, #12]
 8015a18:	f104 0914 	add.w	r9, r4, #20
 8015a1c:	f108 0514 	add.w	r5, r8, #20
 8015a20:	f100 0e14 	add.w	lr, r0, #20
 8015a24:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015a28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015a2c:	f108 0210 	add.w	r2, r8, #16
 8015a30:	46f2      	mov	sl, lr
 8015a32:	2100      	movs	r1, #0
 8015a34:	f859 3b04 	ldr.w	r3, [r9], #4
 8015a38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015a3c:	fa1f f883 	uxth.w	r8, r3
 8015a40:	fa11 f18b 	uxtah	r1, r1, fp
 8015a44:	0c1b      	lsrs	r3, r3, #16
 8015a46:	eba1 0808 	sub.w	r8, r1, r8
 8015a4a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015a4e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015a52:	fa1f f888 	uxth.w	r8, r8
 8015a56:	1419      	asrs	r1, r3, #16
 8015a58:	454e      	cmp	r6, r9
 8015a5a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015a5e:	f84a 3b04 	str.w	r3, [sl], #4
 8015a62:	d8e7      	bhi.n	8015a34 <__mdiff+0x80>
 8015a64:	1b33      	subs	r3, r6, r4
 8015a66:	3b15      	subs	r3, #21
 8015a68:	f023 0303 	bic.w	r3, r3, #3
 8015a6c:	3304      	adds	r3, #4
 8015a6e:	3415      	adds	r4, #21
 8015a70:	42a6      	cmp	r6, r4
 8015a72:	bf38      	it	cc
 8015a74:	2304      	movcc	r3, #4
 8015a76:	441d      	add	r5, r3
 8015a78:	4473      	add	r3, lr
 8015a7a:	469e      	mov	lr, r3
 8015a7c:	462e      	mov	r6, r5
 8015a7e:	4566      	cmp	r6, ip
 8015a80:	d30e      	bcc.n	8015aa0 <__mdiff+0xec>
 8015a82:	f10c 0203 	add.w	r2, ip, #3
 8015a86:	1b52      	subs	r2, r2, r5
 8015a88:	f022 0203 	bic.w	r2, r2, #3
 8015a8c:	3d03      	subs	r5, #3
 8015a8e:	45ac      	cmp	ip, r5
 8015a90:	bf38      	it	cc
 8015a92:	2200      	movcc	r2, #0
 8015a94:	441a      	add	r2, r3
 8015a96:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015a9a:	b17b      	cbz	r3, 8015abc <__mdiff+0x108>
 8015a9c:	6107      	str	r7, [r0, #16]
 8015a9e:	e7a3      	b.n	80159e8 <__mdiff+0x34>
 8015aa0:	f856 8b04 	ldr.w	r8, [r6], #4
 8015aa4:	fa11 f288 	uxtah	r2, r1, r8
 8015aa8:	1414      	asrs	r4, r2, #16
 8015aaa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015aae:	b292      	uxth	r2, r2
 8015ab0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015ab4:	f84e 2b04 	str.w	r2, [lr], #4
 8015ab8:	1421      	asrs	r1, r4, #16
 8015aba:	e7e0      	b.n	8015a7e <__mdiff+0xca>
 8015abc:	3f01      	subs	r7, #1
 8015abe:	e7ea      	b.n	8015a96 <__mdiff+0xe2>
 8015ac0:	08017fc1 	.word	0x08017fc1
 8015ac4:	08017fd2 	.word	0x08017fd2

08015ac8 <__d2b>:
 8015ac8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015acc:	4689      	mov	r9, r1
 8015ace:	2101      	movs	r1, #1
 8015ad0:	ec57 6b10 	vmov	r6, r7, d0
 8015ad4:	4690      	mov	r8, r2
 8015ad6:	f7ff fccf 	bl	8015478 <_Balloc>
 8015ada:	4604      	mov	r4, r0
 8015adc:	b930      	cbnz	r0, 8015aec <__d2b+0x24>
 8015ade:	4602      	mov	r2, r0
 8015ae0:	4b25      	ldr	r3, [pc, #148]	; (8015b78 <__d2b+0xb0>)
 8015ae2:	4826      	ldr	r0, [pc, #152]	; (8015b7c <__d2b+0xb4>)
 8015ae4:	f240 310a 	movw	r1, #778	; 0x30a
 8015ae8:	f7fd fa00 	bl	8012eec <__assert_func>
 8015aec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015af0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015af4:	bb35      	cbnz	r5, 8015b44 <__d2b+0x7c>
 8015af6:	2e00      	cmp	r6, #0
 8015af8:	9301      	str	r3, [sp, #4]
 8015afa:	d028      	beq.n	8015b4e <__d2b+0x86>
 8015afc:	4668      	mov	r0, sp
 8015afe:	9600      	str	r6, [sp, #0]
 8015b00:	f7ff fd82 	bl	8015608 <__lo0bits>
 8015b04:	9900      	ldr	r1, [sp, #0]
 8015b06:	b300      	cbz	r0, 8015b4a <__d2b+0x82>
 8015b08:	9a01      	ldr	r2, [sp, #4]
 8015b0a:	f1c0 0320 	rsb	r3, r0, #32
 8015b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8015b12:	430b      	orrs	r3, r1
 8015b14:	40c2      	lsrs	r2, r0
 8015b16:	6163      	str	r3, [r4, #20]
 8015b18:	9201      	str	r2, [sp, #4]
 8015b1a:	9b01      	ldr	r3, [sp, #4]
 8015b1c:	61a3      	str	r3, [r4, #24]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	bf14      	ite	ne
 8015b22:	2202      	movne	r2, #2
 8015b24:	2201      	moveq	r2, #1
 8015b26:	6122      	str	r2, [r4, #16]
 8015b28:	b1d5      	cbz	r5, 8015b60 <__d2b+0x98>
 8015b2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015b2e:	4405      	add	r5, r0
 8015b30:	f8c9 5000 	str.w	r5, [r9]
 8015b34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015b38:	f8c8 0000 	str.w	r0, [r8]
 8015b3c:	4620      	mov	r0, r4
 8015b3e:	b003      	add	sp, #12
 8015b40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015b48:	e7d5      	b.n	8015af6 <__d2b+0x2e>
 8015b4a:	6161      	str	r1, [r4, #20]
 8015b4c:	e7e5      	b.n	8015b1a <__d2b+0x52>
 8015b4e:	a801      	add	r0, sp, #4
 8015b50:	f7ff fd5a 	bl	8015608 <__lo0bits>
 8015b54:	9b01      	ldr	r3, [sp, #4]
 8015b56:	6163      	str	r3, [r4, #20]
 8015b58:	2201      	movs	r2, #1
 8015b5a:	6122      	str	r2, [r4, #16]
 8015b5c:	3020      	adds	r0, #32
 8015b5e:	e7e3      	b.n	8015b28 <__d2b+0x60>
 8015b60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015b64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015b68:	f8c9 0000 	str.w	r0, [r9]
 8015b6c:	6918      	ldr	r0, [r3, #16]
 8015b6e:	f7ff fd2b 	bl	80155c8 <__hi0bits>
 8015b72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015b76:	e7df      	b.n	8015b38 <__d2b+0x70>
 8015b78:	08017fc1 	.word	0x08017fc1
 8015b7c:	08017fd2 	.word	0x08017fd2

08015b80 <_calloc_r>:
 8015b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015b82:	fba1 2402 	umull	r2, r4, r1, r2
 8015b86:	b94c      	cbnz	r4, 8015b9c <_calloc_r+0x1c>
 8015b88:	4611      	mov	r1, r2
 8015b8a:	9201      	str	r2, [sp, #4]
 8015b8c:	f7fd fb62 	bl	8013254 <_malloc_r>
 8015b90:	9a01      	ldr	r2, [sp, #4]
 8015b92:	4605      	mov	r5, r0
 8015b94:	b930      	cbnz	r0, 8015ba4 <_calloc_r+0x24>
 8015b96:	4628      	mov	r0, r5
 8015b98:	b003      	add	sp, #12
 8015b9a:	bd30      	pop	{r4, r5, pc}
 8015b9c:	220c      	movs	r2, #12
 8015b9e:	6002      	str	r2, [r0, #0]
 8015ba0:	2500      	movs	r5, #0
 8015ba2:	e7f8      	b.n	8015b96 <_calloc_r+0x16>
 8015ba4:	4621      	mov	r1, r4
 8015ba6:	f7fd fb2c 	bl	8013202 <memset>
 8015baa:	e7f4      	b.n	8015b96 <_calloc_r+0x16>

08015bac <_free_r>:
 8015bac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015bae:	2900      	cmp	r1, #0
 8015bb0:	d044      	beq.n	8015c3c <_free_r+0x90>
 8015bb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015bb6:	9001      	str	r0, [sp, #4]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	f1a1 0404 	sub.w	r4, r1, #4
 8015bbe:	bfb8      	it	lt
 8015bc0:	18e4      	addlt	r4, r4, r3
 8015bc2:	f7ff fc4d 	bl	8015460 <__malloc_lock>
 8015bc6:	4a1e      	ldr	r2, [pc, #120]	; (8015c40 <_free_r+0x94>)
 8015bc8:	9801      	ldr	r0, [sp, #4]
 8015bca:	6813      	ldr	r3, [r2, #0]
 8015bcc:	b933      	cbnz	r3, 8015bdc <_free_r+0x30>
 8015bce:	6063      	str	r3, [r4, #4]
 8015bd0:	6014      	str	r4, [r2, #0]
 8015bd2:	b003      	add	sp, #12
 8015bd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015bd8:	f7ff bc48 	b.w	801546c <__malloc_unlock>
 8015bdc:	42a3      	cmp	r3, r4
 8015bde:	d908      	bls.n	8015bf2 <_free_r+0x46>
 8015be0:	6825      	ldr	r5, [r4, #0]
 8015be2:	1961      	adds	r1, r4, r5
 8015be4:	428b      	cmp	r3, r1
 8015be6:	bf01      	itttt	eq
 8015be8:	6819      	ldreq	r1, [r3, #0]
 8015bea:	685b      	ldreq	r3, [r3, #4]
 8015bec:	1949      	addeq	r1, r1, r5
 8015bee:	6021      	streq	r1, [r4, #0]
 8015bf0:	e7ed      	b.n	8015bce <_free_r+0x22>
 8015bf2:	461a      	mov	r2, r3
 8015bf4:	685b      	ldr	r3, [r3, #4]
 8015bf6:	b10b      	cbz	r3, 8015bfc <_free_r+0x50>
 8015bf8:	42a3      	cmp	r3, r4
 8015bfa:	d9fa      	bls.n	8015bf2 <_free_r+0x46>
 8015bfc:	6811      	ldr	r1, [r2, #0]
 8015bfe:	1855      	adds	r5, r2, r1
 8015c00:	42a5      	cmp	r5, r4
 8015c02:	d10b      	bne.n	8015c1c <_free_r+0x70>
 8015c04:	6824      	ldr	r4, [r4, #0]
 8015c06:	4421      	add	r1, r4
 8015c08:	1854      	adds	r4, r2, r1
 8015c0a:	42a3      	cmp	r3, r4
 8015c0c:	6011      	str	r1, [r2, #0]
 8015c0e:	d1e0      	bne.n	8015bd2 <_free_r+0x26>
 8015c10:	681c      	ldr	r4, [r3, #0]
 8015c12:	685b      	ldr	r3, [r3, #4]
 8015c14:	6053      	str	r3, [r2, #4]
 8015c16:	4421      	add	r1, r4
 8015c18:	6011      	str	r1, [r2, #0]
 8015c1a:	e7da      	b.n	8015bd2 <_free_r+0x26>
 8015c1c:	d902      	bls.n	8015c24 <_free_r+0x78>
 8015c1e:	230c      	movs	r3, #12
 8015c20:	6003      	str	r3, [r0, #0]
 8015c22:	e7d6      	b.n	8015bd2 <_free_r+0x26>
 8015c24:	6825      	ldr	r5, [r4, #0]
 8015c26:	1961      	adds	r1, r4, r5
 8015c28:	428b      	cmp	r3, r1
 8015c2a:	bf04      	itt	eq
 8015c2c:	6819      	ldreq	r1, [r3, #0]
 8015c2e:	685b      	ldreq	r3, [r3, #4]
 8015c30:	6063      	str	r3, [r4, #4]
 8015c32:	bf04      	itt	eq
 8015c34:	1949      	addeq	r1, r1, r5
 8015c36:	6021      	streq	r1, [r4, #0]
 8015c38:	6054      	str	r4, [r2, #4]
 8015c3a:	e7ca      	b.n	8015bd2 <_free_r+0x26>
 8015c3c:	b003      	add	sp, #12
 8015c3e:	bd30      	pop	{r4, r5, pc}
 8015c40:	20005088 	.word	0x20005088

08015c44 <_realloc_r>:
 8015c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c48:	4680      	mov	r8, r0
 8015c4a:	4614      	mov	r4, r2
 8015c4c:	460e      	mov	r6, r1
 8015c4e:	b921      	cbnz	r1, 8015c5a <_realloc_r+0x16>
 8015c50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c54:	4611      	mov	r1, r2
 8015c56:	f7fd bafd 	b.w	8013254 <_malloc_r>
 8015c5a:	b92a      	cbnz	r2, 8015c68 <_realloc_r+0x24>
 8015c5c:	f7ff ffa6 	bl	8015bac <_free_r>
 8015c60:	4625      	mov	r5, r4
 8015c62:	4628      	mov	r0, r5
 8015c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c68:	f000 fa00 	bl	801606c <_malloc_usable_size_r>
 8015c6c:	4284      	cmp	r4, r0
 8015c6e:	4607      	mov	r7, r0
 8015c70:	d802      	bhi.n	8015c78 <_realloc_r+0x34>
 8015c72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015c76:	d812      	bhi.n	8015c9e <_realloc_r+0x5a>
 8015c78:	4621      	mov	r1, r4
 8015c7a:	4640      	mov	r0, r8
 8015c7c:	f7fd faea 	bl	8013254 <_malloc_r>
 8015c80:	4605      	mov	r5, r0
 8015c82:	2800      	cmp	r0, #0
 8015c84:	d0ed      	beq.n	8015c62 <_realloc_r+0x1e>
 8015c86:	42bc      	cmp	r4, r7
 8015c88:	4622      	mov	r2, r4
 8015c8a:	4631      	mov	r1, r6
 8015c8c:	bf28      	it	cs
 8015c8e:	463a      	movcs	r2, r7
 8015c90:	f7fd fa8f 	bl	80131b2 <memcpy>
 8015c94:	4631      	mov	r1, r6
 8015c96:	4640      	mov	r0, r8
 8015c98:	f7ff ff88 	bl	8015bac <_free_r>
 8015c9c:	e7e1      	b.n	8015c62 <_realloc_r+0x1e>
 8015c9e:	4635      	mov	r5, r6
 8015ca0:	e7df      	b.n	8015c62 <_realloc_r+0x1e>

08015ca2 <__ssputs_r>:
 8015ca2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ca6:	688e      	ldr	r6, [r1, #8]
 8015ca8:	429e      	cmp	r6, r3
 8015caa:	4682      	mov	sl, r0
 8015cac:	460c      	mov	r4, r1
 8015cae:	4690      	mov	r8, r2
 8015cb0:	461f      	mov	r7, r3
 8015cb2:	d838      	bhi.n	8015d26 <__ssputs_r+0x84>
 8015cb4:	898a      	ldrh	r2, [r1, #12]
 8015cb6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015cba:	d032      	beq.n	8015d22 <__ssputs_r+0x80>
 8015cbc:	6825      	ldr	r5, [r4, #0]
 8015cbe:	6909      	ldr	r1, [r1, #16]
 8015cc0:	eba5 0901 	sub.w	r9, r5, r1
 8015cc4:	6965      	ldr	r5, [r4, #20]
 8015cc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015cca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015cce:	3301      	adds	r3, #1
 8015cd0:	444b      	add	r3, r9
 8015cd2:	106d      	asrs	r5, r5, #1
 8015cd4:	429d      	cmp	r5, r3
 8015cd6:	bf38      	it	cc
 8015cd8:	461d      	movcc	r5, r3
 8015cda:	0553      	lsls	r3, r2, #21
 8015cdc:	d531      	bpl.n	8015d42 <__ssputs_r+0xa0>
 8015cde:	4629      	mov	r1, r5
 8015ce0:	f7fd fab8 	bl	8013254 <_malloc_r>
 8015ce4:	4606      	mov	r6, r0
 8015ce6:	b950      	cbnz	r0, 8015cfe <__ssputs_r+0x5c>
 8015ce8:	230c      	movs	r3, #12
 8015cea:	f8ca 3000 	str.w	r3, [sl]
 8015cee:	89a3      	ldrh	r3, [r4, #12]
 8015cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015cf4:	81a3      	strh	r3, [r4, #12]
 8015cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8015cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cfe:	6921      	ldr	r1, [r4, #16]
 8015d00:	464a      	mov	r2, r9
 8015d02:	f7fd fa56 	bl	80131b2 <memcpy>
 8015d06:	89a3      	ldrh	r3, [r4, #12]
 8015d08:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d10:	81a3      	strh	r3, [r4, #12]
 8015d12:	6126      	str	r6, [r4, #16]
 8015d14:	6165      	str	r5, [r4, #20]
 8015d16:	444e      	add	r6, r9
 8015d18:	eba5 0509 	sub.w	r5, r5, r9
 8015d1c:	6026      	str	r6, [r4, #0]
 8015d1e:	60a5      	str	r5, [r4, #8]
 8015d20:	463e      	mov	r6, r7
 8015d22:	42be      	cmp	r6, r7
 8015d24:	d900      	bls.n	8015d28 <__ssputs_r+0x86>
 8015d26:	463e      	mov	r6, r7
 8015d28:	6820      	ldr	r0, [r4, #0]
 8015d2a:	4632      	mov	r2, r6
 8015d2c:	4641      	mov	r1, r8
 8015d2e:	f7fd fa4e 	bl	80131ce <memmove>
 8015d32:	68a3      	ldr	r3, [r4, #8]
 8015d34:	1b9b      	subs	r3, r3, r6
 8015d36:	60a3      	str	r3, [r4, #8]
 8015d38:	6823      	ldr	r3, [r4, #0]
 8015d3a:	4433      	add	r3, r6
 8015d3c:	6023      	str	r3, [r4, #0]
 8015d3e:	2000      	movs	r0, #0
 8015d40:	e7db      	b.n	8015cfa <__ssputs_r+0x58>
 8015d42:	462a      	mov	r2, r5
 8015d44:	f7ff ff7e 	bl	8015c44 <_realloc_r>
 8015d48:	4606      	mov	r6, r0
 8015d4a:	2800      	cmp	r0, #0
 8015d4c:	d1e1      	bne.n	8015d12 <__ssputs_r+0x70>
 8015d4e:	6921      	ldr	r1, [r4, #16]
 8015d50:	4650      	mov	r0, sl
 8015d52:	f7ff ff2b 	bl	8015bac <_free_r>
 8015d56:	e7c7      	b.n	8015ce8 <__ssputs_r+0x46>

08015d58 <_svfiprintf_r>:
 8015d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d5c:	4698      	mov	r8, r3
 8015d5e:	898b      	ldrh	r3, [r1, #12]
 8015d60:	061b      	lsls	r3, r3, #24
 8015d62:	b09d      	sub	sp, #116	; 0x74
 8015d64:	4607      	mov	r7, r0
 8015d66:	460d      	mov	r5, r1
 8015d68:	4614      	mov	r4, r2
 8015d6a:	d50e      	bpl.n	8015d8a <_svfiprintf_r+0x32>
 8015d6c:	690b      	ldr	r3, [r1, #16]
 8015d6e:	b963      	cbnz	r3, 8015d8a <_svfiprintf_r+0x32>
 8015d70:	2140      	movs	r1, #64	; 0x40
 8015d72:	f7fd fa6f 	bl	8013254 <_malloc_r>
 8015d76:	6028      	str	r0, [r5, #0]
 8015d78:	6128      	str	r0, [r5, #16]
 8015d7a:	b920      	cbnz	r0, 8015d86 <_svfiprintf_r+0x2e>
 8015d7c:	230c      	movs	r3, #12
 8015d7e:	603b      	str	r3, [r7, #0]
 8015d80:	f04f 30ff 	mov.w	r0, #4294967295
 8015d84:	e0d1      	b.n	8015f2a <_svfiprintf_r+0x1d2>
 8015d86:	2340      	movs	r3, #64	; 0x40
 8015d88:	616b      	str	r3, [r5, #20]
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8015d8e:	2320      	movs	r3, #32
 8015d90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015d94:	f8cd 800c 	str.w	r8, [sp, #12]
 8015d98:	2330      	movs	r3, #48	; 0x30
 8015d9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015f44 <_svfiprintf_r+0x1ec>
 8015d9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015da2:	f04f 0901 	mov.w	r9, #1
 8015da6:	4623      	mov	r3, r4
 8015da8:	469a      	mov	sl, r3
 8015daa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015dae:	b10a      	cbz	r2, 8015db4 <_svfiprintf_r+0x5c>
 8015db0:	2a25      	cmp	r2, #37	; 0x25
 8015db2:	d1f9      	bne.n	8015da8 <_svfiprintf_r+0x50>
 8015db4:	ebba 0b04 	subs.w	fp, sl, r4
 8015db8:	d00b      	beq.n	8015dd2 <_svfiprintf_r+0x7a>
 8015dba:	465b      	mov	r3, fp
 8015dbc:	4622      	mov	r2, r4
 8015dbe:	4629      	mov	r1, r5
 8015dc0:	4638      	mov	r0, r7
 8015dc2:	f7ff ff6e 	bl	8015ca2 <__ssputs_r>
 8015dc6:	3001      	adds	r0, #1
 8015dc8:	f000 80aa 	beq.w	8015f20 <_svfiprintf_r+0x1c8>
 8015dcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015dce:	445a      	add	r2, fp
 8015dd0:	9209      	str	r2, [sp, #36]	; 0x24
 8015dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	f000 80a2 	beq.w	8015f20 <_svfiprintf_r+0x1c8>
 8015ddc:	2300      	movs	r3, #0
 8015dde:	f04f 32ff 	mov.w	r2, #4294967295
 8015de2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015de6:	f10a 0a01 	add.w	sl, sl, #1
 8015dea:	9304      	str	r3, [sp, #16]
 8015dec:	9307      	str	r3, [sp, #28]
 8015dee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015df2:	931a      	str	r3, [sp, #104]	; 0x68
 8015df4:	4654      	mov	r4, sl
 8015df6:	2205      	movs	r2, #5
 8015df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015dfc:	4851      	ldr	r0, [pc, #324]	; (8015f44 <_svfiprintf_r+0x1ec>)
 8015dfe:	f7ea f9ef 	bl	80001e0 <memchr>
 8015e02:	9a04      	ldr	r2, [sp, #16]
 8015e04:	b9d8      	cbnz	r0, 8015e3e <_svfiprintf_r+0xe6>
 8015e06:	06d0      	lsls	r0, r2, #27
 8015e08:	bf44      	itt	mi
 8015e0a:	2320      	movmi	r3, #32
 8015e0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e10:	0711      	lsls	r1, r2, #28
 8015e12:	bf44      	itt	mi
 8015e14:	232b      	movmi	r3, #43	; 0x2b
 8015e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e1a:	f89a 3000 	ldrb.w	r3, [sl]
 8015e1e:	2b2a      	cmp	r3, #42	; 0x2a
 8015e20:	d015      	beq.n	8015e4e <_svfiprintf_r+0xf6>
 8015e22:	9a07      	ldr	r2, [sp, #28]
 8015e24:	4654      	mov	r4, sl
 8015e26:	2000      	movs	r0, #0
 8015e28:	f04f 0c0a 	mov.w	ip, #10
 8015e2c:	4621      	mov	r1, r4
 8015e2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015e32:	3b30      	subs	r3, #48	; 0x30
 8015e34:	2b09      	cmp	r3, #9
 8015e36:	d94e      	bls.n	8015ed6 <_svfiprintf_r+0x17e>
 8015e38:	b1b0      	cbz	r0, 8015e68 <_svfiprintf_r+0x110>
 8015e3a:	9207      	str	r2, [sp, #28]
 8015e3c:	e014      	b.n	8015e68 <_svfiprintf_r+0x110>
 8015e3e:	eba0 0308 	sub.w	r3, r0, r8
 8015e42:	fa09 f303 	lsl.w	r3, r9, r3
 8015e46:	4313      	orrs	r3, r2
 8015e48:	9304      	str	r3, [sp, #16]
 8015e4a:	46a2      	mov	sl, r4
 8015e4c:	e7d2      	b.n	8015df4 <_svfiprintf_r+0x9c>
 8015e4e:	9b03      	ldr	r3, [sp, #12]
 8015e50:	1d19      	adds	r1, r3, #4
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	9103      	str	r1, [sp, #12]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	bfbb      	ittet	lt
 8015e5a:	425b      	neglt	r3, r3
 8015e5c:	f042 0202 	orrlt.w	r2, r2, #2
 8015e60:	9307      	strge	r3, [sp, #28]
 8015e62:	9307      	strlt	r3, [sp, #28]
 8015e64:	bfb8      	it	lt
 8015e66:	9204      	strlt	r2, [sp, #16]
 8015e68:	7823      	ldrb	r3, [r4, #0]
 8015e6a:	2b2e      	cmp	r3, #46	; 0x2e
 8015e6c:	d10c      	bne.n	8015e88 <_svfiprintf_r+0x130>
 8015e6e:	7863      	ldrb	r3, [r4, #1]
 8015e70:	2b2a      	cmp	r3, #42	; 0x2a
 8015e72:	d135      	bne.n	8015ee0 <_svfiprintf_r+0x188>
 8015e74:	9b03      	ldr	r3, [sp, #12]
 8015e76:	1d1a      	adds	r2, r3, #4
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	9203      	str	r2, [sp, #12]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	bfb8      	it	lt
 8015e80:	f04f 33ff 	movlt.w	r3, #4294967295
 8015e84:	3402      	adds	r4, #2
 8015e86:	9305      	str	r3, [sp, #20]
 8015e88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015f54 <_svfiprintf_r+0x1fc>
 8015e8c:	7821      	ldrb	r1, [r4, #0]
 8015e8e:	2203      	movs	r2, #3
 8015e90:	4650      	mov	r0, sl
 8015e92:	f7ea f9a5 	bl	80001e0 <memchr>
 8015e96:	b140      	cbz	r0, 8015eaa <_svfiprintf_r+0x152>
 8015e98:	2340      	movs	r3, #64	; 0x40
 8015e9a:	eba0 000a 	sub.w	r0, r0, sl
 8015e9e:	fa03 f000 	lsl.w	r0, r3, r0
 8015ea2:	9b04      	ldr	r3, [sp, #16]
 8015ea4:	4303      	orrs	r3, r0
 8015ea6:	3401      	adds	r4, #1
 8015ea8:	9304      	str	r3, [sp, #16]
 8015eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015eae:	4826      	ldr	r0, [pc, #152]	; (8015f48 <_svfiprintf_r+0x1f0>)
 8015eb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015eb4:	2206      	movs	r2, #6
 8015eb6:	f7ea f993 	bl	80001e0 <memchr>
 8015eba:	2800      	cmp	r0, #0
 8015ebc:	d038      	beq.n	8015f30 <_svfiprintf_r+0x1d8>
 8015ebe:	4b23      	ldr	r3, [pc, #140]	; (8015f4c <_svfiprintf_r+0x1f4>)
 8015ec0:	bb1b      	cbnz	r3, 8015f0a <_svfiprintf_r+0x1b2>
 8015ec2:	9b03      	ldr	r3, [sp, #12]
 8015ec4:	3307      	adds	r3, #7
 8015ec6:	f023 0307 	bic.w	r3, r3, #7
 8015eca:	3308      	adds	r3, #8
 8015ecc:	9303      	str	r3, [sp, #12]
 8015ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ed0:	4433      	add	r3, r6
 8015ed2:	9309      	str	r3, [sp, #36]	; 0x24
 8015ed4:	e767      	b.n	8015da6 <_svfiprintf_r+0x4e>
 8015ed6:	fb0c 3202 	mla	r2, ip, r2, r3
 8015eda:	460c      	mov	r4, r1
 8015edc:	2001      	movs	r0, #1
 8015ede:	e7a5      	b.n	8015e2c <_svfiprintf_r+0xd4>
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	3401      	adds	r4, #1
 8015ee4:	9305      	str	r3, [sp, #20]
 8015ee6:	4619      	mov	r1, r3
 8015ee8:	f04f 0c0a 	mov.w	ip, #10
 8015eec:	4620      	mov	r0, r4
 8015eee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015ef2:	3a30      	subs	r2, #48	; 0x30
 8015ef4:	2a09      	cmp	r2, #9
 8015ef6:	d903      	bls.n	8015f00 <_svfiprintf_r+0x1a8>
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d0c5      	beq.n	8015e88 <_svfiprintf_r+0x130>
 8015efc:	9105      	str	r1, [sp, #20]
 8015efe:	e7c3      	b.n	8015e88 <_svfiprintf_r+0x130>
 8015f00:	fb0c 2101 	mla	r1, ip, r1, r2
 8015f04:	4604      	mov	r4, r0
 8015f06:	2301      	movs	r3, #1
 8015f08:	e7f0      	b.n	8015eec <_svfiprintf_r+0x194>
 8015f0a:	ab03      	add	r3, sp, #12
 8015f0c:	9300      	str	r3, [sp, #0]
 8015f0e:	462a      	mov	r2, r5
 8015f10:	4b0f      	ldr	r3, [pc, #60]	; (8015f50 <_svfiprintf_r+0x1f8>)
 8015f12:	a904      	add	r1, sp, #16
 8015f14:	4638      	mov	r0, r7
 8015f16:	f7fd fc0b 	bl	8013730 <_printf_float>
 8015f1a:	1c42      	adds	r2, r0, #1
 8015f1c:	4606      	mov	r6, r0
 8015f1e:	d1d6      	bne.n	8015ece <_svfiprintf_r+0x176>
 8015f20:	89ab      	ldrh	r3, [r5, #12]
 8015f22:	065b      	lsls	r3, r3, #25
 8015f24:	f53f af2c 	bmi.w	8015d80 <_svfiprintf_r+0x28>
 8015f28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015f2a:	b01d      	add	sp, #116	; 0x74
 8015f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f30:	ab03      	add	r3, sp, #12
 8015f32:	9300      	str	r3, [sp, #0]
 8015f34:	462a      	mov	r2, r5
 8015f36:	4b06      	ldr	r3, [pc, #24]	; (8015f50 <_svfiprintf_r+0x1f8>)
 8015f38:	a904      	add	r1, sp, #16
 8015f3a:	4638      	mov	r0, r7
 8015f3c:	f7fd fe9c 	bl	8013c78 <_printf_i>
 8015f40:	e7eb      	b.n	8015f1a <_svfiprintf_r+0x1c2>
 8015f42:	bf00      	nop
 8015f44:	08017ea0 	.word	0x08017ea0
 8015f48:	08017eaa 	.word	0x08017eaa
 8015f4c:	08013731 	.word	0x08013731
 8015f50:	08015ca3 	.word	0x08015ca3
 8015f54:	08017ea6 	.word	0x08017ea6

08015f58 <_read_r>:
 8015f58:	b538      	push	{r3, r4, r5, lr}
 8015f5a:	4d07      	ldr	r5, [pc, #28]	; (8015f78 <_read_r+0x20>)
 8015f5c:	4604      	mov	r4, r0
 8015f5e:	4608      	mov	r0, r1
 8015f60:	4611      	mov	r1, r2
 8015f62:	2200      	movs	r2, #0
 8015f64:	602a      	str	r2, [r5, #0]
 8015f66:	461a      	mov	r2, r3
 8015f68:	f7ed f9da 	bl	8003320 <_read>
 8015f6c:	1c43      	adds	r3, r0, #1
 8015f6e:	d102      	bne.n	8015f76 <_read_r+0x1e>
 8015f70:	682b      	ldr	r3, [r5, #0]
 8015f72:	b103      	cbz	r3, 8015f76 <_read_r+0x1e>
 8015f74:	6023      	str	r3, [r4, #0]
 8015f76:	bd38      	pop	{r3, r4, r5, pc}
 8015f78:	20005090 	.word	0x20005090

08015f7c <_raise_r>:
 8015f7c:	291f      	cmp	r1, #31
 8015f7e:	b538      	push	{r3, r4, r5, lr}
 8015f80:	4604      	mov	r4, r0
 8015f82:	460d      	mov	r5, r1
 8015f84:	d904      	bls.n	8015f90 <_raise_r+0x14>
 8015f86:	2316      	movs	r3, #22
 8015f88:	6003      	str	r3, [r0, #0]
 8015f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8015f8e:	bd38      	pop	{r3, r4, r5, pc}
 8015f90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015f92:	b112      	cbz	r2, 8015f9a <_raise_r+0x1e>
 8015f94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015f98:	b94b      	cbnz	r3, 8015fae <_raise_r+0x32>
 8015f9a:	4620      	mov	r0, r4
 8015f9c:	f000 f830 	bl	8016000 <_getpid_r>
 8015fa0:	462a      	mov	r2, r5
 8015fa2:	4601      	mov	r1, r0
 8015fa4:	4620      	mov	r0, r4
 8015fa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015faa:	f000 b817 	b.w	8015fdc <_kill_r>
 8015fae:	2b01      	cmp	r3, #1
 8015fb0:	d00a      	beq.n	8015fc8 <_raise_r+0x4c>
 8015fb2:	1c59      	adds	r1, r3, #1
 8015fb4:	d103      	bne.n	8015fbe <_raise_r+0x42>
 8015fb6:	2316      	movs	r3, #22
 8015fb8:	6003      	str	r3, [r0, #0]
 8015fba:	2001      	movs	r0, #1
 8015fbc:	e7e7      	b.n	8015f8e <_raise_r+0x12>
 8015fbe:	2400      	movs	r4, #0
 8015fc0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015fc4:	4628      	mov	r0, r5
 8015fc6:	4798      	blx	r3
 8015fc8:	2000      	movs	r0, #0
 8015fca:	e7e0      	b.n	8015f8e <_raise_r+0x12>

08015fcc <raise>:
 8015fcc:	4b02      	ldr	r3, [pc, #8]	; (8015fd8 <raise+0xc>)
 8015fce:	4601      	mov	r1, r0
 8015fd0:	6818      	ldr	r0, [r3, #0]
 8015fd2:	f7ff bfd3 	b.w	8015f7c <_raise_r>
 8015fd6:	bf00      	nop
 8015fd8:	20000054 	.word	0x20000054

08015fdc <_kill_r>:
 8015fdc:	b538      	push	{r3, r4, r5, lr}
 8015fde:	4d07      	ldr	r5, [pc, #28]	; (8015ffc <_kill_r+0x20>)
 8015fe0:	2300      	movs	r3, #0
 8015fe2:	4604      	mov	r4, r0
 8015fe4:	4608      	mov	r0, r1
 8015fe6:	4611      	mov	r1, r2
 8015fe8:	602b      	str	r3, [r5, #0]
 8015fea:	f7ed f97f 	bl	80032ec <_kill>
 8015fee:	1c43      	adds	r3, r0, #1
 8015ff0:	d102      	bne.n	8015ff8 <_kill_r+0x1c>
 8015ff2:	682b      	ldr	r3, [r5, #0]
 8015ff4:	b103      	cbz	r3, 8015ff8 <_kill_r+0x1c>
 8015ff6:	6023      	str	r3, [r4, #0]
 8015ff8:	bd38      	pop	{r3, r4, r5, pc}
 8015ffa:	bf00      	nop
 8015ffc:	20005090 	.word	0x20005090

08016000 <_getpid_r>:
 8016000:	f7ed b96c 	b.w	80032dc <_getpid>

08016004 <_fstat_r>:
 8016004:	b538      	push	{r3, r4, r5, lr}
 8016006:	4d07      	ldr	r5, [pc, #28]	; (8016024 <_fstat_r+0x20>)
 8016008:	2300      	movs	r3, #0
 801600a:	4604      	mov	r4, r0
 801600c:	4608      	mov	r0, r1
 801600e:	4611      	mov	r1, r2
 8016010:	602b      	str	r3, [r5, #0]
 8016012:	f7ed f9ae 	bl	8003372 <_fstat>
 8016016:	1c43      	adds	r3, r0, #1
 8016018:	d102      	bne.n	8016020 <_fstat_r+0x1c>
 801601a:	682b      	ldr	r3, [r5, #0]
 801601c:	b103      	cbz	r3, 8016020 <_fstat_r+0x1c>
 801601e:	6023      	str	r3, [r4, #0]
 8016020:	bd38      	pop	{r3, r4, r5, pc}
 8016022:	bf00      	nop
 8016024:	20005090 	.word	0x20005090

08016028 <_isatty_r>:
 8016028:	b538      	push	{r3, r4, r5, lr}
 801602a:	4d06      	ldr	r5, [pc, #24]	; (8016044 <_isatty_r+0x1c>)
 801602c:	2300      	movs	r3, #0
 801602e:	4604      	mov	r4, r0
 8016030:	4608      	mov	r0, r1
 8016032:	602b      	str	r3, [r5, #0]
 8016034:	f7ed f9ad 	bl	8003392 <_isatty>
 8016038:	1c43      	adds	r3, r0, #1
 801603a:	d102      	bne.n	8016042 <_isatty_r+0x1a>
 801603c:	682b      	ldr	r3, [r5, #0]
 801603e:	b103      	cbz	r3, 8016042 <_isatty_r+0x1a>
 8016040:	6023      	str	r3, [r4, #0]
 8016042:	bd38      	pop	{r3, r4, r5, pc}
 8016044:	20005090 	.word	0x20005090

08016048 <__ascii_mbtowc>:
 8016048:	b082      	sub	sp, #8
 801604a:	b901      	cbnz	r1, 801604e <__ascii_mbtowc+0x6>
 801604c:	a901      	add	r1, sp, #4
 801604e:	b142      	cbz	r2, 8016062 <__ascii_mbtowc+0x1a>
 8016050:	b14b      	cbz	r3, 8016066 <__ascii_mbtowc+0x1e>
 8016052:	7813      	ldrb	r3, [r2, #0]
 8016054:	600b      	str	r3, [r1, #0]
 8016056:	7812      	ldrb	r2, [r2, #0]
 8016058:	1e10      	subs	r0, r2, #0
 801605a:	bf18      	it	ne
 801605c:	2001      	movne	r0, #1
 801605e:	b002      	add	sp, #8
 8016060:	4770      	bx	lr
 8016062:	4610      	mov	r0, r2
 8016064:	e7fb      	b.n	801605e <__ascii_mbtowc+0x16>
 8016066:	f06f 0001 	mvn.w	r0, #1
 801606a:	e7f8      	b.n	801605e <__ascii_mbtowc+0x16>

0801606c <_malloc_usable_size_r>:
 801606c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016070:	1f18      	subs	r0, r3, #4
 8016072:	2b00      	cmp	r3, #0
 8016074:	bfbc      	itt	lt
 8016076:	580b      	ldrlt	r3, [r1, r0]
 8016078:	18c0      	addlt	r0, r0, r3
 801607a:	4770      	bx	lr

0801607c <__ascii_wctomb>:
 801607c:	b149      	cbz	r1, 8016092 <__ascii_wctomb+0x16>
 801607e:	2aff      	cmp	r2, #255	; 0xff
 8016080:	bf85      	ittet	hi
 8016082:	238a      	movhi	r3, #138	; 0x8a
 8016084:	6003      	strhi	r3, [r0, #0]
 8016086:	700a      	strbls	r2, [r1, #0]
 8016088:	f04f 30ff 	movhi.w	r0, #4294967295
 801608c:	bf98      	it	ls
 801608e:	2001      	movls	r0, #1
 8016090:	4770      	bx	lr
 8016092:	4608      	mov	r0, r1
 8016094:	4770      	bx	lr
	...

08016098 <_init>:
 8016098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801609a:	bf00      	nop
 801609c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801609e:	bc08      	pop	{r3}
 80160a0:	469e      	mov	lr, r3
 80160a2:	4770      	bx	lr

080160a4 <_fini>:
 80160a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160a6:	bf00      	nop
 80160a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80160aa:	bc08      	pop	{r3}
 80160ac:	469e      	mov	lr, r3
 80160ae:	4770      	bx	lr
