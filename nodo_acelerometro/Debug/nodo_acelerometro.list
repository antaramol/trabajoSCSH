
nodo_acelerometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a99c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  0800ab2c  0800ab2c  0001ab2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad78  0800ad78  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad78  0800ad78  0001ad78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad80  0800ad80  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad80  0800ad80  0001ad80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad84  0800ad84  0001ad84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800ad88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000215c  200000a8  0800ae30  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002204  0800ae30  00022204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b590  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005239  00000000  00000000  0004b668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025b8  00000000  00000000  000508a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023b0  00000000  00000000  00052e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007262  00000000  00000000  00055210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000296c9  00000000  00000000  0005c472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ccac  00000000  00000000  00085b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001927e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a9ec  00000000  00000000  00192838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ab14 	.word	0x0800ab14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800ab14 	.word	0x0800ab14

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800057c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000580:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000584:	f003 0301 	and.w	r3, r3, #1
 8000588:	2b00      	cmp	r3, #0
 800058a:	d013      	beq.n	80005b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000594:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00b      	beq.n	80005b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800059c:	e000      	b.n	80005a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800059e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0f9      	beq.n	800059e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	b2d2      	uxtb	r2, r2
 80005b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b4:	687b      	ldr	r3, [r7, #4]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
	...

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f001 f96c 	bl	80018a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f849 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 fa13 	bl	80009fc <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80005d6:	f000 f8a7 	bl	8000728 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80005da:	f000 f8dd 	bl	8000798 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80005de:	f000 f91b 	bl	8000818 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80005e2:	f000 f93f 	bl	8000864 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80005e6:	f000 f97b 	bl	80008e0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80005ea:	f000 f9a9 	bl	8000940 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ee:	f000 f9d7 	bl	80009a0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  ACCELERO_StatusTypeDef status_acc;
  status_acc = BSP_ACCELERO_Init_INT();
 80005f2:	f000 fbd1 	bl	8000d98 <BSP_ACCELERO_Init_INT>
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
  if(status_acc == ACCELERO_OK){
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d102      	bne.n	8000606 <main+0x42>
	  printf("Inicializado ACCELERO\r\n");
 8000600:	480f      	ldr	r0, [pc, #60]	; (8000640 <main+0x7c>)
 8000602:	f009 fb09 	bl	8009c18 <puts>
  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000606:	f005 fff7 	bl	80065f8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Acelero */
  AceleroHandle = osMessageQueueNew (128, sizeof(uint16_t), &Acelero_attributes);
 800060a:	4a0e      	ldr	r2, [pc, #56]	; (8000644 <main+0x80>)
 800060c:	2102      	movs	r1, #2
 800060e:	2080      	movs	r0, #128	; 0x80
 8000610:	f006 f9b3 	bl	800697a <osMessageQueueNew>
 8000614:	4603      	mov	r3, r0
 8000616:	4a0c      	ldr	r2, [pc, #48]	; (8000648 <main+0x84>)
 8000618:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sendAccel */
  sendAccelHandle = osThreadNew(sendAccel_func, NULL, &sendAccel_attributes);
 800061a:	4a0c      	ldr	r2, [pc, #48]	; (800064c <main+0x88>)
 800061c:	2100      	movs	r1, #0
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <main+0x8c>)
 8000620:	f006 f849 	bl	80066b6 <osThreadNew>
 8000624:	4603      	mov	r3, r0
 8000626:	4a0b      	ldr	r2, [pc, #44]	; (8000654 <main+0x90>)
 8000628:	6013      	str	r3, [r2, #0]

  /* creation of Notifico_boton */
  Notifico_botonHandle = osThreadNew(Notifico_botonfunc, NULL, &Notifico_boton_attributes);
 800062a:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <main+0x94>)
 800062c:	2100      	movs	r1, #0
 800062e:	480b      	ldr	r0, [pc, #44]	; (800065c <main+0x98>)
 8000630:	f006 f841 	bl	80066b6 <osThreadNew>
 8000634:	4603      	mov	r3, r0
 8000636:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <main+0x9c>)
 8000638:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800063a:	f006 f801 	bl	8006640 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063e:	e7fe      	b.n	800063e <main+0x7a>
 8000640:	0800ab50 	.word	0x0800ab50
 8000644:	0800ac80 	.word	0x0800ac80
 8000648:	20000814 	.word	0x20000814
 800064c:	0800ac38 	.word	0x0800ac38
 8000650:	08000e5d 	.word	0x08000e5d
 8000654:	2000080c 	.word	0x2000080c
 8000658:	0800ac5c 	.word	0x0800ac5c
 800065c:	08000f11 	.word	0x08000f11
 8000660:	20000810 	.word	0x20000810

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b096      	sub	sp, #88	; 0x58
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	2244      	movs	r2, #68	; 0x44
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f009 fa42 	bl	8009afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	463b      	mov	r3, r7
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000686:	f44f 7000 	mov.w	r0, #512	; 0x200
 800068a:	f002 fdb5 	bl	80031f8 <HAL_PWREx_ControlVoltageScaling>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000694:	f000 fca4 	bl	8000fe0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000698:	f002 fd90 	bl	80031bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800069c:	4b21      	ldr	r3, [pc, #132]	; (8000724 <SystemClock_Config+0xc0>)
 800069e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006a2:	4a20      	ldr	r2, [pc, #128]	; (8000724 <SystemClock_Config+0xc0>)
 80006a4:	f023 0318 	bic.w	r3, r3, #24
 80006a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006ac:	2314      	movs	r3, #20
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006bc:	2360      	movs	r3, #96	; 0x60
 80006be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006c4:	2301      	movs	r3, #1
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c8:	2301      	movs	r3, #1
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006cc:	2328      	movs	r3, #40	; 0x28
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006d0:	2307      	movs	r3, #7
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 feab 	bl	800343c <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006ec:	f000 fc78 	bl	8000fe0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2303      	movs	r3, #3
 80006f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	2104      	movs	r1, #4
 8000708:	4618      	mov	r0, r3
 800070a:	f003 fa73 	bl	8003bf4 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000714:	f000 fc64 	bl	8000fe0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000718:	f003 ffac 	bl	8004674 <HAL_RCCEx_EnableMSIPLLMode>
}
 800071c:	bf00      	nop
 800071e:	3758      	adds	r7, #88	; 0x58
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40021000 	.word	0x40021000

08000728 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_DFSDM1_Init+0x68>)
 800072e:	4a19      	ldr	r2, [pc, #100]	; (8000794 <MX_DFSDM1_Init+0x6c>)
 8000730:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_DFSDM1_Init+0x68>)
 8000734:	2201      	movs	r2, #1
 8000736:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_DFSDM1_Init+0x68>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_DFSDM1_Init+0x68>)
 8000740:	2202      	movs	r2, #2
 8000742:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_DFSDM1_Init+0x68>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_DFSDM1_Init+0x68>)
 800074c:	2200      	movs	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_DFSDM1_Init+0x68>)
 8000752:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000756:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000758:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <MX_DFSDM1_Init+0x68>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_DFSDM1_Init+0x68>)
 8000760:	2204      	movs	r2, #4
 8000762:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <MX_DFSDM1_Init+0x68>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_DFSDM1_Init+0x68>)
 800076c:	2201      	movs	r2, #1
 800076e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <MX_DFSDM1_Init+0x68>)
 8000772:	2200      	movs	r2, #0
 8000774:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_DFSDM1_Init+0x68>)
 8000778:	2200      	movs	r2, #0
 800077a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_DFSDM1_Init+0x68>)
 800077e:	f001 f9d1 	bl	8001b24 <HAL_DFSDM_ChannelInit>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000788:	f000 fc2a 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	200000c4 	.word	0x200000c4
 8000794:	40016020 	.word	0x40016020

08000798 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800079c:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_I2C2_Init+0x74>)
 800079e:	4a1c      	ldr	r2, [pc, #112]	; (8000810 <MX_I2C2_Init+0x78>)
 80007a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_I2C2_Init+0x74>)
 80007a4:	4a1b      	ldr	r2, [pc, #108]	; (8000814 <MX_I2C2_Init+0x7c>)
 80007a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007a8:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_I2C2_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_I2C2_Init+0x74>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b4:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_I2C2_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_I2C2_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_I2C2_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_I2C2_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_I2C2_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007d2:	480e      	ldr	r0, [pc, #56]	; (800080c <MX_I2C2_Init+0x74>)
 80007d4:	f001 fd80 	bl	80022d8 <HAL_I2C_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007de:	f000 fbff 	bl	8000fe0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007e2:	2100      	movs	r1, #0
 80007e4:	4809      	ldr	r0, [pc, #36]	; (800080c <MX_I2C2_Init+0x74>)
 80007e6:	f002 fb09 	bl	8002dfc <HAL_I2CEx_ConfigAnalogFilter>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007f0:	f000 fbf6 	bl	8000fe0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007f4:	2100      	movs	r1, #0
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_I2C2_Init+0x74>)
 80007f8:	f002 fb4b 	bl	8002e92 <HAL_I2CEx_ConfigDigitalFilter>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000802:	f000 fbed 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200000fc 	.word	0x200000fc
 8000810:	40005800 	.word	0x40005800
 8000814:	10909cec 	.word	0x10909cec

08000818 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_QUADSPI_Init+0x44>)
 800081e:	4a10      	ldr	r2, [pc, #64]	; (8000860 <MX_QUADSPI_Init+0x48>)
 8000820:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_QUADSPI_Init+0x44>)
 8000824:	2202      	movs	r2, #2
 8000826:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_QUADSPI_Init+0x44>)
 800082a:	2204      	movs	r2, #4
 800082c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_QUADSPI_Init+0x44>)
 8000830:	2210      	movs	r2, #16
 8000832:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_QUADSPI_Init+0x44>)
 8000836:	2217      	movs	r2, #23
 8000838:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_QUADSPI_Init+0x44>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_QUADSPI_Init+0x44>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_QUADSPI_Init+0x44>)
 8000848:	f002 fd3c 	bl	80032c4 <HAL_QSPI_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000852:	f000 fbc5 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000150 	.word	0x20000150
 8000860:	a0001000 	.word	0xa0001000

08000864 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <MX_SPI3_Init+0x74>)
 800086a:	4a1c      	ldr	r2, [pc, #112]	; (80008dc <MX_SPI3_Init+0x78>)
 800086c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_SPI3_Init+0x74>)
 8000870:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000874:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_SPI3_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800087c:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MX_SPI3_Init+0x74>)
 800087e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000882:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_SPI3_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_SPI3_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_SPI3_Init+0x74>)
 8000892:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000896:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_SPI3_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_SPI3_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_SPI3_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_SPI3_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_SPI3_Init+0x74>)
 80008b2:	2207      	movs	r2, #7
 80008b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_SPI3_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_SPI3_Init+0x74>)
 80008be:	2208      	movs	r2, #8
 80008c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_SPI3_Init+0x74>)
 80008c4:	f004 f8b8 	bl	8004a38 <HAL_SPI_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008ce:	f000 fb87 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000194 	.word	0x20000194
 80008dc:	40003c00 	.word	0x40003c00

080008e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_USART1_UART_Init+0x58>)
 80008e6:	4a15      	ldr	r2, [pc, #84]	; (800093c <MX_USART1_UART_Init+0x5c>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <MX_USART1_UART_Init+0x58>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_USART1_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_USART1_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_USART1_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_USART1_UART_Init+0x58>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_USART1_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_USART1_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_USART1_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_USART1_UART_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_USART1_UART_Init+0x58>)
 8000924:	f004 fbfc 	bl	8005120 <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800092e:	f000 fb57 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200001f8 	.word	0x200001f8
 800093c:	40013800 	.word	0x40013800

08000940 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000946:	4a15      	ldr	r2, [pc, #84]	; (800099c <MX_USART3_UART_Init+0x5c>)
 8000948:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_USART3_UART_Init+0x58>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_USART3_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_USART3_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_USART3_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000984:	f004 fbcc 	bl	8005120 <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800098e:	f000 fb27 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	2000027c 	.word	0x2000027c
 800099c:	40004800 	.word	0x40004800

080009a0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ae:	2206      	movs	r2, #6
 80009b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b4:	2202      	movs	r2, #2
 80009b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ba:	2202      	movs	r2, #2
 80009bc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e4:	f002 faa1 	bl	8002f2a <HAL_PCD_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009ee:	f000 faf7 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000300 	.word	0x20000300

080009fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a12:	4bbd      	ldr	r3, [pc, #756]	; (8000d08 <MX_GPIO_Init+0x30c>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4abc      	ldr	r2, [pc, #752]	; (8000d08 <MX_GPIO_Init+0x30c>)
 8000a18:	f043 0310 	orr.w	r3, r3, #16
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4bba      	ldr	r3, [pc, #744]	; (8000d08 <MX_GPIO_Init+0x30c>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0310 	and.w	r3, r3, #16
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	4bb7      	ldr	r3, [pc, #732]	; (8000d08 <MX_GPIO_Init+0x30c>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	4ab6      	ldr	r2, [pc, #728]	; (8000d08 <MX_GPIO_Init+0x30c>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a36:	4bb4      	ldr	r3, [pc, #720]	; (8000d08 <MX_GPIO_Init+0x30c>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4bb1      	ldr	r3, [pc, #708]	; (8000d08 <MX_GPIO_Init+0x30c>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	4ab0      	ldr	r2, [pc, #704]	; (8000d08 <MX_GPIO_Init+0x30c>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4e:	4bae      	ldr	r3, [pc, #696]	; (8000d08 <MX_GPIO_Init+0x30c>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	4bab      	ldr	r3, [pc, #684]	; (8000d08 <MX_GPIO_Init+0x30c>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	4aaa      	ldr	r2, [pc, #680]	; (8000d08 <MX_GPIO_Init+0x30c>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a66:	4ba8      	ldr	r3, [pc, #672]	; (8000d08 <MX_GPIO_Init+0x30c>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a72:	4ba5      	ldr	r3, [pc, #660]	; (8000d08 <MX_GPIO_Init+0x30c>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	4aa4      	ldr	r2, [pc, #656]	; (8000d08 <MX_GPIO_Init+0x30c>)
 8000a78:	f043 0308 	orr.w	r3, r3, #8
 8000a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7e:	4ba2      	ldr	r3, [pc, #648]	; (8000d08 <MX_GPIO_Init+0x30c>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	f003 0308 	and.w	r3, r3, #8
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000a90:	489e      	ldr	r0, [pc, #632]	; (8000d0c <MX_GPIO_Init+0x310>)
 8000a92:	f001 fbf1 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f248 1104 	movw	r1, #33028	; 0x8104
 8000a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa0:	f001 fbea 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000aaa:	4899      	ldr	r0, [pc, #612]	; (8000d10 <MX_GPIO_Init+0x314>)
 8000aac:	f001 fbe4 	bl	8002278 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f241 0181 	movw	r1, #4225	; 0x1081
 8000ab6:	4897      	ldr	r0, [pc, #604]	; (8000d14 <MX_GPIO_Init+0x318>)
 8000ab8:	f001 fbde 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000abc:	2201      	movs	r2, #1
 8000abe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac2:	4894      	ldr	r0, [pc, #592]	; (8000d14 <MX_GPIO_Init+0x318>)
 8000ac4:	f001 fbd8 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000ace:	4892      	ldr	r0, [pc, #584]	; (8000d18 <MX_GPIO_Init+0x31c>)
 8000ad0:	f001 fbd2 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2120      	movs	r1, #32
 8000ad8:	488d      	ldr	r0, [pc, #564]	; (8000d10 <MX_GPIO_Init+0x314>)
 8000ada:	f001 fbcd 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	488a      	ldr	r0, [pc, #552]	; (8000d0c <MX_GPIO_Init+0x310>)
 8000ae4:	f001 fbc8 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000ae8:	f240 1315 	movw	r3, #277	; 0x115
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	4882      	ldr	r0, [pc, #520]	; (8000d0c <MX_GPIO_Init+0x310>)
 8000b02:	f001 f91b 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000b06:	236a      	movs	r3, #106	; 0x6a
 8000b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	487c      	ldr	r0, [pc, #496]	; (8000d0c <MX_GPIO_Init+0x310>)
 8000b1c:	f001 f90e 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOTON_Pin */
  GPIO_InitStruct.Pin = BOTON_Pin;
 8000b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b26:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOTON_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	4878      	ldr	r0, [pc, #480]	; (8000d18 <MX_GPIO_Init+0x31c>)
 8000b38:	f001 f900 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000b3c:	233f      	movs	r3, #63	; 0x3f
 8000b3e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b40:	230b      	movs	r3, #11
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4872      	ldr	r0, [pc, #456]	; (8000d18 <MX_GPIO_Init+0x31c>)
 8000b50:	f001 f8f4 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000b54:	2303      	movs	r3, #3
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b64:	2308      	movs	r3, #8
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b72:	f001 f8e3 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000b76:	f248 1304 	movw	r3, #33028	; 0x8104
 8000b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b92:	f001 f8d3 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000b96:	2308      	movs	r3, #8
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb4:	f001 f8c2 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000bb8:	2310      	movs	r3, #16
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bbc:	230b      	movs	r3, #11
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bce:	f001 f8b5 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000bd2:	23e0      	movs	r3, #224	; 0xe0
 8000bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000be2:	2305      	movs	r3, #5
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf0:	f001 f8a4 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bf8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	4841      	ldr	r0, [pc, #260]	; (8000d10 <MX_GPIO_Init+0x314>)
 8000c0a:	f001 f897 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c12:	230b      	movs	r3, #11
 8000c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	483b      	ldr	r0, [pc, #236]	; (8000d10 <MX_GPIO_Init+0x314>)
 8000c22:	f001 f88b 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000c26:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000c2a:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4834      	ldr	r0, [pc, #208]	; (8000d10 <MX_GPIO_Init+0x314>)
 8000c40:	f001 f87c 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000c44:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000c48:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	482e      	ldr	r0, [pc, #184]	; (8000d14 <MX_GPIO_Init+0x318>)
 8000c5c:	f001 f86e 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000c60:	f243 0381 	movw	r3, #12417	; 0x3081
 8000c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	4826      	ldr	r0, [pc, #152]	; (8000d14 <MX_GPIO_Init+0x318>)
 8000c7a:	f001 f85f 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c7e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	4820      	ldr	r0, [pc, #128]	; (8000d18 <MX_GPIO_Init+0x31c>)
 8000c98:	f001 f850 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000c9c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4819      	ldr	r0, [pc, #100]	; (8000d18 <MX_GPIO_Init+0x31c>)
 8000cb4:	f001 f842 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cc8:	2305      	movs	r3, #5
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4810      	ldr	r0, [pc, #64]	; (8000d14 <MX_GPIO_Init+0x318>)
 8000cd4:	f001 f832 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000cd8:	2378      	movs	r3, #120	; 0x78
 8000cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ce8:	2307      	movs	r3, #7
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4808      	ldr	r0, [pc, #32]	; (8000d14 <MX_GPIO_Init+0x318>)
 8000cf4:	f001 f822 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000cf8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cfe:	2312      	movs	r3, #18
 8000d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	e00a      	b.n	8000d1c <MX_GPIO_Init+0x320>
 8000d06:	bf00      	nop
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	48001000 	.word	0x48001000
 8000d10:	48000400 	.word	0x48000400
 8000d14:	48000c00 	.word	0x48000c00
 8000d18:	48000800 	.word	0x48000800
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d22:	2304      	movs	r3, #4
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480b      	ldr	r0, [pc, #44]	; (8000d5c <MX_GPIO_Init+0x360>)
 8000d2e:	f001 f805 	bl	8001d3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2105      	movs	r1, #5
 8000d36:	2017      	movs	r0, #23
 8000d38:	f000 feca 	bl	8001ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d3c:	2017      	movs	r0, #23
 8000d3e:	f000 fee3 	bl	8001b08 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2105      	movs	r1, #5
 8000d46:	2028      	movs	r0, #40	; 0x28
 8000d48:	f000 fec2 	bl	8001ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d4c:	2028      	movs	r0, #40	; 0x28
 8000d4e:	f000 fedb 	bl	8001b08 <HAL_NVIC_EnableIRQ>

}
 8000d52:	bf00      	nop
 8000d54:	3728      	adds	r7, #40	; 0x28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	48000400 	.word	0x48000400

08000d60 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
int DataIdx;
for(DataIdx=0; DataIdx<len; DataIdx++)
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	e009      	b.n	8000d86 <_write+0x26>
{
ITM_SendChar(*ptr++);
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	1c5a      	adds	r2, r3, #1
 8000d76:	60ba      	str	r2, [r7, #8]
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fbfa 	bl	8000574 <ITM_SendChar>
for(DataIdx=0; DataIdx<len; DataIdx++)
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	3301      	adds	r3, #1
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	dbf1      	blt.n	8000d72 <_write+0x12>
}
return len;
 8000d8e:	687b      	ldr	r3, [r7, #4]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <BSP_ACCELERO_Init_INT>:


ACCELERO_StatusTypeDef BSP_ACCELERO_Init_INT(void){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
ACCELERO_StatusTypeDef ret;
ret = BSP_ACCELERO_Init();
 8000d9e:	f005 fa79 	bl	8006294 <BSP_ACCELERO_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
if (ret == ACCELERO_OK)
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d12f      	bne.n	8000e0c <BSP_ACCELERO_Init_INT+0x74>
{
/* Initialize interruption*/
uint8_t tmp;
tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G);
 8000dac:	210b      	movs	r1, #11
 8000dae:	20d4      	movs	r0, #212	; 0xd4
 8000db0:	f005 fa34 	bl	800621c <SENSOR_IO_Read>
 8000db4:	4603      	mov	r3, r0
 8000db6:	71bb      	strb	r3, [r7, #6]
tmp |=0b10000000;
 8000db8:	79bb      	ldrb	r3, [r7, #6]
 8000dba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dbe:	71bb      	strb	r3, [r7, #6]
SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G, tmp);
 8000dc0:	79bb      	ldrb	r3, [r7, #6]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	210b      	movs	r1, #11
 8000dc6:	20d4      	movs	r0, #212	; 0xd4
 8000dc8:	f005 fa0e 	bl	80061e8 <SENSOR_IO_Write>
tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL);
 8000dcc:	210d      	movs	r1, #13
 8000dce:	20d4      	movs	r0, #212	; 0xd4
 8000dd0:	f005 fa24 	bl	800621c <SENSOR_IO_Read>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	71bb      	strb	r3, [r7, #6]
tmp |=0b00000001;
 8000dd8:	79bb      	ldrb	r3, [r7, #6]
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	71bb      	strb	r3, [r7, #6]
SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, tmp);
 8000de0:	79bb      	ldrb	r3, [r7, #6]
 8000de2:	461a      	mov	r2, r3
 8000de4:	210d      	movs	r1, #13
 8000de6:	20d4      	movs	r0, #212	; 0xd4
 8000de8:	f005 f9fe 	bl	80061e8 <SENSOR_IO_Write>
tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG);
 8000dec:	211a      	movs	r1, #26
 8000dee:	20d4      	movs	r0, #212	; 0xd4
 8000df0:	f005 fa14 	bl	800621c <SENSOR_IO_Read>
 8000df4:	4603      	mov	r3, r0
 8000df6:	71bb      	strb	r3, [r7, #6]
tmp |=0b10000000;
 8000df8:	79bb      	ldrb	r3, [r7, #6]
 8000dfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dfe:	71bb      	strb	r3, [r7, #6]
SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG, tmp);
 8000e00:	79bb      	ldrb	r3, [r7, #6]
 8000e02:	461a      	mov	r2, r3
 8000e04:	211a      	movs	r1, #26
 8000e06:	20d4      	movs	r0, #212	; 0xd4
 8000e08:	f005 f9ee 	bl	80061e8 <SENSOR_IO_Write>
}
return ret;
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	80fb      	strh	r3, [r7, #6]
if (GPIO_Pin == LSM6DSL_INT1_EXTI11_Pin)
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e28:	d105      	bne.n	8000e36 <HAL_GPIO_EXTI_Callback+0x1e>
{
/* Aquí escribiremos nuestra funcionalidad*/
osThreadFlagsSet(sendAccelHandle, 0x00000001U);
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2101      	movs	r1, #1
 8000e30:	4618      	mov	r0, r3
 8000e32:	f005 fcd3 	bl	80067dc <osThreadFlagsSet>
}
if (GPIO_Pin == BOTON_Pin){
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e3c:	d105      	bne.n	8000e4a <HAL_GPIO_EXTI_Callback+0x32>
/* Aquí escribiremos nuestra funcionalidad*/
	osThreadFlagsSet(Notifico_botonHandle, 0x00000001U);
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_GPIO_EXTI_Callback+0x40>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2101      	movs	r1, #1
 8000e44:	4618      	mov	r0, r3
 8000e46:	f005 fcc9 	bl	80067dc <osThreadFlagsSet>
}

}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	2000080c 	.word	0x2000080c
 8000e58:	20000810 	.word	0x20000810

08000e5c <sendAccel_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendAccel_func */
void sendAccel_func(void *argument)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af02      	add	r7, sp, #8
 8000e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int16_t DataXYZ[3];
	int16_t *pDataXYZ = DataXYZ;
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	61fb      	str	r3, [r7, #28]
	uint32_t tick;
	uint32_t espacio_cola;
  /* Infinite loop */
	for(;;)
	{
	osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8000e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2001      	movs	r0, #1
 8000e72:	f005 fd01 	bl	8006878 <osThreadFlagsWait>
	BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8000e76:	69f8      	ldr	r0, [r7, #28]
 8000e78:	f005 fa4a 	bl	8006310 <BSP_ACCELERO_AccGetXYZ>
	tick = osKernelGetTickCount();
 8000e7c:	f005 fc06 	bl	800668c <osKernelGetTickCount>
 8000e80:	4603      	mov	r3, r0
 8000e82:	60fb      	str	r3, [r7, #12]
	//printf("Tick: %ld Eje x: %d Eje y: %d Eje z: %d \r\n", tick, DataXYZ[0], DataXYZ[1], DataXYZ[2]);
	//printf("Recogida datos\r\n");
	espacio_cola=osMessageQueueGetSpace(AceleroHandle);
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <sendAccel_func+0xa0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f005 fea7 	bl	8006bdc <osMessageQueueGetSpace>
 8000e8e:	61b8      	str	r0, [r7, #24]
	if(espacio_cola!=0){
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <sendAccel_func+0x42>
	printf("Espacio en la cola: %d\r\n",espacio_cola);
 8000e96:	69b9      	ldr	r1, [r7, #24]
 8000e98:	4819      	ldr	r0, [pc, #100]	; (8000f00 <sendAccel_func+0xa4>)
 8000e9a:	f008 fe37 	bl	8009b0c <iprintf>
	}
	osMessageQueuePut(AceleroHandle,&DataXYZ[2],0,pdMS_TO_TICKS(10));
 8000e9e:	4b17      	ldr	r3, [pc, #92]	; (8000efc <sendAccel_func+0xa0>)
 8000ea0:	6818      	ldr	r0, [r3, #0]
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	1d19      	adds	r1, r3, #4
 8000ea8:	230a      	movs	r3, #10
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f005 fdd8 	bl	8006a60 <osMessageQueuePut>
	osMessageQueuePut(AceleroHandle,&tick,0,pdMS_TO_TICKS(10));
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <sendAccel_func+0xa0>)
 8000eb2:	6818      	ldr	r0, [r3, #0]
 8000eb4:	f107 010c 	add.w	r1, r7, #12
 8000eb8:	230a      	movs	r3, #10
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f005 fdd0 	bl	8006a60 <osMessageQueuePut>
	if(espacio_cola!=0){
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d0d1      	beq.n	8000e6a <sendAccel_func+0xe>
	printf("Tick: %ld Eje x: %d Eje y: %d Eje z: %d \r\n", tick, DataXYZ[0], DataXYZ[1], DataXYZ[2]);
 8000ec6:	68f9      	ldr	r1, [r7, #12]
 8000ec8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	4603      	mov	r3, r0
 8000edc:	4809      	ldr	r0, [pc, #36]	; (8000f04 <sendAccel_func+0xa8>)
 8000ede:	f008 fe15 	bl	8009b0c <iprintf>
	printf("Se ha metido un dato de: %d\r\n",DataXYZ[2]);
 8000ee2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4807      	ldr	r0, [pc, #28]	; (8000f08 <sendAccel_func+0xac>)
 8000eea:	f008 fe0f 	bl	8009b0c <iprintf>
	printf("Se ha metido un tick de: %d\r\n",tick);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4806      	ldr	r0, [pc, #24]	; (8000f0c <sendAccel_func+0xb0>)
 8000ef4:	f008 fe0a 	bl	8009b0c <iprintf>
	osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8000ef8:	e7b7      	b.n	8000e6a <sendAccel_func+0xe>
 8000efa:	bf00      	nop
 8000efc:	20000814 	.word	0x20000814
 8000f00:	0800ab68 	.word	0x0800ab68
 8000f04:	0800ab84 	.word	0x0800ab84
 8000f08:	0800abb0 	.word	0x0800abb0
 8000f0c:	0800abd0 	.word	0x0800abd0

08000f10 <Notifico_botonfunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Notifico_botonfunc */
void Notifico_botonfunc(void *argument)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0c6      	sub	sp, #280	; 0x118
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000f1a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000f1e:	6018      	str	r0, [r3, #0]
	uint16_t dato_cola;
	uint16_t datos_cola[128];
  /* Infinite loop */
  for(;;)
  {
	  read_estado_flag=osThreadFlagsWait(0x00000001U, osFlagsWaitAny, pdMS_TO_TICKS(7000)); //Cada diez segundos
 8000f20:	f641 3258 	movw	r2, #7000	; 0x1b58
 8000f24:	2100      	movs	r1, #0
 8000f26:	2001      	movs	r0, #1
 8000f28:	f005 fca6 	bl	8006878 <osThreadFlagsWait>
 8000f2c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
	  //Cojo los datos:
	  if(read_estado_flag == 0x00000001U){
 8000f30:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d103      	bne.n	8000f40 <Notifico_botonfunc+0x30>
		  printf("Le he dado al boton\r\n");
 8000f38:	481d      	ldr	r0, [pc, #116]	; (8000fb0 <Notifico_botonfunc+0xa0>)
 8000f3a:	f008 fe6d 	bl	8009c18 <puts>
 8000f3e:	e007      	b.n	8000f50 <Notifico_botonfunc+0x40>
	  }
	  else if(read_estado_flag == osErrorTimeout){
 8000f40:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000f44:	f113 0f02 	cmn.w	r3, #2
 8000f48:	d102      	bne.n	8000f50 <Notifico_botonfunc+0x40>
		  printf("Ha saltado el timeout\r\n");
 8000f4a:	481a      	ldr	r0, [pc, #104]	; (8000fb4 <Notifico_botonfunc+0xa4>)
 8000f4c:	f008 fe64 	bl	8009c18 <puts>
	  }
	  if(osMessageQueueGetSpace(AceleroHandle)==0){
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <Notifico_botonfunc+0xa8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f005 fe41 	bl	8006bdc <osMessageQueueGetSpace>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d120      	bne.n	8000fa2 <Notifico_botonfunc+0x92>
	  for(int i=0; i<128; i++){
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000f66:	e017      	b.n	8000f98 <Notifico_botonfunc+0x88>
		  osMessageQueueGet(AceleroHandle, dato_cola, NULL, pdMS_TO_TICKS(10));
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <Notifico_botonfunc+0xa8>)
 8000f6a:	6818      	ldr	r0, [r3, #0]
 8000f6c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000f70:	4619      	mov	r1, r3
 8000f72:	230a      	movs	r3, #10
 8000f74:	2200      	movs	r2, #0
 8000f76:	f005 fdd3 	bl	8006b20 <osMessageQueueGet>
		  datos_cola[i]=dato_cola;
 8000f7a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000f7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f82:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000f86:	f8b7 110e 	ldrh.w	r1, [r7, #270]	; 0x10e
 8000f8a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  for(int i=0; i<128; i++){
 8000f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000f92:	3301      	adds	r3, #1
 8000f94:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000f9c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f9e:	dde3      	ble.n	8000f68 <Notifico_botonfunc+0x58>
 8000fa0:	e7be      	b.n	8000f20 <Notifico_botonfunc+0x10>
		  //contador_cola = osMessageQueueGetCount(AceleroHandle);
	  }
	 }
	  else{
	  osMessageQueueReset(AceleroHandle);
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <Notifico_botonfunc+0xa8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f005 fe4d 	bl	8006c46 <osMessageQueueReset>
	  read_estado_flag=osThreadFlagsWait(0x00000001U, osFlagsWaitAny, pdMS_TO_TICKS(7000)); //Cada diez segundos
 8000fac:	e7b8      	b.n	8000f20 <Notifico_botonfunc+0x10>
 8000fae:	bf00      	nop
 8000fb0:	0800abf0 	.word	0x0800abf0
 8000fb4:	0800ac08 	.word	0x0800ac08
 8000fb8:	20000814 	.word	0x20000814

08000fbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d101      	bne.n	8000fd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fce:	f000 fc83 	bl	80018d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40001000 	.word	0x40001000

08000fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe4:	b672      	cpsid	i
}
 8000fe6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <Error_Handler+0x8>
	...

08000fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <HAL_MspInit+0x4c>)
 8000ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff6:	4a10      	ldr	r2, [pc, #64]	; (8001038 <HAL_MspInit+0x4c>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_MspInit+0x4c>)
 8001000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <HAL_MspInit+0x4c>)
 800100c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <HAL_MspInit+0x4c>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001014:	6593      	str	r3, [r2, #88]	; 0x58
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <HAL_MspInit+0x4c>)
 8001018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	210f      	movs	r1, #15
 8001026:	f06f 0001 	mvn.w	r0, #1
 800102a:	f000 fd51 	bl	8001ad0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000

0800103c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b0ac      	sub	sp, #176	; 0xb0
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2288      	movs	r2, #136	; 0x88
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f008 fd4d 	bl	8009afc <memset>
  if(DFSDM1_Init == 0)
 8001062:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d142      	bne.n	80010f0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800106a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800106e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4618      	mov	r0, r3
 800107c:	f003 f810 	bl	80040a0 <HAL_RCCEx_PeriphCLKConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001086:	f7ff ffab 	bl	8000fe0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 800108c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108e:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001090:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001094:	6613      	str	r3, [r2, #96]	; 0x60
 8001096:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	4a15      	ldr	r2, [pc, #84]	; (80010fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010a8:	f043 0310 	orr.w	r3, r3, #16
 80010ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80010ba:	f44f 7320 	mov.w	r3, #640	; 0x280
 80010be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80010d4:	2306      	movs	r3, #6
 80010d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010de:	4619      	mov	r1, r3
 80010e0:	4807      	ldr	r0, [pc, #28]	; (8001100 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80010e2:	f000 fe2b 	bl	8001d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	4a02      	ldr	r2, [pc, #8]	; (80010f8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010ee:	6013      	str	r3, [r2, #0]
  }

}
 80010f0:	bf00      	nop
 80010f2:	37b0      	adds	r7, #176	; 0xb0
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000818 	.word	0x20000818
 80010fc:	40021000 	.word	0x40021000
 8001100:	48001000 	.word	0x48001000

08001104 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b0ac      	sub	sp, #176	; 0xb0
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2288      	movs	r2, #136	; 0x88
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f008 fce9 	bl	8009afc <memset>
  if(hi2c->Instance==I2C2)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a21      	ldr	r2, [pc, #132]	; (80011b4 <HAL_I2C_MspInit+0xb0>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d13b      	bne.n	80011ac <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001138:	2300      	movs	r3, #0
 800113a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4618      	mov	r0, r3
 8001142:	f002 ffad 	bl	80040a0 <HAL_RCCEx_PeriphCLKConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800114c:	f7ff ff48 	bl	8000fe0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <HAL_I2C_MspInit+0xb4>)
 8001152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001154:	4a18      	ldr	r2, [pc, #96]	; (80011b8 <HAL_I2C_MspInit+0xb4>)
 8001156:	f043 0302 	orr.w	r3, r3, #2
 800115a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115c:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <HAL_I2C_MspInit+0xb4>)
 800115e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001168:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800116c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001170:	2312      	movs	r3, #18
 8001172:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001176:	2301      	movs	r3, #1
 8001178:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001182:	2304      	movs	r3, #4
 8001184:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800118c:	4619      	mov	r1, r3
 800118e:	480b      	ldr	r0, [pc, #44]	; (80011bc <HAL_I2C_MspInit+0xb8>)
 8001190:	f000 fdd4 	bl	8001d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_I2C_MspInit+0xb4>)
 8001196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001198:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <HAL_I2C_MspInit+0xb4>)
 800119a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800119e:	6593      	str	r3, [r2, #88]	; 0x58
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <HAL_I2C_MspInit+0xb4>)
 80011a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011ac:	bf00      	nop
 80011ae:	37b0      	adds	r7, #176	; 0xb0
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40005800 	.word	0x40005800
 80011b8:	40021000 	.word	0x40021000
 80011bc:	48000400 	.word	0x48000400

080011c0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0b      	ldr	r2, [pc, #44]	; (80011fc <HAL_I2C_MspDeInit+0x3c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d10f      	bne.n	80011f2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HAL_I2C_MspDeInit+0x40>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <HAL_I2C_MspDeInit+0x40>)
 80011d8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80011dc:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80011de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011e2:	4808      	ldr	r0, [pc, #32]	; (8001204 <HAL_I2C_MspDeInit+0x44>)
 80011e4:	f000 ff54 	bl	8002090 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80011e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ec:	4805      	ldr	r0, [pc, #20]	; (8001204 <HAL_I2C_MspDeInit+0x44>)
 80011ee:	f000 ff4f 	bl	8002090 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40005800 	.word	0x40005800
 8001200:	40021000 	.word	0x40021000
 8001204:	48000400 	.word	0x48000400

08001208 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a17      	ldr	r2, [pc, #92]	; (8001284 <HAL_QSPI_MspInit+0x7c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d128      	bne.n	800127c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <HAL_QSPI_MspInit+0x80>)
 800122c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800122e:	4a16      	ldr	r2, [pc, #88]	; (8001288 <HAL_QSPI_MspInit+0x80>)
 8001230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001234:	6513      	str	r3, [r2, #80]	; 0x50
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <HAL_QSPI_MspInit+0x80>)
 8001238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800123a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <HAL_QSPI_MspInit+0x80>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	4a10      	ldr	r2, [pc, #64]	; (8001288 <HAL_QSPI_MspInit+0x80>)
 8001248:	f043 0310 	orr.w	r3, r3, #16
 800124c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <HAL_QSPI_MspInit+0x80>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800125a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800125e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800126c:	230a      	movs	r3, #10
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <HAL_QSPI_MspInit+0x84>)
 8001278:	f000 fd60 	bl	8001d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800127c:	bf00      	nop
 800127e:	3728      	adds	r7, #40	; 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	a0001000 	.word	0xa0001000
 8001288:	40021000 	.word	0x40021000
 800128c:	48001000 	.word	0x48001000

08001290 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a17      	ldr	r2, [pc, #92]	; (800130c <HAL_SPI_MspInit+0x7c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d128      	bne.n	8001304 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <HAL_SPI_MspInit+0x80>)
 80012b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b6:	4a16      	ldr	r2, [pc, #88]	; (8001310 <HAL_SPI_MspInit+0x80>)
 80012b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012bc:	6593      	str	r3, [r2, #88]	; 0x58
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <HAL_SPI_MspInit+0x80>)
 80012c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <HAL_SPI_MspInit+0x80>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	4a10      	ldr	r2, [pc, #64]	; (8001310 <HAL_SPI_MspInit+0x80>)
 80012d0:	f043 0304 	orr.w	r3, r3, #4
 80012d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <HAL_SPI_MspInit+0x80>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	f003 0304 	and.w	r3, r3, #4
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80012e2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012f4:	2306      	movs	r3, #6
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4619      	mov	r1, r3
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <HAL_SPI_MspInit+0x84>)
 8001300:	f000 fd1c 	bl	8001d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001304:	bf00      	nop
 8001306:	3728      	adds	r7, #40	; 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40003c00 	.word	0x40003c00
 8001310:	40021000 	.word	0x40021000
 8001314:	48000800 	.word	0x48000800

08001318 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b0ae      	sub	sp, #184	; 0xb8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	2288      	movs	r2, #136	; 0x88
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f008 fbdf 	bl	8009afc <memset>
  if(huart->Instance==USART1)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a42      	ldr	r2, [pc, #264]	; (800144c <HAL_UART_MspInit+0x134>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d13b      	bne.n	80013c0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001348:	2301      	movs	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800134c:	2300      	movs	r3, #0
 800134e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001350:	f107 031c 	add.w	r3, r7, #28
 8001354:	4618      	mov	r0, r3
 8001356:	f002 fea3 	bl	80040a0 <HAL_RCCEx_PeriphCLKConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001360:	f7ff fe3e 	bl	8000fe0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001364:	4b3a      	ldr	r3, [pc, #232]	; (8001450 <HAL_UART_MspInit+0x138>)
 8001366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001368:	4a39      	ldr	r2, [pc, #228]	; (8001450 <HAL_UART_MspInit+0x138>)
 800136a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136e:	6613      	str	r3, [r2, #96]	; 0x60
 8001370:	4b37      	ldr	r3, [pc, #220]	; (8001450 <HAL_UART_MspInit+0x138>)
 8001372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001378:	61bb      	str	r3, [r7, #24]
 800137a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137c:	4b34      	ldr	r3, [pc, #208]	; (8001450 <HAL_UART_MspInit+0x138>)
 800137e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001380:	4a33      	ldr	r2, [pc, #204]	; (8001450 <HAL_UART_MspInit+0x138>)
 8001382:	f043 0302 	orr.w	r3, r3, #2
 8001386:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001388:	4b31      	ldr	r3, [pc, #196]	; (8001450 <HAL_UART_MspInit+0x138>)
 800138a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001394:	23c0      	movs	r3, #192	; 0xc0
 8001396:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013ac:	2307      	movs	r3, #7
 80013ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013b6:	4619      	mov	r1, r3
 80013b8:	4826      	ldr	r0, [pc, #152]	; (8001454 <HAL_UART_MspInit+0x13c>)
 80013ba:	f000 fcbf 	bl	8001d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013be:	e040      	b.n	8001442 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a24      	ldr	r2, [pc, #144]	; (8001458 <HAL_UART_MspInit+0x140>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d13b      	bne.n	8001442 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013ca:	2304      	movs	r3, #4
 80013cc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	4618      	mov	r0, r3
 80013d8:	f002 fe62 	bl	80040a0 <HAL_RCCEx_PeriphCLKConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_UART_MspInit+0xce>
      Error_Handler();
 80013e2:	f7ff fdfd 	bl	8000fe0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <HAL_UART_MspInit+0x138>)
 80013e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ea:	4a19      	ldr	r2, [pc, #100]	; (8001450 <HAL_UART_MspInit+0x138>)
 80013ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f0:	6593      	str	r3, [r2, #88]	; 0x58
 80013f2:	4b17      	ldr	r3, [pc, #92]	; (8001450 <HAL_UART_MspInit+0x138>)
 80013f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fe:	4b14      	ldr	r3, [pc, #80]	; (8001450 <HAL_UART_MspInit+0x138>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	4a13      	ldr	r2, [pc, #76]	; (8001450 <HAL_UART_MspInit+0x138>)
 8001404:	f043 0308 	orr.w	r3, r3, #8
 8001408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <HAL_UART_MspInit+0x138>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001416:	f44f 7340 	mov.w	r3, #768	; 0x300
 800141a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142a:	2303      	movs	r3, #3
 800142c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001430:	2307      	movs	r3, #7
 8001432:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001436:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800143a:	4619      	mov	r1, r3
 800143c:	4807      	ldr	r0, [pc, #28]	; (800145c <HAL_UART_MspInit+0x144>)
 800143e:	f000 fc7d 	bl	8001d3c <HAL_GPIO_Init>
}
 8001442:	bf00      	nop
 8001444:	37b8      	adds	r7, #184	; 0xb8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40013800 	.word	0x40013800
 8001450:	40021000 	.word	0x40021000
 8001454:	48000400 	.word	0x48000400
 8001458:	40004800 	.word	0x40004800
 800145c:	48000c00 	.word	0x48000c00

08001460 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b0ac      	sub	sp, #176	; 0xb0
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2288      	movs	r2, #136	; 0x88
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f008 fb3b 	bl	8009afc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800148e:	d17c      	bne.n	800158a <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001490:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001494:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001496:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800149a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800149e:	2301      	movs	r3, #1
 80014a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80014a2:	2301      	movs	r3, #1
 80014a4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80014a6:	2318      	movs	r3, #24
 80014a8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80014aa:	2307      	movs	r3, #7
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80014ae:	2302      	movs	r3, #2
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80014b2:	2302      	movs	r3, #2
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80014b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014ba:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4618      	mov	r0, r3
 80014c2:	f002 fded 	bl	80040a0 <HAL_RCCEx_PeriphCLKConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80014cc:	f7ff fd88 	bl	8000fe0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	4b30      	ldr	r3, [pc, #192]	; (8001594 <HAL_PCD_MspInit+0x134>)
 80014d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d4:	4a2f      	ldr	r2, [pc, #188]	; (8001594 <HAL_PCD_MspInit+0x134>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014dc:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <HAL_PCD_MspInit+0x134>)
 80014de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80014e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001500:	4619      	mov	r1, r3
 8001502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001506:	f000 fc19 	bl	8001d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800150a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800150e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001524:	230a      	movs	r3, #10
 8001526:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800152e:	4619      	mov	r1, r3
 8001530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001534:	f000 fc02 	bl	8001d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001538:	4b16      	ldr	r3, [pc, #88]	; (8001594 <HAL_PCD_MspInit+0x134>)
 800153a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153c:	4a15      	ldr	r2, [pc, #84]	; (8001594 <HAL_PCD_MspInit+0x134>)
 800153e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001542:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001544:	4b13      	ldr	r3, [pc, #76]	; (8001594 <HAL_PCD_MspInit+0x134>)
 8001546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <HAL_PCD_MspInit+0x134>)
 8001552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d114      	bne.n	8001586 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800155c:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <HAL_PCD_MspInit+0x134>)
 800155e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001560:	4a0c      	ldr	r2, [pc, #48]	; (8001594 <HAL_PCD_MspInit+0x134>)
 8001562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001566:	6593      	str	r3, [r2, #88]	; 0x58
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_PCD_MspInit+0x134>)
 800156a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001574:	f001 fe96 	bl	80032a4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_PCD_MspInit+0x134>)
 800157a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157c:	4a05      	ldr	r2, [pc, #20]	; (8001594 <HAL_PCD_MspInit+0x134>)
 800157e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001582:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001584:	e001      	b.n	800158a <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001586:	f001 fe8d 	bl	80032a4 <HAL_PWREx_EnableVddUSB>
}
 800158a:	bf00      	nop
 800158c:	37b0      	adds	r7, #176	; 0xb0
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000

08001598 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08e      	sub	sp, #56	; 0x38
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015a6:	4b34      	ldr	r3, [pc, #208]	; (8001678 <HAL_InitTick+0xe0>)
 80015a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015aa:	4a33      	ldr	r2, [pc, #204]	; (8001678 <HAL_InitTick+0xe0>)
 80015ac:	f043 0310 	orr.w	r3, r3, #16
 80015b0:	6593      	str	r3, [r2, #88]	; 0x58
 80015b2:	4b31      	ldr	r3, [pc, #196]	; (8001678 <HAL_InitTick+0xe0>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015be:	f107 0210 	add.w	r2, r7, #16
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f002 fcd7 	bl	8003f7c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d103      	bne.n	80015e0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015d8:	f002 fca4 	bl	8003f24 <HAL_RCC_GetPCLK1Freq>
 80015dc:	6378      	str	r0, [r7, #52]	; 0x34
 80015de:	e004      	b.n	80015ea <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015e0:	f002 fca0 	bl	8003f24 <HAL_RCC_GetPCLK1Freq>
 80015e4:	4603      	mov	r3, r0
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ec:	4a23      	ldr	r2, [pc, #140]	; (800167c <HAL_InitTick+0xe4>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	0c9b      	lsrs	r3, r3, #18
 80015f4:	3b01      	subs	r3, #1
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015f8:	4b21      	ldr	r3, [pc, #132]	; (8001680 <HAL_InitTick+0xe8>)
 80015fa:	4a22      	ldr	r2, [pc, #136]	; (8001684 <HAL_InitTick+0xec>)
 80015fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015fe:	4b20      	ldr	r3, [pc, #128]	; (8001680 <HAL_InitTick+0xe8>)
 8001600:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001604:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001606:	4a1e      	ldr	r2, [pc, #120]	; (8001680 <HAL_InitTick+0xe8>)
 8001608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800160c:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <HAL_InitTick+0xe8>)
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001612:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_InitTick+0xe8>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001618:	4b19      	ldr	r3, [pc, #100]	; (8001680 <HAL_InitTick+0xe8>)
 800161a:	2200      	movs	r2, #0
 800161c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800161e:	4818      	ldr	r0, [pc, #96]	; (8001680 <HAL_InitTick+0xe8>)
 8001620:	f003 faad 	bl	8004b7e <HAL_TIM_Base_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800162a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800162e:	2b00      	cmp	r3, #0
 8001630:	d11b      	bne.n	800166a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001632:	4813      	ldr	r0, [pc, #76]	; (8001680 <HAL_InitTick+0xe8>)
 8001634:	f003 fb04 	bl	8004c40 <HAL_TIM_Base_Start_IT>
 8001638:	4603      	mov	r3, r0
 800163a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800163e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001642:	2b00      	cmp	r3, #0
 8001644:	d111      	bne.n	800166a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001646:	2036      	movs	r0, #54	; 0x36
 8001648:	f000 fa5e 	bl	8001b08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b0f      	cmp	r3, #15
 8001650:	d808      	bhi.n	8001664 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001652:	2200      	movs	r2, #0
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	2036      	movs	r0, #54	; 0x36
 8001658:	f000 fa3a 	bl	8001ad0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800165c:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <HAL_InitTick+0xf0>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e002      	b.n	800166a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800166a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800166e:	4618      	mov	r0, r3
 8001670:	3738      	adds	r7, #56	; 0x38
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000
 800167c:	431bde83 	.word	0x431bde83
 8001680:	2000081c 	.word	0x2000081c
 8001684:	40001000 	.word	0x40001000
 8001688:	20000004 	.word	0x20000004

0800168c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <NMI_Handler+0x4>

08001692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <HardFault_Handler+0x4>

08001698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <MemManage_Handler+0x4>

0800169e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <BusFault_Handler+0x4>

080016a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <UsageFault_Handler+0x4>

080016aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80016bc:	2020      	movs	r0, #32
 80016be:	f000 fdf3 	bl	80022a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80016c2:	2040      	movs	r0, #64	; 0x40
 80016c4:	f000 fdf0 	bl	80022a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80016c8:	2080      	movs	r0, #128	; 0x80
 80016ca:	f000 fded 	bl	80022a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80016ce:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016d2:	f000 fde9 	bl	80022a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}

080016da <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80016de:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80016e2:	f000 fde1 	bl	80022a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80016e6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80016ea:	f000 fddd 	bl	80022a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BOTON_Pin);
 80016ee:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016f2:	f000 fdd9 	bl	80022a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80016f6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80016fa:	f000 fdd5 	bl	80022a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80016fe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001702:	f000 fdd1 	bl	80022a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001710:	4802      	ldr	r0, [pc, #8]	; (800171c <TIM6_DAC_IRQHandler+0x10>)
 8001712:	f003 fb05 	bl	8004d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	2000081c 	.word	0x2000081c

08001720 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	e00a      	b.n	8001748 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001732:	f3af 8000 	nop.w
 8001736:	4601      	mov	r1, r0
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	60ba      	str	r2, [r7, #8]
 800173e:	b2ca      	uxtb	r2, r1
 8001740:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	429a      	cmp	r2, r3
 800174e:	dbf0      	blt.n	8001732 <_read+0x12>
	}

return len;
 8001750:	687b      	ldr	r3, [r7, #4]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <_close>:
	}
	return len;
}

int _close(int file)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
	return -1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001782:	605a      	str	r2, [r3, #4]
	return 0;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <_isatty>:

int _isatty(int file)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
	return 1;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
	return 0;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017cc:	4a14      	ldr	r2, [pc, #80]	; (8001820 <_sbrk+0x5c>)
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <_sbrk+0x60>)
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <_sbrk+0x64>)
 80017e2:	4a12      	ldr	r2, [pc, #72]	; (800182c <_sbrk+0x68>)
 80017e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d207      	bcs.n	8001804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f4:	f008 f94a 	bl	8009a8c <__errno>
 80017f8:	4603      	mov	r3, r0
 80017fa:	220c      	movs	r2, #12
 80017fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001802:	e009      	b.n	8001818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <_sbrk+0x64>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <_sbrk+0x64>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	4a05      	ldr	r2, [pc, #20]	; (8001828 <_sbrk+0x64>)
 8001814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001816:	68fb      	ldr	r3, [r7, #12]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20018000 	.word	0x20018000
 8001824:	00000400 	.word	0x00000400
 8001828:	20000868 	.word	0x20000868
 800182c:	20002208 	.word	0x20002208

08001830 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <SystemInit+0x20>)
 8001836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800183a:	4a05      	ldr	r2, [pc, #20]	; (8001850 <SystemInit+0x20>)
 800183c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001840:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001854:	f8df d034 	ldr.w	sp, [pc, #52]	; 800188c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001858:	f7ff ffea 	bl	8001830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800185c:	480c      	ldr	r0, [pc, #48]	; (8001890 <LoopForever+0x6>)
  ldr r1, =_edata
 800185e:	490d      	ldr	r1, [pc, #52]	; (8001894 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001860:	4a0d      	ldr	r2, [pc, #52]	; (8001898 <LoopForever+0xe>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001864:	e002      	b.n	800186c <LoopCopyDataInit>

08001866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186a:	3304      	adds	r3, #4

0800186c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800186c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001870:	d3f9      	bcc.n	8001866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001872:	4a0a      	ldr	r2, [pc, #40]	; (800189c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001874:	4c0a      	ldr	r4, [pc, #40]	; (80018a0 <LoopForever+0x16>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001878:	e001      	b.n	800187e <LoopFillZerobss>

0800187a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800187c:	3204      	adds	r2, #4

0800187e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001880:	d3fb      	bcc.n	800187a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001882:	f008 f909 	bl	8009a98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001886:	f7fe fe9d 	bl	80005c4 <main>

0800188a <LoopForever>:

LoopForever:
    b LoopForever
 800188a:	e7fe      	b.n	800188a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800188c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001894:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001898:	0800ad88 	.word	0x0800ad88
  ldr r2, =_sbss
 800189c:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80018a0:	20002204 	.word	0x20002204

080018a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018a4:	e7fe      	b.n	80018a4 <ADC1_2_IRQHandler>

080018a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b0:	2003      	movs	r0, #3
 80018b2:	f000 f902 	bl	8001aba <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018b6:	200f      	movs	r0, #15
 80018b8:	f7ff fe6e 	bl	8001598 <HAL_InitTick>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d002      	beq.n	80018c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	71fb      	strb	r3, [r7, #7]
 80018c6:	e001      	b.n	80018cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018c8:	f7ff fb90 	bl	8000fec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018cc:	79fb      	ldrb	r3, [r7, #7]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_IncTick+0x20>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_IncTick+0x24>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	4a04      	ldr	r2, [pc, #16]	; (80018fc <HAL_IncTick+0x24>)
 80018ea:	6013      	str	r3, [r2, #0]
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000008 	.word	0x20000008
 80018fc:	2000086c 	.word	0x2000086c

08001900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return uwTick;
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <HAL_GetTick+0x14>)
 8001906:	681b      	ldr	r3, [r3, #0]
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	2000086c 	.word	0x2000086c

08001918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001920:	f7ff ffee 	bl	8001900 <HAL_GetTick>
 8001924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001930:	d005      	beq.n	800193e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_Delay+0x44>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4413      	add	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800193e:	bf00      	nop
 8001940:	f7ff ffde 	bl	8001900 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	429a      	cmp	r2, r3
 800194e:	d8f7      	bhi.n	8001940 <HAL_Delay+0x28>
  {
  }
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000008 	.word	0x20000008

08001960 <__NVIC_SetPriorityGrouping>:
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800197c:	4013      	ands	r3, r2
 800197e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800198c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001992:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	60d3      	str	r3, [r2, #12]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_GetPriorityGrouping>:
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ac:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	0a1b      	lsrs	r3, r3, #8
 80019b2:	f003 0307 	and.w	r3, r3, #7
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_EnableIRQ>:
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	db0b      	blt.n	80019ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	f003 021f 	and.w	r2, r3, #31
 80019dc:	4907      	ldr	r1, [pc, #28]	; (80019fc <__NVIC_EnableIRQ+0x38>)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	095b      	lsrs	r3, r3, #5
 80019e4:	2001      	movs	r0, #1
 80019e6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000e100 	.word	0xe000e100

08001a00 <__NVIC_SetPriority>:
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	6039      	str	r1, [r7, #0]
 8001a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	db0a      	blt.n	8001a2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	490c      	ldr	r1, [pc, #48]	; (8001a4c <__NVIC_SetPriority+0x4c>)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	0112      	lsls	r2, r2, #4
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	440b      	add	r3, r1
 8001a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a28:	e00a      	b.n	8001a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4908      	ldr	r1, [pc, #32]	; (8001a50 <__NVIC_SetPriority+0x50>)
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	3b04      	subs	r3, #4
 8001a38:	0112      	lsls	r2, r2, #4
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	761a      	strb	r2, [r3, #24]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000e100 	.word	0xe000e100
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <NVIC_EncodePriority>:
{
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	; 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f1c3 0307 	rsb	r3, r3, #7
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	bf28      	it	cs
 8001a72:	2304      	movcs	r3, #4
 8001a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	2b06      	cmp	r3, #6
 8001a7c:	d902      	bls.n	8001a84 <NVIC_EncodePriority+0x30>
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3b03      	subs	r3, #3
 8001a82:	e000      	b.n	8001a86 <NVIC_EncodePriority+0x32>
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	f04f 32ff 	mov.w	r2, #4294967295
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43da      	mvns	r2, r3
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	401a      	ands	r2, r3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	43d9      	mvns	r1, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	4313      	orrs	r3, r2
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3724      	adds	r7, #36	; 0x24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ff4c 	bl	8001960 <__NVIC_SetPriorityGrouping>
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae2:	f7ff ff61 	bl	80019a8 <__NVIC_GetPriorityGrouping>
 8001ae6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	68b9      	ldr	r1, [r7, #8]
 8001aec:	6978      	ldr	r0, [r7, #20]
 8001aee:	f7ff ffb1 	bl	8001a54 <NVIC_EncodePriority>
 8001af2:	4602      	mov	r2, r0
 8001af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af8:	4611      	mov	r1, r2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ff80 	bl	8001a00 <__NVIC_SetPriority>
}
 8001b00:	bf00      	nop
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff ff54 	bl	80019c4 <__NVIC_EnableIRQ>
}
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e0ac      	b.n	8001c90 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f8b2 	bl	8001ca4 <DFSDM_GetChannelFromInstance>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4a55      	ldr	r2, [pc, #340]	; (8001c98 <HAL_DFSDM_ChannelInit+0x174>)
 8001b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e09f      	b.n	8001c90 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff fa73 	bl	800103c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001b56:	4b51      	ldr	r3, [pc, #324]	; (8001c9c <HAL_DFSDM_ChannelInit+0x178>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	4a4f      	ldr	r2, [pc, #316]	; (8001c9c <HAL_DFSDM_ChannelInit+0x178>)
 8001b5e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001b60:	4b4e      	ldr	r3, [pc, #312]	; (8001c9c <HAL_DFSDM_ChannelInit+0x178>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d125      	bne.n	8001bb4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001b68:	4b4d      	ldr	r3, [pc, #308]	; (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a4c      	ldr	r2, [pc, #304]	; (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001b72:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001b74:	4b4a      	ldr	r3, [pc, #296]	; (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	4948      	ldr	r1, [pc, #288]	; (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001b82:	4b47      	ldr	r3, [pc, #284]	; (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a46      	ldr	r2, [pc, #280]	; (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b88:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001b8c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	791b      	ldrb	r3, [r3, #4]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d108      	bne.n	8001ba8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001b96:	4b42      	ldr	r3, [pc, #264]	; (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	041b      	lsls	r3, r3, #16
 8001ba2:	493f      	ldr	r1, [pc, #252]	; (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001ba8:	4b3d      	ldr	r3, [pc, #244]	; (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a3c      	ldr	r2, [pc, #240]	; (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bb2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001bc2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6819      	ldr	r1, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001bd2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001bd8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 020f 	bic.w	r2, r2, #15
 8001bf0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6819      	ldr	r1, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001c18:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6899      	ldr	r1, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f002 0207 	and.w	r2, r2, #7
 8001c44:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6859      	ldr	r1, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c70:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 f810 	bl	8001ca4 <DFSDM_GetChannelFromInstance>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4904      	ldr	r1, [pc, #16]	; (8001c98 <HAL_DFSDM_ChannelInit+0x174>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000874 	.word	0x20000874
 8001c9c:	20000870 	.word	0x20000870
 8001ca0:	40016000 	.word	0x40016000

08001ca4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <DFSDM_GetChannelFromInstance+0x7c>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d102      	bne.n	8001cba <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	e02b      	b.n	8001d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a19      	ldr	r2, [pc, #100]	; (8001d24 <DFSDM_GetChannelFromInstance+0x80>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d102      	bne.n	8001cc8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	e024      	b.n	8001d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a17      	ldr	r2, [pc, #92]	; (8001d28 <DFSDM_GetChannelFromInstance+0x84>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d102      	bne.n	8001cd6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	e01d      	b.n	8001d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <DFSDM_GetChannelFromInstance+0x88>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d102      	bne.n	8001ce4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001cde:	2304      	movs	r3, #4
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	e016      	b.n	8001d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <DFSDM_GetChannelFromInstance+0x8c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d102      	bne.n	8001cf2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001cec:	2305      	movs	r3, #5
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	e00f      	b.n	8001d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a0f      	ldr	r2, [pc, #60]	; (8001d34 <DFSDM_GetChannelFromInstance+0x90>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d102      	bne.n	8001d00 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001cfa:	2306      	movs	r3, #6
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	e008      	b.n	8001d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a0d      	ldr	r2, [pc, #52]	; (8001d38 <DFSDM_GetChannelFromInstance+0x94>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d102      	bne.n	8001d0e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001d08:	2307      	movs	r3, #7
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	e001      	b.n	8001d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001d12:	68fb      	ldr	r3, [r7, #12]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	40016000 	.word	0x40016000
 8001d24:	40016020 	.word	0x40016020
 8001d28:	40016040 	.word	0x40016040
 8001d2c:	40016080 	.word	0x40016080
 8001d30:	400160a0 	.word	0x400160a0
 8001d34:	400160c0 	.word	0x400160c0
 8001d38:	400160e0 	.word	0x400160e0

08001d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4a:	e17f      	b.n	800204c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	2101      	movs	r1, #1
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 8171 	beq.w	8002046 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d005      	beq.n	8001d7c <HAL_GPIO_Init+0x40>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d130      	bne.n	8001dde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	2203      	movs	r2, #3
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001db2:	2201      	movs	r2, #1
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	091b      	lsrs	r3, r3, #4
 8001dc8:	f003 0201 	and.w	r2, r3, #1
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	d118      	bne.n	8001e1c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001df0:	2201      	movs	r2, #1
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	08db      	lsrs	r3, r3, #3
 8001e06:	f003 0201 	and.w	r2, r3, #1
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d017      	beq.n	8001e58 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	2203      	movs	r2, #3
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d123      	bne.n	8001eac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	08da      	lsrs	r2, r3, #3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3208      	adds	r2, #8
 8001e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	220f      	movs	r2, #15
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	08da      	lsrs	r2, r3, #3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3208      	adds	r2, #8
 8001ea6:	6939      	ldr	r1, [r7, #16]
 8001ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 0203 	and.w	r2, r3, #3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 80ac 	beq.w	8002046 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eee:	4b5f      	ldr	r3, [pc, #380]	; (800206c <HAL_GPIO_Init+0x330>)
 8001ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef2:	4a5e      	ldr	r2, [pc, #376]	; (800206c <HAL_GPIO_Init+0x330>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6613      	str	r3, [r2, #96]	; 0x60
 8001efa:	4b5c      	ldr	r3, [pc, #368]	; (800206c <HAL_GPIO_Init+0x330>)
 8001efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f06:	4a5a      	ldr	r2, [pc, #360]	; (8002070 <HAL_GPIO_Init+0x334>)
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	220f      	movs	r2, #15
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f30:	d025      	beq.n	8001f7e <HAL_GPIO_Init+0x242>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4f      	ldr	r2, [pc, #316]	; (8002074 <HAL_GPIO_Init+0x338>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d01f      	beq.n	8001f7a <HAL_GPIO_Init+0x23e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4e      	ldr	r2, [pc, #312]	; (8002078 <HAL_GPIO_Init+0x33c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d019      	beq.n	8001f76 <HAL_GPIO_Init+0x23a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4d      	ldr	r2, [pc, #308]	; (800207c <HAL_GPIO_Init+0x340>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d013      	beq.n	8001f72 <HAL_GPIO_Init+0x236>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a4c      	ldr	r2, [pc, #304]	; (8002080 <HAL_GPIO_Init+0x344>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00d      	beq.n	8001f6e <HAL_GPIO_Init+0x232>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a4b      	ldr	r2, [pc, #300]	; (8002084 <HAL_GPIO_Init+0x348>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d007      	beq.n	8001f6a <HAL_GPIO_Init+0x22e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a4a      	ldr	r2, [pc, #296]	; (8002088 <HAL_GPIO_Init+0x34c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d101      	bne.n	8001f66 <HAL_GPIO_Init+0x22a>
 8001f62:	2306      	movs	r3, #6
 8001f64:	e00c      	b.n	8001f80 <HAL_GPIO_Init+0x244>
 8001f66:	2307      	movs	r3, #7
 8001f68:	e00a      	b.n	8001f80 <HAL_GPIO_Init+0x244>
 8001f6a:	2305      	movs	r3, #5
 8001f6c:	e008      	b.n	8001f80 <HAL_GPIO_Init+0x244>
 8001f6e:	2304      	movs	r3, #4
 8001f70:	e006      	b.n	8001f80 <HAL_GPIO_Init+0x244>
 8001f72:	2303      	movs	r3, #3
 8001f74:	e004      	b.n	8001f80 <HAL_GPIO_Init+0x244>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e002      	b.n	8001f80 <HAL_GPIO_Init+0x244>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <HAL_GPIO_Init+0x244>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	f002 0203 	and.w	r2, r2, #3
 8001f86:	0092      	lsls	r2, r2, #2
 8001f88:	4093      	lsls	r3, r2
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f90:	4937      	ldr	r1, [pc, #220]	; (8002070 <HAL_GPIO_Init+0x334>)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	3302      	adds	r3, #2
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f9e:	4b3b      	ldr	r3, [pc, #236]	; (800208c <HAL_GPIO_Init+0x350>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fc2:	4a32      	ldr	r2, [pc, #200]	; (800208c <HAL_GPIO_Init+0x350>)
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fc8:	4b30      	ldr	r3, [pc, #192]	; (800208c <HAL_GPIO_Init+0x350>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fec:	4a27      	ldr	r2, [pc, #156]	; (800208c <HAL_GPIO_Init+0x350>)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ff2:	4b26      	ldr	r3, [pc, #152]	; (800208c <HAL_GPIO_Init+0x350>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4013      	ands	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4313      	orrs	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002016:	4a1d      	ldr	r2, [pc, #116]	; (800208c <HAL_GPIO_Init+0x350>)
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800201c:	4b1b      	ldr	r3, [pc, #108]	; (800208c <HAL_GPIO_Init+0x350>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	43db      	mvns	r3, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4313      	orrs	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002040:	4a12      	ldr	r2, [pc, #72]	; (800208c <HAL_GPIO_Init+0x350>)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	3301      	adds	r3, #1
 800204a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	fa22 f303 	lsr.w	r3, r2, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	f47f ae78 	bne.w	8001d4c <HAL_GPIO_Init+0x10>
  }
}
 800205c:	bf00      	nop
 800205e:	bf00      	nop
 8002060:	371c      	adds	r7, #28
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000
 8002070:	40010000 	.word	0x40010000
 8002074:	48000400 	.word	0x48000400
 8002078:	48000800 	.word	0x48000800
 800207c:	48000c00 	.word	0x48000c00
 8002080:	48001000 	.word	0x48001000
 8002084:	48001400 	.word	0x48001400
 8002088:	48001800 	.word	0x48001800
 800208c:	40010400 	.word	0x40010400

08002090 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800209e:	e0cd      	b.n	800223c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80020a0:	2201      	movs	r2, #1
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 80c0 	beq.w	8002236 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80020b6:	4a68      	ldr	r2, [pc, #416]	; (8002258 <HAL_GPIO_DeInit+0x1c8>)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	3302      	adds	r3, #2
 80020be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	220f      	movs	r2, #15
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4013      	ands	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020de:	d025      	beq.n	800212c <HAL_GPIO_DeInit+0x9c>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a5e      	ldr	r2, [pc, #376]	; (800225c <HAL_GPIO_DeInit+0x1cc>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d01f      	beq.n	8002128 <HAL_GPIO_DeInit+0x98>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a5d      	ldr	r2, [pc, #372]	; (8002260 <HAL_GPIO_DeInit+0x1d0>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d019      	beq.n	8002124 <HAL_GPIO_DeInit+0x94>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a5c      	ldr	r2, [pc, #368]	; (8002264 <HAL_GPIO_DeInit+0x1d4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d013      	beq.n	8002120 <HAL_GPIO_DeInit+0x90>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a5b      	ldr	r2, [pc, #364]	; (8002268 <HAL_GPIO_DeInit+0x1d8>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d00d      	beq.n	800211c <HAL_GPIO_DeInit+0x8c>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a5a      	ldr	r2, [pc, #360]	; (800226c <HAL_GPIO_DeInit+0x1dc>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d007      	beq.n	8002118 <HAL_GPIO_DeInit+0x88>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a59      	ldr	r2, [pc, #356]	; (8002270 <HAL_GPIO_DeInit+0x1e0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d101      	bne.n	8002114 <HAL_GPIO_DeInit+0x84>
 8002110:	2306      	movs	r3, #6
 8002112:	e00c      	b.n	800212e <HAL_GPIO_DeInit+0x9e>
 8002114:	2307      	movs	r3, #7
 8002116:	e00a      	b.n	800212e <HAL_GPIO_DeInit+0x9e>
 8002118:	2305      	movs	r3, #5
 800211a:	e008      	b.n	800212e <HAL_GPIO_DeInit+0x9e>
 800211c:	2304      	movs	r3, #4
 800211e:	e006      	b.n	800212e <HAL_GPIO_DeInit+0x9e>
 8002120:	2303      	movs	r3, #3
 8002122:	e004      	b.n	800212e <HAL_GPIO_DeInit+0x9e>
 8002124:	2302      	movs	r3, #2
 8002126:	e002      	b.n	800212e <HAL_GPIO_DeInit+0x9e>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <HAL_GPIO_DeInit+0x9e>
 800212c:	2300      	movs	r3, #0
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	f002 0203 	and.w	r2, r2, #3
 8002134:	0092      	lsls	r2, r2, #2
 8002136:	4093      	lsls	r3, r2
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	429a      	cmp	r2, r3
 800213c:	d132      	bne.n	80021a4 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800213e:	4b4d      	ldr	r3, [pc, #308]	; (8002274 <HAL_GPIO_DeInit+0x1e4>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	43db      	mvns	r3, r3
 8002146:	494b      	ldr	r1, [pc, #300]	; (8002274 <HAL_GPIO_DeInit+0x1e4>)
 8002148:	4013      	ands	r3, r2
 800214a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800214c:	4b49      	ldr	r3, [pc, #292]	; (8002274 <HAL_GPIO_DeInit+0x1e4>)
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	43db      	mvns	r3, r3
 8002154:	4947      	ldr	r1, [pc, #284]	; (8002274 <HAL_GPIO_DeInit+0x1e4>)
 8002156:	4013      	ands	r3, r2
 8002158:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800215a:	4b46      	ldr	r3, [pc, #280]	; (8002274 <HAL_GPIO_DeInit+0x1e4>)
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	43db      	mvns	r3, r3
 8002162:	4944      	ldr	r1, [pc, #272]	; (8002274 <HAL_GPIO_DeInit+0x1e4>)
 8002164:	4013      	ands	r3, r2
 8002166:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002168:	4b42      	ldr	r3, [pc, #264]	; (8002274 <HAL_GPIO_DeInit+0x1e4>)
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	43db      	mvns	r3, r3
 8002170:	4940      	ldr	r1, [pc, #256]	; (8002274 <HAL_GPIO_DeInit+0x1e4>)
 8002172:	4013      	ands	r3, r2
 8002174:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	220f      	movs	r2, #15
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002186:	4a34      	ldr	r2, [pc, #208]	; (8002258 <HAL_GPIO_DeInit+0x1c8>)
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	089b      	lsrs	r3, r3, #2
 800218c:	3302      	adds	r3, #2
 800218e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	43da      	mvns	r2, r3
 8002196:	4830      	ldr	r0, [pc, #192]	; (8002258 <HAL_GPIO_DeInit+0x1c8>)
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	089b      	lsrs	r3, r3, #2
 800219c:	400a      	ands	r2, r1
 800219e:	3302      	adds	r3, #2
 80021a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	2103      	movs	r1, #3
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	08da      	lsrs	r2, r3, #3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3208      	adds	r2, #8
 80021c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	220f      	movs	r2, #15
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	08d2      	lsrs	r2, r2, #3
 80021d8:	4019      	ands	r1, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3208      	adds	r2, #8
 80021de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	2103      	movs	r1, #3
 80021ec:	fa01 f303 	lsl.w	r3, r1, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	401a      	ands	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	2101      	movs	r1, #1
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	fa01 f303 	lsl.w	r3, r1, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	401a      	ands	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68da      	ldr	r2, [r3, #12]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	2103      	movs	r1, #3
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	401a      	ands	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002226:	2101      	movs	r1, #1
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	fa01 f303 	lsl.w	r3, r1, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	401a      	ands	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	3301      	adds	r3, #1
 800223a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	fa22 f303 	lsr.w	r3, r2, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	f47f af2b 	bne.w	80020a0 <HAL_GPIO_DeInit+0x10>
  }
}
 800224a:	bf00      	nop
 800224c:	bf00      	nop
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	40010000 	.word	0x40010000
 800225c:	48000400 	.word	0x48000400
 8002260:	48000800 	.word	0x48000800
 8002264:	48000c00 	.word	0x48000c00
 8002268:	48001000 	.word	0x48001000
 800226c:	48001400 	.word	0x48001400
 8002270:	48001800 	.word	0x48001800
 8002274:	40010400 	.word	0x40010400

08002278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	807b      	strh	r3, [r7, #2]
 8002284:	4613      	mov	r3, r2
 8002286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002288:	787b      	ldrb	r3, [r7, #1]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800228e:	887a      	ldrh	r2, [r7, #2]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002294:	e002      	b.n	800229c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002296:	887a      	ldrh	r2, [r7, #2]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022b2:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022b4:	695a      	ldr	r2, [r3, #20]
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d006      	beq.n	80022cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022be:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022c4:	88fb      	ldrh	r3, [r7, #6]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe fda6 	bl	8000e18 <HAL_GPIO_EXTI_Callback>
  }
}
 80022cc:	bf00      	nop
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40010400 	.word	0x40010400

080022d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e081      	b.n	80023ee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d106      	bne.n	8002304 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7fe ff00 	bl	8001104 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2224      	movs	r2, #36	; 0x24
 8002308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0201 	bic.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002328:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002338:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d107      	bne.n	8002352 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	e006      	b.n	8002360 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800235e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2b02      	cmp	r3, #2
 8002366:	d104      	bne.n	8002372 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002370:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002384:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002394:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691a      	ldr	r2, [r3, #16]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69d9      	ldr	r1, [r3, #28]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1a      	ldr	r2, [r3, #32]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e021      	b.n	800244c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2224      	movs	r2, #36	; 0x24
 800240c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0201 	bic.w	r2, r2, #1
 800241e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7fe fecd 	bl	80011c0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af02      	add	r7, sp, #8
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	4608      	mov	r0, r1
 800245e:	4611      	mov	r1, r2
 8002460:	461a      	mov	r2, r3
 8002462:	4603      	mov	r3, r0
 8002464:	817b      	strh	r3, [r7, #10]
 8002466:	460b      	mov	r3, r1
 8002468:	813b      	strh	r3, [r7, #8]
 800246a:	4613      	mov	r3, r2
 800246c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b20      	cmp	r3, #32
 8002478:	f040 80f9 	bne.w	800266e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <HAL_I2C_Mem_Write+0x34>
 8002482:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002484:	2b00      	cmp	r3, #0
 8002486:	d105      	bne.n	8002494 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800248e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e0ed      	b.n	8002670 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_I2C_Mem_Write+0x4e>
 800249e:	2302      	movs	r3, #2
 80024a0:	e0e6      	b.n	8002670 <HAL_I2C_Mem_Write+0x21c>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024aa:	f7ff fa29 	bl	8001900 <HAL_GetTick>
 80024ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	2319      	movs	r3, #25
 80024b6:	2201      	movs	r2, #1
 80024b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 fac3 	bl	8002a48 <I2C_WaitOnFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0d1      	b.n	8002670 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2221      	movs	r2, #33	; 0x21
 80024d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2240      	movs	r2, #64	; 0x40
 80024d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a3a      	ldr	r2, [r7, #32]
 80024e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024f4:	88f8      	ldrh	r0, [r7, #6]
 80024f6:	893a      	ldrh	r2, [r7, #8]
 80024f8:	8979      	ldrh	r1, [r7, #10]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	9301      	str	r3, [sp, #4]
 80024fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	4603      	mov	r3, r0
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f9d3 	bl	80028b0 <I2C_RequestMemoryWrite>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0a9      	b.n	8002670 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002520:	b29b      	uxth	r3, r3
 8002522:	2bff      	cmp	r3, #255	; 0xff
 8002524:	d90e      	bls.n	8002544 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	22ff      	movs	r2, #255	; 0xff
 800252a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002530:	b2da      	uxtb	r2, r3
 8002532:	8979      	ldrh	r1, [r7, #10]
 8002534:	2300      	movs	r3, #0
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 fc2b 	bl	8002d98 <I2C_TransferConfig>
 8002542:	e00f      	b.n	8002564 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002552:	b2da      	uxtb	r2, r3
 8002554:	8979      	ldrh	r1, [r7, #10]
 8002556:	2300      	movs	r3, #0
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 fc1a 	bl	8002d98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 faad 	bl	8002ac8 <I2C_WaitOnTXISFlagUntilTimeout>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e07b      	b.n	8002670 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	781a      	ldrb	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002592:	b29b      	uxth	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a0:	3b01      	subs	r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d034      	beq.n	800261c <HAL_I2C_Mem_Write+0x1c8>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d130      	bne.n	800261c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c0:	2200      	movs	r2, #0
 80025c2:	2180      	movs	r1, #128	; 0x80
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 fa3f 	bl	8002a48 <I2C_WaitOnFlagUntilTimeout>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e04d      	b.n	8002670 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2bff      	cmp	r3, #255	; 0xff
 80025dc:	d90e      	bls.n	80025fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	22ff      	movs	r2, #255	; 0xff
 80025e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	8979      	ldrh	r1, [r7, #10]
 80025ec:	2300      	movs	r3, #0
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 fbcf 	bl	8002d98 <I2C_TransferConfig>
 80025fa:	e00f      	b.n	800261c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260a:	b2da      	uxtb	r2, r3
 800260c:	8979      	ldrh	r1, [r7, #10]
 800260e:	2300      	movs	r3, #0
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 fbbe 	bl	8002d98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002620:	b29b      	uxth	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d19e      	bne.n	8002564 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 fa8c 	bl	8002b48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e01a      	b.n	8002670 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2220      	movs	r2, #32
 8002640:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6859      	ldr	r1, [r3, #4]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <HAL_I2C_Mem_Write+0x224>)
 800264e:	400b      	ands	r3, r1
 8002650:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2220      	movs	r2, #32
 8002656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	e000      	b.n	8002670 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800266e:	2302      	movs	r3, #2
  }
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	fe00e800 	.word	0xfe00e800

0800267c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af02      	add	r7, sp, #8
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	4608      	mov	r0, r1
 8002686:	4611      	mov	r1, r2
 8002688:	461a      	mov	r2, r3
 800268a:	4603      	mov	r3, r0
 800268c:	817b      	strh	r3, [r7, #10]
 800268e:	460b      	mov	r3, r1
 8002690:	813b      	strh	r3, [r7, #8]
 8002692:	4613      	mov	r3, r2
 8002694:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b20      	cmp	r3, #32
 80026a0:	f040 80fd 	bne.w	800289e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <HAL_I2C_Mem_Read+0x34>
 80026aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d105      	bne.n	80026bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0f1      	b.n	80028a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_I2C_Mem_Read+0x4e>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e0ea      	b.n	80028a0 <HAL_I2C_Mem_Read+0x224>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026d2:	f7ff f915 	bl	8001900 <HAL_GetTick>
 80026d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	2319      	movs	r3, #25
 80026de:	2201      	movs	r2, #1
 80026e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 f9af 	bl	8002a48 <I2C_WaitOnFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0d5      	b.n	80028a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2222      	movs	r2, #34	; 0x22
 80026f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2240      	movs	r2, #64	; 0x40
 8002700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a3a      	ldr	r2, [r7, #32]
 800270e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002714:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800271c:	88f8      	ldrh	r0, [r7, #6]
 800271e:	893a      	ldrh	r2, [r7, #8]
 8002720:	8979      	ldrh	r1, [r7, #10]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	9301      	str	r3, [sp, #4]
 8002726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	4603      	mov	r3, r0
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 f913 	bl	8002958 <I2C_RequestMemoryRead>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0ad      	b.n	80028a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002748:	b29b      	uxth	r3, r3
 800274a:	2bff      	cmp	r3, #255	; 0xff
 800274c:	d90e      	bls.n	800276c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	22ff      	movs	r2, #255	; 0xff
 8002752:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002758:	b2da      	uxtb	r2, r3
 800275a:	8979      	ldrh	r1, [r7, #10]
 800275c:	4b52      	ldr	r3, [pc, #328]	; (80028a8 <HAL_I2C_Mem_Read+0x22c>)
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 fb17 	bl	8002d98 <I2C_TransferConfig>
 800276a:	e00f      	b.n	800278c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002770:	b29a      	uxth	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277a:	b2da      	uxtb	r2, r3
 800277c:	8979      	ldrh	r1, [r7, #10]
 800277e:	4b4a      	ldr	r3, [pc, #296]	; (80028a8 <HAL_I2C_Mem_Read+0x22c>)
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 fb06 	bl	8002d98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002792:	2200      	movs	r2, #0
 8002794:	2104      	movs	r1, #4
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 f956 	bl	8002a48 <I2C_WaitOnFlagUntilTimeout>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e07c      	b.n	80028a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027dc:	b29b      	uxth	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d034      	beq.n	800284c <HAL_I2C_Mem_Read+0x1d0>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d130      	bne.n	800284c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f0:	2200      	movs	r2, #0
 80027f2:	2180      	movs	r1, #128	; 0x80
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 f927 	bl	8002a48 <I2C_WaitOnFlagUntilTimeout>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e04d      	b.n	80028a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002808:	b29b      	uxth	r3, r3
 800280a:	2bff      	cmp	r3, #255	; 0xff
 800280c:	d90e      	bls.n	800282c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	22ff      	movs	r2, #255	; 0xff
 8002812:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002818:	b2da      	uxtb	r2, r3
 800281a:	8979      	ldrh	r1, [r7, #10]
 800281c:	2300      	movs	r3, #0
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 fab7 	bl	8002d98 <I2C_TransferConfig>
 800282a:	e00f      	b.n	800284c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002830:	b29a      	uxth	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283a:	b2da      	uxtb	r2, r3
 800283c:	8979      	ldrh	r1, [r7, #10]
 800283e:	2300      	movs	r3, #0
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 faa6 	bl	8002d98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002850:	b29b      	uxth	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d19a      	bne.n	800278c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f974 	bl	8002b48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e01a      	b.n	80028a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2220      	movs	r2, #32
 8002870:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6859      	ldr	r1, [r3, #4]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <HAL_I2C_Mem_Read+0x230>)
 800287e:	400b      	ands	r3, r1
 8002880:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2220      	movs	r2, #32
 8002886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	e000      	b.n	80028a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800289e:	2302      	movs	r3, #2
  }
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	80002400 	.word	0x80002400
 80028ac:	fe00e800 	.word	0xfe00e800

080028b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af02      	add	r7, sp, #8
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	4608      	mov	r0, r1
 80028ba:	4611      	mov	r1, r2
 80028bc:	461a      	mov	r2, r3
 80028be:	4603      	mov	r3, r0
 80028c0:	817b      	strh	r3, [r7, #10]
 80028c2:	460b      	mov	r3, r1
 80028c4:	813b      	strh	r3, [r7, #8]
 80028c6:	4613      	mov	r3, r2
 80028c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80028ca:	88fb      	ldrh	r3, [r7, #6]
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	8979      	ldrh	r1, [r7, #10]
 80028d0:	4b20      	ldr	r3, [pc, #128]	; (8002954 <I2C_RequestMemoryWrite+0xa4>)
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 fa5d 	bl	8002d98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	69b9      	ldr	r1, [r7, #24]
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f8f0 	bl	8002ac8 <I2C_WaitOnTXISFlagUntilTimeout>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e02c      	b.n	800294c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d105      	bne.n	8002904 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028f8:	893b      	ldrh	r3, [r7, #8]
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	629a      	str	r2, [r3, #40]	; 0x28
 8002902:	e015      	b.n	8002930 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002904:	893b      	ldrh	r3, [r7, #8]
 8002906:	0a1b      	lsrs	r3, r3, #8
 8002908:	b29b      	uxth	r3, r3
 800290a:	b2da      	uxtb	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002912:	69fa      	ldr	r2, [r7, #28]
 8002914:	69b9      	ldr	r1, [r7, #24]
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 f8d6 	bl	8002ac8 <I2C_WaitOnTXISFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e012      	b.n	800294c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002926:	893b      	ldrh	r3, [r7, #8]
 8002928:	b2da      	uxtb	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2200      	movs	r2, #0
 8002938:	2180      	movs	r1, #128	; 0x80
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f884 	bl	8002a48 <I2C_WaitOnFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	80002000 	.word	0x80002000

08002958 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af02      	add	r7, sp, #8
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	4608      	mov	r0, r1
 8002962:	4611      	mov	r1, r2
 8002964:	461a      	mov	r2, r3
 8002966:	4603      	mov	r3, r0
 8002968:	817b      	strh	r3, [r7, #10]
 800296a:	460b      	mov	r3, r1
 800296c:	813b      	strh	r3, [r7, #8]
 800296e:	4613      	mov	r3, r2
 8002970:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	b2da      	uxtb	r2, r3
 8002976:	8979      	ldrh	r1, [r7, #10]
 8002978:	4b20      	ldr	r3, [pc, #128]	; (80029fc <I2C_RequestMemoryRead+0xa4>)
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	2300      	movs	r3, #0
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 fa0a 	bl	8002d98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002984:	69fa      	ldr	r2, [r7, #28]
 8002986:	69b9      	ldr	r1, [r7, #24]
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 f89d 	bl	8002ac8 <I2C_WaitOnTXISFlagUntilTimeout>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e02c      	b.n	80029f2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d105      	bne.n	80029aa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800299e:	893b      	ldrh	r3, [r7, #8]
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	629a      	str	r2, [r3, #40]	; 0x28
 80029a8:	e015      	b.n	80029d6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029aa:	893b      	ldrh	r3, [r7, #8]
 80029ac:	0a1b      	lsrs	r3, r3, #8
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029b8:	69fa      	ldr	r2, [r7, #28]
 80029ba:	69b9      	ldr	r1, [r7, #24]
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 f883 	bl	8002ac8 <I2C_WaitOnTXISFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e012      	b.n	80029f2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029cc:	893b      	ldrh	r3, [r7, #8]
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	2200      	movs	r2, #0
 80029de:	2140      	movs	r1, #64	; 0x40
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f831 	bl	8002a48 <I2C_WaitOnFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e000      	b.n	80029f2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	80002000 	.word	0x80002000

08002a00 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d103      	bne.n	8002a1e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d007      	beq.n	8002a3c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	619a      	str	r2, [r3, #24]
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	4613      	mov	r3, r2
 8002a56:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a58:	e022      	b.n	8002aa0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a60:	d01e      	beq.n	8002aa0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a62:	f7fe ff4d 	bl	8001900 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d302      	bcc.n	8002a78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d113      	bne.n	8002aa0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7c:	f043 0220 	orr.w	r2, r3, #32
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e00f      	b.n	8002ac0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699a      	ldr	r2, [r3, #24]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d0cd      	beq.n	8002a5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ad4:	e02c      	b.n	8002b30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	68b9      	ldr	r1, [r7, #8]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f870 	bl	8002bc0 <I2C_IsErrorOccurred>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e02a      	b.n	8002b40 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af0:	d01e      	beq.n	8002b30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af2:	f7fe ff05 	bl	8001900 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d302      	bcc.n	8002b08 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d113      	bne.n	8002b30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0c:	f043 0220 	orr.w	r2, r3, #32
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e007      	b.n	8002b40 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d1cb      	bne.n	8002ad6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b54:	e028      	b.n	8002ba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f830 	bl	8002bc0 <I2C_IsErrorOccurred>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e026      	b.n	8002bb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b6a:	f7fe fec9 	bl	8001900 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d302      	bcc.n	8002b80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d113      	bne.n	8002ba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b84:	f043 0220 	orr.w	r2, r3, #32
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e007      	b.n	8002bb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b20      	cmp	r3, #32
 8002bb4:	d1cf      	bne.n	8002b56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08a      	sub	sp, #40	; 0x28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	f003 0310 	and.w	r3, r3, #16
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d075      	beq.n	8002cd8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2210      	movs	r2, #16
 8002bf2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bf4:	e056      	b.n	8002ca4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfc:	d052      	beq.n	8002ca4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bfe:	f7fe fe7f 	bl	8001900 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d302      	bcc.n	8002c14 <I2C_IsErrorOccurred+0x54>
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d147      	bne.n	8002ca4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c36:	d12e      	bne.n	8002c96 <I2C_IsErrorOccurred+0xd6>
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c3e:	d02a      	beq.n	8002c96 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002c40:	7cfb      	ldrb	r3, [r7, #19]
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	d027      	beq.n	8002c96 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c54:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c56:	f7fe fe53 	bl	8001900 <HAL_GetTick>
 8002c5a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c5c:	e01b      	b.n	8002c96 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c5e:	f7fe fe4f 	bl	8001900 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b19      	cmp	r3, #25
 8002c6a:	d914      	bls.n	8002c96 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c70:	f043 0220 	orr.w	r2, r3, #32
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d1dc      	bne.n	8002c5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	d003      	beq.n	8002cba <I2C_IsErrorOccurred+0xfa>
 8002cb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d09d      	beq.n	8002bf6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002cba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d103      	bne.n	8002cca <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	f043 0304 	orr.w	r3, r3, #4
 8002cd0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00b      	beq.n	8002d02 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cfa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00b      	beq.n	8002d24 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	f043 0308 	orr.w	r3, r3, #8
 8002d12:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00b      	beq.n	8002d46 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	f043 0302 	orr.w	r3, r3, #2
 8002d34:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d01c      	beq.n	8002d88 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f7ff fe56 	bl	8002a00 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6859      	ldr	r1, [r3, #4]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	4b0d      	ldr	r3, [pc, #52]	; (8002d94 <I2C_IsErrorOccurred+0x1d4>)
 8002d60:	400b      	ands	r3, r1
 8002d62:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002d88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3728      	adds	r7, #40	; 0x28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	fe00e800 	.word	0xfe00e800

08002d98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	607b      	str	r3, [r7, #4]
 8002da2:	460b      	mov	r3, r1
 8002da4:	817b      	strh	r3, [r7, #10]
 8002da6:	4613      	mov	r3, r2
 8002da8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002daa:	897b      	ldrh	r3, [r7, #10]
 8002dac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002db0:	7a7b      	ldrb	r3, [r7, #9]
 8002db2:	041b      	lsls	r3, r3, #16
 8002db4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002db8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dc6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	0d5b      	lsrs	r3, r3, #21
 8002dd2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002dd6:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <I2C_TransferConfig+0x60>)
 8002dd8:	430b      	orrs	r3, r1
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	ea02 0103 	and.w	r1, r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002dea:	bf00      	nop
 8002dec:	371c      	adds	r7, #28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	03ff63ff 	.word	0x03ff63ff

08002dfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	d138      	bne.n	8002e84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e032      	b.n	8002e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2224      	movs	r2, #36	; 0x24
 8002e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0201 	bic.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6819      	ldr	r1, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	e000      	b.n	8002e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e84:	2302      	movs	r3, #2
  }
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b085      	sub	sp, #20
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d139      	bne.n	8002f1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e033      	b.n	8002f1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2224      	movs	r2, #36	; 0x24
 8002ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0201 	bic.w	r2, r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ee4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	021b      	lsls	r3, r3, #8
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	e000      	b.n	8002f1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f1c:	2302      	movs	r3, #2
  }
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f2c:	b08f      	sub	sp, #60	; 0x3c
 8002f2e:	af0a      	add	r7, sp, #40	; 0x28
 8002f30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e116      	b.n	800316a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fe fa82 	bl	8001460 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2203      	movs	r2, #3
 8002f60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d102      	bne.n	8002f76 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f002 fdb1 	bl	8005ae2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	603b      	str	r3, [r7, #0]
 8002f86:	687e      	ldr	r6, [r7, #4]
 8002f88:	466d      	mov	r5, sp
 8002f8a:	f106 0410 	add.w	r4, r6, #16
 8002f8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f9e:	1d33      	adds	r3, r6, #4
 8002fa0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fa2:	6838      	ldr	r0, [r7, #0]
 8002fa4:	f002 fd71 	bl	8005a8a <USB_CoreInit>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d005      	beq.n	8002fba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e0d7      	b.n	800316a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f002 fd9f 	bl	8005b04 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	73fb      	strb	r3, [r7, #15]
 8002fca:	e04a      	b.n	8003062 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fcc:	7bfa      	ldrb	r2, [r7, #15]
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	333d      	adds	r3, #61	; 0x3d
 8002fdc:	2201      	movs	r2, #1
 8002fde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fe0:	7bfa      	ldrb	r2, [r7, #15]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	333c      	adds	r3, #60	; 0x3c
 8002ff0:	7bfa      	ldrb	r2, [r7, #15]
 8002ff2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
 8002ff8:	b298      	uxth	r0, r3
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	3344      	adds	r3, #68	; 0x44
 8003008:	4602      	mov	r2, r0
 800300a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800300c:	7bfa      	ldrb	r2, [r7, #15]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	3340      	adds	r3, #64	; 0x40
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003020:	7bfa      	ldrb	r2, [r7, #15]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4413      	add	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	3348      	adds	r3, #72	; 0x48
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003034:	7bfa      	ldrb	r2, [r7, #15]
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	334c      	adds	r3, #76	; 0x4c
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003048:	7bfa      	ldrb	r2, [r7, #15]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	3354      	adds	r3, #84	; 0x54
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800305c:	7bfb      	ldrb	r3, [r7, #15]
 800305e:	3301      	adds	r3, #1
 8003060:	73fb      	strb	r3, [r7, #15]
 8003062:	7bfa      	ldrb	r2, [r7, #15]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	429a      	cmp	r2, r3
 800306a:	d3af      	bcc.n	8002fcc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800306c:	2300      	movs	r3, #0
 800306e:	73fb      	strb	r3, [r7, #15]
 8003070:	e044      	b.n	80030fc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003072:	7bfa      	ldrb	r2, [r7, #15]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	4413      	add	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003084:	2200      	movs	r2, #0
 8003086:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003088:	7bfa      	ldrb	r2, [r7, #15]
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	4413      	add	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800309a:	7bfa      	ldrb	r2, [r7, #15]
 800309c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800309e:	7bfa      	ldrb	r2, [r7, #15]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030b4:	7bfa      	ldrb	r2, [r7, #15]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4413      	add	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030ca:	7bfa      	ldrb	r2, [r7, #15]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030e0:	7bfa      	ldrb	r2, [r7, #15]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
 80030f8:	3301      	adds	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
 80030fc:	7bfa      	ldrb	r2, [r7, #15]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	429a      	cmp	r2, r3
 8003104:	d3b5      	bcc.n	8003072 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	687e      	ldr	r6, [r7, #4]
 800310e:	466d      	mov	r5, sp
 8003110:	f106 0410 	add.w	r4, r6, #16
 8003114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800311a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800311c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003120:	e885 0003 	stmia.w	r5, {r0, r1}
 8003124:	1d33      	adds	r3, r6, #4
 8003126:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003128:	6838      	ldr	r0, [r7, #0]
 800312a:	f002 fd37 	bl	8005b9c <USB_DevInit>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e014      	b.n	800316a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	2b01      	cmp	r3, #1
 8003156:	d102      	bne.n	800315e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f80a 	bl	8003172 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f002 fee3 	bl	8005f2e <USB_DevDisconnect>

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003172 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003172:	b480      	push	{r7}
 8003174:	b085      	sub	sp, #20
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a4:	f043 0303 	orr.w	r3, r3, #3
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
	...

080031bc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031c0:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a04      	ldr	r2, [pc, #16]	; (80031d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ca:	6013      	str	r3, [r2, #0]
}
 80031cc:	bf00      	nop
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40007000 	.word	0x40007000

080031dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80031e0:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40007000 	.word	0x40007000

080031f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003206:	d130      	bne.n	800326a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003208:	4b23      	ldr	r3, [pc, #140]	; (8003298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003214:	d038      	beq.n	8003288 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003216:	4b20      	ldr	r3, [pc, #128]	; (8003298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800321e:	4a1e      	ldr	r2, [pc, #120]	; (8003298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003220:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003224:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003226:	4b1d      	ldr	r3, [pc, #116]	; (800329c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2232      	movs	r2, #50	; 0x32
 800322c:	fb02 f303 	mul.w	r3, r2, r3
 8003230:	4a1b      	ldr	r2, [pc, #108]	; (80032a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	0c9b      	lsrs	r3, r3, #18
 8003238:	3301      	adds	r3, #1
 800323a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800323c:	e002      	b.n	8003244 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	3b01      	subs	r3, #1
 8003242:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003244:	4b14      	ldr	r3, [pc, #80]	; (8003298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003250:	d102      	bne.n	8003258 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f2      	bne.n	800323e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003264:	d110      	bne.n	8003288 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e00f      	b.n	800328a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800326a:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003276:	d007      	beq.n	8003288 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003278:	4b07      	ldr	r3, [pc, #28]	; (8003298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003280:	4a05      	ldr	r2, [pc, #20]	; (8003298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003286:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40007000 	.word	0x40007000
 800329c:	20000000 	.word	0x20000000
 80032a0:	431bde83 	.word	0x431bde83

080032a4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80032a8:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	4a04      	ldr	r2, [pc, #16]	; (80032c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80032ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032b2:	6053      	str	r3, [r2, #4]
}
 80032b4:	bf00      	nop
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40007000 	.word	0x40007000

080032c4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80032cc:	f7fe fb18 	bl	8001900 <HAL_GetTick>
 80032d0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e063      	b.n	80033a4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10b      	bne.n	8003300 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7fd ff89 	bl	8001208 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80032f6:	f241 3188 	movw	r1, #5000	; 0x1388
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f858 	bl	80033b0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	3b01      	subs	r3, #1
 8003310:	021a      	lsls	r2, r3, #8
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	2120      	movs	r1, #32
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f850 	bl	80033cc <QSPI_WaitFlagStateUntilTimeout>
 800332c:	4603      	mov	r3, r0
 800332e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003330:	7afb      	ldrb	r3, [r7, #11]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d131      	bne.n	800339a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003340:	f023 0310 	bic.w	r3, r3, #16
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6852      	ldr	r2, [r2, #4]
 8003348:	0611      	lsls	r1, r2, #24
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68d2      	ldr	r2, [r2, #12]
 800334e:	4311      	orrs	r1, r2
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	430b      	orrs	r3, r1
 8003356:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	4b13      	ldr	r3, [pc, #76]	; (80033ac <HAL_QSPI_Init+0xe8>)
 8003360:	4013      	ands	r3, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6912      	ldr	r2, [r2, #16]
 8003366:	0411      	lsls	r1, r2, #16
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6952      	ldr	r2, [r2, #20]
 800336c:	4311      	orrs	r1, r2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6992      	ldr	r2, [r2, #24]
 8003372:	4311      	orrs	r1, r2
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6812      	ldr	r2, [r2, #0]
 8003378:	430b      	orrs	r3, r1
 800337a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80033a2:	7afb      	ldrb	r3, [r7, #11]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	ffe0f8fe 	.word	0xffe0f8fe

080033b0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	641a      	str	r2, [r3, #64]	; 0x40
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	603b      	str	r3, [r7, #0]
 80033d8:	4613      	mov	r3, r2
 80033da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80033dc:	e01a      	b.n	8003414 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e4:	d016      	beq.n	8003414 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e6:	f7fe fa8b 	bl	8001900 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d302      	bcc.n	80033fc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10b      	bne.n	8003414 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2204      	movs	r2, #4
 8003400:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003408:	f043 0201 	orr.w	r2, r3, #1
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e00e      	b.n	8003432 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	4013      	ands	r3, r2
 800341e:	2b00      	cmp	r3, #0
 8003420:	bf14      	ite	ne
 8003422:	2301      	movne	r3, #1
 8003424:	2300      	moveq	r3, #0
 8003426:	b2db      	uxtb	r3, r3
 8003428:	461a      	mov	r2, r3
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	429a      	cmp	r2, r3
 800342e:	d1d6      	bne.n	80033de <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e3ca      	b.n	8003be4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800344e:	4b97      	ldr	r3, [pc, #604]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003458:	4b94      	ldr	r3, [pc, #592]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f003 0303 	and.w	r3, r3, #3
 8003460:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 80e4 	beq.w	8003638 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d007      	beq.n	8003486 <HAL_RCC_OscConfig+0x4a>
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	2b0c      	cmp	r3, #12
 800347a:	f040 808b 	bne.w	8003594 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b01      	cmp	r3, #1
 8003482:	f040 8087 	bne.w	8003594 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003486:	4b89      	ldr	r3, [pc, #548]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <HAL_RCC_OscConfig+0x62>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e3a2      	b.n	8003be4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1a      	ldr	r2, [r3, #32]
 80034a2:	4b82      	ldr	r3, [pc, #520]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d004      	beq.n	80034b8 <HAL_RCC_OscConfig+0x7c>
 80034ae:	4b7f      	ldr	r3, [pc, #508]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034b6:	e005      	b.n	80034c4 <HAL_RCC_OscConfig+0x88>
 80034b8:	4b7c      	ldr	r3, [pc, #496]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80034ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034be:	091b      	lsrs	r3, r3, #4
 80034c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d223      	bcs.n	8003510 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 fd87 	bl	8003fe0 <RCC_SetFlashLatencyFromMSIRange>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e383      	b.n	8003be4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034dc:	4b73      	ldr	r3, [pc, #460]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a72      	ldr	r2, [pc, #456]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80034e2:	f043 0308 	orr.w	r3, r3, #8
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	4b70      	ldr	r3, [pc, #448]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	496d      	ldr	r1, [pc, #436]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034fa:	4b6c      	ldr	r3, [pc, #432]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	021b      	lsls	r3, r3, #8
 8003508:	4968      	ldr	r1, [pc, #416]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 800350a:	4313      	orrs	r3, r2
 800350c:	604b      	str	r3, [r1, #4]
 800350e:	e025      	b.n	800355c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003510:	4b66      	ldr	r3, [pc, #408]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a65      	ldr	r2, [pc, #404]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 8003516:	f043 0308 	orr.w	r3, r3, #8
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	4b63      	ldr	r3, [pc, #396]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4960      	ldr	r1, [pc, #384]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800352e:	4b5f      	ldr	r3, [pc, #380]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	495b      	ldr	r1, [pc, #364]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 800353e:	4313      	orrs	r3, r2
 8003540:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d109      	bne.n	800355c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fd47 	bl	8003fe0 <RCC_SetFlashLatencyFromMSIRange>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e343      	b.n	8003be4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800355c:	f000 fc4a 	bl	8003df4 <HAL_RCC_GetSysClockFreq>
 8003560:	4602      	mov	r2, r0
 8003562:	4b52      	ldr	r3, [pc, #328]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	091b      	lsrs	r3, r3, #4
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	4950      	ldr	r1, [pc, #320]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 800356e:	5ccb      	ldrb	r3, [r1, r3]
 8003570:	f003 031f 	and.w	r3, r3, #31
 8003574:	fa22 f303 	lsr.w	r3, r2, r3
 8003578:	4a4e      	ldr	r2, [pc, #312]	; (80036b4 <HAL_RCC_OscConfig+0x278>)
 800357a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800357c:	4b4e      	ldr	r3, [pc, #312]	; (80036b8 <HAL_RCC_OscConfig+0x27c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f7fe f809 	bl	8001598 <HAL_InitTick>
 8003586:	4603      	mov	r3, r0
 8003588:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800358a:	7bfb      	ldrb	r3, [r7, #15]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d052      	beq.n	8003636 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	e327      	b.n	8003be4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d032      	beq.n	8003602 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800359c:	4b43      	ldr	r3, [pc, #268]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a42      	ldr	r2, [pc, #264]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035a8:	f7fe f9aa 	bl	8001900 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035b0:	f7fe f9a6 	bl	8001900 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e310      	b.n	8003be4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035c2:	4b3a      	ldr	r3, [pc, #232]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035ce:	4b37      	ldr	r3, [pc, #220]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a36      	ldr	r2, [pc, #216]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80035d4:	f043 0308 	orr.w	r3, r3, #8
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	4b34      	ldr	r3, [pc, #208]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	4931      	ldr	r1, [pc, #196]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035ec:	4b2f      	ldr	r3, [pc, #188]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	021b      	lsls	r3, r3, #8
 80035fa:	492c      	ldr	r1, [pc, #176]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	604b      	str	r3, [r1, #4]
 8003600:	e01a      	b.n	8003638 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003602:	4b2a      	ldr	r3, [pc, #168]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a29      	ldr	r2, [pc, #164]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 8003608:	f023 0301 	bic.w	r3, r3, #1
 800360c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800360e:	f7fe f977 	bl	8001900 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003616:	f7fe f973 	bl	8001900 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e2dd      	b.n	8003be4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003628:	4b20      	ldr	r3, [pc, #128]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1f0      	bne.n	8003616 <HAL_RCC_OscConfig+0x1da>
 8003634:	e000      	b.n	8003638 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003636:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d074      	beq.n	800372e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	2b08      	cmp	r3, #8
 8003648:	d005      	beq.n	8003656 <HAL_RCC_OscConfig+0x21a>
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	2b0c      	cmp	r3, #12
 800364e:	d10e      	bne.n	800366e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2b03      	cmp	r3, #3
 8003654:	d10b      	bne.n	800366e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003656:	4b15      	ldr	r3, [pc, #84]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d064      	beq.n	800372c <HAL_RCC_OscConfig+0x2f0>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d160      	bne.n	800372c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e2ba      	b.n	8003be4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003676:	d106      	bne.n	8003686 <HAL_RCC_OscConfig+0x24a>
 8003678:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a0b      	ldr	r2, [pc, #44]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 800367e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003682:	6013      	str	r3, [r2, #0]
 8003684:	e026      	b.n	80036d4 <HAL_RCC_OscConfig+0x298>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800368e:	d115      	bne.n	80036bc <HAL_RCC_OscConfig+0x280>
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a05      	ldr	r2, [pc, #20]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 8003696:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	4b03      	ldr	r3, [pc, #12]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a02      	ldr	r2, [pc, #8]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80036a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a6:	6013      	str	r3, [r2, #0]
 80036a8:	e014      	b.n	80036d4 <HAL_RCC_OscConfig+0x298>
 80036aa:	bf00      	nop
 80036ac:	40021000 	.word	0x40021000
 80036b0:	0800ac98 	.word	0x0800ac98
 80036b4:	20000000 	.word	0x20000000
 80036b8:	20000004 	.word	0x20000004
 80036bc:	4ba0      	ldr	r3, [pc, #640]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a9f      	ldr	r2, [pc, #636]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80036c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	4b9d      	ldr	r3, [pc, #628]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a9c      	ldr	r2, [pc, #624]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80036ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d013      	beq.n	8003704 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036dc:	f7fe f910 	bl	8001900 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e4:	f7fe f90c 	bl	8001900 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b64      	cmp	r3, #100	; 0x64
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e276      	b.n	8003be4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036f6:	4b92      	ldr	r3, [pc, #584]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0x2a8>
 8003702:	e014      	b.n	800372e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003704:	f7fe f8fc 	bl	8001900 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800370c:	f7fe f8f8 	bl	8001900 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b64      	cmp	r3, #100	; 0x64
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e262      	b.n	8003be4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800371e:	4b88      	ldr	r3, [pc, #544]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0x2d0>
 800372a:	e000      	b.n	800372e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800372c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d060      	beq.n	80037fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	2b04      	cmp	r3, #4
 800373e:	d005      	beq.n	800374c <HAL_RCC_OscConfig+0x310>
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2b0c      	cmp	r3, #12
 8003744:	d119      	bne.n	800377a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2b02      	cmp	r3, #2
 800374a:	d116      	bne.n	800377a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800374c:	4b7c      	ldr	r3, [pc, #496]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_OscConfig+0x328>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e23f      	b.n	8003be4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003764:	4b76      	ldr	r3, [pc, #472]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	061b      	lsls	r3, r3, #24
 8003772:	4973      	ldr	r1, [pc, #460]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 8003774:	4313      	orrs	r3, r2
 8003776:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003778:	e040      	b.n	80037fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d023      	beq.n	80037ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003782:	4b6f      	ldr	r3, [pc, #444]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a6e      	ldr	r2, [pc, #440]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 8003788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378e:	f7fe f8b7 	bl	8001900 <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003796:	f7fe f8b3 	bl	8001900 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e21d      	b.n	8003be4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037a8:	4b65      	ldr	r3, [pc, #404]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0f0      	beq.n	8003796 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b4:	4b62      	ldr	r3, [pc, #392]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	061b      	lsls	r3, r3, #24
 80037c2:	495f      	ldr	r1, [pc, #380]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	604b      	str	r3, [r1, #4]
 80037c8:	e018      	b.n	80037fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ca:	4b5d      	ldr	r3, [pc, #372]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a5c      	ldr	r2, [pc, #368]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80037d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d6:	f7fe f893 	bl	8001900 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037de:	f7fe f88f 	bl	8001900 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e1f9      	b.n	8003be4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037f0:	4b53      	ldr	r3, [pc, #332]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f0      	bne.n	80037de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b00      	cmp	r3, #0
 8003806:	d03c      	beq.n	8003882 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d01c      	beq.n	800384a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003810:	4b4b      	ldr	r3, [pc, #300]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 8003812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003816:	4a4a      	ldr	r2, [pc, #296]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 8003818:	f043 0301 	orr.w	r3, r3, #1
 800381c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003820:	f7fe f86e 	bl	8001900 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003828:	f7fe f86a 	bl	8001900 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e1d4      	b.n	8003be4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800383a:	4b41      	ldr	r3, [pc, #260]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 800383c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0ef      	beq.n	8003828 <HAL_RCC_OscConfig+0x3ec>
 8003848:	e01b      	b.n	8003882 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800384a:	4b3d      	ldr	r3, [pc, #244]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 800384c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003850:	4a3b      	ldr	r2, [pc, #236]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 8003852:	f023 0301 	bic.w	r3, r3, #1
 8003856:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385a:	f7fe f851 	bl	8001900 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003862:	f7fe f84d 	bl	8001900 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e1b7      	b.n	8003be4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003874:	4b32      	ldr	r3, [pc, #200]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 8003876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1ef      	bne.n	8003862 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 80a6 	beq.w	80039dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003890:	2300      	movs	r3, #0
 8003892:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003894:	4b2a      	ldr	r3, [pc, #168]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 8003896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10d      	bne.n	80038bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a0:	4b27      	ldr	r3, [pc, #156]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80038a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a4:	4a26      	ldr	r2, [pc, #152]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80038a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038aa:	6593      	str	r3, [r2, #88]	; 0x58
 80038ac:	4b24      	ldr	r3, [pc, #144]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80038ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038b8:	2301      	movs	r3, #1
 80038ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038bc:	4b21      	ldr	r3, [pc, #132]	; (8003944 <HAL_RCC_OscConfig+0x508>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d118      	bne.n	80038fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038c8:	4b1e      	ldr	r3, [pc, #120]	; (8003944 <HAL_RCC_OscConfig+0x508>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a1d      	ldr	r2, [pc, #116]	; (8003944 <HAL_RCC_OscConfig+0x508>)
 80038ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038d4:	f7fe f814 	bl	8001900 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038dc:	f7fe f810 	bl	8001900 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e17a      	b.n	8003be4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ee:	4b15      	ldr	r3, [pc, #84]	; (8003944 <HAL_RCC_OscConfig+0x508>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0f0      	beq.n	80038dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d108      	bne.n	8003914 <HAL_RCC_OscConfig+0x4d8>
 8003902:	4b0f      	ldr	r3, [pc, #60]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 8003904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003908:	4a0d      	ldr	r2, [pc, #52]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003912:	e029      	b.n	8003968 <HAL_RCC_OscConfig+0x52c>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2b05      	cmp	r3, #5
 800391a:	d115      	bne.n	8003948 <HAL_RCC_OscConfig+0x50c>
 800391c:	4b08      	ldr	r3, [pc, #32]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 800391e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003922:	4a07      	ldr	r2, [pc, #28]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 8003924:	f043 0304 	orr.w	r3, r3, #4
 8003928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800392c:	4b04      	ldr	r3, [pc, #16]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 800392e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003932:	4a03      	ldr	r2, [pc, #12]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800393c:	e014      	b.n	8003968 <HAL_RCC_OscConfig+0x52c>
 800393e:	bf00      	nop
 8003940:	40021000 	.word	0x40021000
 8003944:	40007000 	.word	0x40007000
 8003948:	4b9c      	ldr	r3, [pc, #624]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394e:	4a9b      	ldr	r2, [pc, #620]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 8003950:	f023 0301 	bic.w	r3, r3, #1
 8003954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003958:	4b98      	ldr	r3, [pc, #608]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 800395a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395e:	4a97      	ldr	r2, [pc, #604]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 8003960:	f023 0304 	bic.w	r3, r3, #4
 8003964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d016      	beq.n	800399e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003970:	f7fd ffc6 	bl	8001900 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003976:	e00a      	b.n	800398e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003978:	f7fd ffc2 	bl	8001900 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	f241 3288 	movw	r2, #5000	; 0x1388
 8003986:	4293      	cmp	r3, r2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e12a      	b.n	8003be4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800398e:	4b8b      	ldr	r3, [pc, #556]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 8003990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0ed      	beq.n	8003978 <HAL_RCC_OscConfig+0x53c>
 800399c:	e015      	b.n	80039ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399e:	f7fd ffaf 	bl	8001900 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039a4:	e00a      	b.n	80039bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a6:	f7fd ffab 	bl	8001900 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e113      	b.n	8003be4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039bc:	4b7f      	ldr	r3, [pc, #508]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1ed      	bne.n	80039a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039ca:	7ffb      	ldrb	r3, [r7, #31]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d105      	bne.n	80039dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d0:	4b7a      	ldr	r3, [pc, #488]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 80039d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d4:	4a79      	ldr	r2, [pc, #484]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 80039d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039da:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 80fe 	beq.w	8003be2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	f040 80d0 	bne.w	8003b90 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80039f0:	4b72      	ldr	r3, [pc, #456]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f003 0203 	and.w	r2, r3, #3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d130      	bne.n	8003a66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d127      	bne.n	8003a66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a20:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d11f      	bne.n	8003a66 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a30:	2a07      	cmp	r2, #7
 8003a32:	bf14      	ite	ne
 8003a34:	2201      	movne	r2, #1
 8003a36:	2200      	moveq	r2, #0
 8003a38:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d113      	bne.n	8003a66 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a48:	085b      	lsrs	r3, r3, #1
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d109      	bne.n	8003a66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	085b      	lsrs	r3, r3, #1
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d06e      	beq.n	8003b44 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2b0c      	cmp	r3, #12
 8003a6a:	d069      	beq.n	8003b40 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a6c:	4b53      	ldr	r3, [pc, #332]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d105      	bne.n	8003a84 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a78:	4b50      	ldr	r3, [pc, #320]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0ad      	b.n	8003be4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a88:	4b4c      	ldr	r3, [pc, #304]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a4b      	ldr	r2, [pc, #300]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 8003a8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a92:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a94:	f7fd ff34 	bl	8001900 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a9c:	f7fd ff30 	bl	8001900 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e09a      	b.n	8003be4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aae:	4b43      	ldr	r3, [pc, #268]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aba:	4b40      	ldr	r3, [pc, #256]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	4b40      	ldr	r3, [pc, #256]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003aca:	3a01      	subs	r2, #1
 8003acc:	0112      	lsls	r2, r2, #4
 8003ace:	4311      	orrs	r1, r2
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ad4:	0212      	lsls	r2, r2, #8
 8003ad6:	4311      	orrs	r1, r2
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003adc:	0852      	lsrs	r2, r2, #1
 8003ade:	3a01      	subs	r2, #1
 8003ae0:	0552      	lsls	r2, r2, #21
 8003ae2:	4311      	orrs	r1, r2
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ae8:	0852      	lsrs	r2, r2, #1
 8003aea:	3a01      	subs	r2, #1
 8003aec:	0652      	lsls	r2, r2, #25
 8003aee:	4311      	orrs	r1, r2
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003af4:	0912      	lsrs	r2, r2, #4
 8003af6:	0452      	lsls	r2, r2, #17
 8003af8:	430a      	orrs	r2, r1
 8003afa:	4930      	ldr	r1, [pc, #192]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b00:	4b2e      	ldr	r3, [pc, #184]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a2d      	ldr	r2, [pc, #180]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 8003b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b0c:	4b2b      	ldr	r3, [pc, #172]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4a2a      	ldr	r2, [pc, #168]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 8003b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b18:	f7fd fef2 	bl	8001900 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b20:	f7fd feee 	bl	8001900 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e058      	b.n	8003be4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b32:	4b22      	ldr	r3, [pc, #136]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0f0      	beq.n	8003b20 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b3e:	e050      	b.n	8003be2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e04f      	b.n	8003be4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b44:	4b1d      	ldr	r3, [pc, #116]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d148      	bne.n	8003be2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b50:	4b1a      	ldr	r3, [pc, #104]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a19      	ldr	r2, [pc, #100]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 8003b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b5c:	4b17      	ldr	r3, [pc, #92]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	4a16      	ldr	r2, [pc, #88]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 8003b62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b68:	f7fd feca 	bl	8001900 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b70:	f7fd fec6 	bl	8001900 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e030      	b.n	8003be4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b82:	4b0e      	ldr	r3, [pc, #56]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0x734>
 8003b8e:	e028      	b.n	8003be2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	2b0c      	cmp	r3, #12
 8003b94:	d023      	beq.n	8003bde <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b96:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a08      	ldr	r2, [pc, #32]	; (8003bbc <HAL_RCC_OscConfig+0x780>)
 8003b9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba2:	f7fd fead 	bl	8001900 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ba8:	e00c      	b.n	8003bc4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003baa:	f7fd fea9 	bl	8001900 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d905      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e013      	b.n	8003be4 <HAL_RCC_OscConfig+0x7a8>
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bc4:	4b09      	ldr	r3, [pc, #36]	; (8003bec <HAL_RCC_OscConfig+0x7b0>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1ec      	bne.n	8003baa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003bd0:	4b06      	ldr	r3, [pc, #24]	; (8003bec <HAL_RCC_OscConfig+0x7b0>)
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	4905      	ldr	r1, [pc, #20]	; (8003bec <HAL_RCC_OscConfig+0x7b0>)
 8003bd6:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <HAL_RCC_OscConfig+0x7b4>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	60cb      	str	r3, [r1, #12]
 8003bdc:	e001      	b.n	8003be2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3720      	adds	r7, #32
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	feeefffc 	.word	0xfeeefffc

08003bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e0e7      	b.n	8003dd8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c08:	4b75      	ldr	r3, [pc, #468]	; (8003de0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d910      	bls.n	8003c38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c16:	4b72      	ldr	r3, [pc, #456]	; (8003de0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 0207 	bic.w	r2, r3, #7
 8003c1e:	4970      	ldr	r1, [pc, #448]	; (8003de0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c26:	4b6e      	ldr	r3, [pc, #440]	; (8003de0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d001      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e0cf      	b.n	8003dd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d010      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	4b66      	ldr	r3, [pc, #408]	; (8003de4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d908      	bls.n	8003c66 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c54:	4b63      	ldr	r3, [pc, #396]	; (8003de4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	4960      	ldr	r1, [pc, #384]	; (8003de4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d04c      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	d107      	bne.n	8003c8a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c7a:	4b5a      	ldr	r3, [pc, #360]	; (8003de4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d121      	bne.n	8003cca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e0a6      	b.n	8003dd8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d107      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c92:	4b54      	ldr	r3, [pc, #336]	; (8003de4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d115      	bne.n	8003cca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e09a      	b.n	8003dd8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d107      	bne.n	8003cba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003caa:	4b4e      	ldr	r3, [pc, #312]	; (8003de4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e08e      	b.n	8003dd8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cba:	4b4a      	ldr	r3, [pc, #296]	; (8003de4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e086      	b.n	8003dd8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cca:	4b46      	ldr	r3, [pc, #280]	; (8003de4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f023 0203 	bic.w	r2, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4943      	ldr	r1, [pc, #268]	; (8003de4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cdc:	f7fd fe10 	bl	8001900 <HAL_GetTick>
 8003ce0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce2:	e00a      	b.n	8003cfa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce4:	f7fd fe0c 	bl	8001900 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e06e      	b.n	8003dd8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfa:	4b3a      	ldr	r3, [pc, #232]	; (8003de4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 020c 	and.w	r2, r3, #12
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d1eb      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d010      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	4b31      	ldr	r3, [pc, #196]	; (8003de4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d208      	bcs.n	8003d3a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d28:	4b2e      	ldr	r3, [pc, #184]	; (8003de4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	492b      	ldr	r1, [pc, #172]	; (8003de4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d3a:	4b29      	ldr	r3, [pc, #164]	; (8003de0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d210      	bcs.n	8003d6a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d48:	4b25      	ldr	r3, [pc, #148]	; (8003de0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f023 0207 	bic.w	r2, r3, #7
 8003d50:	4923      	ldr	r1, [pc, #140]	; (8003de0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d58:	4b21      	ldr	r3, [pc, #132]	; (8003de0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d001      	beq.n	8003d6a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e036      	b.n	8003dd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d008      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d76:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	4918      	ldr	r1, [pc, #96]	; (8003de4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0308 	and.w	r3, r3, #8
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d009      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d94:	4b13      	ldr	r3, [pc, #76]	; (8003de4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	4910      	ldr	r1, [pc, #64]	; (8003de4 <HAL_RCC_ClockConfig+0x1f0>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003da8:	f000 f824 	bl	8003df4 <HAL_RCC_GetSysClockFreq>
 8003dac:	4602      	mov	r2, r0
 8003dae:	4b0d      	ldr	r3, [pc, #52]	; (8003de4 <HAL_RCC_ClockConfig+0x1f0>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	091b      	lsrs	r3, r3, #4
 8003db4:	f003 030f 	and.w	r3, r3, #15
 8003db8:	490b      	ldr	r1, [pc, #44]	; (8003de8 <HAL_RCC_ClockConfig+0x1f4>)
 8003dba:	5ccb      	ldrb	r3, [r1, r3]
 8003dbc:	f003 031f 	and.w	r3, r3, #31
 8003dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc4:	4a09      	ldr	r2, [pc, #36]	; (8003dec <HAL_RCC_ClockConfig+0x1f8>)
 8003dc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003dc8:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <HAL_RCC_ClockConfig+0x1fc>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fd fbe3 	bl	8001598 <HAL_InitTick>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003dd6:	7afb      	ldrb	r3, [r7, #11]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40022000 	.word	0x40022000
 8003de4:	40021000 	.word	0x40021000
 8003de8:	0800ac98 	.word	0x0800ac98
 8003dec:	20000000 	.word	0x20000000
 8003df0:	20000004 	.word	0x20000004

08003df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b089      	sub	sp, #36	; 0x24
 8003df8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61fb      	str	r3, [r7, #28]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e02:	4b3e      	ldr	r3, [pc, #248]	; (8003efc <HAL_RCC_GetSysClockFreq+0x108>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 030c 	and.w	r3, r3, #12
 8003e0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e0c:	4b3b      	ldr	r3, [pc, #236]	; (8003efc <HAL_RCC_GetSysClockFreq+0x108>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f003 0303 	and.w	r3, r3, #3
 8003e14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d005      	beq.n	8003e28 <HAL_RCC_GetSysClockFreq+0x34>
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	2b0c      	cmp	r3, #12
 8003e20:	d121      	bne.n	8003e66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d11e      	bne.n	8003e66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e28:	4b34      	ldr	r3, [pc, #208]	; (8003efc <HAL_RCC_GetSysClockFreq+0x108>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d107      	bne.n	8003e44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e34:	4b31      	ldr	r3, [pc, #196]	; (8003efc <HAL_RCC_GetSysClockFreq+0x108>)
 8003e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e3a:	0a1b      	lsrs	r3, r3, #8
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	61fb      	str	r3, [r7, #28]
 8003e42:	e005      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e44:	4b2d      	ldr	r3, [pc, #180]	; (8003efc <HAL_RCC_GetSysClockFreq+0x108>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	091b      	lsrs	r3, r3, #4
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e50:	4a2b      	ldr	r2, [pc, #172]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10d      	bne.n	8003e7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e64:	e00a      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d102      	bne.n	8003e72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e6c:	4b25      	ldr	r3, [pc, #148]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e6e:	61bb      	str	r3, [r7, #24]
 8003e70:	e004      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e78:	4b23      	ldr	r3, [pc, #140]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	2b0c      	cmp	r3, #12
 8003e80:	d134      	bne.n	8003eec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e82:	4b1e      	ldr	r3, [pc, #120]	; (8003efc <HAL_RCC_GetSysClockFreq+0x108>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d003      	beq.n	8003e9a <HAL_RCC_GetSysClockFreq+0xa6>
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	2b03      	cmp	r3, #3
 8003e96:	d003      	beq.n	8003ea0 <HAL_RCC_GetSysClockFreq+0xac>
 8003e98:	e005      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e9a:	4b1a      	ldr	r3, [pc, #104]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e9c:	617b      	str	r3, [r7, #20]
      break;
 8003e9e:	e005      	b.n	8003eac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ea0:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ea2:	617b      	str	r3, [r7, #20]
      break;
 8003ea4:	e002      	b.n	8003eac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	617b      	str	r3, [r7, #20]
      break;
 8003eaa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003eac:	4b13      	ldr	r3, [pc, #76]	; (8003efc <HAL_RCC_GetSysClockFreq+0x108>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003eba:	4b10      	ldr	r3, [pc, #64]	; (8003efc <HAL_RCC_GetSysClockFreq+0x108>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	0a1b      	lsrs	r3, r3, #8
 8003ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	fb03 f202 	mul.w	r2, r3, r2
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ed2:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <HAL_RCC_GetSysClockFreq+0x108>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	0e5b      	lsrs	r3, r3, #25
 8003ed8:	f003 0303 	and.w	r3, r3, #3
 8003edc:	3301      	adds	r3, #1
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003eec:	69bb      	ldr	r3, [r7, #24]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3724      	adds	r7, #36	; 0x24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40021000 	.word	0x40021000
 8003f00:	0800acb0 	.word	0x0800acb0
 8003f04:	00f42400 	.word	0x00f42400
 8003f08:	007a1200 	.word	0x007a1200

08003f0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f10:	4b03      	ldr	r3, [pc, #12]	; (8003f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f12:	681b      	ldr	r3, [r3, #0]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	20000000 	.word	0x20000000

08003f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f28:	f7ff fff0 	bl	8003f0c <HAL_RCC_GetHCLKFreq>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	0a1b      	lsrs	r3, r3, #8
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	4904      	ldr	r1, [pc, #16]	; (8003f4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f3a:	5ccb      	ldrb	r3, [r1, r3]
 8003f3c:	f003 031f 	and.w	r3, r3, #31
 8003f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	0800aca8 	.word	0x0800aca8

08003f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f54:	f7ff ffda 	bl	8003f0c <HAL_RCC_GetHCLKFreq>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	0adb      	lsrs	r3, r3, #11
 8003f60:	f003 0307 	and.w	r3, r3, #7
 8003f64:	4904      	ldr	r1, [pc, #16]	; (8003f78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f66:	5ccb      	ldrb	r3, [r1, r3]
 8003f68:	f003 031f 	and.w	r3, r3, #31
 8003f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40021000 	.word	0x40021000
 8003f78:	0800aca8 	.word	0x0800aca8

08003f7c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	220f      	movs	r2, #15
 8003f8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003f8c:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <HAL_RCC_GetClockConfig+0x5c>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 0203 	and.w	r2, r3, #3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003f98:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <HAL_RCC_GetClockConfig+0x5c>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003fa4:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <HAL_RCC_GetClockConfig+0x5c>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003fb0:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <HAL_RCC_GetClockConfig+0x5c>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	08db      	lsrs	r3, r3, #3
 8003fb6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003fbe:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <HAL_RCC_GetClockConfig+0x60>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0207 	and.w	r2, r3, #7
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	601a      	str	r2, [r3, #0]
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	40022000 	.word	0x40022000

08003fe0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fe8:	2300      	movs	r3, #0
 8003fea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fec:	4b2a      	ldr	r3, [pc, #168]	; (8004098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ff8:	f7ff f8f0 	bl	80031dc <HAL_PWREx_GetVoltageRange>
 8003ffc:	6178      	str	r0, [r7, #20]
 8003ffe:	e014      	b.n	800402a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004000:	4b25      	ldr	r3, [pc, #148]	; (8004098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004004:	4a24      	ldr	r2, [pc, #144]	; (8004098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800400a:	6593      	str	r3, [r2, #88]	; 0x58
 800400c:	4b22      	ldr	r3, [pc, #136]	; (8004098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800400e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004018:	f7ff f8e0 	bl	80031dc <HAL_PWREx_GetVoltageRange>
 800401c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800401e:	4b1e      	ldr	r3, [pc, #120]	; (8004098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004022:	4a1d      	ldr	r2, [pc, #116]	; (8004098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004028:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004030:	d10b      	bne.n	800404a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b80      	cmp	r3, #128	; 0x80
 8004036:	d919      	bls.n	800406c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2ba0      	cmp	r3, #160	; 0xa0
 800403c:	d902      	bls.n	8004044 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800403e:	2302      	movs	r3, #2
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	e013      	b.n	800406c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004044:	2301      	movs	r3, #1
 8004046:	613b      	str	r3, [r7, #16]
 8004048:	e010      	b.n	800406c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b80      	cmp	r3, #128	; 0x80
 800404e:	d902      	bls.n	8004056 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004050:	2303      	movs	r3, #3
 8004052:	613b      	str	r3, [r7, #16]
 8004054:	e00a      	b.n	800406c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b80      	cmp	r3, #128	; 0x80
 800405a:	d102      	bne.n	8004062 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800405c:	2302      	movs	r3, #2
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	e004      	b.n	800406c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b70      	cmp	r3, #112	; 0x70
 8004066:	d101      	bne.n	800406c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004068:	2301      	movs	r3, #1
 800406a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800406c:	4b0b      	ldr	r3, [pc, #44]	; (800409c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f023 0207 	bic.w	r2, r3, #7
 8004074:	4909      	ldr	r1, [pc, #36]	; (800409c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800407c:	4b07      	ldr	r3, [pc, #28]	; (800409c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	429a      	cmp	r2, r3
 8004088:	d001      	beq.n	800408e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e000      	b.n	8004090 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40021000 	.word	0x40021000
 800409c:	40022000 	.word	0x40022000

080040a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040a8:	2300      	movs	r3, #0
 80040aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040ac:	2300      	movs	r3, #0
 80040ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d041      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040c4:	d02a      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80040c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040ca:	d824      	bhi.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040d0:	d008      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80040d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040d6:	d81e      	bhi.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80040dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040e0:	d010      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040e2:	e018      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040e4:	4b86      	ldr	r3, [pc, #536]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	4a85      	ldr	r2, [pc, #532]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040f0:	e015      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3304      	adds	r3, #4
 80040f6:	2100      	movs	r1, #0
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 facb 	bl	8004694 <RCCEx_PLLSAI1_Config>
 80040fe:	4603      	mov	r3, r0
 8004100:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004102:	e00c      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3320      	adds	r3, #32
 8004108:	2100      	movs	r1, #0
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fbb6 	bl	800487c <RCCEx_PLLSAI2_Config>
 8004110:	4603      	mov	r3, r0
 8004112:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004114:	e003      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	74fb      	strb	r3, [r7, #19]
      break;
 800411a:	e000      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800411c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800411e:	7cfb      	ldrb	r3, [r7, #19]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10b      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004124:	4b76      	ldr	r3, [pc, #472]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004132:	4973      	ldr	r1, [pc, #460]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800413a:	e001      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413c:	7cfb      	ldrb	r3, [r7, #19]
 800413e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d041      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004150:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004154:	d02a      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004156:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800415a:	d824      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800415c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004160:	d008      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004162:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004166:	d81e      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800416c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004170:	d010      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004172:	e018      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004174:	4b62      	ldr	r3, [pc, #392]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4a61      	ldr	r2, [pc, #388]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800417a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800417e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004180:	e015      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3304      	adds	r3, #4
 8004186:	2100      	movs	r1, #0
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fa83 	bl	8004694 <RCCEx_PLLSAI1_Config>
 800418e:	4603      	mov	r3, r0
 8004190:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004192:	e00c      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3320      	adds	r3, #32
 8004198:	2100      	movs	r1, #0
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fb6e 	bl	800487c <RCCEx_PLLSAI2_Config>
 80041a0:	4603      	mov	r3, r0
 80041a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041a4:	e003      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	74fb      	strb	r3, [r7, #19]
      break;
 80041aa:	e000      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80041ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ae:	7cfb      	ldrb	r3, [r7, #19]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10b      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041b4:	4b52      	ldr	r3, [pc, #328]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041c2:	494f      	ldr	r1, [pc, #316]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041ca:	e001      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041cc:	7cfb      	ldrb	r3, [r7, #19]
 80041ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 80a0 	beq.w	800431e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041de:	2300      	movs	r3, #0
 80041e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041e2:	4b47      	ldr	r3, [pc, #284]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80041f2:	2300      	movs	r3, #0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00d      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f8:	4b41      	ldr	r3, [pc, #260]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fc:	4a40      	ldr	r2, [pc, #256]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004202:	6593      	str	r3, [r2, #88]	; 0x58
 8004204:	4b3e      	ldr	r3, [pc, #248]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420c:	60bb      	str	r3, [r7, #8]
 800420e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004210:	2301      	movs	r3, #1
 8004212:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004214:	4b3b      	ldr	r3, [pc, #236]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a3a      	ldr	r2, [pc, #232]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800421a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800421e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004220:	f7fd fb6e 	bl	8001900 <HAL_GetTick>
 8004224:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004226:	e009      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004228:	f7fd fb6a 	bl	8001900 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d902      	bls.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	74fb      	strb	r3, [r7, #19]
        break;
 800423a:	e005      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800423c:	4b31      	ldr	r3, [pc, #196]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0ef      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004248:	7cfb      	ldrb	r3, [r7, #19]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d15c      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800424e:	4b2c      	ldr	r3, [pc, #176]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004258:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d01f      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	429a      	cmp	r2, r3
 800426a:	d019      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800426c:	4b24      	ldr	r3, [pc, #144]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004276:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004278:	4b21      	ldr	r3, [pc, #132]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800427a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427e:	4a20      	ldr	r2, [pc, #128]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004288:	4b1d      	ldr	r3, [pc, #116]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800428a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428e:	4a1c      	ldr	r2, [pc, #112]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004298:	4a19      	ldr	r2, [pc, #100]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d016      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042aa:	f7fd fb29 	bl	8001900 <HAL_GetTick>
 80042ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042b0:	e00b      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b2:	f7fd fb25 	bl	8001900 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d902      	bls.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	74fb      	strb	r3, [r7, #19]
            break;
 80042c8:	e006      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ca:	4b0d      	ldr	r3, [pc, #52]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0ec      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80042d8:	7cfb      	ldrb	r3, [r7, #19]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10c      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042de:	4b08      	ldr	r3, [pc, #32]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ee:	4904      	ldr	r1, [pc, #16]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042f6:	e009      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042f8:	7cfb      	ldrb	r3, [r7, #19]
 80042fa:	74bb      	strb	r3, [r7, #18]
 80042fc:	e006      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80042fe:	bf00      	nop
 8004300:	40021000 	.word	0x40021000
 8004304:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004308:	7cfb      	ldrb	r3, [r7, #19]
 800430a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800430c:	7c7b      	ldrb	r3, [r7, #17]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d105      	bne.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004312:	4b9e      	ldr	r3, [pc, #632]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004316:	4a9d      	ldr	r2, [pc, #628]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800431c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800432a:	4b98      	ldr	r3, [pc, #608]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004330:	f023 0203 	bic.w	r2, r3, #3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004338:	4994      	ldr	r1, [pc, #592]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00a      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800434c:	4b8f      	ldr	r3, [pc, #572]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004352:	f023 020c 	bic.w	r2, r3, #12
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435a:	498c      	ldr	r1, [pc, #560]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800436e:	4b87      	ldr	r3, [pc, #540]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004374:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	4983      	ldr	r1, [pc, #524]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0308 	and.w	r3, r3, #8
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00a      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004390:	4b7e      	ldr	r3, [pc, #504]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004396:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439e:	497b      	ldr	r1, [pc, #492]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0310 	and.w	r3, r3, #16
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043b2:	4b76      	ldr	r3, [pc, #472]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c0:	4972      	ldr	r1, [pc, #456]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0320 	and.w	r3, r3, #32
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043d4:	4b6d      	ldr	r3, [pc, #436]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e2:	496a      	ldr	r1, [pc, #424]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043f6:	4b65      	ldr	r3, [pc, #404]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004404:	4961      	ldr	r1, [pc, #388]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004418:	4b5c      	ldr	r3, [pc, #368]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800441a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004426:	4959      	ldr	r1, [pc, #356]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800443a:	4b54      	ldr	r3, [pc, #336]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004440:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004448:	4950      	ldr	r1, [pc, #320]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800445c:	4b4b      	ldr	r3, [pc, #300]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004462:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446a:	4948      	ldr	r1, [pc, #288]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800447e:	4b43      	ldr	r3, [pc, #268]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004484:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448c:	493f      	ldr	r1, [pc, #252]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d028      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044a0:	4b3a      	ldr	r3, [pc, #232]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ae:	4937      	ldr	r1, [pc, #220]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044be:	d106      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044c0:	4b32      	ldr	r3, [pc, #200]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	4a31      	ldr	r2, [pc, #196]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044ca:	60d3      	str	r3, [r2, #12]
 80044cc:	e011      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044d6:	d10c      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3304      	adds	r3, #4
 80044dc:	2101      	movs	r1, #1
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 f8d8 	bl	8004694 <RCCEx_PLLSAI1_Config>
 80044e4:	4603      	mov	r3, r0
 80044e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044e8:	7cfb      	ldrb	r3, [r7, #19]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80044ee:	7cfb      	ldrb	r3, [r7, #19]
 80044f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d028      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044fe:	4b23      	ldr	r3, [pc, #140]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004504:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450c:	491f      	ldr	r1, [pc, #124]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004518:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800451c:	d106      	bne.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800451e:	4b1b      	ldr	r3, [pc, #108]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	4a1a      	ldr	r2, [pc, #104]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004528:	60d3      	str	r3, [r2, #12]
 800452a:	e011      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004530:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004534:	d10c      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3304      	adds	r3, #4
 800453a:	2101      	movs	r1, #1
 800453c:	4618      	mov	r0, r3
 800453e:	f000 f8a9 	bl	8004694 <RCCEx_PLLSAI1_Config>
 8004542:	4603      	mov	r3, r0
 8004544:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004546:	7cfb      	ldrb	r3, [r7, #19]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800454c:	7cfb      	ldrb	r3, [r7, #19]
 800454e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d02b      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800455c:	4b0b      	ldr	r3, [pc, #44]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004562:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800456a:	4908      	ldr	r1, [pc, #32]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800457a:	d109      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800457c:	4b03      	ldr	r3, [pc, #12]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4a02      	ldr	r2, [pc, #8]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004586:	60d3      	str	r3, [r2, #12]
 8004588:	e014      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800458a:	bf00      	nop
 800458c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004594:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004598:	d10c      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	3304      	adds	r3, #4
 800459e:	2101      	movs	r1, #1
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 f877 	bl	8004694 <RCCEx_PLLSAI1_Config>
 80045a6:	4603      	mov	r3, r0
 80045a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045aa:	7cfb      	ldrb	r3, [r7, #19]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80045b0:	7cfb      	ldrb	r3, [r7, #19]
 80045b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d02f      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045c0:	4b2b      	ldr	r3, [pc, #172]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ce:	4928      	ldr	r1, [pc, #160]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045de:	d10d      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3304      	adds	r3, #4
 80045e4:	2102      	movs	r1, #2
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 f854 	bl	8004694 <RCCEx_PLLSAI1_Config>
 80045ec:	4603      	mov	r3, r0
 80045ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045f0:	7cfb      	ldrb	r3, [r7, #19]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d014      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80045f6:	7cfb      	ldrb	r3, [r7, #19]
 80045f8:	74bb      	strb	r3, [r7, #18]
 80045fa:	e011      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004604:	d10c      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3320      	adds	r3, #32
 800460a:	2102      	movs	r1, #2
 800460c:	4618      	mov	r0, r3
 800460e:	f000 f935 	bl	800487c <RCCEx_PLLSAI2_Config>
 8004612:	4603      	mov	r3, r0
 8004614:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004616:	7cfb      	ldrb	r3, [r7, #19]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800461c:	7cfb      	ldrb	r3, [r7, #19]
 800461e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800462c:	4b10      	ldr	r3, [pc, #64]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800462e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004632:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800463a:	490d      	ldr	r1, [pc, #52]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00b      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800464e:	4b08      	ldr	r3, [pc, #32]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004654:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800465e:	4904      	ldr	r1, [pc, #16]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004666:	7cbb      	ldrb	r3, [r7, #18]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40021000 	.word	0x40021000

08004674 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004678:	4b05      	ldr	r3, [pc, #20]	; (8004690 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a04      	ldr	r2, [pc, #16]	; (8004690 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800467e:	f043 0304 	orr.w	r3, r3, #4
 8004682:	6013      	str	r3, [r2, #0]
}
 8004684:	bf00      	nop
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	40021000 	.word	0x40021000

08004694 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046a2:	4b75      	ldr	r3, [pc, #468]	; (8004878 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d018      	beq.n	80046e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046ae:	4b72      	ldr	r3, [pc, #456]	; (8004878 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f003 0203 	and.w	r2, r3, #3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d10d      	bne.n	80046da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
       ||
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d009      	beq.n	80046da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80046c6:	4b6c      	ldr	r3, [pc, #432]	; (8004878 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	091b      	lsrs	r3, r3, #4
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
       ||
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d047      	beq.n	800476a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	73fb      	strb	r3, [r7, #15]
 80046de:	e044      	b.n	800476a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d018      	beq.n	800471a <RCCEx_PLLSAI1_Config+0x86>
 80046e8:	2b03      	cmp	r3, #3
 80046ea:	d825      	bhi.n	8004738 <RCCEx_PLLSAI1_Config+0xa4>
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d002      	beq.n	80046f6 <RCCEx_PLLSAI1_Config+0x62>
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d009      	beq.n	8004708 <RCCEx_PLLSAI1_Config+0x74>
 80046f4:	e020      	b.n	8004738 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046f6:	4b60      	ldr	r3, [pc, #384]	; (8004878 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d11d      	bne.n	800473e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004706:	e01a      	b.n	800473e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004708:	4b5b      	ldr	r3, [pc, #364]	; (8004878 <RCCEx_PLLSAI1_Config+0x1e4>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004710:	2b00      	cmp	r3, #0
 8004712:	d116      	bne.n	8004742 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004718:	e013      	b.n	8004742 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800471a:	4b57      	ldr	r3, [pc, #348]	; (8004878 <RCCEx_PLLSAI1_Config+0x1e4>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10f      	bne.n	8004746 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004726:	4b54      	ldr	r3, [pc, #336]	; (8004878 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d109      	bne.n	8004746 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004736:	e006      	b.n	8004746 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	73fb      	strb	r3, [r7, #15]
      break;
 800473c:	e004      	b.n	8004748 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800473e:	bf00      	nop
 8004740:	e002      	b.n	8004748 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004742:	bf00      	nop
 8004744:	e000      	b.n	8004748 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004746:	bf00      	nop
    }

    if(status == HAL_OK)
 8004748:	7bfb      	ldrb	r3, [r7, #15]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10d      	bne.n	800476a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800474e:	4b4a      	ldr	r3, [pc, #296]	; (8004878 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6819      	ldr	r1, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	3b01      	subs	r3, #1
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	430b      	orrs	r3, r1
 8004764:	4944      	ldr	r1, [pc, #272]	; (8004878 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004766:	4313      	orrs	r3, r2
 8004768:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800476a:	7bfb      	ldrb	r3, [r7, #15]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d17d      	bne.n	800486c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004770:	4b41      	ldr	r3, [pc, #260]	; (8004878 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a40      	ldr	r2, [pc, #256]	; (8004878 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004776:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800477a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800477c:	f7fd f8c0 	bl	8001900 <HAL_GetTick>
 8004780:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004782:	e009      	b.n	8004798 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004784:	f7fd f8bc 	bl	8001900 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d902      	bls.n	8004798 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	73fb      	strb	r3, [r7, #15]
        break;
 8004796:	e005      	b.n	80047a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004798:	4b37      	ldr	r3, [pc, #220]	; (8004878 <RCCEx_PLLSAI1_Config+0x1e4>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1ef      	bne.n	8004784 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d160      	bne.n	800486c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d111      	bne.n	80047d4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047b0:	4b31      	ldr	r3, [pc, #196]	; (8004878 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80047b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6892      	ldr	r2, [r2, #8]
 80047c0:	0211      	lsls	r1, r2, #8
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	68d2      	ldr	r2, [r2, #12]
 80047c6:	0912      	lsrs	r2, r2, #4
 80047c8:	0452      	lsls	r2, r2, #17
 80047ca:	430a      	orrs	r2, r1
 80047cc:	492a      	ldr	r1, [pc, #168]	; (8004878 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	610b      	str	r3, [r1, #16]
 80047d2:	e027      	b.n	8004824 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d112      	bne.n	8004800 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047da:	4b27      	ldr	r3, [pc, #156]	; (8004878 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80047e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6892      	ldr	r2, [r2, #8]
 80047ea:	0211      	lsls	r1, r2, #8
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6912      	ldr	r2, [r2, #16]
 80047f0:	0852      	lsrs	r2, r2, #1
 80047f2:	3a01      	subs	r2, #1
 80047f4:	0552      	lsls	r2, r2, #21
 80047f6:	430a      	orrs	r2, r1
 80047f8:	491f      	ldr	r1, [pc, #124]	; (8004878 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	610b      	str	r3, [r1, #16]
 80047fe:	e011      	b.n	8004824 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004800:	4b1d      	ldr	r3, [pc, #116]	; (8004878 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004808:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6892      	ldr	r2, [r2, #8]
 8004810:	0211      	lsls	r1, r2, #8
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6952      	ldr	r2, [r2, #20]
 8004816:	0852      	lsrs	r2, r2, #1
 8004818:	3a01      	subs	r2, #1
 800481a:	0652      	lsls	r2, r2, #25
 800481c:	430a      	orrs	r2, r1
 800481e:	4916      	ldr	r1, [pc, #88]	; (8004878 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004820:	4313      	orrs	r3, r2
 8004822:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004824:	4b14      	ldr	r3, [pc, #80]	; (8004878 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a13      	ldr	r2, [pc, #76]	; (8004878 <RCCEx_PLLSAI1_Config+0x1e4>)
 800482a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800482e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004830:	f7fd f866 	bl	8001900 <HAL_GetTick>
 8004834:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004836:	e009      	b.n	800484c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004838:	f7fd f862 	bl	8001900 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d902      	bls.n	800484c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	73fb      	strb	r3, [r7, #15]
          break;
 800484a:	e005      	b.n	8004858 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800484c:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <RCCEx_PLLSAI1_Config+0x1e4>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0ef      	beq.n	8004838 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800485e:	4b06      	ldr	r3, [pc, #24]	; (8004878 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	4904      	ldr	r1, [pc, #16]	; (8004878 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004868:	4313      	orrs	r3, r2
 800486a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800486c:	7bfb      	ldrb	r3, [r7, #15]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40021000 	.word	0x40021000

0800487c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800488a:	4b6a      	ldr	r3, [pc, #424]	; (8004a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d018      	beq.n	80048c8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004896:	4b67      	ldr	r3, [pc, #412]	; (8004a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f003 0203 	and.w	r2, r3, #3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d10d      	bne.n	80048c2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
       ||
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d009      	beq.n	80048c2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80048ae:	4b61      	ldr	r3, [pc, #388]	; (8004a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	091b      	lsrs	r3, r3, #4
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
       ||
 80048be:	429a      	cmp	r2, r3
 80048c0:	d047      	beq.n	8004952 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	73fb      	strb	r3, [r7, #15]
 80048c6:	e044      	b.n	8004952 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b03      	cmp	r3, #3
 80048ce:	d018      	beq.n	8004902 <RCCEx_PLLSAI2_Config+0x86>
 80048d0:	2b03      	cmp	r3, #3
 80048d2:	d825      	bhi.n	8004920 <RCCEx_PLLSAI2_Config+0xa4>
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d002      	beq.n	80048de <RCCEx_PLLSAI2_Config+0x62>
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d009      	beq.n	80048f0 <RCCEx_PLLSAI2_Config+0x74>
 80048dc:	e020      	b.n	8004920 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048de:	4b55      	ldr	r3, [pc, #340]	; (8004a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d11d      	bne.n	8004926 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048ee:	e01a      	b.n	8004926 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048f0:	4b50      	ldr	r3, [pc, #320]	; (8004a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d116      	bne.n	800492a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004900:	e013      	b.n	800492a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004902:	4b4c      	ldr	r3, [pc, #304]	; (8004a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10f      	bne.n	800492e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800490e:	4b49      	ldr	r3, [pc, #292]	; (8004a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d109      	bne.n	800492e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800491e:	e006      	b.n	800492e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	73fb      	strb	r3, [r7, #15]
      break;
 8004924:	e004      	b.n	8004930 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004926:	bf00      	nop
 8004928:	e002      	b.n	8004930 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800492a:	bf00      	nop
 800492c:	e000      	b.n	8004930 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800492e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10d      	bne.n	8004952 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004936:	4b3f      	ldr	r3, [pc, #252]	; (8004a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6819      	ldr	r1, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	3b01      	subs	r3, #1
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	430b      	orrs	r3, r1
 800494c:	4939      	ldr	r1, [pc, #228]	; (8004a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 800494e:	4313      	orrs	r3, r2
 8004950:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004952:	7bfb      	ldrb	r3, [r7, #15]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d167      	bne.n	8004a28 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004958:	4b36      	ldr	r3, [pc, #216]	; (8004a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a35      	ldr	r2, [pc, #212]	; (8004a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 800495e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004962:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004964:	f7fc ffcc 	bl	8001900 <HAL_GetTick>
 8004968:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800496a:	e009      	b.n	8004980 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800496c:	f7fc ffc8 	bl	8001900 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d902      	bls.n	8004980 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	73fb      	strb	r3, [r7, #15]
        break;
 800497e:	e005      	b.n	800498c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004980:	4b2c      	ldr	r3, [pc, #176]	; (8004a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1ef      	bne.n	800496c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d14a      	bne.n	8004a28 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d111      	bne.n	80049bc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004998:	4b26      	ldr	r3, [pc, #152]	; (8004a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80049a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6892      	ldr	r2, [r2, #8]
 80049a8:	0211      	lsls	r1, r2, #8
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	68d2      	ldr	r2, [r2, #12]
 80049ae:	0912      	lsrs	r2, r2, #4
 80049b0:	0452      	lsls	r2, r2, #17
 80049b2:	430a      	orrs	r2, r1
 80049b4:	491f      	ldr	r1, [pc, #124]	; (8004a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	614b      	str	r3, [r1, #20]
 80049ba:	e011      	b.n	80049e0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049bc:	4b1d      	ldr	r3, [pc, #116]	; (8004a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80049c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6892      	ldr	r2, [r2, #8]
 80049cc:	0211      	lsls	r1, r2, #8
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6912      	ldr	r2, [r2, #16]
 80049d2:	0852      	lsrs	r2, r2, #1
 80049d4:	3a01      	subs	r2, #1
 80049d6:	0652      	lsls	r2, r2, #25
 80049d8:	430a      	orrs	r2, r1
 80049da:	4916      	ldr	r1, [pc, #88]	; (8004a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80049e0:	4b14      	ldr	r3, [pc, #80]	; (8004a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a13      	ldr	r2, [pc, #76]	; (8004a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ec:	f7fc ff88 	bl	8001900 <HAL_GetTick>
 80049f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049f2:	e009      	b.n	8004a08 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049f4:	f7fc ff84 	bl	8001900 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d902      	bls.n	8004a08 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	73fb      	strb	r3, [r7, #15]
          break;
 8004a06:	e005      	b.n	8004a14 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a08:	4b0a      	ldr	r3, [pc, #40]	; (8004a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0ef      	beq.n	80049f4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a1a:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a1c:	695a      	ldr	r2, [r3, #20]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	4904      	ldr	r1, [pc, #16]	; (8004a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	40021000 	.word	0x40021000

08004a38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e095      	b.n	8004b76 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d108      	bne.n	8004a64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a5a:	d009      	beq.n	8004a70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	61da      	str	r2, [r3, #28]
 8004a62:	e005      	b.n	8004a70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7fc fc00 	bl	8001290 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aa6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ab0:	d902      	bls.n	8004ab8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	e002      	b.n	8004abe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004abc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004ac6:	d007      	beq.n	8004ad8 <HAL_SPI_Init+0xa0>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ad0:	d002      	beq.n	8004ad8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1a:	ea42 0103 	orr.w	r1, r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b22:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	0c1b      	lsrs	r3, r3, #16
 8004b34:	f003 0204 	and.w	r2, r3, #4
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	431a      	orrs	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b46:	f003 0308 	and.w	r3, r3, #8
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b54:	ea42 0103 	orr.w	r1, r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b082      	sub	sp, #8
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e049      	b.n	8004c24 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d106      	bne.n	8004baa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f841 	bl	8004c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2202      	movs	r2, #2
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	3304      	adds	r3, #4
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	f000 f9f7 	bl	8004fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d001      	beq.n	8004c58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e04f      	b.n	8004cf8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0201 	orr.w	r2, r2, #1
 8004c6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a23      	ldr	r2, [pc, #140]	; (8004d04 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d01d      	beq.n	8004cb6 <HAL_TIM_Base_Start_IT+0x76>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c82:	d018      	beq.n	8004cb6 <HAL_TIM_Base_Start_IT+0x76>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a1f      	ldr	r2, [pc, #124]	; (8004d08 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d013      	beq.n	8004cb6 <HAL_TIM_Base_Start_IT+0x76>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a1e      	ldr	r2, [pc, #120]	; (8004d0c <HAL_TIM_Base_Start_IT+0xcc>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d00e      	beq.n	8004cb6 <HAL_TIM_Base_Start_IT+0x76>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a1c      	ldr	r2, [pc, #112]	; (8004d10 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d009      	beq.n	8004cb6 <HAL_TIM_Base_Start_IT+0x76>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a1b      	ldr	r2, [pc, #108]	; (8004d14 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d004      	beq.n	8004cb6 <HAL_TIM_Base_Start_IT+0x76>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a19      	ldr	r2, [pc, #100]	; (8004d18 <HAL_TIM_Base_Start_IT+0xd8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d115      	bne.n	8004ce2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	4b17      	ldr	r3, [pc, #92]	; (8004d1c <HAL_TIM_Base_Start_IT+0xdc>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2b06      	cmp	r3, #6
 8004cc6:	d015      	beq.n	8004cf4 <HAL_TIM_Base_Start_IT+0xb4>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cce:	d011      	beq.n	8004cf4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0201 	orr.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce0:	e008      	b.n	8004cf4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f042 0201 	orr.w	r2, r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	e000      	b.n	8004cf6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	40012c00 	.word	0x40012c00
 8004d08:	40000400 	.word	0x40000400
 8004d0c:	40000800 	.word	0x40000800
 8004d10:	40000c00 	.word	0x40000c00
 8004d14:	40013400 	.word	0x40013400
 8004d18:	40014000 	.word	0x40014000
 8004d1c:	00010007 	.word	0x00010007

08004d20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d122      	bne.n	8004d7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d11b      	bne.n	8004d7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0202 	mvn.w	r2, #2
 8004d4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f905 	bl	8004f72 <HAL_TIM_IC_CaptureCallback>
 8004d68:	e005      	b.n	8004d76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f8f7 	bl	8004f5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f908 	bl	8004f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	f003 0304 	and.w	r3, r3, #4
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d122      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d11b      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f06f 0204 	mvn.w	r2, #4
 8004da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2202      	movs	r2, #2
 8004da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f8db 	bl	8004f72 <HAL_TIM_IC_CaptureCallback>
 8004dbc:	e005      	b.n	8004dca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f8cd 	bl	8004f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f8de 	bl	8004f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d122      	bne.n	8004e24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b08      	cmp	r3, #8
 8004dea:	d11b      	bne.n	8004e24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f06f 0208 	mvn.w	r2, #8
 8004df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2204      	movs	r2, #4
 8004dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f8b1 	bl	8004f72 <HAL_TIM_IC_CaptureCallback>
 8004e10:	e005      	b.n	8004e1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f8a3 	bl	8004f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f8b4 	bl	8004f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f003 0310 	and.w	r3, r3, #16
 8004e2e:	2b10      	cmp	r3, #16
 8004e30:	d122      	bne.n	8004e78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f003 0310 	and.w	r3, r3, #16
 8004e3c:	2b10      	cmp	r3, #16
 8004e3e:	d11b      	bne.n	8004e78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f06f 0210 	mvn.w	r2, #16
 8004e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2208      	movs	r2, #8
 8004e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f887 	bl	8004f72 <HAL_TIM_IC_CaptureCallback>
 8004e64:	e005      	b.n	8004e72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f879 	bl	8004f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f88a 	bl	8004f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d10e      	bne.n	8004ea4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d107      	bne.n	8004ea4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f06f 0201 	mvn.w	r2, #1
 8004e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fc f88c 	bl	8000fbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eae:	2b80      	cmp	r3, #128	; 0x80
 8004eb0:	d10e      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ebc:	2b80      	cmp	r3, #128	; 0x80
 8004ebe:	d107      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f914 	bl	80050f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ede:	d10e      	bne.n	8004efe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eea:	2b80      	cmp	r3, #128	; 0x80
 8004eec:	d107      	bne.n	8004efe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f907 	bl	800510c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f08:	2b40      	cmp	r3, #64	; 0x40
 8004f0a:	d10e      	bne.n	8004f2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f16:	2b40      	cmp	r3, #64	; 0x40
 8004f18:	d107      	bne.n	8004f2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f838 	bl	8004f9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	f003 0320 	and.w	r3, r3, #32
 8004f34:	2b20      	cmp	r3, #32
 8004f36:	d10e      	bne.n	8004f56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f003 0320 	and.w	r3, r3, #32
 8004f42:	2b20      	cmp	r3, #32
 8004f44:	d107      	bne.n	8004f56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f06f 0220 	mvn.w	r2, #32
 8004f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f8c7 	bl	80050e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f56:	bf00      	nop
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fa2:	bf00      	nop
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
	...

08004fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a40      	ldr	r2, [pc, #256]	; (80050c4 <TIM_Base_SetConfig+0x114>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d013      	beq.n	8004ff0 <TIM_Base_SetConfig+0x40>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fce:	d00f      	beq.n	8004ff0 <TIM_Base_SetConfig+0x40>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a3d      	ldr	r2, [pc, #244]	; (80050c8 <TIM_Base_SetConfig+0x118>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00b      	beq.n	8004ff0 <TIM_Base_SetConfig+0x40>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a3c      	ldr	r2, [pc, #240]	; (80050cc <TIM_Base_SetConfig+0x11c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d007      	beq.n	8004ff0 <TIM_Base_SetConfig+0x40>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a3b      	ldr	r2, [pc, #236]	; (80050d0 <TIM_Base_SetConfig+0x120>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d003      	beq.n	8004ff0 <TIM_Base_SetConfig+0x40>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a3a      	ldr	r2, [pc, #232]	; (80050d4 <TIM_Base_SetConfig+0x124>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d108      	bne.n	8005002 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a2f      	ldr	r2, [pc, #188]	; (80050c4 <TIM_Base_SetConfig+0x114>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d01f      	beq.n	800504a <TIM_Base_SetConfig+0x9a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005010:	d01b      	beq.n	800504a <TIM_Base_SetConfig+0x9a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a2c      	ldr	r2, [pc, #176]	; (80050c8 <TIM_Base_SetConfig+0x118>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d017      	beq.n	800504a <TIM_Base_SetConfig+0x9a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a2b      	ldr	r2, [pc, #172]	; (80050cc <TIM_Base_SetConfig+0x11c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d013      	beq.n	800504a <TIM_Base_SetConfig+0x9a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a2a      	ldr	r2, [pc, #168]	; (80050d0 <TIM_Base_SetConfig+0x120>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d00f      	beq.n	800504a <TIM_Base_SetConfig+0x9a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a29      	ldr	r2, [pc, #164]	; (80050d4 <TIM_Base_SetConfig+0x124>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d00b      	beq.n	800504a <TIM_Base_SetConfig+0x9a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a28      	ldr	r2, [pc, #160]	; (80050d8 <TIM_Base_SetConfig+0x128>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d007      	beq.n	800504a <TIM_Base_SetConfig+0x9a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a27      	ldr	r2, [pc, #156]	; (80050dc <TIM_Base_SetConfig+0x12c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d003      	beq.n	800504a <TIM_Base_SetConfig+0x9a>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a26      	ldr	r2, [pc, #152]	; (80050e0 <TIM_Base_SetConfig+0x130>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d108      	bne.n	800505c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4313      	orrs	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a10      	ldr	r2, [pc, #64]	; (80050c4 <TIM_Base_SetConfig+0x114>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d00f      	beq.n	80050a8 <TIM_Base_SetConfig+0xf8>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a12      	ldr	r2, [pc, #72]	; (80050d4 <TIM_Base_SetConfig+0x124>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d00b      	beq.n	80050a8 <TIM_Base_SetConfig+0xf8>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a11      	ldr	r2, [pc, #68]	; (80050d8 <TIM_Base_SetConfig+0x128>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d007      	beq.n	80050a8 <TIM_Base_SetConfig+0xf8>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a10      	ldr	r2, [pc, #64]	; (80050dc <TIM_Base_SetConfig+0x12c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d003      	beq.n	80050a8 <TIM_Base_SetConfig+0xf8>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a0f      	ldr	r2, [pc, #60]	; (80050e0 <TIM_Base_SetConfig+0x130>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d103      	bne.n	80050b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	691a      	ldr	r2, [r3, #16]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	615a      	str	r2, [r3, #20]
}
 80050b6:	bf00      	nop
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	40012c00 	.word	0x40012c00
 80050c8:	40000400 	.word	0x40000400
 80050cc:	40000800 	.word	0x40000800
 80050d0:	40000c00 	.word	0x40000c00
 80050d4:	40013400 	.word	0x40013400
 80050d8:	40014000 	.word	0x40014000
 80050dc:	40014400 	.word	0x40014400
 80050e0:	40014800 	.word	0x40014800

080050e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e040      	b.n	80051b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fc f8e8 	bl	8001318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2224      	movs	r2, #36	; 0x24
 800514c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0201 	bic.w	r2, r2, #1
 800515c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f82c 	bl	80051bc <UART_SetConfig>
 8005164:	4603      	mov	r3, r0
 8005166:	2b01      	cmp	r3, #1
 8005168:	d101      	bne.n	800516e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e022      	b.n	80051b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fad8 	bl	800572c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800518a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800519a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0201 	orr.w	r2, r2, #1
 80051aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 fb5f 	bl	8005870 <UART_CheckIdleState>
 80051b2:	4603      	mov	r3, r0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051c0:	b08a      	sub	sp, #40	; 0x28
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	431a      	orrs	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	431a      	orrs	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	4ba4      	ldr	r3, [pc, #656]	; (800547c <UART_SetConfig+0x2c0>)
 80051ec:	4013      	ands	r3, r2
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	6812      	ldr	r2, [r2, #0]
 80051f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051f4:	430b      	orrs	r3, r1
 80051f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a99      	ldr	r2, [pc, #612]	; (8005480 <UART_SetConfig+0x2c4>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d004      	beq.n	8005228 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005224:	4313      	orrs	r3, r2
 8005226:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005238:	430a      	orrs	r2, r1
 800523a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a90      	ldr	r2, [pc, #576]	; (8005484 <UART_SetConfig+0x2c8>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d126      	bne.n	8005294 <UART_SetConfig+0xd8>
 8005246:	4b90      	ldr	r3, [pc, #576]	; (8005488 <UART_SetConfig+0x2cc>)
 8005248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524c:	f003 0303 	and.w	r3, r3, #3
 8005250:	2b03      	cmp	r3, #3
 8005252:	d81b      	bhi.n	800528c <UART_SetConfig+0xd0>
 8005254:	a201      	add	r2, pc, #4	; (adr r2, 800525c <UART_SetConfig+0xa0>)
 8005256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525a:	bf00      	nop
 800525c:	0800526d 	.word	0x0800526d
 8005260:	0800527d 	.word	0x0800527d
 8005264:	08005275 	.word	0x08005275
 8005268:	08005285 	.word	0x08005285
 800526c:	2301      	movs	r3, #1
 800526e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005272:	e116      	b.n	80054a2 <UART_SetConfig+0x2e6>
 8005274:	2302      	movs	r3, #2
 8005276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800527a:	e112      	b.n	80054a2 <UART_SetConfig+0x2e6>
 800527c:	2304      	movs	r3, #4
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005282:	e10e      	b.n	80054a2 <UART_SetConfig+0x2e6>
 8005284:	2308      	movs	r3, #8
 8005286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800528a:	e10a      	b.n	80054a2 <UART_SetConfig+0x2e6>
 800528c:	2310      	movs	r3, #16
 800528e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005292:	e106      	b.n	80054a2 <UART_SetConfig+0x2e6>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a7c      	ldr	r2, [pc, #496]	; (800548c <UART_SetConfig+0x2d0>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d138      	bne.n	8005310 <UART_SetConfig+0x154>
 800529e:	4b7a      	ldr	r3, [pc, #488]	; (8005488 <UART_SetConfig+0x2cc>)
 80052a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a4:	f003 030c 	and.w	r3, r3, #12
 80052a8:	2b0c      	cmp	r3, #12
 80052aa:	d82d      	bhi.n	8005308 <UART_SetConfig+0x14c>
 80052ac:	a201      	add	r2, pc, #4	; (adr r2, 80052b4 <UART_SetConfig+0xf8>)
 80052ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b2:	bf00      	nop
 80052b4:	080052e9 	.word	0x080052e9
 80052b8:	08005309 	.word	0x08005309
 80052bc:	08005309 	.word	0x08005309
 80052c0:	08005309 	.word	0x08005309
 80052c4:	080052f9 	.word	0x080052f9
 80052c8:	08005309 	.word	0x08005309
 80052cc:	08005309 	.word	0x08005309
 80052d0:	08005309 	.word	0x08005309
 80052d4:	080052f1 	.word	0x080052f1
 80052d8:	08005309 	.word	0x08005309
 80052dc:	08005309 	.word	0x08005309
 80052e0:	08005309 	.word	0x08005309
 80052e4:	08005301 	.word	0x08005301
 80052e8:	2300      	movs	r3, #0
 80052ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ee:	e0d8      	b.n	80054a2 <UART_SetConfig+0x2e6>
 80052f0:	2302      	movs	r3, #2
 80052f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052f6:	e0d4      	b.n	80054a2 <UART_SetConfig+0x2e6>
 80052f8:	2304      	movs	r3, #4
 80052fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052fe:	e0d0      	b.n	80054a2 <UART_SetConfig+0x2e6>
 8005300:	2308      	movs	r3, #8
 8005302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005306:	e0cc      	b.n	80054a2 <UART_SetConfig+0x2e6>
 8005308:	2310      	movs	r3, #16
 800530a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800530e:	e0c8      	b.n	80054a2 <UART_SetConfig+0x2e6>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a5e      	ldr	r2, [pc, #376]	; (8005490 <UART_SetConfig+0x2d4>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d125      	bne.n	8005366 <UART_SetConfig+0x1aa>
 800531a:	4b5b      	ldr	r3, [pc, #364]	; (8005488 <UART_SetConfig+0x2cc>)
 800531c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005320:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005324:	2b30      	cmp	r3, #48	; 0x30
 8005326:	d016      	beq.n	8005356 <UART_SetConfig+0x19a>
 8005328:	2b30      	cmp	r3, #48	; 0x30
 800532a:	d818      	bhi.n	800535e <UART_SetConfig+0x1a2>
 800532c:	2b20      	cmp	r3, #32
 800532e:	d00a      	beq.n	8005346 <UART_SetConfig+0x18a>
 8005330:	2b20      	cmp	r3, #32
 8005332:	d814      	bhi.n	800535e <UART_SetConfig+0x1a2>
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <UART_SetConfig+0x182>
 8005338:	2b10      	cmp	r3, #16
 800533a:	d008      	beq.n	800534e <UART_SetConfig+0x192>
 800533c:	e00f      	b.n	800535e <UART_SetConfig+0x1a2>
 800533e:	2300      	movs	r3, #0
 8005340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005344:	e0ad      	b.n	80054a2 <UART_SetConfig+0x2e6>
 8005346:	2302      	movs	r3, #2
 8005348:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800534c:	e0a9      	b.n	80054a2 <UART_SetConfig+0x2e6>
 800534e:	2304      	movs	r3, #4
 8005350:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005354:	e0a5      	b.n	80054a2 <UART_SetConfig+0x2e6>
 8005356:	2308      	movs	r3, #8
 8005358:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800535c:	e0a1      	b.n	80054a2 <UART_SetConfig+0x2e6>
 800535e:	2310      	movs	r3, #16
 8005360:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005364:	e09d      	b.n	80054a2 <UART_SetConfig+0x2e6>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a4a      	ldr	r2, [pc, #296]	; (8005494 <UART_SetConfig+0x2d8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d125      	bne.n	80053bc <UART_SetConfig+0x200>
 8005370:	4b45      	ldr	r3, [pc, #276]	; (8005488 <UART_SetConfig+0x2cc>)
 8005372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005376:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800537a:	2bc0      	cmp	r3, #192	; 0xc0
 800537c:	d016      	beq.n	80053ac <UART_SetConfig+0x1f0>
 800537e:	2bc0      	cmp	r3, #192	; 0xc0
 8005380:	d818      	bhi.n	80053b4 <UART_SetConfig+0x1f8>
 8005382:	2b80      	cmp	r3, #128	; 0x80
 8005384:	d00a      	beq.n	800539c <UART_SetConfig+0x1e0>
 8005386:	2b80      	cmp	r3, #128	; 0x80
 8005388:	d814      	bhi.n	80053b4 <UART_SetConfig+0x1f8>
 800538a:	2b00      	cmp	r3, #0
 800538c:	d002      	beq.n	8005394 <UART_SetConfig+0x1d8>
 800538e:	2b40      	cmp	r3, #64	; 0x40
 8005390:	d008      	beq.n	80053a4 <UART_SetConfig+0x1e8>
 8005392:	e00f      	b.n	80053b4 <UART_SetConfig+0x1f8>
 8005394:	2300      	movs	r3, #0
 8005396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800539a:	e082      	b.n	80054a2 <UART_SetConfig+0x2e6>
 800539c:	2302      	movs	r3, #2
 800539e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053a2:	e07e      	b.n	80054a2 <UART_SetConfig+0x2e6>
 80053a4:	2304      	movs	r3, #4
 80053a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053aa:	e07a      	b.n	80054a2 <UART_SetConfig+0x2e6>
 80053ac:	2308      	movs	r3, #8
 80053ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053b2:	e076      	b.n	80054a2 <UART_SetConfig+0x2e6>
 80053b4:	2310      	movs	r3, #16
 80053b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ba:	e072      	b.n	80054a2 <UART_SetConfig+0x2e6>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a35      	ldr	r2, [pc, #212]	; (8005498 <UART_SetConfig+0x2dc>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d12a      	bne.n	800541c <UART_SetConfig+0x260>
 80053c6:	4b30      	ldr	r3, [pc, #192]	; (8005488 <UART_SetConfig+0x2cc>)
 80053c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053d4:	d01a      	beq.n	800540c <UART_SetConfig+0x250>
 80053d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053da:	d81b      	bhi.n	8005414 <UART_SetConfig+0x258>
 80053dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e0:	d00c      	beq.n	80053fc <UART_SetConfig+0x240>
 80053e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e6:	d815      	bhi.n	8005414 <UART_SetConfig+0x258>
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d003      	beq.n	80053f4 <UART_SetConfig+0x238>
 80053ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053f0:	d008      	beq.n	8005404 <UART_SetConfig+0x248>
 80053f2:	e00f      	b.n	8005414 <UART_SetConfig+0x258>
 80053f4:	2300      	movs	r3, #0
 80053f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053fa:	e052      	b.n	80054a2 <UART_SetConfig+0x2e6>
 80053fc:	2302      	movs	r3, #2
 80053fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005402:	e04e      	b.n	80054a2 <UART_SetConfig+0x2e6>
 8005404:	2304      	movs	r3, #4
 8005406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800540a:	e04a      	b.n	80054a2 <UART_SetConfig+0x2e6>
 800540c:	2308      	movs	r3, #8
 800540e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005412:	e046      	b.n	80054a2 <UART_SetConfig+0x2e6>
 8005414:	2310      	movs	r3, #16
 8005416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800541a:	e042      	b.n	80054a2 <UART_SetConfig+0x2e6>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a17      	ldr	r2, [pc, #92]	; (8005480 <UART_SetConfig+0x2c4>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d13a      	bne.n	800549c <UART_SetConfig+0x2e0>
 8005426:	4b18      	ldr	r3, [pc, #96]	; (8005488 <UART_SetConfig+0x2cc>)
 8005428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005430:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005434:	d01a      	beq.n	800546c <UART_SetConfig+0x2b0>
 8005436:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800543a:	d81b      	bhi.n	8005474 <UART_SetConfig+0x2b8>
 800543c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005440:	d00c      	beq.n	800545c <UART_SetConfig+0x2a0>
 8005442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005446:	d815      	bhi.n	8005474 <UART_SetConfig+0x2b8>
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <UART_SetConfig+0x298>
 800544c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005450:	d008      	beq.n	8005464 <UART_SetConfig+0x2a8>
 8005452:	e00f      	b.n	8005474 <UART_SetConfig+0x2b8>
 8005454:	2300      	movs	r3, #0
 8005456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800545a:	e022      	b.n	80054a2 <UART_SetConfig+0x2e6>
 800545c:	2302      	movs	r3, #2
 800545e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005462:	e01e      	b.n	80054a2 <UART_SetConfig+0x2e6>
 8005464:	2304      	movs	r3, #4
 8005466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800546a:	e01a      	b.n	80054a2 <UART_SetConfig+0x2e6>
 800546c:	2308      	movs	r3, #8
 800546e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005472:	e016      	b.n	80054a2 <UART_SetConfig+0x2e6>
 8005474:	2310      	movs	r3, #16
 8005476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800547a:	e012      	b.n	80054a2 <UART_SetConfig+0x2e6>
 800547c:	efff69f3 	.word	0xefff69f3
 8005480:	40008000 	.word	0x40008000
 8005484:	40013800 	.word	0x40013800
 8005488:	40021000 	.word	0x40021000
 800548c:	40004400 	.word	0x40004400
 8005490:	40004800 	.word	0x40004800
 8005494:	40004c00 	.word	0x40004c00
 8005498:	40005000 	.word	0x40005000
 800549c:	2310      	movs	r3, #16
 800549e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a9f      	ldr	r2, [pc, #636]	; (8005724 <UART_SetConfig+0x568>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d17a      	bne.n	80055a2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d824      	bhi.n	80054fe <UART_SetConfig+0x342>
 80054b4:	a201      	add	r2, pc, #4	; (adr r2, 80054bc <UART_SetConfig+0x300>)
 80054b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ba:	bf00      	nop
 80054bc:	080054e1 	.word	0x080054e1
 80054c0:	080054ff 	.word	0x080054ff
 80054c4:	080054e9 	.word	0x080054e9
 80054c8:	080054ff 	.word	0x080054ff
 80054cc:	080054ef 	.word	0x080054ef
 80054d0:	080054ff 	.word	0x080054ff
 80054d4:	080054ff 	.word	0x080054ff
 80054d8:	080054ff 	.word	0x080054ff
 80054dc:	080054f7 	.word	0x080054f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054e0:	f7fe fd20 	bl	8003f24 <HAL_RCC_GetPCLK1Freq>
 80054e4:	61f8      	str	r0, [r7, #28]
        break;
 80054e6:	e010      	b.n	800550a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054e8:	4b8f      	ldr	r3, [pc, #572]	; (8005728 <UART_SetConfig+0x56c>)
 80054ea:	61fb      	str	r3, [r7, #28]
        break;
 80054ec:	e00d      	b.n	800550a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ee:	f7fe fc81 	bl	8003df4 <HAL_RCC_GetSysClockFreq>
 80054f2:	61f8      	str	r0, [r7, #28]
        break;
 80054f4:	e009      	b.n	800550a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054fa:	61fb      	str	r3, [r7, #28]
        break;
 80054fc:	e005      	b.n	800550a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80054fe:	2300      	movs	r3, #0
 8005500:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005508:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 80fb 	beq.w	8005708 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	4613      	mov	r3, r2
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	4413      	add	r3, r2
 800551c:	69fa      	ldr	r2, [r7, #28]
 800551e:	429a      	cmp	r2, r3
 8005520:	d305      	bcc.n	800552e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005528:	69fa      	ldr	r2, [r7, #28]
 800552a:	429a      	cmp	r2, r3
 800552c:	d903      	bls.n	8005536 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005534:	e0e8      	b.n	8005708 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	2200      	movs	r2, #0
 800553a:	461c      	mov	r4, r3
 800553c:	4615      	mov	r5, r2
 800553e:	f04f 0200 	mov.w	r2, #0
 8005542:	f04f 0300 	mov.w	r3, #0
 8005546:	022b      	lsls	r3, r5, #8
 8005548:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800554c:	0222      	lsls	r2, r4, #8
 800554e:	68f9      	ldr	r1, [r7, #12]
 8005550:	6849      	ldr	r1, [r1, #4]
 8005552:	0849      	lsrs	r1, r1, #1
 8005554:	2000      	movs	r0, #0
 8005556:	4688      	mov	r8, r1
 8005558:	4681      	mov	r9, r0
 800555a:	eb12 0a08 	adds.w	sl, r2, r8
 800555e:	eb43 0b09 	adc.w	fp, r3, r9
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	603b      	str	r3, [r7, #0]
 800556a:	607a      	str	r2, [r7, #4]
 800556c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005570:	4650      	mov	r0, sl
 8005572:	4659      	mov	r1, fp
 8005574:	f7fa fe7c 	bl	8000270 <__aeabi_uldivmod>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4613      	mov	r3, r2
 800557e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005586:	d308      	bcc.n	800559a <UART_SetConfig+0x3de>
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800558e:	d204      	bcs.n	800559a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	60da      	str	r2, [r3, #12]
 8005598:	e0b6      	b.n	8005708 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055a0:	e0b2      	b.n	8005708 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055aa:	d15e      	bne.n	800566a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80055ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d828      	bhi.n	8005606 <UART_SetConfig+0x44a>
 80055b4:	a201      	add	r2, pc, #4	; (adr r2, 80055bc <UART_SetConfig+0x400>)
 80055b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ba:	bf00      	nop
 80055bc:	080055e1 	.word	0x080055e1
 80055c0:	080055e9 	.word	0x080055e9
 80055c4:	080055f1 	.word	0x080055f1
 80055c8:	08005607 	.word	0x08005607
 80055cc:	080055f7 	.word	0x080055f7
 80055d0:	08005607 	.word	0x08005607
 80055d4:	08005607 	.word	0x08005607
 80055d8:	08005607 	.word	0x08005607
 80055dc:	080055ff 	.word	0x080055ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055e0:	f7fe fca0 	bl	8003f24 <HAL_RCC_GetPCLK1Freq>
 80055e4:	61f8      	str	r0, [r7, #28]
        break;
 80055e6:	e014      	b.n	8005612 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055e8:	f7fe fcb2 	bl	8003f50 <HAL_RCC_GetPCLK2Freq>
 80055ec:	61f8      	str	r0, [r7, #28]
        break;
 80055ee:	e010      	b.n	8005612 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055f0:	4b4d      	ldr	r3, [pc, #308]	; (8005728 <UART_SetConfig+0x56c>)
 80055f2:	61fb      	str	r3, [r7, #28]
        break;
 80055f4:	e00d      	b.n	8005612 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055f6:	f7fe fbfd 	bl	8003df4 <HAL_RCC_GetSysClockFreq>
 80055fa:	61f8      	str	r0, [r7, #28]
        break;
 80055fc:	e009      	b.n	8005612 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005602:	61fb      	str	r3, [r7, #28]
        break;
 8005604:	e005      	b.n	8005612 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005610:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d077      	beq.n	8005708 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	005a      	lsls	r2, r3, #1
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	085b      	lsrs	r3, r3, #1
 8005622:	441a      	add	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	fbb2 f3f3 	udiv	r3, r2, r3
 800562c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	2b0f      	cmp	r3, #15
 8005632:	d916      	bls.n	8005662 <UART_SetConfig+0x4a6>
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800563a:	d212      	bcs.n	8005662 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	b29b      	uxth	r3, r3
 8005640:	f023 030f 	bic.w	r3, r3, #15
 8005644:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	085b      	lsrs	r3, r3, #1
 800564a:	b29b      	uxth	r3, r3
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	b29a      	uxth	r2, r3
 8005652:	8afb      	ldrh	r3, [r7, #22]
 8005654:	4313      	orrs	r3, r2
 8005656:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	8afa      	ldrh	r2, [r7, #22]
 800565e:	60da      	str	r2, [r3, #12]
 8005660:	e052      	b.n	8005708 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005668:	e04e      	b.n	8005708 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800566a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800566e:	2b08      	cmp	r3, #8
 8005670:	d827      	bhi.n	80056c2 <UART_SetConfig+0x506>
 8005672:	a201      	add	r2, pc, #4	; (adr r2, 8005678 <UART_SetConfig+0x4bc>)
 8005674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005678:	0800569d 	.word	0x0800569d
 800567c:	080056a5 	.word	0x080056a5
 8005680:	080056ad 	.word	0x080056ad
 8005684:	080056c3 	.word	0x080056c3
 8005688:	080056b3 	.word	0x080056b3
 800568c:	080056c3 	.word	0x080056c3
 8005690:	080056c3 	.word	0x080056c3
 8005694:	080056c3 	.word	0x080056c3
 8005698:	080056bb 	.word	0x080056bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800569c:	f7fe fc42 	bl	8003f24 <HAL_RCC_GetPCLK1Freq>
 80056a0:	61f8      	str	r0, [r7, #28]
        break;
 80056a2:	e014      	b.n	80056ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056a4:	f7fe fc54 	bl	8003f50 <HAL_RCC_GetPCLK2Freq>
 80056a8:	61f8      	str	r0, [r7, #28]
        break;
 80056aa:	e010      	b.n	80056ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056ac:	4b1e      	ldr	r3, [pc, #120]	; (8005728 <UART_SetConfig+0x56c>)
 80056ae:	61fb      	str	r3, [r7, #28]
        break;
 80056b0:	e00d      	b.n	80056ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056b2:	f7fe fb9f 	bl	8003df4 <HAL_RCC_GetSysClockFreq>
 80056b6:	61f8      	str	r0, [r7, #28]
        break;
 80056b8:	e009      	b.n	80056ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056be:	61fb      	str	r3, [r7, #28]
        break;
 80056c0:	e005      	b.n	80056ce <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056cc:	bf00      	nop
    }

    if (pclk != 0U)
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d019      	beq.n	8005708 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	085a      	lsrs	r2, r3, #1
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	441a      	add	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	2b0f      	cmp	r3, #15
 80056ec:	d909      	bls.n	8005702 <UART_SetConfig+0x546>
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f4:	d205      	bcs.n	8005702 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	60da      	str	r2, [r3, #12]
 8005700:	e002      	b.n	8005708 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005714:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005718:	4618      	mov	r0, r3
 800571a:	3728      	adds	r7, #40	; 0x28
 800571c:	46bd      	mov	sp, r7
 800571e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005722:	bf00      	nop
 8005724:	40008000 	.word	0x40008000
 8005728:	00f42400 	.word	0x00f42400

0800572c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00a      	beq.n	8005756 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	430a      	orrs	r2, r1
 8005776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00a      	beq.n	800579a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	f003 0308 	and.w	r3, r3, #8
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00a      	beq.n	80057bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	430a      	orrs	r2, r1
 80057ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	f003 0310 	and.w	r3, r3, #16
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00a      	beq.n	80057de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00a      	beq.n	8005800 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005808:	2b00      	cmp	r3, #0
 800580a:	d01a      	beq.n	8005842 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800582a:	d10a      	bne.n	8005842 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	430a      	orrs	r2, r1
 8005840:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00a      	beq.n	8005864 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	605a      	str	r2, [r3, #4]
  }
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af02      	add	r7, sp, #8
 8005876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005880:	f7fc f83e 	bl	8001900 <HAL_GetTick>
 8005884:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0308 	and.w	r3, r3, #8
 8005890:	2b08      	cmp	r3, #8
 8005892:	d10e      	bne.n	80058b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005894:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f82d 	bl	8005902 <UART_WaitOnFlagUntilTimeout>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e023      	b.n	80058fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b04      	cmp	r3, #4
 80058be:	d10e      	bne.n	80058de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f817 	bl	8005902 <UART_WaitOnFlagUntilTimeout>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e00d      	b.n	80058fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2220      	movs	r2, #32
 80058e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2220      	movs	r2, #32
 80058e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b09c      	sub	sp, #112	; 0x70
 8005906:	af00      	add	r7, sp, #0
 8005908:	60f8      	str	r0, [r7, #12]
 800590a:	60b9      	str	r1, [r7, #8]
 800590c:	603b      	str	r3, [r7, #0]
 800590e:	4613      	mov	r3, r2
 8005910:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005912:	e0a5      	b.n	8005a60 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005914:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591a:	f000 80a1 	beq.w	8005a60 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800591e:	f7fb ffef 	bl	8001900 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800592a:	429a      	cmp	r2, r3
 800592c:	d302      	bcc.n	8005934 <UART_WaitOnFlagUntilTimeout+0x32>
 800592e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005930:	2b00      	cmp	r3, #0
 8005932:	d13e      	bne.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800593c:	e853 3f00 	ldrex	r3, [r3]
 8005940:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005944:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005948:	667b      	str	r3, [r7, #100]	; 0x64
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	461a      	mov	r2, r3
 8005950:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005952:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005954:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005956:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005958:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800595a:	e841 2300 	strex	r3, r2, [r1]
 800595e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e6      	bne.n	8005934 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3308      	adds	r3, #8
 800596c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005970:	e853 3f00 	ldrex	r3, [r3]
 8005974:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005978:	f023 0301 	bic.w	r3, r3, #1
 800597c:	663b      	str	r3, [r7, #96]	; 0x60
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3308      	adds	r3, #8
 8005984:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005986:	64ba      	str	r2, [r7, #72]	; 0x48
 8005988:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800598c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e5      	bne.n	8005966 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2220      	movs	r2, #32
 800599e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2220      	movs	r2, #32
 80059a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e067      	b.n	8005a82 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d04f      	beq.n	8005a60 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ce:	d147      	bne.n	8005a60 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059d8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e2:	e853 3f00 	ldrex	r3, [r3]
 80059e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	461a      	mov	r2, r3
 80059f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f8:	637b      	str	r3, [r7, #52]	; 0x34
 80059fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a00:	e841 2300 	strex	r3, r2, [r1]
 8005a04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e6      	bne.n	80059da <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3308      	adds	r3, #8
 8005a12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	e853 3f00 	ldrex	r3, [r3]
 8005a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	f023 0301 	bic.w	r3, r3, #1
 8005a22:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3308      	adds	r3, #8
 8005a2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a2c:	623a      	str	r2, [r7, #32]
 8005a2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a30:	69f9      	ldr	r1, [r7, #28]
 8005a32:	6a3a      	ldr	r2, [r7, #32]
 8005a34:	e841 2300 	strex	r3, r2, [r1]
 8005a38:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e5      	bne.n	8005a0c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2220      	movs	r2, #32
 8005a44:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e010      	b.n	8005a82 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	69da      	ldr	r2, [r3, #28]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	4013      	ands	r3, r2
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	bf0c      	ite	eq
 8005a70:	2301      	moveq	r3, #1
 8005a72:	2300      	movne	r3, #0
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	461a      	mov	r2, r3
 8005a78:	79fb      	ldrb	r3, [r7, #7]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	f43f af4a 	beq.w	8005914 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3770      	adds	r7, #112	; 0x70
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	f107 001c 	add.w	r0, r7, #28
 8005a98:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 fa6f 	bl	8005f8c <USB_CoreReset>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d106      	bne.n	8005ac6 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	639a      	str	r2, [r3, #56]	; 0x38
 8005ac4:	e005      	b.n	8005ad2 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ade:	b004      	add	sp, #16
 8005ae0:	4770      	bx	lr

08005ae2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f023 0201 	bic.w	r2, r3, #1
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b10:	2300      	movs	r3, #0
 8005b12:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b20:	78fb      	ldrb	r3, [r7, #3]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d115      	bne.n	8005b52 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b32:	2001      	movs	r0, #1
 8005b34:	f7fb fef0 	bl	8001918 <HAL_Delay>
      ms++;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fa16 	bl	8005f70 <USB_GetMode>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d01e      	beq.n	8005b88 <USB_SetCurrentMode+0x84>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2b31      	cmp	r3, #49	; 0x31
 8005b4e:	d9f0      	bls.n	8005b32 <USB_SetCurrentMode+0x2e>
 8005b50:	e01a      	b.n	8005b88 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b52:	78fb      	ldrb	r3, [r7, #3]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d115      	bne.n	8005b84 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b64:	2001      	movs	r0, #1
 8005b66:	f7fb fed7 	bl	8001918 <HAL_Delay>
      ms++;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f9fd 	bl	8005f70 <USB_GetMode>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d005      	beq.n	8005b88 <USB_SetCurrentMode+0x84>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2b31      	cmp	r3, #49	; 0x31
 8005b80:	d9f0      	bls.n	8005b64 <USB_SetCurrentMode+0x60>
 8005b82:	e001      	b.n	8005b88 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e005      	b.n	8005b94 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2b32      	cmp	r3, #50	; 0x32
 8005b8c:	d101      	bne.n	8005b92 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e000      	b.n	8005b94 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b9c:	b084      	sub	sp, #16
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b086      	sub	sp, #24
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005baa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	613b      	str	r3, [r7, #16]
 8005bba:	e009      	b.n	8005bd0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	3340      	adds	r3, #64	; 0x40
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	613b      	str	r3, [r7, #16]
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	2b0e      	cmp	r3, #14
 8005bd4:	d9f2      	bls.n	8005bbc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d11c      	bne.n	8005c16 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bea:	f043 0302 	orr.w	r3, r3, #2
 8005bee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	e005      	b.n	8005c22 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c28:	461a      	mov	r2, r3
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c34:	4619      	mov	r1, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	680b      	ldr	r3, [r1, #0]
 8005c40:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005c42:	2103      	movs	r1, #3
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f959 	bl	8005efc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c4a:	2110      	movs	r1, #16
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f8f1 	bl	8005e34 <USB_FlushTxFifo>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f91d 	bl	8005e9c <USB_FlushRxFifo>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c72:	461a      	mov	r2, r3
 8005c74:	2300      	movs	r3, #0
 8005c76:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7e:	461a      	mov	r2, r3
 8005c80:	2300      	movs	r3, #0
 8005c82:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c90:	2300      	movs	r3, #0
 8005c92:	613b      	str	r3, [r7, #16]
 8005c94:	e043      	b.n	8005d1e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cac:	d118      	bne.n	8005ce0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10a      	bne.n	8005cca <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	e013      	b.n	8005cf2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005cdc:	6013      	str	r3, [r2, #0]
 8005cde:	e008      	b.n	8005cf2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cec:	461a      	mov	r2, r3
 8005cee:	2300      	movs	r3, #0
 8005cf0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfe:	461a      	mov	r2, r3
 8005d00:	2300      	movs	r3, #0
 8005d02:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d10:	461a      	mov	r2, r3
 8005d12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	613b      	str	r3, [r7, #16]
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d3b7      	bcc.n	8005c96 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d26:	2300      	movs	r3, #0
 8005d28:	613b      	str	r3, [r7, #16]
 8005d2a:	e043      	b.n	8005db4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d42:	d118      	bne.n	8005d76 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10a      	bne.n	8005d60 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	015a      	lsls	r2, r3, #5
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d56:	461a      	mov	r2, r3
 8005d58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d5c:	6013      	str	r3, [r2, #0]
 8005d5e:	e013      	b.n	8005d88 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d72:	6013      	str	r3, [r2, #0]
 8005d74:	e008      	b.n	8005d88 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d82:	461a      	mov	r2, r3
 8005d84:	2300      	movs	r3, #0
 8005d86:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d94:	461a      	mov	r2, r3
 8005d96:	2300      	movs	r3, #0
 8005d98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da6:	461a      	mov	r2, r3
 8005da8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	3301      	adds	r3, #1
 8005db2:	613b      	str	r3, [r7, #16]
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d3b7      	bcc.n	8005d2c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ddc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	f043 0210 	orr.w	r2, r3, #16
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	699a      	ldr	r2, [r3, #24]
 8005dee:	4b10      	ldr	r3, [pc, #64]	; (8005e30 <USB_DevInit+0x294>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	f043 0208 	orr.w	r2, r3, #8
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d107      	bne.n	8005e1e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e16:	f043 0304 	orr.w	r3, r3, #4
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3718      	adds	r7, #24
 8005e24:	46bd      	mov	sp, r7
 8005e26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e2a:	b004      	add	sp, #16
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	803c3800 	.word	0x803c3800

08005e34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3301      	adds	r3, #1
 8005e46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4a13      	ldr	r2, [pc, #76]	; (8005e98 <USB_FlushTxFifo+0x64>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d901      	bls.n	8005e54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e01b      	b.n	8005e8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	daf2      	bge.n	8005e42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	019b      	lsls	r3, r3, #6
 8005e64:	f043 0220 	orr.w	r2, r3, #32
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4a08      	ldr	r2, [pc, #32]	; (8005e98 <USB_FlushTxFifo+0x64>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d901      	bls.n	8005e7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e006      	b.n	8005e8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f003 0320 	and.w	r3, r3, #32
 8005e86:	2b20      	cmp	r3, #32
 8005e88:	d0f0      	beq.n	8005e6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	00030d40 	.word	0x00030d40

08005e9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4a11      	ldr	r2, [pc, #68]	; (8005ef8 <USB_FlushRxFifo+0x5c>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d901      	bls.n	8005eba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e018      	b.n	8005eec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	daf2      	bge.n	8005ea8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2210      	movs	r2, #16
 8005eca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	4a08      	ldr	r2, [pc, #32]	; (8005ef8 <USB_FlushRxFifo+0x5c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d901      	bls.n	8005ede <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e006      	b.n	8005eec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	f003 0310 	and.w	r3, r3, #16
 8005ee6:	2b10      	cmp	r3, #16
 8005ee8:	d0f0      	beq.n	8005ecc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	00030d40 	.word	0x00030d40

08005efc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	460b      	mov	r3, r1
 8005f06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	78fb      	ldrb	r3, [r7, #3]
 8005f16:	68f9      	ldr	r1, [r7, #12]
 8005f18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b085      	sub	sp, #20
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f48:	f023 0303 	bic.w	r3, r3, #3
 8005f4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f5c:	f043 0302 	orr.w	r3, r3, #2
 8005f60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	f003 0301 	and.w	r3, r3, #1
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	4a13      	ldr	r2, [pc, #76]	; (8005ff0 <USB_CoreReset+0x64>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d901      	bls.n	8005faa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e01b      	b.n	8005fe2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	daf2      	bge.n	8005f98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	f043 0201 	orr.w	r2, r3, #1
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4a09      	ldr	r2, [pc, #36]	; (8005ff0 <USB_CoreReset+0x64>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d901      	bls.n	8005fd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e006      	b.n	8005fe2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d0f0      	beq.n	8005fc2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	00030d40 	.word	0x00030d40

08005ff4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b08a      	sub	sp, #40	; 0x28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8005ffc:	4b27      	ldr	r3, [pc, #156]	; (800609c <I2Cx_MspInit+0xa8>)
 8005ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006000:	4a26      	ldr	r2, [pc, #152]	; (800609c <I2Cx_MspInit+0xa8>)
 8006002:	f043 0302 	orr.w	r3, r3, #2
 8006006:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006008:	4b24      	ldr	r3, [pc, #144]	; (800609c <I2Cx_MspInit+0xa8>)
 800600a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	613b      	str	r3, [r7, #16]
 8006012:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8006014:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006018:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800601a:	2312      	movs	r3, #18
 800601c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800601e:	2301      	movs	r3, #1
 8006020:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006022:	2303      	movs	r3, #3
 8006024:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8006026:	2304      	movs	r3, #4
 8006028:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800602a:	f107 0314 	add.w	r3, r7, #20
 800602e:	4619      	mov	r1, r3
 8006030:	481b      	ldr	r0, [pc, #108]	; (80060a0 <I2Cx_MspInit+0xac>)
 8006032:	f7fb fe83 	bl	8001d3c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006036:	f107 0314 	add.w	r3, r7, #20
 800603a:	4619      	mov	r1, r3
 800603c:	4818      	ldr	r0, [pc, #96]	; (80060a0 <I2Cx_MspInit+0xac>)
 800603e:	f7fb fe7d 	bl	8001d3c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8006042:	4b16      	ldr	r3, [pc, #88]	; (800609c <I2Cx_MspInit+0xa8>)
 8006044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006046:	4a15      	ldr	r2, [pc, #84]	; (800609c <I2Cx_MspInit+0xa8>)
 8006048:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800604c:	6593      	str	r3, [r2, #88]	; 0x58
 800604e:	4b13      	ldr	r3, [pc, #76]	; (800609c <I2Cx_MspInit+0xa8>)
 8006050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800605a:	4b10      	ldr	r3, [pc, #64]	; (800609c <I2Cx_MspInit+0xa8>)
 800605c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605e:	4a0f      	ldr	r2, [pc, #60]	; (800609c <I2Cx_MspInit+0xa8>)
 8006060:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006064:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8006066:	4b0d      	ldr	r3, [pc, #52]	; (800609c <I2Cx_MspInit+0xa8>)
 8006068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606a:	4a0c      	ldr	r2, [pc, #48]	; (800609c <I2Cx_MspInit+0xa8>)
 800606c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006070:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8006072:	2200      	movs	r2, #0
 8006074:	210f      	movs	r1, #15
 8006076:	2021      	movs	r0, #33	; 0x21
 8006078:	f7fb fd2a 	bl	8001ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800607c:	2021      	movs	r0, #33	; 0x21
 800607e:	f7fb fd43 	bl	8001b08 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8006082:	2200      	movs	r2, #0
 8006084:	210f      	movs	r1, #15
 8006086:	2022      	movs	r0, #34	; 0x22
 8006088:	f7fb fd22 	bl	8001ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800608c:	2022      	movs	r0, #34	; 0x22
 800608e:	f7fb fd3b 	bl	8001b08 <HAL_NVIC_EnableIRQ>
}
 8006092:	bf00      	nop
 8006094:	3728      	adds	r7, #40	; 0x28
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	40021000 	.word	0x40021000
 80060a0:	48000400 	.word	0x48000400

080060a4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a12      	ldr	r2, [pc, #72]	; (80060f8 <I2Cx_Init+0x54>)
 80060b0:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a11      	ldr	r2, [pc, #68]	; (80060fc <I2Cx_Init+0x58>)
 80060b6:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7ff ff89 	bl	8005ff4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fc f8f8 	bl	80022d8 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80060e8:	2100      	movs	r1, #0
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7fc fe86 	bl	8002dfc <HAL_I2CEx_ConfigAnalogFilter>
}
 80060f0:	bf00      	nop
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	40005800 	.word	0x40005800
 80060fc:	00702681 	.word	0x00702681

08006100 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b08a      	sub	sp, #40	; 0x28
 8006104:	af04      	add	r7, sp, #16
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	4608      	mov	r0, r1
 800610a:	4611      	mov	r1, r2
 800610c:	461a      	mov	r2, r3
 800610e:	4603      	mov	r3, r0
 8006110:	72fb      	strb	r3, [r7, #11]
 8006112:	460b      	mov	r3, r1
 8006114:	813b      	strh	r3, [r7, #8]
 8006116:	4613      	mov	r3, r2
 8006118:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800611e:	7afb      	ldrb	r3, [r7, #11]
 8006120:	b299      	uxth	r1, r3
 8006122:	88f8      	ldrh	r0, [r7, #6]
 8006124:	893a      	ldrh	r2, [r7, #8]
 8006126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800612a:	9302      	str	r3, [sp, #8]
 800612c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800612e:	9301      	str	r3, [sp, #4]
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	4603      	mov	r3, r0
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f7fc faa0 	bl	800267c <HAL_I2C_Mem_Read>
 800613c:	4603      	mov	r3, r0
 800613e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8006140:	7dfb      	ldrb	r3, [r7, #23]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d004      	beq.n	8006150 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8006146:	7afb      	ldrb	r3, [r7, #11]
 8006148:	4619      	mov	r1, r3
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f000 f832 	bl	80061b4 <I2Cx_Error>
  }
  return status;
 8006150:	7dfb      	ldrb	r3, [r7, #23]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3718      	adds	r7, #24
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b08a      	sub	sp, #40	; 0x28
 800615e:	af04      	add	r7, sp, #16
 8006160:	60f8      	str	r0, [r7, #12]
 8006162:	4608      	mov	r0, r1
 8006164:	4611      	mov	r1, r2
 8006166:	461a      	mov	r2, r3
 8006168:	4603      	mov	r3, r0
 800616a:	72fb      	strb	r3, [r7, #11]
 800616c:	460b      	mov	r3, r1
 800616e:	813b      	strh	r3, [r7, #8]
 8006170:	4613      	mov	r3, r2
 8006172:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006174:	2300      	movs	r3, #0
 8006176:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006178:	7afb      	ldrb	r3, [r7, #11]
 800617a:	b299      	uxth	r1, r3
 800617c:	88f8      	ldrh	r0, [r7, #6]
 800617e:	893a      	ldrh	r2, [r7, #8]
 8006180:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006184:	9302      	str	r3, [sp, #8]
 8006186:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006188:	9301      	str	r3, [sp, #4]
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	4603      	mov	r3, r0
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f7fc f95f 	bl	8002454 <HAL_I2C_Mem_Write>
 8006196:	4603      	mov	r3, r0
 8006198:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800619a:	7dfb      	ldrb	r3, [r7, #23]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d004      	beq.n	80061aa <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80061a0:	7afb      	ldrb	r3, [r7, #11]
 80061a2:	4619      	mov	r1, r3
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f000 f805 	bl	80061b4 <I2Cx_Error>
  }
  return status;
 80061aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	460b      	mov	r3, r1
 80061be:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7fc f918 	bl	80023f6 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7ff ff6c 	bl	80060a4 <I2Cx_Init>
}
 80061cc:	bf00      	nop
 80061ce:	3708      	adds	r7, #8
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80061d8:	4802      	ldr	r0, [pc, #8]	; (80061e4 <SENSOR_IO_Init+0x10>)
 80061da:	f7ff ff63 	bl	80060a4 <I2Cx_Init>
}
 80061de:	bf00      	nop
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20000894 	.word	0x20000894

080061e8 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af02      	add	r7, sp, #8
 80061ee:	4603      	mov	r3, r0
 80061f0:	71fb      	strb	r3, [r7, #7]
 80061f2:	460b      	mov	r3, r1
 80061f4:	71bb      	strb	r3, [r7, #6]
 80061f6:	4613      	mov	r3, r2
 80061f8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80061fa:	79bb      	ldrb	r3, [r7, #6]
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	79f9      	ldrb	r1, [r7, #7]
 8006200:	2301      	movs	r3, #1
 8006202:	9301      	str	r3, [sp, #4]
 8006204:	1d7b      	adds	r3, r7, #5
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	2301      	movs	r3, #1
 800620a:	4803      	ldr	r0, [pc, #12]	; (8006218 <SENSOR_IO_Write+0x30>)
 800620c:	f7ff ffa5 	bl	800615a <I2Cx_WriteMultiple>
}
 8006210:	bf00      	nop
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	20000894 	.word	0x20000894

0800621c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af02      	add	r7, sp, #8
 8006222:	4603      	mov	r3, r0
 8006224:	460a      	mov	r2, r1
 8006226:	71fb      	strb	r3, [r7, #7]
 8006228:	4613      	mov	r3, r2
 800622a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800622c:	2300      	movs	r3, #0
 800622e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8006230:	79bb      	ldrb	r3, [r7, #6]
 8006232:	b29a      	uxth	r2, r3
 8006234:	79f9      	ldrb	r1, [r7, #7]
 8006236:	2301      	movs	r3, #1
 8006238:	9301      	str	r3, [sp, #4]
 800623a:	f107 030f 	add.w	r3, r7, #15
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	2301      	movs	r3, #1
 8006242:	4804      	ldr	r0, [pc, #16]	; (8006254 <SENSOR_IO_Read+0x38>)
 8006244:	f7ff ff5c 	bl	8006100 <I2Cx_ReadMultiple>

  return read_value;
 8006248:	7bfb      	ldrb	r3, [r7, #15]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	20000894 	.word	0x20000894

08006258 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af02      	add	r7, sp, #8
 800625e:	603a      	str	r2, [r7, #0]
 8006260:	461a      	mov	r2, r3
 8006262:	4603      	mov	r3, r0
 8006264:	71fb      	strb	r3, [r7, #7]
 8006266:	460b      	mov	r3, r1
 8006268:	71bb      	strb	r3, [r7, #6]
 800626a:	4613      	mov	r3, r2
 800626c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800626e:	79bb      	ldrb	r3, [r7, #6]
 8006270:	b29a      	uxth	r2, r3
 8006272:	79f9      	ldrb	r1, [r7, #7]
 8006274:	88bb      	ldrh	r3, [r7, #4]
 8006276:	9301      	str	r3, [sp, #4]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	2301      	movs	r3, #1
 800627e:	4804      	ldr	r0, [pc, #16]	; (8006290 <SENSOR_IO_ReadMultiple+0x38>)
 8006280:	f7ff ff3e 	bl	8006100 <I2Cx_ReadMultiple>
 8006284:	4603      	mov	r3, r0
 8006286:	b29b      	uxth	r3, r3
}
 8006288:	4618      	mov	r0, r3
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	20000894 	.word	0x20000894

08006294 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800629e:	2300      	movs	r3, #0
 80062a0:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80062a2:	4b19      	ldr	r3, [pc, #100]	; (8006308 <BSP_ACCELERO_Init+0x74>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	4798      	blx	r3
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b6a      	cmp	r3, #106	; 0x6a
 80062ac:	d002      	beq.n	80062b4 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	73fb      	strb	r3, [r7, #15]
 80062b2:	e024      	b.n	80062fe <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80062b4:	4b15      	ldr	r3, [pc, #84]	; (800630c <BSP_ACCELERO_Init+0x78>)
 80062b6:	4a14      	ldr	r2, [pc, #80]	; (8006308 <BSP_ACCELERO_Init+0x74>)
 80062b8:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80062ba:	2330      	movs	r3, #48	; 0x30
 80062bc:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80062be:	2300      	movs	r3, #0
 80062c0:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80062c2:	2300      	movs	r3, #0
 80062c4:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80062c6:	2340      	movs	r3, #64	; 0x40
 80062c8:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80062ca:	2300      	movs	r3, #0
 80062cc:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80062ce:	2300      	movs	r3, #0
 80062d0:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80062d2:	797a      	ldrb	r2, [r7, #5]
 80062d4:	7abb      	ldrb	r3, [r7, #10]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80062dc:	7a3b      	ldrb	r3, [r7, #8]
 80062de:	f043 0304 	orr.w	r3, r3, #4
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	021b      	lsls	r3, r3, #8
 80062e6:	b21a      	sxth	r2, r3
 80062e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	b21b      	sxth	r3, r3
 80062f0:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80062f2:	4b06      	ldr	r3, [pc, #24]	; (800630c <BSP_ACCELERO_Init+0x78>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	89ba      	ldrh	r2, [r7, #12]
 80062fa:	4610      	mov	r0, r2
 80062fc:	4798      	blx	r3
  }  

  return ret;
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	2000000c 	.word	0x2000000c
 800630c:	200008e8 	.word	0x200008e8

08006310 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8006318:	4b08      	ldr	r3, [pc, #32]	; (800633c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d009      	beq.n	8006334 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8006320:	4b06      	ldr	r3, [pc, #24]	; (800633c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006326:	2b00      	cmp	r3, #0
 8006328:	d004      	beq.n	8006334 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800632a:	4b04      	ldr	r3, [pc, #16]	; (800633c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	4798      	blx	r3
    }
  }
}
 8006334:	bf00      	nop
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	200008e8 	.word	0x200008e8

08006340 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	4603      	mov	r3, r0
 8006348:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800634a:	2300      	movs	r3, #0
 800634c:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800634e:	2110      	movs	r1, #16
 8006350:	20d4      	movs	r0, #212	; 0xd4
 8006352:	f7ff ff63 	bl	800621c <SENSOR_IO_Read>
 8006356:	4603      	mov	r3, r0
 8006358:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800635a:	88fb      	ldrh	r3, [r7, #6]
 800635c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800635e:	7bbb      	ldrb	r3, [r7, #14]
 8006360:	f003 0303 	and.w	r3, r3, #3
 8006364:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8006366:	7bba      	ldrb	r2, [r7, #14]
 8006368:	7bfb      	ldrb	r3, [r7, #15]
 800636a:	4313      	orrs	r3, r2
 800636c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800636e:	7bbb      	ldrb	r3, [r7, #14]
 8006370:	461a      	mov	r2, r3
 8006372:	2110      	movs	r1, #16
 8006374:	20d4      	movs	r0, #212	; 0xd4
 8006376:	f7ff ff37 	bl	80061e8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800637a:	2112      	movs	r1, #18
 800637c:	20d4      	movs	r0, #212	; 0xd4
 800637e:	f7ff ff4d 	bl	800621c <SENSOR_IO_Read>
 8006382:	4603      	mov	r3, r0
 8006384:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8006386:	88fb      	ldrh	r3, [r7, #6]
 8006388:	0a1b      	lsrs	r3, r3, #8
 800638a:	b29b      	uxth	r3, r3
 800638c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800638e:	7bbb      	ldrb	r3, [r7, #14]
 8006390:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8006394:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8006396:	7bba      	ldrb	r2, [r7, #14]
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	4313      	orrs	r3, r2
 800639c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800639e:	7bbb      	ldrb	r3, [r7, #14]
 80063a0:	461a      	mov	r2, r3
 80063a2:	2112      	movs	r1, #18
 80063a4:	20d4      	movs	r0, #212	; 0xd4
 80063a6:	f7ff ff1f 	bl	80061e8 <SENSOR_IO_Write>
}
 80063aa:	bf00      	nop
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b082      	sub	sp, #8
 80063b6:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80063b8:	2300      	movs	r3, #0
 80063ba:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80063bc:	2110      	movs	r1, #16
 80063be:	20d4      	movs	r0, #212	; 0xd4
 80063c0:	f7ff ff2c 	bl	800621c <SENSOR_IO_Read>
 80063c4:	4603      	mov	r3, r0
 80063c6:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80063c8:	79fb      	ldrb	r3, [r7, #7]
 80063ca:	f003 030f 	and.w	r3, r3, #15
 80063ce:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80063d0:	79fb      	ldrb	r3, [r7, #7]
 80063d2:	461a      	mov	r2, r3
 80063d4:	2110      	movs	r1, #16
 80063d6:	20d4      	movs	r0, #212	; 0xd4
 80063d8:	f7ff ff06 	bl	80061e8 <SENSOR_IO_Write>
}
 80063dc:	bf00      	nop
 80063de:	3708      	adds	r7, #8
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80063e4:	b580      	push	{r7, lr}
 80063e6:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80063e8:	f7ff fef4 	bl	80061d4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80063ec:	210f      	movs	r1, #15
 80063ee:	20d4      	movs	r0, #212	; 0xd4
 80063f0:	f7ff ff14 	bl	800621c <SENSOR_IO_Read>
 80063f4:	4603      	mov	r3, r0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	bd80      	pop	{r7, pc}

080063fa <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b084      	sub	sp, #16
 80063fe:	af00      	add	r7, sp, #0
 8006400:	4603      	mov	r3, r0
 8006402:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8006404:	2300      	movs	r3, #0
 8006406:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8006408:	2115      	movs	r1, #21
 800640a:	20d4      	movs	r0, #212	; 0xd4
 800640c:	f7ff ff06 	bl	800621c <SENSOR_IO_Read>
 8006410:	4603      	mov	r3, r0
 8006412:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8006414:	7bfb      	ldrb	r3, [r7, #15]
 8006416:	f023 0310 	bic.w	r3, r3, #16
 800641a:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800641c:	88fb      	ldrh	r3, [r7, #6]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8006422:	7bfb      	ldrb	r3, [r7, #15]
 8006424:	f043 0310 	orr.w	r3, r3, #16
 8006428:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800642a:	7bfb      	ldrb	r3, [r7, #15]
 800642c:	461a      	mov	r2, r3
 800642e:	2115      	movs	r1, #21
 8006430:	20d4      	movs	r0, #212	; 0xd4
 8006432:	f7ff fed9 	bl	80061e8 <SENSOR_IO_Write>
}
 8006436:	bf00      	nop
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8006448:	2300      	movs	r3, #0
 800644a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800644c:	2300      	movs	r3, #0
 800644e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8006450:	f04f 0300 	mov.w	r3, #0
 8006454:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8006456:	2110      	movs	r1, #16
 8006458:	20d4      	movs	r0, #212	; 0xd4
 800645a:	f7ff fedf 	bl	800621c <SENSOR_IO_Read>
 800645e:	4603      	mov	r3, r0
 8006460:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8006462:	f107 0208 	add.w	r2, r7, #8
 8006466:	2306      	movs	r3, #6
 8006468:	2128      	movs	r1, #40	; 0x28
 800646a:	20d4      	movs	r0, #212	; 0xd4
 800646c:	f7ff fef4 	bl	8006258 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8006470:	2300      	movs	r3, #0
 8006472:	77fb      	strb	r3, [r7, #31]
 8006474:	e01c      	b.n	80064b0 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8006476:	7ffb      	ldrb	r3, [r7, #31]
 8006478:	005b      	lsls	r3, r3, #1
 800647a:	3301      	adds	r3, #1
 800647c:	3320      	adds	r3, #32
 800647e:	443b      	add	r3, r7
 8006480:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8006484:	b29b      	uxth	r3, r3
 8006486:	021b      	lsls	r3, r3, #8
 8006488:	b29a      	uxth	r2, r3
 800648a:	7ffb      	ldrb	r3, [r7, #31]
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	3320      	adds	r3, #32
 8006490:	443b      	add	r3, r7
 8006492:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8006496:	b29b      	uxth	r3, r3
 8006498:	4413      	add	r3, r2
 800649a:	b29a      	uxth	r2, r3
 800649c:	7ffb      	ldrb	r3, [r7, #31]
 800649e:	b212      	sxth	r2, r2
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	3320      	adds	r3, #32
 80064a4:	443b      	add	r3, r7
 80064a6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80064aa:	7ffb      	ldrb	r3, [r7, #31]
 80064ac:	3301      	adds	r3, #1
 80064ae:	77fb      	strb	r3, [r7, #31]
 80064b0:	7ffb      	ldrb	r3, [r7, #31]
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d9df      	bls.n	8006476 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80064b6:	7dfb      	ldrb	r3, [r7, #23]
 80064b8:	f003 030c 	and.w	r3, r3, #12
 80064bc:	2b0c      	cmp	r3, #12
 80064be:	d829      	bhi.n	8006514 <LSM6DSL_AccReadXYZ+0xd4>
 80064c0:	a201      	add	r2, pc, #4	; (adr r2, 80064c8 <LSM6DSL_AccReadXYZ+0x88>)
 80064c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c6:	bf00      	nop
 80064c8:	080064fd 	.word	0x080064fd
 80064cc:	08006515 	.word	0x08006515
 80064d0:	08006515 	.word	0x08006515
 80064d4:	08006515 	.word	0x08006515
 80064d8:	0800650f 	.word	0x0800650f
 80064dc:	08006515 	.word	0x08006515
 80064e0:	08006515 	.word	0x08006515
 80064e4:	08006515 	.word	0x08006515
 80064e8:	08006503 	.word	0x08006503
 80064ec:	08006515 	.word	0x08006515
 80064f0:	08006515 	.word	0x08006515
 80064f4:	08006515 	.word	0x08006515
 80064f8:	08006509 	.word	0x08006509
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80064fc:	4b18      	ldr	r3, [pc, #96]	; (8006560 <LSM6DSL_AccReadXYZ+0x120>)
 80064fe:	61bb      	str	r3, [r7, #24]
    break;
 8006500:	e008      	b.n	8006514 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8006502:	4b18      	ldr	r3, [pc, #96]	; (8006564 <LSM6DSL_AccReadXYZ+0x124>)
 8006504:	61bb      	str	r3, [r7, #24]
    break;
 8006506:	e005      	b.n	8006514 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8006508:	4b17      	ldr	r3, [pc, #92]	; (8006568 <LSM6DSL_AccReadXYZ+0x128>)
 800650a:	61bb      	str	r3, [r7, #24]
    break;
 800650c:	e002      	b.n	8006514 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800650e:	4b17      	ldr	r3, [pc, #92]	; (800656c <LSM6DSL_AccReadXYZ+0x12c>)
 8006510:	61bb      	str	r3, [r7, #24]
    break;    
 8006512:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8006514:	2300      	movs	r3, #0
 8006516:	77fb      	strb	r3, [r7, #31]
 8006518:	e01a      	b.n	8006550 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800651a:	7ffb      	ldrb	r3, [r7, #31]
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	3320      	adds	r3, #32
 8006520:	443b      	add	r3, r7
 8006522:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8006526:	ee07 3a90 	vmov	s15, r3
 800652a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800652e:	edd7 7a06 	vldr	s15, [r7, #24]
 8006532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006536:	7ffb      	ldrb	r3, [r7, #31]
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	4413      	add	r3, r2
 800653e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006542:	ee17 2a90 	vmov	r2, s15
 8006546:	b212      	sxth	r2, r2
 8006548:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800654a:	7ffb      	ldrb	r3, [r7, #31]
 800654c:	3301      	adds	r3, #1
 800654e:	77fb      	strb	r3, [r7, #31]
 8006550:	7ffb      	ldrb	r3, [r7, #31]
 8006552:	2b02      	cmp	r3, #2
 8006554:	d9e1      	bls.n	800651a <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8006556:	bf00      	nop
 8006558:	bf00      	nop
 800655a:	3720      	adds	r7, #32
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	3d79db23 	.word	0x3d79db23
 8006564:	3df9db23 	.word	0x3df9db23
 8006568:	3e79db23 	.word	0x3e79db23
 800656c:	3ef9db23 	.word	0x3ef9db23

08006570 <__NVIC_SetPriority>:
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	4603      	mov	r3, r0
 8006578:	6039      	str	r1, [r7, #0]
 800657a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800657c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006580:	2b00      	cmp	r3, #0
 8006582:	db0a      	blt.n	800659a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	b2da      	uxtb	r2, r3
 8006588:	490c      	ldr	r1, [pc, #48]	; (80065bc <__NVIC_SetPriority+0x4c>)
 800658a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800658e:	0112      	lsls	r2, r2, #4
 8006590:	b2d2      	uxtb	r2, r2
 8006592:	440b      	add	r3, r1
 8006594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006598:	e00a      	b.n	80065b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	b2da      	uxtb	r2, r3
 800659e:	4908      	ldr	r1, [pc, #32]	; (80065c0 <__NVIC_SetPriority+0x50>)
 80065a0:	79fb      	ldrb	r3, [r7, #7]
 80065a2:	f003 030f 	and.w	r3, r3, #15
 80065a6:	3b04      	subs	r3, #4
 80065a8:	0112      	lsls	r2, r2, #4
 80065aa:	b2d2      	uxtb	r2, r2
 80065ac:	440b      	add	r3, r1
 80065ae:	761a      	strb	r2, [r3, #24]
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	e000e100 	.word	0xe000e100
 80065c0:	e000ed00 	.word	0xe000ed00

080065c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80065c4:	b580      	push	{r7, lr}
 80065c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80065c8:	4b05      	ldr	r3, [pc, #20]	; (80065e0 <SysTick_Handler+0x1c>)
 80065ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80065cc:	f002 f80c 	bl	80085e8 <xTaskGetSchedulerState>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d001      	beq.n	80065da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80065d6:	f002 ffdf 	bl	8009598 <xPortSysTickHandler>
  }
}
 80065da:	bf00      	nop
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	e000e010 	.word	0xe000e010

080065e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80065e4:	b580      	push	{r7, lr}
 80065e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80065e8:	2100      	movs	r1, #0
 80065ea:	f06f 0004 	mvn.w	r0, #4
 80065ee:	f7ff ffbf 	bl	8006570 <__NVIC_SetPriority>
#endif
}
 80065f2:	bf00      	nop
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065fe:	f3ef 8305 	mrs	r3, IPSR
 8006602:	603b      	str	r3, [r7, #0]
  return(result);
 8006604:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800660a:	f06f 0305 	mvn.w	r3, #5
 800660e:	607b      	str	r3, [r7, #4]
 8006610:	e00c      	b.n	800662c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006612:	4b0a      	ldr	r3, [pc, #40]	; (800663c <osKernelInitialize+0x44>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d105      	bne.n	8006626 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800661a:	4b08      	ldr	r3, [pc, #32]	; (800663c <osKernelInitialize+0x44>)
 800661c:	2201      	movs	r2, #1
 800661e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006620:	2300      	movs	r3, #0
 8006622:	607b      	str	r3, [r7, #4]
 8006624:	e002      	b.n	800662c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006626:	f04f 33ff 	mov.w	r3, #4294967295
 800662a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800662c:	687b      	ldr	r3, [r7, #4]
}
 800662e:	4618      	mov	r0, r3
 8006630:	370c      	adds	r7, #12
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	200008ec 	.word	0x200008ec

08006640 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006646:	f3ef 8305 	mrs	r3, IPSR
 800664a:	603b      	str	r3, [r7, #0]
  return(result);
 800664c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006652:	f06f 0305 	mvn.w	r3, #5
 8006656:	607b      	str	r3, [r7, #4]
 8006658:	e010      	b.n	800667c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800665a:	4b0b      	ldr	r3, [pc, #44]	; (8006688 <osKernelStart+0x48>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d109      	bne.n	8006676 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006662:	f7ff ffbf 	bl	80065e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006666:	4b08      	ldr	r3, [pc, #32]	; (8006688 <osKernelStart+0x48>)
 8006668:	2202      	movs	r2, #2
 800666a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800666c:	f001 fb62 	bl	8007d34 <vTaskStartScheduler>
      stat = osOK;
 8006670:	2300      	movs	r3, #0
 8006672:	607b      	str	r3, [r7, #4]
 8006674:	e002      	b.n	800667c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006676:	f04f 33ff 	mov.w	r3, #4294967295
 800667a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800667c:	687b      	ldr	r3, [r7, #4]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	200008ec 	.word	0x200008ec

0800668c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006692:	f3ef 8305 	mrs	r3, IPSR
 8006696:	603b      	str	r3, [r7, #0]
  return(result);
 8006698:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800669e:	f001 fc6b 	bl	8007f78 <xTaskGetTickCountFromISR>
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	e002      	b.n	80066ac <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80066a6:	f001 fc57 	bl	8007f58 <xTaskGetTickCount>
 80066aa:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80066ac:	687b      	ldr	r3, [r7, #4]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b08e      	sub	sp, #56	; 0x38
 80066ba:	af04      	add	r7, sp, #16
 80066bc:	60f8      	str	r0, [r7, #12]
 80066be:	60b9      	str	r1, [r7, #8]
 80066c0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80066c2:	2300      	movs	r3, #0
 80066c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066c6:	f3ef 8305 	mrs	r3, IPSR
 80066ca:	617b      	str	r3, [r7, #20]
  return(result);
 80066cc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d17e      	bne.n	80067d0 <osThreadNew+0x11a>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d07b      	beq.n	80067d0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80066d8:	2380      	movs	r3, #128	; 0x80
 80066da:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80066dc:	2318      	movs	r3, #24
 80066de:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80066e0:	2300      	movs	r3, #0
 80066e2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80066e4:	f04f 33ff 	mov.w	r3, #4294967295
 80066e8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d045      	beq.n	800677c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <osThreadNew+0x48>
        name = attr->name;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d002      	beq.n	800670c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d008      	beq.n	8006724 <osThreadNew+0x6e>
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	2b38      	cmp	r3, #56	; 0x38
 8006716:	d805      	bhi.n	8006724 <osThreadNew+0x6e>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <osThreadNew+0x72>
        return (NULL);
 8006724:	2300      	movs	r3, #0
 8006726:	e054      	b.n	80067d2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	695b      	ldr	r3, [r3, #20]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	089b      	lsrs	r3, r3, #2
 8006736:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00e      	beq.n	800675e <osThreadNew+0xa8>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	2b5b      	cmp	r3, #91	; 0x5b
 8006746:	d90a      	bls.n	800675e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800674c:	2b00      	cmp	r3, #0
 800674e:	d006      	beq.n	800675e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <osThreadNew+0xa8>
        mem = 1;
 8006758:	2301      	movs	r3, #1
 800675a:	61bb      	str	r3, [r7, #24]
 800675c:	e010      	b.n	8006780 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10c      	bne.n	8006780 <osThreadNew+0xca>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d108      	bne.n	8006780 <osThreadNew+0xca>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d104      	bne.n	8006780 <osThreadNew+0xca>
          mem = 0;
 8006776:	2300      	movs	r3, #0
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	e001      	b.n	8006780 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800677c:	2300      	movs	r3, #0
 800677e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d110      	bne.n	80067a8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800678e:	9202      	str	r2, [sp, #8]
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	6a3a      	ldr	r2, [r7, #32]
 800679a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f001 f927 	bl	80079f0 <xTaskCreateStatic>
 80067a2:	4603      	mov	r3, r0
 80067a4:	613b      	str	r3, [r7, #16]
 80067a6:	e013      	b.n	80067d0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d110      	bne.n	80067d0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	f107 0310 	add.w	r3, r7, #16
 80067b6:	9301      	str	r3, [sp, #4]
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f001 f972 	bl	8007aaa <xTaskCreate>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d001      	beq.n	80067d0 <osThreadNew+0x11a>
            hTask = NULL;
 80067cc:	2300      	movs	r3, #0
 80067ce:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80067d0:	693b      	ldr	r3, [r7, #16]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3728      	adds	r7, #40	; 0x28
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
	...

080067dc <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80067dc:	b580      	push	{r7, lr}
 80067de:	b088      	sub	sp, #32
 80067e0:	af02      	add	r7, sp, #8
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <osThreadFlagsSet+0x1a>
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	da03      	bge.n	80067fe <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80067f6:	f06f 0303 	mvn.w	r3, #3
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	e035      	b.n	800686a <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 80067fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006802:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006804:	f3ef 8305 	mrs	r3, IPSR
 8006808:	613b      	str	r3, [r7, #16]
  return(result);
 800680a:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800680c:	2b00      	cmp	r3, #0
 800680e:	d01f      	beq.n	8006850 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8006810:	2300      	movs	r3, #0
 8006812:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8006814:	f107 0308 	add.w	r3, r7, #8
 8006818:	9300      	str	r3, [sp, #0]
 800681a:	2300      	movs	r3, #0
 800681c:	2201      	movs	r2, #1
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6978      	ldr	r0, [r7, #20]
 8006822:	f002 f87f 	bl	8008924 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8006826:	f107 030c 	add.w	r3, r7, #12
 800682a:	2200      	movs	r2, #0
 800682c:	9200      	str	r2, [sp, #0]
 800682e:	2200      	movs	r2, #0
 8006830:	2100      	movs	r1, #0
 8006832:	6978      	ldr	r0, [r7, #20]
 8006834:	f002 f876 	bl	8008924 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d015      	beq.n	800686a <osThreadFlagsSet+0x8e>
 800683e:	4b0d      	ldr	r3, [pc, #52]	; (8006874 <osThreadFlagsSet+0x98>)
 8006840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	e00c      	b.n	800686a <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8006850:	2300      	movs	r3, #0
 8006852:	2201      	movs	r2, #1
 8006854:	6839      	ldr	r1, [r7, #0]
 8006856:	6978      	ldr	r0, [r7, #20]
 8006858:	f001 ffac 	bl	80087b4 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800685c:	f107 030c 	add.w	r3, r7, #12
 8006860:	2200      	movs	r2, #0
 8006862:	2100      	movs	r1, #0
 8006864:	6978      	ldr	r0, [r7, #20]
 8006866:	f001 ffa5 	bl	80087b4 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800686a:	68fb      	ldr	r3, [r7, #12]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	e000ed04 	.word	0xe000ed04

08006878 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8006878:	b580      	push	{r7, lr}
 800687a:	b08c      	sub	sp, #48	; 0x30
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006884:	f3ef 8305 	mrs	r3, IPSR
 8006888:	617b      	str	r3, [r7, #20]
  return(result);
 800688a:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800688c:	2b00      	cmp	r3, #0
 800688e:	d003      	beq.n	8006898 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8006890:	f06f 0305 	mvn.w	r3, #5
 8006894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006896:	e06b      	b.n	8006970 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	da03      	bge.n	80068a6 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800689e:	f06f 0303 	mvn.w	r3, #3
 80068a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068a4:	e064      	b.n	8006970 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	f003 0302 	and.w	r3, r3, #2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d002      	beq.n	80068b6 <osThreadFlagsWait+0x3e>
      clear = 0U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80068b4:	e001      	b.n	80068ba <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 80068c2:	f001 fb49 	bl	8007f58 <xTaskGetTickCount>
 80068c6:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80068c8:	f107 0210 	add.w	r2, r7, #16
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068d0:	2000      	movs	r0, #0
 80068d2:	f001 ff15 	bl	8008700 <xTaskNotifyWait>
 80068d6:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d137      	bne.n	800694e <osThreadFlagsWait+0xd6>
        rflags &= flags;
 80068de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4013      	ands	r3, r2
 80068e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068ea:	4313      	orrs	r3, r2
 80068ec:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f003 0301 	and.w	r3, r3, #1
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00c      	beq.n	8006912 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fc:	4013      	ands	r3, r2
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	429a      	cmp	r2, r3
 8006902:	d032      	beq.n	800696a <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10f      	bne.n	800692a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800690a:	f06f 0302 	mvn.w	r3, #2
 800690e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8006910:	e02e      	b.n	8006970 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006916:	4013      	ands	r3, r2
 8006918:	2b00      	cmp	r3, #0
 800691a:	d128      	bne.n	800696e <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d103      	bne.n	800692a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8006922:	f06f 0302 	mvn.w	r3, #2
 8006926:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8006928:	e022      	b.n	8006970 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800692a:	f001 fb15 	bl	8007f58 <xTaskGetTickCount>
 800692e:	4602      	mov	r2, r0
 8006930:	6a3b      	ldr	r3, [r7, #32]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8006936:	69ba      	ldr	r2, [r7, #24]
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	429a      	cmp	r2, r3
 800693c:	d902      	bls.n	8006944 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800693e:	2300      	movs	r3, #0
 8006940:	627b      	str	r3, [r7, #36]	; 0x24
 8006942:	e00e      	b.n	8006962 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8006944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	627b      	str	r3, [r7, #36]	; 0x24
 800694c:	e009      	b.n	8006962 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d103      	bne.n	800695c <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8006954:	f06f 0302 	mvn.w	r3, #2
 8006958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800695a:	e002      	b.n	8006962 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800695c:	f06f 0301 	mvn.w	r3, #1
 8006960:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1af      	bne.n	80068c8 <osThreadFlagsWait+0x50>
 8006968:	e002      	b.n	8006970 <osThreadFlagsWait+0xf8>
            break;
 800696a:	bf00      	nop
 800696c:	e000      	b.n	8006970 <osThreadFlagsWait+0xf8>
            break;
 800696e:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8006970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006972:	4618      	mov	r0, r3
 8006974:	3730      	adds	r7, #48	; 0x30
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800697a:	b580      	push	{r7, lr}
 800697c:	b08a      	sub	sp, #40	; 0x28
 800697e:	af02      	add	r7, sp, #8
 8006980:	60f8      	str	r0, [r7, #12]
 8006982:	60b9      	str	r1, [r7, #8]
 8006984:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006986:	2300      	movs	r3, #0
 8006988:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800698a:	f3ef 8305 	mrs	r3, IPSR
 800698e:	613b      	str	r3, [r7, #16]
  return(result);
 8006990:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006992:	2b00      	cmp	r3, #0
 8006994:	d15f      	bne.n	8006a56 <osMessageQueueNew+0xdc>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d05c      	beq.n	8006a56 <osMessageQueueNew+0xdc>
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d059      	beq.n	8006a56 <osMessageQueueNew+0xdc>
    mem = -1;
 80069a2:	f04f 33ff 	mov.w	r3, #4294967295
 80069a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d029      	beq.n	8006a02 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d012      	beq.n	80069dc <osMessageQueueNew+0x62>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	2b4f      	cmp	r3, #79	; 0x4f
 80069bc:	d90e      	bls.n	80069dc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	695a      	ldr	r2, [r3, #20]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	68b9      	ldr	r1, [r7, #8]
 80069ce:	fb01 f303 	mul.w	r3, r1, r3
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d302      	bcc.n	80069dc <osMessageQueueNew+0x62>
        mem = 1;
 80069d6:	2301      	movs	r3, #1
 80069d8:	61bb      	str	r3, [r7, #24]
 80069da:	e014      	b.n	8006a06 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d110      	bne.n	8006a06 <osMessageQueueNew+0x8c>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10c      	bne.n	8006a06 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d108      	bne.n	8006a06 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d104      	bne.n	8006a06 <osMessageQueueNew+0x8c>
          mem = 0;
 80069fc:	2300      	movs	r3, #0
 80069fe:	61bb      	str	r3, [r7, #24]
 8006a00:	e001      	b.n	8006a06 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006a02:	2300      	movs	r3, #0
 8006a04:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d10b      	bne.n	8006a24 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	691a      	ldr	r2, [r3, #16]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	2100      	movs	r1, #0
 8006a16:	9100      	str	r1, [sp, #0]
 8006a18:	68b9      	ldr	r1, [r7, #8]
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 fa86 	bl	8006f2c <xQueueGenericCreateStatic>
 8006a20:	61f8      	str	r0, [r7, #28]
 8006a22:	e008      	b.n	8006a36 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d105      	bne.n	8006a36 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	68b9      	ldr	r1, [r7, #8]
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f000 faf4 	bl	800701c <xQueueGenericCreate>
 8006a34:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00c      	beq.n	8006a56 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d003      	beq.n	8006a4a <osMessageQueueNew+0xd0>
        name = attr->name;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	617b      	str	r3, [r7, #20]
 8006a48:	e001      	b.n	8006a4e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006a4e:	6979      	ldr	r1, [r7, #20]
 8006a50:	69f8      	ldr	r0, [r7, #28]
 8006a52:	f000 ff6f 	bl	8007934 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006a56:	69fb      	ldr	r3, [r7, #28]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3720      	adds	r7, #32
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	603b      	str	r3, [r7, #0]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006a74:	2300      	movs	r3, #0
 8006a76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a78:	f3ef 8305 	mrs	r3, IPSR
 8006a7c:	617b      	str	r3, [r7, #20]
  return(result);
 8006a7e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d028      	beq.n	8006ad6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d005      	beq.n	8006a96 <osMessageQueuePut+0x36>
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d002      	beq.n	8006a96 <osMessageQueuePut+0x36>
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d003      	beq.n	8006a9e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006a96:	f06f 0303 	mvn.w	r3, #3
 8006a9a:	61fb      	str	r3, [r7, #28]
 8006a9c:	e038      	b.n	8006b10 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006aa2:	f107 0210 	add.w	r2, r7, #16
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	68b9      	ldr	r1, [r7, #8]
 8006aaa:	69b8      	ldr	r0, [r7, #24]
 8006aac:	f000 fc12 	bl	80072d4 <xQueueGenericSendFromISR>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d003      	beq.n	8006abe <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006ab6:	f06f 0302 	mvn.w	r3, #2
 8006aba:	61fb      	str	r3, [r7, #28]
 8006abc:	e028      	b.n	8006b10 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d025      	beq.n	8006b10 <osMessageQueuePut+0xb0>
 8006ac4:	4b15      	ldr	r3, [pc, #84]	; (8006b1c <osMessageQueuePut+0xbc>)
 8006ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aca:	601a      	str	r2, [r3, #0]
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	e01c      	b.n	8006b10 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d002      	beq.n	8006ae2 <osMessageQueuePut+0x82>
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d103      	bne.n	8006aea <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006ae2:	f06f 0303 	mvn.w	r3, #3
 8006ae6:	61fb      	str	r3, [r7, #28]
 8006ae8:	e012      	b.n	8006b10 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006aea:	2300      	movs	r3, #0
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	68b9      	ldr	r1, [r7, #8]
 8006af0:	69b8      	ldr	r0, [r7, #24]
 8006af2:	f000 faf1 	bl	80070d8 <xQueueGenericSend>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d009      	beq.n	8006b10 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006b02:	f06f 0301 	mvn.w	r3, #1
 8006b06:	61fb      	str	r3, [r7, #28]
 8006b08:	e002      	b.n	8006b10 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006b0a:	f06f 0302 	mvn.w	r3, #2
 8006b0e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006b10:	69fb      	ldr	r3, [r7, #28]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3720      	adds	r7, #32
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	e000ed04 	.word	0xe000ed04

08006b20 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b36:	f3ef 8305 	mrs	r3, IPSR
 8006b3a:	617b      	str	r3, [r7, #20]
  return(result);
 8006b3c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d028      	beq.n	8006b94 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d005      	beq.n	8006b54 <osMessageQueueGet+0x34>
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d002      	beq.n	8006b54 <osMessageQueueGet+0x34>
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006b54:	f06f 0303 	mvn.w	r3, #3
 8006b58:	61fb      	str	r3, [r7, #28]
 8006b5a:	e037      	b.n	8006bcc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006b60:	f107 0310 	add.w	r3, r7, #16
 8006b64:	461a      	mov	r2, r3
 8006b66:	68b9      	ldr	r1, [r7, #8]
 8006b68:	69b8      	ldr	r0, [r7, #24]
 8006b6a:	f000 fd2f 	bl	80075cc <xQueueReceiveFromISR>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d003      	beq.n	8006b7c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006b74:	f06f 0302 	mvn.w	r3, #2
 8006b78:	61fb      	str	r3, [r7, #28]
 8006b7a:	e027      	b.n	8006bcc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d024      	beq.n	8006bcc <osMessageQueueGet+0xac>
 8006b82:	4b15      	ldr	r3, [pc, #84]	; (8006bd8 <osMessageQueueGet+0xb8>)
 8006b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	e01b      	b.n	8006bcc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d002      	beq.n	8006ba0 <osMessageQueueGet+0x80>
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d103      	bne.n	8006ba8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006ba0:	f06f 0303 	mvn.w	r3, #3
 8006ba4:	61fb      	str	r3, [r7, #28]
 8006ba6:	e011      	b.n	8006bcc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	68b9      	ldr	r1, [r7, #8]
 8006bac:	69b8      	ldr	r0, [r7, #24]
 8006bae:	f000 fc2d 	bl	800740c <xQueueReceive>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d009      	beq.n	8006bcc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006bbe:	f06f 0301 	mvn.w	r3, #1
 8006bc2:	61fb      	str	r3, [r7, #28]
 8006bc4:	e002      	b.n	8006bcc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006bc6:	f06f 0302 	mvn.w	r3, #2
 8006bca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006bcc:	69fb      	ldr	r3, [r7, #28]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3720      	adds	r7, #32
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	e000ed04 	.word	0xe000ed04

08006bdc <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b08a      	sub	sp, #40	; 0x28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 8006be8:	6a3b      	ldr	r3, [r7, #32]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d102      	bne.n	8006bf4 <osMessageQueueGetSpace+0x18>
    space = 0U;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf2:	e023      	b.n	8006c3c <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bf4:	f3ef 8305 	mrs	r3, IPSR
 8006bf8:	61bb      	str	r3, [r7, #24]
  return(result);
 8006bfa:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d019      	beq.n	8006c34 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c00:	f3ef 8211 	mrs	r2, BASEPRI
 8006c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	613a      	str	r2, [r7, #16]
 8006c16:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c18:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 8006c1a:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 8006c1c:	6a3b      	ldr	r3, [r7, #32]
 8006c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c20:	6a3b      	ldr	r3, [r7, #32]
 8006c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	627b      	str	r3, [r7, #36]	; 0x24
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c32:	e003      	b.n	8006c3c <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 8006c34:	6a38      	ldr	r0, [r7, #32]
 8006c36:	f000 fd49 	bl	80076cc <uxQueueSpacesAvailable>
 8006c3a:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return (space);
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3728      	adds	r7, #40	; 0x28
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <osMessageQueueReset>:

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b086      	sub	sp, #24
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c52:	f3ef 8305 	mrs	r3, IPSR
 8006c56:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c58:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 8006c5e:	f06f 0305 	mvn.w	r3, #5
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	e00c      	b.n	8006c80 <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d103      	bne.n	8006c74 <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 8006c6c:	f06f 0303 	mvn.w	r3, #3
 8006c70:	617b      	str	r3, [r7, #20]
 8006c72:	e005      	b.n	8006c80 <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 8006c74:	2300      	movs	r3, #0
 8006c76:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 8006c78:	2100      	movs	r1, #0
 8006c7a:	6938      	ldr	r0, [r7, #16]
 8006c7c:	f000 f8ee 	bl	8006e5c <xQueueGenericReset>
  }

  return (stat);
 8006c80:	697b      	ldr	r3, [r7, #20]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3718      	adds	r7, #24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
	...

08006c8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4a07      	ldr	r2, [pc, #28]	; (8006cb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	4a06      	ldr	r2, [pc, #24]	; (8006cbc <vApplicationGetIdleTaskMemory+0x30>)
 8006ca2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2280      	movs	r2, #128	; 0x80
 8006ca8:	601a      	str	r2, [r3, #0]
}
 8006caa:	bf00      	nop
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	200008f0 	.word	0x200008f0
 8006cbc:	2000094c 	.word	0x2000094c

08006cc0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4a07      	ldr	r2, [pc, #28]	; (8006cec <vApplicationGetTimerTaskMemory+0x2c>)
 8006cd0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	4a06      	ldr	r2, [pc, #24]	; (8006cf0 <vApplicationGetTimerTaskMemory+0x30>)
 8006cd6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cde:	601a      	str	r2, [r3, #0]
}
 8006ce0:	bf00      	nop
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	20000b4c 	.word	0x20000b4c
 8006cf0:	20000ba8 	.word	0x20000ba8

08006cf4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f103 0208 	add.w	r2, r3, #8
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f04f 32ff 	mov.w	r2, #4294967295
 8006d0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f103 0208 	add.w	r2, r3, #8
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f103 0208 	add.w	r2, r3, #8
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d42:	bf00      	nop
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b085      	sub	sp, #20
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	689a      	ldr	r2, [r3, #8]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	601a      	str	r2, [r3, #0]
}
 8006d8a:	bf00      	nop
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d96:	b480      	push	{r7}
 8006d98:	b085      	sub	sp, #20
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dac:	d103      	bne.n	8006db6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	e00c      	b.n	8006dd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	3308      	adds	r3, #8
 8006dba:	60fb      	str	r3, [r7, #12]
 8006dbc:	e002      	b.n	8006dc4 <vListInsert+0x2e>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d2f6      	bcs.n	8006dbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	601a      	str	r2, [r3, #0]
}
 8006dfc:	bf00      	nop
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	6892      	ldr	r2, [r2, #8]
 8006e1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	6852      	ldr	r2, [r2, #4]
 8006e28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d103      	bne.n	8006e3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	1e5a      	subs	r2, r3, #1
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10a      	bne.n	8006e86 <xQueueGenericReset+0x2a>
	__asm volatile
 8006e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	60bb      	str	r3, [r7, #8]
}
 8006e82:	bf00      	nop
 8006e84:	e7fe      	b.n	8006e84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006e86:	f002 faf5 	bl	8009474 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e92:	68f9      	ldr	r1, [r7, #12]
 8006e94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e96:	fb01 f303 	mul.w	r3, r1, r3
 8006e9a:	441a      	add	r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	68f9      	ldr	r1, [r7, #12]
 8006eba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ebc:	fb01 f303 	mul.w	r3, r1, r3
 8006ec0:	441a      	add	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	22ff      	movs	r2, #255	; 0xff
 8006eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	22ff      	movs	r2, #255	; 0xff
 8006ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d114      	bne.n	8006f06 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d01a      	beq.n	8006f1a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	3310      	adds	r3, #16
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f001 f9bf 	bl	800826c <xTaskRemoveFromEventList>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d012      	beq.n	8006f1a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ef4:	4b0c      	ldr	r3, [pc, #48]	; (8006f28 <xQueueGenericReset+0xcc>)
 8006ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006efa:	601a      	str	r2, [r3, #0]
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	f3bf 8f6f 	isb	sy
 8006f04:	e009      	b.n	8006f1a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	3310      	adds	r3, #16
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7ff fef2 	bl	8006cf4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3324      	adds	r3, #36	; 0x24
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7ff feed 	bl	8006cf4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f1a:	f002 fadb 	bl	80094d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f1e:	2301      	movs	r3, #1
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	e000ed04 	.word	0xe000ed04

08006f2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b08e      	sub	sp, #56	; 0x38
 8006f30:	af02      	add	r7, sp, #8
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10a      	bne.n	8006f56 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f44:	f383 8811 	msr	BASEPRI, r3
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f52:	bf00      	nop
 8006f54:	e7fe      	b.n	8006f54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10a      	bne.n	8006f72 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f60:	f383 8811 	msr	BASEPRI, r3
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f6e:	bf00      	nop
 8006f70:	e7fe      	b.n	8006f70 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d002      	beq.n	8006f7e <xQueueGenericCreateStatic+0x52>
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <xQueueGenericCreateStatic+0x56>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e000      	b.n	8006f84 <xQueueGenericCreateStatic+0x58>
 8006f82:	2300      	movs	r3, #0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10a      	bne.n	8006f9e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	623b      	str	r3, [r7, #32]
}
 8006f9a:	bf00      	nop
 8006f9c:	e7fe      	b.n	8006f9c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d102      	bne.n	8006faa <xQueueGenericCreateStatic+0x7e>
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d101      	bne.n	8006fae <xQueueGenericCreateStatic+0x82>
 8006faa:	2301      	movs	r3, #1
 8006fac:	e000      	b.n	8006fb0 <xQueueGenericCreateStatic+0x84>
 8006fae:	2300      	movs	r3, #0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10a      	bne.n	8006fca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb8:	f383 8811 	msr	BASEPRI, r3
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	61fb      	str	r3, [r7, #28]
}
 8006fc6:	bf00      	nop
 8006fc8:	e7fe      	b.n	8006fc8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006fca:	2350      	movs	r3, #80	; 0x50
 8006fcc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	2b50      	cmp	r3, #80	; 0x50
 8006fd2:	d00a      	beq.n	8006fea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd8:	f383 8811 	msr	BASEPRI, r3
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	61bb      	str	r3, [r7, #24]
}
 8006fe6:	bf00      	nop
 8006fe8:	e7fe      	b.n	8006fe8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006fea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00d      	beq.n	8007012 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ffe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	4613      	mov	r3, r2
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	68b9      	ldr	r1, [r7, #8]
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 f83f 	bl	8007090 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007014:	4618      	mov	r0, r3
 8007016:	3730      	adds	r7, #48	; 0x30
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800701c:	b580      	push	{r7, lr}
 800701e:	b08a      	sub	sp, #40	; 0x28
 8007020:	af02      	add	r7, sp, #8
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	4613      	mov	r3, r2
 8007028:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10a      	bne.n	8007046 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	613b      	str	r3, [r7, #16]
}
 8007042:	bf00      	nop
 8007044:	e7fe      	b.n	8007044 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	fb02 f303 	mul.w	r3, r2, r3
 800704e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	3350      	adds	r3, #80	; 0x50
 8007054:	4618      	mov	r0, r3
 8007056:	f002 fb2f 	bl	80096b8 <pvPortMalloc>
 800705a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d011      	beq.n	8007086 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	3350      	adds	r3, #80	; 0x50
 800706a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007074:	79fa      	ldrb	r2, [r7, #7]
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	4613      	mov	r3, r2
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	68b9      	ldr	r1, [r7, #8]
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 f805 	bl	8007090 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007086:	69bb      	ldr	r3, [r7, #24]
	}
 8007088:	4618      	mov	r0, r3
 800708a:	3720      	adds	r7, #32
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
 800709c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d103      	bne.n	80070ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	69ba      	ldr	r2, [r7, #24]
 80070a8:	601a      	str	r2, [r3, #0]
 80070aa:	e002      	b.n	80070b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80070be:	2101      	movs	r1, #1
 80070c0:	69b8      	ldr	r0, [r7, #24]
 80070c2:	f7ff fecb 	bl	8006e5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	78fa      	ldrb	r2, [r7, #3]
 80070ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80070ce:	bf00      	nop
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
	...

080070d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b08e      	sub	sp, #56	; 0x38
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
 80070e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80070e6:	2300      	movs	r3, #0
 80070e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80070ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10a      	bne.n	800710a <xQueueGenericSend+0x32>
	__asm volatile
 80070f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007106:	bf00      	nop
 8007108:	e7fe      	b.n	8007108 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d103      	bne.n	8007118 <xQueueGenericSend+0x40>
 8007110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <xQueueGenericSend+0x44>
 8007118:	2301      	movs	r3, #1
 800711a:	e000      	b.n	800711e <xQueueGenericSend+0x46>
 800711c:	2300      	movs	r3, #0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10a      	bne.n	8007138 <xQueueGenericSend+0x60>
	__asm volatile
 8007122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007126:	f383 8811 	msr	BASEPRI, r3
 800712a:	f3bf 8f6f 	isb	sy
 800712e:	f3bf 8f4f 	dsb	sy
 8007132:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007134:	bf00      	nop
 8007136:	e7fe      	b.n	8007136 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	2b02      	cmp	r3, #2
 800713c:	d103      	bne.n	8007146 <xQueueGenericSend+0x6e>
 800713e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007142:	2b01      	cmp	r3, #1
 8007144:	d101      	bne.n	800714a <xQueueGenericSend+0x72>
 8007146:	2301      	movs	r3, #1
 8007148:	e000      	b.n	800714c <xQueueGenericSend+0x74>
 800714a:	2300      	movs	r3, #0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10a      	bne.n	8007166 <xQueueGenericSend+0x8e>
	__asm volatile
 8007150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	623b      	str	r3, [r7, #32]
}
 8007162:	bf00      	nop
 8007164:	e7fe      	b.n	8007164 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007166:	f001 fa3f 	bl	80085e8 <xTaskGetSchedulerState>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d102      	bne.n	8007176 <xQueueGenericSend+0x9e>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <xQueueGenericSend+0xa2>
 8007176:	2301      	movs	r3, #1
 8007178:	e000      	b.n	800717c <xQueueGenericSend+0xa4>
 800717a:	2300      	movs	r3, #0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10a      	bne.n	8007196 <xQueueGenericSend+0xbe>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	61fb      	str	r3, [r7, #28]
}
 8007192:	bf00      	nop
 8007194:	e7fe      	b.n	8007194 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007196:	f002 f96d 	bl	8009474 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d302      	bcc.n	80071ac <xQueueGenericSend+0xd4>
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d129      	bne.n	8007200 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	68b9      	ldr	r1, [r7, #8]
 80071b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071b2:	f000 faae 	bl	8007712 <prvCopyDataToQueue>
 80071b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d010      	beq.n	80071e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c2:	3324      	adds	r3, #36	; 0x24
 80071c4:	4618      	mov	r0, r3
 80071c6:	f001 f851 	bl	800826c <xTaskRemoveFromEventList>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d013      	beq.n	80071f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80071d0:	4b3f      	ldr	r3, [pc, #252]	; (80072d0 <xQueueGenericSend+0x1f8>)
 80071d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071d6:	601a      	str	r2, [r3, #0]
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	e00a      	b.n	80071f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80071e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d007      	beq.n	80071f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80071e8:	4b39      	ldr	r3, [pc, #228]	; (80072d0 <xQueueGenericSend+0x1f8>)
 80071ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80071f8:	f002 f96c 	bl	80094d4 <vPortExitCritical>
				return pdPASS;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e063      	b.n	80072c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d103      	bne.n	800720e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007206:	f002 f965 	bl	80094d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800720a:	2300      	movs	r3, #0
 800720c:	e05c      	b.n	80072c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800720e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007210:	2b00      	cmp	r3, #0
 8007212:	d106      	bne.n	8007222 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007214:	f107 0314 	add.w	r3, r7, #20
 8007218:	4618      	mov	r0, r3
 800721a:	f001 f88b 	bl	8008334 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800721e:	2301      	movs	r3, #1
 8007220:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007222:	f002 f957 	bl	80094d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007226:	f000 fdeb 	bl	8007e00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800722a:	f002 f923 	bl	8009474 <vPortEnterCritical>
 800722e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007230:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007234:	b25b      	sxtb	r3, r3
 8007236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723a:	d103      	bne.n	8007244 <xQueueGenericSend+0x16c>
 800723c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007246:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800724a:	b25b      	sxtb	r3, r3
 800724c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007250:	d103      	bne.n	800725a <xQueueGenericSend+0x182>
 8007252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800725a:	f002 f93b 	bl	80094d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800725e:	1d3a      	adds	r2, r7, #4
 8007260:	f107 0314 	add.w	r3, r7, #20
 8007264:	4611      	mov	r1, r2
 8007266:	4618      	mov	r0, r3
 8007268:	f001 f87a 	bl	8008360 <xTaskCheckForTimeOut>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d124      	bne.n	80072bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007272:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007274:	f000 fb45 	bl	8007902 <prvIsQueueFull>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d018      	beq.n	80072b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007280:	3310      	adds	r3, #16
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	4611      	mov	r1, r2
 8007286:	4618      	mov	r0, r3
 8007288:	f000 ffa0 	bl	80081cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800728c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800728e:	f000 fad0 	bl	8007832 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007292:	f000 fdc3 	bl	8007e1c <xTaskResumeAll>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	f47f af7c 	bne.w	8007196 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800729e:	4b0c      	ldr	r3, [pc, #48]	; (80072d0 <xQueueGenericSend+0x1f8>)
 80072a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	f3bf 8f4f 	dsb	sy
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	e772      	b.n	8007196 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80072b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072b2:	f000 fabe 	bl	8007832 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072b6:	f000 fdb1 	bl	8007e1c <xTaskResumeAll>
 80072ba:	e76c      	b.n	8007196 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80072bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072be:	f000 fab8 	bl	8007832 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072c2:	f000 fdab 	bl	8007e1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80072c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3738      	adds	r7, #56	; 0x38
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	e000ed04 	.word	0xe000ed04

080072d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b090      	sub	sp, #64	; 0x40
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
 80072e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80072e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10a      	bne.n	8007302 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80072ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80072fe:	bf00      	nop
 8007300:	e7fe      	b.n	8007300 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d103      	bne.n	8007310 <xQueueGenericSendFromISR+0x3c>
 8007308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730c:	2b00      	cmp	r3, #0
 800730e:	d101      	bne.n	8007314 <xQueueGenericSendFromISR+0x40>
 8007310:	2301      	movs	r3, #1
 8007312:	e000      	b.n	8007316 <xQueueGenericSendFromISR+0x42>
 8007314:	2300      	movs	r3, #0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10a      	bne.n	8007330 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800731a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731e:	f383 8811 	msr	BASEPRI, r3
 8007322:	f3bf 8f6f 	isb	sy
 8007326:	f3bf 8f4f 	dsb	sy
 800732a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800732c:	bf00      	nop
 800732e:	e7fe      	b.n	800732e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	2b02      	cmp	r3, #2
 8007334:	d103      	bne.n	800733e <xQueueGenericSendFromISR+0x6a>
 8007336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733a:	2b01      	cmp	r3, #1
 800733c:	d101      	bne.n	8007342 <xQueueGenericSendFromISR+0x6e>
 800733e:	2301      	movs	r3, #1
 8007340:	e000      	b.n	8007344 <xQueueGenericSendFromISR+0x70>
 8007342:	2300      	movs	r3, #0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10a      	bne.n	800735e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	623b      	str	r3, [r7, #32]
}
 800735a:	bf00      	nop
 800735c:	e7fe      	b.n	800735c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800735e:	f002 f96b 	bl	8009638 <vPortValidateInterruptPriority>
	__asm volatile
 8007362:	f3ef 8211 	mrs	r2, BASEPRI
 8007366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736a:	f383 8811 	msr	BASEPRI, r3
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	61fa      	str	r2, [r7, #28]
 8007378:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800737a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800737c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800737e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007386:	429a      	cmp	r2, r3
 8007388:	d302      	bcc.n	8007390 <xQueueGenericSendFromISR+0xbc>
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	2b02      	cmp	r3, #2
 800738e:	d12f      	bne.n	80073f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007392:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800739a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	68b9      	ldr	r1, [r7, #8]
 80073a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073a6:	f000 f9b4 	bl	8007712 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80073aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80073ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b2:	d112      	bne.n	80073da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d016      	beq.n	80073ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073be:	3324      	adds	r3, #36	; 0x24
 80073c0:	4618      	mov	r0, r3
 80073c2:	f000 ff53 	bl	800826c <xTaskRemoveFromEventList>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00e      	beq.n	80073ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00b      	beq.n	80073ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	e007      	b.n	80073ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80073da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80073de:	3301      	adds	r3, #1
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	b25a      	sxtb	r2, r3
 80073e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80073ea:	2301      	movs	r3, #1
 80073ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80073ee:	e001      	b.n	80073f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80073f0:	2300      	movs	r3, #0
 80073f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f6:	617b      	str	r3, [r7, #20]
	__asm volatile
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f383 8811 	msr	BASEPRI, r3
}
 80073fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007402:	4618      	mov	r0, r3
 8007404:	3740      	adds	r7, #64	; 0x40
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
	...

0800740c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b08c      	sub	sp, #48	; 0x30
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007418:	2300      	movs	r3, #0
 800741a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10a      	bne.n	800743c <xQueueReceive+0x30>
	__asm volatile
 8007426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	623b      	str	r3, [r7, #32]
}
 8007438:	bf00      	nop
 800743a:	e7fe      	b.n	800743a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d103      	bne.n	800744a <xQueueReceive+0x3e>
 8007442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007446:	2b00      	cmp	r3, #0
 8007448:	d101      	bne.n	800744e <xQueueReceive+0x42>
 800744a:	2301      	movs	r3, #1
 800744c:	e000      	b.n	8007450 <xQueueReceive+0x44>
 800744e:	2300      	movs	r3, #0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10a      	bne.n	800746a <xQueueReceive+0x5e>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	61fb      	str	r3, [r7, #28]
}
 8007466:	bf00      	nop
 8007468:	e7fe      	b.n	8007468 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800746a:	f001 f8bd 	bl	80085e8 <xTaskGetSchedulerState>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d102      	bne.n	800747a <xQueueReceive+0x6e>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <xQueueReceive+0x72>
 800747a:	2301      	movs	r3, #1
 800747c:	e000      	b.n	8007480 <xQueueReceive+0x74>
 800747e:	2300      	movs	r3, #0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10a      	bne.n	800749a <xQueueReceive+0x8e>
	__asm volatile
 8007484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	61bb      	str	r3, [r7, #24]
}
 8007496:	bf00      	nop
 8007498:	e7fe      	b.n	8007498 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800749a:	f001 ffeb 	bl	8009474 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800749e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d01f      	beq.n	80074ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80074aa:	68b9      	ldr	r1, [r7, #8]
 80074ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074ae:	f000 f99a 	bl	80077e6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	1e5a      	subs	r2, r3, #1
 80074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00f      	beq.n	80074e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c4:	3310      	adds	r3, #16
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fed0 	bl	800826c <xTaskRemoveFromEventList>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d007      	beq.n	80074e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80074d2:	4b3d      	ldr	r3, [pc, #244]	; (80075c8 <xQueueReceive+0x1bc>)
 80074d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074d8:	601a      	str	r2, [r3, #0]
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80074e2:	f001 fff7 	bl	80094d4 <vPortExitCritical>
				return pdPASS;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e069      	b.n	80075be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d103      	bne.n	80074f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074f0:	f001 fff0 	bl	80094d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80074f4:	2300      	movs	r3, #0
 80074f6:	e062      	b.n	80075be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d106      	bne.n	800750c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074fe:	f107 0310 	add.w	r3, r7, #16
 8007502:	4618      	mov	r0, r3
 8007504:	f000 ff16 	bl	8008334 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007508:	2301      	movs	r3, #1
 800750a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800750c:	f001 ffe2 	bl	80094d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007510:	f000 fc76 	bl	8007e00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007514:	f001 ffae 	bl	8009474 <vPortEnterCritical>
 8007518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800751e:	b25b      	sxtb	r3, r3
 8007520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007524:	d103      	bne.n	800752e <xQueueReceive+0x122>
 8007526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007528:	2200      	movs	r2, #0
 800752a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800752e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007530:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007534:	b25b      	sxtb	r3, r3
 8007536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753a:	d103      	bne.n	8007544 <xQueueReceive+0x138>
 800753c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753e:	2200      	movs	r2, #0
 8007540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007544:	f001 ffc6 	bl	80094d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007548:	1d3a      	adds	r2, r7, #4
 800754a:	f107 0310 	add.w	r3, r7, #16
 800754e:	4611      	mov	r1, r2
 8007550:	4618      	mov	r0, r3
 8007552:	f000 ff05 	bl	8008360 <xTaskCheckForTimeOut>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d123      	bne.n	80075a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800755c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800755e:	f000 f9ba 	bl	80078d6 <prvIsQueueEmpty>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d017      	beq.n	8007598 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756a:	3324      	adds	r3, #36	; 0x24
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	4611      	mov	r1, r2
 8007570:	4618      	mov	r0, r3
 8007572:	f000 fe2b 	bl	80081cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007578:	f000 f95b 	bl	8007832 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800757c:	f000 fc4e 	bl	8007e1c <xTaskResumeAll>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d189      	bne.n	800749a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007586:	4b10      	ldr	r3, [pc, #64]	; (80075c8 <xQueueReceive+0x1bc>)
 8007588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	e780      	b.n	800749a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800759a:	f000 f94a 	bl	8007832 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800759e:	f000 fc3d 	bl	8007e1c <xTaskResumeAll>
 80075a2:	e77a      	b.n	800749a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80075a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075a6:	f000 f944 	bl	8007832 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075aa:	f000 fc37 	bl	8007e1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075b0:	f000 f991 	bl	80078d6 <prvIsQueueEmpty>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f43f af6f 	beq.w	800749a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80075bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3730      	adds	r7, #48	; 0x30
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	e000ed04 	.word	0xe000ed04

080075cc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b08e      	sub	sp, #56	; 0x38
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80075dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10a      	bne.n	80075f8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80075e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	623b      	str	r3, [r7, #32]
}
 80075f4:	bf00      	nop
 80075f6:	e7fe      	b.n	80075f6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d103      	bne.n	8007606 <xQueueReceiveFromISR+0x3a>
 80075fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007602:	2b00      	cmp	r3, #0
 8007604:	d101      	bne.n	800760a <xQueueReceiveFromISR+0x3e>
 8007606:	2301      	movs	r3, #1
 8007608:	e000      	b.n	800760c <xQueueReceiveFromISR+0x40>
 800760a:	2300      	movs	r3, #0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10a      	bne.n	8007626 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007614:	f383 8811 	msr	BASEPRI, r3
 8007618:	f3bf 8f6f 	isb	sy
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	61fb      	str	r3, [r7, #28]
}
 8007622:	bf00      	nop
 8007624:	e7fe      	b.n	8007624 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007626:	f002 f807 	bl	8009638 <vPortValidateInterruptPriority>
	__asm volatile
 800762a:	f3ef 8211 	mrs	r2, BASEPRI
 800762e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	61ba      	str	r2, [r7, #24]
 8007640:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007642:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007644:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800764c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764e:	2b00      	cmp	r3, #0
 8007650:	d02f      	beq.n	80076b2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007654:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800765c:	68b9      	ldr	r1, [r7, #8]
 800765e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007660:	f000 f8c1 	bl	80077e6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007666:	1e5a      	subs	r2, r3, #1
 8007668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800766c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007674:	d112      	bne.n	800769c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d016      	beq.n	80076ac <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	3310      	adds	r3, #16
 8007682:	4618      	mov	r0, r3
 8007684:	f000 fdf2 	bl	800826c <xTaskRemoveFromEventList>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00e      	beq.n	80076ac <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00b      	beq.n	80076ac <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	601a      	str	r2, [r3, #0]
 800769a:	e007      	b.n	80076ac <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800769c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076a0:	3301      	adds	r3, #1
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	b25a      	sxtb	r2, r3
 80076a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80076ac:	2301      	movs	r3, #1
 80076ae:	637b      	str	r3, [r7, #52]	; 0x34
 80076b0:	e001      	b.n	80076b6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80076b2:	2300      	movs	r3, #0
 80076b4:	637b      	str	r3, [r7, #52]	; 0x34
 80076b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f383 8811 	msr	BASEPRI, r3
}
 80076c0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80076c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3738      	adds	r7, #56	; 0x38
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10a      	bne.n	80076f4 <uxQueueSpacesAvailable+0x28>
	__asm volatile
 80076de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	60fb      	str	r3, [r7, #12]
}
 80076f0:	bf00      	nop
 80076f2:	e7fe      	b.n	80076f2 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 80076f4:	f001 febe 	bl	8009474 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007704:	f001 fee6 	bl	80094d4 <vPortExitCritical>

	return uxReturn;
 8007708:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800770a:	4618      	mov	r0, r3
 800770c:	3718      	adds	r7, #24
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b086      	sub	sp, #24
 8007716:	af00      	add	r7, sp, #0
 8007718:	60f8      	str	r0, [r7, #12]
 800771a:	60b9      	str	r1, [r7, #8]
 800771c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800771e:	2300      	movs	r3, #0
 8007720:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007726:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10d      	bne.n	800774c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d14d      	bne.n	80077d4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	4618      	mov	r0, r3
 800773e:	f000 ff71 	bl	8008624 <xTaskPriorityDisinherit>
 8007742:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	609a      	str	r2, [r3, #8]
 800774a:	e043      	b.n	80077d4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d119      	bne.n	8007786 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6858      	ldr	r0, [r3, #4]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775a:	461a      	mov	r2, r3
 800775c:	68b9      	ldr	r1, [r7, #8]
 800775e:	f002 f9bf 	bl	8009ae0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	685a      	ldr	r2, [r3, #4]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776a:	441a      	add	r2, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	429a      	cmp	r2, r3
 800777a:	d32b      	bcc.n	80077d4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	605a      	str	r2, [r3, #4]
 8007784:	e026      	b.n	80077d4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	68d8      	ldr	r0, [r3, #12]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778e:	461a      	mov	r2, r3
 8007790:	68b9      	ldr	r1, [r7, #8]
 8007792:	f002 f9a5 	bl	8009ae0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	68da      	ldr	r2, [r3, #12]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779e:	425b      	negs	r3, r3
 80077a0:	441a      	add	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	68da      	ldr	r2, [r3, #12]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d207      	bcs.n	80077c2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	689a      	ldr	r2, [r3, #8]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	425b      	negs	r3, r3
 80077bc:	441a      	add	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d105      	bne.n	80077d4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	3b01      	subs	r3, #1
 80077d2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	1c5a      	adds	r2, r3, #1
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80077dc:	697b      	ldr	r3, [r7, #20]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b082      	sub	sp, #8
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d018      	beq.n	800782a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68da      	ldr	r2, [r3, #12]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007800:	441a      	add	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	68da      	ldr	r2, [r3, #12]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	429a      	cmp	r2, r3
 8007810:	d303      	bcc.n	800781a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68d9      	ldr	r1, [r3, #12]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007822:	461a      	mov	r2, r3
 8007824:	6838      	ldr	r0, [r7, #0]
 8007826:	f002 f95b 	bl	8009ae0 <memcpy>
	}
}
 800782a:	bf00      	nop
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800783a:	f001 fe1b 	bl	8009474 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007844:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007846:	e011      	b.n	800786c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784c:	2b00      	cmp	r3, #0
 800784e:	d012      	beq.n	8007876 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	3324      	adds	r3, #36	; 0x24
 8007854:	4618      	mov	r0, r3
 8007856:	f000 fd09 	bl	800826c <xTaskRemoveFromEventList>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d001      	beq.n	8007864 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007860:	f000 fde0 	bl	8008424 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007864:	7bfb      	ldrb	r3, [r7, #15]
 8007866:	3b01      	subs	r3, #1
 8007868:	b2db      	uxtb	r3, r3
 800786a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800786c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007870:	2b00      	cmp	r3, #0
 8007872:	dce9      	bgt.n	8007848 <prvUnlockQueue+0x16>
 8007874:	e000      	b.n	8007878 <prvUnlockQueue+0x46>
					break;
 8007876:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	22ff      	movs	r2, #255	; 0xff
 800787c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007880:	f001 fe28 	bl	80094d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007884:	f001 fdf6 	bl	8009474 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800788e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007890:	e011      	b.n	80078b6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d012      	beq.n	80078c0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	3310      	adds	r3, #16
 800789e:	4618      	mov	r0, r3
 80078a0:	f000 fce4 	bl	800826c <xTaskRemoveFromEventList>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80078aa:	f000 fdbb 	bl	8008424 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	3b01      	subs	r3, #1
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	dce9      	bgt.n	8007892 <prvUnlockQueue+0x60>
 80078be:	e000      	b.n	80078c2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80078c0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	22ff      	movs	r2, #255	; 0xff
 80078c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80078ca:	f001 fe03 	bl	80094d4 <vPortExitCritical>
}
 80078ce:	bf00      	nop
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b084      	sub	sp, #16
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078de:	f001 fdc9 	bl	8009474 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d102      	bne.n	80078f0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80078ea:	2301      	movs	r3, #1
 80078ec:	60fb      	str	r3, [r7, #12]
 80078ee:	e001      	b.n	80078f4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80078f0:	2300      	movs	r3, #0
 80078f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078f4:	f001 fdee 	bl	80094d4 <vPortExitCritical>

	return xReturn;
 80078f8:	68fb      	ldr	r3, [r7, #12]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b084      	sub	sp, #16
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800790a:	f001 fdb3 	bl	8009474 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007916:	429a      	cmp	r2, r3
 8007918:	d102      	bne.n	8007920 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800791a:	2301      	movs	r3, #1
 800791c:	60fb      	str	r3, [r7, #12]
 800791e:	e001      	b.n	8007924 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007920:	2300      	movs	r3, #0
 8007922:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007924:	f001 fdd6 	bl	80094d4 <vPortExitCritical>

	return xReturn;
 8007928:	68fb      	ldr	r3, [r7, #12]
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
	...

08007934 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800793e:	2300      	movs	r3, #0
 8007940:	60fb      	str	r3, [r7, #12]
 8007942:	e014      	b.n	800796e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007944:	4a0f      	ldr	r2, [pc, #60]	; (8007984 <vQueueAddToRegistry+0x50>)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d10b      	bne.n	8007968 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007950:	490c      	ldr	r1, [pc, #48]	; (8007984 <vQueueAddToRegistry+0x50>)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	683a      	ldr	r2, [r7, #0]
 8007956:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800795a:	4a0a      	ldr	r2, [pc, #40]	; (8007984 <vQueueAddToRegistry+0x50>)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	00db      	lsls	r3, r3, #3
 8007960:	4413      	add	r3, r2
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007966:	e006      	b.n	8007976 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	3301      	adds	r3, #1
 800796c:	60fb      	str	r3, [r7, #12]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2b07      	cmp	r3, #7
 8007972:	d9e7      	bls.n	8007944 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007974:	bf00      	nop
 8007976:	bf00      	nop
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	20000fa8 	.word	0x20000fa8

08007988 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007998:	f001 fd6c 	bl	8009474 <vPortEnterCritical>
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079a2:	b25b      	sxtb	r3, r3
 80079a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a8:	d103      	bne.n	80079b2 <vQueueWaitForMessageRestricted+0x2a>
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079b8:	b25b      	sxtb	r3, r3
 80079ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079be:	d103      	bne.n	80079c8 <vQueueWaitForMessageRestricted+0x40>
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079c8:	f001 fd84 	bl	80094d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d106      	bne.n	80079e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	3324      	adds	r3, #36	; 0x24
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	68b9      	ldr	r1, [r7, #8]
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 fc19 	bl	8008214 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80079e2:	6978      	ldr	r0, [r7, #20]
 80079e4:	f7ff ff25 	bl	8007832 <prvUnlockQueue>
	}
 80079e8:	bf00      	nop
 80079ea:	3718      	adds	r7, #24
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b08e      	sub	sp, #56	; 0x38
 80079f4:	af04      	add	r7, sp, #16
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
 80079fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80079fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10a      	bne.n	8007a1a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a08:	f383 8811 	msr	BASEPRI, r3
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	623b      	str	r3, [r7, #32]
}
 8007a16:	bf00      	nop
 8007a18:	e7fe      	b.n	8007a18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10a      	bne.n	8007a36 <xTaskCreateStatic+0x46>
	__asm volatile
 8007a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a24:	f383 8811 	msr	BASEPRI, r3
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	61fb      	str	r3, [r7, #28]
}
 8007a32:	bf00      	nop
 8007a34:	e7fe      	b.n	8007a34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007a36:	235c      	movs	r3, #92	; 0x5c
 8007a38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	2b5c      	cmp	r3, #92	; 0x5c
 8007a3e:	d00a      	beq.n	8007a56 <xTaskCreateStatic+0x66>
	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	61bb      	str	r3, [r7, #24]
}
 8007a52:	bf00      	nop
 8007a54:	e7fe      	b.n	8007a54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007a56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d01e      	beq.n	8007a9c <xTaskCreateStatic+0xac>
 8007a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d01b      	beq.n	8007a9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	2202      	movs	r2, #2
 8007a72:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007a76:	2300      	movs	r3, #0
 8007a78:	9303      	str	r3, [sp, #12]
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	9302      	str	r3, [sp, #8]
 8007a7e:	f107 0314 	add.w	r3, r7, #20
 8007a82:	9301      	str	r3, [sp, #4]
 8007a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	68b9      	ldr	r1, [r7, #8]
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f000 f850 	bl	8007b34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a96:	f000 f8dd 	bl	8007c54 <prvAddNewTaskToReadyList>
 8007a9a:	e001      	b.n	8007aa0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007aa0:	697b      	ldr	r3, [r7, #20]
	}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3728      	adds	r7, #40	; 0x28
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b08c      	sub	sp, #48	; 0x30
 8007aae:	af04      	add	r7, sp, #16
 8007ab0:	60f8      	str	r0, [r7, #12]
 8007ab2:	60b9      	str	r1, [r7, #8]
 8007ab4:	603b      	str	r3, [r7, #0]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007aba:	88fb      	ldrh	r3, [r7, #6]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f001 fdfa 	bl	80096b8 <pvPortMalloc>
 8007ac4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00e      	beq.n	8007aea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007acc:	205c      	movs	r0, #92	; 0x5c
 8007ace:	f001 fdf3 	bl	80096b8 <pvPortMalloc>
 8007ad2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	631a      	str	r2, [r3, #48]	; 0x30
 8007ae0:	e005      	b.n	8007aee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ae2:	6978      	ldr	r0, [r7, #20]
 8007ae4:	f001 feb4 	bl	8009850 <vPortFree>
 8007ae8:	e001      	b.n	8007aee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007aea:	2300      	movs	r3, #0
 8007aec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d017      	beq.n	8007b24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007afc:	88fa      	ldrh	r2, [r7, #6]
 8007afe:	2300      	movs	r3, #0
 8007b00:	9303      	str	r3, [sp, #12]
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	9302      	str	r3, [sp, #8]
 8007b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b08:	9301      	str	r3, [sp, #4]
 8007b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	68b9      	ldr	r1, [r7, #8]
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f000 f80e 	bl	8007b34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b18:	69f8      	ldr	r0, [r7, #28]
 8007b1a:	f000 f89b 	bl	8007c54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	61bb      	str	r3, [r7, #24]
 8007b22:	e002      	b.n	8007b2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b24:	f04f 33ff 	mov.w	r3, #4294967295
 8007b28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b2a:	69bb      	ldr	r3, [r7, #24]
	}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3720      	adds	r7, #32
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b088      	sub	sp, #32
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
 8007b40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	21a5      	movs	r1, #165	; 0xa5
 8007b4e:	f001 ffd5 	bl	8009afc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	4413      	add	r3, r2
 8007b62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	f023 0307 	bic.w	r3, r3, #7
 8007b6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	f003 0307 	and.w	r3, r3, #7
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00a      	beq.n	8007b8c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	617b      	str	r3, [r7, #20]
}
 8007b88:	bf00      	nop
 8007b8a:	e7fe      	b.n	8007b8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d01f      	beq.n	8007bd2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b92:	2300      	movs	r3, #0
 8007b94:	61fb      	str	r3, [r7, #28]
 8007b96:	e012      	b.n	8007bbe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b98:	68ba      	ldr	r2, [r7, #8]
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	7819      	ldrb	r1, [r3, #0]
 8007ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	3334      	adds	r3, #52	; 0x34
 8007ba8:	460a      	mov	r2, r1
 8007baa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d006      	beq.n	8007bc6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	61fb      	str	r3, [r7, #28]
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	2b0f      	cmp	r3, #15
 8007bc2:	d9e9      	bls.n	8007b98 <prvInitialiseNewTask+0x64>
 8007bc4:	e000      	b.n	8007bc8 <prvInitialiseNewTask+0x94>
			{
				break;
 8007bc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bd0:	e003      	b.n	8007bda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bdc:	2b37      	cmp	r3, #55	; 0x37
 8007bde:	d901      	bls.n	8007be4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007be0:	2337      	movs	r3, #55	; 0x37
 8007be2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007be8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf8:	3304      	adds	r3, #4
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7ff f89a 	bl	8006d34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c02:	3318      	adds	r3, #24
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7ff f895 	bl	8006d34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c22:	2200      	movs	r2, #0
 8007c24:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007c2e:	683a      	ldr	r2, [r7, #0]
 8007c30:	68f9      	ldr	r1, [r7, #12]
 8007c32:	69b8      	ldr	r0, [r7, #24]
 8007c34:	f001 faf4 	bl	8009220 <pxPortInitialiseStack>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d002      	beq.n	8007c4a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c4a:	bf00      	nop
 8007c4c:	3720      	adds	r7, #32
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
	...

08007c54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c5c:	f001 fc0a 	bl	8009474 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c60:	4b2d      	ldr	r3, [pc, #180]	; (8007d18 <prvAddNewTaskToReadyList+0xc4>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	3301      	adds	r3, #1
 8007c66:	4a2c      	ldr	r2, [pc, #176]	; (8007d18 <prvAddNewTaskToReadyList+0xc4>)
 8007c68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c6a:	4b2c      	ldr	r3, [pc, #176]	; (8007d1c <prvAddNewTaskToReadyList+0xc8>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d109      	bne.n	8007c86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c72:	4a2a      	ldr	r2, [pc, #168]	; (8007d1c <prvAddNewTaskToReadyList+0xc8>)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c78:	4b27      	ldr	r3, [pc, #156]	; (8007d18 <prvAddNewTaskToReadyList+0xc4>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d110      	bne.n	8007ca2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c80:	f000 fbf4 	bl	800846c <prvInitialiseTaskLists>
 8007c84:	e00d      	b.n	8007ca2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c86:	4b26      	ldr	r3, [pc, #152]	; (8007d20 <prvAddNewTaskToReadyList+0xcc>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d109      	bne.n	8007ca2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c8e:	4b23      	ldr	r3, [pc, #140]	; (8007d1c <prvAddNewTaskToReadyList+0xc8>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d802      	bhi.n	8007ca2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c9c:	4a1f      	ldr	r2, [pc, #124]	; (8007d1c <prvAddNewTaskToReadyList+0xc8>)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007ca2:	4b20      	ldr	r3, [pc, #128]	; (8007d24 <prvAddNewTaskToReadyList+0xd0>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	4a1e      	ldr	r2, [pc, #120]	; (8007d24 <prvAddNewTaskToReadyList+0xd0>)
 8007caa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007cac:	4b1d      	ldr	r3, [pc, #116]	; (8007d24 <prvAddNewTaskToReadyList+0xd0>)
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb8:	4b1b      	ldr	r3, [pc, #108]	; (8007d28 <prvAddNewTaskToReadyList+0xd4>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d903      	bls.n	8007cc8 <prvAddNewTaskToReadyList+0x74>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc4:	4a18      	ldr	r2, [pc, #96]	; (8007d28 <prvAddNewTaskToReadyList+0xd4>)
 8007cc6:	6013      	str	r3, [r2, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ccc:	4613      	mov	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4a15      	ldr	r2, [pc, #84]	; (8007d2c <prvAddNewTaskToReadyList+0xd8>)
 8007cd6:	441a      	add	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	3304      	adds	r3, #4
 8007cdc:	4619      	mov	r1, r3
 8007cde:	4610      	mov	r0, r2
 8007ce0:	f7ff f835 	bl	8006d4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ce4:	f001 fbf6 	bl	80094d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ce8:	4b0d      	ldr	r3, [pc, #52]	; (8007d20 <prvAddNewTaskToReadyList+0xcc>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00e      	beq.n	8007d0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007cf0:	4b0a      	ldr	r3, [pc, #40]	; (8007d1c <prvAddNewTaskToReadyList+0xc8>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d207      	bcs.n	8007d0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007cfe:	4b0c      	ldr	r3, [pc, #48]	; (8007d30 <prvAddNewTaskToReadyList+0xdc>)
 8007d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d0e:	bf00      	nop
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	200014bc 	.word	0x200014bc
 8007d1c:	20000fe8 	.word	0x20000fe8
 8007d20:	200014c8 	.word	0x200014c8
 8007d24:	200014d8 	.word	0x200014d8
 8007d28:	200014c4 	.word	0x200014c4
 8007d2c:	20000fec 	.word	0x20000fec
 8007d30:	e000ed04 	.word	0xe000ed04

08007d34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b08a      	sub	sp, #40	; 0x28
 8007d38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d42:	463a      	mov	r2, r7
 8007d44:	1d39      	adds	r1, r7, #4
 8007d46:	f107 0308 	add.w	r3, r7, #8
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fe ff9e 	bl	8006c8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	68ba      	ldr	r2, [r7, #8]
 8007d56:	9202      	str	r2, [sp, #8]
 8007d58:	9301      	str	r3, [sp, #4]
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	2300      	movs	r3, #0
 8007d60:	460a      	mov	r2, r1
 8007d62:	4921      	ldr	r1, [pc, #132]	; (8007de8 <vTaskStartScheduler+0xb4>)
 8007d64:	4821      	ldr	r0, [pc, #132]	; (8007dec <vTaskStartScheduler+0xb8>)
 8007d66:	f7ff fe43 	bl	80079f0 <xTaskCreateStatic>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	4a20      	ldr	r2, [pc, #128]	; (8007df0 <vTaskStartScheduler+0xbc>)
 8007d6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d70:	4b1f      	ldr	r3, [pc, #124]	; (8007df0 <vTaskStartScheduler+0xbc>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d002      	beq.n	8007d7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	617b      	str	r3, [r7, #20]
 8007d7c:	e001      	b.n	8007d82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d102      	bne.n	8007d8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007d88:	f000 fefc 	bl	8008b84 <xTimerCreateTimerTask>
 8007d8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d116      	bne.n	8007dc2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d98:	f383 8811 	msr	BASEPRI, r3
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	613b      	str	r3, [r7, #16]
}
 8007da6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007da8:	4b12      	ldr	r3, [pc, #72]	; (8007df4 <vTaskStartScheduler+0xc0>)
 8007daa:	f04f 32ff 	mov.w	r2, #4294967295
 8007dae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007db0:	4b11      	ldr	r3, [pc, #68]	; (8007df8 <vTaskStartScheduler+0xc4>)
 8007db2:	2201      	movs	r2, #1
 8007db4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007db6:	4b11      	ldr	r3, [pc, #68]	; (8007dfc <vTaskStartScheduler+0xc8>)
 8007db8:	2200      	movs	r2, #0
 8007dba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007dbc:	f001 fab8 	bl	8009330 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007dc0:	e00e      	b.n	8007de0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc8:	d10a      	bne.n	8007de0 <vTaskStartScheduler+0xac>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	60fb      	str	r3, [r7, #12]
}
 8007ddc:	bf00      	nop
 8007dde:	e7fe      	b.n	8007dde <vTaskStartScheduler+0xaa>
}
 8007de0:	bf00      	nop
 8007de2:	3718      	adds	r7, #24
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	0800ac20 	.word	0x0800ac20
 8007dec:	0800843d 	.word	0x0800843d
 8007df0:	200014e0 	.word	0x200014e0
 8007df4:	200014dc 	.word	0x200014dc
 8007df8:	200014c8 	.word	0x200014c8
 8007dfc:	200014c0 	.word	0x200014c0

08007e00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e00:	b480      	push	{r7}
 8007e02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007e04:	4b04      	ldr	r3, [pc, #16]	; (8007e18 <vTaskSuspendAll+0x18>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	4a03      	ldr	r2, [pc, #12]	; (8007e18 <vTaskSuspendAll+0x18>)
 8007e0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007e0e:	bf00      	nop
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	200014e4 	.word	0x200014e4

08007e1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e22:	2300      	movs	r3, #0
 8007e24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e26:	2300      	movs	r3, #0
 8007e28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e2a:	4b42      	ldr	r3, [pc, #264]	; (8007f34 <xTaskResumeAll+0x118>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10a      	bne.n	8007e48 <xTaskResumeAll+0x2c>
	__asm volatile
 8007e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e36:	f383 8811 	msr	BASEPRI, r3
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	603b      	str	r3, [r7, #0]
}
 8007e44:	bf00      	nop
 8007e46:	e7fe      	b.n	8007e46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e48:	f001 fb14 	bl	8009474 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e4c:	4b39      	ldr	r3, [pc, #228]	; (8007f34 <xTaskResumeAll+0x118>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	3b01      	subs	r3, #1
 8007e52:	4a38      	ldr	r2, [pc, #224]	; (8007f34 <xTaskResumeAll+0x118>)
 8007e54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e56:	4b37      	ldr	r3, [pc, #220]	; (8007f34 <xTaskResumeAll+0x118>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d162      	bne.n	8007f24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e5e:	4b36      	ldr	r3, [pc, #216]	; (8007f38 <xTaskResumeAll+0x11c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d05e      	beq.n	8007f24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e66:	e02f      	b.n	8007ec8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e68:	4b34      	ldr	r3, [pc, #208]	; (8007f3c <xTaskResumeAll+0x120>)
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	3318      	adds	r3, #24
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7fe ffc7 	bl	8006e08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fe ffc2 	bl	8006e08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e88:	4b2d      	ldr	r3, [pc, #180]	; (8007f40 <xTaskResumeAll+0x124>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d903      	bls.n	8007e98 <xTaskResumeAll+0x7c>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e94:	4a2a      	ldr	r2, [pc, #168]	; (8007f40 <xTaskResumeAll+0x124>)
 8007e96:	6013      	str	r3, [r2, #0]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4a27      	ldr	r2, [pc, #156]	; (8007f44 <xTaskResumeAll+0x128>)
 8007ea6:	441a      	add	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3304      	adds	r3, #4
 8007eac:	4619      	mov	r1, r3
 8007eae:	4610      	mov	r0, r2
 8007eb0:	f7fe ff4d 	bl	8006d4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb8:	4b23      	ldr	r3, [pc, #140]	; (8007f48 <xTaskResumeAll+0x12c>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d302      	bcc.n	8007ec8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007ec2:	4b22      	ldr	r3, [pc, #136]	; (8007f4c <xTaskResumeAll+0x130>)
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ec8:	4b1c      	ldr	r3, [pc, #112]	; (8007f3c <xTaskResumeAll+0x120>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1cb      	bne.n	8007e68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d001      	beq.n	8007eda <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007ed6:	f000 fb67 	bl	80085a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007eda:	4b1d      	ldr	r3, [pc, #116]	; (8007f50 <xTaskResumeAll+0x134>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d010      	beq.n	8007f08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ee6:	f000 f859 	bl	8007f9c <xTaskIncrementTick>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d002      	beq.n	8007ef6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007ef0:	4b16      	ldr	r3, [pc, #88]	; (8007f4c <xTaskResumeAll+0x130>)
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1f1      	bne.n	8007ee6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007f02:	4b13      	ldr	r3, [pc, #76]	; (8007f50 <xTaskResumeAll+0x134>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f08:	4b10      	ldr	r3, [pc, #64]	; (8007f4c <xTaskResumeAll+0x130>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d009      	beq.n	8007f24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f10:	2301      	movs	r3, #1
 8007f12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f14:	4b0f      	ldr	r3, [pc, #60]	; (8007f54 <xTaskResumeAll+0x138>)
 8007f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f1a:	601a      	str	r2, [r3, #0]
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f24:	f001 fad6 	bl	80094d4 <vPortExitCritical>

	return xAlreadyYielded;
 8007f28:	68bb      	ldr	r3, [r7, #8]
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	200014e4 	.word	0x200014e4
 8007f38:	200014bc 	.word	0x200014bc
 8007f3c:	2000147c 	.word	0x2000147c
 8007f40:	200014c4 	.word	0x200014c4
 8007f44:	20000fec 	.word	0x20000fec
 8007f48:	20000fe8 	.word	0x20000fe8
 8007f4c:	200014d0 	.word	0x200014d0
 8007f50:	200014cc 	.word	0x200014cc
 8007f54:	e000ed04 	.word	0xe000ed04

08007f58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007f5e:	4b05      	ldr	r3, [pc, #20]	; (8007f74 <xTaskGetTickCount+0x1c>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007f64:	687b      	ldr	r3, [r7, #4]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	200014c0 	.word	0x200014c0

08007f78 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f7e:	f001 fb5b 	bl	8009638 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007f82:	2300      	movs	r3, #0
 8007f84:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007f86:	4b04      	ldr	r3, [pc, #16]	; (8007f98 <xTaskGetTickCountFromISR+0x20>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f8c:	683b      	ldr	r3, [r7, #0]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	200014c0 	.word	0x200014c0

08007f9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fa6:	4b4f      	ldr	r3, [pc, #316]	; (80080e4 <xTaskIncrementTick+0x148>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f040 808f 	bne.w	80080ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007fb0:	4b4d      	ldr	r3, [pc, #308]	; (80080e8 <xTaskIncrementTick+0x14c>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007fb8:	4a4b      	ldr	r2, [pc, #300]	; (80080e8 <xTaskIncrementTick+0x14c>)
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d120      	bne.n	8008006 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007fc4:	4b49      	ldr	r3, [pc, #292]	; (80080ec <xTaskIncrementTick+0x150>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00a      	beq.n	8007fe4 <xTaskIncrementTick+0x48>
	__asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	603b      	str	r3, [r7, #0]
}
 8007fe0:	bf00      	nop
 8007fe2:	e7fe      	b.n	8007fe2 <xTaskIncrementTick+0x46>
 8007fe4:	4b41      	ldr	r3, [pc, #260]	; (80080ec <xTaskIncrementTick+0x150>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	60fb      	str	r3, [r7, #12]
 8007fea:	4b41      	ldr	r3, [pc, #260]	; (80080f0 <xTaskIncrementTick+0x154>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a3f      	ldr	r2, [pc, #252]	; (80080ec <xTaskIncrementTick+0x150>)
 8007ff0:	6013      	str	r3, [r2, #0]
 8007ff2:	4a3f      	ldr	r2, [pc, #252]	; (80080f0 <xTaskIncrementTick+0x154>)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6013      	str	r3, [r2, #0]
 8007ff8:	4b3e      	ldr	r3, [pc, #248]	; (80080f4 <xTaskIncrementTick+0x158>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	4a3d      	ldr	r2, [pc, #244]	; (80080f4 <xTaskIncrementTick+0x158>)
 8008000:	6013      	str	r3, [r2, #0]
 8008002:	f000 fad1 	bl	80085a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008006:	4b3c      	ldr	r3, [pc, #240]	; (80080f8 <xTaskIncrementTick+0x15c>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	429a      	cmp	r2, r3
 800800e:	d349      	bcc.n	80080a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008010:	4b36      	ldr	r3, [pc, #216]	; (80080ec <xTaskIncrementTick+0x150>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d104      	bne.n	8008024 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800801a:	4b37      	ldr	r3, [pc, #220]	; (80080f8 <xTaskIncrementTick+0x15c>)
 800801c:	f04f 32ff 	mov.w	r2, #4294967295
 8008020:	601a      	str	r2, [r3, #0]
					break;
 8008022:	e03f      	b.n	80080a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008024:	4b31      	ldr	r3, [pc, #196]	; (80080ec <xTaskIncrementTick+0x150>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	429a      	cmp	r2, r3
 800803a:	d203      	bcs.n	8008044 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800803c:	4a2e      	ldr	r2, [pc, #184]	; (80080f8 <xTaskIncrementTick+0x15c>)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008042:	e02f      	b.n	80080a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	3304      	adds	r3, #4
 8008048:	4618      	mov	r0, r3
 800804a:	f7fe fedd 	bl	8006e08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008052:	2b00      	cmp	r3, #0
 8008054:	d004      	beq.n	8008060 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	3318      	adds	r3, #24
 800805a:	4618      	mov	r0, r3
 800805c:	f7fe fed4 	bl	8006e08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008064:	4b25      	ldr	r3, [pc, #148]	; (80080fc <xTaskIncrementTick+0x160>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	429a      	cmp	r2, r3
 800806a:	d903      	bls.n	8008074 <xTaskIncrementTick+0xd8>
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008070:	4a22      	ldr	r2, [pc, #136]	; (80080fc <xTaskIncrementTick+0x160>)
 8008072:	6013      	str	r3, [r2, #0]
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008078:	4613      	mov	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4413      	add	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4a1f      	ldr	r2, [pc, #124]	; (8008100 <xTaskIncrementTick+0x164>)
 8008082:	441a      	add	r2, r3
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	3304      	adds	r3, #4
 8008088:	4619      	mov	r1, r3
 800808a:	4610      	mov	r0, r2
 800808c:	f7fe fe5f 	bl	8006d4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008094:	4b1b      	ldr	r3, [pc, #108]	; (8008104 <xTaskIncrementTick+0x168>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809a:	429a      	cmp	r2, r3
 800809c:	d3b8      	bcc.n	8008010 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800809e:	2301      	movs	r3, #1
 80080a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080a2:	e7b5      	b.n	8008010 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80080a4:	4b17      	ldr	r3, [pc, #92]	; (8008104 <xTaskIncrementTick+0x168>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080aa:	4915      	ldr	r1, [pc, #84]	; (8008100 <xTaskIncrementTick+0x164>)
 80080ac:	4613      	mov	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4413      	add	r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	440b      	add	r3, r1
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d901      	bls.n	80080c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80080bc:	2301      	movs	r3, #1
 80080be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80080c0:	4b11      	ldr	r3, [pc, #68]	; (8008108 <xTaskIncrementTick+0x16c>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d007      	beq.n	80080d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80080c8:	2301      	movs	r3, #1
 80080ca:	617b      	str	r3, [r7, #20]
 80080cc:	e004      	b.n	80080d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80080ce:	4b0f      	ldr	r3, [pc, #60]	; (800810c <xTaskIncrementTick+0x170>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	3301      	adds	r3, #1
 80080d4:	4a0d      	ldr	r2, [pc, #52]	; (800810c <xTaskIncrementTick+0x170>)
 80080d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80080d8:	697b      	ldr	r3, [r7, #20]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3718      	adds	r7, #24
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	200014e4 	.word	0x200014e4
 80080e8:	200014c0 	.word	0x200014c0
 80080ec:	20001474 	.word	0x20001474
 80080f0:	20001478 	.word	0x20001478
 80080f4:	200014d4 	.word	0x200014d4
 80080f8:	200014dc 	.word	0x200014dc
 80080fc:	200014c4 	.word	0x200014c4
 8008100:	20000fec 	.word	0x20000fec
 8008104:	20000fe8 	.word	0x20000fe8
 8008108:	200014d0 	.word	0x200014d0
 800810c:	200014cc 	.word	0x200014cc

08008110 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008116:	4b28      	ldr	r3, [pc, #160]	; (80081b8 <vTaskSwitchContext+0xa8>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d003      	beq.n	8008126 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800811e:	4b27      	ldr	r3, [pc, #156]	; (80081bc <vTaskSwitchContext+0xac>)
 8008120:	2201      	movs	r2, #1
 8008122:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008124:	e041      	b.n	80081aa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008126:	4b25      	ldr	r3, [pc, #148]	; (80081bc <vTaskSwitchContext+0xac>)
 8008128:	2200      	movs	r2, #0
 800812a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800812c:	4b24      	ldr	r3, [pc, #144]	; (80081c0 <vTaskSwitchContext+0xb0>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	60fb      	str	r3, [r7, #12]
 8008132:	e010      	b.n	8008156 <vTaskSwitchContext+0x46>
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10a      	bne.n	8008150 <vTaskSwitchContext+0x40>
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	607b      	str	r3, [r7, #4]
}
 800814c:	bf00      	nop
 800814e:	e7fe      	b.n	800814e <vTaskSwitchContext+0x3e>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	3b01      	subs	r3, #1
 8008154:	60fb      	str	r3, [r7, #12]
 8008156:	491b      	ldr	r1, [pc, #108]	; (80081c4 <vTaskSwitchContext+0xb4>)
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	4613      	mov	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4413      	add	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	440b      	add	r3, r1
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d0e4      	beq.n	8008134 <vTaskSwitchContext+0x24>
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	4613      	mov	r3, r2
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4413      	add	r3, r2
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	4a13      	ldr	r2, [pc, #76]	; (80081c4 <vTaskSwitchContext+0xb4>)
 8008176:	4413      	add	r3, r2
 8008178:	60bb      	str	r3, [r7, #8]
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	685a      	ldr	r2, [r3, #4]
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	605a      	str	r2, [r3, #4]
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	685a      	ldr	r2, [r3, #4]
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	3308      	adds	r3, #8
 800818c:	429a      	cmp	r2, r3
 800818e:	d104      	bne.n	800819a <vTaskSwitchContext+0x8a>
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	605a      	str	r2, [r3, #4]
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	4a09      	ldr	r2, [pc, #36]	; (80081c8 <vTaskSwitchContext+0xb8>)
 80081a2:	6013      	str	r3, [r2, #0]
 80081a4:	4a06      	ldr	r2, [pc, #24]	; (80081c0 <vTaskSwitchContext+0xb0>)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6013      	str	r3, [r2, #0]
}
 80081aa:	bf00      	nop
 80081ac:	3714      	adds	r7, #20
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	200014e4 	.word	0x200014e4
 80081bc:	200014d0 	.word	0x200014d0
 80081c0:	200014c4 	.word	0x200014c4
 80081c4:	20000fec 	.word	0x20000fec
 80081c8:	20000fe8 	.word	0x20000fe8

080081cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d10a      	bne.n	80081f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80081dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e0:	f383 8811 	msr	BASEPRI, r3
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	60fb      	str	r3, [r7, #12]
}
 80081ee:	bf00      	nop
 80081f0:	e7fe      	b.n	80081f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081f2:	4b07      	ldr	r3, [pc, #28]	; (8008210 <vTaskPlaceOnEventList+0x44>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	3318      	adds	r3, #24
 80081f8:	4619      	mov	r1, r3
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7fe fdcb 	bl	8006d96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008200:	2101      	movs	r1, #1
 8008202:	6838      	ldr	r0, [r7, #0]
 8008204:	f000 fc6a 	bl	8008adc <prvAddCurrentTaskToDelayedList>
}
 8008208:	bf00      	nop
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	20000fe8 	.word	0x20000fe8

08008214 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008214:	b580      	push	{r7, lr}
 8008216:	b086      	sub	sp, #24
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10a      	bne.n	800823c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	617b      	str	r3, [r7, #20]
}
 8008238:	bf00      	nop
 800823a:	e7fe      	b.n	800823a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800823c:	4b0a      	ldr	r3, [pc, #40]	; (8008268 <vTaskPlaceOnEventListRestricted+0x54>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	3318      	adds	r3, #24
 8008242:	4619      	mov	r1, r3
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f7fe fd82 	bl	8006d4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d002      	beq.n	8008256 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008250:	f04f 33ff 	mov.w	r3, #4294967295
 8008254:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008256:	6879      	ldr	r1, [r7, #4]
 8008258:	68b8      	ldr	r0, [r7, #8]
 800825a:	f000 fc3f 	bl	8008adc <prvAddCurrentTaskToDelayedList>
	}
 800825e:	bf00      	nop
 8008260:	3718      	adds	r7, #24
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	20000fe8 	.word	0x20000fe8

0800826c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10a      	bne.n	8008298 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	60fb      	str	r3, [r7, #12]
}
 8008294:	bf00      	nop
 8008296:	e7fe      	b.n	8008296 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	3318      	adds	r3, #24
 800829c:	4618      	mov	r0, r3
 800829e:	f7fe fdb3 	bl	8006e08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082a2:	4b1e      	ldr	r3, [pc, #120]	; (800831c <xTaskRemoveFromEventList+0xb0>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d11d      	bne.n	80082e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	3304      	adds	r3, #4
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7fe fdaa 	bl	8006e08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b8:	4b19      	ldr	r3, [pc, #100]	; (8008320 <xTaskRemoveFromEventList+0xb4>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d903      	bls.n	80082c8 <xTaskRemoveFromEventList+0x5c>
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c4:	4a16      	ldr	r2, [pc, #88]	; (8008320 <xTaskRemoveFromEventList+0xb4>)
 80082c6:	6013      	str	r3, [r2, #0]
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082cc:	4613      	mov	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4a13      	ldr	r2, [pc, #76]	; (8008324 <xTaskRemoveFromEventList+0xb8>)
 80082d6:	441a      	add	r2, r3
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	3304      	adds	r3, #4
 80082dc:	4619      	mov	r1, r3
 80082de:	4610      	mov	r0, r2
 80082e0:	f7fe fd35 	bl	8006d4e <vListInsertEnd>
 80082e4:	e005      	b.n	80082f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	3318      	adds	r3, #24
 80082ea:	4619      	mov	r1, r3
 80082ec:	480e      	ldr	r0, [pc, #56]	; (8008328 <xTaskRemoveFromEventList+0xbc>)
 80082ee:	f7fe fd2e 	bl	8006d4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f6:	4b0d      	ldr	r3, [pc, #52]	; (800832c <xTaskRemoveFromEventList+0xc0>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d905      	bls.n	800830c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008300:	2301      	movs	r3, #1
 8008302:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008304:	4b0a      	ldr	r3, [pc, #40]	; (8008330 <xTaskRemoveFromEventList+0xc4>)
 8008306:	2201      	movs	r2, #1
 8008308:	601a      	str	r2, [r3, #0]
 800830a:	e001      	b.n	8008310 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800830c:	2300      	movs	r3, #0
 800830e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008310:	697b      	ldr	r3, [r7, #20]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3718      	adds	r7, #24
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	200014e4 	.word	0x200014e4
 8008320:	200014c4 	.word	0x200014c4
 8008324:	20000fec 	.word	0x20000fec
 8008328:	2000147c 	.word	0x2000147c
 800832c:	20000fe8 	.word	0x20000fe8
 8008330:	200014d0 	.word	0x200014d0

08008334 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800833c:	4b06      	ldr	r3, [pc, #24]	; (8008358 <vTaskInternalSetTimeOutState+0x24>)
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008344:	4b05      	ldr	r3, [pc, #20]	; (800835c <vTaskInternalSetTimeOutState+0x28>)
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	605a      	str	r2, [r3, #4]
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr
 8008358:	200014d4 	.word	0x200014d4
 800835c:	200014c0 	.word	0x200014c0

08008360 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b088      	sub	sp, #32
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10a      	bne.n	8008386 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	613b      	str	r3, [r7, #16]
}
 8008382:	bf00      	nop
 8008384:	e7fe      	b.n	8008384 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10a      	bne.n	80083a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800838c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	60fb      	str	r3, [r7, #12]
}
 800839e:	bf00      	nop
 80083a0:	e7fe      	b.n	80083a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80083a2:	f001 f867 	bl	8009474 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80083a6:	4b1d      	ldr	r3, [pc, #116]	; (800841c <xTaskCheckForTimeOut+0xbc>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	69ba      	ldr	r2, [r7, #24]
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083be:	d102      	bne.n	80083c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80083c0:	2300      	movs	r3, #0
 80083c2:	61fb      	str	r3, [r7, #28]
 80083c4:	e023      	b.n	800840e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	4b15      	ldr	r3, [pc, #84]	; (8008420 <xTaskCheckForTimeOut+0xc0>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d007      	beq.n	80083e2 <xTaskCheckForTimeOut+0x82>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	69ba      	ldr	r2, [r7, #24]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d302      	bcc.n	80083e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80083dc:	2301      	movs	r3, #1
 80083de:	61fb      	str	r3, [r7, #28]
 80083e0:	e015      	b.n	800840e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d20b      	bcs.n	8008404 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	1ad2      	subs	r2, r2, r3
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f7ff ff9b 	bl	8008334 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80083fe:	2300      	movs	r3, #0
 8008400:	61fb      	str	r3, [r7, #28]
 8008402:	e004      	b.n	800840e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	2200      	movs	r2, #0
 8008408:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800840a:	2301      	movs	r3, #1
 800840c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800840e:	f001 f861 	bl	80094d4 <vPortExitCritical>

	return xReturn;
 8008412:	69fb      	ldr	r3, [r7, #28]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3720      	adds	r7, #32
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	200014c0 	.word	0x200014c0
 8008420:	200014d4 	.word	0x200014d4

08008424 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008424:	b480      	push	{r7}
 8008426:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008428:	4b03      	ldr	r3, [pc, #12]	; (8008438 <vTaskMissedYield+0x14>)
 800842a:	2201      	movs	r2, #1
 800842c:	601a      	str	r2, [r3, #0]
}
 800842e:	bf00      	nop
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr
 8008438:	200014d0 	.word	0x200014d0

0800843c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008444:	f000 f852 	bl	80084ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008448:	4b06      	ldr	r3, [pc, #24]	; (8008464 <prvIdleTask+0x28>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d9f9      	bls.n	8008444 <prvIdleTask+0x8>
			{

				taskYIELD();
 8008450:	4b05      	ldr	r3, [pc, #20]	; (8008468 <prvIdleTask+0x2c>)
 8008452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008456:	601a      	str	r2, [r3, #0]
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008460:	e7f0      	b.n	8008444 <prvIdleTask+0x8>
 8008462:	bf00      	nop
 8008464:	20000fec 	.word	0x20000fec
 8008468:	e000ed04 	.word	0xe000ed04

0800846c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008472:	2300      	movs	r3, #0
 8008474:	607b      	str	r3, [r7, #4]
 8008476:	e00c      	b.n	8008492 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	4613      	mov	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4413      	add	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4a12      	ldr	r2, [pc, #72]	; (80084cc <prvInitialiseTaskLists+0x60>)
 8008484:	4413      	add	r3, r2
 8008486:	4618      	mov	r0, r3
 8008488:	f7fe fc34 	bl	8006cf4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	3301      	adds	r3, #1
 8008490:	607b      	str	r3, [r7, #4]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b37      	cmp	r3, #55	; 0x37
 8008496:	d9ef      	bls.n	8008478 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008498:	480d      	ldr	r0, [pc, #52]	; (80084d0 <prvInitialiseTaskLists+0x64>)
 800849a:	f7fe fc2b 	bl	8006cf4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800849e:	480d      	ldr	r0, [pc, #52]	; (80084d4 <prvInitialiseTaskLists+0x68>)
 80084a0:	f7fe fc28 	bl	8006cf4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80084a4:	480c      	ldr	r0, [pc, #48]	; (80084d8 <prvInitialiseTaskLists+0x6c>)
 80084a6:	f7fe fc25 	bl	8006cf4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80084aa:	480c      	ldr	r0, [pc, #48]	; (80084dc <prvInitialiseTaskLists+0x70>)
 80084ac:	f7fe fc22 	bl	8006cf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80084b0:	480b      	ldr	r0, [pc, #44]	; (80084e0 <prvInitialiseTaskLists+0x74>)
 80084b2:	f7fe fc1f 	bl	8006cf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80084b6:	4b0b      	ldr	r3, [pc, #44]	; (80084e4 <prvInitialiseTaskLists+0x78>)
 80084b8:	4a05      	ldr	r2, [pc, #20]	; (80084d0 <prvInitialiseTaskLists+0x64>)
 80084ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80084bc:	4b0a      	ldr	r3, [pc, #40]	; (80084e8 <prvInitialiseTaskLists+0x7c>)
 80084be:	4a05      	ldr	r2, [pc, #20]	; (80084d4 <prvInitialiseTaskLists+0x68>)
 80084c0:	601a      	str	r2, [r3, #0]
}
 80084c2:	bf00      	nop
 80084c4:	3708      	adds	r7, #8
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	20000fec 	.word	0x20000fec
 80084d0:	2000144c 	.word	0x2000144c
 80084d4:	20001460 	.word	0x20001460
 80084d8:	2000147c 	.word	0x2000147c
 80084dc:	20001490 	.word	0x20001490
 80084e0:	200014a8 	.word	0x200014a8
 80084e4:	20001474 	.word	0x20001474
 80084e8:	20001478 	.word	0x20001478

080084ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084f2:	e019      	b.n	8008528 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80084f4:	f000 ffbe 	bl	8009474 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084f8:	4b10      	ldr	r3, [pc, #64]	; (800853c <prvCheckTasksWaitingTermination+0x50>)
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	3304      	adds	r3, #4
 8008504:	4618      	mov	r0, r3
 8008506:	f7fe fc7f 	bl	8006e08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800850a:	4b0d      	ldr	r3, [pc, #52]	; (8008540 <prvCheckTasksWaitingTermination+0x54>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3b01      	subs	r3, #1
 8008510:	4a0b      	ldr	r2, [pc, #44]	; (8008540 <prvCheckTasksWaitingTermination+0x54>)
 8008512:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008514:	4b0b      	ldr	r3, [pc, #44]	; (8008544 <prvCheckTasksWaitingTermination+0x58>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	3b01      	subs	r3, #1
 800851a:	4a0a      	ldr	r2, [pc, #40]	; (8008544 <prvCheckTasksWaitingTermination+0x58>)
 800851c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800851e:	f000 ffd9 	bl	80094d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 f810 	bl	8008548 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008528:	4b06      	ldr	r3, [pc, #24]	; (8008544 <prvCheckTasksWaitingTermination+0x58>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1e1      	bne.n	80084f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008530:	bf00      	nop
 8008532:	bf00      	nop
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	20001490 	.word	0x20001490
 8008540:	200014bc 	.word	0x200014bc
 8008544:	200014a4 	.word	0x200014a4

08008548 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008556:	2b00      	cmp	r3, #0
 8008558:	d108      	bne.n	800856c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855e:	4618      	mov	r0, r3
 8008560:	f001 f976 	bl	8009850 <vPortFree>
				vPortFree( pxTCB );
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f001 f973 	bl	8009850 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800856a:	e018      	b.n	800859e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008572:	2b01      	cmp	r3, #1
 8008574:	d103      	bne.n	800857e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f001 f96a 	bl	8009850 <vPortFree>
	}
 800857c:	e00f      	b.n	800859e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008584:	2b02      	cmp	r3, #2
 8008586:	d00a      	beq.n	800859e <prvDeleteTCB+0x56>
	__asm volatile
 8008588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	60fb      	str	r3, [r7, #12]
}
 800859a:	bf00      	nop
 800859c:	e7fe      	b.n	800859c <prvDeleteTCB+0x54>
	}
 800859e:	bf00      	nop
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
	...

080085a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085ae:	4b0c      	ldr	r3, [pc, #48]	; (80085e0 <prvResetNextTaskUnblockTime+0x38>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d104      	bne.n	80085c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80085b8:	4b0a      	ldr	r3, [pc, #40]	; (80085e4 <prvResetNextTaskUnblockTime+0x3c>)
 80085ba:	f04f 32ff 	mov.w	r2, #4294967295
 80085be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80085c0:	e008      	b.n	80085d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085c2:	4b07      	ldr	r3, [pc, #28]	; (80085e0 <prvResetNextTaskUnblockTime+0x38>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	4a04      	ldr	r2, [pc, #16]	; (80085e4 <prvResetNextTaskUnblockTime+0x3c>)
 80085d2:	6013      	str	r3, [r2, #0]
}
 80085d4:	bf00      	nop
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	20001474 	.word	0x20001474
 80085e4:	200014dc 	.word	0x200014dc

080085e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80085ee:	4b0b      	ldr	r3, [pc, #44]	; (800861c <xTaskGetSchedulerState+0x34>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d102      	bne.n	80085fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80085f6:	2301      	movs	r3, #1
 80085f8:	607b      	str	r3, [r7, #4]
 80085fa:	e008      	b.n	800860e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085fc:	4b08      	ldr	r3, [pc, #32]	; (8008620 <xTaskGetSchedulerState+0x38>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d102      	bne.n	800860a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008604:	2302      	movs	r3, #2
 8008606:	607b      	str	r3, [r7, #4]
 8008608:	e001      	b.n	800860e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800860a:	2300      	movs	r3, #0
 800860c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800860e:	687b      	ldr	r3, [r7, #4]
	}
 8008610:	4618      	mov	r0, r3
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	200014c8 	.word	0x200014c8
 8008620:	200014e4 	.word	0x200014e4

08008624 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008630:	2300      	movs	r3, #0
 8008632:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d056      	beq.n	80086e8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800863a:	4b2e      	ldr	r3, [pc, #184]	; (80086f4 <xTaskPriorityDisinherit+0xd0>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	429a      	cmp	r2, r3
 8008642:	d00a      	beq.n	800865a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008648:	f383 8811 	msr	BASEPRI, r3
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	60fb      	str	r3, [r7, #12]
}
 8008656:	bf00      	nop
 8008658:	e7fe      	b.n	8008658 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10a      	bne.n	8008678 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	60bb      	str	r3, [r7, #8]
}
 8008674:	bf00      	nop
 8008676:	e7fe      	b.n	8008676 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800867c:	1e5a      	subs	r2, r3, #1
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800868a:	429a      	cmp	r2, r3
 800868c:	d02c      	beq.n	80086e8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008692:	2b00      	cmp	r3, #0
 8008694:	d128      	bne.n	80086e8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	3304      	adds	r3, #4
 800869a:	4618      	mov	r0, r3
 800869c:	f7fe fbb4 	bl	8006e08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b8:	4b0f      	ldr	r3, [pc, #60]	; (80086f8 <xTaskPriorityDisinherit+0xd4>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d903      	bls.n	80086c8 <xTaskPriorityDisinherit+0xa4>
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c4:	4a0c      	ldr	r2, [pc, #48]	; (80086f8 <xTaskPriorityDisinherit+0xd4>)
 80086c6:	6013      	str	r3, [r2, #0]
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086cc:	4613      	mov	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	4413      	add	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	4a09      	ldr	r2, [pc, #36]	; (80086fc <xTaskPriorityDisinherit+0xd8>)
 80086d6:	441a      	add	r2, r3
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	3304      	adds	r3, #4
 80086dc:	4619      	mov	r1, r3
 80086de:	4610      	mov	r0, r2
 80086e0:	f7fe fb35 	bl	8006d4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80086e4:	2301      	movs	r3, #1
 80086e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086e8:	697b      	ldr	r3, [r7, #20]
	}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3718      	adds	r7, #24
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	20000fe8 	.word	0x20000fe8
 80086f8:	200014c4 	.word	0x200014c4
 80086fc:	20000fec 	.word	0x20000fec

08008700 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
 800870c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800870e:	f000 feb1 	bl	8009474 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008712:	4b26      	ldr	r3, [pc, #152]	; (80087ac <xTaskNotifyWait+0xac>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800871a:	b2db      	uxtb	r3, r3
 800871c:	2b02      	cmp	r3, #2
 800871e:	d01a      	beq.n	8008756 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008720:	4b22      	ldr	r3, [pc, #136]	; (80087ac <xTaskNotifyWait+0xac>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	43d2      	mvns	r2, r2
 800872a:	400a      	ands	r2, r1
 800872c:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800872e:	4b1f      	ldr	r3, [pc, #124]	; (80087ac <xTaskNotifyWait+0xac>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00b      	beq.n	8008756 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800873e:	2101      	movs	r1, #1
 8008740:	6838      	ldr	r0, [r7, #0]
 8008742:	f000 f9cb 	bl	8008adc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008746:	4b1a      	ldr	r3, [pc, #104]	; (80087b0 <xTaskNotifyWait+0xb0>)
 8008748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800874c:	601a      	str	r2, [r3, #0]
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008756:	f000 febd 	bl	80094d4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800875a:	f000 fe8b 	bl	8009474 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d004      	beq.n	800876e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008764:	4b11      	ldr	r3, [pc, #68]	; (80087ac <xTaskNotifyWait+0xac>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800876e:	4b0f      	ldr	r3, [pc, #60]	; (80087ac <xTaskNotifyWait+0xac>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008776:	b2db      	uxtb	r3, r3
 8008778:	2b02      	cmp	r3, #2
 800877a:	d002      	beq.n	8008782 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800877c:	2300      	movs	r3, #0
 800877e:	617b      	str	r3, [r7, #20]
 8008780:	e008      	b.n	8008794 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008782:	4b0a      	ldr	r3, [pc, #40]	; (80087ac <xTaskNotifyWait+0xac>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	43d2      	mvns	r2, r2
 800878c:	400a      	ands	r2, r1
 800878e:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8008790:	2301      	movs	r3, #1
 8008792:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008794:	4b05      	ldr	r3, [pc, #20]	; (80087ac <xTaskNotifyWait+0xac>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2200      	movs	r2, #0
 800879a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800879e:	f000 fe99 	bl	80094d4 <vPortExitCritical>

		return xReturn;
 80087a2:	697b      	ldr	r3, [r7, #20]
	}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3718      	adds	r7, #24
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	20000fe8 	.word	0x20000fe8
 80087b0:	e000ed04 	.word	0xe000ed04

080087b4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b08a      	sub	sp, #40	; 0x28
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	603b      	str	r3, [r7, #0]
 80087c0:	4613      	mov	r3, r2
 80087c2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80087c4:	2301      	movs	r3, #1
 80087c6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d10a      	bne.n	80087e4 <xTaskGenericNotify+0x30>
	__asm volatile
 80087ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d2:	f383 8811 	msr	BASEPRI, r3
 80087d6:	f3bf 8f6f 	isb	sy
 80087da:	f3bf 8f4f 	dsb	sy
 80087de:	61bb      	str	r3, [r7, #24]
}
 80087e0:	bf00      	nop
 80087e2:	e7fe      	b.n	80087e2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80087e8:	f000 fe44 	bl	8009474 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d003      	beq.n	80087fa <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80087f2:	6a3b      	ldr	r3, [r7, #32]
 80087f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80087fa:	6a3b      	ldr	r3, [r7, #32]
 80087fc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008800:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008802:	6a3b      	ldr	r3, [r7, #32]
 8008804:	2202      	movs	r2, #2
 8008806:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800880a:	79fb      	ldrb	r3, [r7, #7]
 800880c:	2b04      	cmp	r3, #4
 800880e:	d828      	bhi.n	8008862 <xTaskGenericNotify+0xae>
 8008810:	a201      	add	r2, pc, #4	; (adr r2, 8008818 <xTaskGenericNotify+0x64>)
 8008812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008816:	bf00      	nop
 8008818:	08008883 	.word	0x08008883
 800881c:	0800882d 	.word	0x0800882d
 8008820:	0800883b 	.word	0x0800883b
 8008824:	08008847 	.word	0x08008847
 8008828:	0800884f 	.word	0x0800884f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800882c:	6a3b      	ldr	r3, [r7, #32]
 800882e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	431a      	orrs	r2, r3
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008838:	e026      	b.n	8008888 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800883e:	1c5a      	adds	r2, r3, #1
 8008840:	6a3b      	ldr	r3, [r7, #32]
 8008842:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008844:	e020      	b.n	8008888 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800884c:	e01c      	b.n	8008888 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800884e:	7ffb      	ldrb	r3, [r7, #31]
 8008850:	2b02      	cmp	r3, #2
 8008852:	d003      	beq.n	800885c <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008854:	6a3b      	ldr	r3, [r7, #32]
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800885a:	e015      	b.n	8008888 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800885c:	2300      	movs	r3, #0
 800885e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8008860:	e012      	b.n	8008888 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008862:	6a3b      	ldr	r3, [r7, #32]
 8008864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800886a:	d00c      	beq.n	8008886 <xTaskGenericNotify+0xd2>
	__asm volatile
 800886c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008870:	f383 8811 	msr	BASEPRI, r3
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	617b      	str	r3, [r7, #20]
}
 800887e:	bf00      	nop
 8008880:	e7fe      	b.n	8008880 <xTaskGenericNotify+0xcc>
					break;
 8008882:	bf00      	nop
 8008884:	e000      	b.n	8008888 <xTaskGenericNotify+0xd4>

					break;
 8008886:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008888:	7ffb      	ldrb	r3, [r7, #31]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d13a      	bne.n	8008904 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800888e:	6a3b      	ldr	r3, [r7, #32]
 8008890:	3304      	adds	r3, #4
 8008892:	4618      	mov	r0, r3
 8008894:	f7fe fab8 	bl	8006e08 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8008898:	6a3b      	ldr	r3, [r7, #32]
 800889a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800889c:	4b1d      	ldr	r3, [pc, #116]	; (8008914 <xTaskGenericNotify+0x160>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d903      	bls.n	80088ac <xTaskGenericNotify+0xf8>
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a8:	4a1a      	ldr	r2, [pc, #104]	; (8008914 <xTaskGenericNotify+0x160>)
 80088aa:	6013      	str	r3, [r2, #0]
 80088ac:	6a3b      	ldr	r3, [r7, #32]
 80088ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b0:	4613      	mov	r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	4413      	add	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4a17      	ldr	r2, [pc, #92]	; (8008918 <xTaskGenericNotify+0x164>)
 80088ba:	441a      	add	r2, r3
 80088bc:	6a3b      	ldr	r3, [r7, #32]
 80088be:	3304      	adds	r3, #4
 80088c0:	4619      	mov	r1, r3
 80088c2:	4610      	mov	r0, r2
 80088c4:	f7fe fa43 	bl	8006d4e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00a      	beq.n	80088e6 <xTaskGenericNotify+0x132>
	__asm volatile
 80088d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d4:	f383 8811 	msr	BASEPRI, r3
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	613b      	str	r3, [r7, #16]
}
 80088e2:	bf00      	nop
 80088e4:	e7fe      	b.n	80088e4 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088e6:	6a3b      	ldr	r3, [r7, #32]
 80088e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ea:	4b0c      	ldr	r3, [pc, #48]	; (800891c <xTaskGenericNotify+0x168>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d907      	bls.n	8008904 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80088f4:	4b0a      	ldr	r3, [pc, #40]	; (8008920 <xTaskGenericNotify+0x16c>)
 80088f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088fa:	601a      	str	r2, [r3, #0]
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008904:	f000 fde6 	bl	80094d4 <vPortExitCritical>

		return xReturn;
 8008908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800890a:	4618      	mov	r0, r3
 800890c:	3728      	adds	r7, #40	; 0x28
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	200014c4 	.word	0x200014c4
 8008918:	20000fec 	.word	0x20000fec
 800891c:	20000fe8 	.word	0x20000fe8
 8008920:	e000ed04 	.word	0xe000ed04

08008924 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008924:	b580      	push	{r7, lr}
 8008926:	b08e      	sub	sp, #56	; 0x38
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	603b      	str	r3, [r7, #0]
 8008930:	4613      	mov	r3, r2
 8008932:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8008934:	2301      	movs	r3, #1
 8008936:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10a      	bne.n	8008954 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800893e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008942:	f383 8811 	msr	BASEPRI, r3
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008950:	bf00      	nop
 8008952:	e7fe      	b.n	8008952 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008954:	f000 fe70 	bl	8009638 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800895c:	f3ef 8211 	mrs	r2, BASEPRI
 8008960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	623a      	str	r2, [r7, #32]
 8008972:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8008974:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008976:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d003      	beq.n	8008986 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800897e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008988:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800898c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008992:	2202      	movs	r2, #2
 8008994:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8008998:	79fb      	ldrb	r3, [r7, #7]
 800899a:	2b04      	cmp	r3, #4
 800899c:	d828      	bhi.n	80089f0 <xTaskGenericNotifyFromISR+0xcc>
 800899e:	a201      	add	r2, pc, #4	; (adr r2, 80089a4 <xTaskGenericNotifyFromISR+0x80>)
 80089a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a4:	08008a11 	.word	0x08008a11
 80089a8:	080089b9 	.word	0x080089b9
 80089ac:	080089c7 	.word	0x080089c7
 80089b0:	080089d3 	.word	0x080089d3
 80089b4:	080089db 	.word	0x080089db
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80089b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	431a      	orrs	r2, r3
 80089c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80089c4:	e027      	b.n	8008a16 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80089c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ca:	1c5a      	adds	r2, r3, #1
 80089cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ce:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80089d0:	e021      	b.n	8008a16 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80089d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80089d8:	e01d      	b.n	8008a16 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80089da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d003      	beq.n	80089ea <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80089e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80089e8:	e015      	b.n	8008a16 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 80089ea:	2300      	movs	r3, #0
 80089ec:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80089ee:	e012      	b.n	8008a16 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80089f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f8:	d00c      	beq.n	8008a14 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80089fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fe:	f383 8811 	msr	BASEPRI, r3
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	61bb      	str	r3, [r7, #24]
}
 8008a0c:	bf00      	nop
 8008a0e:	e7fe      	b.n	8008a0e <xTaskGenericNotifyFromISR+0xea>
					break;
 8008a10:	bf00      	nop
 8008a12:	e000      	b.n	8008a16 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8008a14:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008a16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d146      	bne.n	8008aac <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00a      	beq.n	8008a3c <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8008a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2a:	f383 8811 	msr	BASEPRI, r3
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	f3bf 8f4f 	dsb	sy
 8008a36:	617b      	str	r3, [r7, #20]
}
 8008a38:	bf00      	nop
 8008a3a:	e7fe      	b.n	8008a3a <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a3c:	4b21      	ldr	r3, [pc, #132]	; (8008ac4 <xTaskGenericNotifyFromISR+0x1a0>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d11d      	bne.n	8008a80 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a46:	3304      	adds	r3, #4
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7fe f9dd 	bl	8006e08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a52:	4b1d      	ldr	r3, [pc, #116]	; (8008ac8 <xTaskGenericNotifyFromISR+0x1a4>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d903      	bls.n	8008a62 <xTaskGenericNotifyFromISR+0x13e>
 8008a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5e:	4a1a      	ldr	r2, [pc, #104]	; (8008ac8 <xTaskGenericNotifyFromISR+0x1a4>)
 8008a60:	6013      	str	r3, [r2, #0]
 8008a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a66:	4613      	mov	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4413      	add	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4a17      	ldr	r2, [pc, #92]	; (8008acc <xTaskGenericNotifyFromISR+0x1a8>)
 8008a70:	441a      	add	r2, r3
 8008a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a74:	3304      	adds	r3, #4
 8008a76:	4619      	mov	r1, r3
 8008a78:	4610      	mov	r0, r2
 8008a7a:	f7fe f968 	bl	8006d4e <vListInsertEnd>
 8008a7e:	e005      	b.n	8008a8c <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a82:	3318      	adds	r3, #24
 8008a84:	4619      	mov	r1, r3
 8008a86:	4812      	ldr	r0, [pc, #72]	; (8008ad0 <xTaskGenericNotifyFromISR+0x1ac>)
 8008a88:	f7fe f961 	bl	8006d4e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a90:	4b10      	ldr	r3, [pc, #64]	; (8008ad4 <xTaskGenericNotifyFromISR+0x1b0>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d908      	bls.n	8008aac <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d002      	beq.n	8008aa6 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8008aa6:	4b0c      	ldr	r3, [pc, #48]	; (8008ad8 <xTaskGenericNotifyFromISR+0x1b4>)
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	601a      	str	r2, [r3, #0]
 8008aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aae:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	f383 8811 	msr	BASEPRI, r3
}
 8008ab6:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8008ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3738      	adds	r7, #56	; 0x38
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	200014e4 	.word	0x200014e4
 8008ac8:	200014c4 	.word	0x200014c4
 8008acc:	20000fec 	.word	0x20000fec
 8008ad0:	2000147c 	.word	0x2000147c
 8008ad4:	20000fe8 	.word	0x20000fe8
 8008ad8:	200014d0 	.word	0x200014d0

08008adc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008ae6:	4b21      	ldr	r3, [pc, #132]	; (8008b6c <prvAddCurrentTaskToDelayedList+0x90>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008aec:	4b20      	ldr	r3, [pc, #128]	; (8008b70 <prvAddCurrentTaskToDelayedList+0x94>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	3304      	adds	r3, #4
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7fe f988 	bl	8006e08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008afe:	d10a      	bne.n	8008b16 <prvAddCurrentTaskToDelayedList+0x3a>
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d007      	beq.n	8008b16 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b06:	4b1a      	ldr	r3, [pc, #104]	; (8008b70 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	4819      	ldr	r0, [pc, #100]	; (8008b74 <prvAddCurrentTaskToDelayedList+0x98>)
 8008b10:	f7fe f91d 	bl	8006d4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b14:	e026      	b.n	8008b64 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b1e:	4b14      	ldr	r3, [pc, #80]	; (8008b70 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b26:	68ba      	ldr	r2, [r7, #8]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d209      	bcs.n	8008b42 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b2e:	4b12      	ldr	r3, [pc, #72]	; (8008b78 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	4b0f      	ldr	r3, [pc, #60]	; (8008b70 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	3304      	adds	r3, #4
 8008b38:	4619      	mov	r1, r3
 8008b3a:	4610      	mov	r0, r2
 8008b3c:	f7fe f92b 	bl	8006d96 <vListInsert>
}
 8008b40:	e010      	b.n	8008b64 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b42:	4b0e      	ldr	r3, [pc, #56]	; (8008b7c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	4b0a      	ldr	r3, [pc, #40]	; (8008b70 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	3304      	adds	r3, #4
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	4610      	mov	r0, r2
 8008b50:	f7fe f921 	bl	8006d96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008b54:	4b0a      	ldr	r3, [pc, #40]	; (8008b80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68ba      	ldr	r2, [r7, #8]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d202      	bcs.n	8008b64 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008b5e:	4a08      	ldr	r2, [pc, #32]	; (8008b80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	6013      	str	r3, [r2, #0]
}
 8008b64:	bf00      	nop
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	200014c0 	.word	0x200014c0
 8008b70:	20000fe8 	.word	0x20000fe8
 8008b74:	200014a8 	.word	0x200014a8
 8008b78:	20001478 	.word	0x20001478
 8008b7c:	20001474 	.word	0x20001474
 8008b80:	200014dc 	.word	0x200014dc

08008b84 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b08a      	sub	sp, #40	; 0x28
 8008b88:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008b8e:	f000 fb07 	bl	80091a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008b92:	4b1c      	ldr	r3, [pc, #112]	; (8008c04 <xTimerCreateTimerTask+0x80>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d021      	beq.n	8008bde <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008ba2:	1d3a      	adds	r2, r7, #4
 8008ba4:	f107 0108 	add.w	r1, r7, #8
 8008ba8:	f107 030c 	add.w	r3, r7, #12
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7fe f887 	bl	8006cc0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008bb2:	6879      	ldr	r1, [r7, #4]
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	9202      	str	r2, [sp, #8]
 8008bba:	9301      	str	r3, [sp, #4]
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	460a      	mov	r2, r1
 8008bc4:	4910      	ldr	r1, [pc, #64]	; (8008c08 <xTimerCreateTimerTask+0x84>)
 8008bc6:	4811      	ldr	r0, [pc, #68]	; (8008c0c <xTimerCreateTimerTask+0x88>)
 8008bc8:	f7fe ff12 	bl	80079f0 <xTaskCreateStatic>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	4a10      	ldr	r2, [pc, #64]	; (8008c10 <xTimerCreateTimerTask+0x8c>)
 8008bd0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008bd2:	4b0f      	ldr	r3, [pc, #60]	; (8008c10 <xTimerCreateTimerTask+0x8c>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d001      	beq.n	8008bde <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10a      	bne.n	8008bfa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be8:	f383 8811 	msr	BASEPRI, r3
 8008bec:	f3bf 8f6f 	isb	sy
 8008bf0:	f3bf 8f4f 	dsb	sy
 8008bf4:	613b      	str	r3, [r7, #16]
}
 8008bf6:	bf00      	nop
 8008bf8:	e7fe      	b.n	8008bf8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008bfa:	697b      	ldr	r3, [r7, #20]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3718      	adds	r7, #24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	20001518 	.word	0x20001518
 8008c08:	0800ac28 	.word	0x0800ac28
 8008c0c:	08008d49 	.word	0x08008d49
 8008c10:	2000151c 	.word	0x2000151c

08008c14 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b08a      	sub	sp, #40	; 0x28
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	607a      	str	r2, [r7, #4]
 8008c20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008c22:	2300      	movs	r3, #0
 8008c24:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10a      	bne.n	8008c42 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c30:	f383 8811 	msr	BASEPRI, r3
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	623b      	str	r3, [r7, #32]
}
 8008c3e:	bf00      	nop
 8008c40:	e7fe      	b.n	8008c40 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008c42:	4b1a      	ldr	r3, [pc, #104]	; (8008cac <xTimerGenericCommand+0x98>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d02a      	beq.n	8008ca0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	2b05      	cmp	r3, #5
 8008c5a:	dc18      	bgt.n	8008c8e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008c5c:	f7ff fcc4 	bl	80085e8 <xTaskGetSchedulerState>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d109      	bne.n	8008c7a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008c66:	4b11      	ldr	r3, [pc, #68]	; (8008cac <xTimerGenericCommand+0x98>)
 8008c68:	6818      	ldr	r0, [r3, #0]
 8008c6a:	f107 0110 	add.w	r1, r7, #16
 8008c6e:	2300      	movs	r3, #0
 8008c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c72:	f7fe fa31 	bl	80070d8 <xQueueGenericSend>
 8008c76:	6278      	str	r0, [r7, #36]	; 0x24
 8008c78:	e012      	b.n	8008ca0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008c7a:	4b0c      	ldr	r3, [pc, #48]	; (8008cac <xTimerGenericCommand+0x98>)
 8008c7c:	6818      	ldr	r0, [r3, #0]
 8008c7e:	f107 0110 	add.w	r1, r7, #16
 8008c82:	2300      	movs	r3, #0
 8008c84:	2200      	movs	r2, #0
 8008c86:	f7fe fa27 	bl	80070d8 <xQueueGenericSend>
 8008c8a:	6278      	str	r0, [r7, #36]	; 0x24
 8008c8c:	e008      	b.n	8008ca0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008c8e:	4b07      	ldr	r3, [pc, #28]	; (8008cac <xTimerGenericCommand+0x98>)
 8008c90:	6818      	ldr	r0, [r3, #0]
 8008c92:	f107 0110 	add.w	r1, r7, #16
 8008c96:	2300      	movs	r3, #0
 8008c98:	683a      	ldr	r2, [r7, #0]
 8008c9a:	f7fe fb1b 	bl	80072d4 <xQueueGenericSendFromISR>
 8008c9e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3728      	adds	r7, #40	; 0x28
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	20001518 	.word	0x20001518

08008cb0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b088      	sub	sp, #32
 8008cb4:	af02      	add	r7, sp, #8
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cba:	4b22      	ldr	r3, [pc, #136]	; (8008d44 <prvProcessExpiredTimer+0x94>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	3304      	adds	r3, #4
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7fe f89d 	bl	8006e08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cd4:	f003 0304 	and.w	r3, r3, #4
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d022      	beq.n	8008d22 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	699a      	ldr	r2, [r3, #24]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	18d1      	adds	r1, r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	683a      	ldr	r2, [r7, #0]
 8008ce8:	6978      	ldr	r0, [r7, #20]
 8008cea:	f000 f8d1 	bl	8008e90 <prvInsertTimerInActiveList>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d01f      	beq.n	8008d34 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	9300      	str	r3, [sp, #0]
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	6978      	ldr	r0, [r7, #20]
 8008d00:	f7ff ff88 	bl	8008c14 <xTimerGenericCommand>
 8008d04:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d113      	bne.n	8008d34 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d10:	f383 8811 	msr	BASEPRI, r3
 8008d14:	f3bf 8f6f 	isb	sy
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	60fb      	str	r3, [r7, #12]
}
 8008d1e:	bf00      	nop
 8008d20:	e7fe      	b.n	8008d20 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d28:	f023 0301 	bic.w	r3, r3, #1
 8008d2c:	b2da      	uxtb	r2, r3
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	6a1b      	ldr	r3, [r3, #32]
 8008d38:	6978      	ldr	r0, [r7, #20]
 8008d3a:	4798      	blx	r3
}
 8008d3c:	bf00      	nop
 8008d3e:	3718      	adds	r7, #24
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	20001510 	.word	0x20001510

08008d48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d50:	f107 0308 	add.w	r3, r7, #8
 8008d54:	4618      	mov	r0, r3
 8008d56:	f000 f857 	bl	8008e08 <prvGetNextExpireTime>
 8008d5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	4619      	mov	r1, r3
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f000 f803 	bl	8008d6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008d66:	f000 f8d5 	bl	8008f14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d6a:	e7f1      	b.n	8008d50 <prvTimerTask+0x8>

08008d6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008d76:	f7ff f843 	bl	8007e00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d7a:	f107 0308 	add.w	r3, r7, #8
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f000 f866 	bl	8008e50 <prvSampleTimeNow>
 8008d84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d130      	bne.n	8008dee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10a      	bne.n	8008da8 <prvProcessTimerOrBlockTask+0x3c>
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d806      	bhi.n	8008da8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008d9a:	f7ff f83f 	bl	8007e1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008d9e:	68f9      	ldr	r1, [r7, #12]
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f7ff ff85 	bl	8008cb0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008da6:	e024      	b.n	8008df2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d008      	beq.n	8008dc0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008dae:	4b13      	ldr	r3, [pc, #76]	; (8008dfc <prvProcessTimerOrBlockTask+0x90>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d101      	bne.n	8008dbc <prvProcessTimerOrBlockTask+0x50>
 8008db8:	2301      	movs	r3, #1
 8008dba:	e000      	b.n	8008dbe <prvProcessTimerOrBlockTask+0x52>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008dc0:	4b0f      	ldr	r3, [pc, #60]	; (8008e00 <prvProcessTimerOrBlockTask+0x94>)
 8008dc2:	6818      	ldr	r0, [r3, #0]
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	4619      	mov	r1, r3
 8008dce:	f7fe fddb 	bl	8007988 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008dd2:	f7ff f823 	bl	8007e1c <xTaskResumeAll>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10a      	bne.n	8008df2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008ddc:	4b09      	ldr	r3, [pc, #36]	; (8008e04 <prvProcessTimerOrBlockTask+0x98>)
 8008dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008de2:	601a      	str	r2, [r3, #0]
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	f3bf 8f6f 	isb	sy
}
 8008dec:	e001      	b.n	8008df2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008dee:	f7ff f815 	bl	8007e1c <xTaskResumeAll>
}
 8008df2:	bf00      	nop
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	20001514 	.word	0x20001514
 8008e00:	20001518 	.word	0x20001518
 8008e04:	e000ed04 	.word	0xe000ed04

08008e08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008e10:	4b0e      	ldr	r3, [pc, #56]	; (8008e4c <prvGetNextExpireTime+0x44>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d101      	bne.n	8008e1e <prvGetNextExpireTime+0x16>
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	e000      	b.n	8008e20 <prvGetNextExpireTime+0x18>
 8008e1e:	2200      	movs	r2, #0
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d105      	bne.n	8008e38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e2c:	4b07      	ldr	r3, [pc, #28]	; (8008e4c <prvGetNextExpireTime+0x44>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	60fb      	str	r3, [r7, #12]
 8008e36:	e001      	b.n	8008e3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	20001510 	.word	0x20001510

08008e50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008e58:	f7ff f87e 	bl	8007f58 <xTaskGetTickCount>
 8008e5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008e5e:	4b0b      	ldr	r3, [pc, #44]	; (8008e8c <prvSampleTimeNow+0x3c>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d205      	bcs.n	8008e74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008e68:	f000 f936 	bl	80090d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	601a      	str	r2, [r3, #0]
 8008e72:	e002      	b.n	8008e7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008e7a:	4a04      	ldr	r2, [pc, #16]	; (8008e8c <prvSampleTimeNow+0x3c>)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008e80:	68fb      	ldr	r3, [r7, #12]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	20001520 	.word	0x20001520

08008e90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b086      	sub	sp, #24
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	607a      	str	r2, [r7, #4]
 8008e9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008eae:	68ba      	ldr	r2, [r7, #8]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d812      	bhi.n	8008edc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	1ad2      	subs	r2, r2, r3
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	699b      	ldr	r3, [r3, #24]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d302      	bcc.n	8008eca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	617b      	str	r3, [r7, #20]
 8008ec8:	e01b      	b.n	8008f02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008eca:	4b10      	ldr	r3, [pc, #64]	; (8008f0c <prvInsertTimerInActiveList+0x7c>)
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	3304      	adds	r3, #4
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	4610      	mov	r0, r2
 8008ed6:	f7fd ff5e 	bl	8006d96 <vListInsert>
 8008eda:	e012      	b.n	8008f02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d206      	bcs.n	8008ef2 <prvInsertTimerInActiveList+0x62>
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d302      	bcc.n	8008ef2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008eec:	2301      	movs	r3, #1
 8008eee:	617b      	str	r3, [r7, #20]
 8008ef0:	e007      	b.n	8008f02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ef2:	4b07      	ldr	r3, [pc, #28]	; (8008f10 <prvInsertTimerInActiveList+0x80>)
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	3304      	adds	r3, #4
 8008efa:	4619      	mov	r1, r3
 8008efc:	4610      	mov	r0, r2
 8008efe:	f7fd ff4a 	bl	8006d96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008f02:	697b      	ldr	r3, [r7, #20]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3718      	adds	r7, #24
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	20001514 	.word	0x20001514
 8008f10:	20001510 	.word	0x20001510

08008f14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b08e      	sub	sp, #56	; 0x38
 8008f18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f1a:	e0ca      	b.n	80090b2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	da18      	bge.n	8008f54 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008f22:	1d3b      	adds	r3, r7, #4
 8008f24:	3304      	adds	r3, #4
 8008f26:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10a      	bne.n	8008f44 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	61fb      	str	r3, [r7, #28]
}
 8008f40:	bf00      	nop
 8008f42:	e7fe      	b.n	8008f42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f4a:	6850      	ldr	r0, [r2, #4]
 8008f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f4e:	6892      	ldr	r2, [r2, #8]
 8008f50:	4611      	mov	r1, r2
 8008f52:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f2c0 80aa 	blt.w	80090b0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f62:	695b      	ldr	r3, [r3, #20]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d004      	beq.n	8008f72 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6a:	3304      	adds	r3, #4
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7fd ff4b 	bl	8006e08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f72:	463b      	mov	r3, r7
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7ff ff6b 	bl	8008e50 <prvSampleTimeNow>
 8008f7a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2b09      	cmp	r3, #9
 8008f80:	f200 8097 	bhi.w	80090b2 <prvProcessReceivedCommands+0x19e>
 8008f84:	a201      	add	r2, pc, #4	; (adr r2, 8008f8c <prvProcessReceivedCommands+0x78>)
 8008f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8a:	bf00      	nop
 8008f8c:	08008fb5 	.word	0x08008fb5
 8008f90:	08008fb5 	.word	0x08008fb5
 8008f94:	08008fb5 	.word	0x08008fb5
 8008f98:	08009029 	.word	0x08009029
 8008f9c:	0800903d 	.word	0x0800903d
 8008fa0:	08009087 	.word	0x08009087
 8008fa4:	08008fb5 	.word	0x08008fb5
 8008fa8:	08008fb5 	.word	0x08008fb5
 8008fac:	08009029 	.word	0x08009029
 8008fb0:	0800903d 	.word	0x0800903d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fba:	f043 0301 	orr.w	r3, r3, #1
 8008fbe:	b2da      	uxtb	r2, r3
 8008fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	18d1      	adds	r1, r2, r3
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fd4:	f7ff ff5c 	bl	8008e90 <prvInsertTimerInActiveList>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d069      	beq.n	80090b2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fe4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fec:	f003 0304 	and.w	r3, r3, #4
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d05e      	beq.n	80090b2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff8:	699b      	ldr	r3, [r3, #24]
 8008ffa:	441a      	add	r2, r3
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	9300      	str	r3, [sp, #0]
 8009000:	2300      	movs	r3, #0
 8009002:	2100      	movs	r1, #0
 8009004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009006:	f7ff fe05 	bl	8008c14 <xTimerGenericCommand>
 800900a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800900c:	6a3b      	ldr	r3, [r7, #32]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d14f      	bne.n	80090b2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009016:	f383 8811 	msr	BASEPRI, r3
 800901a:	f3bf 8f6f 	isb	sy
 800901e:	f3bf 8f4f 	dsb	sy
 8009022:	61bb      	str	r3, [r7, #24]
}
 8009024:	bf00      	nop
 8009026:	e7fe      	b.n	8009026 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800902e:	f023 0301 	bic.w	r3, r3, #1
 8009032:	b2da      	uxtb	r2, r3
 8009034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009036:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800903a:	e03a      	b.n	80090b2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800903c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009042:	f043 0301 	orr.w	r3, r3, #1
 8009046:	b2da      	uxtb	r2, r3
 8009048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800904e:	68ba      	ldr	r2, [r7, #8]
 8009050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009052:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10a      	bne.n	8009072 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800905c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009060:	f383 8811 	msr	BASEPRI, r3
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	617b      	str	r3, [r7, #20]
}
 800906e:	bf00      	nop
 8009070:	e7fe      	b.n	8009070 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009074:	699a      	ldr	r2, [r3, #24]
 8009076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009078:	18d1      	adds	r1, r2, r3
 800907a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800907e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009080:	f7ff ff06 	bl	8008e90 <prvInsertTimerInActiveList>
					break;
 8009084:	e015      	b.n	80090b2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009088:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800908c:	f003 0302 	and.w	r3, r3, #2
 8009090:	2b00      	cmp	r3, #0
 8009092:	d103      	bne.n	800909c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009096:	f000 fbdb 	bl	8009850 <vPortFree>
 800909a:	e00a      	b.n	80090b2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800909c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090a2:	f023 0301 	bic.w	r3, r3, #1
 80090a6:	b2da      	uxtb	r2, r3
 80090a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80090ae:	e000      	b.n	80090b2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80090b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090b2:	4b08      	ldr	r3, [pc, #32]	; (80090d4 <prvProcessReceivedCommands+0x1c0>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	1d39      	adds	r1, r7, #4
 80090b8:	2200      	movs	r2, #0
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fe f9a6 	bl	800740c <xQueueReceive>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f47f af2a 	bne.w	8008f1c <prvProcessReceivedCommands+0x8>
	}
}
 80090c8:	bf00      	nop
 80090ca:	bf00      	nop
 80090cc:	3730      	adds	r7, #48	; 0x30
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	20001518 	.word	0x20001518

080090d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b088      	sub	sp, #32
 80090dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80090de:	e048      	b.n	8009172 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80090e0:	4b2d      	ldr	r3, [pc, #180]	; (8009198 <prvSwitchTimerLists+0xc0>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090ea:	4b2b      	ldr	r3, [pc, #172]	; (8009198 <prvSwitchTimerLists+0xc0>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	3304      	adds	r3, #4
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7fd fe85 	bl	8006e08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6a1b      	ldr	r3, [r3, #32]
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800910c:	f003 0304 	and.w	r3, r3, #4
 8009110:	2b00      	cmp	r3, #0
 8009112:	d02e      	beq.n	8009172 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	699b      	ldr	r3, [r3, #24]
 8009118:	693a      	ldr	r2, [r7, #16]
 800911a:	4413      	add	r3, r2
 800911c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800911e:	68ba      	ldr	r2, [r7, #8]
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	429a      	cmp	r2, r3
 8009124:	d90e      	bls.n	8009144 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	68ba      	ldr	r2, [r7, #8]
 800912a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009132:	4b19      	ldr	r3, [pc, #100]	; (8009198 <prvSwitchTimerLists+0xc0>)
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	3304      	adds	r3, #4
 800913a:	4619      	mov	r1, r3
 800913c:	4610      	mov	r0, r2
 800913e:	f7fd fe2a 	bl	8006d96 <vListInsert>
 8009142:	e016      	b.n	8009172 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009144:	2300      	movs	r3, #0
 8009146:	9300      	str	r3, [sp, #0]
 8009148:	2300      	movs	r3, #0
 800914a:	693a      	ldr	r2, [r7, #16]
 800914c:	2100      	movs	r1, #0
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f7ff fd60 	bl	8008c14 <xTimerGenericCommand>
 8009154:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10a      	bne.n	8009172 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800915c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009160:	f383 8811 	msr	BASEPRI, r3
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	f3bf 8f4f 	dsb	sy
 800916c:	603b      	str	r3, [r7, #0]
}
 800916e:	bf00      	nop
 8009170:	e7fe      	b.n	8009170 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009172:	4b09      	ldr	r3, [pc, #36]	; (8009198 <prvSwitchTimerLists+0xc0>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1b1      	bne.n	80090e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800917c:	4b06      	ldr	r3, [pc, #24]	; (8009198 <prvSwitchTimerLists+0xc0>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009182:	4b06      	ldr	r3, [pc, #24]	; (800919c <prvSwitchTimerLists+0xc4>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a04      	ldr	r2, [pc, #16]	; (8009198 <prvSwitchTimerLists+0xc0>)
 8009188:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800918a:	4a04      	ldr	r2, [pc, #16]	; (800919c <prvSwitchTimerLists+0xc4>)
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	6013      	str	r3, [r2, #0]
}
 8009190:	bf00      	nop
 8009192:	3718      	adds	r7, #24
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	20001510 	.word	0x20001510
 800919c:	20001514 	.word	0x20001514

080091a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80091a6:	f000 f965 	bl	8009474 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80091aa:	4b15      	ldr	r3, [pc, #84]	; (8009200 <prvCheckForValidListAndQueue+0x60>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d120      	bne.n	80091f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80091b2:	4814      	ldr	r0, [pc, #80]	; (8009204 <prvCheckForValidListAndQueue+0x64>)
 80091b4:	f7fd fd9e 	bl	8006cf4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80091b8:	4813      	ldr	r0, [pc, #76]	; (8009208 <prvCheckForValidListAndQueue+0x68>)
 80091ba:	f7fd fd9b 	bl	8006cf4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80091be:	4b13      	ldr	r3, [pc, #76]	; (800920c <prvCheckForValidListAndQueue+0x6c>)
 80091c0:	4a10      	ldr	r2, [pc, #64]	; (8009204 <prvCheckForValidListAndQueue+0x64>)
 80091c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80091c4:	4b12      	ldr	r3, [pc, #72]	; (8009210 <prvCheckForValidListAndQueue+0x70>)
 80091c6:	4a10      	ldr	r2, [pc, #64]	; (8009208 <prvCheckForValidListAndQueue+0x68>)
 80091c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80091ca:	2300      	movs	r3, #0
 80091cc:	9300      	str	r3, [sp, #0]
 80091ce:	4b11      	ldr	r3, [pc, #68]	; (8009214 <prvCheckForValidListAndQueue+0x74>)
 80091d0:	4a11      	ldr	r2, [pc, #68]	; (8009218 <prvCheckForValidListAndQueue+0x78>)
 80091d2:	2110      	movs	r1, #16
 80091d4:	200a      	movs	r0, #10
 80091d6:	f7fd fea9 	bl	8006f2c <xQueueGenericCreateStatic>
 80091da:	4603      	mov	r3, r0
 80091dc:	4a08      	ldr	r2, [pc, #32]	; (8009200 <prvCheckForValidListAndQueue+0x60>)
 80091de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80091e0:	4b07      	ldr	r3, [pc, #28]	; (8009200 <prvCheckForValidListAndQueue+0x60>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d005      	beq.n	80091f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80091e8:	4b05      	ldr	r3, [pc, #20]	; (8009200 <prvCheckForValidListAndQueue+0x60>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	490b      	ldr	r1, [pc, #44]	; (800921c <prvCheckForValidListAndQueue+0x7c>)
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fe fba0 	bl	8007934 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091f4:	f000 f96e 	bl	80094d4 <vPortExitCritical>
}
 80091f8:	bf00      	nop
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	20001518 	.word	0x20001518
 8009204:	200014e8 	.word	0x200014e8
 8009208:	200014fc 	.word	0x200014fc
 800920c:	20001510 	.word	0x20001510
 8009210:	20001514 	.word	0x20001514
 8009214:	200015c4 	.word	0x200015c4
 8009218:	20001524 	.word	0x20001524
 800921c:	0800ac30 	.word	0x0800ac30

08009220 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009220:	b480      	push	{r7}
 8009222:	b085      	sub	sp, #20
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	3b04      	subs	r3, #4
 8009230:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009238:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	3b04      	subs	r3, #4
 800923e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	f023 0201 	bic.w	r2, r3, #1
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	3b04      	subs	r3, #4
 800924e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009250:	4a0c      	ldr	r2, [pc, #48]	; (8009284 <pxPortInitialiseStack+0x64>)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	3b14      	subs	r3, #20
 800925a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	3b04      	subs	r3, #4
 8009266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f06f 0202 	mvn.w	r2, #2
 800926e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	3b20      	subs	r3, #32
 8009274:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009276:	68fb      	ldr	r3, [r7, #12]
}
 8009278:	4618      	mov	r0, r3
 800927a:	3714      	adds	r7, #20
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr
 8009284:	08009289 	.word	0x08009289

08009288 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800928e:	2300      	movs	r3, #0
 8009290:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009292:	4b12      	ldr	r3, [pc, #72]	; (80092dc <prvTaskExitError+0x54>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800929a:	d00a      	beq.n	80092b2 <prvTaskExitError+0x2a>
	__asm volatile
 800929c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a0:	f383 8811 	msr	BASEPRI, r3
 80092a4:	f3bf 8f6f 	isb	sy
 80092a8:	f3bf 8f4f 	dsb	sy
 80092ac:	60fb      	str	r3, [r7, #12]
}
 80092ae:	bf00      	nop
 80092b0:	e7fe      	b.n	80092b0 <prvTaskExitError+0x28>
	__asm volatile
 80092b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b6:	f383 8811 	msr	BASEPRI, r3
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	60bb      	str	r3, [r7, #8]
}
 80092c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80092c6:	bf00      	nop
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d0fc      	beq.n	80092c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80092ce:	bf00      	nop
 80092d0:	bf00      	nop
 80092d2:	3714      	adds	r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr
 80092dc:	20000040 	.word	0x20000040

080092e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80092e0:	4b07      	ldr	r3, [pc, #28]	; (8009300 <pxCurrentTCBConst2>)
 80092e2:	6819      	ldr	r1, [r3, #0]
 80092e4:	6808      	ldr	r0, [r1, #0]
 80092e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ea:	f380 8809 	msr	PSP, r0
 80092ee:	f3bf 8f6f 	isb	sy
 80092f2:	f04f 0000 	mov.w	r0, #0
 80092f6:	f380 8811 	msr	BASEPRI, r0
 80092fa:	4770      	bx	lr
 80092fc:	f3af 8000 	nop.w

08009300 <pxCurrentTCBConst2>:
 8009300:	20000fe8 	.word	0x20000fe8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009304:	bf00      	nop
 8009306:	bf00      	nop

08009308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009308:	4808      	ldr	r0, [pc, #32]	; (800932c <prvPortStartFirstTask+0x24>)
 800930a:	6800      	ldr	r0, [r0, #0]
 800930c:	6800      	ldr	r0, [r0, #0]
 800930e:	f380 8808 	msr	MSP, r0
 8009312:	f04f 0000 	mov.w	r0, #0
 8009316:	f380 8814 	msr	CONTROL, r0
 800931a:	b662      	cpsie	i
 800931c:	b661      	cpsie	f
 800931e:	f3bf 8f4f 	dsb	sy
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	df00      	svc	0
 8009328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800932a:	bf00      	nop
 800932c:	e000ed08 	.word	0xe000ed08

08009330 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009336:	4b46      	ldr	r3, [pc, #280]	; (8009450 <xPortStartScheduler+0x120>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a46      	ldr	r2, [pc, #280]	; (8009454 <xPortStartScheduler+0x124>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d10a      	bne.n	8009356 <xPortStartScheduler+0x26>
	__asm volatile
 8009340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009344:	f383 8811 	msr	BASEPRI, r3
 8009348:	f3bf 8f6f 	isb	sy
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	613b      	str	r3, [r7, #16]
}
 8009352:	bf00      	nop
 8009354:	e7fe      	b.n	8009354 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009356:	4b3e      	ldr	r3, [pc, #248]	; (8009450 <xPortStartScheduler+0x120>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a3f      	ldr	r2, [pc, #252]	; (8009458 <xPortStartScheduler+0x128>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d10a      	bne.n	8009376 <xPortStartScheduler+0x46>
	__asm volatile
 8009360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009364:	f383 8811 	msr	BASEPRI, r3
 8009368:	f3bf 8f6f 	isb	sy
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	60fb      	str	r3, [r7, #12]
}
 8009372:	bf00      	nop
 8009374:	e7fe      	b.n	8009374 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009376:	4b39      	ldr	r3, [pc, #228]	; (800945c <xPortStartScheduler+0x12c>)
 8009378:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	b2db      	uxtb	r3, r3
 8009380:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	22ff      	movs	r2, #255	; 0xff
 8009386:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	b2db      	uxtb	r3, r3
 800938e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009390:	78fb      	ldrb	r3, [r7, #3]
 8009392:	b2db      	uxtb	r3, r3
 8009394:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009398:	b2da      	uxtb	r2, r3
 800939a:	4b31      	ldr	r3, [pc, #196]	; (8009460 <xPortStartScheduler+0x130>)
 800939c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800939e:	4b31      	ldr	r3, [pc, #196]	; (8009464 <xPortStartScheduler+0x134>)
 80093a0:	2207      	movs	r2, #7
 80093a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093a4:	e009      	b.n	80093ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80093a6:	4b2f      	ldr	r3, [pc, #188]	; (8009464 <xPortStartScheduler+0x134>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	3b01      	subs	r3, #1
 80093ac:	4a2d      	ldr	r2, [pc, #180]	; (8009464 <xPortStartScheduler+0x134>)
 80093ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80093b0:	78fb      	ldrb	r3, [r7, #3]
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	005b      	lsls	r3, r3, #1
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093ba:	78fb      	ldrb	r3, [r7, #3]
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093c2:	2b80      	cmp	r3, #128	; 0x80
 80093c4:	d0ef      	beq.n	80093a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80093c6:	4b27      	ldr	r3, [pc, #156]	; (8009464 <xPortStartScheduler+0x134>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f1c3 0307 	rsb	r3, r3, #7
 80093ce:	2b04      	cmp	r3, #4
 80093d0:	d00a      	beq.n	80093e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80093d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d6:	f383 8811 	msr	BASEPRI, r3
 80093da:	f3bf 8f6f 	isb	sy
 80093de:	f3bf 8f4f 	dsb	sy
 80093e2:	60bb      	str	r3, [r7, #8]
}
 80093e4:	bf00      	nop
 80093e6:	e7fe      	b.n	80093e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80093e8:	4b1e      	ldr	r3, [pc, #120]	; (8009464 <xPortStartScheduler+0x134>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	021b      	lsls	r3, r3, #8
 80093ee:	4a1d      	ldr	r2, [pc, #116]	; (8009464 <xPortStartScheduler+0x134>)
 80093f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80093f2:	4b1c      	ldr	r3, [pc, #112]	; (8009464 <xPortStartScheduler+0x134>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80093fa:	4a1a      	ldr	r2, [pc, #104]	; (8009464 <xPortStartScheduler+0x134>)
 80093fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	b2da      	uxtb	r2, r3
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009406:	4b18      	ldr	r3, [pc, #96]	; (8009468 <xPortStartScheduler+0x138>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a17      	ldr	r2, [pc, #92]	; (8009468 <xPortStartScheduler+0x138>)
 800940c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009410:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009412:	4b15      	ldr	r3, [pc, #84]	; (8009468 <xPortStartScheduler+0x138>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a14      	ldr	r2, [pc, #80]	; (8009468 <xPortStartScheduler+0x138>)
 8009418:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800941c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800941e:	f000 f8dd 	bl	80095dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009422:	4b12      	ldr	r3, [pc, #72]	; (800946c <xPortStartScheduler+0x13c>)
 8009424:	2200      	movs	r2, #0
 8009426:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009428:	f000 f8fc 	bl	8009624 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800942c:	4b10      	ldr	r3, [pc, #64]	; (8009470 <xPortStartScheduler+0x140>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a0f      	ldr	r2, [pc, #60]	; (8009470 <xPortStartScheduler+0x140>)
 8009432:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009436:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009438:	f7ff ff66 	bl	8009308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800943c:	f7fe fe68 	bl	8008110 <vTaskSwitchContext>
	prvTaskExitError();
 8009440:	f7ff ff22 	bl	8009288 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009444:	2300      	movs	r3, #0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3718      	adds	r7, #24
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	e000ed00 	.word	0xe000ed00
 8009454:	410fc271 	.word	0x410fc271
 8009458:	410fc270 	.word	0x410fc270
 800945c:	e000e400 	.word	0xe000e400
 8009460:	20001614 	.word	0x20001614
 8009464:	20001618 	.word	0x20001618
 8009468:	e000ed20 	.word	0xe000ed20
 800946c:	20000040 	.word	0x20000040
 8009470:	e000ef34 	.word	0xe000ef34

08009474 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
	__asm volatile
 800947a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947e:	f383 8811 	msr	BASEPRI, r3
 8009482:	f3bf 8f6f 	isb	sy
 8009486:	f3bf 8f4f 	dsb	sy
 800948a:	607b      	str	r3, [r7, #4]
}
 800948c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800948e:	4b0f      	ldr	r3, [pc, #60]	; (80094cc <vPortEnterCritical+0x58>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3301      	adds	r3, #1
 8009494:	4a0d      	ldr	r2, [pc, #52]	; (80094cc <vPortEnterCritical+0x58>)
 8009496:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009498:	4b0c      	ldr	r3, [pc, #48]	; (80094cc <vPortEnterCritical+0x58>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b01      	cmp	r3, #1
 800949e:	d10f      	bne.n	80094c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80094a0:	4b0b      	ldr	r3, [pc, #44]	; (80094d0 <vPortEnterCritical+0x5c>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00a      	beq.n	80094c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80094aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ae:	f383 8811 	msr	BASEPRI, r3
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	603b      	str	r3, [r7, #0]
}
 80094bc:	bf00      	nop
 80094be:	e7fe      	b.n	80094be <vPortEnterCritical+0x4a>
	}
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr
 80094cc:	20000040 	.word	0x20000040
 80094d0:	e000ed04 	.word	0xe000ed04

080094d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80094da:	4b12      	ldr	r3, [pc, #72]	; (8009524 <vPortExitCritical+0x50>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d10a      	bne.n	80094f8 <vPortExitCritical+0x24>
	__asm volatile
 80094e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e6:	f383 8811 	msr	BASEPRI, r3
 80094ea:	f3bf 8f6f 	isb	sy
 80094ee:	f3bf 8f4f 	dsb	sy
 80094f2:	607b      	str	r3, [r7, #4]
}
 80094f4:	bf00      	nop
 80094f6:	e7fe      	b.n	80094f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80094f8:	4b0a      	ldr	r3, [pc, #40]	; (8009524 <vPortExitCritical+0x50>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	3b01      	subs	r3, #1
 80094fe:	4a09      	ldr	r2, [pc, #36]	; (8009524 <vPortExitCritical+0x50>)
 8009500:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009502:	4b08      	ldr	r3, [pc, #32]	; (8009524 <vPortExitCritical+0x50>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d105      	bne.n	8009516 <vPortExitCritical+0x42>
 800950a:	2300      	movs	r3, #0
 800950c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	f383 8811 	msr	BASEPRI, r3
}
 8009514:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009516:	bf00      	nop
 8009518:	370c      	adds	r7, #12
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	20000040 	.word	0x20000040
	...

08009530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009530:	f3ef 8009 	mrs	r0, PSP
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	4b15      	ldr	r3, [pc, #84]	; (8009590 <pxCurrentTCBConst>)
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	f01e 0f10 	tst.w	lr, #16
 8009540:	bf08      	it	eq
 8009542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800954a:	6010      	str	r0, [r2, #0]
 800954c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009550:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009554:	f380 8811 	msr	BASEPRI, r0
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	f3bf 8f6f 	isb	sy
 8009560:	f7fe fdd6 	bl	8008110 <vTaskSwitchContext>
 8009564:	f04f 0000 	mov.w	r0, #0
 8009568:	f380 8811 	msr	BASEPRI, r0
 800956c:	bc09      	pop	{r0, r3}
 800956e:	6819      	ldr	r1, [r3, #0]
 8009570:	6808      	ldr	r0, [r1, #0]
 8009572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009576:	f01e 0f10 	tst.w	lr, #16
 800957a:	bf08      	it	eq
 800957c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009580:	f380 8809 	msr	PSP, r0
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	f3af 8000 	nop.w

08009590 <pxCurrentTCBConst>:
 8009590:	20000fe8 	.word	0x20000fe8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009594:	bf00      	nop
 8009596:	bf00      	nop

08009598 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
	__asm volatile
 800959e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a2:	f383 8811 	msr	BASEPRI, r3
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	607b      	str	r3, [r7, #4]
}
 80095b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80095b2:	f7fe fcf3 	bl	8007f9c <xTaskIncrementTick>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d003      	beq.n	80095c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80095bc:	4b06      	ldr	r3, [pc, #24]	; (80095d8 <xPortSysTickHandler+0x40>)
 80095be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095c2:	601a      	str	r2, [r3, #0]
 80095c4:	2300      	movs	r3, #0
 80095c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	f383 8811 	msr	BASEPRI, r3
}
 80095ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80095d0:	bf00      	nop
 80095d2:	3708      	adds	r7, #8
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	e000ed04 	.word	0xe000ed04

080095dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80095dc:	b480      	push	{r7}
 80095de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80095e0:	4b0b      	ldr	r3, [pc, #44]	; (8009610 <vPortSetupTimerInterrupt+0x34>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80095e6:	4b0b      	ldr	r3, [pc, #44]	; (8009614 <vPortSetupTimerInterrupt+0x38>)
 80095e8:	2200      	movs	r2, #0
 80095ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80095ec:	4b0a      	ldr	r3, [pc, #40]	; (8009618 <vPortSetupTimerInterrupt+0x3c>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a0a      	ldr	r2, [pc, #40]	; (800961c <vPortSetupTimerInterrupt+0x40>)
 80095f2:	fba2 2303 	umull	r2, r3, r2, r3
 80095f6:	099b      	lsrs	r3, r3, #6
 80095f8:	4a09      	ldr	r2, [pc, #36]	; (8009620 <vPortSetupTimerInterrupt+0x44>)
 80095fa:	3b01      	subs	r3, #1
 80095fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80095fe:	4b04      	ldr	r3, [pc, #16]	; (8009610 <vPortSetupTimerInterrupt+0x34>)
 8009600:	2207      	movs	r2, #7
 8009602:	601a      	str	r2, [r3, #0]
}
 8009604:	bf00      	nop
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr
 800960e:	bf00      	nop
 8009610:	e000e010 	.word	0xe000e010
 8009614:	e000e018 	.word	0xe000e018
 8009618:	20000000 	.word	0x20000000
 800961c:	10624dd3 	.word	0x10624dd3
 8009620:	e000e014 	.word	0xe000e014

08009624 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009624:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009634 <vPortEnableVFP+0x10>
 8009628:	6801      	ldr	r1, [r0, #0]
 800962a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800962e:	6001      	str	r1, [r0, #0]
 8009630:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009632:	bf00      	nop
 8009634:	e000ed88 	.word	0xe000ed88

08009638 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800963e:	f3ef 8305 	mrs	r3, IPSR
 8009642:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2b0f      	cmp	r3, #15
 8009648:	d914      	bls.n	8009674 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800964a:	4a17      	ldr	r2, [pc, #92]	; (80096a8 <vPortValidateInterruptPriority+0x70>)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	4413      	add	r3, r2
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009654:	4b15      	ldr	r3, [pc, #84]	; (80096ac <vPortValidateInterruptPriority+0x74>)
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	7afa      	ldrb	r2, [r7, #11]
 800965a:	429a      	cmp	r2, r3
 800965c:	d20a      	bcs.n	8009674 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800965e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009662:	f383 8811 	msr	BASEPRI, r3
 8009666:	f3bf 8f6f 	isb	sy
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	607b      	str	r3, [r7, #4]
}
 8009670:	bf00      	nop
 8009672:	e7fe      	b.n	8009672 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009674:	4b0e      	ldr	r3, [pc, #56]	; (80096b0 <vPortValidateInterruptPriority+0x78>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800967c:	4b0d      	ldr	r3, [pc, #52]	; (80096b4 <vPortValidateInterruptPriority+0x7c>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	429a      	cmp	r2, r3
 8009682:	d90a      	bls.n	800969a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009688:	f383 8811 	msr	BASEPRI, r3
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	603b      	str	r3, [r7, #0]
}
 8009696:	bf00      	nop
 8009698:	e7fe      	b.n	8009698 <vPortValidateInterruptPriority+0x60>
	}
 800969a:	bf00      	nop
 800969c:	3714      	adds	r7, #20
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop
 80096a8:	e000e3f0 	.word	0xe000e3f0
 80096ac:	20001614 	.word	0x20001614
 80096b0:	e000ed0c 	.word	0xe000ed0c
 80096b4:	20001618 	.word	0x20001618

080096b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b08a      	sub	sp, #40	; 0x28
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80096c0:	2300      	movs	r3, #0
 80096c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80096c4:	f7fe fb9c 	bl	8007e00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80096c8:	4b5b      	ldr	r3, [pc, #364]	; (8009838 <pvPortMalloc+0x180>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d101      	bne.n	80096d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80096d0:	f000 f920 	bl	8009914 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80096d4:	4b59      	ldr	r3, [pc, #356]	; (800983c <pvPortMalloc+0x184>)
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4013      	ands	r3, r2
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f040 8093 	bne.w	8009808 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d01d      	beq.n	8009724 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80096e8:	2208      	movs	r2, #8
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4413      	add	r3, r2
 80096ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f003 0307 	and.w	r3, r3, #7
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d014      	beq.n	8009724 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f023 0307 	bic.w	r3, r3, #7
 8009700:	3308      	adds	r3, #8
 8009702:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f003 0307 	and.w	r3, r3, #7
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00a      	beq.n	8009724 <pvPortMalloc+0x6c>
	__asm volatile
 800970e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009712:	f383 8811 	msr	BASEPRI, r3
 8009716:	f3bf 8f6f 	isb	sy
 800971a:	f3bf 8f4f 	dsb	sy
 800971e:	617b      	str	r3, [r7, #20]
}
 8009720:	bf00      	nop
 8009722:	e7fe      	b.n	8009722 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d06e      	beq.n	8009808 <pvPortMalloc+0x150>
 800972a:	4b45      	ldr	r3, [pc, #276]	; (8009840 <pvPortMalloc+0x188>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	429a      	cmp	r2, r3
 8009732:	d869      	bhi.n	8009808 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009734:	4b43      	ldr	r3, [pc, #268]	; (8009844 <pvPortMalloc+0x18c>)
 8009736:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009738:	4b42      	ldr	r3, [pc, #264]	; (8009844 <pvPortMalloc+0x18c>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800973e:	e004      	b.n	800974a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009742:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800974a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	429a      	cmp	r2, r3
 8009752:	d903      	bls.n	800975c <pvPortMalloc+0xa4>
 8009754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1f1      	bne.n	8009740 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800975c:	4b36      	ldr	r3, [pc, #216]	; (8009838 <pvPortMalloc+0x180>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009762:	429a      	cmp	r2, r3
 8009764:	d050      	beq.n	8009808 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009766:	6a3b      	ldr	r3, [r7, #32]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2208      	movs	r2, #8
 800976c:	4413      	add	r3, r2
 800976e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	6a3b      	ldr	r3, [r7, #32]
 8009776:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977a:	685a      	ldr	r2, [r3, #4]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	1ad2      	subs	r2, r2, r3
 8009780:	2308      	movs	r3, #8
 8009782:	005b      	lsls	r3, r3, #1
 8009784:	429a      	cmp	r2, r3
 8009786:	d91f      	bls.n	80097c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4413      	add	r3, r2
 800978e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	f003 0307 	and.w	r3, r3, #7
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00a      	beq.n	80097b0 <pvPortMalloc+0xf8>
	__asm volatile
 800979a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979e:	f383 8811 	msr	BASEPRI, r3
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	f3bf 8f4f 	dsb	sy
 80097aa:	613b      	str	r3, [r7, #16]
}
 80097ac:	bf00      	nop
 80097ae:	e7fe      	b.n	80097ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80097b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b2:	685a      	ldr	r2, [r3, #4]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	1ad2      	subs	r2, r2, r3
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80097bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80097c2:	69b8      	ldr	r0, [r7, #24]
 80097c4:	f000 f908 	bl	80099d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80097c8:	4b1d      	ldr	r3, [pc, #116]	; (8009840 <pvPortMalloc+0x188>)
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	4a1b      	ldr	r2, [pc, #108]	; (8009840 <pvPortMalloc+0x188>)
 80097d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80097d6:	4b1a      	ldr	r3, [pc, #104]	; (8009840 <pvPortMalloc+0x188>)
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	4b1b      	ldr	r3, [pc, #108]	; (8009848 <pvPortMalloc+0x190>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	429a      	cmp	r2, r3
 80097e0:	d203      	bcs.n	80097ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80097e2:	4b17      	ldr	r3, [pc, #92]	; (8009840 <pvPortMalloc+0x188>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a18      	ldr	r2, [pc, #96]	; (8009848 <pvPortMalloc+0x190>)
 80097e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80097ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ec:	685a      	ldr	r2, [r3, #4]
 80097ee:	4b13      	ldr	r3, [pc, #76]	; (800983c <pvPortMalloc+0x184>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	431a      	orrs	r2, r3
 80097f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80097f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fa:	2200      	movs	r2, #0
 80097fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80097fe:	4b13      	ldr	r3, [pc, #76]	; (800984c <pvPortMalloc+0x194>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3301      	adds	r3, #1
 8009804:	4a11      	ldr	r2, [pc, #68]	; (800984c <pvPortMalloc+0x194>)
 8009806:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009808:	f7fe fb08 	bl	8007e1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	f003 0307 	and.w	r3, r3, #7
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00a      	beq.n	800982c <pvPortMalloc+0x174>
	__asm volatile
 8009816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981a:	f383 8811 	msr	BASEPRI, r3
 800981e:	f3bf 8f6f 	isb	sy
 8009822:	f3bf 8f4f 	dsb	sy
 8009826:	60fb      	str	r3, [r7, #12]
}
 8009828:	bf00      	nop
 800982a:	e7fe      	b.n	800982a <pvPortMalloc+0x172>
	return pvReturn;
 800982c:	69fb      	ldr	r3, [r7, #28]
}
 800982e:	4618      	mov	r0, r3
 8009830:	3728      	adds	r7, #40	; 0x28
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	200021dc 	.word	0x200021dc
 800983c:	200021f0 	.word	0x200021f0
 8009840:	200021e0 	.word	0x200021e0
 8009844:	200021d4 	.word	0x200021d4
 8009848:	200021e4 	.word	0x200021e4
 800984c:	200021e8 	.word	0x200021e8

08009850 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b086      	sub	sp, #24
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d04d      	beq.n	80098fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009862:	2308      	movs	r3, #8
 8009864:	425b      	negs	r3, r3
 8009866:	697a      	ldr	r2, [r7, #20]
 8009868:	4413      	add	r3, r2
 800986a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	685a      	ldr	r2, [r3, #4]
 8009874:	4b24      	ldr	r3, [pc, #144]	; (8009908 <vPortFree+0xb8>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4013      	ands	r3, r2
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10a      	bne.n	8009894 <vPortFree+0x44>
	__asm volatile
 800987e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009882:	f383 8811 	msr	BASEPRI, r3
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	60fb      	str	r3, [r7, #12]
}
 8009890:	bf00      	nop
 8009892:	e7fe      	b.n	8009892 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d00a      	beq.n	80098b2 <vPortFree+0x62>
	__asm volatile
 800989c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a0:	f383 8811 	msr	BASEPRI, r3
 80098a4:	f3bf 8f6f 	isb	sy
 80098a8:	f3bf 8f4f 	dsb	sy
 80098ac:	60bb      	str	r3, [r7, #8]
}
 80098ae:	bf00      	nop
 80098b0:	e7fe      	b.n	80098b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	685a      	ldr	r2, [r3, #4]
 80098b6:	4b14      	ldr	r3, [pc, #80]	; (8009908 <vPortFree+0xb8>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4013      	ands	r3, r2
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d01e      	beq.n	80098fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d11a      	bne.n	80098fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	685a      	ldr	r2, [r3, #4]
 80098cc:	4b0e      	ldr	r3, [pc, #56]	; (8009908 <vPortFree+0xb8>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	43db      	mvns	r3, r3
 80098d2:	401a      	ands	r2, r3
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80098d8:	f7fe fa92 	bl	8007e00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	685a      	ldr	r2, [r3, #4]
 80098e0:	4b0a      	ldr	r3, [pc, #40]	; (800990c <vPortFree+0xbc>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4413      	add	r3, r2
 80098e6:	4a09      	ldr	r2, [pc, #36]	; (800990c <vPortFree+0xbc>)
 80098e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80098ea:	6938      	ldr	r0, [r7, #16]
 80098ec:	f000 f874 	bl	80099d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80098f0:	4b07      	ldr	r3, [pc, #28]	; (8009910 <vPortFree+0xc0>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	3301      	adds	r3, #1
 80098f6:	4a06      	ldr	r2, [pc, #24]	; (8009910 <vPortFree+0xc0>)
 80098f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80098fa:	f7fe fa8f 	bl	8007e1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80098fe:	bf00      	nop
 8009900:	3718      	adds	r7, #24
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	200021f0 	.word	0x200021f0
 800990c:	200021e0 	.word	0x200021e0
 8009910:	200021ec 	.word	0x200021ec

08009914 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009914:	b480      	push	{r7}
 8009916:	b085      	sub	sp, #20
 8009918:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800991a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800991e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009920:	4b27      	ldr	r3, [pc, #156]	; (80099c0 <prvHeapInit+0xac>)
 8009922:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f003 0307 	and.w	r3, r3, #7
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00c      	beq.n	8009948 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	3307      	adds	r3, #7
 8009932:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f023 0307 	bic.w	r3, r3, #7
 800993a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800993c:	68ba      	ldr	r2, [r7, #8]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	4a1f      	ldr	r2, [pc, #124]	; (80099c0 <prvHeapInit+0xac>)
 8009944:	4413      	add	r3, r2
 8009946:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800994c:	4a1d      	ldr	r2, [pc, #116]	; (80099c4 <prvHeapInit+0xb0>)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009952:	4b1c      	ldr	r3, [pc, #112]	; (80099c4 <prvHeapInit+0xb0>)
 8009954:	2200      	movs	r2, #0
 8009956:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	4413      	add	r3, r2
 800995e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009960:	2208      	movs	r2, #8
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	1a9b      	subs	r3, r3, r2
 8009966:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f023 0307 	bic.w	r3, r3, #7
 800996e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	4a15      	ldr	r2, [pc, #84]	; (80099c8 <prvHeapInit+0xb4>)
 8009974:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009976:	4b14      	ldr	r3, [pc, #80]	; (80099c8 <prvHeapInit+0xb4>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2200      	movs	r2, #0
 800997c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800997e:	4b12      	ldr	r3, [pc, #72]	; (80099c8 <prvHeapInit+0xb4>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2200      	movs	r2, #0
 8009984:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	1ad2      	subs	r2, r2, r3
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009994:	4b0c      	ldr	r3, [pc, #48]	; (80099c8 <prvHeapInit+0xb4>)
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	4a0a      	ldr	r2, [pc, #40]	; (80099cc <prvHeapInit+0xb8>)
 80099a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	4a09      	ldr	r2, [pc, #36]	; (80099d0 <prvHeapInit+0xbc>)
 80099aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80099ac:	4b09      	ldr	r3, [pc, #36]	; (80099d4 <prvHeapInit+0xc0>)
 80099ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80099b2:	601a      	str	r2, [r3, #0]
}
 80099b4:	bf00      	nop
 80099b6:	3714      	adds	r7, #20
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr
 80099c0:	2000161c 	.word	0x2000161c
 80099c4:	200021d4 	.word	0x200021d4
 80099c8:	200021dc 	.word	0x200021dc
 80099cc:	200021e4 	.word	0x200021e4
 80099d0:	200021e0 	.word	0x200021e0
 80099d4:	200021f0 	.word	0x200021f0

080099d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80099e0:	4b28      	ldr	r3, [pc, #160]	; (8009a84 <prvInsertBlockIntoFreeList+0xac>)
 80099e2:	60fb      	str	r3, [r7, #12]
 80099e4:	e002      	b.n	80099ec <prvInsertBlockIntoFreeList+0x14>
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	60fb      	str	r3, [r7, #12]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d8f7      	bhi.n	80099e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	68ba      	ldr	r2, [r7, #8]
 8009a00:	4413      	add	r3, r2
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d108      	bne.n	8009a1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	685a      	ldr	r2, [r3, #4]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	441a      	add	r2, r3
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	68ba      	ldr	r2, [r7, #8]
 8009a24:	441a      	add	r2, r3
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d118      	bne.n	8009a60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	4b15      	ldr	r3, [pc, #84]	; (8009a88 <prvInsertBlockIntoFreeList+0xb0>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d00d      	beq.n	8009a56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	685a      	ldr	r2, [r3, #4]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	441a      	add	r2, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	e008      	b.n	8009a68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a56:	4b0c      	ldr	r3, [pc, #48]	; (8009a88 <prvInsertBlockIntoFreeList+0xb0>)
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	601a      	str	r2, [r3, #0]
 8009a5e:	e003      	b.n	8009a68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d002      	beq.n	8009a76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a76:	bf00      	nop
 8009a78:	3714      	adds	r7, #20
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	200021d4 	.word	0x200021d4
 8009a88:	200021dc 	.word	0x200021dc

08009a8c <__errno>:
 8009a8c:	4b01      	ldr	r3, [pc, #4]	; (8009a94 <__errno+0x8>)
 8009a8e:	6818      	ldr	r0, [r3, #0]
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop
 8009a94:	20000044 	.word	0x20000044

08009a98 <__libc_init_array>:
 8009a98:	b570      	push	{r4, r5, r6, lr}
 8009a9a:	4d0d      	ldr	r5, [pc, #52]	; (8009ad0 <__libc_init_array+0x38>)
 8009a9c:	4c0d      	ldr	r4, [pc, #52]	; (8009ad4 <__libc_init_array+0x3c>)
 8009a9e:	1b64      	subs	r4, r4, r5
 8009aa0:	10a4      	asrs	r4, r4, #2
 8009aa2:	2600      	movs	r6, #0
 8009aa4:	42a6      	cmp	r6, r4
 8009aa6:	d109      	bne.n	8009abc <__libc_init_array+0x24>
 8009aa8:	4d0b      	ldr	r5, [pc, #44]	; (8009ad8 <__libc_init_array+0x40>)
 8009aaa:	4c0c      	ldr	r4, [pc, #48]	; (8009adc <__libc_init_array+0x44>)
 8009aac:	f001 f832 	bl	800ab14 <_init>
 8009ab0:	1b64      	subs	r4, r4, r5
 8009ab2:	10a4      	asrs	r4, r4, #2
 8009ab4:	2600      	movs	r6, #0
 8009ab6:	42a6      	cmp	r6, r4
 8009ab8:	d105      	bne.n	8009ac6 <__libc_init_array+0x2e>
 8009aba:	bd70      	pop	{r4, r5, r6, pc}
 8009abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ac0:	4798      	blx	r3
 8009ac2:	3601      	adds	r6, #1
 8009ac4:	e7ee      	b.n	8009aa4 <__libc_init_array+0xc>
 8009ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aca:	4798      	blx	r3
 8009acc:	3601      	adds	r6, #1
 8009ace:	e7f2      	b.n	8009ab6 <__libc_init_array+0x1e>
 8009ad0:	0800ad80 	.word	0x0800ad80
 8009ad4:	0800ad80 	.word	0x0800ad80
 8009ad8:	0800ad80 	.word	0x0800ad80
 8009adc:	0800ad84 	.word	0x0800ad84

08009ae0 <memcpy>:
 8009ae0:	440a      	add	r2, r1
 8009ae2:	4291      	cmp	r1, r2
 8009ae4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ae8:	d100      	bne.n	8009aec <memcpy+0xc>
 8009aea:	4770      	bx	lr
 8009aec:	b510      	push	{r4, lr}
 8009aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009af2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009af6:	4291      	cmp	r1, r2
 8009af8:	d1f9      	bne.n	8009aee <memcpy+0xe>
 8009afa:	bd10      	pop	{r4, pc}

08009afc <memset>:
 8009afc:	4402      	add	r2, r0
 8009afe:	4603      	mov	r3, r0
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d100      	bne.n	8009b06 <memset+0xa>
 8009b04:	4770      	bx	lr
 8009b06:	f803 1b01 	strb.w	r1, [r3], #1
 8009b0a:	e7f9      	b.n	8009b00 <memset+0x4>

08009b0c <iprintf>:
 8009b0c:	b40f      	push	{r0, r1, r2, r3}
 8009b0e:	4b0a      	ldr	r3, [pc, #40]	; (8009b38 <iprintf+0x2c>)
 8009b10:	b513      	push	{r0, r1, r4, lr}
 8009b12:	681c      	ldr	r4, [r3, #0]
 8009b14:	b124      	cbz	r4, 8009b20 <iprintf+0x14>
 8009b16:	69a3      	ldr	r3, [r4, #24]
 8009b18:	b913      	cbnz	r3, 8009b20 <iprintf+0x14>
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	f000 fa5e 	bl	8009fdc <__sinit>
 8009b20:	ab05      	add	r3, sp, #20
 8009b22:	9a04      	ldr	r2, [sp, #16]
 8009b24:	68a1      	ldr	r1, [r4, #8]
 8009b26:	9301      	str	r3, [sp, #4]
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f000 fc67 	bl	800a3fc <_vfiprintf_r>
 8009b2e:	b002      	add	sp, #8
 8009b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b34:	b004      	add	sp, #16
 8009b36:	4770      	bx	lr
 8009b38:	20000044 	.word	0x20000044

08009b3c <_puts_r>:
 8009b3c:	b570      	push	{r4, r5, r6, lr}
 8009b3e:	460e      	mov	r6, r1
 8009b40:	4605      	mov	r5, r0
 8009b42:	b118      	cbz	r0, 8009b4c <_puts_r+0x10>
 8009b44:	6983      	ldr	r3, [r0, #24]
 8009b46:	b90b      	cbnz	r3, 8009b4c <_puts_r+0x10>
 8009b48:	f000 fa48 	bl	8009fdc <__sinit>
 8009b4c:	69ab      	ldr	r3, [r5, #24]
 8009b4e:	68ac      	ldr	r4, [r5, #8]
 8009b50:	b913      	cbnz	r3, 8009b58 <_puts_r+0x1c>
 8009b52:	4628      	mov	r0, r5
 8009b54:	f000 fa42 	bl	8009fdc <__sinit>
 8009b58:	4b2c      	ldr	r3, [pc, #176]	; (8009c0c <_puts_r+0xd0>)
 8009b5a:	429c      	cmp	r4, r3
 8009b5c:	d120      	bne.n	8009ba0 <_puts_r+0x64>
 8009b5e:	686c      	ldr	r4, [r5, #4]
 8009b60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b62:	07db      	lsls	r3, r3, #31
 8009b64:	d405      	bmi.n	8009b72 <_puts_r+0x36>
 8009b66:	89a3      	ldrh	r3, [r4, #12]
 8009b68:	0598      	lsls	r0, r3, #22
 8009b6a:	d402      	bmi.n	8009b72 <_puts_r+0x36>
 8009b6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b6e:	f000 fad3 	bl	800a118 <__retarget_lock_acquire_recursive>
 8009b72:	89a3      	ldrh	r3, [r4, #12]
 8009b74:	0719      	lsls	r1, r3, #28
 8009b76:	d51d      	bpl.n	8009bb4 <_puts_r+0x78>
 8009b78:	6923      	ldr	r3, [r4, #16]
 8009b7a:	b1db      	cbz	r3, 8009bb4 <_puts_r+0x78>
 8009b7c:	3e01      	subs	r6, #1
 8009b7e:	68a3      	ldr	r3, [r4, #8]
 8009b80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009b84:	3b01      	subs	r3, #1
 8009b86:	60a3      	str	r3, [r4, #8]
 8009b88:	bb39      	cbnz	r1, 8009bda <_puts_r+0x9e>
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	da38      	bge.n	8009c00 <_puts_r+0xc4>
 8009b8e:	4622      	mov	r2, r4
 8009b90:	210a      	movs	r1, #10
 8009b92:	4628      	mov	r0, r5
 8009b94:	f000 f848 	bl	8009c28 <__swbuf_r>
 8009b98:	3001      	adds	r0, #1
 8009b9a:	d011      	beq.n	8009bc0 <_puts_r+0x84>
 8009b9c:	250a      	movs	r5, #10
 8009b9e:	e011      	b.n	8009bc4 <_puts_r+0x88>
 8009ba0:	4b1b      	ldr	r3, [pc, #108]	; (8009c10 <_puts_r+0xd4>)
 8009ba2:	429c      	cmp	r4, r3
 8009ba4:	d101      	bne.n	8009baa <_puts_r+0x6e>
 8009ba6:	68ac      	ldr	r4, [r5, #8]
 8009ba8:	e7da      	b.n	8009b60 <_puts_r+0x24>
 8009baa:	4b1a      	ldr	r3, [pc, #104]	; (8009c14 <_puts_r+0xd8>)
 8009bac:	429c      	cmp	r4, r3
 8009bae:	bf08      	it	eq
 8009bb0:	68ec      	ldreq	r4, [r5, #12]
 8009bb2:	e7d5      	b.n	8009b60 <_puts_r+0x24>
 8009bb4:	4621      	mov	r1, r4
 8009bb6:	4628      	mov	r0, r5
 8009bb8:	f000 f888 	bl	8009ccc <__swsetup_r>
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	d0dd      	beq.n	8009b7c <_puts_r+0x40>
 8009bc0:	f04f 35ff 	mov.w	r5, #4294967295
 8009bc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bc6:	07da      	lsls	r2, r3, #31
 8009bc8:	d405      	bmi.n	8009bd6 <_puts_r+0x9a>
 8009bca:	89a3      	ldrh	r3, [r4, #12]
 8009bcc:	059b      	lsls	r3, r3, #22
 8009bce:	d402      	bmi.n	8009bd6 <_puts_r+0x9a>
 8009bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bd2:	f000 faa2 	bl	800a11a <__retarget_lock_release_recursive>
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	bd70      	pop	{r4, r5, r6, pc}
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	da04      	bge.n	8009be8 <_puts_r+0xac>
 8009bde:	69a2      	ldr	r2, [r4, #24]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	dc06      	bgt.n	8009bf2 <_puts_r+0xb6>
 8009be4:	290a      	cmp	r1, #10
 8009be6:	d004      	beq.n	8009bf2 <_puts_r+0xb6>
 8009be8:	6823      	ldr	r3, [r4, #0]
 8009bea:	1c5a      	adds	r2, r3, #1
 8009bec:	6022      	str	r2, [r4, #0]
 8009bee:	7019      	strb	r1, [r3, #0]
 8009bf0:	e7c5      	b.n	8009b7e <_puts_r+0x42>
 8009bf2:	4622      	mov	r2, r4
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	f000 f817 	bl	8009c28 <__swbuf_r>
 8009bfa:	3001      	adds	r0, #1
 8009bfc:	d1bf      	bne.n	8009b7e <_puts_r+0x42>
 8009bfe:	e7df      	b.n	8009bc0 <_puts_r+0x84>
 8009c00:	6823      	ldr	r3, [r4, #0]
 8009c02:	250a      	movs	r5, #10
 8009c04:	1c5a      	adds	r2, r3, #1
 8009c06:	6022      	str	r2, [r4, #0]
 8009c08:	701d      	strb	r5, [r3, #0]
 8009c0a:	e7db      	b.n	8009bc4 <_puts_r+0x88>
 8009c0c:	0800ad04 	.word	0x0800ad04
 8009c10:	0800ad24 	.word	0x0800ad24
 8009c14:	0800ace4 	.word	0x0800ace4

08009c18 <puts>:
 8009c18:	4b02      	ldr	r3, [pc, #8]	; (8009c24 <puts+0xc>)
 8009c1a:	4601      	mov	r1, r0
 8009c1c:	6818      	ldr	r0, [r3, #0]
 8009c1e:	f7ff bf8d 	b.w	8009b3c <_puts_r>
 8009c22:	bf00      	nop
 8009c24:	20000044 	.word	0x20000044

08009c28 <__swbuf_r>:
 8009c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2a:	460e      	mov	r6, r1
 8009c2c:	4614      	mov	r4, r2
 8009c2e:	4605      	mov	r5, r0
 8009c30:	b118      	cbz	r0, 8009c3a <__swbuf_r+0x12>
 8009c32:	6983      	ldr	r3, [r0, #24]
 8009c34:	b90b      	cbnz	r3, 8009c3a <__swbuf_r+0x12>
 8009c36:	f000 f9d1 	bl	8009fdc <__sinit>
 8009c3a:	4b21      	ldr	r3, [pc, #132]	; (8009cc0 <__swbuf_r+0x98>)
 8009c3c:	429c      	cmp	r4, r3
 8009c3e:	d12b      	bne.n	8009c98 <__swbuf_r+0x70>
 8009c40:	686c      	ldr	r4, [r5, #4]
 8009c42:	69a3      	ldr	r3, [r4, #24]
 8009c44:	60a3      	str	r3, [r4, #8]
 8009c46:	89a3      	ldrh	r3, [r4, #12]
 8009c48:	071a      	lsls	r2, r3, #28
 8009c4a:	d52f      	bpl.n	8009cac <__swbuf_r+0x84>
 8009c4c:	6923      	ldr	r3, [r4, #16]
 8009c4e:	b36b      	cbz	r3, 8009cac <__swbuf_r+0x84>
 8009c50:	6923      	ldr	r3, [r4, #16]
 8009c52:	6820      	ldr	r0, [r4, #0]
 8009c54:	1ac0      	subs	r0, r0, r3
 8009c56:	6963      	ldr	r3, [r4, #20]
 8009c58:	b2f6      	uxtb	r6, r6
 8009c5a:	4283      	cmp	r3, r0
 8009c5c:	4637      	mov	r7, r6
 8009c5e:	dc04      	bgt.n	8009c6a <__swbuf_r+0x42>
 8009c60:	4621      	mov	r1, r4
 8009c62:	4628      	mov	r0, r5
 8009c64:	f000 f926 	bl	8009eb4 <_fflush_r>
 8009c68:	bb30      	cbnz	r0, 8009cb8 <__swbuf_r+0x90>
 8009c6a:	68a3      	ldr	r3, [r4, #8]
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	60a3      	str	r3, [r4, #8]
 8009c70:	6823      	ldr	r3, [r4, #0]
 8009c72:	1c5a      	adds	r2, r3, #1
 8009c74:	6022      	str	r2, [r4, #0]
 8009c76:	701e      	strb	r6, [r3, #0]
 8009c78:	6963      	ldr	r3, [r4, #20]
 8009c7a:	3001      	adds	r0, #1
 8009c7c:	4283      	cmp	r3, r0
 8009c7e:	d004      	beq.n	8009c8a <__swbuf_r+0x62>
 8009c80:	89a3      	ldrh	r3, [r4, #12]
 8009c82:	07db      	lsls	r3, r3, #31
 8009c84:	d506      	bpl.n	8009c94 <__swbuf_r+0x6c>
 8009c86:	2e0a      	cmp	r6, #10
 8009c88:	d104      	bne.n	8009c94 <__swbuf_r+0x6c>
 8009c8a:	4621      	mov	r1, r4
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	f000 f911 	bl	8009eb4 <_fflush_r>
 8009c92:	b988      	cbnz	r0, 8009cb8 <__swbuf_r+0x90>
 8009c94:	4638      	mov	r0, r7
 8009c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c98:	4b0a      	ldr	r3, [pc, #40]	; (8009cc4 <__swbuf_r+0x9c>)
 8009c9a:	429c      	cmp	r4, r3
 8009c9c:	d101      	bne.n	8009ca2 <__swbuf_r+0x7a>
 8009c9e:	68ac      	ldr	r4, [r5, #8]
 8009ca0:	e7cf      	b.n	8009c42 <__swbuf_r+0x1a>
 8009ca2:	4b09      	ldr	r3, [pc, #36]	; (8009cc8 <__swbuf_r+0xa0>)
 8009ca4:	429c      	cmp	r4, r3
 8009ca6:	bf08      	it	eq
 8009ca8:	68ec      	ldreq	r4, [r5, #12]
 8009caa:	e7ca      	b.n	8009c42 <__swbuf_r+0x1a>
 8009cac:	4621      	mov	r1, r4
 8009cae:	4628      	mov	r0, r5
 8009cb0:	f000 f80c 	bl	8009ccc <__swsetup_r>
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	d0cb      	beq.n	8009c50 <__swbuf_r+0x28>
 8009cb8:	f04f 37ff 	mov.w	r7, #4294967295
 8009cbc:	e7ea      	b.n	8009c94 <__swbuf_r+0x6c>
 8009cbe:	bf00      	nop
 8009cc0:	0800ad04 	.word	0x0800ad04
 8009cc4:	0800ad24 	.word	0x0800ad24
 8009cc8:	0800ace4 	.word	0x0800ace4

08009ccc <__swsetup_r>:
 8009ccc:	4b32      	ldr	r3, [pc, #200]	; (8009d98 <__swsetup_r+0xcc>)
 8009cce:	b570      	push	{r4, r5, r6, lr}
 8009cd0:	681d      	ldr	r5, [r3, #0]
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	460c      	mov	r4, r1
 8009cd6:	b125      	cbz	r5, 8009ce2 <__swsetup_r+0x16>
 8009cd8:	69ab      	ldr	r3, [r5, #24]
 8009cda:	b913      	cbnz	r3, 8009ce2 <__swsetup_r+0x16>
 8009cdc:	4628      	mov	r0, r5
 8009cde:	f000 f97d 	bl	8009fdc <__sinit>
 8009ce2:	4b2e      	ldr	r3, [pc, #184]	; (8009d9c <__swsetup_r+0xd0>)
 8009ce4:	429c      	cmp	r4, r3
 8009ce6:	d10f      	bne.n	8009d08 <__swsetup_r+0x3c>
 8009ce8:	686c      	ldr	r4, [r5, #4]
 8009cea:	89a3      	ldrh	r3, [r4, #12]
 8009cec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cf0:	0719      	lsls	r1, r3, #28
 8009cf2:	d42c      	bmi.n	8009d4e <__swsetup_r+0x82>
 8009cf4:	06dd      	lsls	r5, r3, #27
 8009cf6:	d411      	bmi.n	8009d1c <__swsetup_r+0x50>
 8009cf8:	2309      	movs	r3, #9
 8009cfa:	6033      	str	r3, [r6, #0]
 8009cfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d00:	81a3      	strh	r3, [r4, #12]
 8009d02:	f04f 30ff 	mov.w	r0, #4294967295
 8009d06:	e03e      	b.n	8009d86 <__swsetup_r+0xba>
 8009d08:	4b25      	ldr	r3, [pc, #148]	; (8009da0 <__swsetup_r+0xd4>)
 8009d0a:	429c      	cmp	r4, r3
 8009d0c:	d101      	bne.n	8009d12 <__swsetup_r+0x46>
 8009d0e:	68ac      	ldr	r4, [r5, #8]
 8009d10:	e7eb      	b.n	8009cea <__swsetup_r+0x1e>
 8009d12:	4b24      	ldr	r3, [pc, #144]	; (8009da4 <__swsetup_r+0xd8>)
 8009d14:	429c      	cmp	r4, r3
 8009d16:	bf08      	it	eq
 8009d18:	68ec      	ldreq	r4, [r5, #12]
 8009d1a:	e7e6      	b.n	8009cea <__swsetup_r+0x1e>
 8009d1c:	0758      	lsls	r0, r3, #29
 8009d1e:	d512      	bpl.n	8009d46 <__swsetup_r+0x7a>
 8009d20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d22:	b141      	cbz	r1, 8009d36 <__swsetup_r+0x6a>
 8009d24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d28:	4299      	cmp	r1, r3
 8009d2a:	d002      	beq.n	8009d32 <__swsetup_r+0x66>
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	f000 fa5b 	bl	800a1e8 <_free_r>
 8009d32:	2300      	movs	r3, #0
 8009d34:	6363      	str	r3, [r4, #52]	; 0x34
 8009d36:	89a3      	ldrh	r3, [r4, #12]
 8009d38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d3c:	81a3      	strh	r3, [r4, #12]
 8009d3e:	2300      	movs	r3, #0
 8009d40:	6063      	str	r3, [r4, #4]
 8009d42:	6923      	ldr	r3, [r4, #16]
 8009d44:	6023      	str	r3, [r4, #0]
 8009d46:	89a3      	ldrh	r3, [r4, #12]
 8009d48:	f043 0308 	orr.w	r3, r3, #8
 8009d4c:	81a3      	strh	r3, [r4, #12]
 8009d4e:	6923      	ldr	r3, [r4, #16]
 8009d50:	b94b      	cbnz	r3, 8009d66 <__swsetup_r+0x9a>
 8009d52:	89a3      	ldrh	r3, [r4, #12]
 8009d54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d5c:	d003      	beq.n	8009d66 <__swsetup_r+0x9a>
 8009d5e:	4621      	mov	r1, r4
 8009d60:	4630      	mov	r0, r6
 8009d62:	f000 fa01 	bl	800a168 <__smakebuf_r>
 8009d66:	89a0      	ldrh	r0, [r4, #12]
 8009d68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d6c:	f010 0301 	ands.w	r3, r0, #1
 8009d70:	d00a      	beq.n	8009d88 <__swsetup_r+0xbc>
 8009d72:	2300      	movs	r3, #0
 8009d74:	60a3      	str	r3, [r4, #8]
 8009d76:	6963      	ldr	r3, [r4, #20]
 8009d78:	425b      	negs	r3, r3
 8009d7a:	61a3      	str	r3, [r4, #24]
 8009d7c:	6923      	ldr	r3, [r4, #16]
 8009d7e:	b943      	cbnz	r3, 8009d92 <__swsetup_r+0xc6>
 8009d80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d84:	d1ba      	bne.n	8009cfc <__swsetup_r+0x30>
 8009d86:	bd70      	pop	{r4, r5, r6, pc}
 8009d88:	0781      	lsls	r1, r0, #30
 8009d8a:	bf58      	it	pl
 8009d8c:	6963      	ldrpl	r3, [r4, #20]
 8009d8e:	60a3      	str	r3, [r4, #8]
 8009d90:	e7f4      	b.n	8009d7c <__swsetup_r+0xb0>
 8009d92:	2000      	movs	r0, #0
 8009d94:	e7f7      	b.n	8009d86 <__swsetup_r+0xba>
 8009d96:	bf00      	nop
 8009d98:	20000044 	.word	0x20000044
 8009d9c:	0800ad04 	.word	0x0800ad04
 8009da0:	0800ad24 	.word	0x0800ad24
 8009da4:	0800ace4 	.word	0x0800ace4

08009da8 <__sflush_r>:
 8009da8:	898a      	ldrh	r2, [r1, #12]
 8009daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dae:	4605      	mov	r5, r0
 8009db0:	0710      	lsls	r0, r2, #28
 8009db2:	460c      	mov	r4, r1
 8009db4:	d458      	bmi.n	8009e68 <__sflush_r+0xc0>
 8009db6:	684b      	ldr	r3, [r1, #4]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	dc05      	bgt.n	8009dc8 <__sflush_r+0x20>
 8009dbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	dc02      	bgt.n	8009dc8 <__sflush_r+0x20>
 8009dc2:	2000      	movs	r0, #0
 8009dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dca:	2e00      	cmp	r6, #0
 8009dcc:	d0f9      	beq.n	8009dc2 <__sflush_r+0x1a>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009dd4:	682f      	ldr	r7, [r5, #0]
 8009dd6:	602b      	str	r3, [r5, #0]
 8009dd8:	d032      	beq.n	8009e40 <__sflush_r+0x98>
 8009dda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ddc:	89a3      	ldrh	r3, [r4, #12]
 8009dde:	075a      	lsls	r2, r3, #29
 8009de0:	d505      	bpl.n	8009dee <__sflush_r+0x46>
 8009de2:	6863      	ldr	r3, [r4, #4]
 8009de4:	1ac0      	subs	r0, r0, r3
 8009de6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009de8:	b10b      	cbz	r3, 8009dee <__sflush_r+0x46>
 8009dea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009dec:	1ac0      	subs	r0, r0, r3
 8009dee:	2300      	movs	r3, #0
 8009df0:	4602      	mov	r2, r0
 8009df2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009df4:	6a21      	ldr	r1, [r4, #32]
 8009df6:	4628      	mov	r0, r5
 8009df8:	47b0      	blx	r6
 8009dfa:	1c43      	adds	r3, r0, #1
 8009dfc:	89a3      	ldrh	r3, [r4, #12]
 8009dfe:	d106      	bne.n	8009e0e <__sflush_r+0x66>
 8009e00:	6829      	ldr	r1, [r5, #0]
 8009e02:	291d      	cmp	r1, #29
 8009e04:	d82c      	bhi.n	8009e60 <__sflush_r+0xb8>
 8009e06:	4a2a      	ldr	r2, [pc, #168]	; (8009eb0 <__sflush_r+0x108>)
 8009e08:	40ca      	lsrs	r2, r1
 8009e0a:	07d6      	lsls	r6, r2, #31
 8009e0c:	d528      	bpl.n	8009e60 <__sflush_r+0xb8>
 8009e0e:	2200      	movs	r2, #0
 8009e10:	6062      	str	r2, [r4, #4]
 8009e12:	04d9      	lsls	r1, r3, #19
 8009e14:	6922      	ldr	r2, [r4, #16]
 8009e16:	6022      	str	r2, [r4, #0]
 8009e18:	d504      	bpl.n	8009e24 <__sflush_r+0x7c>
 8009e1a:	1c42      	adds	r2, r0, #1
 8009e1c:	d101      	bne.n	8009e22 <__sflush_r+0x7a>
 8009e1e:	682b      	ldr	r3, [r5, #0]
 8009e20:	b903      	cbnz	r3, 8009e24 <__sflush_r+0x7c>
 8009e22:	6560      	str	r0, [r4, #84]	; 0x54
 8009e24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e26:	602f      	str	r7, [r5, #0]
 8009e28:	2900      	cmp	r1, #0
 8009e2a:	d0ca      	beq.n	8009dc2 <__sflush_r+0x1a>
 8009e2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e30:	4299      	cmp	r1, r3
 8009e32:	d002      	beq.n	8009e3a <__sflush_r+0x92>
 8009e34:	4628      	mov	r0, r5
 8009e36:	f000 f9d7 	bl	800a1e8 <_free_r>
 8009e3a:	2000      	movs	r0, #0
 8009e3c:	6360      	str	r0, [r4, #52]	; 0x34
 8009e3e:	e7c1      	b.n	8009dc4 <__sflush_r+0x1c>
 8009e40:	6a21      	ldr	r1, [r4, #32]
 8009e42:	2301      	movs	r3, #1
 8009e44:	4628      	mov	r0, r5
 8009e46:	47b0      	blx	r6
 8009e48:	1c41      	adds	r1, r0, #1
 8009e4a:	d1c7      	bne.n	8009ddc <__sflush_r+0x34>
 8009e4c:	682b      	ldr	r3, [r5, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d0c4      	beq.n	8009ddc <__sflush_r+0x34>
 8009e52:	2b1d      	cmp	r3, #29
 8009e54:	d001      	beq.n	8009e5a <__sflush_r+0xb2>
 8009e56:	2b16      	cmp	r3, #22
 8009e58:	d101      	bne.n	8009e5e <__sflush_r+0xb6>
 8009e5a:	602f      	str	r7, [r5, #0]
 8009e5c:	e7b1      	b.n	8009dc2 <__sflush_r+0x1a>
 8009e5e:	89a3      	ldrh	r3, [r4, #12]
 8009e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e64:	81a3      	strh	r3, [r4, #12]
 8009e66:	e7ad      	b.n	8009dc4 <__sflush_r+0x1c>
 8009e68:	690f      	ldr	r7, [r1, #16]
 8009e6a:	2f00      	cmp	r7, #0
 8009e6c:	d0a9      	beq.n	8009dc2 <__sflush_r+0x1a>
 8009e6e:	0793      	lsls	r3, r2, #30
 8009e70:	680e      	ldr	r6, [r1, #0]
 8009e72:	bf08      	it	eq
 8009e74:	694b      	ldreq	r3, [r1, #20]
 8009e76:	600f      	str	r7, [r1, #0]
 8009e78:	bf18      	it	ne
 8009e7a:	2300      	movne	r3, #0
 8009e7c:	eba6 0807 	sub.w	r8, r6, r7
 8009e80:	608b      	str	r3, [r1, #8]
 8009e82:	f1b8 0f00 	cmp.w	r8, #0
 8009e86:	dd9c      	ble.n	8009dc2 <__sflush_r+0x1a>
 8009e88:	6a21      	ldr	r1, [r4, #32]
 8009e8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e8c:	4643      	mov	r3, r8
 8009e8e:	463a      	mov	r2, r7
 8009e90:	4628      	mov	r0, r5
 8009e92:	47b0      	blx	r6
 8009e94:	2800      	cmp	r0, #0
 8009e96:	dc06      	bgt.n	8009ea6 <__sflush_r+0xfe>
 8009e98:	89a3      	ldrh	r3, [r4, #12]
 8009e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e9e:	81a3      	strh	r3, [r4, #12]
 8009ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea4:	e78e      	b.n	8009dc4 <__sflush_r+0x1c>
 8009ea6:	4407      	add	r7, r0
 8009ea8:	eba8 0800 	sub.w	r8, r8, r0
 8009eac:	e7e9      	b.n	8009e82 <__sflush_r+0xda>
 8009eae:	bf00      	nop
 8009eb0:	20400001 	.word	0x20400001

08009eb4 <_fflush_r>:
 8009eb4:	b538      	push	{r3, r4, r5, lr}
 8009eb6:	690b      	ldr	r3, [r1, #16]
 8009eb8:	4605      	mov	r5, r0
 8009eba:	460c      	mov	r4, r1
 8009ebc:	b913      	cbnz	r3, 8009ec4 <_fflush_r+0x10>
 8009ebe:	2500      	movs	r5, #0
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	bd38      	pop	{r3, r4, r5, pc}
 8009ec4:	b118      	cbz	r0, 8009ece <_fflush_r+0x1a>
 8009ec6:	6983      	ldr	r3, [r0, #24]
 8009ec8:	b90b      	cbnz	r3, 8009ece <_fflush_r+0x1a>
 8009eca:	f000 f887 	bl	8009fdc <__sinit>
 8009ece:	4b14      	ldr	r3, [pc, #80]	; (8009f20 <_fflush_r+0x6c>)
 8009ed0:	429c      	cmp	r4, r3
 8009ed2:	d11b      	bne.n	8009f0c <_fflush_r+0x58>
 8009ed4:	686c      	ldr	r4, [r5, #4]
 8009ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d0ef      	beq.n	8009ebe <_fflush_r+0xa>
 8009ede:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ee0:	07d0      	lsls	r0, r2, #31
 8009ee2:	d404      	bmi.n	8009eee <_fflush_r+0x3a>
 8009ee4:	0599      	lsls	r1, r3, #22
 8009ee6:	d402      	bmi.n	8009eee <_fflush_r+0x3a>
 8009ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009eea:	f000 f915 	bl	800a118 <__retarget_lock_acquire_recursive>
 8009eee:	4628      	mov	r0, r5
 8009ef0:	4621      	mov	r1, r4
 8009ef2:	f7ff ff59 	bl	8009da8 <__sflush_r>
 8009ef6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ef8:	07da      	lsls	r2, r3, #31
 8009efa:	4605      	mov	r5, r0
 8009efc:	d4e0      	bmi.n	8009ec0 <_fflush_r+0xc>
 8009efe:	89a3      	ldrh	r3, [r4, #12]
 8009f00:	059b      	lsls	r3, r3, #22
 8009f02:	d4dd      	bmi.n	8009ec0 <_fflush_r+0xc>
 8009f04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f06:	f000 f908 	bl	800a11a <__retarget_lock_release_recursive>
 8009f0a:	e7d9      	b.n	8009ec0 <_fflush_r+0xc>
 8009f0c:	4b05      	ldr	r3, [pc, #20]	; (8009f24 <_fflush_r+0x70>)
 8009f0e:	429c      	cmp	r4, r3
 8009f10:	d101      	bne.n	8009f16 <_fflush_r+0x62>
 8009f12:	68ac      	ldr	r4, [r5, #8]
 8009f14:	e7df      	b.n	8009ed6 <_fflush_r+0x22>
 8009f16:	4b04      	ldr	r3, [pc, #16]	; (8009f28 <_fflush_r+0x74>)
 8009f18:	429c      	cmp	r4, r3
 8009f1a:	bf08      	it	eq
 8009f1c:	68ec      	ldreq	r4, [r5, #12]
 8009f1e:	e7da      	b.n	8009ed6 <_fflush_r+0x22>
 8009f20:	0800ad04 	.word	0x0800ad04
 8009f24:	0800ad24 	.word	0x0800ad24
 8009f28:	0800ace4 	.word	0x0800ace4

08009f2c <std>:
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	b510      	push	{r4, lr}
 8009f30:	4604      	mov	r4, r0
 8009f32:	e9c0 3300 	strd	r3, r3, [r0]
 8009f36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f3a:	6083      	str	r3, [r0, #8]
 8009f3c:	8181      	strh	r1, [r0, #12]
 8009f3e:	6643      	str	r3, [r0, #100]	; 0x64
 8009f40:	81c2      	strh	r2, [r0, #14]
 8009f42:	6183      	str	r3, [r0, #24]
 8009f44:	4619      	mov	r1, r3
 8009f46:	2208      	movs	r2, #8
 8009f48:	305c      	adds	r0, #92	; 0x5c
 8009f4a:	f7ff fdd7 	bl	8009afc <memset>
 8009f4e:	4b05      	ldr	r3, [pc, #20]	; (8009f64 <std+0x38>)
 8009f50:	6263      	str	r3, [r4, #36]	; 0x24
 8009f52:	4b05      	ldr	r3, [pc, #20]	; (8009f68 <std+0x3c>)
 8009f54:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f56:	4b05      	ldr	r3, [pc, #20]	; (8009f6c <std+0x40>)
 8009f58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f5a:	4b05      	ldr	r3, [pc, #20]	; (8009f70 <std+0x44>)
 8009f5c:	6224      	str	r4, [r4, #32]
 8009f5e:	6323      	str	r3, [r4, #48]	; 0x30
 8009f60:	bd10      	pop	{r4, pc}
 8009f62:	bf00      	nop
 8009f64:	0800a9a5 	.word	0x0800a9a5
 8009f68:	0800a9c7 	.word	0x0800a9c7
 8009f6c:	0800a9ff 	.word	0x0800a9ff
 8009f70:	0800aa23 	.word	0x0800aa23

08009f74 <_cleanup_r>:
 8009f74:	4901      	ldr	r1, [pc, #4]	; (8009f7c <_cleanup_r+0x8>)
 8009f76:	f000 b8af 	b.w	800a0d8 <_fwalk_reent>
 8009f7a:	bf00      	nop
 8009f7c:	08009eb5 	.word	0x08009eb5

08009f80 <__sfmoreglue>:
 8009f80:	b570      	push	{r4, r5, r6, lr}
 8009f82:	2268      	movs	r2, #104	; 0x68
 8009f84:	1e4d      	subs	r5, r1, #1
 8009f86:	4355      	muls	r5, r2
 8009f88:	460e      	mov	r6, r1
 8009f8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f8e:	f000 f997 	bl	800a2c0 <_malloc_r>
 8009f92:	4604      	mov	r4, r0
 8009f94:	b140      	cbz	r0, 8009fa8 <__sfmoreglue+0x28>
 8009f96:	2100      	movs	r1, #0
 8009f98:	e9c0 1600 	strd	r1, r6, [r0]
 8009f9c:	300c      	adds	r0, #12
 8009f9e:	60a0      	str	r0, [r4, #8]
 8009fa0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009fa4:	f7ff fdaa 	bl	8009afc <memset>
 8009fa8:	4620      	mov	r0, r4
 8009faa:	bd70      	pop	{r4, r5, r6, pc}

08009fac <__sfp_lock_acquire>:
 8009fac:	4801      	ldr	r0, [pc, #4]	; (8009fb4 <__sfp_lock_acquire+0x8>)
 8009fae:	f000 b8b3 	b.w	800a118 <__retarget_lock_acquire_recursive>
 8009fb2:	bf00      	nop
 8009fb4:	200021f5 	.word	0x200021f5

08009fb8 <__sfp_lock_release>:
 8009fb8:	4801      	ldr	r0, [pc, #4]	; (8009fc0 <__sfp_lock_release+0x8>)
 8009fba:	f000 b8ae 	b.w	800a11a <__retarget_lock_release_recursive>
 8009fbe:	bf00      	nop
 8009fc0:	200021f5 	.word	0x200021f5

08009fc4 <__sinit_lock_acquire>:
 8009fc4:	4801      	ldr	r0, [pc, #4]	; (8009fcc <__sinit_lock_acquire+0x8>)
 8009fc6:	f000 b8a7 	b.w	800a118 <__retarget_lock_acquire_recursive>
 8009fca:	bf00      	nop
 8009fcc:	200021f6 	.word	0x200021f6

08009fd0 <__sinit_lock_release>:
 8009fd0:	4801      	ldr	r0, [pc, #4]	; (8009fd8 <__sinit_lock_release+0x8>)
 8009fd2:	f000 b8a2 	b.w	800a11a <__retarget_lock_release_recursive>
 8009fd6:	bf00      	nop
 8009fd8:	200021f6 	.word	0x200021f6

08009fdc <__sinit>:
 8009fdc:	b510      	push	{r4, lr}
 8009fde:	4604      	mov	r4, r0
 8009fe0:	f7ff fff0 	bl	8009fc4 <__sinit_lock_acquire>
 8009fe4:	69a3      	ldr	r3, [r4, #24]
 8009fe6:	b11b      	cbz	r3, 8009ff0 <__sinit+0x14>
 8009fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fec:	f7ff bff0 	b.w	8009fd0 <__sinit_lock_release>
 8009ff0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ff4:	6523      	str	r3, [r4, #80]	; 0x50
 8009ff6:	4b13      	ldr	r3, [pc, #76]	; (800a044 <__sinit+0x68>)
 8009ff8:	4a13      	ldr	r2, [pc, #76]	; (800a048 <__sinit+0x6c>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	62a2      	str	r2, [r4, #40]	; 0x28
 8009ffe:	42a3      	cmp	r3, r4
 800a000:	bf04      	itt	eq
 800a002:	2301      	moveq	r3, #1
 800a004:	61a3      	streq	r3, [r4, #24]
 800a006:	4620      	mov	r0, r4
 800a008:	f000 f820 	bl	800a04c <__sfp>
 800a00c:	6060      	str	r0, [r4, #4]
 800a00e:	4620      	mov	r0, r4
 800a010:	f000 f81c 	bl	800a04c <__sfp>
 800a014:	60a0      	str	r0, [r4, #8]
 800a016:	4620      	mov	r0, r4
 800a018:	f000 f818 	bl	800a04c <__sfp>
 800a01c:	2200      	movs	r2, #0
 800a01e:	60e0      	str	r0, [r4, #12]
 800a020:	2104      	movs	r1, #4
 800a022:	6860      	ldr	r0, [r4, #4]
 800a024:	f7ff ff82 	bl	8009f2c <std>
 800a028:	68a0      	ldr	r0, [r4, #8]
 800a02a:	2201      	movs	r2, #1
 800a02c:	2109      	movs	r1, #9
 800a02e:	f7ff ff7d 	bl	8009f2c <std>
 800a032:	68e0      	ldr	r0, [r4, #12]
 800a034:	2202      	movs	r2, #2
 800a036:	2112      	movs	r1, #18
 800a038:	f7ff ff78 	bl	8009f2c <std>
 800a03c:	2301      	movs	r3, #1
 800a03e:	61a3      	str	r3, [r4, #24]
 800a040:	e7d2      	b.n	8009fe8 <__sinit+0xc>
 800a042:	bf00      	nop
 800a044:	0800ace0 	.word	0x0800ace0
 800a048:	08009f75 	.word	0x08009f75

0800a04c <__sfp>:
 800a04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a04e:	4607      	mov	r7, r0
 800a050:	f7ff ffac 	bl	8009fac <__sfp_lock_acquire>
 800a054:	4b1e      	ldr	r3, [pc, #120]	; (800a0d0 <__sfp+0x84>)
 800a056:	681e      	ldr	r6, [r3, #0]
 800a058:	69b3      	ldr	r3, [r6, #24]
 800a05a:	b913      	cbnz	r3, 800a062 <__sfp+0x16>
 800a05c:	4630      	mov	r0, r6
 800a05e:	f7ff ffbd 	bl	8009fdc <__sinit>
 800a062:	3648      	adds	r6, #72	; 0x48
 800a064:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a068:	3b01      	subs	r3, #1
 800a06a:	d503      	bpl.n	800a074 <__sfp+0x28>
 800a06c:	6833      	ldr	r3, [r6, #0]
 800a06e:	b30b      	cbz	r3, 800a0b4 <__sfp+0x68>
 800a070:	6836      	ldr	r6, [r6, #0]
 800a072:	e7f7      	b.n	800a064 <__sfp+0x18>
 800a074:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a078:	b9d5      	cbnz	r5, 800a0b0 <__sfp+0x64>
 800a07a:	4b16      	ldr	r3, [pc, #88]	; (800a0d4 <__sfp+0x88>)
 800a07c:	60e3      	str	r3, [r4, #12]
 800a07e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a082:	6665      	str	r5, [r4, #100]	; 0x64
 800a084:	f000 f847 	bl	800a116 <__retarget_lock_init_recursive>
 800a088:	f7ff ff96 	bl	8009fb8 <__sfp_lock_release>
 800a08c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a090:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a094:	6025      	str	r5, [r4, #0]
 800a096:	61a5      	str	r5, [r4, #24]
 800a098:	2208      	movs	r2, #8
 800a09a:	4629      	mov	r1, r5
 800a09c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a0a0:	f7ff fd2c 	bl	8009afc <memset>
 800a0a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a0a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0b0:	3468      	adds	r4, #104	; 0x68
 800a0b2:	e7d9      	b.n	800a068 <__sfp+0x1c>
 800a0b4:	2104      	movs	r1, #4
 800a0b6:	4638      	mov	r0, r7
 800a0b8:	f7ff ff62 	bl	8009f80 <__sfmoreglue>
 800a0bc:	4604      	mov	r4, r0
 800a0be:	6030      	str	r0, [r6, #0]
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	d1d5      	bne.n	800a070 <__sfp+0x24>
 800a0c4:	f7ff ff78 	bl	8009fb8 <__sfp_lock_release>
 800a0c8:	230c      	movs	r3, #12
 800a0ca:	603b      	str	r3, [r7, #0]
 800a0cc:	e7ee      	b.n	800a0ac <__sfp+0x60>
 800a0ce:	bf00      	nop
 800a0d0:	0800ace0 	.word	0x0800ace0
 800a0d4:	ffff0001 	.word	0xffff0001

0800a0d8 <_fwalk_reent>:
 800a0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0dc:	4606      	mov	r6, r0
 800a0de:	4688      	mov	r8, r1
 800a0e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a0e4:	2700      	movs	r7, #0
 800a0e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0ea:	f1b9 0901 	subs.w	r9, r9, #1
 800a0ee:	d505      	bpl.n	800a0fc <_fwalk_reent+0x24>
 800a0f0:	6824      	ldr	r4, [r4, #0]
 800a0f2:	2c00      	cmp	r4, #0
 800a0f4:	d1f7      	bne.n	800a0e6 <_fwalk_reent+0xe>
 800a0f6:	4638      	mov	r0, r7
 800a0f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0fc:	89ab      	ldrh	r3, [r5, #12]
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d907      	bls.n	800a112 <_fwalk_reent+0x3a>
 800a102:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a106:	3301      	adds	r3, #1
 800a108:	d003      	beq.n	800a112 <_fwalk_reent+0x3a>
 800a10a:	4629      	mov	r1, r5
 800a10c:	4630      	mov	r0, r6
 800a10e:	47c0      	blx	r8
 800a110:	4307      	orrs	r7, r0
 800a112:	3568      	adds	r5, #104	; 0x68
 800a114:	e7e9      	b.n	800a0ea <_fwalk_reent+0x12>

0800a116 <__retarget_lock_init_recursive>:
 800a116:	4770      	bx	lr

0800a118 <__retarget_lock_acquire_recursive>:
 800a118:	4770      	bx	lr

0800a11a <__retarget_lock_release_recursive>:
 800a11a:	4770      	bx	lr

0800a11c <__swhatbuf_r>:
 800a11c:	b570      	push	{r4, r5, r6, lr}
 800a11e:	460e      	mov	r6, r1
 800a120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a124:	2900      	cmp	r1, #0
 800a126:	b096      	sub	sp, #88	; 0x58
 800a128:	4614      	mov	r4, r2
 800a12a:	461d      	mov	r5, r3
 800a12c:	da08      	bge.n	800a140 <__swhatbuf_r+0x24>
 800a12e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	602a      	str	r2, [r5, #0]
 800a136:	061a      	lsls	r2, r3, #24
 800a138:	d410      	bmi.n	800a15c <__swhatbuf_r+0x40>
 800a13a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a13e:	e00e      	b.n	800a15e <__swhatbuf_r+0x42>
 800a140:	466a      	mov	r2, sp
 800a142:	f000 fc95 	bl	800aa70 <_fstat_r>
 800a146:	2800      	cmp	r0, #0
 800a148:	dbf1      	blt.n	800a12e <__swhatbuf_r+0x12>
 800a14a:	9a01      	ldr	r2, [sp, #4]
 800a14c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a150:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a154:	425a      	negs	r2, r3
 800a156:	415a      	adcs	r2, r3
 800a158:	602a      	str	r2, [r5, #0]
 800a15a:	e7ee      	b.n	800a13a <__swhatbuf_r+0x1e>
 800a15c:	2340      	movs	r3, #64	; 0x40
 800a15e:	2000      	movs	r0, #0
 800a160:	6023      	str	r3, [r4, #0]
 800a162:	b016      	add	sp, #88	; 0x58
 800a164:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a168 <__smakebuf_r>:
 800a168:	898b      	ldrh	r3, [r1, #12]
 800a16a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a16c:	079d      	lsls	r5, r3, #30
 800a16e:	4606      	mov	r6, r0
 800a170:	460c      	mov	r4, r1
 800a172:	d507      	bpl.n	800a184 <__smakebuf_r+0x1c>
 800a174:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a178:	6023      	str	r3, [r4, #0]
 800a17a:	6123      	str	r3, [r4, #16]
 800a17c:	2301      	movs	r3, #1
 800a17e:	6163      	str	r3, [r4, #20]
 800a180:	b002      	add	sp, #8
 800a182:	bd70      	pop	{r4, r5, r6, pc}
 800a184:	ab01      	add	r3, sp, #4
 800a186:	466a      	mov	r2, sp
 800a188:	f7ff ffc8 	bl	800a11c <__swhatbuf_r>
 800a18c:	9900      	ldr	r1, [sp, #0]
 800a18e:	4605      	mov	r5, r0
 800a190:	4630      	mov	r0, r6
 800a192:	f000 f895 	bl	800a2c0 <_malloc_r>
 800a196:	b948      	cbnz	r0, 800a1ac <__smakebuf_r+0x44>
 800a198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a19c:	059a      	lsls	r2, r3, #22
 800a19e:	d4ef      	bmi.n	800a180 <__smakebuf_r+0x18>
 800a1a0:	f023 0303 	bic.w	r3, r3, #3
 800a1a4:	f043 0302 	orr.w	r3, r3, #2
 800a1a8:	81a3      	strh	r3, [r4, #12]
 800a1aa:	e7e3      	b.n	800a174 <__smakebuf_r+0xc>
 800a1ac:	4b0d      	ldr	r3, [pc, #52]	; (800a1e4 <__smakebuf_r+0x7c>)
 800a1ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1b0:	89a3      	ldrh	r3, [r4, #12]
 800a1b2:	6020      	str	r0, [r4, #0]
 800a1b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1b8:	81a3      	strh	r3, [r4, #12]
 800a1ba:	9b00      	ldr	r3, [sp, #0]
 800a1bc:	6163      	str	r3, [r4, #20]
 800a1be:	9b01      	ldr	r3, [sp, #4]
 800a1c0:	6120      	str	r0, [r4, #16]
 800a1c2:	b15b      	cbz	r3, 800a1dc <__smakebuf_r+0x74>
 800a1c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	f000 fc63 	bl	800aa94 <_isatty_r>
 800a1ce:	b128      	cbz	r0, 800a1dc <__smakebuf_r+0x74>
 800a1d0:	89a3      	ldrh	r3, [r4, #12]
 800a1d2:	f023 0303 	bic.w	r3, r3, #3
 800a1d6:	f043 0301 	orr.w	r3, r3, #1
 800a1da:	81a3      	strh	r3, [r4, #12]
 800a1dc:	89a0      	ldrh	r0, [r4, #12]
 800a1de:	4305      	orrs	r5, r0
 800a1e0:	81a5      	strh	r5, [r4, #12]
 800a1e2:	e7cd      	b.n	800a180 <__smakebuf_r+0x18>
 800a1e4:	08009f75 	.word	0x08009f75

0800a1e8 <_free_r>:
 800a1e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1ea:	2900      	cmp	r1, #0
 800a1ec:	d044      	beq.n	800a278 <_free_r+0x90>
 800a1ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1f2:	9001      	str	r0, [sp, #4]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f1a1 0404 	sub.w	r4, r1, #4
 800a1fa:	bfb8      	it	lt
 800a1fc:	18e4      	addlt	r4, r4, r3
 800a1fe:	f000 fc6b 	bl	800aad8 <__malloc_lock>
 800a202:	4a1e      	ldr	r2, [pc, #120]	; (800a27c <_free_r+0x94>)
 800a204:	9801      	ldr	r0, [sp, #4]
 800a206:	6813      	ldr	r3, [r2, #0]
 800a208:	b933      	cbnz	r3, 800a218 <_free_r+0x30>
 800a20a:	6063      	str	r3, [r4, #4]
 800a20c:	6014      	str	r4, [r2, #0]
 800a20e:	b003      	add	sp, #12
 800a210:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a214:	f000 bc66 	b.w	800aae4 <__malloc_unlock>
 800a218:	42a3      	cmp	r3, r4
 800a21a:	d908      	bls.n	800a22e <_free_r+0x46>
 800a21c:	6825      	ldr	r5, [r4, #0]
 800a21e:	1961      	adds	r1, r4, r5
 800a220:	428b      	cmp	r3, r1
 800a222:	bf01      	itttt	eq
 800a224:	6819      	ldreq	r1, [r3, #0]
 800a226:	685b      	ldreq	r3, [r3, #4]
 800a228:	1949      	addeq	r1, r1, r5
 800a22a:	6021      	streq	r1, [r4, #0]
 800a22c:	e7ed      	b.n	800a20a <_free_r+0x22>
 800a22e:	461a      	mov	r2, r3
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	b10b      	cbz	r3, 800a238 <_free_r+0x50>
 800a234:	42a3      	cmp	r3, r4
 800a236:	d9fa      	bls.n	800a22e <_free_r+0x46>
 800a238:	6811      	ldr	r1, [r2, #0]
 800a23a:	1855      	adds	r5, r2, r1
 800a23c:	42a5      	cmp	r5, r4
 800a23e:	d10b      	bne.n	800a258 <_free_r+0x70>
 800a240:	6824      	ldr	r4, [r4, #0]
 800a242:	4421      	add	r1, r4
 800a244:	1854      	adds	r4, r2, r1
 800a246:	42a3      	cmp	r3, r4
 800a248:	6011      	str	r1, [r2, #0]
 800a24a:	d1e0      	bne.n	800a20e <_free_r+0x26>
 800a24c:	681c      	ldr	r4, [r3, #0]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	6053      	str	r3, [r2, #4]
 800a252:	4421      	add	r1, r4
 800a254:	6011      	str	r1, [r2, #0]
 800a256:	e7da      	b.n	800a20e <_free_r+0x26>
 800a258:	d902      	bls.n	800a260 <_free_r+0x78>
 800a25a:	230c      	movs	r3, #12
 800a25c:	6003      	str	r3, [r0, #0]
 800a25e:	e7d6      	b.n	800a20e <_free_r+0x26>
 800a260:	6825      	ldr	r5, [r4, #0]
 800a262:	1961      	adds	r1, r4, r5
 800a264:	428b      	cmp	r3, r1
 800a266:	bf04      	itt	eq
 800a268:	6819      	ldreq	r1, [r3, #0]
 800a26a:	685b      	ldreq	r3, [r3, #4]
 800a26c:	6063      	str	r3, [r4, #4]
 800a26e:	bf04      	itt	eq
 800a270:	1949      	addeq	r1, r1, r5
 800a272:	6021      	streq	r1, [r4, #0]
 800a274:	6054      	str	r4, [r2, #4]
 800a276:	e7ca      	b.n	800a20e <_free_r+0x26>
 800a278:	b003      	add	sp, #12
 800a27a:	bd30      	pop	{r4, r5, pc}
 800a27c:	200021f8 	.word	0x200021f8

0800a280 <sbrk_aligned>:
 800a280:	b570      	push	{r4, r5, r6, lr}
 800a282:	4e0e      	ldr	r6, [pc, #56]	; (800a2bc <sbrk_aligned+0x3c>)
 800a284:	460c      	mov	r4, r1
 800a286:	6831      	ldr	r1, [r6, #0]
 800a288:	4605      	mov	r5, r0
 800a28a:	b911      	cbnz	r1, 800a292 <sbrk_aligned+0x12>
 800a28c:	f000 fb7a 	bl	800a984 <_sbrk_r>
 800a290:	6030      	str	r0, [r6, #0]
 800a292:	4621      	mov	r1, r4
 800a294:	4628      	mov	r0, r5
 800a296:	f000 fb75 	bl	800a984 <_sbrk_r>
 800a29a:	1c43      	adds	r3, r0, #1
 800a29c:	d00a      	beq.n	800a2b4 <sbrk_aligned+0x34>
 800a29e:	1cc4      	adds	r4, r0, #3
 800a2a0:	f024 0403 	bic.w	r4, r4, #3
 800a2a4:	42a0      	cmp	r0, r4
 800a2a6:	d007      	beq.n	800a2b8 <sbrk_aligned+0x38>
 800a2a8:	1a21      	subs	r1, r4, r0
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	f000 fb6a 	bl	800a984 <_sbrk_r>
 800a2b0:	3001      	adds	r0, #1
 800a2b2:	d101      	bne.n	800a2b8 <sbrk_aligned+0x38>
 800a2b4:	f04f 34ff 	mov.w	r4, #4294967295
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	bd70      	pop	{r4, r5, r6, pc}
 800a2bc:	200021fc 	.word	0x200021fc

0800a2c0 <_malloc_r>:
 800a2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c4:	1ccd      	adds	r5, r1, #3
 800a2c6:	f025 0503 	bic.w	r5, r5, #3
 800a2ca:	3508      	adds	r5, #8
 800a2cc:	2d0c      	cmp	r5, #12
 800a2ce:	bf38      	it	cc
 800a2d0:	250c      	movcc	r5, #12
 800a2d2:	2d00      	cmp	r5, #0
 800a2d4:	4607      	mov	r7, r0
 800a2d6:	db01      	blt.n	800a2dc <_malloc_r+0x1c>
 800a2d8:	42a9      	cmp	r1, r5
 800a2da:	d905      	bls.n	800a2e8 <_malloc_r+0x28>
 800a2dc:	230c      	movs	r3, #12
 800a2de:	603b      	str	r3, [r7, #0]
 800a2e0:	2600      	movs	r6, #0
 800a2e2:	4630      	mov	r0, r6
 800a2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2e8:	4e2e      	ldr	r6, [pc, #184]	; (800a3a4 <_malloc_r+0xe4>)
 800a2ea:	f000 fbf5 	bl	800aad8 <__malloc_lock>
 800a2ee:	6833      	ldr	r3, [r6, #0]
 800a2f0:	461c      	mov	r4, r3
 800a2f2:	bb34      	cbnz	r4, 800a342 <_malloc_r+0x82>
 800a2f4:	4629      	mov	r1, r5
 800a2f6:	4638      	mov	r0, r7
 800a2f8:	f7ff ffc2 	bl	800a280 <sbrk_aligned>
 800a2fc:	1c43      	adds	r3, r0, #1
 800a2fe:	4604      	mov	r4, r0
 800a300:	d14d      	bne.n	800a39e <_malloc_r+0xde>
 800a302:	6834      	ldr	r4, [r6, #0]
 800a304:	4626      	mov	r6, r4
 800a306:	2e00      	cmp	r6, #0
 800a308:	d140      	bne.n	800a38c <_malloc_r+0xcc>
 800a30a:	6823      	ldr	r3, [r4, #0]
 800a30c:	4631      	mov	r1, r6
 800a30e:	4638      	mov	r0, r7
 800a310:	eb04 0803 	add.w	r8, r4, r3
 800a314:	f000 fb36 	bl	800a984 <_sbrk_r>
 800a318:	4580      	cmp	r8, r0
 800a31a:	d13a      	bne.n	800a392 <_malloc_r+0xd2>
 800a31c:	6821      	ldr	r1, [r4, #0]
 800a31e:	3503      	adds	r5, #3
 800a320:	1a6d      	subs	r5, r5, r1
 800a322:	f025 0503 	bic.w	r5, r5, #3
 800a326:	3508      	adds	r5, #8
 800a328:	2d0c      	cmp	r5, #12
 800a32a:	bf38      	it	cc
 800a32c:	250c      	movcc	r5, #12
 800a32e:	4629      	mov	r1, r5
 800a330:	4638      	mov	r0, r7
 800a332:	f7ff ffa5 	bl	800a280 <sbrk_aligned>
 800a336:	3001      	adds	r0, #1
 800a338:	d02b      	beq.n	800a392 <_malloc_r+0xd2>
 800a33a:	6823      	ldr	r3, [r4, #0]
 800a33c:	442b      	add	r3, r5
 800a33e:	6023      	str	r3, [r4, #0]
 800a340:	e00e      	b.n	800a360 <_malloc_r+0xa0>
 800a342:	6822      	ldr	r2, [r4, #0]
 800a344:	1b52      	subs	r2, r2, r5
 800a346:	d41e      	bmi.n	800a386 <_malloc_r+0xc6>
 800a348:	2a0b      	cmp	r2, #11
 800a34a:	d916      	bls.n	800a37a <_malloc_r+0xba>
 800a34c:	1961      	adds	r1, r4, r5
 800a34e:	42a3      	cmp	r3, r4
 800a350:	6025      	str	r5, [r4, #0]
 800a352:	bf18      	it	ne
 800a354:	6059      	strne	r1, [r3, #4]
 800a356:	6863      	ldr	r3, [r4, #4]
 800a358:	bf08      	it	eq
 800a35a:	6031      	streq	r1, [r6, #0]
 800a35c:	5162      	str	r2, [r4, r5]
 800a35e:	604b      	str	r3, [r1, #4]
 800a360:	4638      	mov	r0, r7
 800a362:	f104 060b 	add.w	r6, r4, #11
 800a366:	f000 fbbd 	bl	800aae4 <__malloc_unlock>
 800a36a:	f026 0607 	bic.w	r6, r6, #7
 800a36e:	1d23      	adds	r3, r4, #4
 800a370:	1af2      	subs	r2, r6, r3
 800a372:	d0b6      	beq.n	800a2e2 <_malloc_r+0x22>
 800a374:	1b9b      	subs	r3, r3, r6
 800a376:	50a3      	str	r3, [r4, r2]
 800a378:	e7b3      	b.n	800a2e2 <_malloc_r+0x22>
 800a37a:	6862      	ldr	r2, [r4, #4]
 800a37c:	42a3      	cmp	r3, r4
 800a37e:	bf0c      	ite	eq
 800a380:	6032      	streq	r2, [r6, #0]
 800a382:	605a      	strne	r2, [r3, #4]
 800a384:	e7ec      	b.n	800a360 <_malloc_r+0xa0>
 800a386:	4623      	mov	r3, r4
 800a388:	6864      	ldr	r4, [r4, #4]
 800a38a:	e7b2      	b.n	800a2f2 <_malloc_r+0x32>
 800a38c:	4634      	mov	r4, r6
 800a38e:	6876      	ldr	r6, [r6, #4]
 800a390:	e7b9      	b.n	800a306 <_malloc_r+0x46>
 800a392:	230c      	movs	r3, #12
 800a394:	603b      	str	r3, [r7, #0]
 800a396:	4638      	mov	r0, r7
 800a398:	f000 fba4 	bl	800aae4 <__malloc_unlock>
 800a39c:	e7a1      	b.n	800a2e2 <_malloc_r+0x22>
 800a39e:	6025      	str	r5, [r4, #0]
 800a3a0:	e7de      	b.n	800a360 <_malloc_r+0xa0>
 800a3a2:	bf00      	nop
 800a3a4:	200021f8 	.word	0x200021f8

0800a3a8 <__sfputc_r>:
 800a3a8:	6893      	ldr	r3, [r2, #8]
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	b410      	push	{r4}
 800a3b0:	6093      	str	r3, [r2, #8]
 800a3b2:	da08      	bge.n	800a3c6 <__sfputc_r+0x1e>
 800a3b4:	6994      	ldr	r4, [r2, #24]
 800a3b6:	42a3      	cmp	r3, r4
 800a3b8:	db01      	blt.n	800a3be <__sfputc_r+0x16>
 800a3ba:	290a      	cmp	r1, #10
 800a3bc:	d103      	bne.n	800a3c6 <__sfputc_r+0x1e>
 800a3be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3c2:	f7ff bc31 	b.w	8009c28 <__swbuf_r>
 800a3c6:	6813      	ldr	r3, [r2, #0]
 800a3c8:	1c58      	adds	r0, r3, #1
 800a3ca:	6010      	str	r0, [r2, #0]
 800a3cc:	7019      	strb	r1, [r3, #0]
 800a3ce:	4608      	mov	r0, r1
 800a3d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3d4:	4770      	bx	lr

0800a3d6 <__sfputs_r>:
 800a3d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3d8:	4606      	mov	r6, r0
 800a3da:	460f      	mov	r7, r1
 800a3dc:	4614      	mov	r4, r2
 800a3de:	18d5      	adds	r5, r2, r3
 800a3e0:	42ac      	cmp	r4, r5
 800a3e2:	d101      	bne.n	800a3e8 <__sfputs_r+0x12>
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	e007      	b.n	800a3f8 <__sfputs_r+0x22>
 800a3e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ec:	463a      	mov	r2, r7
 800a3ee:	4630      	mov	r0, r6
 800a3f0:	f7ff ffda 	bl	800a3a8 <__sfputc_r>
 800a3f4:	1c43      	adds	r3, r0, #1
 800a3f6:	d1f3      	bne.n	800a3e0 <__sfputs_r+0xa>
 800a3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3fc <_vfiprintf_r>:
 800a3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a400:	460d      	mov	r5, r1
 800a402:	b09d      	sub	sp, #116	; 0x74
 800a404:	4614      	mov	r4, r2
 800a406:	4698      	mov	r8, r3
 800a408:	4606      	mov	r6, r0
 800a40a:	b118      	cbz	r0, 800a414 <_vfiprintf_r+0x18>
 800a40c:	6983      	ldr	r3, [r0, #24]
 800a40e:	b90b      	cbnz	r3, 800a414 <_vfiprintf_r+0x18>
 800a410:	f7ff fde4 	bl	8009fdc <__sinit>
 800a414:	4b89      	ldr	r3, [pc, #548]	; (800a63c <_vfiprintf_r+0x240>)
 800a416:	429d      	cmp	r5, r3
 800a418:	d11b      	bne.n	800a452 <_vfiprintf_r+0x56>
 800a41a:	6875      	ldr	r5, [r6, #4]
 800a41c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a41e:	07d9      	lsls	r1, r3, #31
 800a420:	d405      	bmi.n	800a42e <_vfiprintf_r+0x32>
 800a422:	89ab      	ldrh	r3, [r5, #12]
 800a424:	059a      	lsls	r2, r3, #22
 800a426:	d402      	bmi.n	800a42e <_vfiprintf_r+0x32>
 800a428:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a42a:	f7ff fe75 	bl	800a118 <__retarget_lock_acquire_recursive>
 800a42e:	89ab      	ldrh	r3, [r5, #12]
 800a430:	071b      	lsls	r3, r3, #28
 800a432:	d501      	bpl.n	800a438 <_vfiprintf_r+0x3c>
 800a434:	692b      	ldr	r3, [r5, #16]
 800a436:	b9eb      	cbnz	r3, 800a474 <_vfiprintf_r+0x78>
 800a438:	4629      	mov	r1, r5
 800a43a:	4630      	mov	r0, r6
 800a43c:	f7ff fc46 	bl	8009ccc <__swsetup_r>
 800a440:	b1c0      	cbz	r0, 800a474 <_vfiprintf_r+0x78>
 800a442:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a444:	07dc      	lsls	r4, r3, #31
 800a446:	d50e      	bpl.n	800a466 <_vfiprintf_r+0x6a>
 800a448:	f04f 30ff 	mov.w	r0, #4294967295
 800a44c:	b01d      	add	sp, #116	; 0x74
 800a44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a452:	4b7b      	ldr	r3, [pc, #492]	; (800a640 <_vfiprintf_r+0x244>)
 800a454:	429d      	cmp	r5, r3
 800a456:	d101      	bne.n	800a45c <_vfiprintf_r+0x60>
 800a458:	68b5      	ldr	r5, [r6, #8]
 800a45a:	e7df      	b.n	800a41c <_vfiprintf_r+0x20>
 800a45c:	4b79      	ldr	r3, [pc, #484]	; (800a644 <_vfiprintf_r+0x248>)
 800a45e:	429d      	cmp	r5, r3
 800a460:	bf08      	it	eq
 800a462:	68f5      	ldreq	r5, [r6, #12]
 800a464:	e7da      	b.n	800a41c <_vfiprintf_r+0x20>
 800a466:	89ab      	ldrh	r3, [r5, #12]
 800a468:	0598      	lsls	r0, r3, #22
 800a46a:	d4ed      	bmi.n	800a448 <_vfiprintf_r+0x4c>
 800a46c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a46e:	f7ff fe54 	bl	800a11a <__retarget_lock_release_recursive>
 800a472:	e7e9      	b.n	800a448 <_vfiprintf_r+0x4c>
 800a474:	2300      	movs	r3, #0
 800a476:	9309      	str	r3, [sp, #36]	; 0x24
 800a478:	2320      	movs	r3, #32
 800a47a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a47e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a482:	2330      	movs	r3, #48	; 0x30
 800a484:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a648 <_vfiprintf_r+0x24c>
 800a488:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a48c:	f04f 0901 	mov.w	r9, #1
 800a490:	4623      	mov	r3, r4
 800a492:	469a      	mov	sl, r3
 800a494:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a498:	b10a      	cbz	r2, 800a49e <_vfiprintf_r+0xa2>
 800a49a:	2a25      	cmp	r2, #37	; 0x25
 800a49c:	d1f9      	bne.n	800a492 <_vfiprintf_r+0x96>
 800a49e:	ebba 0b04 	subs.w	fp, sl, r4
 800a4a2:	d00b      	beq.n	800a4bc <_vfiprintf_r+0xc0>
 800a4a4:	465b      	mov	r3, fp
 800a4a6:	4622      	mov	r2, r4
 800a4a8:	4629      	mov	r1, r5
 800a4aa:	4630      	mov	r0, r6
 800a4ac:	f7ff ff93 	bl	800a3d6 <__sfputs_r>
 800a4b0:	3001      	adds	r0, #1
 800a4b2:	f000 80aa 	beq.w	800a60a <_vfiprintf_r+0x20e>
 800a4b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4b8:	445a      	add	r2, fp
 800a4ba:	9209      	str	r2, [sp, #36]	; 0x24
 800a4bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f000 80a2 	beq.w	800a60a <_vfiprintf_r+0x20e>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a4cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4d0:	f10a 0a01 	add.w	sl, sl, #1
 800a4d4:	9304      	str	r3, [sp, #16]
 800a4d6:	9307      	str	r3, [sp, #28]
 800a4d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4dc:	931a      	str	r3, [sp, #104]	; 0x68
 800a4de:	4654      	mov	r4, sl
 800a4e0:	2205      	movs	r2, #5
 800a4e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4e6:	4858      	ldr	r0, [pc, #352]	; (800a648 <_vfiprintf_r+0x24c>)
 800a4e8:	f7f5 fe72 	bl	80001d0 <memchr>
 800a4ec:	9a04      	ldr	r2, [sp, #16]
 800a4ee:	b9d8      	cbnz	r0, 800a528 <_vfiprintf_r+0x12c>
 800a4f0:	06d1      	lsls	r1, r2, #27
 800a4f2:	bf44      	itt	mi
 800a4f4:	2320      	movmi	r3, #32
 800a4f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4fa:	0713      	lsls	r3, r2, #28
 800a4fc:	bf44      	itt	mi
 800a4fe:	232b      	movmi	r3, #43	; 0x2b
 800a500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a504:	f89a 3000 	ldrb.w	r3, [sl]
 800a508:	2b2a      	cmp	r3, #42	; 0x2a
 800a50a:	d015      	beq.n	800a538 <_vfiprintf_r+0x13c>
 800a50c:	9a07      	ldr	r2, [sp, #28]
 800a50e:	4654      	mov	r4, sl
 800a510:	2000      	movs	r0, #0
 800a512:	f04f 0c0a 	mov.w	ip, #10
 800a516:	4621      	mov	r1, r4
 800a518:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a51c:	3b30      	subs	r3, #48	; 0x30
 800a51e:	2b09      	cmp	r3, #9
 800a520:	d94e      	bls.n	800a5c0 <_vfiprintf_r+0x1c4>
 800a522:	b1b0      	cbz	r0, 800a552 <_vfiprintf_r+0x156>
 800a524:	9207      	str	r2, [sp, #28]
 800a526:	e014      	b.n	800a552 <_vfiprintf_r+0x156>
 800a528:	eba0 0308 	sub.w	r3, r0, r8
 800a52c:	fa09 f303 	lsl.w	r3, r9, r3
 800a530:	4313      	orrs	r3, r2
 800a532:	9304      	str	r3, [sp, #16]
 800a534:	46a2      	mov	sl, r4
 800a536:	e7d2      	b.n	800a4de <_vfiprintf_r+0xe2>
 800a538:	9b03      	ldr	r3, [sp, #12]
 800a53a:	1d19      	adds	r1, r3, #4
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	9103      	str	r1, [sp, #12]
 800a540:	2b00      	cmp	r3, #0
 800a542:	bfbb      	ittet	lt
 800a544:	425b      	neglt	r3, r3
 800a546:	f042 0202 	orrlt.w	r2, r2, #2
 800a54a:	9307      	strge	r3, [sp, #28]
 800a54c:	9307      	strlt	r3, [sp, #28]
 800a54e:	bfb8      	it	lt
 800a550:	9204      	strlt	r2, [sp, #16]
 800a552:	7823      	ldrb	r3, [r4, #0]
 800a554:	2b2e      	cmp	r3, #46	; 0x2e
 800a556:	d10c      	bne.n	800a572 <_vfiprintf_r+0x176>
 800a558:	7863      	ldrb	r3, [r4, #1]
 800a55a:	2b2a      	cmp	r3, #42	; 0x2a
 800a55c:	d135      	bne.n	800a5ca <_vfiprintf_r+0x1ce>
 800a55e:	9b03      	ldr	r3, [sp, #12]
 800a560:	1d1a      	adds	r2, r3, #4
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	9203      	str	r2, [sp, #12]
 800a566:	2b00      	cmp	r3, #0
 800a568:	bfb8      	it	lt
 800a56a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a56e:	3402      	adds	r4, #2
 800a570:	9305      	str	r3, [sp, #20]
 800a572:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a658 <_vfiprintf_r+0x25c>
 800a576:	7821      	ldrb	r1, [r4, #0]
 800a578:	2203      	movs	r2, #3
 800a57a:	4650      	mov	r0, sl
 800a57c:	f7f5 fe28 	bl	80001d0 <memchr>
 800a580:	b140      	cbz	r0, 800a594 <_vfiprintf_r+0x198>
 800a582:	2340      	movs	r3, #64	; 0x40
 800a584:	eba0 000a 	sub.w	r0, r0, sl
 800a588:	fa03 f000 	lsl.w	r0, r3, r0
 800a58c:	9b04      	ldr	r3, [sp, #16]
 800a58e:	4303      	orrs	r3, r0
 800a590:	3401      	adds	r4, #1
 800a592:	9304      	str	r3, [sp, #16]
 800a594:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a598:	482c      	ldr	r0, [pc, #176]	; (800a64c <_vfiprintf_r+0x250>)
 800a59a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a59e:	2206      	movs	r2, #6
 800a5a0:	f7f5 fe16 	bl	80001d0 <memchr>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	d03f      	beq.n	800a628 <_vfiprintf_r+0x22c>
 800a5a8:	4b29      	ldr	r3, [pc, #164]	; (800a650 <_vfiprintf_r+0x254>)
 800a5aa:	bb1b      	cbnz	r3, 800a5f4 <_vfiprintf_r+0x1f8>
 800a5ac:	9b03      	ldr	r3, [sp, #12]
 800a5ae:	3307      	adds	r3, #7
 800a5b0:	f023 0307 	bic.w	r3, r3, #7
 800a5b4:	3308      	adds	r3, #8
 800a5b6:	9303      	str	r3, [sp, #12]
 800a5b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ba:	443b      	add	r3, r7
 800a5bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a5be:	e767      	b.n	800a490 <_vfiprintf_r+0x94>
 800a5c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5c4:	460c      	mov	r4, r1
 800a5c6:	2001      	movs	r0, #1
 800a5c8:	e7a5      	b.n	800a516 <_vfiprintf_r+0x11a>
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	3401      	adds	r4, #1
 800a5ce:	9305      	str	r3, [sp, #20]
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	f04f 0c0a 	mov.w	ip, #10
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5dc:	3a30      	subs	r2, #48	; 0x30
 800a5de:	2a09      	cmp	r2, #9
 800a5e0:	d903      	bls.n	800a5ea <_vfiprintf_r+0x1ee>
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d0c5      	beq.n	800a572 <_vfiprintf_r+0x176>
 800a5e6:	9105      	str	r1, [sp, #20]
 800a5e8:	e7c3      	b.n	800a572 <_vfiprintf_r+0x176>
 800a5ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5ee:	4604      	mov	r4, r0
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e7f0      	b.n	800a5d6 <_vfiprintf_r+0x1da>
 800a5f4:	ab03      	add	r3, sp, #12
 800a5f6:	9300      	str	r3, [sp, #0]
 800a5f8:	462a      	mov	r2, r5
 800a5fa:	4b16      	ldr	r3, [pc, #88]	; (800a654 <_vfiprintf_r+0x258>)
 800a5fc:	a904      	add	r1, sp, #16
 800a5fe:	4630      	mov	r0, r6
 800a600:	f3af 8000 	nop.w
 800a604:	4607      	mov	r7, r0
 800a606:	1c78      	adds	r0, r7, #1
 800a608:	d1d6      	bne.n	800a5b8 <_vfiprintf_r+0x1bc>
 800a60a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a60c:	07d9      	lsls	r1, r3, #31
 800a60e:	d405      	bmi.n	800a61c <_vfiprintf_r+0x220>
 800a610:	89ab      	ldrh	r3, [r5, #12]
 800a612:	059a      	lsls	r2, r3, #22
 800a614:	d402      	bmi.n	800a61c <_vfiprintf_r+0x220>
 800a616:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a618:	f7ff fd7f 	bl	800a11a <__retarget_lock_release_recursive>
 800a61c:	89ab      	ldrh	r3, [r5, #12]
 800a61e:	065b      	lsls	r3, r3, #25
 800a620:	f53f af12 	bmi.w	800a448 <_vfiprintf_r+0x4c>
 800a624:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a626:	e711      	b.n	800a44c <_vfiprintf_r+0x50>
 800a628:	ab03      	add	r3, sp, #12
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	462a      	mov	r2, r5
 800a62e:	4b09      	ldr	r3, [pc, #36]	; (800a654 <_vfiprintf_r+0x258>)
 800a630:	a904      	add	r1, sp, #16
 800a632:	4630      	mov	r0, r6
 800a634:	f000 f880 	bl	800a738 <_printf_i>
 800a638:	e7e4      	b.n	800a604 <_vfiprintf_r+0x208>
 800a63a:	bf00      	nop
 800a63c:	0800ad04 	.word	0x0800ad04
 800a640:	0800ad24 	.word	0x0800ad24
 800a644:	0800ace4 	.word	0x0800ace4
 800a648:	0800ad44 	.word	0x0800ad44
 800a64c:	0800ad4e 	.word	0x0800ad4e
 800a650:	00000000 	.word	0x00000000
 800a654:	0800a3d7 	.word	0x0800a3d7
 800a658:	0800ad4a 	.word	0x0800ad4a

0800a65c <_printf_common>:
 800a65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a660:	4616      	mov	r6, r2
 800a662:	4699      	mov	r9, r3
 800a664:	688a      	ldr	r2, [r1, #8]
 800a666:	690b      	ldr	r3, [r1, #16]
 800a668:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a66c:	4293      	cmp	r3, r2
 800a66e:	bfb8      	it	lt
 800a670:	4613      	movlt	r3, r2
 800a672:	6033      	str	r3, [r6, #0]
 800a674:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a678:	4607      	mov	r7, r0
 800a67a:	460c      	mov	r4, r1
 800a67c:	b10a      	cbz	r2, 800a682 <_printf_common+0x26>
 800a67e:	3301      	adds	r3, #1
 800a680:	6033      	str	r3, [r6, #0]
 800a682:	6823      	ldr	r3, [r4, #0]
 800a684:	0699      	lsls	r1, r3, #26
 800a686:	bf42      	ittt	mi
 800a688:	6833      	ldrmi	r3, [r6, #0]
 800a68a:	3302      	addmi	r3, #2
 800a68c:	6033      	strmi	r3, [r6, #0]
 800a68e:	6825      	ldr	r5, [r4, #0]
 800a690:	f015 0506 	ands.w	r5, r5, #6
 800a694:	d106      	bne.n	800a6a4 <_printf_common+0x48>
 800a696:	f104 0a19 	add.w	sl, r4, #25
 800a69a:	68e3      	ldr	r3, [r4, #12]
 800a69c:	6832      	ldr	r2, [r6, #0]
 800a69e:	1a9b      	subs	r3, r3, r2
 800a6a0:	42ab      	cmp	r3, r5
 800a6a2:	dc26      	bgt.n	800a6f2 <_printf_common+0x96>
 800a6a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a6a8:	1e13      	subs	r3, r2, #0
 800a6aa:	6822      	ldr	r2, [r4, #0]
 800a6ac:	bf18      	it	ne
 800a6ae:	2301      	movne	r3, #1
 800a6b0:	0692      	lsls	r2, r2, #26
 800a6b2:	d42b      	bmi.n	800a70c <_printf_common+0xb0>
 800a6b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6b8:	4649      	mov	r1, r9
 800a6ba:	4638      	mov	r0, r7
 800a6bc:	47c0      	blx	r8
 800a6be:	3001      	adds	r0, #1
 800a6c0:	d01e      	beq.n	800a700 <_printf_common+0xa4>
 800a6c2:	6823      	ldr	r3, [r4, #0]
 800a6c4:	68e5      	ldr	r5, [r4, #12]
 800a6c6:	6832      	ldr	r2, [r6, #0]
 800a6c8:	f003 0306 	and.w	r3, r3, #6
 800a6cc:	2b04      	cmp	r3, #4
 800a6ce:	bf08      	it	eq
 800a6d0:	1aad      	subeq	r5, r5, r2
 800a6d2:	68a3      	ldr	r3, [r4, #8]
 800a6d4:	6922      	ldr	r2, [r4, #16]
 800a6d6:	bf0c      	ite	eq
 800a6d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a6dc:	2500      	movne	r5, #0
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	bfc4      	itt	gt
 800a6e2:	1a9b      	subgt	r3, r3, r2
 800a6e4:	18ed      	addgt	r5, r5, r3
 800a6e6:	2600      	movs	r6, #0
 800a6e8:	341a      	adds	r4, #26
 800a6ea:	42b5      	cmp	r5, r6
 800a6ec:	d11a      	bne.n	800a724 <_printf_common+0xc8>
 800a6ee:	2000      	movs	r0, #0
 800a6f0:	e008      	b.n	800a704 <_printf_common+0xa8>
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	4652      	mov	r2, sl
 800a6f6:	4649      	mov	r1, r9
 800a6f8:	4638      	mov	r0, r7
 800a6fa:	47c0      	blx	r8
 800a6fc:	3001      	adds	r0, #1
 800a6fe:	d103      	bne.n	800a708 <_printf_common+0xac>
 800a700:	f04f 30ff 	mov.w	r0, #4294967295
 800a704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a708:	3501      	adds	r5, #1
 800a70a:	e7c6      	b.n	800a69a <_printf_common+0x3e>
 800a70c:	18e1      	adds	r1, r4, r3
 800a70e:	1c5a      	adds	r2, r3, #1
 800a710:	2030      	movs	r0, #48	; 0x30
 800a712:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a716:	4422      	add	r2, r4
 800a718:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a71c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a720:	3302      	adds	r3, #2
 800a722:	e7c7      	b.n	800a6b4 <_printf_common+0x58>
 800a724:	2301      	movs	r3, #1
 800a726:	4622      	mov	r2, r4
 800a728:	4649      	mov	r1, r9
 800a72a:	4638      	mov	r0, r7
 800a72c:	47c0      	blx	r8
 800a72e:	3001      	adds	r0, #1
 800a730:	d0e6      	beq.n	800a700 <_printf_common+0xa4>
 800a732:	3601      	adds	r6, #1
 800a734:	e7d9      	b.n	800a6ea <_printf_common+0x8e>
	...

0800a738 <_printf_i>:
 800a738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a73c:	7e0f      	ldrb	r7, [r1, #24]
 800a73e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a740:	2f78      	cmp	r7, #120	; 0x78
 800a742:	4691      	mov	r9, r2
 800a744:	4680      	mov	r8, r0
 800a746:	460c      	mov	r4, r1
 800a748:	469a      	mov	sl, r3
 800a74a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a74e:	d807      	bhi.n	800a760 <_printf_i+0x28>
 800a750:	2f62      	cmp	r7, #98	; 0x62
 800a752:	d80a      	bhi.n	800a76a <_printf_i+0x32>
 800a754:	2f00      	cmp	r7, #0
 800a756:	f000 80d8 	beq.w	800a90a <_printf_i+0x1d2>
 800a75a:	2f58      	cmp	r7, #88	; 0x58
 800a75c:	f000 80a3 	beq.w	800a8a6 <_printf_i+0x16e>
 800a760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a764:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a768:	e03a      	b.n	800a7e0 <_printf_i+0xa8>
 800a76a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a76e:	2b15      	cmp	r3, #21
 800a770:	d8f6      	bhi.n	800a760 <_printf_i+0x28>
 800a772:	a101      	add	r1, pc, #4	; (adr r1, 800a778 <_printf_i+0x40>)
 800a774:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a778:	0800a7d1 	.word	0x0800a7d1
 800a77c:	0800a7e5 	.word	0x0800a7e5
 800a780:	0800a761 	.word	0x0800a761
 800a784:	0800a761 	.word	0x0800a761
 800a788:	0800a761 	.word	0x0800a761
 800a78c:	0800a761 	.word	0x0800a761
 800a790:	0800a7e5 	.word	0x0800a7e5
 800a794:	0800a761 	.word	0x0800a761
 800a798:	0800a761 	.word	0x0800a761
 800a79c:	0800a761 	.word	0x0800a761
 800a7a0:	0800a761 	.word	0x0800a761
 800a7a4:	0800a8f1 	.word	0x0800a8f1
 800a7a8:	0800a815 	.word	0x0800a815
 800a7ac:	0800a8d3 	.word	0x0800a8d3
 800a7b0:	0800a761 	.word	0x0800a761
 800a7b4:	0800a761 	.word	0x0800a761
 800a7b8:	0800a913 	.word	0x0800a913
 800a7bc:	0800a761 	.word	0x0800a761
 800a7c0:	0800a815 	.word	0x0800a815
 800a7c4:	0800a761 	.word	0x0800a761
 800a7c8:	0800a761 	.word	0x0800a761
 800a7cc:	0800a8db 	.word	0x0800a8db
 800a7d0:	682b      	ldr	r3, [r5, #0]
 800a7d2:	1d1a      	adds	r2, r3, #4
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	602a      	str	r2, [r5, #0]
 800a7d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	e0a3      	b.n	800a92c <_printf_i+0x1f4>
 800a7e4:	6820      	ldr	r0, [r4, #0]
 800a7e6:	6829      	ldr	r1, [r5, #0]
 800a7e8:	0606      	lsls	r6, r0, #24
 800a7ea:	f101 0304 	add.w	r3, r1, #4
 800a7ee:	d50a      	bpl.n	800a806 <_printf_i+0xce>
 800a7f0:	680e      	ldr	r6, [r1, #0]
 800a7f2:	602b      	str	r3, [r5, #0]
 800a7f4:	2e00      	cmp	r6, #0
 800a7f6:	da03      	bge.n	800a800 <_printf_i+0xc8>
 800a7f8:	232d      	movs	r3, #45	; 0x2d
 800a7fa:	4276      	negs	r6, r6
 800a7fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a800:	485e      	ldr	r0, [pc, #376]	; (800a97c <_printf_i+0x244>)
 800a802:	230a      	movs	r3, #10
 800a804:	e019      	b.n	800a83a <_printf_i+0x102>
 800a806:	680e      	ldr	r6, [r1, #0]
 800a808:	602b      	str	r3, [r5, #0]
 800a80a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a80e:	bf18      	it	ne
 800a810:	b236      	sxthne	r6, r6
 800a812:	e7ef      	b.n	800a7f4 <_printf_i+0xbc>
 800a814:	682b      	ldr	r3, [r5, #0]
 800a816:	6820      	ldr	r0, [r4, #0]
 800a818:	1d19      	adds	r1, r3, #4
 800a81a:	6029      	str	r1, [r5, #0]
 800a81c:	0601      	lsls	r1, r0, #24
 800a81e:	d501      	bpl.n	800a824 <_printf_i+0xec>
 800a820:	681e      	ldr	r6, [r3, #0]
 800a822:	e002      	b.n	800a82a <_printf_i+0xf2>
 800a824:	0646      	lsls	r6, r0, #25
 800a826:	d5fb      	bpl.n	800a820 <_printf_i+0xe8>
 800a828:	881e      	ldrh	r6, [r3, #0]
 800a82a:	4854      	ldr	r0, [pc, #336]	; (800a97c <_printf_i+0x244>)
 800a82c:	2f6f      	cmp	r7, #111	; 0x6f
 800a82e:	bf0c      	ite	eq
 800a830:	2308      	moveq	r3, #8
 800a832:	230a      	movne	r3, #10
 800a834:	2100      	movs	r1, #0
 800a836:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a83a:	6865      	ldr	r5, [r4, #4]
 800a83c:	60a5      	str	r5, [r4, #8]
 800a83e:	2d00      	cmp	r5, #0
 800a840:	bfa2      	ittt	ge
 800a842:	6821      	ldrge	r1, [r4, #0]
 800a844:	f021 0104 	bicge.w	r1, r1, #4
 800a848:	6021      	strge	r1, [r4, #0]
 800a84a:	b90e      	cbnz	r6, 800a850 <_printf_i+0x118>
 800a84c:	2d00      	cmp	r5, #0
 800a84e:	d04d      	beq.n	800a8ec <_printf_i+0x1b4>
 800a850:	4615      	mov	r5, r2
 800a852:	fbb6 f1f3 	udiv	r1, r6, r3
 800a856:	fb03 6711 	mls	r7, r3, r1, r6
 800a85a:	5dc7      	ldrb	r7, [r0, r7]
 800a85c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a860:	4637      	mov	r7, r6
 800a862:	42bb      	cmp	r3, r7
 800a864:	460e      	mov	r6, r1
 800a866:	d9f4      	bls.n	800a852 <_printf_i+0x11a>
 800a868:	2b08      	cmp	r3, #8
 800a86a:	d10b      	bne.n	800a884 <_printf_i+0x14c>
 800a86c:	6823      	ldr	r3, [r4, #0]
 800a86e:	07de      	lsls	r6, r3, #31
 800a870:	d508      	bpl.n	800a884 <_printf_i+0x14c>
 800a872:	6923      	ldr	r3, [r4, #16]
 800a874:	6861      	ldr	r1, [r4, #4]
 800a876:	4299      	cmp	r1, r3
 800a878:	bfde      	ittt	le
 800a87a:	2330      	movle	r3, #48	; 0x30
 800a87c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a880:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a884:	1b52      	subs	r2, r2, r5
 800a886:	6122      	str	r2, [r4, #16]
 800a888:	f8cd a000 	str.w	sl, [sp]
 800a88c:	464b      	mov	r3, r9
 800a88e:	aa03      	add	r2, sp, #12
 800a890:	4621      	mov	r1, r4
 800a892:	4640      	mov	r0, r8
 800a894:	f7ff fee2 	bl	800a65c <_printf_common>
 800a898:	3001      	adds	r0, #1
 800a89a:	d14c      	bne.n	800a936 <_printf_i+0x1fe>
 800a89c:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a0:	b004      	add	sp, #16
 800a8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8a6:	4835      	ldr	r0, [pc, #212]	; (800a97c <_printf_i+0x244>)
 800a8a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a8ac:	6829      	ldr	r1, [r5, #0]
 800a8ae:	6823      	ldr	r3, [r4, #0]
 800a8b0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a8b4:	6029      	str	r1, [r5, #0]
 800a8b6:	061d      	lsls	r5, r3, #24
 800a8b8:	d514      	bpl.n	800a8e4 <_printf_i+0x1ac>
 800a8ba:	07df      	lsls	r7, r3, #31
 800a8bc:	bf44      	itt	mi
 800a8be:	f043 0320 	orrmi.w	r3, r3, #32
 800a8c2:	6023      	strmi	r3, [r4, #0]
 800a8c4:	b91e      	cbnz	r6, 800a8ce <_printf_i+0x196>
 800a8c6:	6823      	ldr	r3, [r4, #0]
 800a8c8:	f023 0320 	bic.w	r3, r3, #32
 800a8cc:	6023      	str	r3, [r4, #0]
 800a8ce:	2310      	movs	r3, #16
 800a8d0:	e7b0      	b.n	800a834 <_printf_i+0xfc>
 800a8d2:	6823      	ldr	r3, [r4, #0]
 800a8d4:	f043 0320 	orr.w	r3, r3, #32
 800a8d8:	6023      	str	r3, [r4, #0]
 800a8da:	2378      	movs	r3, #120	; 0x78
 800a8dc:	4828      	ldr	r0, [pc, #160]	; (800a980 <_printf_i+0x248>)
 800a8de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a8e2:	e7e3      	b.n	800a8ac <_printf_i+0x174>
 800a8e4:	0659      	lsls	r1, r3, #25
 800a8e6:	bf48      	it	mi
 800a8e8:	b2b6      	uxthmi	r6, r6
 800a8ea:	e7e6      	b.n	800a8ba <_printf_i+0x182>
 800a8ec:	4615      	mov	r5, r2
 800a8ee:	e7bb      	b.n	800a868 <_printf_i+0x130>
 800a8f0:	682b      	ldr	r3, [r5, #0]
 800a8f2:	6826      	ldr	r6, [r4, #0]
 800a8f4:	6961      	ldr	r1, [r4, #20]
 800a8f6:	1d18      	adds	r0, r3, #4
 800a8f8:	6028      	str	r0, [r5, #0]
 800a8fa:	0635      	lsls	r5, r6, #24
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	d501      	bpl.n	800a904 <_printf_i+0x1cc>
 800a900:	6019      	str	r1, [r3, #0]
 800a902:	e002      	b.n	800a90a <_printf_i+0x1d2>
 800a904:	0670      	lsls	r0, r6, #25
 800a906:	d5fb      	bpl.n	800a900 <_printf_i+0x1c8>
 800a908:	8019      	strh	r1, [r3, #0]
 800a90a:	2300      	movs	r3, #0
 800a90c:	6123      	str	r3, [r4, #16]
 800a90e:	4615      	mov	r5, r2
 800a910:	e7ba      	b.n	800a888 <_printf_i+0x150>
 800a912:	682b      	ldr	r3, [r5, #0]
 800a914:	1d1a      	adds	r2, r3, #4
 800a916:	602a      	str	r2, [r5, #0]
 800a918:	681d      	ldr	r5, [r3, #0]
 800a91a:	6862      	ldr	r2, [r4, #4]
 800a91c:	2100      	movs	r1, #0
 800a91e:	4628      	mov	r0, r5
 800a920:	f7f5 fc56 	bl	80001d0 <memchr>
 800a924:	b108      	cbz	r0, 800a92a <_printf_i+0x1f2>
 800a926:	1b40      	subs	r0, r0, r5
 800a928:	6060      	str	r0, [r4, #4]
 800a92a:	6863      	ldr	r3, [r4, #4]
 800a92c:	6123      	str	r3, [r4, #16]
 800a92e:	2300      	movs	r3, #0
 800a930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a934:	e7a8      	b.n	800a888 <_printf_i+0x150>
 800a936:	6923      	ldr	r3, [r4, #16]
 800a938:	462a      	mov	r2, r5
 800a93a:	4649      	mov	r1, r9
 800a93c:	4640      	mov	r0, r8
 800a93e:	47d0      	blx	sl
 800a940:	3001      	adds	r0, #1
 800a942:	d0ab      	beq.n	800a89c <_printf_i+0x164>
 800a944:	6823      	ldr	r3, [r4, #0]
 800a946:	079b      	lsls	r3, r3, #30
 800a948:	d413      	bmi.n	800a972 <_printf_i+0x23a>
 800a94a:	68e0      	ldr	r0, [r4, #12]
 800a94c:	9b03      	ldr	r3, [sp, #12]
 800a94e:	4298      	cmp	r0, r3
 800a950:	bfb8      	it	lt
 800a952:	4618      	movlt	r0, r3
 800a954:	e7a4      	b.n	800a8a0 <_printf_i+0x168>
 800a956:	2301      	movs	r3, #1
 800a958:	4632      	mov	r2, r6
 800a95a:	4649      	mov	r1, r9
 800a95c:	4640      	mov	r0, r8
 800a95e:	47d0      	blx	sl
 800a960:	3001      	adds	r0, #1
 800a962:	d09b      	beq.n	800a89c <_printf_i+0x164>
 800a964:	3501      	adds	r5, #1
 800a966:	68e3      	ldr	r3, [r4, #12]
 800a968:	9903      	ldr	r1, [sp, #12]
 800a96a:	1a5b      	subs	r3, r3, r1
 800a96c:	42ab      	cmp	r3, r5
 800a96e:	dcf2      	bgt.n	800a956 <_printf_i+0x21e>
 800a970:	e7eb      	b.n	800a94a <_printf_i+0x212>
 800a972:	2500      	movs	r5, #0
 800a974:	f104 0619 	add.w	r6, r4, #25
 800a978:	e7f5      	b.n	800a966 <_printf_i+0x22e>
 800a97a:	bf00      	nop
 800a97c:	0800ad55 	.word	0x0800ad55
 800a980:	0800ad66 	.word	0x0800ad66

0800a984 <_sbrk_r>:
 800a984:	b538      	push	{r3, r4, r5, lr}
 800a986:	4d06      	ldr	r5, [pc, #24]	; (800a9a0 <_sbrk_r+0x1c>)
 800a988:	2300      	movs	r3, #0
 800a98a:	4604      	mov	r4, r0
 800a98c:	4608      	mov	r0, r1
 800a98e:	602b      	str	r3, [r5, #0]
 800a990:	f7f6 ff18 	bl	80017c4 <_sbrk>
 800a994:	1c43      	adds	r3, r0, #1
 800a996:	d102      	bne.n	800a99e <_sbrk_r+0x1a>
 800a998:	682b      	ldr	r3, [r5, #0]
 800a99a:	b103      	cbz	r3, 800a99e <_sbrk_r+0x1a>
 800a99c:	6023      	str	r3, [r4, #0]
 800a99e:	bd38      	pop	{r3, r4, r5, pc}
 800a9a0:	20002200 	.word	0x20002200

0800a9a4 <__sread>:
 800a9a4:	b510      	push	{r4, lr}
 800a9a6:	460c      	mov	r4, r1
 800a9a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9ac:	f000 f8a0 	bl	800aaf0 <_read_r>
 800a9b0:	2800      	cmp	r0, #0
 800a9b2:	bfab      	itete	ge
 800a9b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a9b6:	89a3      	ldrhlt	r3, [r4, #12]
 800a9b8:	181b      	addge	r3, r3, r0
 800a9ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a9be:	bfac      	ite	ge
 800a9c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a9c2:	81a3      	strhlt	r3, [r4, #12]
 800a9c4:	bd10      	pop	{r4, pc}

0800a9c6 <__swrite>:
 800a9c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ca:	461f      	mov	r7, r3
 800a9cc:	898b      	ldrh	r3, [r1, #12]
 800a9ce:	05db      	lsls	r3, r3, #23
 800a9d0:	4605      	mov	r5, r0
 800a9d2:	460c      	mov	r4, r1
 800a9d4:	4616      	mov	r6, r2
 800a9d6:	d505      	bpl.n	800a9e4 <__swrite+0x1e>
 800a9d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9dc:	2302      	movs	r3, #2
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f000 f868 	bl	800aab4 <_lseek_r>
 800a9e4:	89a3      	ldrh	r3, [r4, #12]
 800a9e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9ee:	81a3      	strh	r3, [r4, #12]
 800a9f0:	4632      	mov	r2, r6
 800a9f2:	463b      	mov	r3, r7
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9fa:	f000 b817 	b.w	800aa2c <_write_r>

0800a9fe <__sseek>:
 800a9fe:	b510      	push	{r4, lr}
 800aa00:	460c      	mov	r4, r1
 800aa02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa06:	f000 f855 	bl	800aab4 <_lseek_r>
 800aa0a:	1c43      	adds	r3, r0, #1
 800aa0c:	89a3      	ldrh	r3, [r4, #12]
 800aa0e:	bf15      	itete	ne
 800aa10:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa1a:	81a3      	strheq	r3, [r4, #12]
 800aa1c:	bf18      	it	ne
 800aa1e:	81a3      	strhne	r3, [r4, #12]
 800aa20:	bd10      	pop	{r4, pc}

0800aa22 <__sclose>:
 800aa22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa26:	f000 b813 	b.w	800aa50 <_close_r>
	...

0800aa2c <_write_r>:
 800aa2c:	b538      	push	{r3, r4, r5, lr}
 800aa2e:	4d07      	ldr	r5, [pc, #28]	; (800aa4c <_write_r+0x20>)
 800aa30:	4604      	mov	r4, r0
 800aa32:	4608      	mov	r0, r1
 800aa34:	4611      	mov	r1, r2
 800aa36:	2200      	movs	r2, #0
 800aa38:	602a      	str	r2, [r5, #0]
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	f7f6 f990 	bl	8000d60 <_write>
 800aa40:	1c43      	adds	r3, r0, #1
 800aa42:	d102      	bne.n	800aa4a <_write_r+0x1e>
 800aa44:	682b      	ldr	r3, [r5, #0]
 800aa46:	b103      	cbz	r3, 800aa4a <_write_r+0x1e>
 800aa48:	6023      	str	r3, [r4, #0]
 800aa4a:	bd38      	pop	{r3, r4, r5, pc}
 800aa4c:	20002200 	.word	0x20002200

0800aa50 <_close_r>:
 800aa50:	b538      	push	{r3, r4, r5, lr}
 800aa52:	4d06      	ldr	r5, [pc, #24]	; (800aa6c <_close_r+0x1c>)
 800aa54:	2300      	movs	r3, #0
 800aa56:	4604      	mov	r4, r0
 800aa58:	4608      	mov	r0, r1
 800aa5a:	602b      	str	r3, [r5, #0]
 800aa5c:	f7f6 fe7d 	bl	800175a <_close>
 800aa60:	1c43      	adds	r3, r0, #1
 800aa62:	d102      	bne.n	800aa6a <_close_r+0x1a>
 800aa64:	682b      	ldr	r3, [r5, #0]
 800aa66:	b103      	cbz	r3, 800aa6a <_close_r+0x1a>
 800aa68:	6023      	str	r3, [r4, #0]
 800aa6a:	bd38      	pop	{r3, r4, r5, pc}
 800aa6c:	20002200 	.word	0x20002200

0800aa70 <_fstat_r>:
 800aa70:	b538      	push	{r3, r4, r5, lr}
 800aa72:	4d07      	ldr	r5, [pc, #28]	; (800aa90 <_fstat_r+0x20>)
 800aa74:	2300      	movs	r3, #0
 800aa76:	4604      	mov	r4, r0
 800aa78:	4608      	mov	r0, r1
 800aa7a:	4611      	mov	r1, r2
 800aa7c:	602b      	str	r3, [r5, #0]
 800aa7e:	f7f6 fe78 	bl	8001772 <_fstat>
 800aa82:	1c43      	adds	r3, r0, #1
 800aa84:	d102      	bne.n	800aa8c <_fstat_r+0x1c>
 800aa86:	682b      	ldr	r3, [r5, #0]
 800aa88:	b103      	cbz	r3, 800aa8c <_fstat_r+0x1c>
 800aa8a:	6023      	str	r3, [r4, #0]
 800aa8c:	bd38      	pop	{r3, r4, r5, pc}
 800aa8e:	bf00      	nop
 800aa90:	20002200 	.word	0x20002200

0800aa94 <_isatty_r>:
 800aa94:	b538      	push	{r3, r4, r5, lr}
 800aa96:	4d06      	ldr	r5, [pc, #24]	; (800aab0 <_isatty_r+0x1c>)
 800aa98:	2300      	movs	r3, #0
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	4608      	mov	r0, r1
 800aa9e:	602b      	str	r3, [r5, #0]
 800aaa0:	f7f6 fe77 	bl	8001792 <_isatty>
 800aaa4:	1c43      	adds	r3, r0, #1
 800aaa6:	d102      	bne.n	800aaae <_isatty_r+0x1a>
 800aaa8:	682b      	ldr	r3, [r5, #0]
 800aaaa:	b103      	cbz	r3, 800aaae <_isatty_r+0x1a>
 800aaac:	6023      	str	r3, [r4, #0]
 800aaae:	bd38      	pop	{r3, r4, r5, pc}
 800aab0:	20002200 	.word	0x20002200

0800aab4 <_lseek_r>:
 800aab4:	b538      	push	{r3, r4, r5, lr}
 800aab6:	4d07      	ldr	r5, [pc, #28]	; (800aad4 <_lseek_r+0x20>)
 800aab8:	4604      	mov	r4, r0
 800aaba:	4608      	mov	r0, r1
 800aabc:	4611      	mov	r1, r2
 800aabe:	2200      	movs	r2, #0
 800aac0:	602a      	str	r2, [r5, #0]
 800aac2:	461a      	mov	r2, r3
 800aac4:	f7f6 fe70 	bl	80017a8 <_lseek>
 800aac8:	1c43      	adds	r3, r0, #1
 800aaca:	d102      	bne.n	800aad2 <_lseek_r+0x1e>
 800aacc:	682b      	ldr	r3, [r5, #0]
 800aace:	b103      	cbz	r3, 800aad2 <_lseek_r+0x1e>
 800aad0:	6023      	str	r3, [r4, #0]
 800aad2:	bd38      	pop	{r3, r4, r5, pc}
 800aad4:	20002200 	.word	0x20002200

0800aad8 <__malloc_lock>:
 800aad8:	4801      	ldr	r0, [pc, #4]	; (800aae0 <__malloc_lock+0x8>)
 800aada:	f7ff bb1d 	b.w	800a118 <__retarget_lock_acquire_recursive>
 800aade:	bf00      	nop
 800aae0:	200021f4 	.word	0x200021f4

0800aae4 <__malloc_unlock>:
 800aae4:	4801      	ldr	r0, [pc, #4]	; (800aaec <__malloc_unlock+0x8>)
 800aae6:	f7ff bb18 	b.w	800a11a <__retarget_lock_release_recursive>
 800aaea:	bf00      	nop
 800aaec:	200021f4 	.word	0x200021f4

0800aaf0 <_read_r>:
 800aaf0:	b538      	push	{r3, r4, r5, lr}
 800aaf2:	4d07      	ldr	r5, [pc, #28]	; (800ab10 <_read_r+0x20>)
 800aaf4:	4604      	mov	r4, r0
 800aaf6:	4608      	mov	r0, r1
 800aaf8:	4611      	mov	r1, r2
 800aafa:	2200      	movs	r2, #0
 800aafc:	602a      	str	r2, [r5, #0]
 800aafe:	461a      	mov	r2, r3
 800ab00:	f7f6 fe0e 	bl	8001720 <_read>
 800ab04:	1c43      	adds	r3, r0, #1
 800ab06:	d102      	bne.n	800ab0e <_read_r+0x1e>
 800ab08:	682b      	ldr	r3, [r5, #0]
 800ab0a:	b103      	cbz	r3, 800ab0e <_read_r+0x1e>
 800ab0c:	6023      	str	r3, [r4, #0]
 800ab0e:	bd38      	pop	{r3, r4, r5, pc}
 800ab10:	20002200 	.word	0x20002200

0800ab14 <_init>:
 800ab14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab16:	bf00      	nop
 800ab18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab1a:	bc08      	pop	{r3}
 800ab1c:	469e      	mov	lr, r3
 800ab1e:	4770      	bx	lr

0800ab20 <_fini>:
 800ab20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab22:	bf00      	nop
 800ab24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab26:	bc08      	pop	{r3}
 800ab28:	469e      	mov	lr, r3
 800ab2a:	4770      	bx	lr
